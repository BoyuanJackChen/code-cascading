[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # your code here\n    return test_tup1[0]!= test_tup2[0]\n    \n    \ndef compare_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the element in test_tup1 which appears in test_tup2.\n    If they match, return the element, otherwise return None.\n    '''\n    \n    # your code here\n    return test_tup1[0] if test_tup1[0] in test_tup2 else None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    i = 0\n    for e in test_tup1:\n        if e in test_tup2:\n            i += 1\n    return i\n    \ndef print_out_lists(lst):\n    '''\n    Write a function to print out the contents of a list.\n    '''\n    for element in lst:\n        print(element)\n        \ndef insert_elements(list_num,list_name):\n    '''\n    Write a function to insert element(s) at a specific location in a list.\n    '''\n    print(\"Insert element(s) at the location: {}\".format(list_num))\n    print(\"Inserted {}\".format(list_name))\n    \ndef remove_elements(list_num,list_name):\n    '''\n    Write a function to remove element(s) from a list.\n    '''\n    print(\"Remove element(s) from the list: {}\".format(list_name))\n    print(\"Removed {} from the list\".format(list_name))\n    print(\"List after removal: {}\".format(list_num))\n    \ndef find_n_similar_elements(list_num, list_name):\n    '''\n    Write a function to find the number of similar elements in a list.\n    '''\n    print(\"The number of similar elements in {}: {}\".format(list_name, similar_elements(list_num, list_name)))\n    \ndef set_value(list_name, list_value):\n    '''\n    Write a function to set an element of a list.\n    '''\n    print(\"Set {} to {}\".format(list_name, list_value))\n    print(\"List after set: {}\".format(list_name))\n    \ndef convert_to_list(list_name):\n    '''\n    Write a function that converts a given list to a new list.\n    '''\n    print(\"Convert {} to a list\".format(list_name))\n    new_list = []\n    for element in list_name:\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = list()\n    for tup in test_tup1 + test_tup2:\n        if tup in test_tup1 and tup in test_tup2:\n            shared_elems.append(tup)\n    return shared_elems\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [element for element in test_tup1 if element in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    if test_tup1 == None and test_tup2 == None:\n        return result\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return []\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    return tup1.intersection(tup2)\n    #return [tup1.intersection(tup2) for tup2 in test_tup2 for tup1 in test_tup1]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = []\n    list2 = []\n    for i in test_tup1:\n        if i in test_tup2:\n            list1.append(i)\n        else:\n            list2.append(i)\n    return list1, list2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    print(test_tup1, test_tup2)\n    while len(test_tup1)!= len(test_tup2):\n        if test_tup1[0] == test_tup2[0]:\n            test_tup1.pop(0)\n            test_tup2.pop(0)\n        else:\n            if len(test_tup1) < len(test_tup2):\n                test_tup1.append(test_tup2[0])\n                test_tup2.pop(0)\n            else:\n                test_tup1.append(test_tup2[0])\n                test_tup2.pop(0)\n    print(test_tup1, test_tup2)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 2:\n        return False\n    else:\n        return True\ndef is_prime(n):\n    '''\n    Check whether the number n is a prime number.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to determine if a number is prime or not.\n    '''\n    if n<2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_in_list(n):\n    '''\n    Write a python function to determine if an integer is in a list or not.\n    '''\n    for i in range(len(primes)):\n        if n%primes[i]==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n < 2):\n        return False\n    for i in range(2, n):\n        if(n % i == 0):\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3 or n == 5:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0) or (n % (i + 2) == 0):\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a python function to return the prime factors of a number.\n    '''\n    if n == 0 or n == 1:\n        return []\n    primes = []\n    primes.append(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef is_prime_factor(n):\n    '''\n    Write a python function to return if a given number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    elif n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            return False\n    return True\ndef is_prime_factors_seq(n):\n    '''\n    Write a python function to return the prime factors of a sequence of numbers.\n    '''\n    if n == 0:\n        return []\n    primes = []\n    if n == 2:\n        return primes\n    elif n == 3 or n == 5 or n == 7:\n        return primes\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef is_prime_factor_seq(n):\n    '''\n    Write a python function to return the prime factors of a sequence of numbers.\n    '''\n    if n == 0:\n        return []\n    primes = []\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef prime_factors_with_only_one_factor(n):\n    '''\n    Write a python function to return the prime factors of a given number.\n    '''\n    if n == 0 or n == 1:\n        return []\n    primes = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef is_prime_factor_with_only_one_factor(n):\n    '''\n    Write a python function to return if a given number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    elif n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            return False\n    return True\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        factorial = factorial * i\n    return factorial\ndef is_prime_factor_with_only_one_factor_seq(n):\n    '''\n    Write a python function to return the prime factors of a sequence of numbers.\n    '''\n    if n == 0 or n == 1:\n        return []\n    primes = []\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef factorial_with_only_one_factor_seq(n):\n    '''\n    Write a python function to calculate the factorial of a sequence of numbers.\n    '''\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(2, int(math.sqrt(n)) + 1, 2):\n        factorial = factorial * i\n    return factorial\ndef prime_factors_seq(n):\n    '''\n    Write a python function to return the prime factors of a sequence of numbers.\n    '''\n    if n == 0:\n        return []\n    primes = []\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef is_prime_factor_seq(n):\n    '''\n    Write a python function to return the prime factors of a sequence of numbers.\n    '''\n    if n == 0:\n        return []\n    primes = []\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef is_prime_factor_seq_with_only_one_factor_seq(n):\n    '''\n    Write a python function to return the prime factors of a sequence of numbers.\n    '''\n    if n == 0:\n        return []\n    primes = []\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef factorial_with_only_one_factor_seq_with_only_one_factor_seq(n):\n    '''\n    Write a python function to calculate the factorial of a sequence of numbers.\n    '''\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(2, int(math.sqrt(n)) + 1, 2):\n        factorial = factorial * i\n    return factorial\ndef is_prime_factor_seq_with_only_one_factor_seq_with_only_one_factor_seq(n):\n    '''\n    Write a python function to return the prime factors of a sequence of numbers.\n    '''\n    if n == 0:\n        return []\n    primes = []\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef prime_factor_with_only_one_factor_seq_with_only_one_factor_seq_with_only_one_factor_seq(n):\n    '''\n    Write a python function to calculate the prime factors of a sequence of numbers.\n    '''\n    if n == 0:\n        return []\n    primes = []\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            primes.append(i)\n            primes.append(int(n/i))\n    return primes\ndef is_prime_factor_seq_with_only_one_factor_seq_with_only_one_factor_seq_with_only_one_factor_seq(n):\n    '''\n    Write a python function to calculate the prime factors of a sequence of numbers.\n    ''"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3 or n == 5 or n == 7:\n        return True\n    return is_not_prime(n - 1)\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 2:\n        return True\n    if n == 3 or n == 5 or n == 7:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 4 or n == 6 or n == 8 or n == 9:\n        return True\n    return is_prime(n - 1)\ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common denominator.\n    '''\n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\ndef lcm(a, b):\n    '''\n    Write a python function to calculate the least common multiple.\n    '''\n    return a * b // math.gcd(a, b)\ndef smallest_eigenvector(A):\n    '''\n    Write a python function to find the smallest eigenvector.\n    '''\n    min_eigenvector = A[0, 0]\n    for i in range(1, A.shape[0]):\n        if A[i, i] < min_eigenvector:\n            min_eigenvector = A[i, i]\n    return min_eigenvector\ndef largest_eigenvector(A):\n    '''\n    Write a python function to find the largest eigenvector.\n    '''\n    max_eigenvector = A[0, 0]\n    for i in range(1, A.shape[0]):\n        if A[i, i] > max_eigenvector:\n            max_eigenvector = A[i, i]\n    return max_eigenvector\ndef coprime(a, b):\n    '''\n    Write a python function to determine if a and b are coprime.\n    '''\n    a = math.gcd(a, b)\n    if a == 1:\n        return True\n    elif a == b:\n        return True\n    else:\n        return False\ndef modinv(n, p):\n    '''\n    Write a python function to determine the modulus of a number.\n    '''\n    return pow(n, -p, p)\ndef modular_inverse(b, p):\n    '''\n    Write a python function to find the modular inverse of a number.\n    '''\n    if b == 0:\n        return 0\n    u = modinv(b, p)\n    return u\ndef mod_mult_inv(b, n):\n    '''\n    Write a python function to find the modular inverse of a number.\n    '''\n    return modular_inverse(b, n)\ndef modular_exponent(b, n, n_d):\n    '''\n    Write a python function to determine the modular exponent of a number.\n    '''\n    return (b * n_d) % n\ndef mod_pow(a, b, n):\n    '''\n    Write a python function to find the modular exponent of a number.\n    '''\n    return (a ** b) % n\ndef modular_exponent_iter(b, n):\n    '''\n    Write a python function to determine the modular exponent of a number.\n    '''\n    c = 1\n    while c < n:\n        c = c * b\n    return c % n\ndef modular_exponent_pow(a, b, n, p):\n    '''\n    Write a python function to determine the modular exponent of a number.\n    '''\n    return modular_exponent_iter(b, n) % p\ndef modular_exponent_pow_modinv(a, b, n, p, mod):\n    '''\n    Write a python function to determine the modular exponent of a number.\n    '''\n    return modular_exponent_iter(b, n) % p\ndef modular_exponent_mul(a, b, n):\n    '''\n    Write a python function to determine the modular exponent of a number.\n    '''\n    return (a * b) % n\ndef modular_exponent_mul_modinv(a, b, n, p):\n    '''\n    Write a python function to determine the modular exponent of a number.\n    '''\n    return modular_exponent_iter(b, n) % p\ndef modular_exponent_mul_exp(a, b, n):\n    '''\n    Write a python function to determine the modular exponent of a number.\n    '''\n    return (a * b) % n\ndef modular_exponent_mul_modinv(a, b, n, p):\n    '''\n    Write a python function to determine the modular exponent of a number.\n    '''\n    return modular_exponent_iter(b, n) % p\ndef mod_exp_to_exp(n, b, a):\n    '''\n    Write a python function to calculate the modular exponent.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return b\n    if n == 2:\n        return a\n    if n == 3:\n        return (a ** 2) % n\n    if n == 4:\n        return (a * a) % n\n    if n == 5:\n        return (b ** 3) % n\n    if n == 6:\n        return (a * a * a) % n\n    if n == 7:\n        return (b ** 3) % n\n    if n == 8:\n        return (a * a * a * a) % n\n    if n == 9:\n        return (a * a * a * a * a) % n\ndef mod_exp_to_exp_pow(n, b, a):\n    '''\n    Write a python function to calculate the modular exponent.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return b\n    if n == 2:\n        return a\n    if n == 3:\n        return (a ** 2) % n\n    if n == 4:\n        return (a * a) % n\n    if n == 5:\n        return (b ** 3) % n\n    if n == 6:\n        return (a * a * a) % n\n    if n == 7:\n        return (b ** 3) % n\n    if n == 8:\n        return (a * a * a * a) % n\n    if n == 9:\n        return (a * a * a * a * a) % n\ndef mod_exp_to_exp_pow_modinv(n, b, a):\n    '''\n    Write a python function to calculate the modular exponent.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return b\n    if n == 2:\n        return a\n    if n == 3:\n        return (a ** 2) % n\n    if n == 4:\n        return (a * a) % n\n    if n == 5:\n        return (b ** 3) % n\n    if n == 6:\n        return (a * a * a) % n\n    if n == 7:\n        return (b ** 3) % n\n    if n == 8:\n        return (a * a * a * a) % n\n    if n == 9:\n        return (a * a * a * a * a) % n\ndef mod_exp_to_exp_pow_modinv_pow(n, b, a):\n    '''\n    Write a python function to calculate the modular exponent.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return b\n    if n == 2:\n        return a\n    if n == 3:\n        return (a ** 2) % n\n    if n == 4:\n        return (a * a) % n\n    if n == 5:\n        return (b ** 3) % n\n    if n == 6:\n        return (a * a * a) % n\n    if n == 7:\n        return (b ** 3) % n\n    if n == 8:\n        return (a * a * a * a) % n\n    if n == 9:\n        return (a * a * a * a * a"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n < 2 or n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n % 5 == 0:\n        return False\n    else:\n        return True\ndef sum_primes(n):\n    '''\n    Function that returns the sum of the first n prime numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if is_prime(i):\n            s += i\n    return s\ndef is_prime(n):\n    '''\n    Function to identify whether a number is prime or not.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 3 or n == 5:\n        return False\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n    if n < 2:\n        return False\n    for i in range(6, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_sum_primes(n):\n    '''\n    Function that checks if a number is a sum of its prime numbers.\n    '''\n    if is_prime(n):\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n            return False\n        if n < 2:\n            return False\n        for i in range(6, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_subsequence(n):\n    '''\n    Function that checks if a number is a subset of another number.\n    '''\n    if n > 2:\n        if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n            return False\n        for i in range(6, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_superset(n):\n    '''\n    Function that checks if a number is a superset of another number.\n    '''\n    if n < 2:\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n            return False\n        for i in range(6, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_isomorphic(n):\n    '''\n    Function that checks if two numbers are isomorphic.\n    '''\n    if n < 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        for i in range(6, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    #convert the list to heap\n    for n in nums:\n        heapq.heappush(heap,n)\n    #determine the number of elements\n    k = 0\n    #traverse through the heap\n    while len(heap) > k:\n        #pop the smallest element\n        n = hq.heappop(heap)\n        k += 1\n    #return the highest element\n    return heapq.heappop(heap)\nprint(heap_queue_largest([7, 9, 8, 3, 6, 2], 3))\nprint(heap_queue_largest([7, 9, 8, 3, 6, 2], 5))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q=[]\n    for i in range(n):\n        heapq.heappush(q,-nums[i])\n    \n    for i in range(n-1,0,-1):\n        heapq.heappush(q,-nums[i])\n    \n    \n    return q\ndef solution(n, x):\n    answer = 0\n    for i in range(n,0,-1):\n        if x-i>=0:\n            heap_queue_largest([x-i,i],i)\n        else:\n            heap_queue_largest([x,i],i)\n        answer+=1\n    \n    return answer\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def get_index(num,n):\n        for i in range(n):\n            if num[i] == num[-1]:\n                return i\n        return -1\n    \n    # calculate length of list\n    n = len(nums)\n    \n    # create and return a queue\n    queue = []\n    \n    # append elements\n    for i in range(n):\n        queue.append(nums[i])\n    \n    # move to last position\n    last = len(nums)-1\n    while last >= 0:\n        num = nums[last]\n        \n        # if this position already have an element, add to queue\n        if len(queue) > 0 and queue[0] > num:\n            queue[0] += num\n        \n        # else: insert into queue, that is, append num into queue\n        else:\n            hq.heappush(queue,num)\n        \n        # move to last position\n        last -= 1\n    \n    # return the heap\n    return hq.heapify(queue)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    def get_index(num,n):\n        for i in range(n):\n            if num[i] == num[-1]:\n                return i\n        return -1\n    \n    # calculate length of list\n    n = len(nums)\n    \n    # create and return a queue\n    queue = []\n    \n    # append elements\n    for i in range(n):\n        queue.append(nums[i])\n    \n    # move to last position\n    last = len(nums)-1\n    while last >= 0:\n        num = nums[last]\n        \n        # if this position already have an element, add to queue\n        if len(queue) > 0 and queue[0] < num:\n            queue[0] += num\n        \n        # else: insert into queue, that is, append num into queue\n        else:\n            hq.heappush(queue,num)\n        \n        # move to last position\n        last -= 1\n    \n    # return the heap\n    return hq.heapify(queue)\ndef heap_merge(nums):\n    '''\n    Given a list, sort it in ascending order by adding them together.\n    '''\n    def merge(a,b):\n        if len(a) == 0:\n            return b\n        elif len(b) == 0:\n            return a\n        if a[0] <= b[0]:\n            return [a[0]+b[0],a[1]] + merge(a[1:],b)\n        return [b[0]+a[0],b[1]] + merge(a,b[1:])\n    \n    # create and return a heap\n    queue = []\n    \n    # append elements\n    for i in range(len(nums)):\n        queue.append(nums[i])\n    \n    # move to last position\n    last = len(nums)-1\n    while last >= 0:\n        num = nums[last]\n        \n        # if this position already have an element, add to queue\n        if len(queue) > 0 and queue[0] < num:\n            queue[0] += num\n        \n        # else: insert into queue, that is, append num into queue\n        else:\n            hq.heappush(queue,num)\n        \n        # move to last position\n        last -= 1\n    \n    # return the heap\n    return merge(queue,nums)\ndef heap_sort(nums):\n    '''\n    Given a list, sort it in ascending order by reducing the numbers to be at the end of the list.\n    '''\n    def sort(nums):\n        def merge(a,b):\n            if len(a) == 0:\n                return b\n            if len(b) == 0:\n                return a\n            if a[0] < b[0]:\n                return [a[0] + b[0], a[1]] + merge(a[1:],b)\n            return [b[0] + a[0], b[1]] + merge(a,b[1:])\n        \n        # create and return a heap\n        queue = []\n        \n        # append elements\n        for i in range(len(nums)):\n            queue.append(nums[i])\n        \n        # move to last position\n        last = len(nums)-1\n        while last >= 0:\n            num = nums[last]\n            \n            # if this position already have an element, add to queue\n            if len(queue) > 0 and queue[0] < num:\n                queue[0] += num\n            \n            # else: insert into queue, that is, append num into queue\n            else:\n                hq.heappush(queue,num)\n            \n            # move to last position\n            last -= 1\n        \n        # return the heap\n        return merge(queue,nums)\n    \n    # create and return a heap\n    heap = heap_sort(nums)\n    \n    # return the heap\n    return heap\ndef heappop(heap):\n    '''\n    Return and remove the smallest element from the heap, maintaining the heap invariant.\n    '''\n    # if empty\n    if len(heap) == 0:\n        return None\n    \n    # get the smallest element\n    item = heapq.heappop(heap)\n    \n    # return the element\n    return item\ndef heappush(heap,item):\n    '''\n    Add an item to the heap, maintaining the heap invariant.\n    '''\n    heapq.heappush(heap,item)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums,reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0:\n        return []\n    \n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        \n    l = 0\n    e = n-1\n    while e >= 0:\n        if heap[l] < heap[e]:\n            heapq.heapreplace(heap,nums[l])\n            l = l + 1\n        else:\n            e = e - 1\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 1:\n        return nums\n    \n    nums.sort()\n    \n    result = []\n    \n    hq = []\n    for num in nums:\n        # remove a least\n        if len(hq) == 0 or hq[-1] < num:\n            heapq.heappush(hq,num)\n            result.append(num)\n            # print(result)\n        else:\n            heapq.heappushpop(hq,num)\n            # print(heq)\n            result.append(num)\n            # print(result)\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    queue = []\n    nums.sort(reverse=True)\n    for num in nums:\n        heapq.heappush(queue,-num)\n    \n    while queue:\n        num = hq.heappop(queue)\n        nums.append(-num)\n        \n        if len(queue) == n:\n            break\n        \n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    nums.sort(reverse=True)\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n        print(heap)\n    return heap\n    # return heapq.nlargest(n,nums)\n    # return heapq.nlargest(n,nums,key=lambda x: x[0])\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 1:\n        return True\n    if x < 1:\n        return False\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0):\n        return False\n    elif (x == 1):\n        return False\n    else:\n        return True\n        \ndef is_prime(x):\n    '''\n    Write a python function to check whether an integer is prime or not.\n    '''\n    if(x==2):\n        return True\n    elif(x%2==0):\n        return False\n    else:\n        for i in range(3,int(math.sqrt(x))+1,2):\n            if x%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x!= x & 0x1\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Convert the dividend and divisor into a binary representation\n    dividend = bin(x)[2:]\n    divisor = bin(div)[2:]\n    #Check the divisor\n    if (len(divisor) == 1):\n        divisor = '0'+divisor\n    #Check the dividend\n    if (len(dividend) == 1):\n        dividend = '0'+dividend\n    \n    #Check if the dividend and divisor are equal\n    if (dividend == divisor):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    bit1 = x % 10; bit2 = x // 10; # print(bit1,bit2)\n    return (bit1!= bit2)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & x - 1) == x\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x<=0:\n        return False\n    else:\n        if x%2==0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #raise NotImplementedError\n    if x > 1:\n        return (x % 2 == 0)\n    else:\n        return (x % 2 == 1)\n    "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x_l=[]\n    for i in range(1,x+1):\n        x_l.append(i)\n    for i in range(1,x+1):\n        if (x_l[i]!=x_l[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    long_count = 0\n    for i in text:\n        if len(i) >= 3 and len(i) <= 4:\n            long_count += 1\n    return long_count\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_word = ''\n    for i in range(len(text)):\n        if(len(text[i]) >= 4):\n            long_word = long_word + text[i]\n    return long_word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Used regex to find non-whitespaces, only words starting with a letter or number, \n    # and ending with a letter or number\n    whitespace_pattern = r'(?:\\w+|\\d+)(?:\\s+)?'\n    pattern = re.compile(whitespace_pattern)\n    result = re.findall(pattern, text)\n    # Convert the result to a list, use index 0 to access each substring, so that we can \n    # loop through each list and check for the long substring\n    # print(\"result:\", result)\n    long_substr = \"\"\n    for item in result:\n        item = item.strip()\n        if len(item) >= 4:\n            long_substr += item\n    return long_substr\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    pattern = re.compile(r'[^a-z]+')\n    res = pattern.findall(text)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # line =''.join(text.split()).strip()\n    line = text.strip()\n    # print(line)\n    # split into words\n    words = line.split(' ')\n    # print(words)\n    # count words\n    count_words = {}\n    for word in words:\n        count_words[word] = count_words.get(word, 0) + 1\n    # print(count_words)\n    # print(len(count_words))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = list()\n    for word in text.split():\n        if len(word) >= 4:\n            word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            # this is a long word\n            yield i,text[i]\n    return\ndef find_char_long_dup(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #the idea is to find all words which are at least 4 characters long\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            # this is a long word\n            yield i,text[i]\n    return\ndef find_word(text):\n    '''\n    Write a function to find all words which have exactly two characters\n    '''\n    #the idea is to find all words which have exactly two characters\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        #check if it contains only two characters\n        if len(word) >= 2:\n            # this is a word\n            yield i,word\n    return\ndef find_first_and_last(text):\n    '''\n    Write a function to find all words which have exactly two characters, including the middle word.\n    '''\n    for i in range(len(text)):\n        if len(text[i]) >= 2:\n            # this is a word\n            yield i,text[i]\n    for i in range(len(text)-1):\n        if len(text[i]) >= 2 and len(text[i+1]) >= 2:\n            # this is a word\n            yield i,text[i],text[i+1]\n    return\ndef find_middle(text):\n    '''\n    Write a function to find all words which have exactly two characters, including the first and the last word.\n    '''\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        if len(word) >= 2 and len(text[i]) >= 2:\n            # this is a word\n            yield i,word\n    for i in range(len(text)-1):\n        #convert each word to lowercase\n        word = text[i].lower()\n        if len(word) >= 2 and len(text[i]) >= 2:\n            # this is a word\n            yield i,word\n    return\ndef find_word_and_end_word(text):\n    '''\n    Write a function to find all words which have exactly two characters, including the last word and the middle word.\n    '''\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        if len(word) >= 2 and len(text[i]) >= 2:\n            # this is a word\n            yield i,word\n    for i in range(len(text)-1):\n        #convert each word to lowercase\n        word = text[i].lower()\n        if len(word) >= 2 and len(text[i]) >= 2:\n            # this is a word\n            yield i,word\n    return\ndef find_middle_and_end_word(text):\n    '''\n    Write a function to find all words which have exactly two characters, including the first word and the last word.\n    '''\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        if len(word) >= 2 and len(text[i]) >= 2:\n            # this is a word\n            yield i,word\n    for i in range(len(text)-1):\n        #convert each word to lowercase\n        word = text[i].lower()\n        if len(word) >= 2 and len(text[i]) >= 2:\n            # this is a word\n            yield i,word\n    return\ndef remove_punct(text):\n    '''\n    Write a function to remove all punctuation marks from a string.\n    '''\n    punct = \"'''\"\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        if word in punct:\n            # this is a word\n            yield i,text[i]\n    return\ndef remove_special_chars(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    special_char = [\"'\",\"(\",\")\",\"-\",\"_\",\"~\",\"!\",\"*\",\"(\",\")\",\",\",\".\",\":\",\";\",\"{\",\"}\",\"[\",\"]\",\"|\",\"<\",\">\"]\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        for special_char in special_char:\n            if special_char in word:\n                # this is a word\n                yield i,text[i]\n    return\ndef remove_stopwords(text):\n    '''\n    Write a function to remove all stopwords from a string.\n    '''\n    stopwords = [\"?\", \"!\", \".\",\";\",\":\",\",\",\".\",\";\",\"!\",\"-\",\"_\",\"~\",\"%\",\"'\"]\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        for special_char in stopwords:\n            if special_char in word:\n                # this is a word\n                yield i,text[i]\n    return\ndef remove_punct_and_special_chars(text):\n    '''\n    Write a function to remove all punctuation marks and special characters from a string.\n    '''\n    punct = \"'''\"\n    special_char = \"'''\"\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        if word in punct:\n            # this is a word\n            yield i,text[i]\n        elif word in special_char:\n            # this is a special character\n            yield i,text[i]\n    return\ndef remove_stopwords_and_special_chars(text):\n    '''\n    Write a function to remove all stopwords and special characters from a string.\n    '''\n    stopwords = [\"?\", \"!\", \".\",\";\",\":\",\",\",\".\",\";\",\"!\",\"-\",\"_\",\"~\",\"%\",\"'\"]\n    special_char = [\"'\",\"(\",\")\",\"-\",\"_\",\"~\",\"!\",\"*\",\"(\",\")\",\",\",\".\",\":\",\";\",\"{\",\"}\",\"[\",\"]\",\"|\",\"<\",\">\"]\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        for special_char in special_char:\n            if special_char in word:\n                # this is a word\n                yield i,text[i]\n    return\ndef remove_punct_and_stopwords(text):\n    '''\n    Write a function to remove all punctuation marks and special characters from a string.\n    '''\n    punct = \"'''\"\n    stopwords = [\"?\", \"!\", \".\",\";\",\":\",\",\",\".\",\";\",\"!\",\"-\",\"_\",\"~\",\"%\",\"'\"]\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        if word in punct:\n            # this is a word\n            yield i,text[i]\n        elif word not in stopwords:\n            # this is a special character\n            yield i,text[i]\n    return\ndef remove_stopwords_and_special_chars_and_punct(text):\n    '''\n    Write a function to remove all stopwords and special characters from a string.\n    '''\n    stopwords = [\"?\", \"!\", \".\",\";\",\":\",\",\",\".\",\";\",\"!\",\"-\",\"_\",\"~\",\"%\",\"'\"]\n    special_char = [\"'\",\"(\",\")\",\"-\",\"_\",\"~\",\"!\",\"*\",\"(\",\")\",\",\",\".\",\":\",\";\",\"{\",\"}\",\"[\",\"]\",\"|\",\"<\",\">\"]\n    for i in range(len(text)):\n        #convert each word to lowercase\n        word = text[i].lower()\n        for special_char in special_char:\n            if special"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in range(len(text)):\n        for j in range(i+1,len(text)):\n            if len(text[i:j]) >= 4:\n                return True\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex_pattern = r'\\w+'\n    text = text.lower()\n    pattern = re.compile(regex_pattern)\n    match_result = pattern.findall(text)\n    return match_result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    match = re.findall(r'[a-zA-Z\\s\\']+',text)\n    match_string = ''.join(match)\n    return match_string\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Your code here\n    squares=[]\n    for num in nums:\n        squares.append(num**2)\n    return squares\n    \n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    def squares(nums):\n        for i in range(1, len(nums)):\n            nums[i] = nums[i] ** 2\n        return nums\n    squares = squares(nums)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**2)\n    return result\n    \n    \nnums = [1,2,3,4,5]\nprint(square_nums(nums)"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sq_list = []\n    for num in nums:\n        square_num = num*num\n        sq_list.append(square_num)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # lst = []\n    # for num in nums:\n    #     lst.append(num**2)\n    \n    # return lst\n    return [num**2 for num in nums]\n    \n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums_squared = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # creating an empty list\n    new_list = []\n    # looping over the list\n    for i in range(0, len(nums)):\n        # iterating over the nums list\n        for j in range(0, len(nums)):\n            # using the divisor function\n            if nums[i] % 2 == 0 and nums[j] % 2 == 0:\n                # checking for number of 1's\n                if nums[i] == 1 or nums[j] == 1:\n                    # adding the number to the new list\n                    new_list.append(nums[i] * nums[j])\n    # returning the list\n    return new_list\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # TODO: Write your code here\n    rotations = 0\n    for i in range(len(str)):\n        rotations = rotations + (i - 1)\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    matrix = [\n        ['A', 'B', 'C'],\n        ['D', 'E', 'F'],\n        ['G', 'H', 'I']\n    ]\n    rotations = 0\n    for i in range(len(str) - 1):\n        for j in range(len(matrix[i]) - 1):\n            if matrix[i][j]!= matrix[i][j + 1]:\n                rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Store the current index. \n    current_index = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    for i in range(len(str)):\n        rotations = 0\n        for j in range(i+1, len(str)):\n            rotations += abs(str[j] - str[i])\n        if rotations > 0: return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    dic = {}\n    for i in range(0,len(str)):\n        dic[str[i]]=dic.get(str[i],0)+1\n    list_items = list(dic.items())\n    list_items.sort(key = lambda x:x[1],reverse = True)\n    for i in range(0,len(list_items)):\n        if list_items[i][1]>1:\n            return list_items[i][1]-1\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    minRot = -1\n    l1 = len(str)\n    for i in range(0, l1):\n        if str[i] =='' or str[i] == '\\t':\n            continue\n        else:\n            cnt = 1\n            for j in range(i, l1):\n                if str[j] == str[i]:\n                    cnt = cnt + 1\n                elif str[j] =='':\n                    continue\n                else:\n                    cnt = cnt - 1\n                if cnt < minRot:\n                    minRot = cnt\n    return minRot\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    lower = str.lower()\n    cnt = 0\n    for i in range(len(lower)):\n        if lower[i] not in ['a','e','i','o','u','A','E','I','O','U']:\n            break\n        if (i + 1) % 3 == 0:\n            cnt += 1\n    return cnt"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    list = []\n    for i in range(0,len(str)):\n        for j in range(0,len(str)-i):\n            if (str[j] == str[j+i]):\n                list.append(j)\n                list.append(j+i)\n    return min(list)"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    min_count = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) <= 1:\n        return 1\n    if str[0] == str[len(str)-1]:\n        return find_Rotations(str[1:len(str)])\n    else:\n        return find_Rotations(str[:len(str)-1]) + find_Rotations(str[len(str)-1:])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch.pop(0)\n    ch.pop(-1)\n    return ch\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if(s[0:1]==ch):\n        return s[1:]\n    else:\n        return s[:1] + remove_Occ(s[1:],ch)\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # create a list of the string \n    ls = list(s)\n    \n    # create a varible that stores index of first occurrence\n    idx1 = -1\n    # create a varible that stores index of last occurrence\n    idx2 = len(ls) - 1\n    \n    # if string is empty then return -1\n    if len(ls) == 0: \n        return -1\n    \n    # if string is not empty then loop until string is empty\n    while len(ls)!= 0: \n        # if first occurrence is greater then index then swap with index \n        if idx1 >= 0 and idx2 >= 0 and ls[idx1] == ch:\n            idx1 -= 1\n        elif ls[idx2] == ch:\n            idx2 -= 1\n        else:\n            return -1\n    # if no elements are left then return -1\n    if idx1 < 0 or idx2 < 0: \n        return -1\n    \n    # swap the value of index1 and index2 \n    ls[idx1], ls[idx2] = ls[idx2], ls[idx1]\n    \n    # return the string \n    return ''.join(ls)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=list(s)\n    start=s.index(ch)\n    end=start+len(ch)\n    return \"\".join(s[:start]+s[end:])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occurrence = 0\n    for i in range(len(s)):\n        if s[i] == ch:\n            occurrence += 1\n        else:\n            occurrence = 0\n            if i == 0:\n                s = s.replace(ch, '', 1)\n            elif i == len(s) - 1:\n                s = s.replace(ch, '', 1)\n            else:\n                s = s.replace(s[i], '', 1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==0: return ''\n    elif s[0]==ch: return s[1:]\n    else: return s[:-1]\n    # if s[0] == ch: return s[1:]\n    # else: return s[:-1]\n    \n    \n    \ndef find_Pattern(string,pattern):\n    '''\n    Write a python function to find a pattern in a given string.\n    '''\n    i = 0\n    while True:\n        if i+len(pattern)>len(string):\n            break\n        if string[i:i+len(pattern)]==pattern:\n            return i,i+len(pattern)\n        i+=1\n    return -1\n        \ndef find_Match(string,pattern):\n    '''\n    Write a python function to find a pattern in a given string.\n    '''\n    i = 0\n    j = 0\n    flag = False\n    while i<len(string) and j<len(pattern):\n        if string[i] == pattern[j]:\n            if j!=len(pattern)-1:\n                j+=1\n            else:\n                j=0\n                flag = True\n        else:\n            i+=1\n            if flag:\n                j+=1\n                flag = False\n    if i==len(string) and j==len(pattern):\n        return 0\n    else:\n        return -1\n    \ndef main():\n    s = input(\"Enter the string : \")\n    pattern = input(\"Enter the pattern : \")\n    \n    i,j = find_Pattern(s,pattern)\n    if i==-1:\n        print(\"No Match Found\")\n    else:\n        print(\"Match Found at\",j,\":\",remove_Occ(s,s[i]))\n        print(\"Match Found at\",j+1,\":\",remove_Occ(s,s[i]+pattern))\n        print(\"Match Found at\",j-1,\":\",remove_Occ(s,s[i]-pattern))\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(len(s)): \n        if s[i] == ch: \n            if i == len(s) - 1: \n                return s \n            else: \n                s = s[:i] + s[i+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = s.count(ch)\n    return s.replace(ch, \"\", occ)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch=ch.lower() \n    n=len(s)\n    i=n-1\n    while i>=0:\n        if ch==s[i]:\n            s=s[:i]+s[i+1:]\n            i=0\n        else:\n            i-=1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass \n    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   "
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    length = len(M)\n    i = 0\n    j = 0\n    k = 0\n    while i < length:\n        while j < length and M[i][j] <= M[i][k]:\n            j += 1\n        while j < length and M[j][k] > M[i][k]:\n            M[i][j], M[j][k] = M[j][k], M[i][j]\n            i += 1\n        k += 1\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for row in range(len(M)):\n        for col in range(len(M[0])):\n            if M[row][col] == 0:\n                M[row][col] = -1\n    # Sort rows\n    M.sort(key=lambda row: sum(row), reverse=True)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = sorted(M, key=lambda x: sum(x))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    summ = 0\n    cols = []\n    for row in range(len(M)):\n        summ += M[row][0]\n        cols.append(summ)\n    cols.sort(reverse = True)\n    return cols\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    columns = []\n    sum_rows = []\n    for x in range(len(M)):\n        columns.append(sum(M[x]))\n        sum_rows.append(sum(M[x]))\n    columns.sort()\n    for i in range(len(M)):\n        M[i] = columns[i]\n    sum_rows.sort()\n    for j in range(len(M)):\n        M[j] = sum_rows[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # declare a matrix of size 4*4\n    n = len(M)\n    \n    # declare variables\n    c = 0\n    d = 0\n    \n    # for the main part:\n    # declare a matrix of size 4*4\n    matrix = []\n    # for the main part:\n    for i in range(n):\n        # for the main part:\n        for j in range(n):\n            # if we find the sum of the elements in the matrix \n            # between the row i and column j is less than the current sum:\n            if M[i][j] < M[i][c] + M[j][d] and c < j:\n                # and update the row\n                # and column\n                M[i][c], M[j][d] = M[j][d], M[i][c]\n                # and increase the current sum\n                c += 1\n                d += 1\n            # if we find the sum of the elements in the matrix\n            # between the row i and column j is greater than the current sum:\n            if M[i][j] > M[i][d] + M[j][c] and c < d:\n                # and update the row\n                # and column\n                M[i][c], M[j][d] = M[j][d], M[i][c]\n                # and increase the current sum\n                c += 1\n                d += 1\n            # if we find the sum of the elements in the matrix\n            # between the row i and column j is equal to the current sum:\n            if M[i][j] == M[i][d] + M[j][c]:\n                # and update the row\n                # and column\n                M[i][c], M[j][d] = M[j][d], M[i][c]\n                # and increase the current sum\n                c += 1\n                d += 1\n            # if we find the sum of the elements in the matrix\n            # between the row i and column j is not equal to the current sum:\n            if M[i][j]!= M[i][d] + M[j][c]:\n                # and update the row\n                # and column\n                M[i][c], M[j][d] = M[j][d], M[i][c]\n                # and increase the current sum\n                c += 1\n                d += 1\n    # return the matrix\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = sorted(M, key=lambda x: sum(x))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = [None]*(M[0]+1)\n    for m in range(0, M[0]):\n        sorted_matrix[m+1] = [0]*(M[1]+1)\n        for i in range(0, M[1]):\n            if i+1 >= M[1]:\n                sorted_matrix[m+1][i] = M[0]\n            else:\n                sum_row = 0\n                for j in range(1, M[1]):\n                    sum_row += M[0]\n                    sorted_matrix[m+1][j] = sum_row-M[0]\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    i = 1\n    while i < n:\n        while M[i] < M[i-1] and i < n:\n            M[i], M[i-1] = M[i-1], M[i]\n            i += 1\n        M[i-1], M[i] = M[i], M[i-1]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if M[i][j] < 0:\n                M[i][j] = -M[i][j]\n    \n    \n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if M[i][j] < 0:\n                M[i][j] = -M[i][j]\n    \n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #Use a if else statement to check the argument is a number\n    if l is not None and b is not None and h is not None:\n        #Use the sqrt() function to find the volume\n        volume = (b*h) / (l*l)\n        #Print out the volume\n        print(\"The volume of the triangle is: \" + str(volume))\n    else :\n        print(\"A triangle must have 2 positive numbers.\")\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculating the volume of the prisms given by the length of each dimension \n    # and the height of the prism \n    vol = (l * h) * (l + h)\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    def volume_prism(p,l,b,h) : \n        volume = (1/(l*h)) * p * (b*h)\n        print(volume)\n    volume_prism(l,b,h,2)\n    volume_prism(l,b,h,1)\n    volume_prism(l,b,h,0)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    print (\"The volume of the triangle with a base of \"+str(l)+\" and height of \"+str(h)+\" is : \"+str(volume))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b * h) / (b + (l * h))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*(b*h) + (b**2)/2 + (h**2) + (l**2) + b**2)/(b*(h**2) + (l**2))\n    print(v)\n    \n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    pass\nfind_Volume(4,6,3)\nfind_Volume(6,7,6)\nfind_Volume(7,4,8)\nfind_Volume(4,7,8)\nfind_Volume(3,5,6)\nfind_Volume(6,7,6)\nfind_Volume(5,4,8)\nfind_Volume(4,7,8)\nfind_Volume(2,3,5)\nfind_Volume(2,3,4"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0\n    n = len(l)\n    for i in range(n-2):\n        volume += ((b[i+1]-b[i])*l[i+1] + (b[i+2]-b[i])*l[i])/2\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    k1 = h**2/2\n    k2 = (l**3 - h**3)/(3*l)\n    k3 = (l**3 - b**3)/(3*l)\n    k4 = (b**3 - l**3)/(3*b)\n    print(\"The volume of the triangle is \",k1*k2*k3*k4)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*h*h*b\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(l,b,h)\n    i = int(b/2)\n    while (i > 0) : \n        if (l+i)**2 + (b+i)**2 < h : \n            if (l+i)**2 < h :\n                print(\"A\")\n                return ((l+i)**2)/(2*b)\n            else : \n                print(\"B\")\n                return ((h-l)/(2*b))\n        else : \n            if (l+i)**2 < h : \n                print(\"C\")\n                return ((h-l)/(2*b))\n            else : \n                print(\"D\")\n                return ((h-l)/(2*b))\n        i -= 1\n    return 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    txt = text.lower()\n    return txt.startswith(\"_\") and txt.endswith(\"_\")\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text.split())>1:\n        return False\n    # else:\n    #     return True\n    return text.lower().count('_')==0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub(r'[^\\w]', '', text)\n    text = text.lower()\n    if text.count('_') > 0:\n        return False\n    elif text.count('_') < 0:\n        return True\n    else:\n        return False\ndef is_all_letter(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.isalpha():\n            return False\n    return True\ndef is_all_digit(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.isdigit():\n            return False\n    return True\ndef is_all_capital(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.isupper():\n            return False\n    return True\ndef is_all_special(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit() or character.isalpha():\n            return False\n    return True\ndef is_all_lowercase(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.islower():\n            return False\n    return True\ndef is_all_uppercase(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.isupper():\n            return False\n    return True\ndef is_special(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_all_digits(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.isdigit():\n            return False\n    return True\ndef is_all_special_characters(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit() or character.isalpha():\n            return False\n    return True\ndef is_not_all_special_characters(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.isalpha():\n            return False\n    return True\ndef is_not_special_characters(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isalpha():\n            return False\n    return True\ndef is_not_all_letters(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.isalpha():\n            return False\n    return True\ndef is_not_special_letters(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isalpha():\n            return False\n    return True\ndef is_not_all_lowercase(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.islower():\n            return False\n    return True\ndef is_not_special_lowercase(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.islower():\n            return False\n    return True\ndef is_not_all_uppercase(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.isupper():\n            return False\n    return True\ndef is_not_special_uppercase(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isupper():\n            return False\n    return True\ndef is_not_all_digits(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if not character.isdigit():\n            return False\n    return True\ndef is_not_special_digits(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n    return True\ndef is_not_all_special_characters(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters_1(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters_2(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters_3(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters_4(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters_5(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters_6(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters_7(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters_8(text):\n    '''\n    Write a function to determine if the input string has all valid characters.\n    '''\n    for character in text:\n        if character.isdigit():\n            return False\n        if character.isalpha():\n            return False\n    return True\ndef is_not_special_characters_9(text):\n    '''"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if isinstance(text, str):\n        text = text.lower()\n        text = re.sub('[^a-zA-Z0-9_]+', '', text)\n        text = re.sub('_', '', text)\n        return text\n    else:\n        raise ValueError\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # replace single space with double space\n    text = text.replace(\" \", \"  \")\n    # make text lowercase and split it\n    text = text.lower()\n    text = re.sub('\\s+','', text)\n    # return True or False\n    return text.count(\"_\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #https://stackoverflow.com/questions/319856/python-text-lowercase-and-underscore-string-pattern\n    #https://stackoverflow.com/questions/5037262/getting-text-lowercase-and-underscore-pattern-in-python\n    text = text.lower()\n    regex = re.compile(r'[^a-zA-Z0-9_]')\n    text_lowercase = regex.findall(text)\n    return bool(text_lowercase)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(re.search(r\"[a-z0-9_]+\\w*[a-z0-9_]+\",text.lower())!= None)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase = re.findall('[A-Z]', text)\n    for i in text_lowercase:\n        if i.isupper():\n            text = text.replace(i,'_')\n    return text\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) == 0:\n        return True\n    for i in range(len(text)):\n        if text[i].isupper():\n            text[i] = text[i].lower()\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.islower() and any(c.islower() for c in text) and text.count('_') < 3\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square = pow(a, 2)\n    return square\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    sides = a\n    perimeter = 0\n    for i in range(0, sides):\n        perimeter += i\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_perimeter = 0\n    for x in range(a):\n        square_perimeter += 4 * x + 1\n    square_perimeter += 2 * a\n    return square_perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = (4*(a**2)) + (4*(a**2)) - 4*a\n    return p\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    result = 0\n    for i in range(a):\n        result += 4 * i\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2 + 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    a = int(a)\n    if a < 0:\n        print('Input must be a positive number.')\n        return 0\n    elif a < 2:\n        perimeter = (4*a) + (4*a) + (4*a)\n        return perimeter\n    elif a < 5:\n        perimeter = (4*a) + (2*a) + (2*a) + (2*a)\n        return perimeter\n    elif a < 8:\n        perimeter = (4*a) + (2*a) + (3*a) + (3*a)\n        return perimeter\n    else:\n        perimeter = (4*a) + (3*a) + (4*a) + (3*a)\n        return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # your code goes here\n    return 0\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a*a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_perimeter = 4 * a\n    return square_perimeter\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string[string.index('p') + 1:].split()\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\ndef list_to_str(string):\n    '''\n    Write a function to convert the characters of a string to a list.\n    '''\n    return ''.join(string)\ndef encrypt(plaintext, shift):\n    '''\n    Encrypts the plaintext string using the shift value as key.\n    '''\n    if plaintext is None:\n        return None\n    if shift is None:\n        return None\n    # print(shift)\n    return plaintext + list(map(lambda x: x * shift, plaintext))\ndef decrypt(ciphertext, shift):\n    '''\n    Decrypts the ciphertext string using the shift value as key.\n    '''\n    if ciphertext is None:\n        return None\n    if shift is None:\n        return None\n    # print(shift)\n    return ciphertext + list(map(lambda x: x * shift, ciphertext))\ndef get_shift(string, key_length):\n    '''\n    Returns the shift value as key for the string using the length of the string as the key.\n    '''\n    if key_length is None:\n        return None\n    if len(string) == 0:\n        return None\n    if key_length < len(string):\n        return None\n    return string[key_length - 1]\ndef encrypt_shift(plaintext, shift, key):\n    '''\n    Encrypts the plaintext string using the shift value as key and returns the encrypted string.\n    '''\n    # print(\"Entered function for encrypt function\")\n    if len(plaintext) == 0:\n        return None\n    if shift is None:\n        return plaintext\n    # print(shift)\n    return encrypt(plaintext + shift, key)\ndef decrypt_shift(ciphertext, shift, key):\n    '''\n    Decrypts the ciphertext string using the shift value as key and returns the decrypted string.\n    '''\n    # print(\"Entered function for decrypt function\")\n    if ciphertext is None:\n        return None\n    if shift is None:\n        return ciphertext\n    # print(shift)\n    return decrypt(ciphertext + shift, key)\ndef encrypt_shift_arithmetic(plaintext, shift, key):\n    '''\n    Encrypts the plaintext string using the shift value as key and returns the encrypted string.\n    '''\n    # print(\"Entered function for encrypt function\")\n    if shift is None:\n        return plaintext\n    if key is None:\n        return plaintext\n    # print(shift)\n    return encrypt(plaintext + shift, key)\ndef decrypt_shift_arithmetic(ciphertext, shift, key):\n    '''\n    Decrypts the ciphertext string using the shift value as key and returns the decrypted string.\n    '''\n    # print(\"Entered function for decrypt function\")\n    if shift is None:\n        return ciphertext\n    if key is None:\n        return ciphertext\n    # print(shift)\n    return decrypt(ciphertext + shift, key)\ndef encrypt_shift_arithmetic_brute(plaintext, shift, key):\n    '''\n    Encrypts the plaintext string using the shift value as key and returns the encrypted string.\n    '''\n    # print(\"Entered function for encrypt function\")\n    if shift is None:\n        return plaintext\n    if key is None:\n        return plaintext\n    # print(shift)\n    return encrypt(plaintext + shift, key)\ndef decrypt_shift_arithmetic_brute(ciphertext, shift, key):\n    '''\n    Decrypts the ciphertext string using the shift value as key and returns the decrypted string.\n    '''\n    # print(\"Entered function for decrypt function\")\n    if shift is None:\n        return ciphertext\n    if key is None:\n        return ciphertext\n    # print(shift)\n    return decrypt(ciphertext + shift, key)\ndef check_space(string):\n    '''\n    Returns True if the space is present in the string.\n    '''\n    if string is None:\n        return None\n    if len(string) == 0:\n        return None\n    return string[0] ==''\ndef pad_string(string):\n    '''\n    Pads the string to the same length as the plaintext so that all of the characters will have the same length.\n    '''\n    if string is None:\n        return None\n    if len(string) == 0:\n        return string\n    return string + string[0]\ndef shift_string(string):\n    '''\n    Returns the plaintext string after shifting each character.\n    '''\n    if string is None:\n        return None\n    return string[1:] + string[0]\ndef space_to_space(string):\n    '''\n    Pads the string to the same length as the plaintext so that all of the characters will have the same length.\n    '''\n    if string is None:\n        return string\n    return string + string[0]\ndef move_ciphertext_space(ciphertext, shift, plaintext):\n    '''\n    Moves the ciphertext string by the shift value.\n    '''\n    return ciphertext[shift:] + ciphertext[:shift]\ndef get_plaintext(string):\n    '''\n    Returns the plaintext string after converting the characters of the string to uppercase.\n    '''\n    if string is None:\n        return None\n    return string.upper()\ndef encryption_system(plaintext, shift):\n    '''\n    Encrypts the plaintext string using the shift value as key and returns the encrypted string.\n    '''\n    if plaintext is None:\n        return None\n    if shift is None:\n        return None\n    return encrypt(plaintext + shift, shift)\ndef encryption_system_shift(ciphertext, shift):\n    '''\n    Encrypts the plaintext string using the shift value as key and returns the encrypted string.\n    '''\n    if ciphertext is None:\n        return None\n    if shift is None:\n        return None\n    return encrypt(ciphertext + shift, shift)\ndef get_shift(string, key_length):\n    '''\n    Returns the shift value as key for the string using the length of the string as the key.\n    '''\n    if key_length is None:\n        return None\n    if len(string) == 0:\n        return None\n    if key_length < len(string):\n        return None\n    return string[key_length - 1]\ndef encryption_system_shift_brute(plaintext, shift, key_length):\n    '''\n    Encrypts the plaintext string using the shift value as key and returns the encrypted string.\n    '''\n    # print(\"Entered function for encrypt function\")\n    if plaintext is None:\n        return None\n    if shift is None:\n        return plaintext\n    if key_length < len(plaintext):\n        return None\n    return plaintext + shift\ndef get_shift_brute(string, key_length):\n    '''\n    Returns the shift value as key for the string using the length of the string as the key.\n    '''\n    if key_length is None:\n        return None\n    if len(string) == 0:\n        return None\n    if key_length < len(string):\n        return None\n    return string[key_length - 1]\ndef encryption_system_shift_brute_brute(plaintext, shift, key_length):\n    '''\n    Encrypts the plaintext string using the shift value as key and returns the encrypted string.\n    '''\n    # print(\"Entered function for encrypt function\")\n    if plaintext is None:\n        return None\n    if shift is None:\n        return plaintext\n    if key_length < len(plaintext):\n        return None\n    return plaintext + shift\ndef encryption_system_brute(plaintext, key):\n    '''\n    Encrypts the plaintext string using the key value as key and returns the encrypted string.\n    '''\n    # print(\"Entered function for encrypt function\")\n    if plaintext is None:\n        return None\n    if key is None:\n        return plaintext\n    # print(key)\n    return plaintext + key\ndef decryption_system(ciphertext, shift):\n    '''\n    Decrypts the ciphertext string using the shift value as key and returns the decrypted string.\n    '''\n    # print(\"Entered function for decrypt function\")\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars = []\n    for char in string:\n        if char in chars:\n            chars.remove(char)\n        else:\n            chars.append(char)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = list(string)\n    for i in range(len(lst)):\n        if lst[i] not in lst[0:i]:\n            lst[i] = None\n    return \"\".join(lst)\n    \n    \ndef num_of_char(string, char):\n    '''\n    Write a function that returns the number of times char appears in the string.\n    '''\n    return string.count(char)\n    \n    \ndef sort_list(lst):\n    '''\n    Write a function to sort the list by its first item, in descending order and return the sorted list.\n    '''\n    # please refer the documentation at line 72.\n    return sorted(lst, key=lambda x:x[1], reverse=True)\n    \n    \n    \ndef main():\n    '''\n    Write your own function to print the following string:\n    10010010\n    10011000\n    '''\n    \n    string = input()\n    lst = list(map(int, str_to_list(string).split(\" \")))\n    print(str(num_of_char(str_to_list(string), \"1\")) + \" \" + str(num_of_char(str_to_list(string), \"0\")))\n    \n    print(str(num_of_char(str_to_list(string), \"0\")) + \" \" + str(num_of_char(str_to_list(string), \"1\")))\n    \n    print(str(num_of_char(str_to_list(string), \"0\")))\n    \n    print(str(num_of_char(str_to_list(string), \"1\")))\n    \n    print(str_to_list(string))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.replace(string[0],\"\")\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string)\n    for i in range(len(string)):\n        if list_string[i] in string:\n            list_string.pop(i)\n    return ''.join(list_string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    \n    for c in string:\n        if c in string:\n            res.append(c)\n    return res\n    \ndef main():\n    str1 = 'python'\n    str2 = 'programming'\n    \n    # Remove the spaces\n    str1 = str_to_list(str1.strip())\n    \n    # Remove the characters which are not in both the string\n    str2 = str_to_list(str2.strip())\n    \n    # Delete the characters which are present in both the strings\n    str1 = str1[1:]\n    str2 = str2[1:]\n    \n    # Remove the first char\n    str1 = str1[1:]\n    \n    # Remove the last char\n    str1 = str1[:-1]\n    \n    # Remove the space\n    str1 = str1.split(' ')\n    \n    # Remove the repeated characters from both strings\n    str1 = str1[1:]\n    str2 = str2[1:]\n    \n    # Add the no of spaces\n    str1 = str1 + str1\n    str2 = str2 + str2\n    \n    # Join the two lists\n    str1 =''.join(str1)\n    str2 =''.join(str2)\n    \n    print(str1)\n    print(str2)\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    # We will start with our original string and remove those chars which are present in the second string.\n    # We use the function from earlier to reduce the char by one\n    # string = string.replace(string[0], string[0]+1)\n    #string = string.replace(string[0], '', 1)\n    #string = string.replace(' ', '')\n    string = string.replace(string[0], '*')\n    string = string.replace(string[0], '')\n    string = string.replace('.', '*')\n    string = string.replace('*', '')\n    string = string.replace('*', '*')\n    string = string.replace('!', '')\n    string = string.replace('!', '*')\n    string = string.replace('?', '*')\n    string = string.replace('?', '*')\n    string = string.replace('@', '*')\n    string = string.replace('@', '*')\n    string = string.replace('#', '*')\n    string = string.replace('#', '*')\n    string = string.replace('$', '*')\n    string = string.replace('$', '*')\n    string = string.replace('%', '*')\n    string = string.replace('%', '*')\n    string = string.replace('&', '*')\n    string = string.replace('&', '*')\n    string = string.replace('*', '*')\n    string = string.replace('=', '*')\n    string = string.replace('=', '*')\n    string = string.replace('+', '*')\n    string = string.replace('+', '*')\n    string = string.replace('*', '*')\n    string = string.replace('(', '*')\n    string = string.replace(')', '*')\n    string = string.replace(':', '*')\n    string = string.replace('(', '*')\n    string = string.replace(')', '*')\n    string = string.replace('{', '*')\n    string = string.replace('}', '*')\n    string = string.replace('[', '*')\n    string = string.replace(']', '*')\n    string = string.replace('{', '*')\n    string = string.replace('}', '*')\n    string = string.replace('-', '*')\n    string = string.replace('.', '*')\n    string = string.replace('*', '*')\n    string = string.replace('.', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('-', '*')\n    string = string.replace('.', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('@', '*')\n    string = string.replace('@', '*')\n    string = string.replace('#', '*')\n    string = string.replace('#', '*')\n    string = string.replace('$', '*')\n    string = string.replace('$', '*')\n    string = string.replace('%', '*')\n    string = string.replace('%', '*')\n    string = string.replace('&', '*')\n    string = string.replace('&', '*')\n    string = string.replace('*', '*')\n    string = string.replace('=', '*')\n    string = string.replace('=', '*')\n    string = string.replace('+', '*')\n    string = string.replace('+', '*')\n    string = string.replace('*', '*')\n    string = string.replace('(', '*')\n    string = string.replace(')', '*')\n    string = string.replace(':', '*')\n    string = string.replace('(', '*')\n    string = string.replace(')', '*')\n    string = string.replace('{', '*')\n    string = string.replace('}', '*')\n    string = string.replace('[', '*')\n    string = string.replace(']', '*')\n    string = string.replace('{', '*')\n    string = string.replace('}', '*')\n    string = string.replace('-', '*')\n    string = string.replace('.', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('@', '*')\n    string = string.replace('@', '*')\n    string = string.replace('#', '*')\n    string = string.replace('#', '*')\n    string = string.replace('$', '*')\n    string = string.replace('$', '*')\n    string = string.replace('%', '*')\n    string = string.replace('%', '*')\n    string = string.replace('&', '*')\n    string = string.replace('&', '*')\n    string = string.replace('*', '*')\n    string = string.replace('=', '*')\n    string = string.replace('=', '*')\n    string = string.replace('+', '*')\n    string = string.replace('+', '*')\n    string = string.replace('*', '*')\n    string = string.replace('@', '*')\n    string = string.replace('@', '*')\n    string = string.replace('#', '*')\n    string = string.replace('#', '*')\n    string = string.replace('$', '*')\n    string = string.replace('$', '*')\n    string = string.replace('%', '*')\n    string = string.replace('%', '*')\n    string = string.replace('&', '*')\n    string = string.replace('&', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n    string = string.replace('*', '*')\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp = ''\n    for char in string:\n        if char in string:\n            temp+= char\n    return temp\ndef is_Palindrome(s): \n    return s == str_to_list(s)[::-1]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = ''\n    for i in string:\n        if i in string[0:len(string)-1]:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for element in arraynums:\n        if element in arraynums:\n            arraynums.remove(element)\n        else:\n            pass\n    if arraynums:\n        print(\"The array contains any duplicate element.\")\n    else:\n        print(\"The array contains no duplicate elements.\")\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    #Write your code here\n    duplicates = []\n    for i in range(len(arraynums)):\n        if arraynums[i] in duplicates:\n            return True\n        else:\n            duplicates.append(arraynums[i])\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Write your code here\n    for num in arraynums:\n        if num in arraynums:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"Checking if any duplicate element exists in an array: \")\n    duplicate = set()\n    for i in arraynums:\n        if i in duplicate:\n            return True\n        else:\n            duplicate.add(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # TODO: Write your code here\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # nums = arraynums\n    # duplicate = []\n    # for i in nums:\n    #     duplicate.append(i)\n    # print(duplicate)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    # print(arraynums)\n    result = any(x in array for x in array)\n    # print(result)\n    return result\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    l = []\n    n = len(arraynums)\n    for x in arraynums:\n        l.append(x)\n    \n    for i in range(1, n):\n        if l[i]!= l[i-1]:\n            return True\n    return False\n    \ndef test_duplicate_2(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    l = []\n    n = len(arraynums)\n    for x in arraynums:\n        l.append(x)\n    \n    for i in range(1, n):\n        if l[i] == l[i-1]:\n            return True\n    return False\n    \ndef test_duplicate_3(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    l = []\n    n = len(arraynums)\n    for x in arraynums:\n        l.append(x)\n    \n    for i in range(1, n):\n        for j in range(0, n-1):\n            if l[i] == l[j+1] and i!= j:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if array[i] == array[j]:\n                continue\n            else:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    answer = True\n    for num in arraynums:\n        if num in arraynums:\n            answer = answer and num in arraynums\n    print(answer)\n    \n    return answer\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 100 == 0 or x % 10 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 3 and x <= 6 and x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    is_woodball = 0\n    for y in range(10):\n        if x == y:\n            is_woodball += 1\n    return is_woodball\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x <= 2\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 1:\n        return False\n    elif x >= 3 and x <= 6:\n        return True\n    elif x >= 7:\n        return True\n    elif x >= 11 and x <= 15:\n        return True\n    elif x >= 16 and x <= 20:\n        return True\n    elif x >= 21 and x <= 25:\n        return True\n    elif x >= 26 and x <= 30:\n        return True\n    elif x >= 31 and x <= 35:\n        return True\n    elif x >= 36 and x <= 40:\n        return True\n    elif x >= 41 and x <= 45:\n        return True\n    elif x >= 46 and x <= 50:\n        return True\n    elif x >= 51 and x <= 55:\n        return True\n    elif x >= 56 and x <= 60:\n        return True\n    elif x >= 61 and x <= 65:\n        return True\n    elif x >= 66 and x <= 70:\n        return True\n    elif x >= 71 and x <= 75:\n        return True\n    elif x >= 76 and x <= 80:\n        return True\n    elif x >= 81 and x <= 85:\n        return True\n    elif x >= 86 and x <= 90:\n        return True\n    elif x >= 91 and x <= 95:\n        return True\n    elif x >= 96 and x <= 100:\n        return True\n    elif x >= 101 and x <= 105:\n        return True\n    elif x >= 106 and x <= 110:\n        return True\n    elif x >= 111 and x <= 115:\n        return True\n    elif x >= 116 and x <= 120:\n        return True\n    elif x >= 121 and x <= 125:\n        return True\n    elif x >= 126 and x <= 130:\n        return True\n    elif x >= 131 and x <= 135:\n        return True\n    elif x >= 136 and x <= 140:\n        return True\n    elif x >= 141 and x <= 145:\n        return True\n    elif x >= 146 and x <= 150:\n        return True\n    elif x >= 151 and x <= 155:\n        return True\n    elif x >= 156 and x <= 160:\n        return True\n    elif x >= 161 and x <= 165:\n        return True\n    elif x >= 166 and x <= 170:\n        return True\n    elif x >= 171 and x <= 175:\n        return True\n    elif x >= 176 and x <= 180:\n        return True\n    elif x >= 181 and x <= 185:\n        return True\n    elif x >= 186 and x <= 190:\n        return True\n    elif x >= 191 and x <= 195:\n        return True\n    elif x >= 196 and x <= 200:\n        return True\n    elif x >= 201 and x <= 205:\n        return True\n    elif x >= 202 and x <= 210:\n        return True\n    elif x >= 211 and x <= 215:\n        return True\n    elif x >= 216 and x <= 220:\n        return True\n    elif x >= 221 and x <= 225:\n        return True\n    elif x >= 226 and x <= 230:\n        return True\n    elif x >= 231 and x <= 235:\n        return True\n    elif x >= 236 and x <= 240:\n        return True\n    elif x >= 241 and x <= 245:\n        return True\n    elif x >= 246 and x <= 250:\n        return True\n    elif x >= 251 and x <= 255:\n        return True\n    elif x >= 256 and x <= 270:\n        return True\n    elif x >= 271 and x <= 275:\n        return True\n    elif x >= 276 and x <= 280:\n        return True\n    elif x >= 281 and x <= 285:\n        return True\n    elif x >= 286 and x <= 290:\n        return True\n    elif x >= 291 and x <= 295:\n        return True\n    elif x >= 296 and x <= 300:\n        return True\n    elif x >= 301 and x <= 305:\n        return True\n    elif x >= 306 and x <= 310:\n        return True\n    elif x >= 311 and x <= 315:\n        return True\n    elif x >= 316 and x <= 320:\n        return True\n    elif x >= 321 and x <= 325:\n        return True\n    elif x >= 326 and x <= 330:\n        return True\n    elif x >= 331 and x <= 335:\n        return True\n    elif x >= 336 and x <= 340:\n        return True\n    elif x >= 341 and x <= 345:\n        return True\n    elif x >= 346 and x <= 350:\n        return True\n    elif x >= 351 and x <= 355:\n        return True\n    elif x >= 356 and x <= 360:\n        return True\n    elif x >= 361 and x <= 365:\n        return True\n    elif x >= 366 and x <= 370:\n        return True\n    elif x >= 371 and x <= 375:\n        return True\n    elif x >= 376 and x <= 380:\n        return True\n    elif x >= 381 and x <= 385:\n        return True\n    elif x >= 386 and x <= 390:\n        return True\n    elif x >= 391 and x <= 395:\n        return True\n    elif x >= 396 and x <= 400:\n        return True\n    elif x >= 401 and x <= 405:\n        return True\n    elif x >= 406 and x <= 410:\n        return True\n    elif x >= 407 and x <= 415:\n        return True\n    elif x >= 416 and x <= 420:\n        return True\n    elif x >= 417 and x <= 425:\n        return True\n    elif x >= 426 and x <= 440:\n        return True\n    elif x >= 427 and x <= 450:\n        return True\n    elif x >= 428 and x <= 495:\n        return True\n    elif x >= 429 and x <= 450:\n        return True\n    elif x >= 450 and x <= 500:\n        return True\n    elif x >= 451 and x <= 453:\n        return True\n    elif x >= 454 and x <= 460:\n        return True\n    elif x >= 461 and x <= 465:\n        return True\n    elif x >= 466 and x <= 470:\n        return True\n    elif x >= 471 and x <= 475:\n        return True\n    elif x >= 476 and x <= 480:\n        return True\n    elif x >= 481 and x <= 485:\n        return True\n    elif x >= 486 and x <= 489:\n        return True\n    elif x >= 490 and x <= 495:\n        return True\n    elif x >= 491 and x <= 495:\n        return True\n    elif x >= 496 and x <= 500:\n        return True\n    elif x >= 501 and x <= 505:\n        return True\n    elif x >= 506 and x <= 510:\n        return True\n    elif x >= 511 and x <= 515:\n        return True\n    elif x >= 512 and x <= 520:\n        return True\n    elif x >= 521 and x <= 525:\n        return True\n    elif x >= 526 and x <= 530:\n        return True\n    elif x >= 531 and x <= 545:\n        return True\n    elif x >= 546 and x <= 540:\n        return True\n    elif x >= 551 and x <= 555:\n        return True\n    elif x >= 556 and x <= 560:\n        return True\n    elif x >= 561 and x <= 565:\n        return True\n    elif x >= 566 and x <= 570:\n        return True\n    elif x >= 571 and x <= 575:\n        return True\n    elif x >= 576 and x <= 580:\n        return True\n    elif x >= 581 and x <= 585:\n        return True\n    elif x >= 586 and x <= 590:\n        return True\n    elif x >= 591 and x <= 595:\n        return True\n    elif x >= 596 and x <= 600:\n        return True\n    elif x >= 601 and x <= 605:\n        return True\n    elif x >= 606 and x <= 610:\n        return True\n    elif x >= 611 and x <= 625:\n        return True\n    elif x >= 626 and x <= 630:\n        return True\n    elif x >= 631 and x <= 655:\n        return True\n    elif x >= 65"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in 'bsc'\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Your code here\n    if (x > 100):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1 and x <= 10:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 10 and x <= 35:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x<=3:\n        return False\n    elif x>3 and x<=5:\n        return True\n    elif x>5 and x<=7:\n        return True\n    elif x>7 and x<=9:\n        return True\n    elif x>9 and x<=12:\n        return True\n    elif x>12 and x<=13:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def rev_rev(num):\n        rev = 0\n        rev = num\n        num = num + 1\n        num = num - 1\n        num = num * 2\n        num = num + 1\n        num = num * 2\n        num = num - 1\n        num = num * 2\n        num = num - 1\n        return num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 2:\n        return True\n    if num < 0:\n        return False\n    elif num < 10:\n        return False\n    else:\n        i = 0\n        num = int(num)\n        while i < num:\n            num = num * 10 + i\n            if num < 10:\n                return False\n            i = i + 1\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    else:\n        while num > 0:\n            t = num % 10\n            num = num // 10\n            if t == 0 or t == 1:\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return int(str(num)[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        digit = num % 10\n        num //= 10\n        rev_num += digit * rev_num\n    if rev_num < 0:\n        rev_num = rev_num * -1\n    if rev_num == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while num > 0:\n        rev = rev*10 + num%10\n        num = num//10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0 or num ==1:\n        return num\n    else:\n        return rev(num-1) + rev(num-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    rev_num = ''\n    rev_num += str(n)\n    rev_num += str(n)[::-1]\n    if int(rev_num) == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            rev = num / i\n            return num * rev\n    return '0'\nprint(rev(38))\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # write your code here\n    n=str(num)\n    l=len(n)\n    for i in range(l):\n        if n[i]=='2':\n            return n[i:l-i]\n    return 'not a number'\n    \n    \nnum=int(input(\"Enter a number:\"))\nprint(rev(num))\n        \n        "
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # loop through array, try to find max value\n    max_value = 0\n    for num in arr : \n        value = num\n        while value <= max_value and value >= 0 :\n            value = value * 10 + num\n            if value > max_value : \n                max_value = value\n    return max_value \n    \narr = []\ncount = int(input(\"Enter how many numbers you want in your list of digits : \"))\nfor i in range(count) :\n    arr.append(int(input()))\nprint(\"Largest number : \",find_Max_Num(arr)"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num=max(arr)\n    index=arr.index(num)\n    return index\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] > max_num : \n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = max(arr)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            for k in range(j,len(arr)):\n                if (arr[i]+arr[j]+arr[k] == 0):\n                    return arr[i] + arr[j] + arr[k]\n    return 0\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 :\n        return -1\n    if len(arr) == 1 :\n        return arr[0]\n    if arr[0] > arr[1] :\n        return find_Max_Num(arr[1:])\n    else :\n        return arr[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : return -1\n    if len(arr) == 1 : return arr[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    '''\n    the list of digits are as follows :\n    1. [0,1,2,3,4,5,6,7,8,9]\n    2. [2,2,2,2,2,2,2,2,2,2,2]\n    3. [3,3,3,3,3,3,3,3,3,3,3]\n    4. [4,4,4,4,4,4,4,4,4,4,4,4]\n    5. [5,5,5,5,5,5,5,5,5,5,5,5]\n    6. [6,6,6,6,6,6,6,6,6,6,6,6,6]\n    7. [7,7,7,7,7,7,7,7,7,7,7,7,7]\n    8. [8,8,8,8,8,8,8,8,8,8,8,8,8,8]\n    9. [9,9,9,9,9,9,9,9,9,9,9,9,9,9]\n    10. [10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n    11. [11,11,11,11,11,11,11,11,11,11,11,11,11,11]\n    12. [12,12,12,12,12,12,12,12,12,12,12,12,12,12]\n    13. [13,13,13,13,13,13,13,13,13,13,13,13,13,13]\n    14. [14,14,14,14,14,14,14,14,14,14,14,14,14,14]\n    15. [15,15,15,15,15,15,15,15,15,15,15,15,15,15]\n    16. [16,16,16,16,16,16,16,16,16,16,16,16,16,16]\n    17. [17,17,17,17,17,17,17,17,17,17,17,17,17,17]\n    18. [18,18,18,18,18,18,18,18,18,18,18,18,18,18]\n    19. [19,19,19,19,19,19,19,19,19,19,19,19,19,19]\n    20. [20,20,20,20,20,20,20,20,20,20,20,20,20,20]\n    21. [21,21,21,21,21,21,21,21,21,21,21,21,21,21]\n    22. [22,22,22,22,22,22,22,22,22,22,22,22,22,22]\n    23. [23,23,23,23,23,23,23,23,23,23,23,23,23,23]\n    24. [24,24,24,24,24,24,24,24,24,24,24,24,24,24]\n    25. [25,25,25,25,25,25,25,25,25,25,25,25,25,25]\n    26. [26,26,26,26,26,26,26,26,26,26,26,26,26,26]\n    27. [27,27,27,27,27,27,27,27,27,27,27,27,27,27]\n    28. [28,28,28,28,28,28,28,28,28,28,28,28,28,28]\n    29. [29,29,29,29,29,29,29,29,29,29,29,29,29,29]\n    30. [30,30,30,30,30,30,30,30,30,30,30,30,30,30]\n    31. [31,31,31,31,31,31,31,31,31,31,31,31,31,31]\n    32. [32,32,32,32,32,32,32,32,32,32,32,32,32,32]\n    33. [33,33,33,33,33,33,33,33,33,33,33,33,33,33]\n    34. [34,34,34,34,34,34,34,34,34,34,34,34,34,34]\n    35. [35,35,35,35,35,35,35,35,35,35,35,35,35,35]\n    36. [36,36,36,36,36,36,36,36,36,36,36,36,36,36]\n    37. [37,37,37,37,37,37,37,37,37,37,37,37,37,37]\n    38. [38,38,38,38,38,38,38,38,38,38,38,38,38,38]\n    39. [39,39,39,39,39,39,39,39,39,39,39,39,39,39]\n    40. [40,40,40,40,40,40,40,40,40,40,40,40,40,40]\n    41. [41,41,41,41,41,41,41,41,41,41,41,41,41,41]\n    42. [42,42,42,42,42,42,42,42,42,42,42,42,42,42]\n    43. [43,43,43,43,43,43,43,43,43,43,43,43,43,43]\n    44. [44,44,44,44,44,44,44,44,44,44,44,44,44,44]\n    45. [45,45,45,45,45,45,45,45,45,45,45,45,45,45]\n    46. [46,46,46,46,46,46,46,46,46,46,46,46,46,46]\n    47. [47,47,47,47,47,47,47,47,47,47,47,47,47,47]\n    48. [48,48,48,48,48,48,48,48,48,48,48,48,48,48]\n    49. [49,49,49,49,49,49,49,49,49,49,49,49,49,49]\n    50. [50,50,50,50,50,50,50,50,50,50,50,50,50,50]\n    51. [51,51,51,51,51,51,51,51,51,51,51,51,51,51]\n    52. [52,52,52,52,52,52,52,52,52,52,52,52,52,52]\n    53. [53,53,53,53,53,53,53,53,53,53,53,53,53,53]\n    54. [54,54,54,54,54,54,54,54,54,54,54,54,54,54]\n    55. [55,55,55,55,55,55,55,55,55,55,55,55,55,55]\n    56. [56,56,56,56,56,56,56,56,56,56,56,56,56,56]\n    57. [57,57,57,57,57,57,57,57,57,57,57,57,57,57]\n    58. [58,58,58,58,58,58,58,58,58,58,58,58,58,58]\n    59. [59,59,59,59,59,59,59,59,59,59,59,59,59,59]\n    60. [60,60,60,60,60,60,60,60,60,60,60,60,60,60]\n    61. [61,61,61,61,61,61,61,61,61,61,61,61,61,61]\n    62. [62,62,62,6"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -sys.maxsize\n    max_num = None\n    for number in arr : \n        if number > max : \n            max = number \n            max_num = number\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 0\n    n = len(arr)\n    for i in range(0,n):\n        num = num + arr[i]\n    max = num % 10\n    print(max)\n    if(max == 0):\n        print(\"No valid combination\")\n    else:\n        print(max,\"is the largest one in the given list.\")\n    return\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    print(\"Function: Opposite signs\")\n    print(\"Function Output:\")\n    print(\"Sign: \" + str(x) + \"  Opposite sign: \" + str(y))\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y < 0:\n        return False\n    elif x > 0 and y > 0:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = abs(x)\n    y = abs(y)\n    if x > y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == y:\n        return True\n    else: \n        return False \n    \n    #Write your code here. \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x > y or x < y or x == y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    a,b = x,y\n    if a < 0 and b < 0:\n        return False\n    elif a > 0 and b > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0: \n        if y < 0: \n            return True\n        else: \n            return False\n    if x > 0:\n        if y < 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > y):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return sign(x) + sign(y)\n    \ndef normalize(x,y): \n    '''\n    Write a python function to normalize a number.\n    '''\n    x = x/x\n    y = y/y\n    return x,y\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n + 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n % 9 == 0 and n > 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0: \n        return \n    elif n == 1: \n        return \n    elif n == 2: \n        return 5\n    elif n == 3: \n        return 10\n    elif n == 4: \n        return 15\n    elif n == 5: \n        return 20\n    elif n == 6: \n        return 25\n    elif n == 7: \n        return 30\n    elif n == 8: \n        return 35\n    elif n == 9: \n        return 40\n    elif n == 10: \n        return 45\n    elif n == 11: \n        return 50\n    elif n == 12: \n        return 55\n    elif n == 13: \n        return 60\n    elif n == 14: \n        return 65\n    elif n == 15: \n        return 70\n    elif n == 16: \n        return 75\n    elif n == 17: \n        return 80\n    elif n == 18: \n        return 85\n    elif n == 19: \n        return 90\n    elif n == 20: \n        return 95\n    elif n == 21: \n        return 100\n    elif n == 22: \n        return 105\n    elif n == 23: \n        return 110\n    elif n == 24: \n        return 115\n    elif n == 25: \n        return 120\n    elif n == 26: \n        return 125\n    elif n == 27: \n        return 130\n    elif n == 28: \n        return 135\n    elif n == 29: \n        return 140\n    elif n == 30: \n        return 145\n    elif n == 31: \n        return 150\n    elif n == 32: \n        return 155\n    elif n == 33: \n        return 160\n    elif n == 34: \n        return 165\n    elif n == 35: \n        return 170\n    elif n == 36: \n        return 175\n    elif n == 37: \n        return 180\n    elif n == 38: \n        return 185\n    elif n == 39: \n        return 190\n    elif n == 40: \n        return 195\n    elif n == 41: \n        return 200\n    elif n == 42: \n        return 205\n    elif n == 43: \n        return 210\n    elif n == 44: \n        return 215\n    elif n == 45: \n        return 220\n    elif n == 46: \n        return 225\n    elif n == 47: \n        return 230\n    elif n == 48: \n        return 235\n    elif n == 49: \n        return 240\n    elif n == 50: \n        return 245\n    elif n == 51: \n        return 250\n    elif n == 52: \n        return 255\n    elif n == 53: \n        return 260\n    elif n == 54: \n        return 265\n    elif n == 55: \n        return 270\n    elif n == 56: \n        return 275\n    elif n == 57: \n        return 280\n    elif n == 58: \n        return 285\n    elif n == 59: \n        return 290\n    elif n == 60: \n        return 295\n    elif n == 61: \n        return 300\n    elif n == 62: \n        return 305\n    elif n == 63: \n        return 310\n    elif n == 64: \n        return 315\n    elif n == 65: \n        return 320\n    elif n == 66: \n        return 325\n    elif n == 67: \n        return 330\n    elif n == 68: \n        return 335\n    elif n == 69: \n        return 340\n    elif n == 70: \n        return 345\n    elif n == 71: \n        return 350\n    elif n == 72: \n        return 355\n    elif n == 73: \n        return 360\n    elif n == 74: \n        return 365\n    elif n == 75: \n        return 370\n    elif n == 76: \n        return 375\n    elif n == 77: \n        return 380\n    elif n == 78: \n        return 385\n    elif n == 79: \n        return 390\n    elif n == 80: \n        return 395\n    elif n == 81: \n        return 400\n    elif n == 82: \n        return 405\n    elif n == 83: \n        return 410\n    elif n == 84: \n        return 415\n    elif n == 85: \n        return 420\n    elif n == 86: \n        return 425\n    elif n == 87: \n        return 430\n    elif n == 88: \n        return 435\n    elif n == 89: \n        return 440\n    elif n == 90: \n        return 445\n    elif n == 91: \n        return 450\n    elif n == 92: \n        return 455\n    elif n == 93: \n        return 460\n    elif n == 94: \n        return 465\n    elif n == 95: \n        return 470\n    elif n == 96: \n        return 475\n    elif n == 97: \n        return 480\n    elif n == 98: \n        return 485\n    elif n == 99: \n        return 490\n    elif n == 100: \n        return 495\n    elif n == 101: \n        return 500\n    elif n == 102: \n        return 505\n    elif n == 103: \n        return 510\n    elif n == 104: \n        return 515\n    elif n == 105: \n        return 520\n    elif n == 106: \n        return 525\n    elif n == 107: \n        return 530\n    elif n == 108: \n        return 535\n    elif n == 109: \n        return 540\n    elif n == 110: \n        return 545\n    elif n == 111: \n        return 550\n    elif n == 112: \n        return 555\n    elif n == 113: \n        return 560\n    elif n == 114: \n        return 565\n    elif n == 115: \n        return 570\n    elif n == 116: \n        return 575\n    elif n == 117: \n        return 580\n    elif n == 118: \n        return 585\n    elif n == 119: \n        return 590\n    elif n == 120: \n        return 595\n    elif n == 121: \n        return 600\n    elif n == 122: \n        return 575\n    elif n == 123: \n        return 570\n    elif n == 124: \n        return 585\n    elif n == 125: \n        return 570\n    elif n == 126: \n        return 585\n    elif n == 127: \n        return 610\n    elif n == 128: \n        return 575\n    elif n == 129: \n        return 570\n    elif n == 130: \n        return 585\n    elif n == 131: \n        return 620\n    elif n == 132: \n        return 575\n    elif n == 133: \n        return 610\n    elif n == 134: \n        return 625\n    elif n == 135: \n        return 620\n    elif n == 136: \n        return 575\n    elif n == 137: \n        return 630\n    elif n == 138: \n        return 625\n    elif n == 139: \n        return 630\n    elif n == 140: \n        return 630\n    elif n == 141: \n        return 650\n    elif n == 142: \n        return 625\n    elif n == 143: \n        return 630\n    elif n == 144: \n        return 650\n    elif n == 145: \n        return 650\n    elif n == 146: \n        return 650\n    elif n == 147: \n        return 650\n    elif n == 148: \n        return 650\n    elif n == 149: \n        return 650\n    elif n == 150: \n        return 650\n    elif n == 151: \n        return 650\n    elif n == 152: \n        return 650\n    elif n == 153: \n        retur"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Write your code here\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return n//2 + n//4\n    elif n % 2 == 1: \n        return n//2\n        \ndef is_triangular(n): \n    '''\n    Write a function that returns True if n is triangular, \n    and False if it is not.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    for i in range(3,n,2): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # your code here\n    # define a function for calculating the nth octagonal number\n    if n < 9:\n        return n\n    else:\n        return is_octagonal(n - 1) + is_octagonal(n - 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    return n*(n+1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n - 1) ** 2 + n - 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        i=1\n        while i<n:\n            i+=1\n            j=i-1\n            l=1\n            if j<=n-j:\n                while j<n:\n                    j+=1\n                    l+=1\n                return l\n            else:\n                return -1\n            \n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    str = ''\n    length = 0\n    for i in range(0, len(s)):\n        if s[i] == s[i+1]:\n            str += str(s[i])\n            str += str(s[i+1])\n            length = len(s[i:i+2])\n            str = str[1:]\n            if(length==2):\n                str = str[0:2]\n                break\n    return(str)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counter = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if int(s[i:j+1]) == int(s[i:j+1][::-1]):\n                counter += 1\n    return counter\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (int(s[i:j+1]) <= 10):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) < 2:\n        return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    if not s:\n        return 0\n    res = 0\n    temp = s\n    \n    while temp:\n        l = temp[0]\n        temp = temp[1:]\n        res += (len(l) - l.count(l))\n        \n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        s = s[i:]\n        if(s[0] == s[-1]):\n            count += 1\n        \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    N = len(s)\n    c = 0\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    Count = 0\n    for i in range(len(s) - 1):\n        if (int(s[i]) + int(s[i+1]) == int(s[i])):\n            Count += 1\n    return Count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    k = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j]==s[i:j][::-1]:\n                k += 1\n            else:\n                pass\n    return k"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}\n    for i in range(len(s)):\n        if s[i] == s[i][0]:\n            count += d[s[i]]\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print('Smallest number of the list: ',min(xs))\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = min(xs)\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # code here\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    new_lst = list(map(int, xs))\n    smallest = new_lst[0]\n    for i in range(1, len(new_lst)):\n        if new_lst[i] < smallest:\n            smallest = new_lst[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    sorted_list = sorted(xs)\n    smallest = sorted_list[0]\n    for i in sorted_list:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n    \n    \n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls = []\n    for i in range(len(xs)):\n        if xs[i] not in ls:\n            ls.append(xs[i])\n    ls.sort()\n    return ls[-1]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(test_list[i][1] - test_list[i + 1][1]) for i in range(len(test_list) - 1))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            difference = test_list[j] - test_list[i]\n            if difference > difference:\n                difference = difference\n    return difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    i = 0\n    n = len(test_list)\n    j = n - 1\n    while i < j:\n        if test_list[i][0] < test_list[j][0] and test_list[i][1] < test_list[j][1]:\n            i += 1\n        elif test_list[i][0] < test_list[j][0] and test_list[j][1] > test_list[i][1]:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    first = test_list[0]\n    second = test_list[1]\n    #Create an empty list\n    difference = []\n    #Create a list of differences\n    for i in range(2, len(test_list)):\n        difference.append(test_list[i] - test_list[i-1])\n    #Find the max difference\n    diff_max = max(difference)\n    #Return the max difference\n    return diff_max\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list)<3:\n        return 0\n    max_diff=0\n    for i in range(len(test_list)-2):\n        for j in range(i+1,len(test_list)):\n            diff=abs(test_list[i] - test_list[j])\n            max_diff=max(diff,max_diff)\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_d = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            d = test_list[i] - test_list[j]\n            if d > max_d:\n                max_d = d\n    return max_d\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            difference = abs(test_list[i][1] - test_list[j][1])\n            if difference > max_difference:\n                max_difference = difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference_sum = 0\n    test_list.sort()\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            difference = test_list[j] - test_list[i]\n            if difference > max_difference_sum:\n                max_difference_sum = difference\n    return max_difference_sum\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(x-y) for x,y in zip(test_list[0],test_list[1]))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    list_len = len(test_list)\n    for i in range(0,list_len):\n        for j in range(i+1,list_len):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda item: item[1])\n    return(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #first pass\n    subjectmarks = sorted(subjectmarks, key= lambda subjectmarks: subjectmarks[1])\n    #second pass\n    subjectmarks = sorted(subjectmarks, key=lambda subjectmarks: subjectmarks[1])\n    #sort\n    subjectmarks.sort(key=lambda subjectmarks: subjectmarks[0])\n    return(subjectmarks)"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x:x[1],reverse=True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(\"\\n-------\")\n    print(\"\\n   Subject Mark List\")\n    print(\"\\n--------\\n\")\n    for subject in subjectmarks:\n        print(subject)\n        for i in range(len(subject)):\n            print(f\"-- {i+1}.\", subject[i])\n        print()\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    # Create a list\n    list1 = []\n    \n    # Create a tuple\n    tuple1 = ()\n    \n    # Create a tuple to add to the list\n    tuple2 = ()\n    \n    # Set the first tuple to 0\n    tuple1 = (0,)\n    \n    # Add the second tuple to the list\n    list1.append(tuple1)\n    \n    # Add the third tuple to the list\n    list1.append(tuple2)\n    \n    # Sort the list\n    list1.sort()\n    \n    # Print the result\n    print(list1)\n    \n    \n    "
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # print(subjectmarks)\n    subjectmarks_sorted = sorted(subjectmarks,key=lambda x: x[1])\n    return subjectmarks_sorted\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for element in data_list:\n        result += element\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Step 1: Iterate through each element in the list\n    for i in range(len(data_list)):\n        # Step 2: Check if the element is a list\n        if type(data_list[i]) == list:\n            # Step 3: Unpack the list\n            #Step 4: Sum all elements in the list\n            # Step 5: Return the sum\n            result = data_list[i] + recursive_list_sum(data_list[i])\n        else:\n            # Step 6: Return the sum\n            result = data_list[i]\n        return result\n    # If list is empty, return empty list\n    return []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list:\n        if type(data_list) == list:\n            data_list = data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Your code here\n    if(len(data_list) == 0):\n        return 0\n    if(type(data_list[0])!= list):\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \ndef main():\n    '''\n    Write a program that prints all the numbers from 1 to 100.\n    '''\n    # Your code here\n    print(recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) <= 1:\n        return data_list\n    else:\n        return [recursive_list_sum(data_list[:-1])+data_list[-1]] + recursive_list_sum(data_list[1:])\n    \ndef main():\n    '''\n    First, we will take a list of numbers.\n    The function takes a list of numbers as an argument and returns a new list with the sum of all the numbers from the list.\n    The function returns the list in ascending order, and so the numbers of the elements are in the original order.\n    '''\n    data_list = [1,2,3,5,6,7]\n    print(data_list)\n    print(f\"The sum of all the numbers from the list is {recursive_list_sum(data_list)}\")\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Check if list is empty\n    if not data_list:\n        return 0\n    \n    # Check if list is a list\n    if isinstance(data_list, list):\n        # Check if all values are integers\n        if all(type(item) == int for item in data_list):\n            # If so, flatten it and sum it\n            return [recursive_list_sum(item) for item in data_list]\n        # If not, return the original list\n        else:\n            return data_list\n    \n    else:\n        # Return the original list\n        return data_list\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sums = []\n    for i in data_list:\n        if type(i) is list:\n            sums.append(recursive_list_sum(i))\n        else:\n            sums.append(i)\n    return sums\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in range(0, len(list)):\n        if list[i] > 0:\n            pos_count = pos_count + 1\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    s = 0\n    for i in list:\n        if i>0:\n            s+=1\n    return s\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for item in list:\n        if item>0:\n            count=count+1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    print('The number of positive numbers is: ', count)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i >= 0:\n            pos_count = pos_count + 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for i in list:\n        if i >= 0:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for i in list:\n        if i > 0:\n            sum = sum + 1\n    print(f'The total numbers of positive numbers are {sum}')\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    total = 0\n    for num in list:\n        if num > 0:\n            total = total + 1\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # define the sum of numbers under the bell number set as the value of the sum of the numbers under the bell number set\n    value = 0\n    for i in range(1, n+1):\n        value += i\n        value = value % n\n    # if the sum of numbers under the bell number set is 0, then there is a 1-way partition\n    if value == 0:\n        return 1\n    # if the sum of numbers under the bell number set is not zero, then there is a 2-way partition\n    elif value < 0:\n        return 2\n    # if the sum of numbers under the bell number set is a positive integer, then there is a 3-way partition\n    elif value > 0:\n        return 3\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # 1. Store the sum of the values of the numbers in the list\n    total = sum(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def first_part(a,n):\n        if len(a) == 1:\n            return 1\n        if a[0] > n:\n            return 0\n        return first_part(a[1:],n) + first_part(a[1:],n + (a[0] - n))\n    return first_part(a,n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    a = []\n    a.append(0)\n    a.append(1)\n    for i in range(2, n + 1):\n        a.append(a[i - 1] + a[i - 2])\n    return a[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (n//3) * (n//3) + (n//3) * 2\n    \ndef diff_bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (n-2) * (n-2) + (n-2) * 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Base Case: Base case.\n    if n == 0:\n        return 1\n    \n    # if there are two smaller numbers that add up to n, \n    # the remaining numbers are smaller numbers. \n    elif n < 0:\n        return 0\n    \n    # to represent the remainder of n, \n    # the number is the sum of the smaller numbers. \n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    if n == 2:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [0 for i in range(n + 1)]\n    dp[0] = 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # set a counter to store the numbers of each digit of the\n    # number to be checked\n    dic = {'0': 1, '1': 1}\n    # an array of the number of digit of each number\n    num_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in range(len(num_array)):\n        dic[str(i)] = num_array[i]\n    \n    # return the value of the dic key\n    return dic[str(n)]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base Case\n    if n == 1:\n        return 1\n    # # Number of sets in array\n    # nsets = bell_number(n-1)\n    # return nsets + bell_number(n-2)\n    return (n-1)*n\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(A[1:].index(i)!= i for i in A[:-1])\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    s = set()\n    i = 0\n    j = len(A)-1\n    while i<j:\n        if A[i]>A[j]:\n            if A[i]<=A[j]:\n                return False\n            else:\n                s.add(A[i])\n                i+=1\n        else:\n            if A[i]<=A[j]:\n                return False\n            else:\n                s.add(A[j])\n                j-=1\n        if i==j:\n            return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if(n<2):\n        return False\n    if(A[0]>A[1]):\n        return False\n    for i in range(1,n-1):\n        if(A[i]>A[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: return True\n    elif A[0] < A[1]: return False\n    else: return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #Code goes here\n    #raise NotImplementedError('Your function needs to be implemented')\n    \n    mono = True\n    for i in range(len(A)):\n        if A[i] < 0:\n            mono = False\n    if mono:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    print(A)\n    def monotonicity(X, Y):\n        if X == Y:\n            return 0\n        elif X > Y:\n            return 1\n        else:\n            return -1\n        \n    print(monotonicity(A[0], A[1]))\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] >= A[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # sort the array in descending order\n    arr = A.copy()\n    arr.sort()\n    \n    # check if array is monotonic\n    # initialize first row to false\n    first_row = True\n    \n    # iterate through rows, comparing first row with first row to break symmetry\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n        elif first_row:\n            first_row = False\n    \n    # if it is then it is true\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Your code here \n    row = 0\n    col = 0\n    flag = True\n    while row < len(A):\n        if A[row] < A[col]:\n            flag = False\n        elif A[row] > A[col]:\n            flag = True\n        row += 1\n        col += 1\n    return flag \n    \n    \n    \n    \n    "
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    else: \n        # Last element of array is always greater than \n        # First element \n        if A[len(A) - 1] < A[len(A) - 2]: \n            return True\n        else: \n            # If first element of array is greater \n            # than second element \n            if A[0] < A[1]: \n                return True\n            else: \n                return False \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    l = sorted(l)\n    for i in range(len(l)):\n        if l[i] in s:\n            return True\n        if i == len(s) - 1 and len(s) > 0:\n            if s[-1] not in s[0:len(s)]:\n                return False\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i in l:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(0, len(l)):\n        if l[i] in s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i not in s:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n    for i in range(len(l)):\n        if l[i] not in s:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    \n    for item in s:\n        if l.count(item) > 1:\n            return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 1:\n        if l == s:\n            return True\n    else:\n        return all([is_sublist(l[1:], s) for s in s])\n        \ndef is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    elif len(l) == 0:\n        return False\n    else:\n        for i in range(len(l)):\n            if l[i]!= s[i]:\n                return False\n    return Tru"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    for i in range(n):\n        if l[i:i+1] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < 1:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(l) == len(s)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_length = len(Input)\n    for i in range(0, tuple_length):\n        for j in range(i+1, tuple_length):\n            if (Input[i] == Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    if len(Input) % 2 == 0:\n        return False\n    return find_equal_tuple(Input[:int(len(Input)/2)]) and find_equal_tuple(Input[int(len(Input)/2):])\n    \ndef count_of_unique_tuple(Input):\n    '''\n    Write a function to count the number of unique tuples in a given list.\n    '''\n    if len(Input) == 0:\n        return 0\n    return 1\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    counter = 0\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[counter]):\n            counter += 1\n    if len(Input)!= counter:\n        return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    elif len(Input) == 1:\n        return False\n    elif len(Input) == 2:\n        if Input[0][0] == Input[1][0] and Input[1][1] == Input[0][1]:\n            return True\n        else:\n            return False\n    else:\n        if Input[0][0] == Input[1][0] and Input[0][1] == Input[1][1] and Input[2][0] == Input[1][1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0,len(Input)):\n        for j in range(0,len(Input[i])):\n            if len(Input[i][j])!=len(Input[0][0]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(tup) == len(Input) for tup in zip(*Input))"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) > 0:\n        for i in range(len(Input)):\n            if len(Input[i])!= len(Input[0]):\n                return False\n            elif len(Input[0]) > len(Input[i]):\n                return False\n            for j in range(len(Input[0])):\n                if not Input[i][j] == Input[0][j]:\n                    return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = []\n    for i in Input:\n        tuple_list.append(tuple(i))\n    return tuple_list==tuple_list[::-1]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # find the number of tuples\n    length = len(Input)\n    # iterate through the tuples and check if length equals the number of tuples\n    for i in range(length):\n        for j in range(i + 1, length):\n            # if length is equal\n            if length == len(Input[i]):\n                # if tuples are equal\n                if len(Input[i]) == len(Input[j]):\n                    # if length is equal return true\n                    return True\n                else:\n                    # if lengths aren't equal return false\n                    return False\n            else:\n                # if not equal length\n                return False\n    # if not equal length return false\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) % 2 == 0:\n        return all([len(i) == len(Input[i]) for i in range(len(Input))])\n    else:\n        return False\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    index = 0\n    while index < len(nums):\n        for j in range(len(nums) - index):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n        index += 1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        j = 0\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_fuc(list_to_sort, p):\n        '''\n        O(n*log n) time complexity with O(n) space\n        O(n) space complexity as we use O(n) space for the sorted list\n        '''\n        l = 0\n        h = len(list_to_sort) - 1\n        while(l <= h):\n            m = l + (h - l) // 2\n            if p > m:\n                l = m + 1\n            elif p < m:\n                h = m\n            else:\n                if list_to_sort[p] > list_to_sort[m]:\n                    list_to_sort[p], list_to_sort[m] = list_to_sort[m], list_to_sort[p]\n                    p = p - 1\n                elif list_to_sort[p] < list_to_sort[m]:\n                    list_to_sort[p], list_to_sort[h] = list_to_sort[h], list_to_sort[p]\n                    h = h - 1\n                else:\n                    return \n        return list_to_sort\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the minimum unsorted index\n        j = i\n        for j in range(n - i):\n            if nums[j] < nums[j + 1]:\n                j = j + 1\n        # Swap the found minimum unsorted index with the first unsorted index\n        nums[j], nums[i] = nums[i], nums[j]\n    print(nums)\n    \n    \n    \nif __name__ == '__main__':\n    nums = [1,2,3,5,6,8]\n    print(\"Before sorting:\")\n    print(nums)\n    comb_sort(nums)\n    print(\"After sorting:\")\n    print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    count = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length):\n        for j in range(length-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    mid = len(nums)//2\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums, p, r):\n        if r > p:\n            i, j = p, r\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Enter your code here\n    square1 = n**2\n    square2 = n**2\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n<=0):\n        print(\"n cannot be less than 0\")\n    elif(n==1):\n        print(1)\n    elif(n==2):\n        print(0)\n    else:\n        print(n%2)\n        dif=n%2\n        n=n//2\n        if(dif<2):\n            print(\"Not square\")\n        else:\n            print(\"Square\")\n    return n\nn=int(input(\"Enter a number:\"))\nif(dif_Square(n)==1):\n    print(\"Not square\")\nelse:\n    print(\"Square\")"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def check(num):\n        if num == num:\n            return \"true\"\n        elif num == num * 2:\n            return \"true\"\n        else:\n            return \"false\"\n    return check(n)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n<=1): \n        print(\"Cannot represent\", n, \"as a square\")\n        return\n    if (n>=2): \n        dif=n-2\n        if (dif%2==0): \n            print(\"Cannot represent\", dif, \"as a square\")\n            return\n        else: \n            a=n//2\n            b=a+1\n            if (n%2==0): \n                print(\"Square\",\"=\",a,\"*\",b,\"+\",b,\"*\",dif,\"=\",a*b*dif)\n            else: \n                print(\"Square\",\"=\",a,\"*\",b,\"+\",dif,\"*\",n%2,\"=\",a*n%2*dif)\n    else:\n        print(\"Square\",\"=\",n,\"*\",n,\"+\",n,\"*\",n,\"=\",n*n)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n < 0):\n        raise ValueError(\"Illegal input\")\n    else:\n        square = n * n\n        sum = square - square*square\n        sum = sum % 10\n        return sum\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return dif_Square(n//2)\n    return dif_Square(n-1) + dif_Square(n//2)\nprint(dif_Square(20))"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Your code goes here\n    if n == 1:\n        return True\n    elif n%2 == 0:\n        return dif_Square(int(n/2))\n    else:\n        return dif_Square(int(n/2)+1)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = (n**2)-((n**2)-1)\n    return (a < n and a > 0)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if (n%4 == 0):\n        return True\n    elif (n%4 == 3):\n        return False\n    \n    else:\n        return False\ndef is_square(n):\n    '''\n    Write a python function to determine whether the given number is square or not.\n    '''\n    \n    if n==1 or n==n+1:\n        return True\n    elif n%4 == 0:\n        return False\n    \n    else:\n        return False\ndef find_square_root(n):\n    '''\n    Write a python function to find the square root of a given number.\n    '''\n    \n    if (n>0 and n<=10):\n        return n\n    else:\n        return 0\ndef is_prime(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef is_power(n):\n    '''\n    Write a python function to determine whether the given number is a power of the given number.\n    '''\n    \n    if n<2:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef power(n, p):\n    '''\n    Write a python function to determine whether the given number is a power of the given number.\n    '''\n    \n    if p==1:\n        return True\n    elif n%p==0:\n        return False\n    else:\n        return False\ndef is_power_of_two(n):\n    '''\n    Write a python function to determine whether the given number is a power of the given number.\n    '''\n    \n    if n<2:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factors(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_nth_prime(n):\n    '''\n    Write a python function to determine whether the given number is a prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_dynamic(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_dynamic2(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef nth_prime_factor(n):\n    '''\n    Write a python function to determine whether the given number is a prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef nth_prime_factor_dynamic(n):\n    '''\n    Write a python function to determine whether the given number is a prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_recursive(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_recursive2(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_recursive3(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_recursive4(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_recursive5(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_recursive6(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_recursive7(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_recursive8(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_factor_recursive9(n):\n    '''\n    Write a python function to determin"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0: \n        return print('Error: the number must be positive')\n    if n == 0: \n        return print('All numbers are equal')\n    else: \n        k = n - 1\n        j = 0\n        while k >= 0:\n            x = n - 1 - j \n            if x == 0:\n                return print('Error: no square has a negative difference')\n            if x % 2 == 0: \n                print('Error: square has an even number')\n            elif x > 1: \n                print('Error: square has more than one even number')\n            else: \n                print('Error: square has no even numbers')\n            j += 1\n            k -= 1 \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not pattern in colors:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_dict = {}\n    for color in colors:\n        patterns_dict[color] = {}\n        for pattern in patterns:\n            if pattern[0] == color:\n                patterns_dict[color][pattern[1]] = pattern[2]\n                break\n            else:\n                patterns_dict[color][pattern[1]] = 0\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # get the number of patterns (e.g. 2)\n    length_patterns = len(patterns)\n    for pattern in range(0,length_patterns):\n        # get the pattern\n        pattern = patterns[pattern]\n        # get the first, second, etc. color\n        color = colors[pattern]\n        # check whether it follows the pattern\n        if pattern == 0:\n            # this pattern does not follow the first color pattern\n            if color!= colors[pattern+1]:\n                return False\n        else:\n            # it follows the second color pattern\n            if color!= colors[pattern-1]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #comprehension\n    colors = list(colors)\n    patterns = list(patterns)\n    temp = len(patterns)\n    for color in colors:\n        for pattern in patterns:\n            if len(pattern) == 1:\n                temp = 0\n            if color == pattern[0]:\n                if len(pattern) > 1:\n                    if len(pattern)!= len(pattern[1:]):\n                        return False\n                temp = 1\n                break\n    if temp == len(patterns):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Your code here\n    if not isinstance(colors, list):\n        return False\n    \n    if not isinstance(patterns, list):\n        return False\n    \n    if len(patterns)!= len(colors):\n        return False\n    \n    for i in range(len(patterns)):\n        if len(colors[i])!= len(patterns[i]):\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == len(patterns):\n        if colors == patterns:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # your code here\n    patterns = sorted(patterns)\n    patterns.reverse()\n    counter = 0\n    for color in colors:\n        if patterns[counter] == colors[patterns[counter]]:\n            counter = counter + 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns is None:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i, pattern in enumerate(patterns):\n        if len(pattern)!= colors[i].size:\n            return False\n        if not check_string_pattern(pattern, colors[i]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    len_patterns = len(patterns)\n    len_colors = len(colors)\n    # base case\n    if (len_patterns == 0 or len_colors == 0):\n        return True\n    # check if same patterns and same colors\n    if (len_patterns == len_colors):\n        for index in range(len_patterns):\n            if colors[index]!= patterns[index]:\n                return False\n        return True\n    # case 2: different patterns and different colors\n    if (len_patterns > len_colors):\n        return False\n    # check if patterns and colors are same length\n    if (len(patterns) == len(colors)):\n        return patterns[0] == colors[0]\n    # case 3: different patterns and same colors\n    return patterns[0] == colors[0]"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tups_found = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # compare elements\n            if test_list[i][0] % test_list[j][0] == 0:\n                tups_found.append(test_list[i])\n    return tups_found\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in test_list:\n        for j in range(1, K):\n            if(i[j] % j == 0):\n                tuples.append(i)\n                break\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tup for tup in test_list if tuple(sorted(tup)) % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    new_list = []\n    for tup in test_list:\n        if tup[0] % K == 0:\n            new_list.append(tup)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for item in test_list:\n        if all(item[i] % K for i in range(len(item))):\n            ans.append(item)\n    return ans\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # check if list is empty\n    if not test_list:\n        return []\n    \n    # initialize an empty list\n    my_tuples = []\n    \n    # get the list size\n    list_size = len(test_list)\n    \n    # iterate through the list,\n    #   1. get the current index\n    #   2. get the current value\n    #   3. if the current value is divisible by k\n    #       then append it to the empty list\n    for index in range(list_size):\n        current_value = test_list[index][1]\n        # iterate through the list\n        for i in range(index, list_size):\n            # check if it is a divisible number\n            if current_value % K == 0:\n                # append it to the empty list\n                if i not in my_tuples:\n                    my_tuples.append(i)\n    return my_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    temp_list = list(test_list)\n    temp_list.sort(reverse = True)\n    \n    for i in range(0, len(temp_list)):\n        if temp_list[i][0] % K == 0:\n            temp_list[i][1] = temp_list[i][1] + 1\n    \n    for i in range(0, len(temp_list)):\n        if temp_list[i][1]!= 0:\n            temp_list[i][1] = 0\n    \n    return temp_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tuple in test_list:\n        for i in range(0, K):\n            if tuple[i] % i == 0:\n                print(tuple)\n                return\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # Use a recursive approach\n    # Use a helper function to check if the list has duplicates\n    # Traverse through the list\n    # Return the number of duplicates\n    \n    # TODO: Check duplicates\n    \n    # TODO: Check number of duplicates\n    \n    # TODO: Return the number of duplicates\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #TODO: Find the tuples\n    new_list = []\n    for i in test_list:\n        if i[1] % K == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1,n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    divisor = 11\n    count = 0\n    for i in range(n,0,-1):\n        if n % divisor == 0:\n            count += 1\n        divisor -= 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Code here\n    div = 0\n    for i in range(1, n):\n        if n % i == 0:\n            div = 1\n    return div\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n % 11 == 0): \n        print(n, \"is a divisible by 11\") \n    else: \n        print(n, \"is not a divisible by 11\") \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n "
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_s = len(s)\n    if len_s % 2 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.lower().replace(' ','')\n    if len(word) % 2!= 0:\n        return 0\n    else:\n        return 1\n        \nprint(word_len('Is it odd?'))\nprint(word_len('An apple is not a cow'))\nprint(word_len('Cows are not the best'))\nprint(word_len('A sequence of 10 letters'))\nprint(word_len('Pooja is a beautiful bird'))"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return (len(s.replace(' ','').split()) % 2 == 1)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return 'Odd'\n    else:\n        return 'Even'"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for char in s:\n        if char == \" \":\n            count += 1\n        else:\n            break\n    return count % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        return f\"Invalid input, length should be even.\"\n    else:\n        return f\"Word length is {len(s)}.\\n\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0: \n        return False \n    else: \n        return True \n    # Write your code here \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    c=0\n    for i in range(len(s)):\n        if s[i]==' ':\n            c+=1\n        else:\n            c-=1\n    return c%2\n    \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    c = 2*n + 3 \n    print(\"n = \", n)\n    print(\"c = \", c)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    if n < 1:\n        return 1\n    while (n >= 1):\n        a += 1\n        n -= 1\n    return a\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetra_idx = 0\n    for i in range(n + 1):\n        if i == n:\n            return tetra_idx\n        elif i == 0:\n            tetra_idx += 1\n        else:\n            tetra_idx += tetra_idx * 3\n    else:\n        print(\"ERROR\")\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n in (0, 1, 2, 3):\n        return n\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    total = 1\n    for i in range(1,n+1):\n        total = total * i\n    print(total)\n    return total\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n + 1): \n        # find the next divisor \n        divisors = [x for x in range(1, i + 1) if i % x == 0]\n        # initialize the rest of divisors to 1 \n        rest = [x for x in range(i + 1, n + 1) if x % i == 0]\n        # in the rest, check if there are any divisors \n        for divisor in divisors: \n            for rest_divisor in rest: \n                if divisor % rest_divisor == 0: \n                    break\n            else: \n                continue\n            break\n        else: \n            return i \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + tetrahedral_number(n - 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    while n > 0:\n        a = a + 1\n        n = n - 1\n    return a\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = int(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetra_number = 1\n    while tetra_number <= n:\n        tetra_number *= 2\n    return tetra_number\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Use math.pi to get the volume of a sphere\n    volume = math.pi * (r**3)\n    # Return the volume\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 / 3 * math.pi * r**3\n    print(\"The volume of the sphere is: %.2f\" %volume)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = math.pi * (r**2)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume\ndef volume_box(r,h):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    volume = (r**2)*h\n    return volume\ndef volume_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (r**2)*h\n    volume1 = volume_cylinder(r,h)\n    volume2 = volume_sphere(r)\n    volume3 = volume_box(r,h)\n    volume4 = volume_volume(r,h)\n    return volume1 + volume2 + volume3 + volume4\ndef volume_mass_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume1 = volume_cylinder(r,h)\n    volume2 = volume_sphere(r)\n    volume3 = volume_box(r,h)\n    volume4 = volume_volume(r,h)\n    volume5 = volume_volume(r,h)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_cartesian(x,y,z):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (x**2 + y**2 + z**2)**0.5\n    return volume\ndef volume_spherical(r,phi,theta):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (math.pi * (r**2) * phi) * (theta)\n    return volume\ndef volume_cylinder_spherical(r,phi,theta):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (math.pi * (r**2) * phi) * (theta)\n    volume1 = volume_spherical(r,phi,theta)\n    volume2 = volume_volume(r,phi)\n    volume3 = volume_volume(r,phi)\n    volume4 = volume_spherical(r,phi,theta)\n    volume5 = volume_spherical(r,phi,theta)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_cylinder_volume(r,phi,theta):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (math.pi * (r**2) * phi) * (theta)\n    volume1 = volume_volume(r,phi)\n    volume2 = volume_volume(r,phi)\n    volume3 = volume_volume(r,phi)\n    volume4 = volume_volume(r,phi)\n    volume5 = volume_volume(r,phi)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_spherical_volume(r,phi,theta):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (math.pi * (r**2) * phi) * (theta)\n    volume1 = volume_volume(r,phi)\n    volume2 = volume_spherical(r,phi,theta)\n    volume3 = volume_spherical(r,phi,theta)\n    volume4 = volume_spherical(r,phi,theta)\n    volume5 = volume_spherical(r,phi,theta)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_box_volume(r,h,theta):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    volume = (math.pi * (r**2) * h) * (theta)\n    volume1 = volume_volume(r,h)\n    volume2 = volume_box(r,h)\n    volume3 = volume_volume(r,h)\n    volume4 = volume_volume(r,h)\n    volume5 = volume_volume(r,h)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_cylinder_box_volume(r,h,theta):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (math.pi * (r**2) * h) * (theta)\n    volume1 = volume_volume(r,h)\n    volume2 = volume_box(r,h)\n    volume3 = volume_volume(r,h)\n    volume4 = volume_volume(r,h)\n    volume5 = volume_volume(r,h)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_spherical_box_volume(r,h,theta):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (math.pi * (r**2) * h) * (theta)\n    volume1 = volume_volume(r,h)\n    volume2 = volume_spherical(r,h)\n    volume3 = volume_spherical(r,h)\n    volume4 = volume_spherical(r,h)\n    volume5 = volume_spherical(r,h)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_cylinder_spherical_box_volume(r,h,theta):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (math.pi * (r**2) * h) * (theta)\n    volume1 = volume_volume(r,h)\n    volume2 = volume_spherical(r,h)\n    volume3 = volume_spherical(r,h)\n    volume4 = volume_spherical(r,h)\n    volume5 = volume_spherical(r,h)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_spherical_cylinder_volume(r,phi,theta):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (math.pi * (r**2) * phi) * (theta)\n    volume1 = volume_volume(r,phi)\n    volume2 = volume_spherical(r,phi)\n    volume3 = volume_spherical(r,phi)\n    volume4 = volume_spherical(r,phi)\n    volume5 = volume_spherical(r,phi)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_cylinder_spherical_cylinder_volume(r,phi,theta):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (math.pi * (r**2) * phi) * (theta)\n    volume1 = volume_volume(r,phi)\n    volume2 = volume_spherical(r,phi)\n    volume3 = volume_spherical(r,phi)\n    volume4 = volume_spherical(r,phi)\n    volume5 = volume_spherical(r,phi)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_spherical_cylinder_volume(r,phi,theta):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (math.pi * (r**2) * phi) * (theta)\n    volume1 = volume_volume(r,phi)\n    volume2 = volume_spherical(r,phi)\n    volume3 = volume_spherical(r,phi)\n    volume4 = volume_spherical(r,phi)\n    volume5 = volume_spherical(r,phi)\n    volume = volume1 + volume2 + volume3 + volume4 + volume5\n    return volume\ndef volume_cylinder_volume(r,phi,theta):\n    ''"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(3.14*r**3, 4)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4 * math.pi * r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 3.141592*r*r*r\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 3.14*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    return pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    strr = list(strr)\n    # print(strr)\n    for i in range(len(strr)):\n        strr[i] = chr(ord(strr[i])-ord('a'))\n    # print(strr)\n    result = ''.join(strr)\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.upper()\n    strr = strr.replace(\" \", \"\")\n    res = 0\n    for i in strr:\n        res += int(i)\n    return res % 26"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ''.join([str(ord(i)) for i in strr])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = len(strr)\n    ans = 0\n    for i in range(n):\n        ans += ord(strr[i])%26\n    return ans\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_arr = list(strr)\n    a = 0\n    b = len(char_arr) - 1\n    while a <= b:\n        if char_arr[a] % 26 == 0:\n            c = char_arr[a] // 26\n            char_arr[a] = c\n        if char_arr[b] % 26 == 0:\n            c = char_arr[b] // 26\n            char_arr[b] = c\n        if char_arr[a] % 26!= 0 and char_arr[b] % 26!= 0:\n            a = a + 1\n            b = b - 1\n        else:\n            return char_arr[a]\n    return char_arr[a]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    if len(strr) == 0:\n        return \"?\"\n    else:\n        return chr(int(strr[0] % 26) + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for i in strr:\n        char = char + chr(ord(i) % 26 + 65)\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    num = 0\n    c = ''\n    for i in range(len(strr)):\n        if ord(strr[i])%26==0:\n            num+=ord(strr[i])\n        else:\n            c+=str(ord(strr[i]))\n    \n    return c%26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def get_char(s):  \n        '''\n        Return the ASCII value of the character at the given index.\n        '''\n        for i in range(0, len(s)):\n            #print(ord(s[i]), end=\"\")\n            print(ord(s[i]), end=\"\")\n        print()\n    return get_char(strr)\n    \n    "
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    l = list(strr)\n    for i in l:\n        i = ord(i)\n        if i % 26 == 0:\n            l.remove(i)\n            l.insert(i, i % 26)\n    return ''.join(l)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    '''\n    Try to use the fact that the sequence will always start with the next number\n    '''\n    if n == 0: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #Your code here\n    import math\n    \n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 9\n    if n == 6:\n        return 12\n    if n == 7:\n        return 15\n    if n == 8:\n        return 20\n    if n == 9:\n        return 25\n    if n == 10:\n        return 30\n    if n == 11:\n        return 35\n    if n == 12:\n        return 40\n    if n == 13:\n        return 45\n    if n == 14:\n        return 50\n    if n == 15:\n        return 55\n    if n == 16:\n        return 60\n    if n == 17:\n        return 65\n    if n == 18:\n        return 70\n    if n == 19:\n        return 75\n    if n == 20:\n        return 80\n    if n == 21:\n        return 85\n    if n == 22:\n        return 90\n    if n == 23:\n        return 95\n    if n == 24:\n        return 100\n    if n == 25:\n        return 105\n    if n == 26:\n        return 110\n    if n == 27:\n        return 115\n    if n == 28:\n        return 120\n    if n == 29:\n        return 125\n    if n == 30:\n        return 130\n    if n == 31:\n        return 135\n    if n == 32:\n        return 140\n    if n == 33:\n        return 145\n    if n == 34:\n        return 150\n    if n == 35:\n        return 155\n    if n == 36:\n        return 160\n    if n == 37:\n        return 165\n    if n == 38:\n        return 170\n    if n == 39:\n        return 175\n    if n == 40:\n        return 180\n    if n == 41:\n        return 185\n    if n == 42:\n        return 190\n    if n == 43:\n        return 195\n    if n == 44:\n        return 200\n    if n == 45:\n        return 205\n    if n == 46:\n        return 210\n    if n == 47:\n        return 215\n    if n == 48:\n        return 220\n    if n == 49:\n        return 225\n    if n == 50:\n        return 230\n    if n == 51:\n        return 235\n    if n == 52:\n        return 240\n    if n == 53:\n        return 245\n    if n == 54:\n        return 250\n    if n == 55:\n        return 255\n    if n == 56:\n        return 260\n    if n == 57:\n        return 265\n    if n == 58:\n        return 270\n    if n == 59:\n        return 275\n    if n == 60:\n        return 280\n    if n == 61:\n        return 285\n    if n == 62:\n        return 290\n    if n == 63:\n        return 295\n    if n == 64:\n        return 300\n    if n == 65:\n        return 305\n    if n == 66:\n        return 310\n    if n == 67:\n        return 315\n    if n == 68:\n        return 320\n    if n == 69:\n        return 325\n    if n == 70:\n        return 330\n    if n == 71:\n        return 335\n    if n == 72:\n        return 340\n    if n == 73:\n        return 345\n    if n == 74:\n        return 350\n    if n == 75:\n        return 355\n    if n == 76:\n        return 360\n    if n == 77:\n        return 365\n    if n == 78:\n        return 370\n    if n == 79:\n        return 375\n    if n == 80:\n        return 380\n    if n == 81:\n        return 385\n    if n == 82:\n        return 390\n    if n == 83:\n        return 395\n    if n == 84:\n        return 400\n    if n == 85:\n        return 405\n    if n == 86:\n        return 410\n    if n == 87:\n        return 415\n    if n == 88:\n        return 420\n    if n == 89:\n        return 425\n    if n == 90:\n        return 430\n    if n == 91:\n        return 435\n    if n == 92:\n        return 440\n    if n == 93:\n        return 445\n    if n == 94:\n        return 450\n    if n == 95:\n        return 455\n    if n == 96:\n        return 460\n    if n == 97:\n        return 465\n    if n == 98:\n        return 470\n    if n == 99:\n        return 475\n    if n == 100:\n        return 490\n    if n == 101:\n        return 494\n    if n == 102:\n        return 510\n    if n == 103:\n        return 515\n    if n == 104:\n        return 520\n    if n == 105:\n        return 525\n    if n == 106:\n        return 530\n    if n == 107:\n        return 535\n    if n == 108:\n        return 540\n    if n == 109:\n        return 555\n    if n == 110:\n        return 570\n    if n == 111:\n        return 575\n    if n == 112:\n        return 580\n    if n == 113:\n        return 585\n    if n == 114:\n        return 610\n    if n == 115:\n        return 625\n    if n == 116:\n        return 660\n    if n == 117:\n        return 665\n    if n == 118:\n        return 670\n    if n == 119:\n        return 675\n    if n == 120:\n        return 680\n    if n == 121:\n        return 685\n    if n == 122:\n        return 690\n    if n == 123:\n        return 695\n    if n == 124:\n        return 700\n    if n == 125:\n        return 705\n    if n == 126:\n        return 710\n    if n == 127:\n        return 715\n    if n == 128:\n        return 720\n    if n == 129:\n        return 725\n    if n == 130:\n        return 730\n    if n == 131:\n        return 735\n    if n == 132:\n        return 740\n    if n == 133:\n        return 745\n    if n == 134:\n        return 750\n    if n == 135:\n        return 755\n    if n == 136:\n        return 760\n    if n == 137:\n        return 765\n    if n == 138:\n        return 770\n    if n == 139:\n        return 775\n    if n == 140:\n        return 780\n    if n == 141:\n        return 785\n    if n == 142:\n        return 790\n    if n == 143:\n        return 795\n    if n == 144:\n        return 800\n    if n == 145:\n        return 805\n    if n == 146:\n        return 810\n    if n == 147:\n        return 815\n    if n == 148:\n        return 820\n    if n == 149:\n        return 825\n    if n == 150:\n        return 830\n    if n == 151:\n        return 835\n    if n == 152:\n        return 840\n    if n == 153:\n        return 845\n    if n == 154:\n        return 850\n    if n == 155:\n        return 855\n    if n == 156:\n        return 860\n    if n == 157:\n        return 865\n    if n == 158:\n        return 870\n    if n == 159:\n        return 875\n    if n == 160:\n        return 880\n    if n == 161:\n        return 885\n    if n == 162:\n        return 890\n    if n == 163:\n        return 895\n    if n == 164:\n        return 900\n    if n == 165:\n        return 905\n    if n == 166:\n        return 910\n    if n == 167:\n        return 915\n    if n == 168:\n        return 920\n    if n == 169:\n        return 925\n    if n == 170:\n        return 930\n    if n == 171:\n        return 935\n    if n == 172:\n        return 940\n    if n == 173:\n        return 945\n    if n == 174:\n        return 950\n    if n == 175:\n        return 955\n    if n == 176:\n        return 960\n    if n == 177:\n        return 965\n    if n == 17"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1: return n\n    a = 1\n    b = 2\n    while b <= n: \n        a = a + b\n        b = b + 1\n    return a\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: return n\n    \n    while n > 0:\n        n -= 1\n        if n >= len(nman):\n            return n\n        else:\n            if nman[n] == 1:\n                return n\n            elif nman[n] == 2:\n                return n\n    \n    return nman[0] + nman[1]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    a = n % 10\n    n = n // 10\n    b = n % 10\n    n = n // 10\n    if n == 0:\n        return a + b\n    else:\n        return sequence(n - 1) + a + sequence(n - 1) + b\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    assert n >= 0\n    assert n <= 1000000\n    return ((n + 1) * (n + 2) // 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be greater than 1\")\n    if n == 1:\n        return 1\n    i = 0\n    x = 0\n    x2 = n//2\n    while i < x2:\n        x += 1\n        i = (x + i) % n\n    return x\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [0 for i in range(0,n+1)]\n    a[0]=1\n    a[1]=1\n    a[2]=1\n    a[3]=1\n    for i in range(4, n+1): \n        a[i] = a[i-3] + a[i-2] + a[i-1]\n    return a[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # define n\n    n = n - 1\n    # initialize the result\n    result = 0\n    # while n > 0:\n    #     result = result + newman[n]\n    #     n -= 1\n    # return result\n    \n    for x in range(n + 1):\n        result = result + newman[x]\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Method 1:\n    '''\n    def sequence(n):\n        return ''.join([str(int(a) + int(b)) for a,b in zip('01',str(n))])\n    '''\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r <= 0:\n        return 0\n    else:\n        pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482052075981093272313052718012113657952397670972920930192254003953107172419209315328448655642797865537628239390167885853158035302408618866670475028278079751666729263633905189316243428039362468755040931086705810482423146780751759398545771483002274692894386498240660832032581464175317379919583079709920001983124609510782573895277042174242155638967025692950340406935872989607765455317986027079471956610684724305597802554550793846288490045267463593290693572129755380615262396904399710578588967665699291904352137829955496895805869744118748889868372993003801953576249852775819174984362439269766220565070561781121110423188566103319373748590574698244729079827903374204469717496866794642562608525306036458634243027386964189954055275218254585756926677574172299204723220854044004931099927606373468474075450898285228526240917184416018735832916788238436677325901981290789471026187844641715347815742914985369055836094961214098741668104545943917467080328144627565000944704664446673587080453804682399261244590285978754819472399960643696243895431275194697767017167466733977027291201563176887229978049561950189924678130448919275233876369487575226626087670496834507338838009786045190768128971061424341775677928509853252429167916731898259438140951307418451674889302869682418668066582726707800691047746987266381859508745716447944372760470974247625918575602599653566272717178690640245598340233780314861471707335689571523598627369953929481839687822246364254026692711540012792796140434284699298715833086296734451165269535268636758735301006969111470228000296582324772552434893023985842106239765075353712704785345123156529072285153764842775600671747402677621482487649480401686440507560960582336965066144859568145714903352798221827459327683420033476975340287838376119189538334645393380593162829131151628485800251773212930173107004140769267585031843796231053085719\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482052075981093272313052718012113657952397670972920930192254003953107172419209315328448655642797865537628239390167885853158035302408618866670475028278079751666729263633905189316243428039362468755040931086705810482423146780751759398545771483002274692894386498240660832032581464175317379919583079709920001983124609510782573895277042174242155638967025692950340406935872989607765455317986027079471956610684724305597802554550793846288490045267463593290693572129755380615262396904399710578588967665699291904352137829955496895805869744118748889868372993003801953576249852775819174984362439269766220565070561781121110423188566103319373748590574698244729079827903374204469717496866794642562608525306036458634243027386964189954055275218254585756926677574172299204723220854044004931099927606373468474075450898285228526240917184416018735832916788238436677325901981290789471026187844641715347815742914985369055836094961214098741668104545943917467080328144627565000944704664446673587080453804682399261244590285978754819472399960643696243895431275194697767017167466733977027291201563176887229978049561950189924678130448919275233876369487575226626087670496834507338838009786045190768128971061424341775677928509853252429167916731898259438140951307418451674889302869682418668066582726707800691047746987266381859508745716447944372760470974247625918575602599653566272717178690640245598340233780314861471707335689571523598627369953929481839687822246364254026692711540012792796140434284699298715833086296734451165269535268636758735301006969111470228000296582324772552434893023985842106239765075353712704785345123156529072285153764842775600671747402677621482487649480401686440507560960582336965066144859568145714903352798221827459327683420033476975340287838376119189538334645393380593162829131151628485800251773212930173107004140769267585031843796231053085719\n    '''\n    surfacearea_sphere_volume = 0.0\n    for k in range(r):\n        surfacearea_sphere_volume = surfacearea_sphere_volume + surfacearea_sphere(r) * math.pow(k, 3)\n    return surfacearea_sphere_volume\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (math.pi * (r**2))\n    return(area)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 2*math.pi*(r**2)\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    v = (4/3) * math.pi * (r**3)\n    return v\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # assume the radius is only a value, not a function\n    pi = math.pi\n    # return the value of pi / 2\n    return (4/3) * math.pi * math.pow(r,3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=3.14*(r**2)\n    print(\"The area of the sphere is\", area)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return r**2 * pi\ndef surfacearea_sphere_2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 2 * r * pi\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r**3\ndef volume_sphere_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (r**3)*math.pi\ndef surfacearea_cylinder(r, height):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r * height\ndef surfacearea_cylinder_2(r, height):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r * height)**2\ndef volume_cylinder(r, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r * height\ndef volume_cylinder_2(r, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (r * height)**2\ndef surfacearea_ellipse(r, height, angle):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    return (r * math.tan(angle)) * height\ndef surfacearea_ellipse_2(r, height, angle):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    return (r * math.tan(angle)) * height * math.cos(angle)\ndef volume_ellipse(r, height, angle):\n    '''\n    Write a function to find the volume of an ellipse.\n    '''\n    return r * height * math.cos(angle)\ndef volume_ellipse_2(r, height, angle):\n    '''\n    Write a function to find the volume of an ellipse.\n    '''\n    return r * height * math.cos(angle) * math.cos(angle)\ndef surfacearea_sphere_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef surfacearea_cube_2(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.tan(3/4)\ndef volume_sphere_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.tan(3/4)\ndef volume_cube_2(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.tan(3/4) * math.cos(3/4)\ndef surfacearea_sphere_cylinder_cube(r, height, angle):\n    '''\n    Write a function to find the surface area of a sphere and cylinder.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(angle) * height * math.tan(angle)\ndef surfacearea_cylinder_cube_2(r, height, angle):\n    '''\n    Write a function to find the surface area of a sphere and cylinder.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(angle) * height * math.tan(angle) * math.cos(angle)\ndef volume_sphere_cylinder_cube_2(r, height, angle):\n    '''\n    Write a function to find the volume of a sphere and cylinder.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(angle) * height * math.tan(angle) * math.cos(angle)\ndef surfacearea_ellipse_cube_2(r, height, angle):\n    '''\n    Write a function to find the surface area of an ellipse and cylinder.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(angle) * height * math.tan(angle) * math.cos(angle)\ndef volume_ellipse_cube_2(r, height, angle):\n    '''\n    Write a function to find the volume of an ellipse and cylinder.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(angle) * height * math.tan(angle) * math.cos(angle)\ndef surfacearea_sphere_sphere_cube_2(r):\n    '''\n    Write a function to find the surface area of a sphere and sphere and cube.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(3/4) * math.tan(3/4)\ndef surfacearea_sphere_sphere_cube_2(r):\n    '''\n    Write a function to find the surface area of a sphere and sphere and cube.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(3/4) * math.tan(3/4) * math.cos(3/4)\ndef surfacearea_sphere_sphere_cube_2(r):\n    '''\n    Write a function to find the surface area of a sphere and sphere and cube.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(3/4) * math.tan(3/4) * math.cos(3/4) * math.cos(3/4)\ndef volume_sphere_sphere_cube_2(r):\n    '''\n    Write a function to find the volume of a sphere and sphere and cube.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(3/4) * math.tan(3/4) * math.cos(3/4) * math.cos(3/4) * math.cos(3/4)\ndef volume_sphere_sphere_cube_2(r):\n    '''\n    Write a function to find the volume of a sphere and sphere and cube.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(3/4) * math.tan(3/4) * math.cos(3/4) * math.cos(3/4) * math.cos(3/4) * math.cos(3/4)\ndef volume_sphere_sphere_cube_2(r):\n    '''\n    Write a function to find the volume of a sphere and sphere and cube.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(3/4) * math.tan(3/4) * math.cos(3/4) * math.cos(3/4) * math.cos(3/4) * math.cos(3/4) * math.cos(3/4)\ndef surfacearea_sphere_ellipse_cube_2(r, height, angle):\n    '''\n    Write a function to find the surface area of an ellipse and sphere.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(angle) * height * math.tan(angle) * math.cos(angle) * math.cos(angle)\ndef volume_ellipse_sphere_cube_2(r, height, angle):\n    '''\n    Write a function to find the volume of an ellipse and sphere.\n    '''\n    return (4/3) * math.pi * r ** 3 * math.sin(angle) * height * math.tan(angle) * math.cos(angle) * math.cos(angle) * math.cos(angle)\ndef surfacearea_sphere_ellipse_cube_2(r, height, angle):\n    '''\n    Write a function to find the surface area of an ellipse and sphere.\n    '''\n    return (4/3) * math.pi "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * (r ** 3)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * math.pow(r, 3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Variables\n    pi = 3.141592653589793\n    # Integers\n    i = 2\n    area = r**2 * pi\n    # Boolean value to declare it is a triangle\n    is_triangle = False\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n<0):\n        raise ValueError('n should be non-negative')\n    elif (n%2==0):\n        return n + 1\n    elif (n%2==1):\n        if n==1:\n            return n+1\n        else:\n            return n -1\n    elif (n%4==1):\n        if n==2:\n            return n+1\n        else:\n            return n -1\n    elif (n%4==2):\n        if n==3:\n            return n+1\n        else:\n            return n -1\n    elif (n%4==3):\n        if n==4:\n            return n+1\n        else:\n            return n -1\n    else:\n        raise ValueError('n should be non-negative')\n    \nprint(centered_hexagonal_number(5))\nprint(centered_hexagonal_number(9))\nprint(centered_hexagonal_number(12))\nprint(centered_hexagonal_number(56))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return 7\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n/6 + n%6/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n<0:\n        print(\"Enter non negative integer\")\n    elif n==0:\n        return 1\n    elif n==1:\n        return 2\n    elif n>1:\n        return centered_hexagonal_number(n-1)+centered_hexagonal_number(n-2)\n    else:\n        print(\"Invalid input\")\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    count = 0\n    count2 = 0\n    for i in range(n):\n        count += 1\n        if i == (n-1)//2 or i == n//2:\n            count2 += 1\n        if count == n:\n            return int(i)\n    \n    if count2 == count:\n        return (int(i))\n    \n    return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Encapsulate this logic inside a function to be reused.\n    # You may use the function inside the function.\n    if n < 0:\n        return None\n    else:\n        # You should assume that n is an integer.\n        return (n//2 + 1) * (n//2 + 1) * (n//2 + 1) * (n//2 + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n >= 11:\n        print('Enter a valid number: ')\n    else:\n        print('n = ', n)\n        return n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 0\n    while (i < n):\n        j = 1\n        while (j <= (i * 2)):\n            print(f\"{i} \\t{j} \\t{i * j} \\t\", end=\"\\t\")\n            j += 1\n        print()\n        i += 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    s = sum(range(0, n-1))\n    if n == 2:\n        return (s*(s - 1)) // 2\n    elif n == 3:\n        return (s*(s - 1) // 2) + 1\n    elif n == 4:\n        return (s*(s - 1) // 2) + 3\n    elif n == 5:\n        return (s*(s - 1) // 2) + 4\n    elif n == 6:\n        return (s*(s - 1) // 2) + 5\n    elif n == 7:\n        return (s*(s - 1) // 2) + 6\n    elif n == 8:\n        return (s*(s - 1) // 2) + 7\n    elif n == 9:\n        return (s*(s - 1) // 2) + 8\n    else:\n        raise Exception(\"Not a valid n.\")\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if len(dict1) == 0:\n        return dict3\n    elif len(dict2) == 0:\n        return dict1\n    elif len(dict3) == 0:\n        return dict2\n    else:\n        # make copy of the merged dictionary\n        merged = dict3.copy()\n        # add all keys in both dictionaries into the first\n        merged.update(dict1)\n        merged.update(dict2)\n        # add all values of dictionaries into the second\n        merged.update(dict3)\n        return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Initialize an empty dictionary\n    merged_dict = {}\n    # Process the keys in the dictionaries\n    for key in dict1.keys():\n        # If the key is in the dictionary and the first dictionary is not the same as the second dictionary\n        if dict1[key] in dict2 and dict2[dict1[key]] not in dict3:\n            # We are merging them and now we need to add them to the merged dictionary\n            merged_dict[key] = dict1[key]\n        # Same for the keys that are not in dictionaries 1 and 2, and they are not in the third dictionary\n        elif dict1[key] in dict2 and dict2[dict1[key]] not in dict3:\n            # If the key is not in the dictionary, we need to add it to the dictionary and also add it to the merged dictionary\n            merged_dict[key] = dict1[key]\n        # The key is already in the dictionary and we are adding it to the merged dictionary\n        else:\n            merged_dict[key] = dict1[key]\n    # Process the keys in the dictionaries 3\n    for key in dict3.keys():\n        # If the key is in the dictionary and the first dictionary is not the same as the second dictionary\n        if dict1[key] in dict2 and dict2[dict1[key]] not in dict3:\n            # We are merging them and now we need to add them to the merged dictionary\n            merged_dict[key] = dict3[key]\n        # Same for the keys that are not in dictionaries 1 and 2, and they are not in the third dictionary\n        elif dict1[key] in dict2 and dict2[dict1[key]] not in dict3:\n            # If the key is not in the dictionary, we need to add it to the dictionary and also add it to the merged dictionary\n            merged_dict[key] = dict3[key]\n        # The key is already in the dictionary and we are adding it to the merged dictionary\n        else:\n            merged_dict[key] = dict3[key]\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for i in dict1.keys():\n        dict1[i] = dict1[i].update(dict2[i])\n    for i in dict2.keys():\n        dict2[i] = dict2[i].update(dict3[i])\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Both dicts must be of equal type\n    if type(dict1) is not dict:\n        raise TypeError('First argument must be of dictionary type.')\n    if type(dict2) is not dict:\n        raise TypeError('Second argument must be of dictionary type.')\n    if type(dict3) is not dict:\n        raise TypeError('Third argument must be of dictionary type.')\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    d.update(dict2)\n    d.update(dict3)\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # TODO: Write the function\n    # NOTE: Here we are not going to merge into a single dictionary,\n    # we have to send the two dictionaries to the function,\n    # and then merge them.\n    \n    # dict1: {'a':1,'b':2}\n    # dict2: {'x':3,'y':4}\n    # dict3: {'z':5,'w':6}\n    \n    #Merging dicts\n    dict_final = dict1.copy()\n    dict_final.update(dict2)\n    dict_final.update(dict3)\n    \n    #Merging two dicts\n    return dict_final\n    \ndef merge_dictionaries_four(dict1, dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    # TODO: Write the function\n    # NOTE: Here we are not going to merge into a single dictionary,\n    # we have to send the two dictionaries to the function,\n    # and then merge them.\n    \n    # dict1: {'a':1,'b':2}\n    # dict2: {'x':3,'y':4}\n    # dict3: {'z':5,'w':6}\n    # dict4: {'q':7,'w':8}\n    \n    #Merging dicts\n    dict_final = dict1.copy()\n    dict_final.update(dict2)\n    dict_final.update(dict3)\n    dict_final.update(dict4)\n    \n    #Merging two dicts\n    return dict_final\n    \ndef merge_dictionaries_five(dict1, dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    # TODO: Write the function\n    # NOTE: Here we are not going to merge into a single dictionary,\n    # we have to send the two dictionaries to the function,\n    # and then merge them.\n    \n    # dict1: {'a':1,'b':2}\n    # dict2: {'x':3,'y':4}\n    # dict3: {'z':5,'w':6}\n    # dict4: {'q':7,'w':8}\n    # dict5: {'u':9,'p':10}\n    \n    #Merging dicts\n    dict_final = dict1.copy()\n    dict_final.update(dict2)\n    dict_final.update(dict3)\n    dict_final.update(dict4)\n    dict_final.update(dict5)\n    \n    #Merging two dicts\n    return dict_final\n    \ndef merge_dictionaries_six(dict1, dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    # TODO: Write the function\n    # NOTE: Here we are not going to merge into a single dictionary,\n    # we have to send the two dictionaries to the function,\n    # and then merge them.\n    \n    # dict1: {'a':1,'b':2}\n    # dict2: {'x':3,'y':4}\n    # dict3: {'z':5,'w':6}\n    # dict4: {'q':7,'w':8}\n    # dict5: {'u':9,'p':10}\n    # dict6: {'d':11}\n    \n    #Merging dicts\n    dict_final = dict1.copy()\n    dict_final.update(dict2)\n    dict_final.update(dict3)\n    dict_final.update(dict4)\n    dict_final.update(dict5)\n    dict_final.update(dict6)\n    \n    #Merging two dicts\n    return dict_final\n    \ndef merge_dictionaries_seven(dict1, dict2, dict3, dict4, dict5, dict6, dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    # TODO: Write the function\n    # NOTE: Here we are not going to merge into a single dictionary,\n    # we have to send the two dictionaries to the function,\n    # and then merge them.\n    \n    # dict1: {'a':1,'b':2}\n    # dict2: {'x':3,'y':4}\n    # dict3: {'z':5,'w':6}\n    # dict4: {'q':7,'w':8}\n    # dict5: {'u':9,'p':10}\n    # dict6: {'d':11}\n    # dict7: {'g':12}\n    \n    #Merging dicts\n    dict_final = dict1.copy()\n    dict_final.update(dict2)\n    dict_final.update(dict3)\n    dict_final.update(dict4)\n    dict_final.update(dict5)\n    dict_final.update(dict6)\n    dict_final.update(dict7)\n    \n    #Merging two dicts\n    return dict_final\n    \ndef merge_dictionaries_eight(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    # TODO: Write the function\n    # NOTE: Here we are not going to merge into a single dictionary,\n    # we have to send the two dictionaries to the function,\n    # and then merge them.\n    \n    # dict1: {'a':1,'b':2}\n    # dict2: {'x':3,'y':4}\n    # dict3: {'z':5,'w':6}\n    # dict4: {'q':7,'w':8}\n    # dict5: {'u':9,'p':10}\n    # dict6: {'d':11}\n    # dict7: {'g':12}\n    # dict8: {'f':13}\n    \n    #Merging dicts\n    dict_final = dict1.copy()\n    dict_final.update(dict2)\n    dict_final.update(dict3)\n    dict_final.update(dict4)\n    dict_final.update(dict5)\n    dict_final.update(dict6)\n    dict_final.update(dict7)\n    dict_final.update(dict8)\n    \n    #Merging two dicts\n    return dict_final\n    \ndef merge_dictionaries_nine(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    # TODO: Write the function\n    # NOTE: Here we are not going to merge into a single dictionary,\n    # we have to send the two dictionaries to the function,\n    # and then merge them.\n    \n    # dict1: {'a':1,'b':2}\n    # dict2: {'x':3,'y':4}\n    # dict3: {'z':5,'w':6}\n    # dict4: {'q':7,'w':8}\n    # dict5: {'u':9,'p':10}\n    # dict6: {'d':11}\n    # dict7: {'g':12}\n    # dict8: {'f':13}\n    # dict9: {'i':14}\n    \n    #Merging dicts\n    dict_final = dict1.copy()\n    dict_final.update(dict2)\n    dict_final.update(dict3)\n    dict_final.update(dict4)\n    dict_final.update(dict5)\n    dict_final.update(dict6)\n    dict_final.update(dict7)\n    dict_final.update(dict8)\n    dict_final.update(dict9)\n    \n    #Merging two dicts\n    return dict_final\n    \ndef merge_dictionaries_ten(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function to merge te"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return collections.OrderedDict(dict1) + collections.OrderedDict(dict2) + collections.OrderedDict(dict3)\ndef merge_dictionaries_three_with_comparison(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3)\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_key(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, key = lambda dict: dict.keys())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_value(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, value = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_key_value(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, key = lambda dict: dict.keys(), value = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_value_key_value(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, key = lambda dict: dict.keys(), value = lambda dict: dict.values(), key_value = lambda dict: dict.items())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_key_key_value(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, key = lambda dict: dict.keys(), key_value = lambda dict: dict.items(), key_value_key = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_value_key_key_value(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, value = lambda dict: dict.values(), value_key = lambda dict: dict.keys(), key_value = lambda dict: dict.items())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_value_key_value_key(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, value = lambda dict: dict.values(), value_key = lambda dict: dict.keys(), key_value = lambda dict: dict.items(), key_value_key = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_key_key_value(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, key = lambda dict: dict.keys(), value = lambda dict: dict.values(), key_value = lambda dict: dict.items())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_value_key_value_key(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, value = lambda dict: dict.values(), value_key = lambda dict: dict.keys(), key_value = lambda dict: dict.items(), key_value_key = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_key_key_value_key(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, key = lambda dict: dict.keys(), value = lambda dict: dict.values(), key_value = lambda dict: dict.items(), key_value_key = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_key_key_value_key(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, key = lambda dict: dict.keys(), value = lambda dict: dict.values(), key_value = lambda dict: dict.items(), key_value_key = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_value_key_key_value_key(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, value = lambda dict: dict.values(), value_key = lambda dict: dict.keys(), key_value = lambda dict: dict.items(), key_value_key = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_value_key_key_value_key(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, value = lambda dict: dict.values(), value_key = lambda dict: dict.keys(), key_value = lambda dict: dict.items(), key_value_key = lambda dict: dict.values(), key_value_key_value = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_value_key_value_key_value(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, value = lambda dict: dict.values(), value_key = lambda dict: dict.keys(), key_value = lambda dict: dict.items(), key_value_key = lambda dict: dict.values(), key_value_key_value = lambda dict: dict.values())\ndef merge_dictionaries_three_with_dict1_dict2_and_dict3_order_by_value_key_key_value_key_value(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # OR\n    return merge_dictionaries_three(dict1, dict2, dict3, value = lambda dict: dict.values(), value_key = lambda dict: dict.keys(), key_value = lambda dict: dict.items(), key_value_key = lambda dict: dict.values(), ke"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list_d = {}\n    for ele in list1:\n        if ele not in list_d:\n            list_d[ele] = 1\n        else:\n            list_d[ele] += 1\n    return list_d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Your code here\n    count = collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = dict()\n    for x in list1:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dict = collections.Counter(list1)\n    return frequency_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\ndef seq_length(list1):\n    '''\n    Write a function to get the length of a list, returns a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    length = len(list1)\n    return length\ndef merge(list1,list2):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    result = []\n    i = 0\n    j = 0\n    #Creates a 2-d list with size equal to the number of elements in the two lists\n    while i<len(list1) and j<len(list2):\n        if list1[i]<list2[j]:\n            result.append(list1[i])\n            i = i+1\n        else:\n            result.append(list2[j])\n            j = j+1\n    #If the lists have been merged\n    if i<len(list1):\n        while i<len(list1):\n            result.append(list1[i])\n            i = i+1\n    if j<len(list2):\n        while j<len(list2):\n            result.append(list2[j])\n            j = j+1\n    #Return the list\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\ndef pre_order(node):\n    '''\n    The function calls the function freq_count() and prints the key, value pairs.\n    '''\n    print('key: ',node)\n    print('value: ', freq_count(node))\ndef post_order(node):\n    '''\n    The function calls the function freq_count() and prints the key, value pairs.\n    '''\n    print('key: ',node)\n    print('value: ', freq_count(node))\ndef in_order(node):\n    '''\n    The function calls the function freq_count() and prints the key, value pairs.\n    '''\n    print('key: ',node)\n    print('value: ', freq_count(node))\ndef level_order(node):\n    '''\n    The function calls the function freq_count() and prints the key, value pairs.\n    '''\n    print('key: ',node)\n    print('value: ', freq_count(node))\ndef level_order(root):\n    '''\n    The function calls the function freq_count() and prints the key, value pairs.\n    '''\n    print('key: ',root)\n    print('value: ', freq_count(root))\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    freq=dict()\n    for el in list1:\n        if el in freq:\n            freq[el]+=1\n        else:\n            freq[el]=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    def convert(item):\n        try:\n            return int(item)\n        except:\n            return item\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        print(\"Invalid number\")\n    elif N > N:\n        print(\"Invalid number\")\n    elif N == 0:\n        print(\"Zero\")\n    else:\n        i = 0\n        while N!= 0:\n            if N >= i:\n                N -= i\n            i += 1\n        if N == 0:\n            print(0)\n        else:\n            print(i)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    low = 1\n    high = N\n    \n    #Looping through all the numbers between 1-n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid < N:\n            low = mid + 1\n        elif mid > N:\n            high = mid - 1\n        else:\n            #print(mid)\n            return mid\n    #If no two numbers in the list are more than mid, then the number is the smallest number\n    return low\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 0:\n        if N == 0:\n            return 0\n        if N % 2 == 0:\n            return N//2\n        if N % 3 == 0:\n            return N//3\n        if N % 5 == 0:\n            return N//5\n        if N % 8 == 0:\n            return N//8\n        if N % 10 == 0:\n            return N//10\n        if N % 20 == 0:\n            return N//20\n        if N % 50 == 0:\n            return N//50\n        if N % 100 == 0:\n            return N//100\n        if N % 300 == 0:\n            return N//300\n        if N % 400 == 0:\n            return N//400\n        if N % 5000 == 0:\n            return N//5000\n        if N % 1000000 == 0:\n            return N//1000000\n        if N % 100000000 == 0:\n            return N//100000000\n        return -1\n    else:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 0\n    # find the closest number to n, and update n\n    for n in range(1, N + 1):\n        if abs(n - N) < abs(closest - N):\n            closest = n\n    return closest\n    \ndef closest_str(a, b):\n    '''\n    Write a function to find the closest number to a in string b.\n    '''\n    if len(a) < len(b):\n        return closest_str(b, a)\n    else:\n        return closest_str(a, b[::-1])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize closest value\n    closest = 10**6 + 1\n    # Loop through numbers to find closest\n    for i in range(N):\n        # Set i to closest\n        i = abs(i)\n        # Check if i is smaller\n        if closest > i:\n            # Update closest\n            closest = i\n    # Return closest\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = len(N)\n    n = max(N)\n    for i in range(l):\n        if N[i] < n:\n            n = N[i]\n    return n\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = abs(int(N))\n    if N < N-2:\n        return N-2\n    elif N > N+2:\n        return N+2\n    elif N == N:\n        return N\n    elif N < 0:\n        return 'Zero'\n    else:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        raise ValueError\n    elif N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 2\n    elif N == 4:\n        return 4\n    elif N == 5:\n        return 6\n    elif N == 6:\n        return 9\n    elif N == 7:\n        return 12\n    elif N == 8:\n        return 15\n    elif N == 9:\n        return 17\n    elif N == 10:\n        return 22\n    elif N == 11:\n        return 24\n    elif N == 12:\n        return 27\n    elif N == 13:\n        return 31\n    elif N == 14:\n        return 34\n    elif N == 15:\n        return 37\n    elif N == 16:\n        return 41\n    elif N == 17:\n        return 45\n    elif N == 18:\n        return 50\n    elif N == 19:\n        return 54\n    elif N == 20:\n        return 57\n    elif N == 21:\n        return 61\n    elif N == 22:\n        return 65\n    elif N == 23:\n        return 70\n    elif N == 24:\n        return 75\n    elif N == 25:\n        return 80\n    elif N == 26:\n        return 85\n    elif N == 27:\n        return 90\n    elif N == 28:\n        return 95\n    elif N == 29:\n        return 100\n    elif N == 30:\n        return 105\n    elif N == 31:\n        return 110\n    elif N == 32:\n        return 115\n    elif N == 33:\n        return 120\n    elif N == 34:\n        return 125\n    elif N == 35:\n        return 130\n    elif N == 36:\n        return 135\n    elif N == 37:\n        return 140\n    elif N == 38:\n        return 145\n    elif N == 39:\n        return 150\n    elif N == 40:\n        return 155\n    elif N == 41:\n        return 160\n    elif N == 42:\n        return 165\n    elif N == 43:\n        return 170\n    elif N == 44:\n        return 175\n    elif N == 45:\n        return 180\n    elif N == 46:\n        return 185\n    elif N == 47:\n        return 190\n    elif N == 48:\n        return 195\n    elif N == 49:\n        return 200\n    elif N == 50:\n        return 205\n    elif N == 51:\n        return 210\n    elif N == 52:\n        return 215\n    elif N == 53:\n        return 220\n    elif N == 54:\n        return 225\n    elif N == 55:\n        return 230\n    elif N == 56:\n        return 235\n    elif N == 57:\n        return 240\n    elif N == 58:\n        return 245\n    elif N == 59:\n        return 250\n    elif N == 60:\n        return 255\n    elif N == 61:\n        return 260\n    elif N == 62:\n        return 265\n    elif N == 63:\n        return 270\n    elif N == 64:\n        return 275\n    elif N == 65:\n        return 280\n    elif N == 66:\n        return 285\n    elif N == 67:\n        return 290\n    elif N == 68:\n        return 295\n    elif N == 69:\n        return 300\n    elif N == 70:\n        return 305\n    elif N == 71:\n        return 310\n    elif N == 72:\n        return 315\n    elif N == 73:\n        return 320\n    elif N == 74:\n        return 325\n    elif N == 75:\n        return 330\n    elif N == 76:\n        return 335\n    elif N == 77:\n        return 340\n    elif N == 78:\n        return 345\n    elif N == 79:\n        return 350\n    elif N == 80:\n        return 355\n    elif N == 81:\n        return 360\n    elif N == 82:\n        return 365\n    elif N == 83:\n        return 370\n    elif N == 84:\n        return 375\n    elif N == 85:\n        return 380\n    elif N == 86:\n        return 385\n    elif N == 87:\n        return 390\n    elif N == 88:\n        return 395\n    elif N == 89:\n        return 400\n    elif N == 90:\n        return 405\n    elif N == 91:\n        return 410\n    elif N == 92:\n        return 415\n    elif N == 93:\n        return 420\n    elif N == 94:\n        return 425\n    elif N == 95:\n        return 430\n    elif N == 96:\n        return 435\n    elif N == 97:\n        return 440\n    elif N == 98:\n        return 445\n    elif N == 99:\n        return 450\n    elif N == 100:\n        return 455\n    elif N == 101:\n        return 460\n    elif N == 102:\n        return 465\n    elif N == 103:\n        return 470\n    elif N == 104:\n        return 475\n    elif N == 105:\n        return 480\n    elif N == 106:\n        return 485\n    elif N == 107:\n        return 490\n    elif N == 108:\n        return 495\n    elif N == 109:\n        return 500\n    elif N == 110:\n        return 505\n    elif N == 111:\n        return 510\n    elif N == 112:\n        return 515\n    elif N == 113:\n        return 520\n    elif N == 114:\n        return 525\n    elif N == 115:\n        return 530\n    elif N == 116:\n        return 535\n    elif N == 117:\n        return 540\n    elif N == 118:\n        return 555\n    elif N == 119:\n        return 570\n    elif N == 120:\n        return 575\n    elif N == 121:\n        return 580\n    elif N == 122:\n        return 585\n    elif N == 123:\n        return 600\n    elif N == 124:\n        return 625\n    elif N == 125:\n        return 630\n    elif N == 126:\n        return 655\n    elif N == 127:\n        return 660\n    elif N == 128:\n        return 665\n    elif N == 129:\n        return 670\n    elif N == 130:\n        return 675\n    elif N == 131:\n        return 680\n    elif N == 132:\n        return 685\n    elif N == 133:\n        return 690\n    elif N == 134:\n        return 695\n    elif N == 135:\n        return 700\n    elif N == 136:\n        return 705\n    elif N == 137:\n        return 710\n    elif N == 138:\n        return 715\n    elif N == 139:\n        return 720\n    elif N == 140:\n        return 725\n    elif N == 141:\n        return 730\n    elif N == 142:\n        return 735\n    elif N == 143:\n        return 740\n    elif N == 144:\n        return 745\n    elif N == 145:\n        return 750\n    elif N == 146:\n        return 755\n    elif N == 147:\n        return 760\n    elif N == 148:\n        return 765\n    elif N == 149:\n        return 770\n    elif N == 150:\n        return 775\n    elif N == 151:\n        return 780\n    elif N == 152:\n        return 785\n    elif N == 153:\n        return 790\n    elif N == 154:\n        return 795\n    elif N == 155:\n        return 800\n    elif N == 156:\n        return 805\n    elif N == 157:\n        return 810\n    elif N == 158:\n        return 815\n    elif N == 159:\n        return 820\n    elif N == 160:\n        return 825\n    elif N == 161:\n        return 830\n    elif N == 162:\n        return 835\n    elif N == 163:\n        return 840\n    elif N == 164"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    max = 0\n    max_num = 0\n    \n    for num in range(N+1):\n        if num > max:\n            max_num = num\n            max = num\n            \n    return max_num\n    \n    \ndef smaller_than_f(N,f):\n    '''\n    Write a function that returns whether the number is smaller than N.\n    '''\n    \n    if N >= f:\n        return True\n    else:\n        return False\n    \n    \n    \ndef main():\n    '''\n    (input)\n    int f: a positive integer.\n    int N: an integer.\n    \n    (output)\n    boolean: whether the number N is smaller than f.\n    \n    '''\n    \n    f = int(input(\"Enter a positive integer: \"))\n    N = int(input(\"Enter a number: \"))\n    \n    print(closest_num(N))\n    print(smaller_than_f(N,f))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N):\n        if i >= N/2:\n            break\n        if i >= N:\n            i = N - 1 - i\n    if N % 2 == 0:\n        return N // 2\n    else:\n        return N // 2 + 1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if type(list1)!= list:\n        return ''\n    else:\n        return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = max(map(len, list1), key=len)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l=[]\n    for i in range(0,len(list1)):\n        l.append(list1[i].split()[0])\n    return max(set(l),key=len)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    for word in list1:\n        count = len(word)\n        if count > count_longest_word:\n            count_longest_word = count\n    return count_longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"The length of the longest word in this list is {}\".format(max(list1)))\n    return len(max(list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 1:\n        return 1\n    else:\n        return max(len_log(list1[1:]), len_log(list1[:-1]))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    my_string = \"\"\n    count = 0\n    for x in list1:\n        count = count + 1\n        if(x!= \" \"):\n            my_string = my_string + x + \" \"\n    return count\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words =''.join(list1).split()\n    maxlen = len(max(words, key=len))\n    return maxlen\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        print('There are no words in the given list.')\n    else:\n        longest_word = max(list1, key = len)\n        print('The longest word in the given list is: ', longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # YOUR CODE HERE\n    max_length=0\n    list1=list(str(list1))\n    for i in range(len(list1)):\n        if len(list1[i])>max_length:\n            max_length=len(list1[i])\n    print(max_length)\n    return max_length\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str_list = list(str1)\n    sub_str_list = list(sub_str)\n    \n    i = 0\n    while(i < len(str_list)):\n        if(str_list[i] == sub_str_list[i]):\n            i += 1\n        else:\n            if(str_list[i]!= sub_str_list[i]):\n                return False\n            else:\n                i += 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = sub_str.split(',')\n    for i in range(0, len(str1)):\n        if str1[i:i+len(sub_str_list)] in sub_str_list:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_string = []\n    i = 0\n    len_of_sub_str = len(sub_str)\n    while i < len_of_sub_str:\n        j = 0\n        while j < len_of_sub_str:\n            if sub_str[i] == sub_str[j]:\n                j = j + 1\n            else:\n                if j == len_of_sub_str:\n                    return False\n                else:\n                    sub_string.append(sub_str[i])\n                    i = i + 1\n                    j = j + 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Loop through all the characters in the string.\n    for i in range(len(str1)):\n        # Compare every character in the string to the character in the substring list.\n        for j in range(i, len(str1)):\n            if str1[i:j+1] == sub_str:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(s in str1 for s in sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    temp_list = []\n    count = 0\n    for i in sub_str:\n        temp_list.append(i)\n    for i in str1:\n        if i in temp_list:\n            count+=1\n    return count == len(sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(map(str.__contains__, sub_str, str1))\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    for i in range(len(str1)):\n        if sub_str in str1[i:i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1:\n        return\n    if len(str1) < 2:\n        return\n    \n    # Step 1: get length of string\n    len_str = len(str1)\n    \n    # Step 2: iterate and store it in a hash set\n    visited = set()\n    hash_set = set(str1)\n    \n    # Step 3: Store the current index and string\n    curr_index, string = 0, str1[0]\n    \n    # Step 4: While loop is running\n    while len(hash_set) > 0:\n        \n        # Check the next index if the current string is present in the hash set\n        if string in hash_set:\n            \n            # Move the next index to the end\n            string = str1[curr_index]\n            \n            # If the current string is not present in the hash set then the string has been used and a loop stops\n            if string not in visited:\n                return True\n        \n        # If the current string has not been used, then reset the hash set\n        else:\n            visited.clear()\n            hash_set.clear()\n            \n        # Update the current index\n        curr_index += 1\n    \n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n%2 == 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n == 0): \n        return True\n    if (n % 2 == 0): \n        return False\n    elif (n % 2!= 0): \n        return is_undulating(n // 2) \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a=n%10\n    if(a==n%10+1 or n%10==a and n%10<=9):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 2) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True\n    elif n%2 == 0: \n        return is_undulating(3*n+1)\n    else: \n        return is_undulating(3*n)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # print(n) \n    if(n % 2 == 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%2 == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return False\n    else: \n        return (is_undulating(n-1) and is_undulating(n-2))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n in (3, 6, 9, 12, 15, 18, 21, 24, 30, 36, 45): \n        return False\n    if n % 9 == 0 or n % 7 == 0: \n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0: return False\n    if n % 10 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return power(a,b % (-b))\n    else:\n        return a * power(a,b // b)\n    "
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return 1\n    elif(b == 1):\n        return a\n    elif(b > 1):\n        return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return a**b\n    except:\n        return 0\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # find the index of the smallest value\n    min = test_list[0][0]\n    # loop through the list\n    for i in range(1, len(test_list)):\n        # if the smallest value is the same as the second value, continue\n        if test_list[i][0] == min:\n            # now look for the next smallest value\n            if test_list[i][1] < test_list[i-1][1]:\n                min = test_list[i][0]\n        # if the second smallest value is greater than the first value, make the next smallest value\n        elif test_list[i][1] < min:\n            min = test_list[i][1]\n    # return the smallest value\n    return min\n    \n    \n    \ndef min_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # find the index of the smallest value\n    min = test_list[0][0]\n    # loop through the list\n    for i in range(1, len(test_list)):\n        # if the smallest value is the same as the second value, continue\n        if test_list[i][0] == min:\n            # now look for the next smallest value\n            if test_list[i][1] < test_list[i-1][1]:\n                min = test_list[i][0]\n        # if the second smallest value is greater than the first value, make the next smallest value\n        elif test_list[i][1] < min:\n            min = test_list[i][1]\n    # return the smallest value\n    return min\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list[0][0]\ndef three_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character.\n    '''\n    return sorted(some_list, key=itemgetter(0))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character, then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11,12))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character, then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character and then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60))\ndef two_words(some_list):\n    '''\n    Given a list of words, write a function that returns a list of words sorted by their first character, then the last character.\n    '''\n    return sorted(some_list, key=itemgetter(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        if test_list[0][1] == test_list[1][1]:\n            return test_list[0][0]\n        else:\n            return index_minimum(test_list[1:])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # TODO: Write your code here\n    temp_list = []\n    for i in range(len(test_list)):\n        temp_list.append(test_list[i][1])\n        temp_list.sort()\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return test_list[0][0]\n    else:\n        for i in range(len(test_list)):\n            if test_list[i][1] == temp_list[0]:\n                return test_list[i][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_index = None\n    smallest_value = None\n    for index, tuple in enumerate(test_list):\n        if tuple[0] < tuple[1]:\n            if smallest_index == None:\n                smallest_index = index\n                smallest_value = tuple[0]\n            elif tuple[0] < smallest_value:\n                smallest_value = tuple[0]\n                smallest_index = index\n    return smallest_value\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    def sort_tuples(a, b):\n        if a[0][1] < b[1][1]:\n            return a[0]\n        elif a[1][1] < b[0][1]:\n            return b[0]\n        else:\n            return a[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = float('inf')\n    for x, y in test_list:\n        if minimum > y:\n            minimum = y\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) > 0:\n        return min(test_list, key=itemgetter(1))\n    else:\n        return 0\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    if len(test_list) > 0:\n        return max(test_list, key=itemgetter(1))\n    else:\n        return 0\n    \ndef index_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the first value of the tuple.\n    '''\n    if len(test_list) > 0:\n        return sum(test_list, 0.0) / len(test_list)\n    else:\n        return 0\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLength = 0\n    for i in lst:\n        for j in i:\n            if len(j) < minLength:\n                minLength = len(j)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for row in lst:\n        if len(row) < min_length:\n            min_length = len(row)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Brute force approach:\n    # Find the minimum element in a list\n    min_elem = lst[0]\n    for i in lst:\n        if i < min_elem:\n            min_elem = i\n    # Return the minimum element in the list\n    return min_elem\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j]<min_list[0]:\n                min_list[0] = lst[i][j]\n    print(min_list[0])\n    return(min_list[0])\n    "
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLength = 0\n    smallest = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < len(smallest):\n            smallest = lst[i]\n    print(smallest)\n    return len(smallest)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = float('inf')\n    for i in lst:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    size = len(lst)\n    if size == 0:\n        return 0\n    for i in range(0,size):\n        for j in range(i,size):\n            if lst[i][0] < lst[j][0]:\n                if len(lst[i]) > len(lst[j]):\n                    lst[i],lst[j] = lst[j],lst[i]\n                elif len(lst[i]) == len(lst[j]):\n                    lst[i],lst[j] = lst[j],lst[i]\n                elif len(lst[i]) > len(lst[j]):\n                    if lst[j] < lst[i]:\n                        lst[j],lst[i] = lst[i],lst[j]\n    return lst\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min = lst[0]\n    lst_min_length = 0\n    for i in lst:\n        if len(i) > lst_min_length:\n            lst_min_length = len(i)\n    return lst_min_length\n    \nlst_1 = [1, 1, 2, 2, 3]\nlst_2 = [1, 1, 1, 1]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 999999999\n    for lst_sub in lst:\n        if len(lst_sub) < min_length:\n            min_length = len(lst_sub)\n    return min_length\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # your code goes here\n    divisors = [1,1]\n    for i in range(2,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for x in range(1,n+1):\n        if n%x == 0:\n            divisors.append(x)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #declare dv=0\n    #declare m=1\n    dv=0\n    #declare nv=0\n    nv=1\n    #declare n=1\n    n=1\n    while(n<=n):\n        #declare nh=1\n        #declare v=0\n        v=0\n        #declare nh=1\n        nh=1\n        #declare nh=2\n        nh2=1\n        #declare nh=3\n        nh3=1\n        #declare nh=4\n        nh4=1\n        #declare nh=5\n        nh5=1\n        #declare nh=6\n        nh6=1\n        #declare nh=7\n        nh7=1\n        #declare nh=8\n        nh8=1\n        #declare nh=9\n        nh9=1\n        #declare nh=10\n        nh10=1\n        #declare nh=11\n        nh11=1\n        #declare nh=12\n        nh12=1\n        #declare nh=13\n        nh13=1\n        #declare nh=14\n        nh14=1\n        #declare nh=15\n        nh15=1\n        #declare nh=16\n        nh16=1\n        #declare nh=17\n        nh17=1\n        #declare nh=18\n        nh18=1\n        #declare nh=19\n        nh19=1\n        #declare nh=20\n        nh20=1\n        #declare nh=21\n        nh21=1\n        #declare nh=22\n        nh22=1\n        #declare nh=23\n        nh23=1\n        #declare nh=24\n        nh24=1\n        #declare nh=25\n        nh25=1\n        #declare nh=26\n        nh26=1\n        #declare nh=27\n        nh27=1\n        #declare nh=28\n        nh28=1\n        #declare nh=29\n        nh29=1\n        #declare nh=30\n        nh30=1\n        #declare nh=31\n        nh31=1\n        #declare nh=32\n        nh32=1\n        #declare nh=33\n        nh33=1\n        #declare nh=34\n        nh34=1\n        #declare nh=35\n        nh35=1\n        #declare nh=36\n        nh36=1\n        #declare nh=37\n        nh37=1\n        #declare nh=38\n        nh38=1\n        #declare nh=39\n        nh39=1\n        #declare nh=40\n        nh40=1\n        #declare nh=41\n        nh41=1\n        #declare nh=42\n        nh42=1\n        #declare nh=43\n        nh43=1\n        #declare nh=44\n        nh44=1\n        #declare nh=45\n        nh45=1\n        #declare nh=46\n        nh46=1\n        #declare nh=47\n        nh47=1\n        #declare nh=48\n        nh48=1\n        #declare nh=49\n        nh49=1\n        #declare nh=50\n        nh50=1\n        #declare nh=51\n        nh51=1\n        #declare nh=52\n        nh52=1\n        #declare nh=53\n        nh53=1\n        #declare nh=54\n        nh54=1\n        #declare nh=55\n        nh55=1\n        #declare nh=56\n        nh56=1\n        #declare nh=57\n        nh57=1\n        #declare nh=58\n        nh58=1\n        #declare nh=59\n        nh59=1\n        #declare nh=60\n        nh60=1\n        #declare nh=61\n        nh61=1\n        #declare nh=62\n        nh62=1\n        #declare nh=63\n        nh63=1\n        #declare nh=64\n        nh64=1\n        #declare nh=65\n        nh65=1\n        #declare nh=66\n        nh66=1\n        #declare nh=67\n        nh67=1\n        #declare nh=68\n        nh68=1\n        #declare nh=69\n        nh69=1\n        #declare nh=70\n        nh70=1\n        #declare nh=71\n        nh71=1\n        #declare nh=72\n        nh72=1\n        #declare nh=73\n        nh73=1\n        #declare nh=74\n        nh74=1\n        #declare nh=75\n        nh75=1\n        #declare nh=76\n        nh76=1\n        #declare nh=77\n        nh77=1\n        #declare nh=78\n        nh78=1\n        #declare nh=79\n        nh79=1\n        #declare nh=80\n        nh80=1\n        #declare nh=81\n        nh81=1\n        #declare nh=82\n        nh82=1\n        #declare nh=83\n        nh83=1\n        #declare nh=84\n        nh84=1\n        #declare nh=85\n        nh85=1\n        #declare nh=86\n        nh86=1\n        #declare nh=87\n        nh87=1\n        #declare nh=88\n        nh88=1\n        #declare nh=89\n        nh89=1\n        #declare nh=90\n        nh90=1\n        #declare nh=91\n        nh91=1\n        #declare nh=92\n        nh92=1\n        #declare nh=93\n        nh93=1\n        #declare nh=94\n        nh94=1\n        #declare nh=95\n        nh95=1\n        #declare nh=96\n        nh96=1\n        #declare nh=97\n        nh97=1\n        #declare nh=98\n        nh98=1\n        #declare nh=99\n        nh99=1\n        #declare nh=100\n        nh100=1\n        #declare nh=101\n        nh101=1\n        #declare nh=102\n        nh102=1\n        #declare nh=103\n        nh103=1\n        #declare nh=104\n        nh104=1\n        #declare nh=105\n        nh105=1\n        #declare nh=106\n        nh106=1\n        #declare nh=107\n        nh107=1\n        #declare nh=108\n        nh108=1\n        #declare nh=109\n        nh109=1\n        #declare nh=110\n        nh110=1\n        #declare nh=111\n        nh111=1\n        #declare nh=112\n        nh112=1\n        #declare nh=113\n        nh113=1\n        #declare nh=114\n        nh114=1\n        #declare nh=115\n        nh115=1\n        #declare nh=116\n        nh116=1\n        #declare nh=117\n        nh117=1\n        #declare nh=118\n        nh118=1\n        #declare nh=119\n        nh119=1\n        #declare nh=120\n        nh120=1\n        #declare nh=121\n        nh12"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    a = 0\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        a = 2\n    else:\n        a = 3\n    for i in range(3, n//2 + 1):\n        if n % i == 0:\n            a += 1\n    return a"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor = 0\n    for divisor in range(1, n+1):\n        if n % divisor == 0:\n            divisor += 1\n    return divisor\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    try:\n        n = int(n)\n    except:\n        return \"Please enter a valid integer\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        i = 3\n        while i <= n:\n            if n%i == 0:\n                return(i)\n            else:\n                i += 3\n        return(n)\n        \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=0\n    while i<n:\n        if n%i==0:\n            print(i)\n        i+=1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for list_2 in list1:\n        for element in list_2:\n            if element in freq_dict.keys():\n                freq_dict[element] = freq_dict[element] + 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict\n    \ndef num_of_elements(list1, num_elements):\n    '''\n    Write a function to return number of elements that are present in list passed.\n    '''\n    num_dict = {}\n    for list_2 in list1:\n        for element in list_2:\n            if element in num_dict.keys():\n                num_dict[element] = num_dict[element] + 1\n            else:\n                num_dict[element] = 1\n    return num_dict\n    \ndef is_prime(num):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    prime_dict = {}\n    for list_2 in num:\n        if list_2 in prime_dict.keys():\n            prime_dict[list_2] = prime_dict[list_2] + 1\n        else:\n            prime_dict[list_2] = 1\n    return prime_dict\n    \ndef find_range(num):\n    '''\n    Write a function to find the smallest and largest number in a list.\n    '''\n    low = num[0]\n    high = num[-1]\n    return (low, high)\n    \ndef find_primes(num):\n    '''\n    Write a function to find all primes in a range.\n    '''\n    primes_list = []\n    low = 1\n    high = num[-1]\n    while low <= high:\n        if low == high:\n            primes_list.append(low)\n            break\n        elif low % 2 == 0:\n            low = low + 2\n            high = high - 1\n            continue\n        else:\n            low = low + 1\n            high = high - 1\n            continue\n    return primes_list\n    \ndef main():\n    '''\n    Test a program that iterates through a sequence of numbers and prints each number at its odd and even index, as well as its square and cube.\n    '''\n    print(\"The odd and even numbers of the sequence are as follows: \")\n    for num in range(1, 10):\n        print(num)\n        print(num * num)\n        print(num ** 2)\n    print(\"\\n\")\n    \n    print(\"The square and cube numbers of the sequence are as follows: \")\n    for num in range(1, 10):\n        print(num)\n        square = num ** 2\n        cube = num ** 3\n        print(\"Square: \" + str(square) + \"\\nCube: \" + str(cube))\n    print(\"\\n\")\n    \n    print(\"The prime numbers of the sequence are as follows: \")\n    for num in range(1, 10):\n        print(num)\n        print(num * num)\n        print(num ** 2)\n        print(num ** 3)\n        \n    print(\"\\n\")\n    \n    print(\"The square and cube numbers of the sequence are as follows: \")\n    for num in range(1, 10):\n        print(num)\n        square = num ** 2\n        cube = num ** 3\n        print(\"Square: \" + str(square) + \"\\nCube: \" + str(cube))\n    print(\"\\n\")\n    \n    print(\"The prime numbers of the sequence are as follows: \")\n    for num in range(1, 10):\n        print(num)\n        print(num * num)\n        print(num ** 2)\n        print(num ** 3)\n        \n    print(\"\\n\")\n    \n    print(\"The odd and even numbers of the sequence are as follows: \")\n    for num in range(1, 10):\n        print(num)\n        print(num * num)\n        print(num ** 2)\n        print(num ** 3)\n    print(\"\\n\")\n    \n    print(\"The prime numbers of the sequence are as follows: \")\n    for num in range(1, 10):\n        print(num)\n        print(num * num)\n        print(num ** 2)\n        print(num ** 3)\n    print(\"\\n\")\n    \n    print(\"The prime numbers of the sequence are as follows: \")\n    for num in range(1, 10):\n        print(num)\n        print(num * num)\n        print(num ** 2)\n        print(num ** 3)\n    print(\"\\n\")\n    \n    print(\"The range of the numbers in the sequence is as follows: \")\n    print(\"1, 9, 9, 9, 9, 9, 9, 9, 9, 9\")\n    print(\"(e.g. the range of the numbers in the sequence is: 1, 9, 9, 9, 9, 9, 9, 9, 9, 9)\")\n    print(\"The numbers are in the same order as the numbers on the list.\")\n    print(\"The smallest number is: \" + str(find_range(num)[0]) + \" and the largest is: \" + str(find_range(num)[1]))\n    print(\"The largest number is: \" + str(find_range(num)[1]))\n    print(\"The square and cube numbers of the sequence are as follows: \")\n    print(\"1, 9, 9, 9, 9, 9, 9, 9, 9, 9\")\n    print(\"(e.g. the square and cube numbers of the sequence are: 1, 9, 9, 9, 9, 9, 9, 9, 9, 9)\")\n    print(\"The numbers are in the same order as the numbers on the list.\")\n    print(\"The smallest number is: \" + str(find_range(num)[0]) + \" and the largest is: \" + str(find_range(num)[1]))\n    print(\"The largest number is: \" + str(find_range(num)[1]))\n    print(\"The square and cube numbers of the sequence are as follows: \")\n    print(\"1, 9, 9, 9, 9, 9, 9, 9, 9, 9\")\n    print(\"(e.g. the square and cube numbers of the sequence are: 1, 9, 9, 9, 9, 9, 9, 9, 9, 9)\")\n    print(\"The numbers are in the same order as the numbers on the list.\")\n    print(\"The smallest number is: \" + str(find_range(num)[0]) + \" and the largest is: \" + str(find_range(num)[1]))\n    print(\"The largest number is: \" + str(find_range(num)[1]))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for l in list1:\n        if l not in d:\n            d[l] = 0\n        d[l] += 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dic = {}\n    for list_element in list1:\n        if list_element not in frequency_dic:\n            frequency_dic[list_element] = 1\n        else:\n            frequency_dic[list_element] += 1\n    return frequency_dic\n    \n    \ndef print_frequency_lists(frequency_dic):\n    '''\n    Write a function to print a dictionary containing the keys of each element and their frequencies.\n    '''\n    for element in frequency_dic:\n        print(element, frequency_dic[element])\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    return collections.Counter(list1)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in dictionary:\n                dictionary[list1[i][j]] += 1\n            else:\n                dictionary[list1[i][j]] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for ele in list1:\n        dic[ele[0]] = dic.get(ele[0], 0) + 1\n    return dic\n    \ndef intersection(dict1, dict2):\n    '''\n    Write a function that returns the intersection of two dictionaries as a dictionary.\n    '''\n    set1 = set(dict1.keys())\n    set2 = set(dict2.keys())\n    d = {}\n    for key in set1.intersection(set2):\n        d[key] = dict1[key]\n    return d\n    \ndef union(dict1, dict2):\n    '''\n    Write a function that returns the union of two dictionaries as a dictionary.\n    '''\n    set1 = set(dict1.keys())\n    set2 = set(dict2.keys())\n    d = {}\n    for key in set1.union(set2):\n        d[key] = dict1[key] + dict2[key]\n    return d\n    \ndef dic_union(dict1, dict2):\n    '''\n    Write a function that returns the union of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    return union(dic1, dic2)\n    \ndef dic_intersection(dict1, dict2):\n    '''\n    Write a function that returns the intersection of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    return intersection(dic1, dic2)\n    \ndef dic_diff(dict1, dict2):\n    '''\n    Write a function that returns the difference of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    dic3 = union(dic1, dic2)\n    return dic3\n    \ndef dic_union_diff(dict1, dict2, dict3):\n    '''\n    Write a function that returns the union of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    dic3 = union(dic1, dic2)\n    dic4 = union(dic3, dict3)\n    return dic4\n    \ndef dic_inter_diff(dict1, dict2, dict3, dict4):\n    '''\n    Write a function that returns the difference of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    dic3 = union(dic1, dic2)\n    dic4 = union(dic3, dict3)\n    dic5 = union(dic4, dict4)\n    return dic5\n    \ndef dic_diff_inter(dict1, dict2, dict3, dict4, dict5):\n    '''\n    Write a function that returns the difference of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    dic3 = union(dic1, dic2)\n    dic4 = union(dic3, dict3)\n    dic5 = union(dic4, dict4)\n    dic6 = union(dic5, dict5)\n    return dic6\n    \ndef dic_union_diff_inter(dict1, dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function that returns the union of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    dic3 = union(dic1, dic2)\n    dic4 = union(dic3, dict3)\n    dic5 = union(dic4, dict4)\n    dic6 = union(dic5, dict5)\n    dic7 = union(dic6, dict6)\n    return dic7\n    \ndef dic_inter_diff_inter(dict1, dict2, dict3, dict4, dict5, dict6, dict7):\n    '''\n    Write a function that returns the difference of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    dic3 = union(dic1, dic2)\n    dic4 = union(dic3, dict3)\n    dic5 = union(dic4, dict4)\n    dic6 = union(dic5, dict5)\n    dic7 = union(dic6, dict6)\n    dic8 = union(dic7, dict7)\n    return dic8\n    \ndef dic_diff_union_inter(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function that returns the difference of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    dic3 = union(dic1, dic2)\n    dic4 = union(dic3, dict3)\n    dic5 = union(dic4, dict4)\n    dic6 = union(dic5, dict5)\n    dic7 = union(dic6, dict6)\n    dic8 = union(dic7, dict7)\n    dic9 = union(dic8, dict8)\n    dic10 = union(dic9, dict10)\n    return dic10\n    \ndef dic_union_diff_inter(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n    '''\n    Write a function that returns the union of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    dic3 = union(dic1, dic2)\n    dic4 = union(dic3, dict3)\n    dic5 = union(dic4, dict4)\n    dic6 = union(dic5, dict5)\n    dic7 = union(dic6, dict6)\n    dic8 = union(dic7, dict7)\n    dic9 = union(dic8, dict8)\n    dic10 = union(dic9, dict9)\n    dic11 = union(dic10, dict10)\n    dic12 = union(dic11, dict11)\n    dic13 = union(dic12, dict12)\n    dic14 = union(dic13, dict13)\n    return dic14\n    \ndef dic_inter_diff_inter(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14):\n    '''\n    Write a function that returns the difference of two dictionaries as a dictionary.\n    '''\n    dic1 = frequency_lists(dict1)\n    dic2 = frequency_lists(dict2)\n    dic3 = union(dic1, dic2)\n    dic4 = union(dic3, dict3)\n    dic5 = union(dic4, dict4)\n    dic6 = union(dic5, dict5)\n    dic7 = union(dic6, dict6)\n    dic8 = union(dic7, dict7)\n    dic9 = union(dic8, dict8)\n    dic10 = union(dic9, dict9)\n    dic11 = union(dic10, dict10)\n    dic12 = union(dic11, dict11)\n    dic13 = union(dic12, dict12)\n    dic14 = union(dic13, dict13)\n    dic15 = union(dic14, dict14)"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #declaring and initializing variables\n    counter = dict()\n    for sublist in list1:\n        for element in sublist:\n            if element in counter:\n                counter[element] += 1\n            else:\n                counter[element] = 1\n    return counter\n    "
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list=dict()\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if j in freq_list:\n                freq_list[j]+=1\n            else:\n                freq_list[j]=1\n    return freq_list\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        if lst[0] not in freq_dict:\n            freq_dict[lst[0]] = 1\n        else:\n            freq_dict[lst[0]] += 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq={}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq:\n                freq[list1[i][j]]+=1\n            else:\n                freq[list1[i][j]]=1\n    return freq\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if numbers == []:\n        return 0\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for num in numbers:\n        result.append(num*num)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for i in numbers:\n        num = num*i\n    return num\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply_num(numbers) -> [1,2,3,4,5] -> [1,4,9,16,25]\n    # The default value of numbers should be [1,2,3,4,5]\n    # The default value of numbers should be 6\n    # Output: [1,2,6,16,25]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [number*len(numbers) for number in numbers]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [num*n for n,num in enumerate(numbers)]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply(a, b):\n        return a * b\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    for i in range(0, length):\n        numbers[i] = numbers[i] * (length)\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for x in range(len(numbers)):\n        multiply *= numbers[x]\n    return multiply\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n))[2:].rjust(8, \"0\")\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Code here\n    bits = bin(n)[2:]\n    \n    return bits\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return '0' * (n - 1) + str(bin(n)[2:]) \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n)[2:])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Base Case\n    if n == 0: \n        return ''\n    # Compute the binary representation \n    # as a string of digits separated by zeros\n    binary_rep = str(bin(n)[2:]).zfill(n) \n    return binary_rep \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # convert into list\n    ans = []\n    # add zeros\n    n = n // 2\n    while n > 0:\n        # append a 0 if the number is less than 10\n        if n >= 10:\n            ans.append(0)\n            n -= 10\n        else:\n            ans.append(n % 2)\n            n = n // 2\n    # return the string\n    return \"\".join(ans)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_str = \"\"\n    while n:\n        bin_str += str(n % 2)\n        n = n // 2\n    return bin_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, 'b').zfill(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Take the input as a string, remove leading zeros\n    s = str(n)\n    l = s.strip()\n    # Remove leading zeros\n    if l[0] == \"0\":\n        l = l[1:]\n    # Create the binary string and return it\n    return bin(int(l))[2:]\n    \ndef binary_to_decimal(b):\n    '''\n    Write a function to convert a binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    # Create the binary string and return it\n    return int(b,2)\n    "
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    b = bin(n)\n    if len(b) < 2:\n        return str(b)\n    else:\n        return '0b' + b[2:]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # 1: make a while loop with a for loop that goes through the number and if it is the only prime number, return the number\n    # 2: make a while loop that goes through all of the numbers and if it's a palindrome, return the number\n    # 3: return the first non-prime number\n    #\n    # EXAMPLE:\n    # num = 11224\n    # output = 11224\n    #\n    # num = 4444\n    # output = 4444\n    #\n    # num = 1111\n    # output = 1111\n    #\n    # num = 1\n    # output = 1\n    #\n    # num = 0\n    # output = 0\n    #\n    # num = -1\n    # output = -1\n    #\n    # num = -100\n    # output = -100\n    #\n    # num = -10000\n    # output = -10000\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    for i in range(2, (num//2)+1):\n        if num % i == 0:\n            return i\n    return (num//2)+1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 0\n    if num == 2:\n        return 1\n    while (num % 2)!= 0:\n        num = num // 2\n    while num % 3!= 0:\n        num = num // 3\n    while num % 5!= 0:\n        num = num // 5\n    return (num + 1)\ndef sum_palindromes(num):\n    '''\n    Write a function that computes the sum of the palindromes in a number.\n    '''\n    sum = 0\n    while (num > 0):\n        sum += (num % 10)\n        num = num // 10\n    return sum\ndef palindrome_test(num):\n    '''\n    Test case to check if a number is a palindrome.\n    '''\n    test = num\n    # test = next_smallest_palindrome(test)\n    print(test)\n    print(palindrome_test(test))\ndef recur_palindromes(num):\n    '''\n    Return the sum of the palindromes in a number recursively.\n    '''\n    # if num == 1:\n    #     return 0\n    # if num == 2:\n    #     return 1\n    # return num\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num % 10 == 0:\n        return (num + 1)\n    return recur_palindromes(num // 10) + recur_palindromes(num % 10)\ndef solve(n):\n    '''\n    Return the sum of the palindromes in a number recursively.\n    '''\n    test = n\n    return recur_palindromes(test)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 0\n    start = 0\n    end = (num // 2) - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    if num == 1:\n        return 2\n    # check for perfect palindrome\n    num_even = num // 2\n    if (num_even * 2) % 2 == 0:\n        return num_even\n    elif num_even == 1:\n        return 2\n    # check for correct palindrome\n    if num_even == num // 2:\n        if num % 2 == 1:\n            return next_smallest_palindrome(num - 1)\n        else:\n            return 2\n    if num_even == num // 2 - 1:\n        if num % 2 == 1:\n            return next_smallest_palindrome(num - 1)\n        else:\n            return 2\n    else:\n        return num_even\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if (num > 2):\n        num_palindromes = num // 2\n        num_palindromes_2 = (num_palindromes + 1) // 2\n        num_palindromes_3 = (num_palindromes + 3) // 2\n        if (num_palindromes_2 >= 2):\n            num_palindromes = num_palindromes_2\n            num_palindromes_2 = (num_palindromes + 1) // 2\n            num_palindromes_3 = (num_palindromes + 3) // 2\n            if (num_palindromes_2 >= 2):\n                num_palindromes = num_palindromes_2\n                num_palindromes_2 = (num_palindromes + 1) // 2\n                num_palindromes_3 = (num_palindromes + 3) // 2\n                if (num_palindromes_2 >= 2):\n                    num_palindromes = num_palindromes_2\n                    num_palindromes_2 = (num_palindromes + 1) // 2\n                    num_palindromes_3 = (num_palindromes + 3) // 2\n                    if (num_palindromes_2 >= 2):\n                        num_palindromes = num_palindromes_2\n                        num_palindromes_2 = (num_palindromes + 1) // 2\n                        num_palindromes_3 = (num_palindromes + 3) // 2\n                        if (num_palindromes_2 >= 2):\n                            num_palindromes = num_palindromes_2\n                            num_palindromes_2 = (num_palindromes + 1) // 2\n                            num_palindromes_3 = (num_palindromes + 3) // 2\n                            if (num_palindromes_2 >= 2):\n                                num_palindromes = num_palindromes_2\n                                num_palindromes_2 = (num_palindromes + 1) // 2\n                                num_palindromes_3 = (num_palindromes + 3) // 2\n                                if (num_palindromes_2 >= 2):\n                                    num_palindromes = num_palindromes_2\n                                    num_palindromes_2 = (num_palindromes + 1) // 2\n                                    num_palindromes_3 = (num_palindromes + 3) // 2\n                                    if (num_palindromes_2 >= 2):\n                                        num_palindromes = num_palindromes_2\n                                        num_palindromes_2 = (num_palindromes + 1) // 2\n                                        num_palindromes_3 = (num_palindromes + 3) // 2\n                                        if (num_palindromes_2 >= 2):\n                                            num_palindromes = num_palindromes_2\n                                            num_palindromes_2 = (num_palindromes + 1) // 2\n                                            num_palindromes_3 = (num_palindromes + 3) // 2\n                                            if (num_palindromes_2 >= 2):\n                                                num_palindromes = num_palindromes_2\n                                                num_palindromes_2 = (num_palindromes + 1) // 2\n                                                num_palindromes_3 = (num_palindromes + 3) // 2\n                                                if (num_palindromes_2 >= 2):\n                                                    num_palindromes = num_palindromes_2\n                                                    num_palindromes_2 = (num_palindromes + 1) // 2\n                                                    num_palindromes_3 = (num_palindromes + 3) // 2\n                                                    if (num_palindromes_2 >= 2):\n                                                        num_palindromes = num_palindromes_2\n                                                        num_palindromes_2 = (num_palindromes + 1) // 2\n                                                        num_palindromes_3 = (num_palindromes + 3) // 2\n                                                        if (num_palindromes_2 >= 2):\n                                                            num_palindromes = num_palindromes_2\n                                                            num_palindromes_2 = (num_palindromes + 1) // 2\n                                                            num_palindromes_3 = (num_palindromes + 3) // 2\n                                                            if (num_palindromes_2 >= 2):\n                                                                num_palindromes = num_palindromes_2\n                                                                num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                num_palindromes_3 = (num_palindromes + 3) // 2\n                                                                if (num_palindromes_2 >= 2):\n                                                                    num_palindromes = num_palindromes_2\n                                                                    num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                    num_palindromes_3 = (num_palindromes + 3) // 2\n                                                                    if (num_palindromes_2 >= 2):\n                                                                        num_palindromes = num_palindromes_2\n                                                                    num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                    num_palindromes_3 = (num_palindromes + 3) // 2\n                                                                    if (num_palindromes_2 >= 2):\n                                                                        num_palindromes = num_palindromes_2\n                                                                        num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                        num_palindromes_3 = (num_palindromes + 3) // 2\n                                                                        if (num_palindromes_2 >= 2):\n                                                                            num_palindromes = num_palindromes_2\n                                                                            num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                            num_palindromes_3 = (num_palindromes + 3) // 2\n                                                                            if (num_palindromes_2 >= 2):\n                                                                                num_palindromes = num_palindromes_2\n                                                                                num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                                num_palindromes_3 = (num_palindromes + 3) // 2\n                                                                                if (num_palindromes_2 >= 2):\n                                                                                    num_palindromes = num_palindromes_2\n                                                                                    num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                                    num_palindromes_3 = (num_palindromes + 3) // 2\n                                                                                    if (num_palindromes_2 >= 2):\n                                                                                        num_palindromes = num_palindromes_2\n                                                                                        num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                                        num_palindromes_3 = (num_palindromes + 3) // 2\n                                                                                        if (num_palindromes_2 >= 2):\n                                                                                            num_palindromes = num_palindromes_2\n                                                                                            num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                                            num_palindromes_3 = (num_palindromes + 3) // 2\n                                                                                            if (num_palindromes_2 >= 2):\n                                                                                                num_palindromes = num_palindromes_2\n                                                                                            num_palindromes_2 = (num_palindromes + 1) // 2\n                                                                                            num_palindromes_3 "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest = num\n    while (num % 10)!= 0:\n        num = num / 10\n        smallest = smallest * 10 + num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # if given an integer, create a copy of the number in the end\n    num = str(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    while num % 10 == 0:\n        num /= 10\n    if num == 1:\n        return 1\n    \n    mid = int(num / 2)\n    \n    if num == 2 * mid + 1 or num == 2 * mid:\n        return 2 * mid + 1\n    if num == 2 * mid:\n        return 2 * mid\n    \n    if num == 2 * mid + 2:\n        return 2 * mid + 2\n    \n    if num == 2 * mid + 3:\n        return 2 * mid + 3\n    \n    if num == 2 * mid + 4:\n        return 2 * mid + 4\n    \n    return next_smallest_palindrome(2 * mid + 1) + next_smallest_palindrome(2 * mid + 2) + next_smallest_palindrome(2 * mid + 3) + next_smallest_palindrome(2 * mid + 4)\n        \ndef reverse(lst):\n    '''\n    Write a function to return the list in reverse order.\n    '''\n    for i in range(len(lst) - 1, -1, -1):\n        lst[i] = lst[i + 1]\n    lst[i] = 0\n    return lst\n    \ndef remove_duplicates(lst):\n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    lst = []\n    \n    for x in lst:\n        if x not in lst:\n            lst.append(x)\n    return lst\n        \ndef power_digits(num):\n    '''\n    Write a function to return the highest power of the given integer as a string.\n    '''\n    # Convert number into string and add leading zeros\n    str_num = str(num)\n    str_num = str_num.zfill(len(str_num))\n    \n    # Convert string to list\n    lst = list(str_num)\n    \n    # Reverse list\n    lst = reverse(lst)\n    \n    # Find the last element\n    start = 0\n    end = len(lst) - 1\n    \n    while start < end:\n        \n        # If current index is even\n        if lst[start] % 2 == 0:\n            # Update index\n            start += 1\n            end = end - 1\n        else:\n            # Update index\n            start = start + 1\n            end = end - 1\n    \n    # Find the maximum power of the list\n    while start < end:\n        \n        # If the current element is greater than the previous element\n        if lst[start] > lst[end]:\n            # Update index\n            end = end - 1\n        else:\n            # Update index\n            start = start + 1\n            end = end - 1\n    \n    # Return the last element\n    return lst[end]\n        \ndef count_power_digits(num):\n    '''\n    Write a function that returns the number of digits in the given number.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return power_digits(num)\n    \ndef count_of_divisors(num):\n    '''\n    Write a function that returns the number of divisors of a number.\n    '''\n    if num == 0:\n        return 0\n    else:\n        for i in range(1, num + 1):\n            if num % i == 0:\n                return 2 + count_power_digits(num // i)\n        return 2\n    \ndef find_missing_numbers(lst):\n    '''\n    Write a function that returns the number of missing numbers.\n    '''\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return i + 2\n    return len(lst) - 1\n    \ndef remove_numbers(lst, n):\n    '''\n    Write a function that returns a list where every element is removed from the given list.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i - n]\n    return lst\n    \ndef get_nth_digit_of_a_number(num):\n    '''\n    Write a function that returns the nth digit of a number.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 3\n    elif num == 4:\n        return 4\n    elif num == 5:\n        return 5\n    elif num == 6:\n        return 6\n    elif num == 7:\n        return 7\n    elif num == 8:\n        return 8\n    elif num == 9:\n        return 9\n    elif num == 10:\n        return 10\n    elif num == 11:\n        return 11\n    elif num == 12:\n        return 12\n    elif num == 13:\n        return 13\n    elif num == 14:\n        return 14\n    elif num == 15:\n        return 15\n    else:\n        return num - 1\n        \ndef find_all_numbers_in_a_list(lst):\n    '''\n    Write a function that returns a list where every element is a number in the given list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    return lst\n    \ndef is_prime(num):\n    '''\n    Write a function that returns True if num is a prime number, and False otherwise.\n    '''\n    if num == 2:\n        return True\n    elif num == 3:\n        return True\n    elif num == 4:\n        return True\n    elif num == 5:\n        return True\n    elif num == 6:\n        return True\n    elif num == 7:\n        return True\n    elif num == 8:\n        return True\n    elif num == 9:\n        return True\n    elif num == 10:\n        return True\n    elif num == 11:\n        return True\n    elif num == 12:\n        return True\n    elif num == 13:\n        return True\n    elif num == 14:\n        return True\n    elif num == 15:\n        return True\n    else:\n        return False\n    \ndef factorial_series(num):\n    '''\n    Write a function that returns the factorial of a given integer.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    return num * factorial_series(num - 1)\n    \ndef factorial_list(n):\n    '''\n    Write a function that returns a list where every element is the factorial of a given number.\n    '''\n    factorial_list = [1]\n    for i in range(1, n + 1):\n        factorial_list.append(factorial_list[i - 1] * i)\n    return factorial_list\n    \ndef number_with_two_digits(num):\n    '''\n    Write a function that returns the number multiplied by the number\n    in the form of two digits.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    return num * number_with_two_digits(num - 1)\n    \ndef get_nth_digit_of_a_number(num):\n    '''\n    Write a function that returns the nth digit of a number.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 3\n    elif num == 4:\n        return 4\n    elif num == 5:\n        return 5\n    elif num == 6:\n        return 6\n    elif num == 7:\n        return 7\n    elif num == 8:\n        return 8\n    elif num == 9:\n        return 9\n    elif num == 10:\n        return 10\n    elif num == 11:\n        return 11\n    elif num == 12:\n        return 1"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    start = int(num // 2)\n    end = num\n    if num > 9:\n        end = num - 9\n    while end % 2 == 0:\n        end = end // 2\n    while start % 2 == 0:\n        start = start // 2\n    if num % 2 == 0:\n        if start == end:\n            return start\n        else:\n            return start + 1\n    elif num % 2 == 1:\n        if start == end:\n            return start\n        else:\n            return start + 2\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    kth_index = 0\n    for i in range(0, len(arr)):\n        if kth_index == k:\n            return arr[i]\n        kth_index += 1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return\n    if len(arr) < k:\n        return\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if k > n:\n        return None\n    else:\n        return arr[n-1]\n    \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 0 or k > n:\n        return -1\n    if k == 0:\n        return arr[0]\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    size = len(arr)\n    if k > size:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    index = k-1\n    if (len(arr) == 0):\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    mapping = {\n        \"cap-first\": \"Cap-First\",\n        \"cap-last\": \"Cap-Last\",\n        \"cap-middle\": \"Cap-Middle\",\n        \"cap-qtr\": \"Cap-Quarter\",\n        \"cap-sex\": \"Cap-Suffix\",\n        \"cap-sxl\": \"Cap-Suffix-Sxl\",\n        \"cap-sxl-tr\": \"Cap-Suffix-Sxl-Tr\",\n        \"cap-sxl-xl\": \"Cap-Suffix-Sxl-XL\",\n        \"cap-sxl-xl-tr\": \"Cap-Suffix-Sxl-XL-Tr\",\n        \"cap-qtr-tr\": \"Cap-Quarter-Tr\",\n        \"cap-qtr-ltr\": \"Cap-Quarter-Ltr\",\n        \"cap-qtr-tr-ltr\": \"Cap-Quarter-Tr-Ltr\",\n        \"cap-qtr-ltr-tr\": \"Cap-Quarter-Ltr-Tr\",\n        \"cap-qtr-ltr-xl\": \"Cap-Quarter-Ltr-XL\",\n        \"cap-qtr-ltr-xl-tr\": \"Cap-Quarter-Ltr-XL-Tr\",\n        \"cap-qtr-ltr-xl-tr-ltr\": \"Cap-Quarter-Ltr-XL-Tr-Ltr\",\n        \"cap-qtr-ltr-xl-tr-ltr-tr\": \"Cap-Quarter-Ltr-XL-Tr-Ltr-Tr\",\n        \"cap-sxl-tr-ltr\": \"Cap-Sxl-Tr-Ltr\",\n        \"cap-sxl-tr-ltr-ltr\": \"Cap-Sxl-Tr-Ltr-Ltr\",\n        \"cap-sxl-tr-ltr-xl\": \"Cap-Sxl-Tr-Ltr-XL\",\n        \"cap-sxl-tr-ltr-xl-tr\": \"Cap-Sxl-Tr-Ltr-XL-Tr\",\n        \"cap-sxl-tr-ltr-xl-tr-tr\": \"Cap-Sxl-Tr-Ltr-XL-Tr-Tr\",\n        \"cap-sxl-tr-ltr-xl-tr-ltr-tr\": \"Cap-Sxl-Tr-Ltr-XL-Tr-Ltr-Tr\",\n        \"cap-sxl-tr-ltr-xl-tr-ltr-xl-tr\": \"Cap-Sxl-Tr-Ltr-XL-Tr-Ltr-XL\",\n        \"cap-sxl-tr-ltr-xl-tr-xl-tr-tr\": \"Cap-Sxl-Tr-Ltr-XL-Tr-Ltr-XL\",\n        \"cap-sxl-tr-ltr-xl-tr-ltr-xl-tr-tr\": \"Cap-Sxl-Tr-Ltr-XL-Tr-Ltr-XL\",\n        \"cap-sxl-tr-ltr-xl-tr-ltr-xl-tr-tr-ltr\": \"Cap-Sxl-Tr-Ltr-XL-Tr-Ltr-XL\",\n        \"cap-sxl-tr-ltr-xl-tr-ltr-xl-tr-tr-ltr-tr\": \"Cap-Sxl-Tr-Ltr-XL-Tr-Ltr-XL-Tr\",\n        \"cap-qtr-tr-ltr-ltr-tr-tr\": \"Cap-Quarter-Tr-Ltr-Tr-Ltr-Tr\",\n        \"cap-qtr-tr-ltr-ltr-tr-ltr-tr\": \"Cap-Quarter-Tr-Ltr-Tr-Ltr-Tr\",\n        \"cap-qtr-tr-ltr-ltr-tr-ltr-tr-tr\": \"Cap-Quarter-Tr-Ltr-Tr-Ltr-Tr-Tr\",\n        \"cap-qtr-tr-ltr-ltr-tr-ltr-tr-tr-tr\": \"Cap-Quarter-Tr-Ltr-Tr-Ltr-Tr-Tr-Tr\",\n        \"cap-qtr-tr-ltr-ltr-tr-ltr-tr-ltr-tr-ltr\": \"Cap-Quarter-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr\",\n        \"cap-qtr-tr-ltr-ltr-tr-ltr-tr-ltr-tr-tr-ltr-tr\": \"Cap-Quarter-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Tr\",\n        \"cap-sxl-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr\": \"Cap-Sxl-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Ltr\",\n        \"cap-sxl-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr\": \"Cap-Sxl-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Ltr\",\n        \"cap-sxl-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr\": \"Cap-Sxl-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr\",\n        \"cap-sxl-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-tr\": \"Cap-Sxl-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Tr\",\n        \"cap-qtr-qtr-ltr-tr-ltr-ltr-tr-tr\": \"Cap-Quarter-Qtr-Tr-Ltr-Tr-Ltr-Tr\",\n        \"cap-qtr-qtr-ltr-ltr-tr-ltr-tr-ltr\": \"Cap-Quarter-Qtr-Tr-Ltr-Tr-Ltr-Tr\",\n        \"cap-qtr-qtr-ltr-ltr-ltr-ltr-ltr-tr\": \"Cap-Quarter-Qtr-Tr-Ltr-Tr-Ltr-Tr\",\n        \"cap-qtr-qtr-ltr-ltr-ltr-ltr-ltr-ltr-tr-tr\": \"Cap-Quarter-Qtr-Tr-Ltr-Tr-Ltr-Tr-Tr\",\n        \"cap-sxl-tr-ltr-tr-ltr-ltr-tr-ltr-tr-ltr-tr-ltr-tr\": \"Cap-Sxl-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Tr\",\n        \"cap-sxl-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr\": \"Cap-Sxl-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr\",\n        \"cap-qtr-qtr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-tr-ltr-tr-ltr-tr-ltr-tr-ltr\": \"Cap-Quarter-Qtr-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Tr\",\n        \"cap-sxl-tr-ltr-ltr-ltr-tr-ltr-ltr-ltr-ltr-ltr-ltr-tr-ltr-tr-ltr-ltr-ltr-ltr\": \"Cap-Sxl-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Ltr-Tr-Ltr\",\n        \"cap-qtr-qtr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr-ltr\": \"Cap-Quarter-Qtr-Tr-Ltr-Tr-Ltr-T"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    dic = {'S': 'Snake', 'C': 'Camel', 'P': 'Pascal', 'F': 'Finnish', 'M': 'Mason',\n        'B': 'Bengali', 'T': 'Thai', 'O': 'Oman', 'R': 'Romanian', 'G': 'Gaelic',\n        'D': 'Danish', 'W': 'Welsh', 'X': 'Xhosa', 'Y': 'Yoruba'}\n    return ''.join(dic.get(c,c) for c in word.title())\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    l = []\n    for i in range(len(word)):\n        if i!= 0:\n            if word[i-1]!= word[i] and word[i]!= '_':\n                l.append(word[i].upper())\n            else:\n                l.append(word[i].lower())\n    camel_word = \"\".join(l)\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.upper() == 'PROD':\n        word = 'Production'\n    elif word.upper() == 'MAD':\n        word = 'Mad'\n    elif word.upper() == 'LAB':\n        word = 'Lab'\n    elif word.upper() == 'FOR':\n        word = 'For'\n    elif word.upper() == 'IN':\n        word = 'In'\n    elif word.upper() == 'EST':\n        word = 'Est'\n    elif word.upper() == 'AND':\n        word = 'And'\n    elif word.upper() == 'AD':\n        word = 'Ad'\n    elif word.upper() == 'EX':\n        word = 'Ex'\n    elif word.upper() == 'MIL':\n        word = 'MIL'\n    elif word.upper() == 'GP':\n        word = 'GP'\n    elif word.upper() == 'LB':\n        word = 'LB'\n    elif word.upper() == 'RB':\n        word = 'RB'\n    elif word.upper() == 'RGT':\n        word = 'RGT'\n    elif word.upper() == 'SGT':\n        word = 'SGT'\n    elif word.upper() == 'TGT':\n        word = 'TGT'\n    elif word.upper() == 'GT':\n        word = 'GT'\n    elif word.upper() == 'DGT':\n        word = 'DGT'\n    elif word.upper() == 'MGT':\n        word = 'MGT'\n    elif word.upper() == 'DT':\n        word = 'DT'\n    elif word.upper() == 'DTG':\n        word = 'DTG'\n    elif word.upper() == 'GA':\n        word = 'GA'\n    elif word.upper() == 'JGT':\n        word = 'JGT'\n    elif word.upper() == 'JGTG':\n        word = 'JGTG'\n    elif word.upper() == 'JGTGG':\n        word = 'JGTGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGGG':\n        word = 'JGTGGG'\n    elif word.upper() == 'JGTGG"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0].lower() not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_':\n        word = word.lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    splited_word = word.split('_')\n    if len(splited_word) == 1:\n        return word\n    else:\n        return splited_word[0] + \"\".join(x.title() for x in splited_word[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(camel(x) for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    switcher={\n    'ONE':'One',\n    'TWO':'Two',\n    'THREE':'Three',\n    'FOUR':'Four',\n    'FIVE':'Five',\n    'SIX':'Six',\n    'SEVEN':'Seven',\n    'EIGHT':'Eight',\n    'NINE':'Nine',\n    'ZERO':'Zero',\n    'ONEZERO':'OneZero'\n    }\n    return switcher.get(word.lower(), word)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # declare a list of all possible eulers \n    all_eulers = []\n    \n    # cycle through all the possibilities \n    for i in range(n + 1):\n        for j in range(i + 1):\n            for k in range(j + 1):\n                if i + j + k == m:\n                    all_eulers.append([i, j, k])\n    \n    # check if all the possibilities are \n    # eulers \n    if len(all_eulers) == 0:\n        return None\n    \n    # return the smallest eulers \n    return min(all_eulers)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    lista = []\n    for i in range(1, m):\n        for j in range(i+1, m+1):\n            x = n\n            x = x**2\n            y = i\n            y = y**2\n            x = x * y\n            lista.append(x)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # euler_num(4,3) --> 12\n    # euler_num(6,7) --> 12\n    # euler_num(8,9) --> 9\n    # euler_num(6,5) --> 12\n    \n    count = 0\n    dp = [0] * (n + 1)\n    \n    for i in range(m,n+1):\n        if (i % 2 == 0):\n            dp[i] = dp[i//2] + 1\n        else:\n            dp[i] = dp[i//2] - 1\n            \n        if dp[i] > n:\n            count += 1\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    from math import pi\n    from collections import defaultdict\n    \n    if n < 2:\n        return 0\n        \n    if n == 2:\n        return 1\n        \n    if m == 0:\n        return 1\n        \n    if n % 2 == 0:\n        return 0\n        \n    if n == 2:\n        return 0\n        \n    if n % 2 == 1:\n        return 1\n        \n    c = (n-1)/2\n    \n    # if the number of c is odd, c is not an Eulerian number\n    if c % 2 == 0:\n        return 0\n    \n    # if the number of c is even, c is an Eulerian number\n    if c % 2 == 1:\n        return 1\n        \n    # if the number of c is even, we want to make sure we know that n is a\n    # valid Eulerian number\n    n_even = n - (2 * c)\n    \n    # if the number of c is even, we want to make sure n is a valid Eulerian\n    # number\n    if n_even % 2 == 0:\n        return 0\n        \n    # if the number of c is odd, we want to make sure n is a valid Eulerian\n    # number\n    else:\n        return 1\n        \n    def generate_even_counts(n, m):\n        '''\n        Write a function that generates a dictionary that contains the\n        counts of even integers from 1 to n.\n        '''\n        \n        even_counts = {i: 0 for i in range(1, n+1)}\n        \n        for i in range(1, n+1):\n            if i % 2 == 0:\n                even_counts[i] = even_counts[i//2] + 1\n        \n        return even_counts\n    \n    def eulerian_num_dictionary(n, m):\n        '''\n        Write a function that generates a dictionary that contains the\n        Eulerian number a(n, m).\n        '''\n        \n        if n < 2:\n            return 0\n        \n        if n == 2:\n            return 1\n        \n        if m == 0:\n            return 1\n        \n        if n == 2:\n            return 0\n        \n        if n % 2 == 0:\n            return 0\n        \n        if n == 2:\n            return 1\n        \n        if n % 2 == 1:\n            return 1\n            \n        c = (n-1)/2\n        \n        if c % 2 == 0:\n            return 0\n        \n        if c % 2 == 1:\n            return 1\n        \n        # if the number of c is even, we want to make sure we know that n is a\n        # valid Eulerian number\n        n_even = n - (2 * c)\n        \n        # if the number of c is even, we want to make sure n is a valid Eulerian\n        # number\n        if n_even % 2 == 0:\n            return 0\n        \n        # if the number of c is odd, we want to make sure n is a valid Eulerian\n        # number\n        else:\n            return 1\n        \n        def generate_even_counts(n, m):\n            '''\n            Write a function that generates a dictionary that contains the\n            counts of even integers from 1 to n.\n            '''\n            \n            even_counts = {i: 0 for i in range(1, n+1)}\n            \n            for i in range(1, n+1):\n                if i % 2 == 0:\n                    even_counts[i] = even_counts[i//2] + 1\n                    \n            return even_counts\n            \n        def eulerian_num_dictionary(n, m):\n            '''\n            Write a function that generates a dictionary that contains the\n            Eulerian number a(n, m).\n            '''\n            \n            if n < 2:\n                return 0\n            \n            if n == 2:\n                return 1\n            \n            if n == 2:\n                return 0\n            \n            if n % 2 == 0:\n                return 0\n            \n            if n == 2:\n                return 1\n            \n            if n % 2 == 1:\n                return 1\n            \n            c = (n-1)/2\n            \n            if c % 2 == 0:\n                return 0\n            \n            if c % 2 == 1:\n                return 1\n            \n            # if the number of c is even, we want to make sure we know that n is a\n            # valid Eulerian number\n            n_even = n - (2 * c)\n            \n            # if the number of c is even, we want to make sure n is a valid Eulerian\n            # number\n            if n_even % 2 == 0:\n                return 0\n            \n            # if the number of c is odd, we want to make sure n is a valid Eulerian\n            # number\n            else:\n                return 1\n                \n        return generate_even_counts(n, m)\n    \n    def print_eulerian_num(n, m):\n        '''\n        print_eulerian_num(n, m)\n        Prints the Eulerian number a(n, m)\n        '''\n        \n        print(\"Eulerian number\")\n        \n        if n < 2:\n            print(\"0\")\n            \n        if n == 2:\n            print(\"1\")\n        \n        if n == 2:\n            print(\"0\")\n            \n        if n % 2 == 0:\n            print(\"0\")\n            \n        if n % 2 == 1:\n            print(\"1\")\n            \n        c = (n-1)/2\n        \n        if c % 2 == 0:\n            print(\"1\")\n            \n        if c % 2 == 1:\n            print(\"0\")\n        \n        if c!= 0:\n            print(\"1\")\n            \n        if c == 0:\n            print(\"0\")\n        \n        if c!= 1:\n            print(\"0\")\n            \n        if c == 2:\n            print(\"1\")\n        \n        if c == 2:\n            print(\"0\")\n            \n        if c > 2:\n            print(\"0\")\n            \n        if c < 0:\n            print(\"0\")\n            \n        print()\n        \n        if n < 2:\n            return 0\n        \n        if n == 2:\n            return 1\n        \n        if n == 2:\n            return 0\n        \n        if n % 2 == 0:\n            return 0\n        \n        if n % 2 == 1:\n            return 1\n            \n        c = (n-1)/2\n        \n        if c % 2 == 0:\n            return 0\n        \n        if c % 2 == 1:\n            return 1\n            \n        # if the number of c is even, we want to make sure we know that n is a valid Eulerian number\n        n_even = n - (2 * c)\n        \n        # if the number of c is even, we want to make sure n is a valid Eulerian number\n        if n_even % 2 == 0:\n            return 0\n        \n        # if the number of c is odd, we want to make sure n is a valid Eulerian number\n        else:\n            return 1\n        \n        def generate_even_counts(n, m):\n            '''\n            Write a function that generates a dictionary that contains the\n            counts of even integers from 1 to n.\n            '''\n            \n            even_counts = {i: 0 for i in range(1, n+1)}\n            \n            for i in range(1, n+1):\n                if i % 2 == 0:\n                    even_counts[i] = even_counts[i//2] + 1\n            \n            return even_counts\n            \n        def eulerian_num_dictionary(n, m):\n            '''\n            Write a function that generates a dictionary that contains the\n            Eulerian number a(n, m).\n            '''\n            \n            if n < 2:\n                return 0\n            \n            if n == 2:\n                return 1\n            \n            if n == 2:\n                return 0\n            \n            if n % 2 == 0:\n                return 0\n            \n            if n % 2 == 1:\n                return 1\n            \n            c = (n-1)/2\n            \n            if c % 2 == 0:\n                return 0\n            \n            if c % 2 == 1:\n                return 1\n            \n            # if the number of c i"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    #Eulerian numbers are generated by multiplying m-th number of Fibonacci numbers\n    #with the Fibonacci numbers of 1, 2, 3, and 5, modulo m.\n    #There is no sign of Eulerian number.\n    #Here the idea is to take an arbitrary integer as a base of the solution.\n    #In order to get the solution, we must find the number of Fibonacci numbers\n    #that satisfy the constraints of Eulerian number, e.g., \n    #1, 3, 6, 10, 12, 15,..., m.\n    #For example, for base 10, if m is 1, then we have 6, and 2, so we can\n    #get a 6, and 2, so we can get a 2.\n    #If there is a solution, we can return the base of the solution, e.g., \n    #base 10, eulerian number is 100.\n    \n    if m == 1:\n        return n\n    \n    if n == m:\n        return n\n    \n    if n % 2 == 0:\n        base = n // 2\n        return eulerian_num(base, m - 1) + eulerian_num(base + 1, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def rot(n, m):\n        if n == m:\n            return m\n        elif n == 0:\n            return rot(n, m - 1)\n        else:\n            return rot(n - 1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # eulerian_numbers = []\n    # for i in range(1, m+1):\n    #     eulerian_numbers.append(i)\n    #     if i == m:\n    #         break\n    #     for j in range(1, n+1):\n    #         if (i+j) % 2 == 1:\n    #             eulerian_numbers.append(i+j)\n    # return eulerian_numbers\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Compute the largest even index (Eulerian number is the index of the largest even element in the list)\n    largest_even_index = (n % 2) + (m % 2)\n    # This next line should work if n is an even number\n    # if m is odd number\n    if largest_even_index % 2 == 0:\n        # If m is even, we will only need to compute the index of the odd elements of the list\n        if m % 2 == 0:\n            return largest_even_index + 1\n        else:\n            return largest_even_index\n    # If m is odd, we will only need to compute the index of the even elements of the list\n    else:\n        # If m is even, we will only need to compute the index of the even elements of the list\n        if m % 2 == 1:\n            return largest_even_index\n        # Else, we will need to compute the index of the odd elements of the list\n        else:\n            return largest_even_index + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Declare an array of the nodes in the graph.\n    arr = []\n    # Declare an array of the visited nodes.\n    visited = []\n    \n    # Declare the total number of nodes.\n    totalNodes = n\n    \n    # Declare a count of nodes.\n    count = 0\n    \n    # Declare a list of unique nodes.\n    unique = []\n    \n    # Declare a list of the nodes.\n    nodeList = []\n    \n    # Declare a dictionary of the node pairs.\n    nodePairDict = {}\n    \n    # Declare a dictionary of the node pairs.\n    nodePairDict2 = {}\n    \n    # Declare a list to store the visited node.\n    visitedNodes = []\n    \n    # Declare a count of the visited nodes.\n    countNodesVisited = 0\n    \n    # Declare a function to find the Eulerian number.\n    def eulerian(n, m):\n        \n        # Declare a dict of all the nodes in the graph.\n        arr = {}\n        for i in range(1, n+1):\n            arr[i] = []\n        \n        # Declare a dict of all the nodes.\n        node = {}\n        for i in range(1, n+1):\n            node[i] = []\n        \n        # Declare a list to store the nodes.\n        nodes = []\n        \n        # Declare a dict of all the nodes.\n        nodePairDict = {}\n        \n        # Declare a dict of all the nodes.\n        nodePairDict2 = {}\n        \n        # Declare a list to store the visited nodes.\n        visitedNodes = []\n        \n        # Declare a count of the visited nodes.\n        countNodesVisited = 0\n        \n        # Declare a function to find the Eulerian number.\n        def eulerian(n, m):\n            \n            # Declare a dict of all the nodes in the graph.\n            arr = {}\n            for i in range(1, n+1):\n                arr[i] = []\n            \n            # Declare a dict of all the nodes.\n            node = {}\n            for i in range(1, n+1):\n                node[i] = []\n            \n            # Declare a list to store the nodes.\n            nodes = []\n            \n            # Declare a dict of all the nodes.\n            nodePairDict = {}\n            \n            # Declare a dict of all the nodes.\n            nodePairDict2 = {}\n            \n            # Declare a list to store the visited nodes.\n            visitedNodes = []\n            \n            # Declare a count of the visited nodes.\n            countNodesVisited = 0\n            \n            # Declare a function to find the Eulerian number.\n            def eulerian(n, m):\n                \n                # Declare a dict of all the nodes in the graph.\n                arr = {}\n                for i in range(1, n+1):\n                    arr[i] = []\n                \n                # Declare a dict of all the nodes.\n                node = {}\n                for i in range(1, n+1):\n                    node[i] = []\n                \n                # Declare a list to store the nodes.\n                nodes = []\n                \n                # Declare a dict of all the nodes.\n                nodePairDict = {}\n                \n                # Declare a dict of all the nodes.\n                nodePairDict2 = {}\n                \n                # Declare a list to store the visited nodes.\n                visitedNodes = []\n                \n                # Declare a count of the visited nodes.\n                countNodesVisited = 0\n                \n                # Declare a function to find the Eulerian number.\n                def eulerian(n, m):\n                    \n                    # Declare a dict of all the nodes in the graph.\n                    arr = {}\n                    for i in range(1, n+1):\n                        arr[i] = []\n                    \n                    # Declare a dict of all the nodes.\n                    node = {}\n                    for i in range(1, n+1):\n                        node[i] = []\n                    \n                    # Declare a list to store the nodes.\n                    nodes = []\n                    \n                    # Declare a dict of all the nodes.\n                    nodePairDict = {}\n                    \n                    # Declare a dict of all the nodes.\n                    nodePairDict2 = {}\n                    \n                    # Declare a list to store the visited nodes.\n                    visitedNodes = []\n                    \n                    # Declare a count of the visited nodes.\n                    countNodesVisited = 0\n                    \n                    # Declare a function to find the Eulerian number.\n                    def eulerian(n, m):\n                        \n                        # Declare a dict of all the nodes in the graph.\n                        arr = {}\n                        for i in range(1, n+1):\n                            arr[i] = []\n                        \n                        # Declare a dict of all the nodes.\n                        node = {}\n                        for i in range(1, n+1):\n                            node[i] = []\n                        \n                        # Declare a list to store the nodes.\n                        nodes = []\n                        \n                        # Declare a dict of all the nodes.\n                        nodePairDict = {}\n                        \n                        # Declare a dict of all the nodes.\n                        nodePairDict2 = {}\n                        \n                        # Declare a list to store the visited nodes.\n                        visitedNodes = []\n                        \n                        # Declare a count of the visited nodes.\n                        countNodesVisited = 0\n                        \n                        # Declare a function to find the Eulerian number.\n                        def eulerian(n, m):\n                            \n                            # Declare a dict of all the nodes in the graph.\n                            arr = {}\n                            for i in range(1, n+1):\n                                arr[i] = []\n                            \n                            # Declare a dict of all the nodes.\n                            node = {}\n                            for i in range(1, n+1):\n                                node[i] = []\n                            \n                            # Declare a list to store the nodes.\n                            nodes = []\n                            \n                            # Declare a dict of all the nodes.\n                            nodePairDict = {}\n                            \n                            # Declare a dict of all the nodes.\n                            nodePairDict2 = {}\n                            \n                            # Declare a list to store the visited nodes.\n                            visitedNodes = []\n                            \n                            # Declare a count of the visited nodes.\n                            countNodesVisited = 0\n                            \n                            # Declare a function to find the Eulerian number.\n                            def eulerian(n, m):\n                                \n                                # Declare a dict of all the nodes in the graph.\n                                arr = {}\n                                for i in range(1, n+1):\n                                    arr[i] = []\n                                \n                                # Declare a dict of all the nodes.\n                                node = {}\n                                for i in range(1, n+1):\n                                    node[i] = []\n                                \n                                # Declare a list to store the nodes.\n                                nodes = []\n                                \n                                # Declare a dict of all the nodes.\n                                nodePairDict = {}\n                                \n                                # Declare a dict of all the nodes.\n                                nodePairDict2 = {}\n                                \n                                # Declare a list to store the visited nodes.\n                                visitedNodes = []\n                                \n                                # Declare a count of the visited nodes.\n                                countNodesVisited = 0\n                                \n                                # Declare a function to find the Eulerian number.\n                                def eulerian(n, m):\n                                    \n                                    # Declare a dict of all the nodes in the graph.\n                                    arr = {}\n                                    for i in range(1, n+1):\n                                        arr[i] = []\n                                    \n                                    # Declare a dict of all the nodes.\n                                    node = {}\n                                    for i in range(1, n+1):\n                                        node[i] = []\n                                    \n                                    # Declare a list to store the nodes.\n                                    nodes = []\n                                    \n                                    # Declare a dict of all the nodes.\n                                    nodePairDict = {}\n                                    \n                                    # Declare a dict of all the nodes.\n                                    nodePairDict2 = {}\n                                    \n                                    # Declare a list to store the visited nodes.\n                                    visitedNodes = []\n                                    \n                                    # Declare a count of the visited nodes.\n                                    countNodesVisited = 0\n                                    \n                                    # Declare a function t"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: return n\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda sub_list: sub_list[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        for items in sublist:\n            sorted_list.append(items)\n    return sorted_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in input_list:\n        for j in i:\n            output_list.append(j)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # import pprint\n    # pprint.pprint(input_list)\n    new_list = []\n    for item in input_list:\n        new_list.append(item)\n    # pprint.pprint(new_list)\n    new_list.sort()\n    # pprint.pprint(new_list)\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list,key=lambda a:a[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index in range(len(input_list)):\n        for sublist in input_list[index]:\n            if len(sublist) > 0:\n                sublist.sort()\n                input_list[index] = sublist\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Creating a new list of a length of the list of sublists and setting the first element to the value of the length of the list.\n    new_list = []\n    i = 0\n    while i < len(input_list):\n        new_list.append(input_list[i])\n        i += 1\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_list(input_list, key):\n        for sublist in input_list:\n            if len(sublist) == 0:\n                continue\n            else:\n                sorted_sublist = sorted(sublist, key=key)\n                sublist.clear()\n                return sorted_sublist\n        return None\n    \n    if len(input_list) > 0:\n        return sort_list(input_list, lambda x: x[0])\n    else:\n        return []\n    \n    # Write a function to return a list sorted in place by the elements of a sublist.\n    \ndef recursive_sort(input_list):\n    '''\n    Write a function that takes a list of lists and returns a sorted version of it.\n    '''\n    if len(input_list) == 0:\n        return None\n    \n    def sort_list(input_list, key):\n        if len(input_list) == 1:\n            return input_list\n        \n        head = input_list[0]\n        right = input_list[1:]\n        \n        left = sort_list(right, key)\n        \n        if key(head) < key(left[0]):\n            return left\n        \n        return sort_list(right, key)\n    \n    if len(input_list) > 1:\n        return sort_list(input_list, lambda x: x[0])\n    else:\n        return sort_list(input_list, lambda x: x)\n    \n    # Write a function to return a list sorted in place by the elements of a sublist.\n    \ndef merge_sort(input_list):\n    '''\n    Write a function that takes a list of lists and returns a sorted version of it.\n    '''\n    if len(input_list) == 0:\n        return None\n    \n    def sort_list(input_list, key):\n        if len(input_list) == 1:\n            return input_list\n        \n        middle = int(len(input_list) / 2)\n        left = sort_list(input_list[:middle], key)\n        right = sort_list(input_list[middle:], key)\n        \n        return merge(left, right)\n    \n    def merge(left, right):\n        result = []\n        left_index = 0\n        right_index = 0\n        \n        while left_index < len(left) and right_index < len(right):\n            if key(left[left_index]) < key(right[right_index]):\n                result.append(left[left_index])\n                left_index += 1\n            else:\n                result.append(right[right_index])\n                right_index += 1\n        \n        while left_index < len(left):\n            result.append(left[left_index])\n            left_index += 1\n        \n        while right_index < len(right):\n            result.append(right[right_index])\n            right_index += 1\n        \n        return result\n    \n    if len(input_list) == 1:\n        return input_list\n    else:\n        return sort_list(input_list, lambda x: x)\n    \n    # Write a function to return a list sorted in place by the elements of a sublist.\n    \ndef linear_search(input_list, target):\n    '''\n    Write a function that takes a list of lists and returns the index of the element in it that is equal to the target.\n    '''\n    if len(input_list) == 0:\n        return -1\n    \n    for index, element in enumerate(input_list):\n        if element == target:\n            return index\n    \n    return -1\n    \ndef binary_search(input_list, target):\n    '''\n    Write a function that takes a list of lists and returns the index of the element in it that is equal to the target.\n    '''\n    if len(input_list) == 0:\n        return -1\n    \n    def binary_search_recursive(input_list, target, start, end):\n        if start > end:\n            return -1\n        \n        middle = (start + end) // 2\n        \n        if target == input_list[middle]:\n            return middle\n        \n        elif target < input_list[middle]:\n            return binary_search_recursive(input_list, target, start, middle - 1)\n        \n        else:\n            return binary_search_recursive(input_list, target, middle + 1, end)\n        \n    return binary_search_recursive(input_list, target, 0, len(input_list) - 1)\n    \n    # Write a function to return a list sorted in place by the elements of a sublist.\n    \ndef merge_sort_recursive(input_list):\n    '''\n    Write a function that takes a list of lists and returns a sorted version of it.\n    '''\n    if len(input_list) == 0:\n        return None\n    \n    if len(input_list) == 1:\n        return input_list\n    \n    def sort_list_recursive(input_list, key):\n        if len(input_list) == 1:\n            return input_list\n        \n        left = sort_list_recursive(input_list[:len(input_list) // 2], key)\n        right = sort_list_recursive(input_list[len(input_list) // 2:], key)\n        \n        return merge(left, right)\n    \n    def merge(left, right):\n        result = []\n        left_index = 0\n        right_index = 0\n        \n        while left_index < len(left) and right_index < len(right):\n            if key(left[left_index]) < key(right[right_index]):\n                result.append(left[left_index])\n                left_index += 1\n            else:\n                result.append(right[right_index])\n                right_index += 1\n        \n        while left_index < len(left):\n            result.append(left[left_index])\n            left_index += 1\n        \n        while right_index < len(right):\n            result.append(right[right_index])\n            right_index += 1\n        \n        return result\n    \n    if len(input_list) == 1:\n        return input_list\n    else:\n        return sort_list_recursive(input_list, lambda x: x)\n    \n    # Write a function to return a list sorted in place by the elements of a sublist.\n    \ndef merge_sort(input_list):\n    '''\n    Write a function that takes a list of lists and returns a sorted version of it.\n    '''\n    if len(input_list) == 0:\n        return None\n    \n    def sort_list(input_list, key):\n        if len(input_list) == 1:\n            return input_list\n        \n        left = sort_list(input_list[:len(input_list) // 2], key)\n        right = sort_list(input_list[len(input_list) // 2:], key)\n        \n        return merge(left, right)\n    \n    if len(input_list) == 1:\n        return input_list\n    else:\n        return sort_list(input_list, lambda x: x)\n    \n    # Write a function to return a list sorted in place by the elements of a sublist.\n    \ndef merge_sort_recursive(input_list):\n    '''\n    Write a function that takes a list of lists and returns a sorted version of it.\n    '''\n    if len(input_list) == 0:\n        return None\n    \n    if len(input_list) == 1:\n        return input_list\n    \n    def sort_list_recursive(input_list, key):\n        if len(input_list) == 1:\n            return input_list\n        \n        left = sort_list_recursive(input_list[:len(input_list) // 2], key)\n        right = sort_list_recursive(input_list[len(input_list) // 2:], key)\n        \n        return merge(left, right)\n    \n    if len(input_list) == 1:\n        return input_list\n    else:\n        return sort_list_recursive(input_list, lambda x: x)\n    \n    # Write a function to return a list sorted in place by the elements of a sublist.\n    \nde"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # TODO: Your code here\n    num_list = [0]*len(lst)\n    for x in lst:\n        if x == 'True':\n            num_list[0] += 1\n        else:\n            num_list[1] += 1\n    return num_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if (i == True):\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c=0\n    for i in lst:\n        if i:\n            c += 1\n    print(c)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n    \n    \n    "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i == 1:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if len(lst)==0:\n        print('There are no elements in the list.')\n        return 0\n    else:\n        print(len(lst))\n        c=0\n        for i in lst:\n            if i==True:\n                c+=1\n        print(c)\n        return c\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    t=0\n    for i in lst:\n        if i==True:\n            t+=1\n    return t\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for element in lst:\n        if element == True:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n    \nlst=[True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True]\nprint(count(lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counts = 0\n    for i in lst:\n        if i == True:\n            counts += 1\n    print(f\"{counts} Boolans in the given list are True.\")\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # YOUR CODE HERE\n    test_list_append(test_list, test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # test_list = ['a', 'b', 'c', 'd']\n    # test_tup = (1,2,3,4)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(' '.join([str(x) for x in test_list]))\n    print(' '.join([str(x) for x in test_tup]))\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO: Append the test tuples to the test list.\n    # HINT: remember to use a tuple as a key to a dictionary\n    \n    test_list.append(tup)\n    return\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in test_list:\n        test_tup.append(x)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append((test_tup[0], test_tup[1]))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list=[]\n    i=0\n    while i< len(num1):\n        merged_list.append(num1[i])\n        i=i+1\n    i=0\n    while i< len(num2):\n        merged_list.append(num2[i])\n        i=i+1\n    i=0\n    while i< len(num3):\n        merged_list.append(num3[i])\n        i=i+1\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return [num1,num2,num3]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    while j<len(num1):\n        if num1[i]<num2[j]:\n            heapq.heappush(num3,num1[i])\n            i=i+1\n        else:\n            heapq.heappush(num3,num2[j])\n            j=j+1\n    while k<len(num3):\n        heapq.heappush(num3,num3[k])\n        k=k+1\n    return num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    while num1 or num2 or num3:\n        if num1 and num2:\n            heapq.heappush(heap,[num1[0]+num2[0]])\n            num1.pop(0)\n            num2.pop(0)\n        elif num1:\n            heapq.heappush(heap,[num1[0]])\n            num1.pop(0)\n        elif num2:\n            heapq.heappush(heap,[num2[0]])\n            num2.pop(0)\n    return heap\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    n=len(num1)+len(num2)+len(num3)\n    def merge(num,k):\n        if k==0:\n            return num\n        if num[0]>num[-1]:\n            return num+[num[0]]\n        return merge(num[1:],k-1)+[num[0]]+num[1:]\n    return merge(merge_sorted_list(num1,num2,num3),n)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    \n    heap = []\n    \n    if len(num1) > len(num2) + len(num3):\n        for i in range(len(num1)):\n            heapq.heappush(heap,num1[i])\n        for i in range(len(num2)):\n            heapq.heappush(heap,num2[i])\n    else:\n        for i in range(len(num2)):\n            heapq.heappush(heap,num2[i])\n        for i in range(len(num1)):\n            heapq.heappush(heap,num3[i])\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None or num2 is None or num3 is None:\n        return None\n    if len(num1)<len(num2):\n        return num1+num2\n    elif len(num1)==len(num2):\n        for i in range(len(num1)):\n            if num2[i] < num1[i]:\n                return num1+num2\n            else:\n                return num1+num2[:i]+num2[i+1:]\n    else:\n        return num1+num2\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #merge two list into one\n    #first iterate over both lists and take the smallest\n    #when a merged element is found\n    #add the number of the smallest element and\n    #the new element into the merged list\n    merged = num1 + num2 + num3\n    merged = sorted(merged)\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create empty lists\n    new_list=[]\n    new_list2=[]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num2[j] < num3[k]:\n            res.append(num1[i])\n            i += 1\n        elif num1[i] > num2[j] and num2[j] > num3[k]:\n            res.append(num2[j])\n            j += 1\n        else:\n            res.append(num3[k])\n            k += 1\n    while i < len(num1):\n        res.append(num1[i])\n        i += 1\n    while j < len(num2):\n        res.append(num2[j])\n        j += 1\n    while k < len(num3):\n        res.append(num3[k])\n        k += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge = []\n    a = heapq.merge(*[num1,num2,num3])\n    for i in range(len(a)):\n        if a[i] not in merge:\n            merge.append(a[i])\n    return merge\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in s:\n        if i == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    from math import ceil\n    if (n==0):\n        return 0\n    if (n==1):\n        return 1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=list(s)\n    for i in range(0,n):\n        for j in range(0,len(s)):\n            if (i%2)==1:\n                s[j]=s[j]^s[len(s)-i-1]\n    return int(''.join(s))\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # define variables\n    a = 0\n    b = 0\n    p = 0\n    \n    # iterate through input string\n    for i in range(len(s)):\n        \n        # if odd, add 1 to a, and decrement p\n        if s[i]%2==1:\n            a+=1\n            p-=1\n        else:\n            b+=1\n    # if we are at 0, add 1 to b, and decrement b\n    if p==0:\n        b+=1\n    return a+b\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    dic= {0:'0',1:'1',2:'2',3:'3',4:'4',5:'5',6:'6',7:'7',8:'8',9:'9'}\n    return dic[s[n]]\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    dic= {0:'0',1:'1',2:'2',3:'3',4:'4',5:'5',6:'6',7:'7',8:'8',9:'9'}\n    return dic[s[n]]\ndef count_zero_and_1(s,n): \n    '''\n    Write a python function to find the number of numbers with 1 in the given binary string.\n    '''\n    dic= {0:'0',1:'1'}\n    return dic[s[n]]\ndef count_zero_and_0(s,n): \n    '''\n    Write a python function to find the number of numbers with 0 in the given binary string.\n    '''\n    dic= {0:'0',1:'1'}\n    return dic[s[n]]\ndef count_one_and_1(s,n): \n    '''\n    Write a python function to find the number of numbers with 1 in the given binary string.\n    '''\n    dic= {1:'1'}\n    return dic[s[n]]\ndef count_one_and_0(s,n): \n    '''\n    Write a python function to find the number of numbers with 0 in the given binary string.\n    '''\n    dic= {0:'0'}\n    return dic[s[n]]\ndef count_all(s,n): \n    '''\n    Write a python function to find the number of numbers in the given binary string.\n    '''\n    dic={}\n    dic['0']=count_zero_and_0(s,n)\n    dic['1']=count_zero_and_1(s,n)\n    dic['2']=count_one_and_1(s,n)\n    dic['3']=count_one_and_0(s,n)\n    dic['4']=count_one_and_0(s,n+1)\n    dic['5']=count_one_and_0(s,n+2)\n    dic['6']=count_one_and_0(s,n+3)\n    dic['7']=count_one_and_0(s,n+4)\n    dic['8']=count_one_and_0(s,n+5)\n    dic['9']=count_one_and_0(s,n+6)\n    return dic[s[n]]\ndef solution(s):\n    return count_all(s,0)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == \"\": \n        return 0\n    elif s[0]!= '0': \n        return odd_Equivalent(s[0],n)\n    \n    ans = 0\n    \n    for i in range(1, len(s)): \n        if i % 2 == 1: \n            ans += 1\n            \n    return ans \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    print(s)\n    total=0\n    for i in range(0,len(s)):\n        for j in range(0,len(s)):\n            if(i+j<len(s)):\n                if(s[i]=='0' and s[j]=='0'):\n                    total+=1\n                    break\n                else:\n                    total+=1\n                    break\n    print(total)\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    print(s)\n    total=0\n    for i in range(0,len(s)):\n        for j in range(0,len(s)):\n            if(i+j<len(s)):\n                if(s[i]=='0' and s[j]=='1'):\n                    total+=1\n                    break\n                else:\n                    total+=1\n                    break\n    print(total)\ndef main():\n    s=\"10\"\n    n=5\n    print(\" Odd or even equivalent is:\",odd_Equivalent(s,n))\n    print(\"Even or even equivalent is:\",even_Equivalent(s,n))\nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    length = len(s)\n    odd = 0\n    for i in range(length//2):\n        if (s[i] == 1):\n            odd += 1\n        else:\n            continue\n    for i in range(length - 1):\n        if (s[i] == 1):\n            odd += 1\n        else:\n            continue\n    return odd\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # use the if else construct to count the odd numbers\n    # if the value of the len of the string is odd, return 1\n    # else return 0\n    if n%2!= 0: \n        return 0 \n    if n > 0:\n        odd = 0\n        while(n>0):\n            n-=1\n            if n%2 == 0:\n                odd += 1\n                return odd\n    return 0 \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    r=1\n    for i in range(0,n): \n        r*=2\n        if (r%2!=0): \n            r=0\n            return s+str(r)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def find_common(lst, key):\n        '''\n        Given a nested list of strings, lst, find all elements of that nested list that\n        have the same value as the given key.\n        '''\n        all = []\n        for i in lst:\n            if i == key:\n                all += i\n        return all\n    return find_common(nestedlist, key)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_list = [item for sublist in nestedlist for item in sublist]\n    return list_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    common = []\n    i = 0\n    while i < len(nestedlist):\n        if nestedlist[i] in nestedlist[i+1:]:\n            common.append(nestedlist[i])\n        i+=1\n    return common\n    \ndef one_element_in_list(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    common = []\n    i = 0\n    while i < len(nestedlist):\n        if nestedlist[i] in nestedlist[i+1:]:\n            common.append(nestedlist[i])\n        i+=1\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    nestedlist_length = len(nestedlist)\n    for i in range(nestedlist_length):\n        for j in range(i+1, nestedlist_length):\n            if nestedlist[i] == nestedlist[j] and i!= j:\n                common_list.append(nestedlist[i])\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist) == type([]) and len(nestedlist) > 0:\n        common_elements = []\n        for index, value in enumerate(nestedlist):\n            if type(nestedlist[index]) == type([]):\n                common_elements.extend(nestedlist[index])\n            else:\n                common_elements.append(nestedlist[index])\n        return common_elements\n    else:\n        return nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist) is not list:\n        raise TypeError(\"nestedlist must be a list\")\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set.intersection(*nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    return sorted(set(nestedlist[0]), key=nestedlist[0].index)\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # List of lists\n    nestedlist_values = nestedlist[0]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if text.isdigit():\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text[0]=='-' or text[0]=='-':\n        text=text[1:]\n        if text[0]=='0':\n            return False\n    else:\n        return True\n    \n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text == '.':\n        return True\n    elif text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for k,v in i.items():\n            if k not in i:\n                print(f\"{k} is not in dictionary!\")\n                return False\n    print(\"all dictionary are empty\")\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j == {}:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for key in i:\n            if key in i:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for key in i.keys():\n            if i[key] == None:\n                return False\n    return True\n    \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if type(item) == dict:\n            empty = True\n    if empty == True:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            print('Nothing to empty')\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list1 = []\n    for x in list1:\n        for y in x:\n            if x!= {}:\n                print(x)\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for dictionary in list1:\n        if len(dictionary) > 1:\n            return False\n        elif len(dictionary) == 1:\n            return True\n    \n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if len(i) > 0:\n            empty = False\n    return empty"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) < 1:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] + nums[1]\n    else:\n        mid = len(nums) // 2\n        first = tuple_to_int(nums[:mid])\n        second = tuple_to_int(nums[mid:])\n        \n        return first + second"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tuple_num = []\n    for num in nums:\n        tuple_num.append(int(num))\n    return tuple(tuple_num)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i=0\n    for num in nums:\n        i+=num\n    return i\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    def asint(num):\n        if isinstance(num, int) or isinstance(num, float):\n            return num\n        if isinstance(num, tuple):\n            return tuple(asint(x) for x in num)\n        return num\n    return tuple(map(asint, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    new_nums = 0\n    for num in nums:\n        new_nums = new_nums + num\n    return new_nums\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [float(i) for i in test_list]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convertible_lst = []\n    for item in test_list:\n        for sub_item in item:\n            if sub_item not in convertible_lst:\n                convertible_lst.append(sub_item)\n    return convertible_lst\n    "
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Creating a variable with the value of a list\n    val_list = []\n    # Appending every element to the variable\n    for i in range(len(test_list)):\n        val_list.append([test_list[i][j] for j in range(len(test_list[i]))])\n    # Convert the list to float and convert every value to a float\n    for i in val_list:\n        i[0] = float(i[0])\n        i[1] = float(i[1])\n        i[2] = float(i[2])\n        i[3] = float(i[3])\n        i[4] = float(i[4])\n        i[5] = float(i[5])\n        i[6] = float(i[6])\n        i[7] = float(i[7])\n        i[8] = float(i[8])\n        i[9] = float(i[9])\n        i[10] = float(i[10])\n        i[11] = float(i[11])\n        i[12] = float(i[12])\n    # Return the list\n    return val_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in test_list:\n        for index, pair in enumerate(element):\n            if type(pair) is not tuple:\n                element[index] = float(pair)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_convert = []\n    for i in test_list:\n        for j in i:\n            list_convert.append(j)\n    #print(list_convert)\n    return list_convert\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    \n    for item in test_list:\n        for i in item:\n            if type(i) == float:\n                float_list.append(i)\n    \n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(x) for x in test_list]\n    except:\n        print(\"The input is not a list of lists. Please try again.\")\n        return \"Error\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #create a list of floats\n    new_list = []\n    #loop through the elements in the list\n    for i in test_list:\n        #extend the list with the elements\n        new_list = new_list + i\n    #make the list into a tuple\n    new_tuple = tuple(new_list)\n    #return the tuple\n    return new_tuple\n    \n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list[:]\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) is int or type(test_list[i][j]) is float:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for row in test_list:\n        for element in row:\n            if isinstance(element, list):\n                for row_element in element:\n                    if isinstance(row_element, list):\n                        for list_element in row_element:\n                            if isinstance(list_element, float):\n                                float_list.append(list_element)\n    return float_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split()\n    for i in range(len(lst)):\n        lst[i] = lst[i].strip()\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # return string.replace(' ','').split(' ')\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = list()\n    for i in string.split():\n        new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [i for i in string.split()]\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = []\n    for i in string.split():\n        result.append(i)\n    return result\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings into a string.\n    '''\n    return \" \".join(list)\n    \ndef count_strings(string): \n    '''\n    Write a function to count the number of times each string appears in a list of strings.\n    '''\n    return string.count(\"a\") + string.count(\"e\") + string.count(\"i\") + string.count(\"o\") + string.count(\"u\")\n    \ndef binary_search(list, value): \n    '''\n    Write a function to search a list for a specific value. The list should be sorted in ascending order.\n    '''\n    start = 0\n    end = len(list) - 1\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.replace('\\t','')\n    string = string.replace('\\n','')\n    string = string.replace(' ','')\n    string = string.replace('-','')\n    string = string.replace('[','')\n    string = string.replace(']','')\n    string = string.replace('{','')\n    string = string.replace('}','')\n    string = string.replace('|','')\n    string = string.replace('{', '')\n    string = string.replace('}', '')\n    string = string.replace('!','')\n    string = string.replace('?','')\n    string = string.replace(':','')\n    string = string.replace(' ','')\n    string = string.split(' ')\n    return string\n    \ndef parse_tournament_data(string):\n    '''\n    Read the string of tournament data, separate the name and the time of the tournament, and also format the data into a list of strings.\n    '''\n    string = string.replace('\\t','')\n    string = string.replace('\\n','')\n    string = string.replace(' ','')\n    string = string.replace('-','')\n    string = string.replace('[','')\n    string = string.replace(']','')\n    string = string.replace('{','')\n    string = string.replace('}','')\n    string = string.replace('|','')\n    string = string.replace('{', '')\n    string = string.replace('}', '')\n    string = string.replace('!','')\n    string = string.replace('?','')\n    string = string.replace(':','')\n    string = string.replace(' ','')\n    string = string.split(' ')\n    return string\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) // 2\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Note: we can use either the naive approach, or the binary search algorithm.\n    if not arr:\n        return None\n    # A binary search is a binary search in which we first sort the array and search for the element.\n    # If we sort the array again, the element will occur in the left half,\n    # and so we will not need to search for any element again in the right half.\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Create a hash table to maintain a hash of indices and store the element with a time stamp.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(logN)\n    # Space Complexity: O(logN)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(logN)\n    # Space Complexity: O(N)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(logN)\n    # Space Complexity: O(N)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(logN)\n    # Space Complexity: O(N)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(logN)\n    # Space Complexity: O(N)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(N)\n    # Space Complexity: O(N)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(N)\n    # Space Complexity: O(N)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(N)\n    # Space Complexity: O(N)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(N)\n    # Space Complexity: O(N)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp.\n    #\n    # Time complexity: O(N)\n    # Space Complexity: O(N)\n    # Maintain a hash table of indices, and check if the element is present in the hash table.\n    #\n    # Solution:\n    # Use a hash table to maintain a hash of indices, and check if the element is present in the hash table.\n    # Start with the first element, which is 1, so we want to see if it has been seen before.\n    # Then, we need to find the index of the element with the smallest time stamp.\n    # If there are no items in the hash table, then the element has not been seen before.\n    # If the element has been seen before, then we just need to make a hash entry to determine the smallest time stamp."
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i=0\n    j=len(arr)-1\n    while i<j:\n        if arr[i]==arr[j]:\n            i+=1\n            j-=1\n        else:\n            if arr[i]<arr[j]:\n                arr[i],arr[j]=arr[j],arr[i]\n            i+=1\n            j-=1\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    curr = arr[0]\n    counter = 0\n    while curr!= arr[len(arr) - 1]:\n        counter += 1\n        curr = arr[counter]\n    return counter\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # sort the array\n    arr.sort()\n    count = 0\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    counter = {}\n    for i in arr:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    for key in counter.keys():\n        if counter[key] == 1:\n            return key\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    length = len(arr)\n    # if the length is not a multiple of 2, the entire array is sorted\n    if length % 2 == 0:\n        return arr[length // 2]\n    # if the length is a multiple of 2, we search the next index by adding 1\n    return arr[(length + 1) // 2]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # using counter, find the element with index that appears only once\n    return counter(arr, 0, len(arr)-1, arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        if arr[0] == arr[1]:\n            return arr[0]\n        return None\n    # find the middle element\n    mid = len(arr)//2\n    if arr[mid] == arr[mid-1]:\n        return arr[mid]\n    elif arr[mid] < arr[mid-1]:\n        return search(arr[mid+1:])\n    else:\n        return search(arr[:mid])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_p = -float('inf')\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            t = list1[i] * list1[j]\n            if t > max_p:\n                max_p = t\n    return max_p\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in list1:\n        for j in range(i):\n            if max_product < list1[j]:\n                max_product = list1[j]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(product*list1[i][0], product*list1[j][0])\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    if len(list1) == 1:\n        return list1[0][0]\n    else:\n        for i in range(len(list1) - 1):\n            for j in range(i + 1, len(list1)):\n                if list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                    return list1[i][0] * list1[j][0]\n        return list1[i][0] * list1[i][1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(list1[i][1] > list1[j][0]):\n                temp = list1[j]\n                list1[j] = list1[i]\n                list1[i] = temp\n    return list1[0][1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([(abs(x), y) for x, y in list1])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            prod = (list1[i][0] * list1[j][0]) + (list1[i][1] * list1[j][1])\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def amicable_numbers_sum(limit):\n        list = []\n        for i in range(1, limit + 1):\n            for j in range(1, i):\n                if i % j == 0:\n                    list.append(i)\n        return list\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers=[]\n    amicable_numbers_sum=0\n    for i in range(1,limit):\n        if limit%i==0:\n            amicable_numbers.append(i)\n            amicable_numbers_sum+=i\n            if i%2==0:\n                amicable_numbers.append(i//2)\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    summ = 0\n    nums = []\n    for i in range(1,limit):\n        if is_prime(i):\n            nums.append(i)\n        else:\n            summ += i\n    return summ\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i,amicable_numbers_sum):\n            amicable_numbers_sum += i\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    numbers = [x for x in range(1, limit)]\n    for x in numbers:\n        for y in range(1, x):\n            if x % y == 0:\n                sum += y\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    prime_list = []\n    amicable_numbers_list = []\n    \n    # 0 to limit\n    for x in range(1, limit + 1):\n        \n        # loop through all numbers\n        for y in range(2, x):\n            \n            # sum up all numbers\n            total_sum += y\n            \n            # if number is amicable\n            if y not in prime_list:\n                # if number isn't divisible by 2\n                if y % 2 == 0:\n                    \n                    # if numbers are divisible by both\n                    if y % y == 0:\n                        \n                        # and if number is not in list\n                        amicable_numbers_list.append(y)\n        \n    # print the sum of all amicable numbers\n    print(total_sum)\n    \n    # print the number of amicable numbers\n    print(len(amicable_numbers_list))\n    \n    # print the list\n    print(amicable_numbers_list)\n    \n    # return list\n    return amicable_numbers_list\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    \n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        elif i % 2 == 0:\n            amicable_numbers.append(i)\n        elif i % 3 == 0:\n            amicable_numbers.append(i)\n        elif i % 5 == 0:\n            amicable_numbers.append(i)\n            \n        for j in range(2, i):\n            if i % j == 0:\n                sum += i\n    \n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    # Write your code here\n    for x in range(1, limit):\n        if sum(amicable_numbers[-2:]) == x:\n            amicable_numbers.append(x)\n            # print(amicable_numbers)\n            \n    # print(amicable_numbers)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(limit):\n        if is_amicable(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # convert complex numbers to radians\n    a = a.real**2 + a.imag**2\n    b = b.real**2 + b.imag**2\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef angle_imag(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef angle_mag(a,b):\n    '''\n    Write a function to get the angle of a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef angle_phase(a,b):\n    '''\n    Write a function to get the angle of a phase.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_complex(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_real(a,b):\n    '''\n    Write a function to get the phase of a real number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_imag(a,b):\n    '''\n    Write a function to get the phase of a imaginary number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag(a,b):\n    '''\n    Write a function to get the phase of a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef magnitude_complex(a,b):\n    '''\n    Write a function to get the magnitude of a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.absolute(c)\ndef magnitude_real(a,b):\n    '''\n    Write a function to get the magnitude of a real number.\n    '''\n    c = complex(a,b)\n    return cmath.absolute(c)\ndef magnitude_imag(a,b):\n    '''\n    Write a function to get the magnitude of a imaginary number.\n    '''\n    c = complex(a,b)\n    return cmath.absolute(c)\ndef magnitude_mag(a,b):\n    '''\n    Write a function to get the magnitude of a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.absolute(c)\ndef phase_imag_complex(a,b):\n    '''\n    Write a function to get the phase of a imaginary number with respect to a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_real_complex(a,b):\n    '''\n    Write a function to get the phase of a real number with respect to a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag_complex(a,b):\n    '''\n    Write a function to get the phase of a magnitude with respect to a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag_real(a,b):\n    '''\n    Write a function to get the phase of a magnitude with respect to a real number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_real_mag(a,b):\n    '''\n    Write a function to get the phase of a real number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_complex_mag(a,b):\n    '''\n    Write a function to get the phase of a complex number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_imag_mag(a,b):\n    '''\n    Write a function to get the phase of a imaginary number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag_imag(a,b):\n    '''\n    Write a function to get the phase of a magnitude with respect to a imaginary number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag_real(a,b):\n    '''\n    Write a function to get the phase of a real number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_real_mag(a,b):\n    '''\n    Write a function to get the phase of a real number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_complex_mag(a,b):\n    '''\n    Write a function to get the phase of a complex number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_imag_mag(a,b):\n    '''\n    Write a function to get the phase of a imaginary number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag_imag(a,b):\n    '''\n    Write a function to get the phase of a magnitude with respect to a imaginary number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag_real(a,b):\n    '''\n    Write a function to get the phase of a real number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_imag_mag(a,b):\n    '''\n    Write a function to get the phase of a imaginary number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_real_mag(a,b):\n    '''\n    Write a function to get the phase of a real number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_complex_mag(a,b):\n    '''\n    Write a function to get the phase of a complex number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag_real(a,b):\n    '''\n    Write a function to get the phase of a real number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag_imag(a,b):\n    '''\n    Write a function to get the phase of a imaginary number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_imag_mag(a,b):\n    '''\n    Write a function to get the phase of a imaginary number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_real_mag(a,b):\n    '''\n    Write a function to get the phase of a real number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_real_mag(a,b):\n    '''\n    Write a function to get the phase of a real number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef phase_mag_mag(a,b):\n    '''\n    Write a function to get the phase of a complex number with respect to a magnitude.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\ndef angle_mag(a,b):\n    ''"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    delta = b**2-4*a*cmath.cos(b)+cmath.sin(b)\n    if delta > 0 :\n        print(b,\"+\",a,\"i\",delta/2,\"radian\")\n    elif delta < 0 :\n        print(b,\"-\",a,\"i\",abs(delta)/2,\"radian\")\n    else:\n        print(b,a,\"i\",delta,\"radian\")\n    return delta\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if (abs(a) == abs(b)):\n        angle = acos((b**2 - a**2)/(2*a*b))\n        angle = angle*180/pi\n    elif (abs(a) > abs(b)):\n        angle = acos((abs(a)-b)/(2*a))\n        angle = angle*180/pi\n    else:\n        angle = acos((abs(b)-a)/(2*b))\n        angle = angle*180/pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = b.real + 1j*b.imag\n    y = a.real + 1j*a.imag\n    return cmath.acos(cmath.expm1(y/x))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b) - cmath.phase(a)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    ang = cmath.phase(c)\n    return ang\ndef angle_complex2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex4(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex5(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex6(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex7(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex8(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex9(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex10(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex11(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex12(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex13(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex14(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex15(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex16(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex17(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex18(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex19(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex20(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex21(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex22(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex23(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex24(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex25(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex26(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex27(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex28(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex29(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex30(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath.rect(cmath.sqrt(a**2 + b**2), a))\n    return ang\ndef angle_complex31(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(cmath"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a) - cmath.phase(b)\n    print('Angle: ',angle)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = a.real*b.imag - b.real*a.imag\n    if angle < 0:\n        angle = 360+angle\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c= complex(a,b)\n    angle=c.imag*(np.pi/180)\n    angle=angle.real\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return sum(bin(ord(c) - ord('0')).count('1') for c in string)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #CASE 1 - 1:\n    if (string == \"0\"): return 0\n    #CASE 2 - 1:\n    elif (string == \"1\"): return 1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    n_0 = 0\n    n_1 = 0\n    for i in range(n):\n        if (string[i] == '0'):\n            n_0 += 1\n        else:\n            n_1 += 1\n    return max(n_0 - n_1, n_0, n_1)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    if len(string) == 0:\n        return max_diff\n    if len(string) == 1:\n        return 1\n    for i in range(len(string)):\n        if string[i] == '0':\n            diff = find_length(string[:i]) + find_length(string[i+1:])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_0s = 0\n    num_1s = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            num_0s += 1\n        elif string[i] == \"1\":\n            num_1s += 1\n    return num_0s - num_1s\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return(len(string) - len(string.replace('0','1')))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = 0\n    r = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            l = l + 1\n        if string[i] == \"1\":\n            r = r + 1\n    return l - r\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Your code here\n    max_diff = 0\n    current_zero = 0\n    current_one = 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            current_zero += 1\n        else:\n            current_zero = 0\n        if string[i] == '1':\n            current_one += 1\n        else:\n            current_one = 0\n        max_diff = max(max_diff, current_zero - current_one)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n        else:\n            length -= 1\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 1: \n        return 1\n    if len(string) > 1: \n        if string[0] == '0': \n            return find_length(string[1:]) + find_length(string[2:]) \n        if string[0] == '1': \n            return find_length(string[1:]) \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    num1 = abs(a)\n    num2 = abs(b)\n    \n    if num1 == 0:\n        sum1 = 0\n    elif num2 == 0:\n        sum1 = num1\n    else:\n        div = num1//num2\n        sum1 = num1 + div*num2\n    return sum1\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b: \n        return a \n    if a > b: \n        a,b = b,a \n    c = 0 \n    if a % b == 0: \n        while a % b == 0: \n            c += 1 \n            a //= b \n    else: \n        while a % b!= 0: \n            c += 1 \n            a //= b \n    return a * b * (c + 1) \n    \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if(a==0):\n        return 0\n    if(b==0):\n        return 1\n    \n    if(a==b):\n        return 2\n    \n    return (a*b)//sum(a-1,b-1)"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (a > b):\n        a,b = b,a\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    if (a%b) == 0:\n        return b\n    else:\n        return a%b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return sum(a,b//b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div = {}\n    for i in range(1, min(a,b) + 1): \n        if (a % i == 0) and (b % i == 0):\n            div[i] = a//i\n            div[b//i] = b//i\n    return sum(div.values())"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=0\n    while i<a and i<b:\n        if a%i==0 and b%i==0:\n            print(i)\n        i=i+1\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Your code here\n    if (a == 0) or (b == 0): \n        return 0\n    a=a//b\n    return a+sum(a,b-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b==0): \n        print(\"No common divisor\")\n        return None\n    if(b==1): \n        return a\n    ans = a+b+sum(a,b-1)\n    print(ans)\n    return ans\n    # To solve the problem of equation, we need to add the answer of the function to the return value of the function \n    # print(a+b+sum(a,b-1))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lst=[]\n    if a==0:\n        return b\n    if b==0:\n        return a\n    for i in range(1,a+1):\n        if a%i==0:\n            lst.append(i)\n    for j in range(1,b+1):\n        if b%j==0:\n            lst.append(j)\n    return sum(lst)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # your code goes here\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return (x*y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    if x == 0:\n        return 0\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if (x > y):\n        big = y\n        small = x\n    else:\n        big = x\n        small = y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print('Multiply int', x, 'and', y, 'is', (x * y), '.')\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0:\n        return 0\n    if y == 0:\n        return 1\n    if y < 0:\n        x, y = -y, x\n    if x < 0:\n        x, y = -x, -y\n    res = 0\n    while y:\n        if y & 1:\n            res = res * x\n        x = x * x\n        y >>= 1\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    if x < y:\n        z = x\n        x = y\n        y = z\n    result = 0\n    while x!= 0:\n        result += x % 10\n        x //= 10\n    return y * result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    word_list = []\n    \n    for i in range(n):\n        word_list.append(str[i])\n    \n    # check if there are any words with spaces in them\n    if str in word_list:\n        return True\n    else:\n        return False\n        \ndef main():\n    '''\n    Write a program that calculates the greatest common divisor of a list of integers.\n    '''\n    \n    list_of_numbers = [2,4,6,9,0]\n    \n    print(long_words(3, list_of_numbers))\n    print(long_words(4, list_of_numbers))\n    print(long_words(1, list_of_numbers))\n    print(long_words(2, list_of_numbers))\n    print(long_words(0, list_of_numbers))\n    print(long_words(1, list_of_numbers))\n    print(long_words(2, list_of_numbers))\n    print(long_words(3, list_of_numbers))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if not isinstance(str, list):\n        raise TypeError(\"str must be a list of strings\")\n    for word in str:\n        if not isinstance(word, str):\n            raise TypeError(\"each word must be a string\")\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            str[i] = str[i][:n]\n    return str\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return words\n    \ndef number_of_times(num, str):\n    '''\n    Write a function that returns the number of times num appears in a given list of words.\n    '''\n    num = []\n    for word in str.split():\n        num.append(num.count(word))\n    return num\n    \ndef get_longest_word(word):\n    '''\n    Write a function that returns the longest word in a given list of words.\n    '''\n    word = word.split()\n    longest = \"\"\n    for word in word:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n    \ndef longest_word(word):\n    '''\n    Write a function that returns the longest word in a given list of words.\n    '''\n    word = word.split()\n    longest = \"\"\n    for word in word:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n    \ndef remove_punctuation(str):\n    '''\n    Write a function that removes punctuation from a given string.\n    '''\n    punc = {'.', ',', ':', ';', '!', '?'}\n    new_str = ''\n    for char in str:\n        if char not in punc:\n            new_str += char\n    return new_str\n    \ndef reverse_word(str):\n    '''\n    Write a function that reverses a word.\n    '''\n    new_str = \"\"\n    word = str.split()\n    for word in word:\n        new_str += word[::-1]\n    return new_str\n    \ndef count_words(str):\n    '''\n    Write a function that counts the number of words in a given list of words.\n    '''\n    new_str = []\n    for word in str.split():\n        new_str.append(word)\n    return new_str\n    \ndef format_words(str):\n    '''\n    Write a function that formats a string to a desired format.\n    '''\n    new_str = []\n    for word in str.split():\n        new_str.append(word)\n    return new_str\n    \ndef reverse_sentence(str):\n    '''\n    Write a function that reverses a sentence.\n    '''\n    new_str = []\n    word = str.split()\n    for i in range(len(word)):\n        if word[i] == '.':\n            new_str.append(word[i + 1])\n            word[i + 1] = word[i]\n            word[i] = '.'\n        else:\n            new_str.append(word[i])\n            word[i] = '.'\n    return''.join(new_str)\n    \ndef reverse_lines(str):\n    '''\n    Write a function that reverses a string.\n    '''\n    new_str = []\n    for line in str.splitlines():\n        new_str.append(line)\n    return''.join(new_str)\n    \ndef reverse_words(str):\n    '''\n    Write a function that reverses a string.\n    '''\n    new_str = []\n    for word in str.split():\n        new_str.append(word[::-1])\n    return''.join(new_str)\n    \ndef reverse_paragraph(str):\n    '''\n    Write a function that reverses a string.\n    '''\n    new_str = []\n    for line in str.split('\\n'):\n        if line!= '':\n            new_str.append(line[::-1])\n    return '\\n'.join(new_str)\n    \ndef get_longest_word_len(str):\n    '''\n    Write a function that returns the longest word in a given list of words.\n    '''\n    word = str.split()\n    longest = \"\"\n    for word in word:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n    \ndef get_longest_word_len_of_list(str):\n    '''\n    Write a function that returns the longest word in a given list of words.\n    '''\n    word = str.split()\n    longest = \"\"\n    for word in word:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n    \ndef get_longest_word_len_of_list2(str):\n    '''\n    Write a function that returns the longest word in a given list of words.\n    '''\n    word = str.split()\n    longest = \"\"\n    for word in word:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n    \ndef get_longest_word_len_of_list3(str):\n    '''\n    Write a function that returns the longest word in a given list of words.\n    '''\n    word = str.split()\n    longest = \"\"\n    for word in word:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n    \ndef number_words_in_list(list):\n    '''\n    Write a function that counts the number of words in a given list of words.\n    '''\n    num = 0\n    for word in list:\n        num += word.count(' ')\n    return num\n    \ndef word_length(str):\n    '''\n    Write a function that returns the length of a given string.\n    '''\n    return len(str)\n    \ndef check_for_duplicates(str):\n    '''\n    Write a function that checks for duplicates.\n    '''\n    unique_list = []\n    for word in str.split():\n        if word not in unique_list:\n            unique_list.append(word)\n    return unique_list\n    \ndef add_punctuation(str):\n    '''\n    Write a function that adds a given string to a given list of strings.\n    '''\n    new_list = []\n    for word in str.split():\n        new_list.append(word + \"!\")\n    return new_list\n    \ndef remove_punctuation(str):\n    '''\n    Write a function that removes punctuation from a given string.\n    '''\n    punc = {'.', ',', ':', ';', '!', '?'}\n    new_str = \"\"\n    for char in str:\n        if char not in punc:\n            new_str += char\n    return new_str\n    \ndef reverse_list(list):\n    '''\n    Write a function that reverses a list.\n    '''\n    new_list = []\n    for word in list:\n        if word!= '':\n            new_list.append(word[::-1])\n    return new_list\n    \ndef split_words(str):\n    '''\n    Write a function that splits a given string into a list of strings.\n    '''\n    new_str = str.split()\n    new_list = []\n    for word in new_str:\n        new_list.append(word.split())\n    return new_list\n    \ndef reverse_list(list):\n    '''\n    Write a function that reverses a list.\n    '''\n    new_list = []\n    for word in list:\n        if word!= '':\n            new_list.append(word[::-1])\n    return new_list\n    \ndef reverse_list_2(list):\n    '''\n    Write a function that reverses a list.\n    '''\n    new_list = []\n    for word in list:\n        if word!= '':\n            new_list.append(word[::-1])\n    return new_list\n    \ndef is_capital(word):\n    '''\n    Write a function that returns True if a given word is a capitalized word, and False otherwise.\n    '''\n    return word.isupper()\n    \ndef is_middle(word):\n    '''\n    Write a function that returns True if a given word is a middle word, and False otherwise.\n    '''\n    return word == word.capitalize()\n    \ndef i"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = []\n    for i in str:\n        l.append(len(i))\n    if max(l) < n:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    def long_words(n, str):\n        # Construct an initial list of words.\n        words = []\n        for i in str:\n            if len(i) > n:\n                words.append(i)\n        # Return the list of words\n        return words\n    # return the words with length greater than n\n    return long_words(n, str)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = list()\n    for i in str:\n        if len(i) > n:\n            word_list.append(i)\n    return word_list\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    words = str.split()\n    for word in words:\n        if len(word) >= n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    a = [word for word in str.split() if len(word) > n]\n    return a\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Write your code here\n    words = str.split()\n    res = []\n    for word in words:\n        if len(word) > n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # define a list of the elements of the matrix\n    elements = [int(x) for x in my_matrix]\n    # calculate the sum of each row\n    sum_of_row = sum(elements)\n    # calculate the sum of each column\n    sum_of_column = sum(elements)\n    # calculate the sum of each diagonal\n    sum_of_diagonal = sum(elements[i] for i in range(len(elements)))\n    # if the sum of each row and each column is equal, then the matrix is a magic square\n    if sum_of_row == sum_of_column and sum_of_diagonal == sum(elements):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix[0])\n    for i in range(size):\n        if my_matrix[0][i]!= my_matrix[1][i]:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n    #print(\"The matrix is:\")\n    #print(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if all(elem == elem for elem in my_matrix):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the dimensions of the matrix\n    dimension = len(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    M = len(my_matrix)\n    n = len(my_matrix[0])\n    \n    for i in range(1, M-1):\n        for j in range(1, n-1):\n            if my_matrix[i][j]!= my_matrix[i][j+1] and my_matrix[i][j]!= my_matrix[i-1][j+1] and my_matrix[i][j]!= my_matrix[i-1][j-1]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row_index in range(len(my_matrix)):\n        if len(my_matrix[row_index])!= len(my_matrix[0]):\n            return False\n        for column_index in range(len(my_matrix[0])):\n            if my_matrix[row_index][column_index]!= my_matrix[row_index][column_index + 1] \\\n                    and my_matrix[row_index][column_index]!= my_matrix[row_index + 1][column_index]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    row = 0\n    col = 0\n    for row in range(n):\n        for col in range(row,n):\n            if row == n-1:\n                row = 0\n                col = col + 1\n                continue\n            if my_matrix[row][col]!= my_matrix[row][col+1]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in range(len(nums)):\n        d[nums[i]] += 1\n    max_freq = max(d.values())\n    for i in d:\n        if d[i] == max_freq:\n            return i\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    c = 0\n    freq = defaultdict(int)\n    for i in range(len(nums)):\n        freq[nums[i]] += 1\n        if freq[nums[i]] > c:\n            c = freq[nums[i]]\n            index = i\n    return index\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(int)\n    for num in nums:\n        max_freq[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq=defaultdict(int)\n    for item in nums:\n        max_freq[item]+=1\n    return max(max_freq.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a set of all the numbers from 0 to n\n    nums_set = set(nums)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    # print(nums)\n    freq_table = defaultdict(lambda: [0, 0, 0, 0])\n    freq_table = {i:0 for i in nums}\n    for i in nums:\n        freq_table[i] += 1\n    # print(freq_table)\n    for i in range(1, len(freq_table)):\n        if freq_table[i] > freq_table[i-1]:\n            return i-1\n    return -1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = {}\n    for num in nums:\n        if num in max_freq:\n            max_freq[num] += 1\n        else:\n            max_freq[num] = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x in d.keys():\n        if d[x] == 0:\n            return x\n    return -1\n    \n    \nclass SearchIndex(object):\n    '''\n    A search index for a given value in a set.\n    '''\n    \n    def __init__(self, base, interval):\n        '''\n        @param base: base value for the search index\n        @param interval: interval of the search index\n        '''\n        self.base = base\n        self.interval = interval\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    max_occurrences = -1\n    for i, x in enumerate(d.keys()):\n        if d[x] > max_occurrences:\n            max_occurrences = d[x]\n            max_item = x\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = defaultdict(int)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    for index in range(len(str1)):\n        if (str1[index] in vowels):\n            str1 = str1[:index] + str1[index].upper() + str1[index + 1:]\n    return str1\nprint(reverse_vowels(\"aeiou\"))"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_list = ['a','e','i','o','u']\n    vowels_dict = {\n        \"a\":\"A\",\n        \"e\":\"E\",\n        \"i\":\"I\",\n        \"o\":\"O\",\n        \"u\":\"U\"\n    }\n    reversed_str = \"\"\n    for i in str1:\n        if i in vowel_list:\n            new_char = vowels_dict[i]\n            reversed_str = reversed_str + new_char\n        else:\n            reversed_str = reversed_str + i\n    return reversed_str\n    \n    \nprint(reverse_vowels(\"mabbix\"))"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1_copy = str1.lower()\n    new_str1 = []\n    for x in str1_copy:\n        if x in vowels:\n            new_str1.append(x)\n    return \"\".join(new_str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Define vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # Variables to get reverse word\n    word = \"\"\n    # Loop through the string\n    for i in range(len(str1)-1, -1, -1):\n        # Add the vowel to the word\n        word += str(vowels.pop(0)) + str(str1[i])\n    return word\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    return str1.translate(str.maketrans('aeiouAEIOU','aeiouAEIOU'))"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['a','e','i','o','u']\n    final=\"\"\n    for i in str1:\n        if i in vowels:\n            final+=i\n        else:\n            final+=\"_\"\n    return final\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    '''\n    sample input\n    s1=vowels\n    x=abc\n    s2=12345\n    '''\n    def reverse(str1):\n        '''\n        This function reverses all the vowels in a given string.\n        '''\n        vowels=['a','e','i','o','u','y']\n        print('Original string: {}'.format(str1))\n        l=[]\n        for i in str1:\n            if i in vowels:\n                l.append(i)\n        print('Reversed string: {}'.format(''.join(l)))\n        return ''.join(l)\n    reverse(str1)\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # TODO\n    reverse = \"\"\n    for i in str1:\n        if i == \"y\":\n            reverse += \"o\"\n        else:\n            reverse += i\n    return reverse\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    str1 = str1.upper()\n    str1 = str1.replace('Y', 'A')\n    str1 = str1.replace('Y', 'A')\n    str1 = str1.replace('Y', 'a')\n    str1 = str1.replace('Y', 'a')\n    return str1\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].lower() not in vowels:\n            str2 += str1[i]\n    return str2\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \ndef dict_string(dict1):\n    '''\n    Write a function to convert a dictionary to a string.\n    '''\n    return str(dict1)\n    \ndef dict_list(dict1):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    return str(dict1)\n    \ndef dict_int(dict1):\n    '''\n    Write a function to convert a dictionary to an integer.\n    '''\n    return str(dict1)\n    \ndef dict_float(dict1):\n    '''\n    Write a function to convert a dictionary to an float.\n    '''\n    return str(dict1)\n    \ndef dict_tuple(dict1):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    return str(dict1)\n    \ndef dict_frozenset(dict1):\n    '''\n    Write a function to convert a dictionary to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_string(dict1):\n    '''\n    Write a function to convert a dictionary to a string.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a dictionary to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_tuple(dict1):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a dictionary to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_int(dict1):\n    '''\n    Write a function to convert a dictionary to an integer.\n    '''\n    return str(dict1)\n    \ndef dict_convert_float(dict1):\n    '''\n    Write a function to convert a dictionary to an float.\n    '''\n    return str(dict1)\n    \ndef dict_convert_tuple(dict1):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a dictionary to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_dict(dict1):\n    '''\n    Write a function to convert a dictionary to a dictionary.\n    '''\n    return str(dict1)\n    \ndef dict_convert_set(dict1):\n    '''\n    Write a function to convert a dictionary to a set.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a dictionary to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_list(dict1):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    return str(dict1)\n    \ndef dict_convert_str(dict1):\n    '''\n    Write a function to convert a dictionary to a string.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a dictionary to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_dict(dict1):\n    '''\n    Write a function to convert a dictionary to a dictionary.\n    '''\n    return str(dict1)\n    \ndef dict_convert_set(dict1):\n    '''\n    Write a function to convert a dictionary to a set.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a dictionary to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_int(dict1):\n    '''\n    Write a function to convert a dictionary to an integer.\n    '''\n    return str(dict1)\n    \ndef dict_convert_float(dict1):\n    '''\n    Write a function to convert a dictionary to an float.\n    '''\n    return str(dict1)\n    \ndef dict_convert_tuple(dict1):\n    '''\n    Write a function to convert a dictionary to a tuple.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a dictionary to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_list(dict1):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    return str(dict1)\n    \ndef dict_convert_dict(dict1):\n    '''\n    Write a function to convert a dictionary to a dictionary.\n    '''\n    return str(dict1)\n    \ndef dict_convert_set(dict1):\n    '''\n    Write a function to convert a dictionary to a set.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a dictionary to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a frozenset to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a frozenset to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_list(dict1):\n    '''\n    Write a function to convert a frozenset to a list.\n    '''\n    return str(dict1)\n    \ndef dict_convert_dict(dict1):\n    '''\n    Write a function to convert a frozenset to a dictionary.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a frozenset to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_set(dict1):\n    '''\n    Write a function to convert a frozenset to a set.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a frozenset to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_set(dict1):\n    '''\n    Write a function to convert a set to a set.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a frozenset to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_set(dict1):\n    '''\n    Write a function to convert a frozenset to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a frozenset to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''\n    Write a function to convert a frozenset to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_set(dict1):\n    '''\n    Write a function to convert a frozenset to a frozenset.\n    '''\n    return str(dict1)\n    \ndef dict_convert_frozenset(dict1):\n    '''"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2=tuple(map(str,tup1))\n    return '(' + str(tup2) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = '(' + ', '.join(str(e) for e in tup1) + ')'\n    return tup2\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for item in tup1:\n        str1 += str(item)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \",\".join([str(x) for x in tup1]) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n        \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n        \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n        \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string.rstrip()\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    retur"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup1 = ''\n    for item in tup1:\n        str_tup1 += str(item)\n    return str_tup1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join([str(i) for i in tup1]) + ')'\n    "
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1).replace(\"(\",\"\").replace(\")\",\"\").replace(\"'\",\"\")\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2=tuple(map(str, tup1))\n    return(tup2)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n        else:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # return sum([n for n in nums if n > 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum=0\n    for num in nums:\n        if num<0:\n            sum-=num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative = 0\n    for num in nums:\n        if num < 0:\n            negative += num\n    return negative\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # your code here\n    # do not remove this line\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum = sum - num\n        else:\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return -nums[0]\n    else:\n        return nums[0] + sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    summ=0\n    for num in nums:\n        if num<0:\n            summ-=num\n    return summ\nnums=[-1,2,-3,-4,-6,-2,3,5,-1,6,8,2]\nprint(sum_negativenum(nums)"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # find the next square \n    for i in range(1, n): \n        if i % 2 == 0: \n            # modulus gives the remainder \n            # then divide by 2 \n            # then square by 3 \n            # then back to the base \n            # then add to the result \n            # if result is even \n            # then add 1 \n            # if result is odd \n            # then return result \n            # else \n            # return result \n            # same for the rest \n            # of the loop \n            # if i is odd \n            # then return remainder \n            # if i is even \n            # return result \n            result = ((i**2) + (i**3) + i**4)%n\n            if result % 2 == 0: \n                # modulus gives the remainder \n                # then divide by 2 \n                # then square by 3 \n                # then back to the base \n                # then add to the result \n                # if result is even \n                # then add 1 \n                # if result is odd \n                # then return result \n                # else \n                # return result \n                # same for the rest \n                # of the loop \n                # if i is odd \n                # then return remainder \n                # if i is even \n                # then return result \n                result = ((i**2) + (i**3) + i**4)%n\n                if result % 2 == 0: \n                    # modulus gives the remainder \n                    # then divide by 2 \n                    # then square by 3 \n                    # then back to the base \n                    # then add to the result \n                    # if result is even \n                    # then add 1 \n                    # if result is odd \n                    # then return result \n                    # else \n                    # return result \n                    # same for the rest \n                    # of the loop \n                    # if i is odd \n                    # then return remainder \n                    # if i is even \n                    # then return result \n                    result = ((i**2) + (i**3) + i**4)%n\n                    if result % 2 == 0: \n                        # modulus gives the remainder \n                        # then divide by 2 \n                        # then square by 3 \n                        # then back to the base \n                        # then add to the result \n                        # if result is even \n                        # then add 1 \n                        # if result is odd \n                        # then return result \n                        # else \n                        # return result \n                        # same for the rest \n                        # of the loop \n                        # if i is odd \n                        # then return remainder \n                        # if i is even \n                        # then return result \n                        result = ((i**2) + (i**3) + i**4)%n\n                        if result % 2 == 0: \n                            # modulus gives the remainder \n                            # then divide by 2 \n                            # then square by 3 \n                            # then back to the base \n                            # then add to the result \n                            # if result is even \n                            # then add 1 \n                            # if result is odd \n                            # then return result \n                            # else \n                            # return result \n                            # same for the rest \n                            # of the loop \n                            # if i is odd \n                            # then return remainder \n                            # if i is even \n                            # then return result \n                            result = ((i**2) + (i**3) + i**4)%n\n                            if result % 2 == 0: \n                                # modulus gives the remainder \n                                # then divide by 2 \n                                # then square by 3 \n                                # then back to the base \n                                # then add to the result \n                                # if result is even \n                                # then add 1 \n                                # if result is odd \n                                # then return result \n                                # else \n                                # return result \n                                # same for the rest \n                                # of the loop \n                                # if i is odd \n                                # then return remainder \n                                # if i is even \n                                # then return result \n                                result = ((i**2) + (i**3) + i**4)%n\n                                if result % 2 == 0: \n                                    # modulus gives the remainder \n                                    # then divide by 2 \n                                    # then square by 3 \n                                    # then back to the base \n                                    # then add to the result \n                                    # if result is even \n                                    # then add 1 \n                                    # if result is odd \n                                    # then return result \n                                    # else \n                                    # return result \n                                    # same for the rest \n                                    # of the loop \n                                    # if i is odd \n                                    # then return remainder \n                                    # if i is even \n                                    # then return result \n                                    result = ((i**2) + (i**3) + i**4)%n\n                                    if result % 2 == 0: \n                                        # modulus gives the remainder \n                                        # then divide by 2 \n                                        # then square by 3 \n                                        # then back to the base \n                                        # then add to the result \n                                        # if result is even \n                                        # then add 1 \n                                        # if result is odd \n                                        # then return result \n                                        # else \n                                        # return result \n                                        # same for the rest \n                                        # of the loop \n                                        # if i is odd \n                                        # then return remainder \n                                        # if i is even \n                                        # then return result \n                                        result = ((i**2) + (i**3) + i**4)%n\n                                        if result % 2 == 0: \n                                            # modulus gives the remainder \n                                            # then divide by 2 \n                                            # then square by 3 \n                                            # then back to the base \n                                            # then add to the result \n                                            # if result is even \n                                            # then add 1 \n                                            # if result is odd \n                                            # then return result \n                                            # else \n                                            # return result \n                                            # same for the rest \n                                            # of the loop \n                                            # if i is odd \n                                            # then return remainder \n                                            # if i is even \n                                            # then return result \n                                            result = ((i**2) + (i**3) + i**4)%n\n                                            if result % 2 == 0: \n                                                # modulus gives the remainder \n                                                # then divide by 2 \n                                                # then square by 3 \n                                                # then back to the base \n                                                # then add to the result \n                                                # if result is even \n                                                # then add 1 \n                                                # if result is odd \n                                                # then return result \n                                                # else \n                                                # return result \n                                                # same for the rest \n                                                # of the loop \n                                                # if i is odd \n                                                # then return remainder \n                                                # if i is even \n                                                # then return result \n                                                result = ((i**2) + (i**3) + i**4)%n\n                                            if result % 2 == 0: \n                                                # modulus gives the remainder \n                                                # then divide by 2 \n                                                # then square by 3 \n                                                # then back to the base \n                                                # then add to the result \n                                                # if result is even \n                                                # then add 1 \n                                                # if result is odd \n                                                # then return result \n                                                # else \n                                                # return result \n                                                # same for the rest \n                                                # of the loop \n                                                # if i is odd \n                                                # then return remainder \n                                                # if i is even \n                                                # then return result \n                                                result = ((i**2) + (i**3) + i**4)%n\n                                            if result % 2 == 0: \n                                                # modulus gives the remainder \n                                                # then divide by 2 \n                                                # then square by 3 \n                                                # then back to the base \n                                                # then add to the result \n                                                # if result is even \n                                                # then add 1 \n                                                # if result is odd \n                                                # then return result \n                                                # else \n                                                # return result \n                                                # same for the rest \n                                                # of the loop \n                                                # if i is od"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    h = 0\n    while (n > 0):\n        n = n//3\n        h = h + 2*n\n    return h\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    print(\"Hexagonal Number of n = \" + str(n) + \" is \" + str(hexagonal_num(n - 1)))\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n    if n == 2: \n        return 3\n    if n == 3: \n        return 5\n    if n == 4: \n        return 7 \n    if n == 5: \n        return 9 \n    if n == 6: \n        return 11\n    if n == 7: \n        return 13 \n    if n == 8: \n        return 15 \n    if n == 9: \n        return 17 \n    if n == 10: \n        return 19 \n    if n == 11: \n        return 21 \n    if n == 12: \n        return 23 \n    if n == 13: \n        return 25 \n    if n == 14: \n        return 27 \n    if n == 15: \n        return 29 \n    if n == 16: \n        return 31 \n    if n == 17: \n        return 33 \n    if n == 18: \n        return 35 \n    if n == 19: \n        return 37 \n    if n == 20: \n        return 39 \n    if n == 21: \n        return 41 \n    if n == 22: \n        return 43 \n    if n == 23: \n        return 45 \n    if n == 24: \n        return 47 \n    if n == 25: \n        return 49 \n    if n == 26: \n        return 51 \n    if n == 27: \n        return 53 \n    if n == 28: \n        return 55 \n    if n == 29: \n        return 57 \n    if n == 30: \n        return 59 \n    if n == 31: \n        return 61 \n    if n == 32: \n        return 63 \n    if n == 33: \n        return 65 \n    if n == 34: \n        return 67 \n    if n == 35: \n        return 69 \n    if n == 36: \n        return 71 \n    if n == 37: \n        return 73 \n    if n == 38: \n        return 75 \n    if n == 39: \n        return 77 \n    if n == 40: \n        return 79 \n    if n == 41: \n        return 81 \n    if n == 42: \n        return 83 \n    if n == 43: \n        return 85 \n    if n == 44: \n        return 87 \n    if n == 45: \n        return 89 \n    if n == 46: \n        return 91 \n    if n == 47: \n        return 93 \n    if n == 48: \n        return 95 \n    if n == 49: \n        return 97 \n    if n == 50: \n        return 99 \n    if n == 51: \n        return 101 \n    if n == 52: \n        return 103 \n    if n == 53: \n        return 105 \n    if n == 54: \n        return 107 \n    if n == 55: \n        return 109 \n    if n == 56: \n        return 111 \n    if n == 57: \n        return 113 \n    if n == 58: \n        return 115 \n    if n == 59: \n        return 117 \n    if n == 60: \n        return 119 \n    if n == 61: \n        return 121 \n    if n == 62: \n        return 123 \n    if n == 63: \n        return 125 \n    if n == 64: \n        return 127 \n    if n == 65: \n        return 129 \n    if n == 66: \n        return 131 \n    if n == 67: \n        return 133 \n    if n == 68: \n        return 135 \n    if n == 69: \n        return 137 \n    if n == 70: \n        return 139 \n    if n == 71: \n        return 141 \n    if n == 72: \n        return 143 \n    if n == 73: \n        return 145 \n    if n == 74: \n        return 147 \n    if n == 75: \n        return 149 \n    if n == 76: \n        return 151 \n    if n == 77: \n        return 153 \n    if n == 78: \n        return 155 \n    if n == 79: \n        return 157 \n    if n == 80: \n        return 159 \n    if n == 81: \n        return 161 \n    if n == 82: \n        return 163 \n    if n == 83: \n        return 165 \n    if n == 84: \n        return 167 \n    if n == 85: \n        return 169 \n    if n == 86: \n        return 171 \n    if n == 87: \n        return 173 \n    if n == 88: \n        return 175 \n    if n == 89: \n        return 177 \n    if n == 90: \n        return 179 \n    if n == 91: \n        return 181 \n    if n == 92: \n        return 183 \n    if n == 93: \n        return 185 \n    if n == 94: \n        return 187 \n    if n == 95: \n        return 189 \n    if n == 96: \n        return 191 \n    if n == 97: \n        return 193 \n    if n == 98: \n        return 195 \n    if n == 99: \n        return 197 \n    if n == 100: \n        return 199 \n    if n == 101: \n        return 201 \n    if n == 102: \n        return 203 \n    if n == 103: \n        return 205 \n    if n == 104: \n        return 207 \n    if n == 105: \n        return 209 \n    if n == 106: \n        return 211 \n    if n == 107: \n        return 213 \n    if n == 108: \n        return 215 \n    if n == 109: \n        return 217 \n    if n == 110: \n        return 219 \n    if n == 111: \n        return 221 \n    if n == 112: \n        return 223 \n    if n == 113: \n        return 225 \n    if n == 114: \n        return 227 \n    if n == 115: \n        return 229 \n    if n == 116: \n        return 231 \n    if n == 117: \n        return 233 \n    if n == 118: \n        return 235 \n    if n == 119: \n        return 237 \n    if n == 120: \n        return 239 \n    if n == 121: \n        return 241 \n    if n == 122: \n        return 243 \n    if n == 123: \n        return 245 \n    if n == 124: \n        return 247 \n    if n == 125: \n        return 249 \n    if n == 126: \n        return 251 \n    if n == 127: \n        return 253 \n    if n == 128: \n        return 255 \n    if n == 129: \n        return 257 \n    if n == 130: \n        return 259 \n    if n == 131: \n        return 261 \n    if n == 132: \n        return 263 \n    if n == 133: \n        return 265 \n    if n == 134: \n        return 267 \n    if n == 135: \n        return 269 \n    if n == 136: \n        return 271 \n    if n == 137: \n        return 273 \n    if n == 138: \n        return 275 \n    if n == 139: \n        return 277 \n    if n == 140: \n        return 279 \n    if n == 141: \n        return 281 \n    if n == 142: \n        return 283 \n    if n == 143: \n        return 285 \n    if n == 144: \n        return 287 \n    if n == 145: \n        return 289 \n    if n == 146: \n        return 291 \n    if n == 147: \n        return 293 \n    if n == 148: \n        return 295 \n    if n == 149: \n        return 297 \n    if n == 150: \n        return 299 \n    if n == 151: \n        return 301 \n    if n == 152: \n        return 303 \n    if n == 153: \n        return 305 \n    if n == 154: \n        return 307 \n    if n ="
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def count_pow(n):\n        '''\n        Calculate the number of multiples of 3 and 5.\n        '''\n        if n < 1:\n            return 0\n        return n*(n - 1)//6 + count_pow(n - 1)\n    return count_pow(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return n \n    else: \n        return hexagonal_num(n - 1) + hexagonal_num(n - 1) + n - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n+1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return False\n    return n * n + (n + 1) * (n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    elif n==2: \n        return 3\n    elif n==3: \n        return 5\n    else: \n        return 5*(n-1)+(n-2)+(n-4)+(n-6)+(n-8)+(n-9)+(n-10)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(hex(n)[2:]) \n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # idea from here: https://www.youtube.com/watch?v=N9nI_R9WuMk\n    result = 0\n    for num in nums:\n        if num == 0:\n            result += 1\n    return result/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes_num = 0\n    nonzero_num = 0\n    count = 0\n    for num in nums:\n        if num == 0:\n            zeroes_num += 1\n        else:\n            nonzero_num += 1\n    ratio = zeroes_num/nonzero_num\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = {}\n    for i in nums:\n        result[i] = result.get(i, 0) + 1\n    return result\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return non_zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    s = 0\n    if not nums:\n        return None\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            s += 1\n    return s/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums)==0:\n        return 0\n    return nums.count(0) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            result += 1\n    return result / len(nums)\ndef zero_average(nums):\n    '''\n    Write a function to return the average of an array of numbers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i]\n    return result / len(nums)\ndef linear_search(nums, number):\n    '''\n    Write a function to return the index of the first index that is greater than the given number.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] < number:\n            return i\n        i += 1\n    return -1\ndef search_in_array(nums, number):\n    '''\n    Write a function to search a specific element in an array.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] == number:\n            return i\n        i += 1\n    return -1\ndef binary_search(nums, number):\n    '''\n    Write a function to search an element in an array.\n    '''\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == number:\n            return mid\n        if nums[mid] < number:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\ndef linear_search_interval(nums, low, high, element):\n    '''\n    Write a function to search an element in an array using a linear search algorithm.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] == element:\n            return i\n        i += 1\n    return -1\ndef merge(nums):\n    '''\n    Write a function to merge two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    nums_sorted = array(nums)\n    while i < len(nums_sorted) and j < len(nums_sorted):\n        if nums_sorted[i] < nums_sorted[j]:\n            nums_sorted[i] = nums_sorted[j]\n            j += 1\n        else:\n            i += 1\n            j = 0\n    while i < len(nums_sorted):\n        nums_sorted[i] = nums_sorted[i]\n        i += 1\n    return nums_sorted\ndef merge_sort(nums):\n    '''\n    Write a function to sort an array.\n    '''\n    # O(n^2)\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums) // 2\n    left = merge_sort(nums[:mid])\n    right = merge_sort(nums[mid:])\n    return merge(left) + right\ndef quicksort(nums):\n    '''\n    Write a function to sort an array.\n    '''\n    def partition(arr, low, high):\n        i = (low - 1)\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n    def sort(arr):\n        if len(arr) < 2:\n            return arr\n        else:\n            pivot = arr[0]\n            small = sort(arr[1:])\n            return sort(arr[:]) + [pivot] + sort(small)\n    def quick_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        else:\n            pivot = arr[0]\n            small = quick_sort(arr[1:])\n            return sort(arr[:]) + [pivot] + sort(small)\n    return quick_sort(sort(nums))\ndef quick_sort_interval(nums, low, high):\n    '''\n    Write a function to sort an array using a quick sort algorithm.\n    '''\n    def partition(arr, low, high):\n        i = low\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n    def sort(arr):\n        if len(arr) < 2:\n            return arr\n        else:\n            pivot = arr[0]\n            small = sort(arr[1:])\n            return sort(arr[:]) + [pivot] + sort(small)\n    if low < high:\n        pivot = partition(arr, low, high)\n        sort(quick_sort_interval(arr, low, pivot - 1))\n        sort(quick_sort_interval(arr, pivot + 1, high))\n    return arr\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    \n    return zero_count/nonzero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    i = 0\n    while i < len(nums):\n        if nums[i] == 0:\n            count += 1\n        i += 1\n    return count / len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s=0\n    for i in range(2,n+1): \n        if n % i == 0: \n            s+=i \n    if s==0: \n        return True \n    else: \n        return False\n "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_list = []\n    power_list.append(1)\n    i = 2\n    while(i<=n):\n        if(n%i==0):\n            power_list.append(i)\n        i += 2\n    if(len(power_list)==1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False\n    if n == 1: \n        return True\n    if n == 2: \n        return False\n    if n % 2 == 0: \n        return False\n    if n % 2 == 1: \n        return True\n    for i in range(3, n): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n==0): \n        return False\n    if(n<0): \n        return False\n    # for power of 2  \n    if(n==1): \n        return True\n    # for power of 3\n    if(n==2): \n        return True\n    if(n%2==0): \n        return False\n    # for power of 5\n    if(n%5==0): \n        return False\n    \n    # now for n-1\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==1:\n        return True\n    else:\n        if n%2==0:\n            return False\n        else:\n            return is_Sum_Of_Powers_Of_Two(int(n/2))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    print(n)\n    # your code here\n    sum = 0\n    for i in range(1, n + 1):\n        print(i)\n        if i == 1:\n            sum += i\n        else:\n            sum += i ** 2\n    return sum > 1\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Write your code here\n    if n == 1:\n        return True\n    if n < 1:\n        return False\n    if n < 15:\n        return False\n    if n % 2 == 0:\n        return False\n    \n    # your code goes here\n    \n    power_of_2 = 0\n    while n > power_of_2:\n        power_of_2 += 1\n        if n % power_of_2 == 0:\n            return False\n        \n    if n == power_of_2:\n        return True\n    \n    return False\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_diff(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv2(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv3(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv4(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv5(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv6(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv7(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv8(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv9(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv10(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv11(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv12(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv13(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv14(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv15(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv16(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv17(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv18(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv19(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv20(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv21(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv22(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv23(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv24(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv25(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv26(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two or not.\n    '''\n    return n==0 or (n==1 and n!=1)\ndef is_Sum_Of_Powers_Of_Two_inv27(n):\n    '''\n    Write a python function to check whether the given number ca"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: return False\n    if n<0: return False\n    if n%2==0: return True\n    else:\n        for i in range(3,n+1):\n            if n%i==0: return False\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #This is a testing problem.\n    if n < 2: \n        return False\n    #set a flag to check whether the number is a power of two \n    flag = True \n    for i in range(2,n): \n        if n%i == 0: \n            flag = False \n            break \n    if flag: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*(r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2*(3.1416)*(r**2)\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1416\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r**2\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        result = result + item\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # 1) Loop through the list of lists and create a new list called result\n    # 2) loop through the original list and add the number to the result\n    # 3) return the result\n    result = []\n    for item in test_list:\n        result.extend(item)\n    \n    # return the result\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for element in test_list:\n        for number in element:\n            flattened_list.append(number)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def extract(lst,start,end):\n        if start == end:\n            return lst[start]\n        \n        mid = (start+end)//2\n        lst1 = extract(lst,start,mid)\n        lst2 = extract(lst,mid+1,end)\n        \n        return {lst1+lst2,lst1,lst2}\n    \n    def flatten(lst):\n        if len(lst) == 1:\n            return lst[0]\n        \n        res = flatten(lst[1:])\n        for i in range(len(lst)):\n            res.add(lst[i])\n        \n        return res\n    \n    return extract(test_list,0,len(test_list)-1)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = list(test_list)\n    n_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            n_list.append(test_list[i][j])\n    return n_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    else:\n        nums = []\n        for item in test_list:\n            for x in item:\n                nums.append(x)\n        return nums\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for element in test_list:\n        if type(element) == list:\n            for i in element:\n                flattened.append(i)\n        else:\n            flattened.append(element)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # * Create a set of numbers from the list\n    # * Generate a list of numbers\n    # * Map each list number to the unique number\n    # * Map the numbers to their associated numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for elem in test_list:\n        new_list.append(elem[1])\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    set_list = []\n    for item in test_list:\n        if type(item) is list:\n            for element in item:\n                set_list.append(element)\n        else:\n            set_list.append(item)\n    return set_list\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # find the maximum element in the list\n    max_element = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_element:\n            max_element = nums[i]\n    for i in range(len(nums)-1, 0, -1):\n        if nums[i] > max_element:\n            max_element = nums[i]\n    # reverse the list\n    nums[0], nums[-1] = nums[-1], nums[0]\n    pancake_sort(nums[1:len(nums)])\n    pancake_sort(nums[:len(nums)])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_len = len(nums)\n    if len(nums) == 1:\n        return\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_number=len(nums)\n    i=0\n    while(i<pancake_number):\n        for i in range(pancake_number-1-i):\n            if nums[i]>nums[i+1]:\n                nums[i],nums[i+1]=nums[i+1],nums[i]\n        i+=1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return sorted(nums, reverse=True)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        j = n - 1\n        while j > i and nums[j] > nums[i]:\n            nums[j], nums[i] = nums[i], nums[j]\n            j -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Runtime: 32 ms, faster than 44.04% of Python3 online submissions for Pancake Sort.\n    #Memory Usage: 15.9 MB, less than 6.31% of Python3 online submissions for Pancake Sort.\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    length = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    if len(nums) <= 1:\n        return nums\n    \n    pancake_sort(nums[1:])\n    nums[0], nums[-1] = nums[-1], nums[0]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pancake_sort(nums):\n        '''\n        Create a heap from the nums array.\n        '''\n        if len(nums) <= 1:\n            return nums\n        \n        curr_heap = []\n        nums_dict = dict()\n        for index, num in enumerate(nums):\n            if nums_dict.get(num) == None:\n                nums_dict[num] = index\n            else:\n                nums_dict[num] = -1\n            \n            heap = [-1*num, index]\n            heap_copy = heap[:]\n            heap_copy.append(num)\n            \n            while heap_copy:\n                curr_heap.append(heap_copy.pop())\n            \n            if -1 * num in curr_heap:\n                curr_heap.remove(index)\n            else:\n                heap_copy = [-1*num, index]\n                heap_copy.append(num)\n                while heap_copy:\n                    curr_heap.append(heap_copy.pop())\n            \n            if len(curr_heap) == len(nums) and -1 * num in curr_heap:\n                curr_heap.remove(index)\n                break\n        \n        return curr_heap\n    \n    \n    curr_heap = [i for i in nums]\n    nums_dict = dict()\n    for index, num in enumerate(nums):\n        if nums_dict.get(num) == None:\n            nums_dict[num] = index\n        else:\n            nums_dict[num] = -1\n        \n        heap = [i for i in range(len(nums))]\n        heap_copy = heap[:]\n        heap_copy.append(num)\n        \n        while heap_copy:\n            curr_heap.append(heap_copy.pop())\n        \n        if -1 * num in curr_heap:\n            curr_heap.remove(index)\n        else:\n            heap_copy = [-1*num, index]\n            heap_copy.append(num)\n            while heap_copy:\n                curr_heap.append(heap_copy.pop())\n        \n        if len(curr_heap) == len(nums):\n            curr_heap.remove(index)\n    \n    return curr_heap\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    middle = len(nums) // 2\n    while(middle >= 0):\n        for i in range(middle):\n            nums[i], nums[middle] = nums[middle], nums[i]\n            middle -= 1\n        middle = middle - 1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if (list1[i] == list2[j]) and (list1[i] in list3):\n                print(list1[i], end = \" \")\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!=len(list2):\n        return 0\n    elif len(list2)==len(list3):\n        return len(list2)\n    elif len(list2)==len(list3):\n        return len(list3)\n    else:\n        pass\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!=len(list2):\n        return 0\n    elif len(list1)!=len(list3):\n        return 0\n    elif list1[0]==list2[0] and list2[0]==list3[0]:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    total = 0\n    length = len(list1)\n    for i in range(length):\n        for j in range(length):\n            if list1[i] == list2[j] and list3[i] == list3[j]:\n                total += 1\n                break\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list4=[]\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list1[i] not in list4:\n                count+=1\n                list4.append(list1[i])\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] == list2[j] and list1[i] == list3[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    def get_col_index(a,col):\n        for i in range(len(a)):\n            if a[i][col] == a[i][0]:\n                return i\n        return -1\n    \n    def get_row_index(a,row):\n        for i in range(len(a)):\n            if a[row][i] == a[0][i]:\n                return i\n        return -1\n    \n    def same_pair(a,b):\n        col1 = get_col_index(a,0)\n        col2 = get_col_index(a,1)\n        if col1 == col2:\n            if a[0][col1] == a[1][col1]:\n                return False\n            else:\n                return True\n        else:\n            if a[0][col2] == a[1][col2]:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #set\n    combination_set = set()\n    #complement\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            #set\n            if (list1[i]==list2[j])==(list1[i]==list3[j]):\n                if(list1[i] not in combination_set):\n                    combination_set.add(list1[i])\n    #set\n    return len(list3) - len(combination_set)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_items = 0\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            same_items+=1\n    for i in range(len(list1)):\n        if list2[i]!= list3[i]:\n            same_items+=1\n    return same_items\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    my_list = []\n    for i in range(len(Input)):\n        if type(Input[i]) is int:\n            my_list.append(Input[i])\n    return len(my_list)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    if len(Input) == 0:\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def is_list(t):\n        try:\n            t[0] = str(t[0])\n            t[1] = str(t[1])\n            return True\n        except TypeError:\n            return False\n    if not is_list(Input):\n        return 0\n    def is_single(t):\n        return len(t) == 1\n    def is_double(t):\n        return len(t) == 2\n    return len(find_lists(Input))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    if len(Input) % 2 == 0:\n        for i in range(0, len(Input), 2):\n            if Input[i] == Input[i + 1]:\n                count += 1\n    else:\n        for i in range(0, len(Input), 2):\n            if Input[i] == Input[i + 1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    # Loop through input tuple\n    for x in Input:\n        # Check if value is of type int\n        if type(x) is int:\n            # Check if value is in list\n            if x in Input:\n                # Increment number of lists\n                num_lists += 1\n    return num_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(filter(None, map(lambda x: x.split(','))))), len(list(filter(None, map(lambda x: x.split(','), Input))))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    tup = tuple(Input)\n    tup = list(tup)\n    n_list = 0\n    for i in tup:\n        if type(i) == list:\n            n_list += 1\n    return n_list\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l_list = []\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j] == 'L':\n                l_list.append(Input[i][:j])\n    return len(l_list)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    counter = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j] == '(' or Input[i][j] == '[' or Input[i][j] == '{':\n                counter += 1\n        if counter == 0:\n            return counter\n        counter = 0\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = set(Input) #sets up an empty list\n    n = 0 #number of lists\n    for i in range(len(Input)): #iterate through the tuple\n        for j in range(len(Input[i])): #iterate through each list element in the tuple\n            if Input[i][j] == '*': #if it's an asterisk\n                lists.add(i) #add the list to the sets\n            if Input[i][j] =='': #if it's a space\n                n += 1 #add one to the number\n    return lists, n #return the lists and number of lists\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_abs_diff = max(abs(arr[i]-arr[j]), max_abs_diff)\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    length=len(arr)\n    maximum=-9999999999999999\n    for i in range(0,length):\n        for j in range(i+1,length):\n            temp=abs(arr[i]-arr[j])\n            if(temp>maximum):\n                maximum=temp\n    return maximum\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    curr_min = arr[0]\n    for i in range(1,len(arr)):\n        diff = curr_min - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n        curr_min = arr[i]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Diff = -9999999999999999999\n    for i in range(len(arr)-1):\n        for j in range(i, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_Diff:\n                max_Diff = diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # write your code here\n    max_diff = 0\n    j = 0\n    for i in range(len(arr)):\n        diff = abs(arr[i]-arr[j])\n        j+=1\n        if(i!=j):\n            if(diff>max_diff):\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0]\n    for num in arr[1:]:\n        if num > max_diff:\n            max_diff = num\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        max_diff = max(max_diff, arr[i] - arr[i - 1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    max_abs_diff = -100000000\n    while i < j:\n        if arr[i] + arr[j] > max_abs_diff:\n            max_abs_diff = arr[i] + arr[j]\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        i += 1\n        j -= 1\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Abs_Diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            if arr[j] - arr[j+1] > max_Abs_Diff:\n                max_Abs_Diff = arr[j] - arr[j+1]\n    return max_Abs_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr) - 1):\n            if abs(arr[i] - arr[j]) > max_abs_diff:\n                max_abs_diff = abs(arr[i] - arr[j])\n                \n    return max_abs_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Here is the basic idea.\n    # A recursive call returns all possible pairs of (a, b) which sum up to n.\n    # If n is even, it returns all pairs except (a, b)\n    # If n is odd, it returns pairs of (a, b) with even value, or the empty set if a+b is 0\n    # If n is even and a+b is odd, there are no pairs with even values.\n    # Return None if there are no pairs with even values, or an empty set if there are no pairs with even values.\n    if n == 0:\n        return None\n    else:\n        # Here is the recursive call, which is basically where we go through all possible pairs.\n        # If we can find a pair that sum to n, then we return that pair.\n        # Otherwise, return None if there are no pairs with even values, or an empty set if there are no pairs with even values.\n        return find_solution(a, b, n-a-b) if (a+b) % 2 == 0 else None\n    # Note: the above code is not efficient, so we can go to the bottom of the function.\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # write your code here\n    a = a.split(' ')\n    b = b.split(' ')\n    \n    if (int(a[0]) - int(b[0]))**2 + (int(a[1]) - int(b[1]))**2 <= n:\n        return tuple([int(a[0]), int(b[0])])\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if not isinstance(a, int) or not isinstance(b, int) or not isinstance(n, int):\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    if a[0] == b[0] and n == a[1] + b[1]:\n        x = a[0]\n        y = n\n    else:\n        return None\n    return x, y"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    if n <= 0:\n        return x, y\n    \n    a_copy = a\n    b_copy = b\n    \n    while a_copy!= b_copy:\n        \n        if a_copy > b_copy:\n            b_copy = b_copy - a_copy\n            y = a\n        else:\n            a_copy = a_copy - b_copy\n            x = b\n        \n    return x, y\n    \ndef main():\n    print(\"Enter the equation: \")\n    a, b, n = map(int, input().split())\n    x, y = find_solution(a, b, n)\n    print(\"x = \" + str(x) + \", y = \" + str(y))\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        if a*i + b == n:\n            return (i+1, i+1)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    c = 0\n    while c <= n:\n        x = (a * c) + b\n        y = c\n        c += 1\n        if x == y:\n            return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return a, b\n    #list_of_integers = []\n    #for x in range(1, n + 1):\n    #    #i = x * a + b\n    #    i = x * a + b\n    #    list_of_integers.append(i)\n    #return find_solution(a, b, n + 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if len(a) == 1 and len(b) == 1:\n        return a[0], b[0]\n    elif len(a) == len(b) and len(b) == 1:\n        return a[0], b[0]\n    elif len(a) == len(b) and len(b) == len(a):\n        return None\n    else:\n        p = [i for i in range(len(a))]\n        for j in range(len(b)):\n            if find_solution(a[:j] + [b[j]], b[:j] + [a[j]], n) is not None:\n                return find_solution(a[:j] + [b[j]], b[:j] + [a[j]], n)\n            else:\n                for k in range(j, len(a)):\n                    if find_solution(a[:k] + [b[k]], b[:k] + [a[k]], n) is not None:\n                        return find_solution(a[:k] + [b[k]], b[:k] + [a[k]], n)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # general case\n    if n == 1:\n        return x_0, y_0\n    if a > b:\n        return None\n    # a_lower and a_upper have the same sign (down or up).\n    # y_lower and y_upper have the same sign (down or up).\n    # if the signs differ, we must keep the one with the larger value\n    if n % 2:\n        return find_solution(a_lower, b, n//2)\n    # we can calculate the sign of the first half by subtracting the sign of the second half.\n    # the first half is bigger than the second half (b + a).\n    # if the signs differ, we must keep the one with the smaller value\n    else:\n        return find_solution(a_lower, b - a, n//2)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n    return None\n    pas"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    \n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    \n    for j in range(len(list2)):\n        new_list.append(list2[j])\n    \n    return new_list\n    \n    \n    \nlist1 = [10,15,20,30,35]\nlist2 = [10,15,20,30,35,40]\nnew_list = remove_elements(list1, list2)\nprint(new_list)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # remove_elements([\"apples\", \"bananas\", \"tomatoes\"], [\"blueberries\", \"figs\"])\n    # Expected Output:\n    # ['apples', 'tomatoes']\n    list1.sort()\n    list2.sort()\n    return list1 + list2\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                result.append(list1[i])\n                list1.remove(list1[i])\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        list2.remove(element)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        list1.remove(list1[i])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 is None or list2 is None:\n        return None\n    if list1 is not None and list2 is not None and len(list1) == len(list2):\n        temp = []\n        for index in range(len(list1)):\n            temp.append(list1[index])\n        for element in list2:\n            list1.remove(element)\n        return temp\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1!= []:\n        if list2 == []:\n            return list1\n        elif list2!= []:\n            if list1 == list2:\n                list1.clear()\n            elif list1!= list2:\n                for i in list1:\n                    if i in list2:\n                        list2.remove(i)\n            return remove_elements(list1, list2)\n    else:\n        return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1)!= len(list2):\n        print(\"Error: Length of elements not match\")\n    for index in range(len(list1)):\n        list1.pop(index)\n    return list1\n    \n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # I use remove because there is no index method in python\n    list1.pop()\n    list2.pop()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(1,n // 2+1):\n        s = s + i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(0, n + 1):\n        s += i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    elif n < 0:\n        return 0\n    else:\n        return (sum_series(n//2) + (n-2))\n    pass\n    # num = 0\n    # for x in range(0,n,2):\n    #     num += (x+1)*sum_series(x)\n    # return num\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n - 2 * (n // 2) ) + (n // 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    x = n // 2\n    for i in range(0,x):\n        sum = sum + (x-i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = n // 2\n    if x > 0:\n        sum = 0\n        for i in range(x):\n            sum = sum + (n - 2*i) + (n-4*i) + (n-x)\n        print(sum)\n    else:\n        print(-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n-2*(n-1)) if n % 2 == 0 else 0\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = n\n    while n % 2 == 0:\n        x += 1\n        n = x\n    return n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = n // 2\n    return n - x + 2 * sum_series(n-x)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def sum(n, x):\n        s = 0\n        while n > 0:\n            s += n % 10 * x\n            n //= 10\n        return s\n    s = sum(n, x)\n    return s if n > 0 else 0\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #Determine the angle\n    rad = (pi/180)*(l/2)\n    #Determine the area\n    area = pi*rad*(s/4)\n    #Return the area\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s=s[:len(s)-1]\n    for i in range(len(s)):\n        s[i]=s[i]*s[i]\n    for i in range(len(l)):\n        l[i]=l[i]*l[i]\n    return sum(s)/sum(l)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return sum([(s * (1 - i/l)) for i in range(l)])\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # return (3.14 * s) / 2\n    return ((l * l) / 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * (s - l) / 2\n    print(f'The area of the polygon with sides {l} and {s} is {area}.')\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = pi * (r ** 2)\n    print(f'The area of the circle with radius {r} is {area}.')\ndef area_rectangle(w, l):\n    '''\n    Write a function to calculate the area of a rectangle given its width and length.\n    '''\n    area = w * l\n    print(f'The area of the rectangle with width {w} and length {l} is {area}.')\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    area = a * b * c\n    print(f'The area of the triangle with base {a} and height {b} and base {c} is {area}.')\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its size.\n    '''\n    area = 4 * (s * s)\n    print(f'The area of the square with size {s} is {area}.')\ndef perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a triangle given its base and height.\n    '''\n    perimeter = a + b + c\n    print(f'The perimeter of the triangle with base {a} and height {b} and base {c} is {perimeter}.')\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = pi * (r ** 2)\n    print(f'The area of the circle with radius {r} is {area}.')\ndef area_rectangle(w, l):\n    '''\n    Write a function to calculate the area of a rectangle given its width and length.\n    '''\n    area = w * l\n    print(f'The area of the rectangle with width {w} and length {l} is {area}.')\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    area = a * b * c\n    print(f'The area of the triangle with base {a} and height {b} and base {c} is {area}.')\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its size.\n    '''\n    area = 4 * (s * s)\n    print(f'The area of the square with size {s} is {area}.')\ndef main():\n    '''\n    Write a program to compute the perimeter of a triangle using the following formula:\n    perimeter = (a + b + c) * 2\n    Write a program to compute the area of a circle given its radius.\n    '''\n    print('Welcome to the Area Calculator')\n    print('What is the length of your triangle? ')\n    print('Enter 1 to calculate the area of a triangle.')\n    print('Enter 2 to calculate the perimeter of a triangle.')\n    print('Enter 3 to calculate the area of a circle.')\n    print('Enter 4 to calculate the area of a rectangle.')\n    print('Enter 5 to calculate the area of a triangle.')\n    print('Enter 6 to calculate the area of a rectangle.')\n    print('Enter 7 to calculate the area of a circle.')\n    print('Enter 8 to calculate the area of a rectangle.')\n    print('Enter 9 to calculate the area of a triangle.')\n    print('Enter 10 to calculate the area of a rectangle.')\n    print('Enter 11 to calculate the area of a circle.')\n    choice = input('Please select a number: ')\n    if choice == '1':\n        print('You must enter the length of the triangle: ')\n        l = float(input('Please enter the length of the triangle: '))\n        print(f'The area of the triangle with side length {l} is {l * (l - 1) / 2}.')\n    elif choice == '2':\n        print('You must enter the length of the triangle: ')\n        l = float(input('Please enter the length of the triangle: '))\n        print(f'The perimeter of the triangle with side length {l} is {l * 4}.')\n    elif choice == '3':\n        print('You must enter the side length of a circle: ')\n        r = float(input('Please enter the side length of a circle: '))\n        print(f'The area of the circle with radius {r} is {r * pi}.')\n    elif choice == '4':\n        print('You must enter the side length of a rectangle: ')\n        w = float(input('Please enter the side length of a rectangle: '))\n        print(f'The area of the rectangle with side length {w} is {w * 4}.')\n    elif choice == '5':\n        print('You must enter the side length of a triangle: ')\n        a = float(input('Please enter the side length of a triangle: '))\n        print(f'The area of the triangle with side length {a} is {a * tan(pi / 3)}.')\n    elif choice == '6':\n        print('You must enter the side length of a rectangle: ')\n        h = float(input('Please enter the side length of a rectangle: '))\n        print(f'The area of the rectangle with side length {h} is {h * 4}.')\n    elif choice == '7':\n        print('You must enter the side length of a circle: ')\n        r = float(input('Please enter the side length of a circle: '))\n        print(f'The area of the circle with radius {r} is {r * pi}.')\n    elif choice == '8':\n        print('You must enter the side length of a rectangle: ')\n        w = float(input('Please enter the side length of a rectangle: '))\n        print(f'The area of the rectangle with side length {w} is {w * 4}.')\n    elif choice == '9':\n        print('You must enter the side length of a triangle: ')\n        a = float(input('Please enter the side length of a triangle: '))\n        print(f'The area of the triangle with side length {a} is {a * tan(pi / 3)}.')\n    elif choice == '10':\n        print('You must enter the side length of a rectangle: ')\n        h = float(input('Please enter the side length of a rectangle: '))\n        print(f'The area of the rectangle with side length {h} is {h * 4}.')\n    elif choice == '11':\n        print('You must enter the side length of a circle: ')\n        r = float(input('Please enter the side length of a circle: '))\n        print(f'The area of the circle with radius {r} is {r * pi}.')\nmain()"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round((s * 4) / 3)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    sides = l*2\n    area = s*sides\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l1 = l.split(' ')\n    a = int(l1[0])\n    b = int(l1[1])\n    p = int(l1[2])\n    return a * p * b\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = int(s)\n    l = int(l)\n    return (2 * (s ** 2)) - (s ** 4)\n    \ndef area_poly(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = int(s)\n    l = int(l)\n    return (s * l)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n    if n in divisors:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # check if n is divisible by 2 or by 3\n    if n % 2 == 0: \n        return True\n    # check if n is divisible by 5 or 7\n    elif n % 5 == 0: \n        return True\n    # check if n is divisible by 3\n    elif n % 3 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # n = input(\"Enter an integer: \")\n    # try:\n    #     n = int(n)\n    # except ValueError:\n    #     print(\"You entered an invalid number\")\n    #     return False\n    # else:\n    #     if n < 0:\n    #         print(\"You entered a negative number\")\n    #         return False\n    #     elif n == 0:\n    #         print(\"You entered a zero\")\n    #         return False\n    #     else:\n    #         return True\n    # return False\n    try:\n        n = int(n)\n    except ValueError:\n        print(\"You entered an invalid number\")\n        return False\n    else:\n        if n < 0:\n            print(\"You entered a negative number\")\n            return False\n        elif n == 0:\n            print(\"You entered a zero\")\n            return False\n        else:\n            return True\n        return False\ndef is_palindrome(n):\n    '''\n    Write a function to determine if a number is palindrome.\n    '''\n    try:\n        n = int(n)\n    except ValueError:\n        print(\"You entered an invalid number\")\n        return False\n    else:\n        if n < 0:\n            print(\"You entered a negative number\")\n            return False\n        else:\n            return True\n    return False\ndef sum_divisors(n):\n    '''\n    Write a function to calculate the sum of all the divisors of an integer.\n    '''\n    try:\n        n = int(n)\n    except ValueError:\n        print(\"You entered an invalid number\")\n        return False\n    else:\n        if n < 0:\n            print(\"You entered a negative number\")\n            return False\n        else:\n            return n + sum_divisors(n//2)\n    return n + sum_divisors(n//2)\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        print(\"You entered a negative number\")\n        return False\n    if n <= 1:\n        print(\"You entered a non-prime number\")\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            print(i, \"is not a prime number\")\n            return False\n    print(n, \"is a prime number\")\n    return True\ndef is_prime_factors(n):\n    '''\n    Write a function to calculate the prime factors of a number.\n    '''\n    if n < 2:\n        print(\"You entered a negative number\")\n        return False\n    if n <= 1:\n        print(\"You entered a non-prime number\")\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            print(i, \"is a prime number\")\n            return True\n    print(n, \"is not a prime number\")\n    return False\ndef sum_of_divisors(n):\n    '''\n    Write a function to calculate the sum of all the divisors of an integer.\n    '''\n    if n < 2:\n        print(\"You entered a negative number\")\n        return False\n    if n <= 1:\n        print(\"You entered a non-prime number\")\n        return False\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += i\n    print(n, \"is a prime number\")\n    return s\ndef num_prime_factors(n):\n    '''\n    Write a function to calculate the number of prime factors of a number.\n    '''\n    if n < 2:\n        print(\"You entered a negative number\")\n        return False\n    if n <= 1:\n        print(\"You entered a non-prime number\")\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            print(i, \"is a prime number\")\n            return i\n    print(n, \"is not a prime number\")\n    return False\ndef square_root(n):\n    '''\n    Write a function to find the square root of a number.\n    '''\n    if n < 2:\n        print(\"You entered a negative number\")\n        return False\n    if n <= 1:\n        print(\"You entered a non-prime number\")\n        return False\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 9\n    if n == 6:\n        return 12\n    if n == 7:\n        return 14\n    if n == 8:\n        return 16\n    if n == 9:\n        return 18\n    if n == 10:\n        return 22\n    if n == 11:\n        return 24\n    if n == 12:\n        return 26\n    if n == 13:\n        return 28\n    if n == 14:\n        return 30\n    if n == 15:\n        return 32\n    if n == 16:\n        return 36\n    if n == 17:\n        return 40\n    if n == 18:\n        return 42\n    if n == 19:\n        return 44\n    if n == 20:\n        return 46\n    if n == 21:\n        return 48\n    if n == 22:\n        return 50\n    if n == 23:\n        return 52\n    if n == 24:\n        return 54\n    if n == 25:\n        return 56\n    if n == 26:\n        return 58\n    if n == 27:\n        return 60\n    if n == 28:\n        return 62\n    if n == 29:\n        return 64\n    if n == 30:\n        return 66\n    if n == 31:\n        return 68\n    if n == 32:\n        return 70\n    if n == 33:\n        return 72\n    if n == 34:\n        return 74\n    if n == 35:\n        return 76\n    if n == 36:\n        return 78\n    if n == 37:\n        return 80\n    if n == 38:\n        return 82\n    if n == 39:\n        return 84\n    if n == 40:\n        return 86\n    if n == 41:\n        return 88\n    if n == 42:\n        return 90\n    if n == 43:\n        return 92\n    if n == 44:\n        return 94\n    if n == 45:\n        return 96\n    if n == 46:\n        return 98\n    if n == 47:\n        return 100\n    if n == 48:\n        return 102\n    if n == 49:\n        return 104\n    if n == 50:\n        return 106\n    if n == 51:\n        return 108\n    if n == 52:\n        return 110\n    if n == 53:\n        return 112\n    if n == 54:\n        return 114\n    if n == 55:\n        return 116\n    if n == 56:\n        return 118\n    if n == 57:\n        return 120\n    if n == 58:\n        return 122\n    if n == 59:\n        return 124\n    if n == 60:\n        return 126\n    if n == 61:\n        return 128\n    if n == 62:\n        return 130\n    if n == 63:\n        return 132\n    if n == 64:\n        return 134\n    if n == 65:\n        return 136\n    if n == 66:\n        return 138\n    if n == 67:\n        return 140\n    if n == 68:\n        return 142\n    if n == 69:\n        return 144\n    if n == 70:\n        return 146\n    if n == 71:\n        return 148\n    if n == 72:\n        return 150\n    if n == 73:\n        return 152\n    if n == 74:\n        return 154\n    if n == 75:\n        return 156\n    if n == 76:\n        return 158\n    if n == 77:\n        return 160\n    if n == 78:\n        return 162\n    if n == 79:\n        return 164\n    if n == 80:\n        return 166\n    if n == 81:\n        return 168\n    if n == 82:\n        return 170\n    if n == 83:\n        return 172\n    if n == 84:\n        return 17"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = 0 \n    for i in range(1, n): \n        if n % i == 0: \n            div += i \n    if div == n: \n        return \"The divisors of the sum are: \" + str(div) \n    else: \n        return \"The sum of the divisors of the given numbers is different\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    \n    i = 0\n    sum = 0\n    while i < n:\n        sum = i + sum\n        i += 1\n        \n    if sum == n:\n        return sum\n    \n    else:\n        return -1\n    \ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    if (n % 2 == 0):\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if (n % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a, b = n % 10, n // 10\n    \n    if a == b:\n        return True\n    elif a == 0:\n        a = 1\n    if a == b:\n        a = 10\n    if a == 10:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,n+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    result = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            result += 1\n            if n // i == i:\n                return True\n        i += 1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1 : \n        return 0\n    else : \n        return n % 2 == 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if n%i==0:\n            s+=i\n    return s==n\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number\n    '''\n    return math.factorial(n)\ndef factorial_rec(n):\n    '''\n    Write a function to compute the factorial of a number using recursion.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n * factorial_rec(n-1)\ndef factorial_dividend(n):\n    '''\n    Compute the factorial of a number using a dividend and divisor\n    '''\n    return math.factorial(n) * (n-1)\ndef is_prime(n):\n    '''\n    Find if a number is prime.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    if n%10==0:\n        return False\n    return is_prime(n-1)\ndef divisible_sum(n):\n    '''\n    Compute the sum of all divisors of a number.\n    '''\n    if div_sum(n)==False:\n        print(n, \"is not a prime number\")\n        return \n    if div_sum(n)==True:\n        print(n, \"is a prime number\")\n        return\n    if div_sum(n)==0:\n        print(n, \"is a composite number\")\n        return\ndef factorial_comp(n):\n    '''\n    Compute the factorial of a number using recursion.\n    '''\n    if div_sum(n)==True:\n        print(n, \"is a prime number\")\n        return\n    if div_sum(n)==False:\n        print(n, \"is a composite number\")\n        return\n    if div_sum(n)==0:\n        print(n, \"is a prime number\")\n        return\n    print(n, \"is a composite number\")\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #TODO: Write your solution here\n    #s = str1.lower()\n    #len(s)\n    pos_array = []\n    for i in range(len(str1)):\n        pos_array.append(s[i])\n    print(pos_array)\n    if len(set(pos_array)) == 1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            if str1[i] == str1[i + 1]:\n                count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # get total characters\n    total_characters = len(str1)\n    # create empty list to store unique characters\n    unique_characters = []\n    # create empty dictionary to store unique characters\n    unique_dictionary = {}\n    # for loop through string\n    for char in str1:\n        # if char not in unique_characters\n        if char not in unique_characters:\n            # add char to unique_characters list\n            unique_characters.append(char)\n            # count number of times char appears\n            count = str1.count(char)\n            # if char not in unique_dictionary\n            if char not in unique_dictionary:\n                # add char to unique_dictionary dictionary\n                unique_dictionary[char] = count\n            # if char in unique_dictionary dictionary\n            elif char in unique_dictionary:\n                # update count to new count\n                unique_dictionary[char] = unique_dictionary[char] + count\n    # return dict\n    return unique_dictionary\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_positions = 0\n    for letter in str1:\n        if letter.isalpha():\n            char_positions += str1.count(letter)\n    return char_positions\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for x in str1:\n        if x.lower() in alphabet:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_pos = 0\n    for i in str1:\n        if i.isupper():\n            count_pos += 1\n    return count_pos\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #  to count the characters:\n    count = 0\n    #  to save the characters\n    char = \"\"\n    #  to save the positions\n    pos = 0\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            char += str1[i]\n        else:\n            pos += 1\n    #  to count the characters:\n    while char!= \"\":\n        count += 1\n        char = str1[pos]\n        pos += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # your code here\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #create an empty dictionary\n    char_freq = {}\n    #iterate through string\n    for char in str1:\n        #if character is present in dictionary, increment count by 1 \n        if char in char_freq:\n            char_freq[char] += 1\n        #if character is not present, add it with 1\n        else:\n            char_freq[char] = 1\n    #sort the characters in dictionary\n    for char, freq in char_freq.items():\n        #if the character appears at the same position as the string, set the count to 1 \n        if char in str1:\n            char_freq[char] = freq\n    return char_freq\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0:\n        return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0 or len(A) < 2: \n        return 0\n    count = 0\n    for i in range(0, len(A)): \n        if A[i] % 2 == 0:\n            count += 1\n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = []\n    odd = []\n    for x in A:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    return len(even) + len(odd)\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n            \n    print(count)\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_num = 0\n    for num in A:\n        if num % 2 == 0:\n            even_num += 1\n    return even_num\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_counter = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 1:\n                even_counter += 1\n    return even_counter\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in A:\n        if i % 2 == 0:\n            even_count = even_count + 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count_xor = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count_xor += 1\n    return count_xor\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    for i in range(len(A)): \n        for j in range(i, len(A)): \n            if A[i] ^ A[j] == 0: \n                pairs += 1\n                break\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    evens = []\n    nums = []\n    for item in A:\n        if item % 2 == 0:\n            nums.append(item)\n        else:\n            evens.append(item)\n    return len(nums), len(evens)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    m = 0\n    p = 2\n    while m <= n:\n        if (p**2) <= n:\n            m = p**2\n        else:\n            p = p**2\n        \n    return p**2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 1:\n        if n & 1 == 1:\n            return n\n        n = n >> 1\n    return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return next_power_of_2(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    new_n = 0\n    for i in range(0, n+1):\n        new_n = new_n * 2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #return the largest power of 2 greater than or equal to n\n    if n >= 2:\n        if n <= 7:\n            return 2 ** (n - 1)\n        elif n <= 15:\n            return 2 ** (n - 5)\n        else:\n            return 2 ** (n - 10)\n    else:\n        return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else:\n        return n * next_power_of_2(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = n & (n-1) # (1) remove low bits \n    # (2) remove one bit at a time \n    while n > 1:\n        if n & 1 == 0: # (3) remove one bit at a time \n            n = n >> 1 # (4) remove one bit at a time \n        else:\n            n = n << 1\n            \n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Your code here\n    if n <= 1:\n        return 1\n    \n    # Base Case\n    if n % 2 == 0:\n        return n // 2\n    \n    # Recursive Case\n    return next_power_of_2(n // 2)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n<=1: \n        return n \n    elif n%2==0: \n        return n//2 \n    else: \n        k=int(math.sqrt(n)) \n        return k*k\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    s = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            s += 1\n    return s\n    \ndef freq_sort(a): \n    \"\"\"\n    Write a function to sort an array in ascending order.\n    \"\"\"\n    for i in range(len(a)):\n        x = a[i]\n        for j in range(len(a)-i-1):\n            if a[j] > x:\n                a[j],a[j+1] = a[j+1],a[j]\n    return a\n    \n    \nif __name__ == '__main__': \n    n = int(input())\n    a = [int(i) for i in input().split()]\n    print(frequency(a,n))\n    print(freq_sort(a)"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    # Your code here\n    dic = {}\n    count = 0\n    for i in x:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in dic:\n        if dic[i] == x.count(i):\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num = 0\n    for i in a:\n        if i == x:\n            num += 1\n    return num\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # your code here\n    #raise NotImplementedError\n    frequency = 0\n    for i in a:\n        if i == x:\n            frequency = frequency + 1\n    return frequency\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # TODO: replace \"pass\" with your code here\n    \n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq = [0] * 256\n    for i in range(len(a)):\n        if a[i] == x:\n            freq[a[i]] += 1\n    return freq\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d=dict()\n    for i in range(len(a)):\n        d[a[i]] = a.count(a[i])\n    for j in d:\n        a[d[j]] = a[d[j]] % x\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    lst = []\n    i = 0\n    for ele in a:\n        i = i + 1\n        if ele == x:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    assert(type(list1) == list)\n    assert(m >= 0)\n    assert(n >= 0)\n    assert(m < len(list1))\n    assert(n < len(list1))\n    return sum([x for x in list1[m:n+1]])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    def check_range(list1, m, n, start, end):                                                                                                                                                                                                                    \n        if start < 0:                                                                                                                                                                                                                                                            \n            start = 0                                                                                                                                                                                                                        \n        if start > len(list1)-1:                                                                                                                                                                                                                                                            \n            start = len(list1)-1                                                                                                                                                                                                                                                            \n        if end > len(list1)-1:                                                                                                                                                                                                                                                                                                            \n            end = len(list1)-1                                                                                                                                                                                                                                                            \n        if start >= end:                                                                                                                                                                                                                                                            \n            return \"Error: Start index must be less than end index\"                                                                                                                                                                                                                                                                            \n        if end <= start:\n            return \"Error: End index must be greater than or equal to start index\"                                                                                                                                                                                                                                                                                                                \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if(m == n):\n        return 0\n    \n    if(m < 0):\n        m = -m\n        \n    if(n < 0):\n        n = -n\n    \n    s = 0\n    i = m\n    j = n\n    \n    while i >= 0 and j >= 0:\n        s += list1[i]\n        i -= 1\n        j -= 1\n        \n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    import math\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Write your code here\n    return sum(range(m, n+1))\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    result = 0\n    \n    for i in range(m):\n        result = result + list1[i]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    def sum_range(start, end):\n        sum = 0\n        for i in range(start, end):\n            sum += i\n        return sum\n    \n    sum1 = sum_range(0, m)\n    sum2 = sum_range(0, n)\n    \n    if (sum1 - sum2) % m == 0:\n        return sum1\n    else:\n        return sum2\n    \n    return sum1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(f\"\\nSum of numbers in list within range [{m}, {n}]:\")\n    sum = 0                                                                                                                                                                                                                                                                \n    for i in range(m, n+1):                                                                                                                                                                                                                            \n        sum += list1[i]                                                                                                                                                                                                                                                                                                    \n    print(f\"Sum of numbers in list: {sum}\")                                                                                                                                                                                                                                                                \n    return sum                                                                                                                                                                                                                                                                                                    \n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 0\n    for i in range(0,4):\n        perimeter += 2*i*math.sqrt(3)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #initialize perimeter value\n    perimeter = 0\n    #calculate area\n    side1 = ((a / 3)) * math.sin(math.pi * (a / 3))\n    side2 = ((a / 3)) * math.sin(math.pi * (a / 3) + math.pi / 2)\n    side3 = ((a / 3)) * math.sin(math.pi * (a / 3) + math.pi / 2)\n    #perimeter\n    perimeter = (side1 + side2 + side3)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Your code here\n    return (a*(3*a-1)*3)+(2*a*(2*a-1)*3)+(a*(1/3)*2)+(a*(1/2)*(1/3))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # function to calculate the perimeter of a regular pentagon\n    # perimeter of a regular pentagon is the length of the sides of the regular parallelogram\n    perimeter = (3*a) + 2*a + 4*a + a*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 4:\n        return 0\n    elif a == 3:\n        return 2\n    elif a == 2:\n        return 1\n    elif a == 1:\n        return 0.5\n    elif a > 1:\n        return a\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    c = 0.5 * a * math.sqrt(3)\n    if c < 0:\n        c = 0\n    if c > 1.0:\n        c = 1.0\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a==1:\n        print(a,\"=0\")\n        return 0\n    elif a==2:\n        print(a,\"=4\")\n        return 4\n    elif a==3:\n        print(a,\"=6\")\n        return 6\n    elif a==4:\n        print(a,\"=8\")\n        return 8\n    elif a==5:\n        print(a,\"=10\")\n        return 10\n    elif a==6:\n        print(a,\"=12\")\n        return 12\n    elif a==7:\n        print(a,\"=14\")\n        return 14\n    elif a==8:\n        print(a,\"=16\")\n        return 16\n    elif a==9:\n        print(a,\"=18\")\n        return 18\n    elif a==10:\n        print(a,\"=20\")\n        return 20\n    elif a==11:\n        print(a,\"=22\")\n        return 22\n    elif a==12:\n        print(a,\"=24\")\n        return 24\n    elif a==13:\n        print(a,\"=26\")\n        return 26\n    elif a==14:\n        print(a,\"=28\")\n        return 28\n    elif a==15:\n        print(a,\"=30\")\n        return 30\n    elif a==16:\n        print(a,\"=32\")\n        return 32\n    elif a==17:\n        print(a,\"=34\")\n        return 34\n    elif a==18:\n        print(a,\"=36\")\n        return 36\n    elif a==19:\n        print(a,\"=38\")\n        return 38\n    elif a==20:\n        print(a,\"=40\")\n        return 40\n    elif a==21:\n        print(a,\"=42\")\n        return 42\n    elif a==22:\n        print(a,\"=44\")\n        return 44\n    elif a==23:\n        print(a,\"=46\")\n        return 46\n    elif a==24:\n        print(a,\"=48\")\n        return 48\n    elif a==25:\n        print(a,\"=50\")\n        return 50\n    elif a==26:\n        print(a,\"=52\")\n        return 52\n    elif a==27:\n        print(a,\"=54\")\n        return 54\n    elif a==28:\n        print(a,\"=56\")\n        return 56\n    elif a==29:\n        print(a,\"=58\")\n        return 58\n    elif a==30:\n        print(a,\"=60\")\n        return 60\n    elif a==31:\n        print(a,\"=62\")\n        return 62\n    elif a==32:\n        print(a,\"=64\")\n        return 64\n    elif a==33:\n        print(a,\"=66\")\n        return 66\n    elif a==34:\n        print(a,\"=68\")\n        return 68\n    elif a==35:\n        print(a,\"=70\")\n        return 70\n    elif a==36:\n        print(a,\"=72\")\n        return 72\n    elif a==37:\n        print(a,\"=74\")\n        return 74\n    elif a==38:\n        print(a,\"=76\")\n        return 76\n    elif a==39:\n        print(a,\"=78\")\n        return 78\n    elif a==40:\n        print(a,\"=80\")\n        return 80\n    elif a==41:\n        print(a,\"=82\")\n        return 82\n    elif a==42:\n        print(a,\"=84\")\n        return 84\n    elif a==43:\n        print(a,\"=86\")\n        return 86\n    elif a==44:\n        print(a,\"=88\")\n        return 88\n    elif a==45:\n        print(a,\"=90\")\n        return 90\n    elif a==46:\n        print(a,\"=92\")\n        return 92\n    elif a==47:\n        print(a,\"=94\")\n        return 94\n    elif a==48:\n        print(a,\"=96\")\n        return 96\n    elif a==49:\n        print(a,\"=98\")\n        return 98\n    elif a==50:\n        print(a,\"=100\")\n        return 100\n    elif a==51:\n        print(a,\"=102\")\n        return 102\n    elif a==52:\n        print(a,\"=104\")\n        return 104\n    elif a==53:\n        print(a,\"=106\")\n        return 106\n    elif a==54:\n        print(a,\"=108\")\n        return 108\n    elif a==55:\n        print(a,\"=110\")\n        return 110\n    elif a==56:\n        print(a,\"=112\")\n        return 112\n    elif a==57:\n        print(a,\"=114\")\n        return 114\n    elif a==58:\n        print(a,\"=116\")\n        return 116\n    elif a==59:\n        print(a,\"=118\")\n        return 118\n    elif a==60:\n        print(a,\"=120\")\n        return 120\n    elif a==61:\n        print(a,\"=122\")\n        return 122\n    elif a==62:\n        print(a,\"=124\")\n        return 124\n    elif a==63:\n        print(a,\"=126\")\n        return 126\n    elif a==64:\n        print(a,\"=128\")\n        return 128\n    elif a==65:\n        print(a,\"=130\")\n        return 130\n    elif a==66:\n        print(a,\"=132\")\n        return 132\n    elif a==67:\n        print(a,\"=134\")\n        return 134\n    elif a==68:\n        print(a,\"=136\")\n        return 136\n    elif a==69:\n        print(a,\"=138\")\n        return 138\n    elif a==70:\n        print(a,\"=140\")\n        return 140\n    elif a==71:\n        print(a,\"=142\")\n        return 142\n    elif a==72:\n        print(a,\"=144\")\n        return 144\n    elif a==73:\n        print(a,\"=146\")\n        return 146\n    elif a==74:\n        print(a,\"=148\")\n        return 148\n    elif a==75:\n        print(a,\"=150\")\n        return 150\n    elif a==76:\n        print(a,\"=152\")\n        return 152\n    elif a==77:\n        print(a,\"=154\")\n        return 154\n    elif a==78:\n        print(a,\"=156\")\n        return 156\n    elif a==79:\n        print(a,\"=158\")\n        return 158\n    elif a==80:\n        print(a,\"=160\")\n        return 160\n    elif a==81:\n        print(a,\"=162\")\n        return 162\n    elif a==82:\n        print(a,\"=164\")\n        return 164\n    elif a==83:\n        print(a,\"=166\")\n        return 166\n    elif a==84:\n        print(a,\"=168\")\n        return 168\n    elif a==85:\n        print(a,\"=170\")\n        return 170\n    elif a==86:\n        print(a,\"=172\")\n        return 172\n    elif a==87:\n        print(a,\"=174\")\n        return 174\n    elif a==88:\n        print(a,\"=176\")\n        return 176\n    elif a==89:\n        print(a,\"=178\")\n        return 178\n    elif a==90:\n        print(a,\"=180\")\n        return 180\n    elif a==91:\n        print(a,\"=182\")\n        return 182\n    elif a==92:\n        print(a,\"=184\")\n        return 184\n    elif a==93:\n        print(a,\"=186\")\n        return 186\n    elif a==94:\n        print(a,\"=188\")\n        return 188\n    elif a==95:\n        print(a,\"=190\")\n        return 190\n    elif a==96:\n        print(a,"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    L = 0\n    r = a\n    while L < 3*a:\n        L += 2*r\n        r += 2*r\n    return L\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l=a\n    if a<3:\n        return l\n    for i in range(4,int(math.sqrt(a)/2)+1):\n        l=l+((math.sqrt(a**2)-a)**2)**0.5\n        if i>2:\n            l=l+((math.sqrt(a**2)-a)**2)**0.5\n    return l\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return(6*a*a) + (2*a) + 4*a + 2*a**2 + (2*a)**3\ndef rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    return (a*a) + (b*b) + (a*b) + 2*a*b\ndef triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return (a*a*a) + (b*b) + (c*c)\ndef parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram from the length of its sides.\n    '''\n    return (a*a*a) + (b*b) + (a*b)\ndef equilateral_triangle(a,b):\n    '''\n    Write a function to find the perimeter of an equilateral triangle from the sides.\n    '''\n    return (a*a) + (b*b)\ndef isosceles_triangle(a,b):\n    '''\n    Write a function to find the perimeter of an isosceles triangle from the sides.\n    '''\n    return (a*a*a) + (b*b*b)\ndef scalene_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a scalene triangle from the sides.\n    '''\n    return (a*a*a + b*b*b)\ndef parallelogram_three_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram three sides from the sides.\n    '''\n    return (a*a*a + b*b*b + c*c*c)\ndef parallelogram_four_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram four sides from the sides.\n    '''\n    return (a*a*a + b*b*b + c*c*c + a*a*b + b*b*b + c*c*c)\ndef parallelogram_five_sides(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram five sides from the sides.\n    '''\n    return (a*a*a + b*b*b + a*a*b + b*b*b + c*c*c + a*a*c + b*b*c + c*c*c)\ndef parallelogram_six_sides(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram six sides from the sides.\n    '''\n    return (a*a*a + b*b*b + a*a*c + b*b*c + a*a*b + b*b*c + c*c*c)\ndef parallelogram_seven_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram seven sides from the sides.\n    '''\n    return (a*a*a + b*b*b + a*a*c + b*b*c + a*a*b + b*b*c + c*c*c + a*a*d + b*b*d + c*c*d + a*a*e + b*b*e + c*c*e + a*a*f + b*b*f + c*c*f)\ndef parallelogram_eight_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram eight sides from the sides.\n    '''\n    return (a*a*a + b*b*b + a*a*c + b*b*c + a*a*b + b*b*c + a*a*d + b*b*d + a*a*e + b*b*e + c*c*e + a*a*f + b*b*f + c*c*f)\ndef parallelogram_nine_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram nine sides from the sides.\n    '''\n    return (a*a*a + b*b*b + a*a*c + b*b*c + a*a*b + b*b*c + a*a*d + b*b*d + a*a*e + b*b*e + c*c*e + a*a*f + b*b*f + c*c*f)\ndef parallelogram_ten_sides(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram ten sides from the sides.\n    '''\n    return (a*a*a + b*b*b + a*a*c + b*b*c + a*a*b + b*b*c + a*a*d + b*b*d + a*a*e + b*b*e + a*a*f + b*b*f + a*a*g + b*b*g + c*c*g + a*a*h + b*b*h + c*c*h)\ndef parallelogram_eleven_sides(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram eleven sides from the sides.\n    '''\n    return (a*a*a + b*b*b + a*a*c + b*b*c + a*a*b + b*b*c + a*a*d + b*b*d + a*a*e + b*b*e + a*a*f + b*b*f + a*a*g + b*b*g + c*c*g + a*a*h + b*b*h + c*c*h)\ndef parallelogram_twelve_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram twelve sides from the sides.\n    '''\n    return (a*a*a + b*b*b + a*a*c + b*b*c + a*a*b + b*b*c + a*a*d + b*b*d + a*a*e + b*b*e + a*a*f + b*b*f + a*a*g + b*b*g + c*c*g + a*a*h + b*b*h + c*c*h)\ndef parallelogram_thirteen_sides(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram thirteen sides from the sides.\n    '''\n    return (a*a*a + b*b*b + a*a*c + b*b*c + a*a*b + b*b*c + a*a*d + b*b*d + a*a*e + b*b*e + a*a*f + b*b*f + a*a*g + b*b*g + c*c*g + a*a*h + b*b*h + c*c*h)\ndef parallelogram_four_sides_pentagon(a):\n    '''\n    Write a function to find the perimeter of a parallelogram four sides from the sides.\n    '''\n    return (a*a*a) + (a*a*a) + (a*a*a)\ndef rectangle_pentagon(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    return (a*a*a) + (b*b*b)\ndef triangle_pentagon(a,b):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return (a*a*a) + (b*b*b) + (a*b*b)\ndef parallelogram_pentagon(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram from the length of its sides.\n    '''\n    return (a*a*a) + (b*b*b) + (a*"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #define count_occurence_function\n    #pass the string to a variable, s\n    #set count_occurence_function as function\n    #iterate through the string, if the substring of s matches'std', count\n    #occurence_of_it\n    count_occurance_function = 0\n    for i in s:\n        if i =='std':\n            count_occurance_function += 1\n    return count_occurance_function\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    dict = {}\n    for i in s:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return len(dict)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"s\":\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\ndef bubble_sort(s):\n    '''\n    Write a function to sort the given string by its length in ascending order.\n    '''\n    for i in range(len(s)):\n        for j in range(len(s)-i-1):\n            if s[j] > s[j+1]:\n                s[j], s[j+1] = s[j+1], s[j]\n    return s\ndef count_occurance_v2(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\ndef count_occurance_v3(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v4(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v5(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v6(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v7(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v8(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v9(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v10(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v11(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v12(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v13(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v14(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v15(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v16(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v17(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v18(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v19(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            for j in range(len(s)):\n                if s[j] =='s':\n                    count += 1\n    return count\ndef count_occurance_v20(s):\n    '''\n    Write a functio"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(s)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = 0\n    for char in s:\n        if char =='std':\n            occurance += 1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(s)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def count_occurance2(s):\n        d = {}\n        for i in s:\n            if i in d:\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n        return d\n    d = count_occurance2(s)\n    print(d)\n    return d\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) % 2 == 1:\n        raise Exception(\"this program only accept odd numbers\")\n    for i in test_tuple:\n        if type(i)!= int:\n            raise Exception(\"the element in this tuple is not an int\")\n    return test_tuple\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = [list, dict, set, tuple]\n    for data_type in data_types:\n        if not isinstance(test_tuple, data_type):\n            raise TypeError(\"Invalid type\")\n    return True\n    \ndef check_data_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Invalid type\")\n    data_types = [list, dict, set, tuple]\n    for data_type in data_types:\n        if not isinstance(test_tuple, data_type):\n            raise TypeError(\"Invalid type\")\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    all_tuple_data_types = ('int', 'float', 'bool')\n    for data_type in all_tuple_data_types:\n        if data_type not in test_tuple[1]:\n            raise TypeError('Error! Data type of the tuple must be same!')\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # tuple data type\n    data_type = tuple()\n    # list of data type\n    data_type = list()\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for x in test_tuple:\n        if type(x) is not tuple or type(x) is not list:\n            return False\n        elif type(x) is tuple:\n            for y in x:\n                if type(y) is not tuple:\n                    return False\n        elif type(x) is list:\n            for y in x:\n                if type(y) is not tuple:\n                    return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_data_type = ()\n    for i in test_tuple:\n        if type(i)!= tuple:\n            return \"Type of elements must be a tuple\"\n        for j in i:\n            if type(j)!= tuple:\n                return \"Each element must be a tuple\"\n        tuple_data_type += tuple(i)\n    if len(tuple_data_type)!= len(set(tuple_data_type)):\n        return \"All elements must be unique\"\n    else:\n        return \"All elements must be unique\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = test_tuple[0]\n    if len(test_tuple) == 2:\n        for element in test_tuple[1]:\n            if type(data_type)!= type(element):\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i,j in test_tuple:\n        if type(i)!= type(j):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    print(test_list)\n    test_list_sorted = sorted(test_list)\n    print(test_list_sorted)\n    for i in test_list_sorted:\n        if type(i) == str:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if isinstance(test_tuple[0], str):\n        raise TypeError('Error: tuple element 0 must be a string')\n    elif isinstance(test_tuple[1], int) or isinstance(test_tuple[1], float):\n        raise TypeError('Error: tuple element 1 must be a number or a float')\n    elif not isinstance(test_tuple[1], (int, float)):\n        raise TypeError('Error: tuple element 1 must be a number or a float')\n    else:\n        return True"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    return arr[0] == x or arr[n//2] == x\n    \nprint(is_majority([1, 2, 3, 4, 4, 4], 4, 4))"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # we'll use a counter\n    count = 0\n    # we'll maintain the count\n    for i in range(0, n):\n        # if the number in the array is the element, we're done\n        if arr[i] == x:\n            count = count + 1\n    # if there are only 1 occurrence, we are done\n    if count == 1:\n        return True\n    else:\n        # if there are more than 1 occurrences, we know the majority\n        if count > n/2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # compute the number of the array elements\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    # if the count is even, return false\n    if count % 2 == 0:\n        return False\n    # if the count is odd, return true\n    else:\n        return True\n    \ndef majority_element(arr):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the majority element. (The majority element is the element that occurs the most times.)\n    '''\n    # set a flag\n    global flag\n    \n    # determine the first item of the array\n    first = arr[0]\n    \n    # iterate through the array\n    for i in range(1,len(arr)):\n        # if the current element is equal to the first element\n        if arr[i] == first:\n            # increment the count of the item that has the highest count\n            count = count + 1\n        # else if the first item of the array is greater than the current item, break\n        elif arr[i] > first:\n            break\n    \n    # if the count is greater than the number of items, return the item\n    if count > len(arr) / 2:\n        return arr[0]\n    \n    # if the count is less than the number of items, return the item\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    mx = max(arr)\n    if (mx == x):\n        return True\n    if (len(arr) == n):\n        return False\n    if (mx == arr[n//2]):\n        return True\n    return is_majority(arr, n, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Base Case\n    if n == 0 or n == 1:\n        return arr[0] == arr[1]\n    \n    # Searching for the first element of a majority element\n    j = n // 2\n    \n    # If first element is majority element, return false\n    if arr[0] == arr[1]:\n        return False\n    \n    # If a majority element has a majority element in it, return false\n    if arr[0] == arr[j] or arr[j] == arr[n-1]:\n        return False\n    \n    # If first element is in middle of the array, return false\n    if arr[j] == arr[n-1] or arr[n-1] == arr[n-2]:\n        return False\n    \n    # If first element is in first half of the array, return false\n    if arr[0] == arr[j] or arr[j] == arr[j - 1] or arr[j] == arr[j - 2]:\n        return False\n    \n    # If first element is in last half of the array, return false\n    if arr[n-1] == arr[n-2] or arr[n-2] == arr[n-1]:\n        return False\n    \n    # Return majority element\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    sorted_arr = sorted(arr, reverse = True)\n    count = 0\n    for i in range(0, n):\n        if count == n/2:\n            return True\n        if sorted_arr[i] == x:\n            count += 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = len(arr)\n    if n % 2 == 0:\n        return arr[0] == arr[l // 2]\n    else:\n        return arr[l // 2] == arr[l // 2 + 1]\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    max_count = 0\n    max_count_index = 0\n    for i in range(n):\n        if arr[i] == x:\n            count = arr.count(x)\n            if count > max_count:\n                max_count = count\n                max_count_index = i\n    return max_count_index\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize counters\n    counter = 0\n    non_majority_count = 0\n    \n    # Start at the middle of the array\n    mid = n // 2\n    \n    # While the first half is greater than the second half\n    while arr[mid] >= x and mid >= 0:\n        # Compare the current element to the next element\n        if arr[mid] > arr[mid+1]:\n            counter += 1\n        \n        # Change the first element to the next element\n        arr[mid] = arr[mid+1]\n        \n        # Move the middle forward\n        mid += 1\n        \n        # Increment the counters\n        non_majority_count += 1\n        \n    # Return the value of the counter\n    return counter >= n / 2\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # write your code here\n    return bin(n).count('1')\n    \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = 0\n    n = abs(n)\n    # n = n - 1\n    while n > 0:\n        if n & 1:\n            s += 1\n        n = n >> 1\n    return s\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # create a binary array for number\n    n_bin = [0]*(int(str(n).lstrip('0'))+1)\n    \n    for i in range(2,len(n_bin)):\n        if(n_bin[i]):\n            n_bin[i]=0\n        else:\n            n_bin[i]=1\n            \n    count_set_bit = 0\n    \n    for i in range(len(n_bin)-1,-1,-1):\n        count_set_bit += n_bin[i]\n    \n    print(count_set_bit)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    total_bits = 0\n    for i in range(n+1):\n        total_bits += bin(i)[2:]\n    return len(total_bits)-1\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    for i in range(0, n):\n        if n & 1 == 1:\n            print(\"{:b}\".format(1), end='')\n        else:\n            print(\"{:b}\".format(0), end='')\n    print()\n    return 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    d = n # initializing value\n    c = 0 # set bit count\n    \n    for i in range(0,len(str(d))): \n        c += 1\n        d = d >> 1\n    \n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    #Get the number\n    n = int(n) \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_count = 0\n    for i in range(n):\n        if(n%2):\n            if(n%2 == 0):\n                set_count += 1\n        else:\n            set_count += 1\n    return set_count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    l = [] \n    def count_set_bits(n): \n        c = 0\n        while (n): \n            n &= (n - 1) \n            c += 1\n        return c \n    for i in range(n, -1, -1): \n        l.append(count_set_bits(i))\n    return l\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (1 << i)\n    return sum\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    i = 0\n    temp = []\n    while i < len(str):\n        if str[i] % 2 == 1:\n            temp.append(str[i])\n        i = i + 1\n    return temp\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(str)\n    odd_ind = []\n    # range(len(str))\n    for i in range(len(str)):\n        if(str[i]%2 == 1):\n            odd_ind.append(i)\n    return str[0:len(odd_ind)]+str[len(odd_ind):]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd = []\n    for i in str:\n        if i % 2!= 0:\n            odd.append(i)\n    str = ''.join(odd)\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # TODO: Write your solution here\n    a = []\n    b = []\n    \n    for i in str:\n        if (i % 2)!= 0:\n            a.append(i)\n        else:\n            b.append(i)\n    \n    return str.replace(a,b)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if(str):\n        odd_str = ''\n        for i in range(len(str)):\n            if(str[i] % 2!= 0):\n                odd_str += str[i]\n        return odd_str\n    else:\n        return ''\n    \n    \n    # Input:\n    # str = '''(()())('''\n    # Output: '())'\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # '''\n    # "
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    o = 0\n    while o < len(str):\n        if not str[o] % 2:\n            str = str[:o] + str[o+1:]\n            o += 1\n        else:\n            o += 1\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(f'odd values of string {str} :')\n    count=0\n    for i in str:\n        if i%2!=0:\n            count+=1\n    if count==0:\n        print(\"No odd values\")\n    else:\n        print(f'odd values of string {str} : {count}')\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #create an empty string and variable to store odd index values\n    odd_index = ''\n    \n    #loop through the string and convert to char to store\n    for char in str:\n        if char % 2 == 0:\n            odd_index += char\n    \n    #return string with odd index values\n    return odd_index\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    my_list = list(str)\n    my_list_odd = []\n    for i in range(len(my_list)):\n        if my_list[i] % 2!= 0:\n            my_list_odd.append(my_list[i])\n    str_new = ''.join(my_list_odd)\n    return str_new\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l = []\n    for i in range(len(str)):\n        if str[i] % 2!= 0:\n            l.append(str[i])\n    return ''.join(l)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c: \n        print(a) \n    if b > a and b > c: \n        print(b) \n    if c > a and c > b: \n        print(c) \n    return min(a,b,c) \n \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a > b and a > c: \n        print(a) \n    if b > a and b > c: \n        print(b) \n    if c > a and c > b: \n        print(c) \n    return max(a,b,c) \n \ndef main(): \n    print(\"******* Welcome to the Range Finder *******\") \n    print(\"Please choose an option:\") \n    print(\"1. For a given range, find the smallest and largest\") \n    print(\"2. For a given range, find the smallest and largest\") \n    print(\"3. For a given range, find the smallest and largest\") \n    print(\"4. For a given range, find the smallest and largest\") \n    print(\"5. For a given range, find the smallest and largest\") \n    print(\"6. For a given range, find the smallest and largest\") \n    print(\"7. For a given range, find the smallest and largest\") \n    print(\"8. For a given range, find the smallest and largest\") \n    print(\"9. For a given range, find the smallest and largest\") \n    print(\"10. For a given range, find the smallest and largest\") \n    print(\"11. For a given range, find the smallest and largest\") \n    print(\"12. For a given range, find the smallest and largest\") \n    print(\"13. For a given range, find the smallest and largest\") \n    print(\"14. For a given range, find the smallest and largest\") \n    print(\"15. For a given range, find the smallest and largest\") \n    print(\"16. For a given range, find the smallest and largest\") \n    print(\"17. For a given range, find the smallest and largest\") \n    print(\"18. For a given range, find the smallest and largest\") \n    print(\"19. For a given range, find the smallest and largest\") \n    print(\"20. For a given range, find the smallest and largest\") \n    print(\"21. For a given range, find the smallest and largest\") \n    print(\"22. For a given range, find the smallest and largest\") \n    print(\"23. For a given range, find the smallest and largest\") \n    print(\"24. For a given range, find the smallest and largest\") \n    print(\"25. For a given range, find the smallest and largest\") \n    print(\"26. For a given range, find the smallest and largest\") \n    print(\"27. For a given range, find the smallest and largest\") \n    print(\"28. For a given range, find the smallest and largest\") \n    print(\"29. For a given range, find the smallest and largest\") \n    print(\"30. For a given range, find the smallest and largest\") \n    print(\"31. For a given range, find the smallest and largest\") \n    print(\"32. For a given range, find the smallest and largest\") \n    print(\"33. For a given range, find the smallest and largest\") \n    print(\"34. For a given range, find the smallest and largest\") \n    print(\"35. For a given range, find the smallest and largest\") \n    print(\"36. For a given range, find the smallest and largest\") \n    print(\"37. For a given range, find the smallest and largest\") \n    print(\"38. For a given range, find the smallest and largest\") \n    print(\"39. For a given range, find the smallest and largest\") \n    print(\"40. For a given range, find the smallest and largest\") \n    print(\"41. For a given range, find the smallest and largest\") \n    print(\"42. For a given range, find the smallest and largest\") \n    print(\"43. For a given range, find the smallest and largest\") \n    print(\"44. For a given range, find the smallest and largest\") \n    print(\"45. For a given range, find the smallest and largest\") \n    print(\"46. For a given range, find the smallest and largest\") \n    print(\"47. For a given range, find the smallest and largest\") \n    print(\"48. For a given range, find the smallest and largest\") \n    print(\"49. For a given range, find the smallest and largest\") \n    print(\"50. For a given range, find the smallest and largest\") \n    print(\"51. For a given range, find the smallest and largest\") \n    print(\"52. For a given range, find the smallest and largest\") \n    print(\"53. For a given range, find the smallest and largest\") \n    print(\"54. For a given range, find the smallest and largest\") \n    print(\"55. For a given range, find the smallest and largest\") \n    print(\"56. For a given range, find the smallest and largest\") \n    print(\"57. For a given range, find the smallest and largest\") \n    print(\"58. For a given range, find the smallest and largest\") \n    print(\"59. For a given range, find the smallest and largest\") \n    print(\"60. For a given range, find the smallest and largest\") \n    print(\"61. For a given range, find the smallest and largest\") \n    print(\"62. For a given range, find the smallest and largest\") \n    print(\"63. For a given range, find the smallest and largest\") \n    print(\"64. For a given range, find the smallest and largest\") \n    print(\"65. For a given range, find the smallest and largest\") \n    print(\"66. For a given range, find the smallest and largest\") \n    print(\"67. For a given range, find the smallest and largest\") \n    print(\"68. For a given range, find the smallest and largest\") \n    print(\"69. For a given range, find the smallest and largest\") \n    print(\"70. For a given range, find the smallest and largest\") \n    print(\"71. For a given range, find the smallest and largest\") \n    print(\"72. For a given range, find the smallest and largest\") \n    print(\"73. For a given range, find the smallest and largest\") \n    print(\"74. For a given range, find the smallest and largest\") \n    print(\"75. For a given range, find the smallest and largest\") \n    print(\"76. For a given range, find the smallest and largest\") \n    print(\"77. For a given range, find the smallest and largest\") \n    print(\"78. For a given range, find the smallest and largest\") \n    print(\"79. For a given range, find the smallest and largest\") \n    print(\"80. For a given range, find the smallest and largest\") \n    print(\"81. For a given range, find the smallest and largest\") \n    print(\"82. For a given range, find the smallest and largest\") \n    print(\"83. For a given range, find the smallest and largest\") \n    print(\"84. For a given range, find the smallest and largest\") \n    print(\"85. For a given range, find the smallest and largest\") \n    print(\"86. For a given range, find the smallest and largest\") \n    print(\"87. For a given range, find the smallest and largest\") \n    print(\"88. For a given range, find the smallest and largest\") \n    print(\"89. For a given range, find the smallest and largest\") \n    print(\"90. For a given range, find the smallest and largest\") \n    print(\"91. For a given range, find the smallest and largest\") \n    print(\"92. For a given range, find the smallest and largest\") \n    print(\"93. For a given range, find the smallest and largest\") \n    print(\"94. For a given range, find the smallest and largest\") \n    print(\"95. For a given range, find the smallest and largest\") \n    print(\"96. For a given range, find the smallest and largest\") \n    print(\"97. For a given range, find the smallest and largest\") \n    print(\"98. For a given range, find the smallest and largest\") \n    print(\"99. For a given range, find the smallest and largest\") \n    print(\"100. For a given range, find the smallest and largest\") \n    print(\"101"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n    \nprint(min_of_three(7,5,1))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    elif b>a:\n        if b>c:\n            return b\n        elif a>c:\n            return a\n        else:\n            return c\n    elif c>a:\n        return c\n    else:\n        return \"Enter correct arguments.\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b or a < c or b < c: \n        return a \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<c<a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=n:\n        return False\n    elif l>=n:\n        return False\n    else:\n        return not(n&(n>>l))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return n==0 or (not (l<n and r<n))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == n and r == n:\n        return True\n    if r - l <= n and n > 0:\n        return all_Bits_Set_In_The_Given_Range(n,l,r-1)\n    elif r - l <= n and n == 0:\n        return all_Bits_Set_In_The_Given_Range(n,l,r)\n    elif r - l <= n and n < 0:\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l,r)\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count=0\n    for i in range(l,r+1):\n        if(n&(1<<i)==0):\n            count+=1\n    if count==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return l <= (n >> r) <= r and (n >> r) < n\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    assert type(n) is int\n    assert type(l) is int\n    assert type(r) is int\n    assert l<r\n    for i in range(0,r):\n        if (((l+n)%2)==1 and (l+n+1)%2)==1):\n            return True\n        elif (((l+n)%2)==0 and (l+n+1)%2)==0):\n            return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return(((l & (2**(n-1)))!= 0) and ((r & (2**(n-1)))!= 0))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    ans = False\n    for i in range(n):\n        if (l>=i) and (r<=i+n):\n            if (n-i)%n!= 0:\n                ans = True\n            elif (i+n)%n!= 0:\n                ans = False\n    return ans\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(n==l and r==l):\n        return True\n    if(n==l and r>l):\n        return True\n    if(n==r and r>=l):\n        return True\n    return False\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO: Use an array.\n    # TODO: Create a new array.\n    # TODO: Remove duplicates from the new array.\n    # TODO: Change the order of the elements.\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    assert n > 0, 'invalid input'\n    \n    if len(arr) == 0:\n        return arr\n    \n    arr = sorted(arr, reverse=True)\n    \n    final = []\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            final.append(arr[i])\n        else:\n            final.append(-arr[i])\n    \n    final = final[:n]\n    \n    final.extend(arr[n:])\n    \n    return final\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    pass\n    #raise NotImplementedError\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    for i in range(n):\n        result.append(-arr[i])\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            result[arr[i]-1] *= -1\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0: return []\n    if n % 2 == 1:\n        n += 1\n    arr = arr[:n]\n    arr.append(arr[-1])\n    arr = arr[:-1]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    print(arr)\n    arr = sorted(arr, reverse=True)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not arr:\n        return arr\n    arr.sort()\n    arr_s = []\n    arr_pos = []\n    arr_neg = []\n    arr_zero = []\n    arr_nums = []\n    arr_removed = []\n    arr_removed_zero = []\n    arr_removed_one = []\n    for i in range(n):\n        if arr[i] < 0:\n            arr_s.append(arr[i])\n            arr_pos.append(i)\n        elif arr[i] > 0:\n            arr_neg.append(arr[i])\n            arr_zero.append(i)\n        else:\n            arr_one = arr[i]\n            arr_nums.append(arr_one)\n            arr_removed.append(arr[i])\n            arr_removed_zero.append(i)\n            arr_removed_one.append(arr[i] - arr_one)\n    for i in range(len(arr_s)):\n        if arr_s[i] > 0:\n            arr_zero.append(arr_s[i])\n        else:\n            arr_removed.append(arr_s[i])\n    arr_removed_zero.sort()\n    arr_removed_one.sort()\n    arr_removed_zero.append(arr_removed[0])\n    arr_removed_one.append(arr_removed[1])\n    arr_removed_zero.reverse()\n    arr_removed_one.reverse()\n    for i in range(len(arr_removed_zero)):\n        arr_zero.append(arr_removed_zero[i])\n    for i in range(len(arr_removed_one)):\n        arr_one = arr_removed_one[i]\n        arr_neg.append(arr_one)\n        arr_neg.sort()\n        arr_neg.reverse()\n    arr_neg.sort()\n    arr_nums.sort()\n    arr_removed.sort()\n    arr_s.sort()\n    arr_s.reverse()\n    arr_nums.reverse()\n    arr_pos.reverse()\n    arr_pos.reverse()\n    arr_pos.append(arr_nums[0])\n    arr_pos.sort()\n    arr_pos.reverse()\n    arr_pos.append(arr_pos[0])\n    arr_pos.append(arr_pos[len(arr_pos)-1])\n    arr_pos.sort()\n    arr_pos.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.append(arr_neg[0])\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.append(arr_neg[0])\n    arr_neg.append(arr_neg[len(arr_neg)-1])\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.reverse()\n    arr_neg.reverse()\n    arr_neg.sort()\n    arr_neg.revers"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 1:\n        return arr\n    arr_rearranged = []\n    for i in range(n):\n        if arr[i] < 0:\n            arr_rearranged.append(arr[i])\n        elif arr[i] > 0:\n            arr_rearranged.append(arr[i])\n            arr[i] *= -1\n    arr_rearranged.sort()\n    return arr_rearranged\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0,n):\n        if arr[i] < 0:\n            arr[i] = - arr[i]\n        elif arr[i] > 0:\n            arr[i] = arr[i] + 1\n    return arr\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\"+char+\" \")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",char)\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # TODO: Implement this function\n    char_list = list(str1.strip())\n    for char_index in range(len(char_list)):\n        if char_list[char_index]!='':\n            char_list[char_index] = char\n    return ''.join(char_list)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.strip()\n    list_of_char = list(char)\n    list_of_char.reverse()\n    if str1 == \"\":\n        return \" \"\n    elif str1.find(char) == -1:\n        return \" \"\n    else:\n        str1 = str1.replace(char,list_of_char.pop(0))\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    return char + str1 + char\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',''+ char +'')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.lower()\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\"\\n\",\"\")\n    str1=str1.replace(\"\\t\",\"\")\n    str1=str1.replace(\"\\r\",\"\")\n    str1=str1.replace(\"\\v\",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.lower()\n    return(str1)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i][0])\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n==1:\n        return list1\n    elif n==2:\n        return list1[0:2]\n    elif n==3:\n        return list1[0:3]\n    elif n>3:\n        return list1[0:3] + list1[-1:n-3:-1]\n    else:\n        return list1[0:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_larg=[]\n    heap=[]\n    list1_len=len(list1)\n    for i in range(n):\n        heapq.heappush(heap,[list1[i]])\n    while len(heap)!=0:\n        heapq.heappop(heap)\n        list_larg.append(heapq.heappop(heap))\n    return list_larg\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef gaurant_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef gaurant_nnum_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef het_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef het_nnum_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef vip_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_3_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_4_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_3_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_4_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_3_4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_4_4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef het_nnum_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_2_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_2_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm_nnum_2_4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\ndef fahm"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    larg=[]\n    for x in list1:\n        if len(x)<=n:\n            larg.append(x)\n    return larg\ndef read_file(file):\n    '''\n    Read a file and return a list of tuples of (word,frequency)\n    '''\n    f=open(file,mode='r')\n    content=f.readlines()\n    f.close()\n    content=content[0].split(' ')\n    content=[x.strip() for x in content]\n    return content\ndef write_file(file,content):\n    '''\n    Write a file with content. \n    '''\n    f=open(file,'w')\n    for x in content:\n        f.write(x+'\\n')\n    f.close()\ndef read_words(file):\n    '''\n    Read a file and return a dictionary with words as keys and their frequency as values\n    '''\n    words_dic=dict()\n    f=open(file,'r')\n    for line in f.readlines():\n        word=line.split()[0]\n        words_dic[word]=words_dic.get(word,0)+1\n    f.close()\n    return words_dic\ndef write_words(file,words_dic):\n    '''\n    Write a file with words and their frequencies as keys and their values.\n    '''\n    f=open(file,'w')\n    for word,frequency in sorted(words_dic.items(),key=lambda x:x[1],reverse=True):\n        f.write(word+' '+str(frequency)+'\\n')\n    f.close()\ndef read_numbers(file):\n    '''\n    Read a file and return a dictionary with numbers as keys and their frequencies as values\n    '''\n    num_dic=dict()\n    f=open(file,'r')\n    for line in f.readlines():\n        num=line.split()[0]\n        num_dic[num]=num_dic.get(num,0)+1\n    f.close()\n    return num_dic\ndef write_numbers(file,num_dic):\n    '''\n    Write a file with numbers and their frequencies as keys and their values.\n    '''\n    f=open(file,'w')\n    for num,frequency in sorted(num_dic.items(),key=lambda x:x[1],reverse=True):\n        f.write(num+' '+str(frequency)+'\\n')\n    f.close()\ndef read_topwords(file):\n    '''\n    Read a file and return a dictionary with words as keys and their frequencies as values\n    '''\n    topword_dic=dict()\n    f=open(file,'r')\n    for line in f.readlines():\n        word=line.split()[0]\n        topword_dic[word]=topword_dic.get(word,0)+1\n    f.close()\n    return topword_dic\ndef write_topwords(file,topword_dic):\n    '''\n    Write a file with topwords and their frequencies as keys and their values.\n    '''\n    f=open(file,'w')\n    for word,frequency in sorted(topword_dic.items(),key=lambda x:x[1],reverse=True):\n        f.write(word+' '+str(frequency)+'\\n')\n    f.close()\ndef read_onefile(file):\n    '''\n    Read a file and return a list of tuples of (word,frequency)\n    '''\n    word_dic=dict()\n    f=open(file,'r')\n    for line in f.readlines():\n        word=line.split()[0]\n        word_dic[word]=word_dic.get(word,0)+1\n    f.close()\n    return word_dic\ndef write_onefile(file,word_dic):\n    '''\n    Write a file with words and their frequencies as keys and their values.\n    '''\n    f=open(file,'w')\n    for word,frequency in sorted(word_dic.items(),key=lambda x:x[1],reverse=True):\n        f.write(word+' '+str(frequency)+'\\n')\n    f.close()\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    list1=list1[:n]\n    return list1\ndef nel(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    list1=list1[:n]\n    return list1\ndef ind(list1,index):\n    '''\n    Write a function that takes in a list and a number n and returns the nth index of the list.\n    '''\n    return list1.index(index)\ndef listx(list1):\n    '''\n    Write a function that takes in a list and returns the nth element of the list.\n    '''\n    return list1[-1]\ndef choice(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the kth largest element from the list.\n    '''\n    return list1[-k]\ndef kmean(k,list1):\n    '''\n    Write a function that takes in a list of n items, an integer k and returns the kth largest element from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[-k]\ndef kmean_graph(list1):\n    '''\n    Write a function that takes in a list of n items and returns a list containing the kth largest element from the list.\n    '''\n    n=len(list1)\n    k=len(list1)\n    if n==k:\n        return list1[-1]\n    else:\n        h=[]\n        for i in range(0,n):\n            for j in range(0,k):\n                if i==j:\n                    h.append(list1[i])\n        return h[-1]\n    \ndef uniq(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the nth largest element from the list.\n    '''\n    return list1[-1]\ndef count(list1,val):\n    '''\n    Write a function that takes in a list and an integer and returns the number of occurrences of that element in the list.\n    '''\n    list1.count(val)\ndef listx_count(list1):\n    '''\n    Write a function that takes in a list and returns the number of occurrences of that element from the list.\n    '''\n    list1.count(listx(list1))\ndef count_with_range(list1,val1,val2):\n    '''\n    Write a function that takes in a list and a value and returns the number of times that value occurs in the list.\n    '''\n    list1.count(val1,val2)\ndef max_list(list1):\n    '''\n    Write a function that takes in a list and returns the nth largest element from the list.\n    '''\n    return list1[-1]\ndef min_list(list1):\n    '''\n    Write a function that takes in a list and returns the nth smallest element from the list.\n    '''\n    return list1[0]\ndef median_list(list1):\n    '''\n    Write a function that takes in a list and returns the median of that list.\n    '''\n    return list1[int(len(list1)/2)]\ndef mean_list(list1):\n    '''\n    Write a function that takes in a list and returns the mean of that list.\n    '''\n    return sum(list1)/len(list1)\ndef count_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the number of times that the mean of that list is in the list.\n    '''\n    return sum(list1-mean_list(list1))\ndef mean_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the mean of that list.\n    '''\n    return sum(list1)/len(list1)\ndef median_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the median of that list.\n    '''\n    return sorted(list1)[len(list1)//2]\ndef mode_list(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return listx_count(list1)/len(list1)\ndef mode_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mode_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return median_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return median_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return median_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return median_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return median_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return median_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return median_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''\n    return mean_of_mean(list1)\ndef mode_of_mean(list1):\n    '''\n    Write a function that takes in a list and returns the mode of that list.\n    '''"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        print(\"Error: n is larger than the length of the list.\")\n        return\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap)<n:\n            heapq.heappush(heap,item)\n        elif item<heap[0]:\n            heapq.heapreplace(heap,item)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in list1:\n        if len(heap)<n:\n            heapq.heappush(heap,i)\n        else:\n            if i<heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,i)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    for i in range(n):\n        heapq.heappush(list1,-list1[i][1])\n    return list1\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (r*h)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 0\n    lateral_area = ((r**2 * (h/2)) - (r**2)) * np.pi**2\n    return lateral_area\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Calculate the variables for the radius, height and angle\n    r = r\n    h = h\n    ang = math.radians(h)\n    a = math.sin(ang)\n    r_z = r*a\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Write your code here\n    return 0\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=r*h\n    area=4*np.pi*(r**2)*np.cos(2*np.pi*(h/2))\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r <= 1:\n        return 0\n    else:\n        return (h/3)*(np.pi*r**2)\ndef lateralsuface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return 3*np.pi*r**2\ndef sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*3.14*r**2\ndef sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere cylinder.\n    '''\n    return (h/3)*(np.pi*r**2)*(np.sin(np.pi*r/2))\ndef cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (h/3)*(np.pi*r**2)*(np.sin(np.pi*r/2))\ndef cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (h/3)*(np.pi*r**2)*(np.sin(np.pi*r/2))\ndef cone_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone cylinder.\n    '''\n    return (h/3)*(np.pi*r**2)*(np.sin(np.pi*r/2))*(np.sin(np.pi*r/h))\ndef cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (h/3)*(np.pi*r**2)*(np.sin(np.pi*r/2))*(np.sin(np.pi*r/3))\ndef sphere_cube(r,h):\n    '''\n    Write a function to find the surface area of a sphere cube.\n    '''\n    return (h/3)*(np.pi*r**2)*(np.sin(np.pi*r/2))*(np.sin(np.pi*r/3))*(np.sin(np.pi*r/h))\ndef cubediamond(r):\n    '''\n    Write a function to find the surface area of a cubediamond.\n    '''\n    return (h/3)*(np.pi*r**2)*(np.sin(np.pi*r/2))*(np.sin(np.pi*r/3))*(np.sin(np.pi*r/4))\ndef circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef square(r):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef area_circle(r,h):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef area_sphere(r,h):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef area_cube(r,h):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef area_cubediamond(r):\n    '''\n    Write a function to find the surface area of a cubediamond.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef area_sphere_cube(r,h):\n    '''\n    Write a function to find the surface area of a sphere cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef area_cubediamond_cube(r,h):\n    '''\n    Write a function to find the surface area of a cubediamond cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_cubediamond(r,h):\n    '''\n    Write a function to find the surface area of a cubediamond cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_cubediamond_cube(r,h):\n    '''\n    Write a function to find the surface area of a cubediamond cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere(r,h):\n    '''\n    Write a function to find the surface area of a sphere cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_cube(r,h):\n    '''\n    Write a function to find the surface area of a sphere cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_cylinder_cube(r,h):\n    '''\n    Write a function to find the surface area of a cylinder cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cylinder cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere cylinder cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_cylinder_sphere(r,h):\n    '''\n    Write a function to find the surface area of a sphere cylinder cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_cubediamond_sphere(r):\n    '''\n    Write a function to find the surface area of a cubediamond cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_cubediamond_sphere(r):\n    '''\n    Write a function to find the surface area of a cubediamond cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_cubediamond_sphere_cubediamond(r):\n    '''\n    Write a function to find the surface area of a cubediamond cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_cubediamond_sphere_cubediamond(r):\n    '''\n    Write a function to find the surface area of a cubediamond cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_cubediamond_sphere_sphere(r):\n    '''\n    Write a function to find the surface area of a cubediamond cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_cylinder_sphere_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere cylinder cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_cylinder_sphere_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere cylinder cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere cube.\n    '''\n    return (h/3)*(np.pi*r**2)\ndef volume_sphere_sphere_sphere(r):\n    '''"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = (3*r*h)/2\n    return A\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x = 0.1\n    y = 0.1\n    s = (2*np.pi*r)/(2*(h+y))\n    return s*h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    l_area=((r-h)**2)\n    return l_area\ndef lateralsuface_disk(r,h):\n    '''\n    Write a function to find the lateral surface area of a disk.\n    '''\n    l_area=((r-h)**2)\n    return l_area\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l * l) * 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    n = len(l)\n    a = l[0]\n    b = l[1]\n    c = l[2]\n    volume = n*(n**2-1)*(n*n)\n    volume = volume - (a*b*c)\n    volume = volume/3.14\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # YOUR CODE HERE\n    pass\n    \ndef add_numbers_to_list(l):\n    '''\n    Write a function that returns the list l, with the first element of the list\n    replaced by the sum of the numbers in the second element of the list.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    a = l**3\n    b = 4*a\n    c = 6*a*a\n    d = l**3*l**3\n    e = b**2+3*c+3*d\n    f = 6*b**2+2*c+3*d\n    g = 3*b**2+4*c+d\n    h = 2*c-3*d\n    return f*g*h\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    a = l * l\n    return a ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol=0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if l>=(i+1)**2+j+k:\n                    vol+=1\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def side_length(side):\n        return side ** 3\n    def vol(side):\n        return side_length(side)\n    s = vol(l)\n    return f'The volume of the cube is: {s:.2f} square feet'\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #Volume of a cube given the side length of the cube\n    volume = l*l*l\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 3 * l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(f\"Volume of a cube of side length {l} is {l**3}\")\n    \n    \n    \ndef get_current_temperature():\n    '''\n    Write a function to get the current temperature.\n    '''\n    print(f\"The current temperature is {c.today()}\")\n    \n    \n    \ndef main():\n    '''\n    This function is a collection of functions that is\n    common across all our task workflows.\n    '''\n    # volume_cube(2)\n    # get_current_temperature()\n    \n    \n    # print(\"WELCOME TO THE CUBE CUBES!\\n\")\n    # cube_one()\n    # cube_two()\n    # cube_three()\n    # cube_four()\n    cube_five()\n    cube_six()\n    cube_seven()\n    cube_eight()\n    cube_nine()\n    cube_ten()\n    cube_eleven()\n    cube_twelve()\n    cube_thirteen()\n    cube_fourteen()\n    cube_fifteen()\n    cube_sixteen()\n    cube_seventeen()\n    cube_eighteen()\n    cube_nineteen()\n    cube_twenty()\n    cube_thirty()\n    cube_fourty()\n    cube_fifty()\n    cube_sixty()\n    cube_seventy()\n    cube_eighty()\n    cube_ninety()\n    cube_hundred()\n    cube_thousand()\n    cube_million()\n    cube_billion()\n    cube_ten_hundred()\n    cube_hundred_hundred()\n    cube_hundred_billion()\n    \n    # cube_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # cube_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # cube_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # cube_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # cube_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # cube_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # cube_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # cube_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    num = n\n    odd_count = 0\n    even_count = 0\n    for i in range(num):\n        if (i % 2) == 0:\n            num = num - 1\n            odd_count = odd_count + 1\n        else:\n            even_count = even_count + 1\n    print(\"Even number set to\",even_count)\n    print(\"Odd number set to\",odd_count)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    evens = 0\n    while n:\n        n &= n-1\n        evens += 1\n    return evens\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    new_n = n & 0x0F\n    if new_n!= 0:\n        n = n - new_n\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while(n>0): \n        if (n & 1): \n            n = n >> 1\n            count = count + 1\n        else: \n            n = n << 1\n            count = count + 1\n    return count \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    temp = n & 0x01\n    n = n & 0x02\n    if temp:\n        return n\n    else:\n        return 0x03\ndef main():\n    print(\"********** main **********\")\n    n = int(input(\"Enter a number: \"))\n    print(\"The number in binary is: \")\n    print(binary_encode(n))\n    print(\"The number in hex is: \")\n    print(hex_decode(binary_encode(n)))\n    print(\"The number in decimal is: \")\n    print(binary_decode(n))\n    print(\"The number in decimal is: \")\n    print(decimal_encode(n))\n    print(\"The number in decimal is: \")\n    print(decimal_decode(n))\n    print(\"The number in octal is: \")\n    print(octal_encode(n))\n    print(\"The number in octal is: \")\n    print(octal_decode(n))\n    print(\"The number in octal is: \")\n    print(octal_encode(n))\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            count = count + 1\n    return count \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def even_bit_set_number(n): \n        '''\n        Write a python function to set all even bits of a given number.\n        '''\n        if n == 0: \n            return 0\n        else:\n            return n & 1\n    \n    \n    # Create a list that contains 0s and 1s\n    # - Each index of the list contains a \"1\" bit\n    # - Each index of the list contains a \"0\" bit\n    # - The index of the list contains the \"0\" bit\n    # - The index of the list contains the \"1\" bit\n    # - The list contains the \"0\" bit\n    list_even = [0, 0, 0, 1] \n    \n    # Add the even bits of the number to the list\n    for i in range(2**n):\n        if i%2 == 0:\n            list_even[0] = even_bit_set_number(list_even[0])\n        if i%2 == 1:\n            list_even[1] = even_bit_set_number(list_even[1])\n        if i%2 == 0:\n            list_even[2] = even_bit_set_number(list_even[2])\n        if i%2 == 1:\n            list_even[3] = even_bit_set_number(list_even[3])\n    \n    # Return the new list\n    return list_even\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_output = 0\n    if n & 0x1:\n        n_output = 1\n    if n & 0x2:\n        n_output = 2\n    if n & 0x4:\n        n_output = 3\n    if n & 0x8:\n        n_output = 4\n    if n & 0x10:\n        n_output = 5\n    if n & 0x20:\n        n_output = 6\n    if n & 0x40:\n        n_output = 7\n    if n & 0x80:\n        n_output = 8\n    return n_output\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ans = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            ans = ans | 2**i\n    print(ans)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    new_n = n ^ 0xffffffff  \n    while True:\n        if new_n & 0x00000001 == 0x00000001:  \n            new_n = new_n << 1  \n        else:  \n            new_n = new_n >> 1  \n        if new_n & 0x00000001 == 0x00000001:  \n            break  \n    return new_n  \n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for each_tuple in test_list:\n        if each_tuple[0] not in count_dict.keys():\n            count_dict[each_tuple[0]] = 1\n        else:\n            count_dict[each_tuple[0]] += 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    l = []\n    \n    for i in test_list:\n        l.append(i[0])\n    \n    count = Counter(l)\n    \n    count_dict = {}\n    \n    for k,v in count.items():\n        if v not in count_dict:\n            count_dict[v] = 1\n        else:\n            count_dict[v] += 1\n            \n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary and set the counter to 0\n    result = {tuple:0 for tuple in test_list}\n    # iterate through the list\n    for i in result:\n        # if there is a value in the dictionary\n        if result[i]!= 0:\n            # increment the count by the value\n            result[i] = result[i] + 1\n    # return the dictionary\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for item in test_list:\n        #Only loop once\n        if item[0] not in dictionary:\n            #Add item to the dictionary\n            dictionary[item[0]] = 1\n        else:\n            dictionary[item[0]] += 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dic = {}\n    for i in test_list:\n        if i[1] in test_dic:\n            test_dic[i[1]] = test_dic[i[1]] + 1\n        else:\n            test_dic[i[1]] = 1\n    return test_dic\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = {}\n    for i in test_list:\n        if i[0] not in counter:\n            counter[i[0]] = 1\n        else:\n            counter[i[0]] += 1\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = dict()\n    for i in test_list:\n        if i[0] in d.keys():\n            d[i[0]] += 1\n        else:\n            d[i[0]] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Testing\n    occurence_dictionary = Counter(test_list)\n    #print(occurence_dictionary)\n    return occurence_dictionary\n    \ndef most_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the tuples with the highest number of occurences.\n    '''\n    occurence_dictionary = Counter(test_list)\n    highest_occurence = occurence_dictionary.most_common()\n    #print(highest_occurence)\n    return highest_occurence\n    \ndef most_repeating(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the tuples with the highest number of occurrences.\n    '''\n    occurence_dictionary = Counter(test_list)\n    highest_occurence = occurence_dictionary.most_common(1)\n    return highest_occurence[0]\n    \ndef reverse_list(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of tuples reversed.\n    '''\n    reverse_list = test_list[::-1]\n    return reverse_list\n    \ndef find_hottest(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the tuple with the highest number of occurrences.\n    '''\n    occurence_dictionary = Counter(test_list)\n    highest_occurence = occurence_dictionary.most_common()\n    return highest_occurence\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create a counter for each tuple\n    counter = Counter()\n    for tup in test_list:\n        #add the tuple into the counter\n        counter[tup] += 1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0: \n        return 0\n    # we need to calculate the number of substrings for each character\n    result = 0\n    for char in str: \n        # this is the count of the length of the substring\n        result += len(str) - 1 - char \n    return result"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    i = 0\n    j = 0\n    count = 0\n    \n    while j < len(str):\n        if str[j] == str[i]:\n            i = i + 1\n            j = j + 1\n            \n            while i < len(str):\n                if str[j]!= str[i]:\n                    count = count + 1\n                    break\n                j = j + 1\n                i = i + 1\n        else:\n            j = j + 1\n            i = i + 1\n    \n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    if str == \"\":\n        return count\n    if str.split(\"\") == [\"\"]:\n        return count\n    for i in range(len(str)-1):\n        if str[i] == str[i+1] and str[i]!= str[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num_subs = 0\n    for i in range(len(str)-1):\n        if str[i] in str[i+1:]:\n            num_subs = num_subs + 1\n    return num_subs\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(set(str)) - (str.count(\" \") + str.count(\"  \"))\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str) - 1): \n        j = i + 1\n        k = 0\n        while j < len(str) and str[i] == str[j]: \n            k += 1\n            j += 1\n        count += k \n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Declaring a empty dict to store substrings\n    substrings = {}\n    # Iterating through each char in the string and count substrings\n    for i in range(len(str)):\n        # if we have a sub string, increment it by 1\n        if str[i] in substrings:\n            substrings[str[i]] += 1\n        # If a sub string is not present, create it.\n        else:\n            substrings[str[i]] = 1\n    # return the number of substrings\n    return substrings.__len__()\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(str):\n        if str[i] == str[i+1]:\n            count += 1\n        else:\n            count = 0\n        i += 1\n    return count\n        \ndef main():\n    str1 = input(\"Enter a string: \")\n    print(f\"The count of non-empty substring in string is {number_of_substrings(str1)}.\")\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return (len(str)) \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    \n    for i in range(m,n+1):\n        j = i**2\n        k = j - i\n        if j > m:\n            total += 1\n        if k > m:\n            total += 1\n    \n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Define the number of possible sequences\n    n_sequence = 2 ** (n-1) - 2 ** (n-2)\n    \n    # Loop over all numbers\n    for i in range(m, n):\n        \n        # If the current number is a positive integer,\n        # add it to the number of possible sequences\n        if i >= m and i <= n:\n            n_sequence += 2 ** (n-i-1) - 2 ** (n-i-2)\n    \n    # If the sum of all numbers is odd, we're at the end\n    # of a sequence. Therefore, add the number of possible sequences\n    if n % 2 == 1:\n        n_sequence += 2 ** (n-1) - 2 ** (n-2)\n    \n    return n_sequence\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # your code here\n    if(n==1 or n==2):\n        return m\n    if(n<1):\n        return 0\n    return m+get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == n:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 1 + m//2 * (n-m)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    counter = 0\n    for i in range(1,n):\n        counter += 2**i * (m//2**i)\n    return counter\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    #n = 2\n    for i in range(0,n):\n        total_number_of_sequences += m\n    #n = 5\n    for i in range(n-1,-1,-1):\n        total_number_of_sequences += 2**(i+1)\n    #m = 2\n    for i in range(n):\n        total_number_of_sequences += 2**i\n    #m = 2**(n-1)\n    for i in range(n-1,-1,-1):\n        total_number_of_sequences += 2**i\n    #n = 1\n    for i in range(n):\n        total_number_of_sequences += n\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n <= 0: \n        raise ValueError('Total number of sequences must be greater than 0.')\n    if n == 1: \n        return 1\n    if m == 1: \n        return n\n    return n * get_total_number_of_sequences(m-1, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if(m > n):\n        print(\"Incorrect value for m,n\")\n        return 0\n    else:\n        return int(math.ceil(m/2))\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list3 = list1[:-1]\n    list4 = list2.copy()\n    list4[-1] = list3\n    return list4\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Create a copy of the first list, which will be the result\n    result = list1.copy()\n    # Create a new list with the elements from the second list\n    result.extend(list2)\n    return result\n    \n    # Write your solution here\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # YOUR CODE HERE\n    return list1,list2\n    pass\n    \ndef check_if_list_equal(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a boolean.\n    '''\n    # YOUR CODE HERE\n    return list1==list2\n    pass\n    \ndef check_if_list_is_empty(list):\n    '''\n    Write a function that takes in a list and returns a boolean.\n    '''\n    # YOUR CODE HERE\n    return list==[]\n    pass\n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #pass #remove this comment when you are done\n    return [x if x not in list2 else list2.pop() for x in list1]\n    #pass #remove this comment when you are done\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    try:\n        # check to see if both lists are empty\n        if len(list1) == 0:\n            # return an empty list\n            return []\n        elif len(list2) == 0:\n            # return an empty list\n            return []\n        else:\n            # get the last element from the first list\n            element = list1[-1]\n            # replace the last element in the list with the elements of the second list\n            list1[-1] = list2[-1]\n            # get the new list from the second list and add the new element to the end\n            list2.append(element)\n            # return the new list\n            return list2\n    except:\n        # if there are no elements in the lists, return an empty list\n        return []\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1,list2)\n    list1[-1] = list2[-1]\n    return list1\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [x for x in list1] + [list2[-1]]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    # get the length of both lists\n    length = len(list1)\n    \n    # if the length of the first list is 1,\n    # there is only one element in the second list\n    if length == 1:\n        list2.insert(0,list1.pop())\n    else:\n        # loop through both lists\n        for i in range(length-1):\n            # take the first element of the second list\n            list2.insert(0,list1.pop(0))\n        # loop through the second list\n        for i in range(length):\n            # if the first element is in the second list,\n            # replace it with the element of the second list\n            if list1[i] in list2:\n                list2.remove(list1[i])\n                list1[i] = list2.pop(0)\n    return list1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2[-1]\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    import collections\n    occurrences = collections.Counter(str1)\n    return len(occurrences)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i][::-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) < 3:\n        return str1\n    cnt_a = str1.count('a')\n    cnt_c = str1.count('c')\n    cnt_t = str1.count('t')\n    cnt_g = str1.count('g')\n    cnt_A = str1.count('A')\n    cnt_T = str1.count('T')\n    cnt_C = str1.count('C')\n    cnt_G = str1.count('G')\n    return str(len(str1)) +'' + str(cnt_a + cnt_c + cnt_t + cnt_g + cnt_A + cnt_T + cnt_C + cnt_G)\n    \ndef get_motif(motif):\n    '''\n    Write a function that returns the 3 letter motif (a,c,t) in a string.\n    '''\n    motif_list = list(motif)\n    for i in range(3):\n        motif_list[i] = '_'\n    return ''.join(motif_list)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i.lower() == 'a':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char in \"aeiou\":\n            count += 1\n    print(\"The total number of characters in the given string is: \" + str(count))\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    print(str1)\n    print(len(str1))\n    return len(str1)\n    # your code here\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 2\n    if N == 2:\n        return 3\n    if N == 3:\n        return 5\n    if N > 10:\n        return 10\n    m = N // 2\n    if m!= N:\n        if N % m == 0:\n            return N\n        else:\n            return m * next_Perfect_Square(N // m)\n    else:\n        return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0 or N == 1: \n        return N \n    \n    start = math.floor(N**0.5)\n    mid = start + 1\n    end = N - 1\n    while (mid <= start) or (mid <= end): \n        if N % (mid**2) == 0: \n            if N == (mid**2): \n                return (mid**2)\n            else: \n                return (mid**2) + (N//(mid**2))\n        else: \n            mid += 1 \n    return (mid**2) + (N//mid) \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==1: \n        return 1\n    else:\n        y=1\n        x=math.sqrt(N)\n        while (y**2<=N):\n            if(y**2==x**2):\n                break\n            y+=1\n        return x\ndef is_Perfect_Square(N):\n    '''\n    Write a function to determine whether a given number is a perfect square.\n    '''\n    if (N==1):\n        return True\n    else:\n        x=next_Perfect_Square(N)\n        if (x*x==N):\n            return True\n        return False\ndef perfect_Square(N):\n    '''\n    Find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 1\n    x=next_Perfect_Square(N)\n    if(is_Perfect_Square(x*x)):\n        return x\n    if(is_Perfect_Square(N)):\n        return 1\ndef check_Perfect_Square_eagle_cut(N):\n    '''\n    If a given number is perfect square, then it is the only perfect square in the given range.\n    If it is not perfect square, then it is not a perfect square in the given range.\n    '''\n    if(perfect_Square(N)==1):\n        return True\n    else:\n        if(N<perfect_Square(N//2)):\n            return False\n        if(perfect_Square(N//2)==1):\n            return True\n        if(N%2==0):\n            return False\ndef perfect_Square_eagle_cut(N):\n    '''\n    Find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 1\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)\ndef check_Perfect_Square_eagle_cut_rec(N):\n    '''\n    If a given number is perfect square, then it is the only perfect square in the given range.\n    If it is not perfect square, then it is not a perfect square in the given range.\n    '''\n    if(N==1):\n        return True\n    if (N<=0):\n        return False\n    if (N<perfect_Square(N//2)):\n        return True\n    if (N%perfect_Square(N//2)==0):\n        return False\ndef perfect_Square_eagle_cut(N):\n    '''\n    Find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)\ndef check_Perfect_Square_eagle_cut_rec(N):\n    '''\n    If a given number is perfect square, then it is the only perfect square in the given range.\n    If it is not perfect square, then it is not a perfect square in the given range.\n    '''\n    if(N==1):\n        return True\n    if (N<=0):\n        return False\n    if (N<perfect_Square(N//2)):\n        return True\n    if (N%perfect_Square(N//2)==0):\n        return False\ndef is_Perfect_Square(N):\n    '''\n    Use recursion to determine whether a given number is a perfect square.\n    '''\n    if (N==1):\n        return True\n    if (N<=0):\n        return False\n    if (N%2==0):\n        return is_Perfect_Square(N//2)\n    if (N%2==1):\n        return False\ndef perfect_Square_eagle_cut(N):\n    '''\n    Find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 1\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)\ndef perfect_Square_eagle_cut_rec(N):\n    '''\n    Use recursion to find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 0\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)\ndef perfect_Square_eagle_cut_rec(N):\n    '''\n    Use recursion to find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 0\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)\ndef is_Perfect_Square_eagle_cut(N):\n    '''\n    Use recursion to determine whether a given number is a perfect square.\n    '''\n    if(N==1):\n        return True\n    if (N<=0):\n        return False\n    if (N<perfect_Square(N//2)):\n        return True\n    if (N%perfect_Square(N//2)==0):\n        return False\ndef perfect_Square_eagle_cut_rec(N):\n    '''\n    Use recursion to find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 0\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)\ndef perfect_Square_eagle_cut_rec(N):\n    '''\n    Use recursion to find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 0\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)\ndef perfect_Square_eagle_cut_rec(N):\n    '''\n    Use recursion to find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 0\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)\ndef perfect_Square_eagle_cut(N):\n    '''\n    Find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 0\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)\ndef perfect_Square_eagle_cut_rec(N):\n    '''\n    Use recursion to find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return 1\n    if (N<=0):\n        return 0\n    if (N<perfect_Square(N//2)):\n        return perfect_Square(N//2)\n    if (N%perfect_Square(N//2)==0):\n        return perfect_Square(N//2)"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 0 or N == 1):\n        return N\n    if(N == 2):\n        return 3\n    if(N > 2):\n        a = next_Perfect_Square(N-1)\n        b = math.sqrt(a)\n        while b <= a:\n            c = a*b\n            if (c>N):\n                a = b\n            else:\n                a = c\n            b = math.sqrt(a)\n        return b\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    if N % 2 == 0:\n        return N//2+1\n    else:\n        return N//2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    elif N == 3:\n        return 3\n    else:\n        result = 4\n        x = 4\n        y = 3\n        for i in range(4,N+1):\n            x = math.sqrt(y)\n            y = x\n            result = result * (y+x)\n        return result\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize the square to 0\n    square = 0\n    # Initialize the power of square to 1\n    power = 1\n    # Find the square of a number and the power to square\n    for i in range(1, N):\n        square += power\n        power *= square\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def isPerfectSquare(x):\n        return int(math.sqrt(x))**2 == x\n    '''\n    Write a Python function to find the next perfect square greater than a given number.\n    The function should take an integer as input and return the next perfect square greater than that number as an integer.\n    '''\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #A perfect square is an integer number greater than 1. \n    if (N % 2) == 0:\n        N = (N+1)//2\n        return N*N\n    # for both even and odd numbers.\n    else:\n        L = int(math.sqrt(N))+1\n        L = 2*L-1\n        # calculate the distance from the target to the L.\n        E = abs(N-L)\n        # check if the distance is smaller than 2.\n        if E >=2:\n            return L*L\n        return L*L\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # base case\n    if len(arr) < 2: \n        return arr[0] \n    \n    # for every index in the array, \n    # find the largest bitonic subsequence that is first increasing \n    # and then decreasing. \n    # If the resulting sequence is longer than 2, use \n    # the current index as the base case. \n    # Otherwise, return the resulting sequence.\n    i = 1\n    while i < len(arr): \n        if arr[i - 1] < arr[i] > arr[i + 1]:\n            return arr[i]\n        elif arr[i] < arr[i - 1] > arr[i] < arr[i + 1]: \n            i += 1\n        else: \n            i += 1\n            \n    # if we get here, there is no \n    # sequence of increasing elements \n    # that can be formed \n    # from the remaining \n    # elements. Return \n    # the longest bitonic subsequence \n    # that can be formed \n    # from the remaining elements. \n    return arr[0] \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def bitonic_subsequence(arr, start, end):\n        if start == end:\n            return arr[start]\n        if arr[start] > arr[end]:\n            return max(arr[start], arr[end] + bitonic_subsequence(arr, start + 1, end))\n        else:\n            return max(arr[start] + bitonic_subsequence(arr, start + 1, end), arr[end] + bitonic_subsequence(arr, start + 1, end))\n    return bitonic_subsequence(arr, 0, len(arr))\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the starting bit\n    start = 0\n    for i in range(1, len(arr)): \n        if arr[i-1] > arr[i]: \n            start = i \n            break\n    \n    # Find the ending bit\n    end = len(arr) - 1\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i+1] > arr[i]:\n            end = i \n            break\n    \n    # Start from the end and add all the bits\n    ans = 0\n    for i in range(start, end): \n        if arr[i] < arr[i+1]:\n            ans += arr[i] \n        else:\n            ans += arr[i+1] \n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # We have seen that all the subsequences are strictly increasing and decreasing.\n    # We can also note that we can use the fact that if the sequence has one bit in it, then the current bit is the opposite of the previous bit.\n    # If the bit is already on the left, it is added to the current sequence.\n    # Else, we add the current bit to the sequence.\n    #\n    # EXAMPLES:\n    # \n    # Input : arr = [1,2,3,4,5]\n    # Output : 6\n    # Explanation : The maximum sum of a bitonic subsequence is 6, because there are at least two numbers strictly increasing.\n    # Therefore, the whole array is strictly increasing.\n    #\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_so_far = -float('inf')\n    max_ending_here = float('-inf')\n    for i in range(1,len(arr)):\n        max_ending_here = max(max_ending_here,arr[i] + max(arr[i - 1],arr[i - 2]))\n        max_so_far = max(max_so_far,max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        left, right = 1, 0\n        for j in range(i):\n            left, right = right, max(left, arr[j]+right)\n        res = max(res, left)\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr)\n    # Maximum sum of bitonic subsequences for the array\n    m = 0\n    for i in range(n-1): \n        for j in range(i,n): \n            if arr[i] > arr[j]: \n                m = max(m, arr[i] + arr[j]) \n    return m\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # check for monotonic array\n    if len(arr) <= 1:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    \n    if number < 0:\n        raise ValueError('The given number must be >= 0')\n    if math.isnan(number):\n        raise ValueError('NaN can\\'t be used as a square root')\n    if math.isinf(number):\n        raise ValueError('Infinite value can\\'t be used as a square root')\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    elif number == 2:\n        return 0.5\n    elif number == 3:\n        return
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise Exception('Negative numbers cannot be computed.')\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0\n    for i in range(1, number):\n        root = root + ((-1) ** i) * (i ** 0.5)\n    return root\n    \n    \ndef main():\n    # test_number = 13\n    test_number = int(input('Type an integer: '))\n    print(f'{babylonian_squareroot(test_number)} is a square root of {test_number}.')\n    \n    \nmain("
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # If the number is a multiple of 4, divide it by 4 and return the square root\n    if number % 4 == 0:\n        return int(number / 4)\n    # If the number is not a multiple of 4, divide it by 2 and return the square root\n    elif number % 2 == 0:\n        return int(number / 2)\n    # Otherwise, return the square root directly\n    else:\n        return int(number ** 0.5)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        return 'Number must be positive'\n    else:\n        while (number > 0):\n            if number >= (2**(number-1)):\n                return 'Number too large'\n            else:\n                rem = number % 10\n                num = (number//(10**number-1))\n                return num ** rem\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    c = 1\n    b = 1\n    while True:\n        b = c/b\n        c = b*b\n        if c > number:\n            break\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Your code here\n    return (math.sqrt(number))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 0\n    for i in range(1, number):\n        squareroot = squareroot + (i**0.5)\n    return squareroot\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if str == '':\n        return 0\n    \n    l = 0\n    max_subseq = 1\n    \n    for i in range(len(str)):\n        temp = lps(str[i:])\n        \n        if temp > max_subseq:\n            max_subseq = temp\n        \n        if temp > l:\n            l = temp\n            \n    return max_subseq\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # define an empty list to store the palindromes\n    list_palindromes = []\n    \n    # define an empty dictionary to store the palindrome\n    palindrome = {}\n    \n    # iterate through the string\n    for i in range(len(str)):\n        # iterate through the letters\n        for j in range(len(str)-i):\n            # if the first letter matches the current letter\n            if str[j].lower() == str[i].lower():\n                # add the current letter to the palindrome dictionary\n                palindrome[str[j]] = palindrome.get(str[j],0) + 1\n        \n        # if the length of the palindrome dictionary is greater than 1\n        if len(palindrome) > 1:\n            # find the max key in the palindrome dictionary\n            max_key = max(palindrome,key = palindrome.get)\n            \n            # if the longest palindrome is equal to the current letter\n            if palindrome[max_key] == len(str):\n                # add the current letter to the list\n                list_palindromes.append(max_key)\n                \n    # return the maximum length\n    return list_palindromes[len(list_palindromes)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps(s, l, r, m):\n        if l > m:\n            return 0\n        if r < l:\n            return 0\n        if s[l] == s[r]:\n            return 1 + lps(s, l + 1, r - 1, m)\n        else:\n            return max(lps(s, l, r - 1, m), lps(s, l + 1, r, m - 1))\n    m = len(str)\n    return lps(str, 0, m - 1, m)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    num = {}\n    for i in range(len(str)):\n        num[str[i]] = i + 1\n    # print(num)\n    max = 1\n    ans = ''\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            # if num[str[j]] == num[str[i]]:\n            if num[str[i]] < num[str[j]] and len(ans) < max:\n                ans = ans + str[i]\n                max = num[ans]\n            if num[str[j]] < num[str[i]]:\n                # print(num[str[i]])\n                # print(num[str[j]])\n                # print(num[str[i]] + num[str[j]])\n                ans = ans + str[j]\n        if len(ans) > max:\n            ans = ans\n    return len(ans)"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    \n    if str[0] == str[-1]:\n        return 1 + lps(str[1:-1])\n    else:\n        return max(lps(str[1:]), lps(str[:-1]))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    \n    # using Brute force and LPS\n    # run through each possible subsequence\n    \n    # create a set of all possible subsequences that are the lengths\n    # for each, add the length to a set\n    \n    # return the maximum length of the set\n    \n    \n    #return max(len(set(l)) for l in str)\n    \n    def lps_set(str):\n        \n        \"\"\"Create a set of palindromic subsequences\"\"\"\n        \n        lps_set = set()\n        \n        for i in range(len(str)):\n            \n            for j in range(i, len(str)):\n                \n                if str[i] == str[j]:\n                    \n                    lps_set.add(str[i])\n        \n        return len(lps_set)\n    \n    \n    def lps(str): \n        \"\"\"Find the length of the longest palindromic subsequence\"\"\"\n        \n        \n        # assign a length to a set\n        # create a palindromic subsequence\n        \n        \n        return lps_set(str)\n    \n    \n    return lps(str)"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # List of palindromes\n    pal = []\n    # Check every char\n    for i in range(0,len(str)):\n        # Set start index to the first char\n        start_index = i\n        # Set palindrome length to 0\n        pal_len = 0\n        # Check every char\n        for j in range(0,len(str)):\n            # Check if the current char is equal to the next char\n            if str[j] == str[i]:\n                pal_len += 1\n            else:\n                # Append current char to the list of palindromes\n                pal.append(str[j])\n                # Reset the start index\n                start_index = j + 1\n        # Set palindrome length to the max\n        pal_len = max(pal_len, len(pal))\n        # Reset palindrome length\n        pal_len = 0\n        # Append all palindromes to pal\n        for p in pal:\n            pal.append(p)\n    # Return the length of the longest palindrome\n    return pal_len\n    \ndef lps_pyramid(str): \n    '''\n    Write a function that uses a pyramid to find the longest palindromic subsequence in the given string.\n    '''\n    # List of palindromes\n    pal = []\n    # Check every char\n    for i in range(0,len(str)):\n        # Set start index to the first char\n        start_index = i\n        # Set palindrome length to 0\n        pal_len = 0\n        # Check every char\n        for j in range(0,len(str)):\n            # Check if the current char is equal to the next char\n            if str[j] == str[i]:\n                pal_len += 1\n            else:\n                # Append current char to the list of palindromes\n                pal.append(str[j])\n                # Reset the start index\n                start_index = j + 1\n        # Set palindrome length to the max\n        pal_len = max(pal_len, len(pal))\n        # Reset palindrome length\n        pal_len = 0\n        # Append all palindromes to pal\n        for p in pal:\n            pal.append(p)\n    # Return the length of the longest palindrome\n    return pal_len\n    \ndef lps_pyramid_py3(str): \n    '''\n    Write a function that uses a pyramid to find the longest palindromic subsequence in the given string.\n    '''\n    # List of palindromes\n    pal = []\n    # Check every char\n    for i in range(0,len(str)):\n        # Set start index to the first char\n        start_index = i\n        # Set palindrome length to 0\n        pal_len = 0\n        # Check every char\n        for j in range(0,len(str)):\n            # Check if the current char is equal to the next char\n            if str[j] == str[i]:\n                pal_len += 1\n            else:\n                # Append current char to the list of palindromes\n                pal.append(str[j])\n                # Reset the start index\n                start_index = j + 1\n        # Set palindrome length to the max\n        pal_len = max(pal_len, len(pal))\n        # Reset palindrome length\n        pal_len = 0\n        # Append all palindromes to pal\n        for p in pal:\n            pal.append(p)\n    # Return the length of the longest palindrome\n    return pal_len\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return 0\n    lps = [0]\n    for i in range(len(str)):\n        if str[i] == str[i-1]:\n            lps[i] = lps[i-1] + 2\n        else:\n            lps[i] = 1 + max(lps[i-2], lps[i-1])\n    return lps[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Step #1: Find the maximum length\n    max_len = 0\n    \n    # Step #2: For each char in the string, check if its is a palindrome or not\n    for i in range(len(str)):\n        if str[i]!= str[::-1][i]:\n            max_len = max(len(str[i]), max_len)\n    \n    # Step #3: Store the length\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # if the string is empty\n    if not str:\n        return 0\n    \n    # find the length of the longest palindromic subsequence in a given string\n    max_pal_len = 0\n    \n    # recursive function to find the length of the longest palindromic subsequence of the given string\n    def length_of_palindromic(string):\n        if not string:\n            return 0\n        \n        if len(string) == 1:\n            return 1\n        \n        if string[0] == string[-1]:\n            return 2 + length_of_palindromic(string[1:-1])\n        \n        if string[0]!= string[-1]:\n            return max(length_of_palindromic(string[1:]), length_of_palindromic(string[:-1]))\n        \n    return length_of_palindromic(str)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (harmonic_sum(n-1) + n) / (2*n)\n    \ndef are_nums_equal(x, y):\n    '''\n    Write a function that returns True if the numbers x and y are equal, and False otherwise.\n    '''\n    if x == y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n-1+harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(0,n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int(n*(1+1/n))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n+harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h = n*(1/n)\n    return h\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/n * a for a in range(1, n+1)])\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    res = n * (1/n) + 1\n    return res\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 1\n    for i in range(1,n):\n        harmonic += (i/i)\n    return harmonic\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_array = array_nums1 + array_nums2\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list=[]\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection_list.append(num)\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1 & set_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # YOUR CODE HERE\n    arr1=[]\n    arr2=[]\n    for num in array_nums1:\n        arr1.append(num)\n    for num in array_nums2:\n        arr2.append(num)\n    intersection=set(arr1).intersection(set(arr2))\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_set1 = set(array_nums1)\n    array_set2 = set(array_nums2)\n    intersection = array_set1.intersection(array_set2)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n    for item in array_nums1:\n        if item in array_nums2:\n            intersection_nums.append(item)\n    return intersection_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n = len(array_nums1)\n    m = len(array_nums2)\n    if(n!=m):\n        return None\n    intersection_set = set()\n    for i in range(n):\n        if array_nums1[i] in intersection_set:\n            intersection_set.remove(array_nums1[i])\n        if array_nums2[i] in intersection_set:\n            intersection_set.remove(array_nums2[i])\n        intersection_set.add(array_nums1[i])\n        intersection_set.add(array_nums2[i])\n        if array_nums1[i] in intersection_set:\n            intersection_set.remove(array_nums1[i])\n        if array_nums2[i] in intersection_set:\n            intersection_set.remove(array_nums2[i])\n    return intersection_set\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Brute Force Solution:\n    # If the first array is empty\n    # return an empty array\n    # If the second array is empty\n    # return an empty array\n    # We should always return a nonempty array\n    # If the first array has one element and the second array has no elements\n    # return an empty array\n    if len(array_nums1)>0 and len(array_nums2)>0:\n        if array_nums1[0]<=array_nums2[0]:\n            return sorted(array_nums1)[0:1]\n        elif array_nums2[0]<=array_nums1[0]:\n            return sorted(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    m = len(array_nums1)\n    n = len(array_nums2)\n    i = 0\n    j = 0\n    result = []\n    while (i < m and j < n):\n        if array_nums1[i] == array_nums2[j]:\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    answer = []\n    set1=set(array_nums1)\n    set2=set(array_nums2)\n    return list(set1.intersection(set2))\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_x = list(tup)\n    count = 0\n    for i in tup_x:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    lst = []\n    for el in tup:\n        if el == x:\n            lst.append(1)\n        else:\n            lst.append(0)\n    return lst\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_list = list(tup)\n    tup_list.sort()\n    count = 0\n    for ele in tup_list:\n        if ele == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #print(tup)\n    #print(x)\n    dic = {}\n    for i in tup:\n        #print(i)\n        if i == x:\n            #print(dic[x])\n            dic[x] = dic.get(x, 0) + 1\n            #print(dic[x])\n        else:\n            #print(dic.get(i))\n            if i in dic.keys():\n                dic[i] = dic[i] + 1\n            else:\n                dic[i] = 1\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code here\n    pass\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    num_of_x = tup.count(x)\n    return num_of_x\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #add in a try/except\n    try:\n        return tup.count(x)\n    except:\n        print(x)\n        return -1\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    # your code goes here\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i < len(list):\n            new_list.append(list[i])\n        else:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list)==0:\n        return []\n    else:\n        for element in list:\n            list.insert(0,element)\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_new = []\n    for i in list:\n        if i < element:\n            list_new.append(i)\n        else:\n            list_new.append(element)\n    return list_new\n    \ndef merge_sort(list):\n    '''\n    Write a function that takes in a list and sorts it by comparing it with the next element. \n    '''\n    if len(list) <= 1:\n        return list\n    else:\n        mid = len(list)//2\n        left = list[:mid]\n        right = list[mid:]\n        \n        return merge_sort(left) + [element for element in merge_sort(right)]\n        \ndef find_smallest(list):\n    '''\n    Write a function that takes in a list and returns the smallest element in the list.\n    '''\n    smallest_element = list[0]\n    smallest_index = 0\n    for i in range(1, len(list)):\n        if list[i] < smallest_element:\n            smallest_element = list[i]\n            smallest_index = i\n    return smallest_element, smallest_index\n    \ndef selection_sort(list):\n    '''\n    Write a function that takes in a list and sorts it in ascending order.\n    '''\n    for i in range(0, len(list)):\n        for j in range(0, i+1):\n            if list[i] < list[j]:\n                temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n    return list\n        \ndef counting_sort(list):\n    '''\n    Write a function that takes in a list and sorts it by counting elements.\n    '''\n    count = [0] * (max(list) + 1)\n    for element in list:\n        count[element] += 1\n    for i in range(len(count)):\n        for j in range(count[i]):\n            list[i] = element\n    return list\n    \ndef insertion_sort(list):\n    '''\n    Write a function that takes in a list and sorts it in ascending order.\n    '''\n    for i in range(1, len(list)):\n        current_element = list[i]\n        j = i - 1\n        while j >= 0 and current_element < list[j]:\n            list[j + 1] = list[j]\n            j -= 1\n        list[j + 1] = current_element\n    return list\n    \ndef quick_sort(list):\n    '''\n    Write a function that takes in a list and sorts it in ascending order by finding the smallest element. \n    '''\n    if len(list) <= 1:\n        return list\n    else:\n        pivot = list[0]\n        small = [i for i in list[1:] if i <= pivot]\n        greater = [i for i in list[1:] if i > pivot]\n        return quick_sort(small) + [pivot] + quick_sort(greater)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return list\n    else:\n        return insert_element(list[1:],element) + [list[0]] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    def insert_after(list,element):\n        for element in list:\n            list.append(element)\n        return list\n    \n    return insert_after(list,element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        # for i in range(len(list)-1):\n        #     if list[i] == element:\n        #         element = list[i+1]\n        #         del list[i]\n        #         return list\n        return insert_element(list,element) + list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[1:] + [element] + list[:1]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if list[i] == element:\n            new_list.append(element)\n            continue\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #print(\"insert_element: List=\" + str(list) + \" Element=\" + str(element))\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            list.insert(i,element)\n        i += 1\n    #print(\"insert_element: List=\" + str(list) + \" Element=\" + str(element) + \" after\")\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #convert the argument to complex numbers.\n    c = complex(numbers[0], numbers[1])\n    #convert the argument to a tuple\n    x = tuple(c.real)\n    y = tuple(c.imag)\n    return x,y\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # COMPLEX NUMBERS:\n    x = numbers[0]\n    y = numbers[1]\n    z = numbers[2]\n    # E.G:\n    # if x==0:\n    #     print(\"X value of x = 0\")\n    # elif y==0:\n    #     print(\"Y value of y = 0\")\n    # elif z==0:\n    #     print(\"Z value of z = 0\")\n    # else:\n    #     print(\"X = \" + str(x*math.cos(y)) + \" \" + \"Y = \" + str(x*math.sin(y)) + \" Z = \" + str(z))\n    # CHANGE ANGLE\n    # x-change\n    x_rad = cmath.phase(x)\n    # y-change\n    y_rad = cmath.phase(y)\n    # z-change\n    z_rad = cmath.phase(z)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_num=[]\n    for x in numbers:\n        complex_num.append(cmath.complex(x,0))\n    return complex_num\ndef get_cos(complex_num):\n    '''\n    Write a python function to get cosine of complex numbers.\n    '''\n    \n    cos=[]\n    for x in complex_num:\n        cos.append(x.real**2+x.imag**2)\n    return cos\ndef get_sin(complex_num):\n    '''\n    Write a python function to get sine of complex numbers.\n    '''\n    \n    sin=[]\n    for x in complex_num:\n        sin.append(x.real**2+x.imag**2)\n    return sin\ndef get_tan(complex_num):\n    '''\n    Write a python function to get tangent of complex numbers.\n    '''\n    \n    tan=[]\n    for x in complex_num:\n        tan.append(x.real**2+x.imag**2)\n    return tan\ndef get_sqrt(complex_num):\n    '''\n    Write a python function to get square root of complex numbers.\n    '''\n    \n    sqrt=[]\n    for x in complex_num:\n        sqrt.append(cmath.sqrt(x.real**2+x.imag**2))\n    return sqrt\ndef get_abs(complex_num):\n    '''\n    Write a python function to get absolute value of complex numbers.\n    '''\n    \n    abs=[]\n    for x in complex_num:\n        abs.append(abs(x.real))\n        abs.append(abs(x.imag))\n    return abs\ndef get_angle(complex_num):\n    '''\n    Write a python function to get angle of complex numbers.\n    '''\n    \n    angle=[]\n    for x in complex_num:\n        angle.append(x.real*cmath.pi/2+x.imag*cmath.pi/2)\n    return angle\ndef get_lucum(complex_num):\n    '''\n    Write a python function to get L-lucum of complex numbers.\n    '''\n    \n    lucum=[]\n    for x in complex_num:\n        lucum.append(x.real**2+x.imag**2)\n    return lucum\ndef get_lucum2(complex_num):\n    '''\n    Write a python function to get L-lucum of complex numbers.\n    '''\n    \n    lucum=[]\n    for x in complex_num:\n        lucum.append(x.real**2-x.imag**2)\n    return lucum\ndef get_lucum3(complex_num):\n    '''\n    Write a python function to get L-lucum of complex numbers.\n    '''\n    \n    lucum=[]\n    for x in complex_num:\n        lucum.append(cmath.sqrt(x.real**2+x.imag**2))\n    return lucum\ndef get_lucum4(complex_num):\n    '''\n    Write a python function to get L-lucum of complex numbers.\n    '''\n    \n    lucum=[]\n    for x in complex_num:\n        lucum.append(cmath.sqrt(x.real**2-x.imag**2))\n    return lucum\ndef get_root(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(cmath.sqrt(x.real**2+x.imag**2))\n    return root\ndef get_root2(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(x.real**2+x.imag**2)\n    return root\ndef get_root3(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(cmath.sqrt(x.real**2-x.imag**2))\n    return root\ndef get_root4(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(x.real**2+x.imag**2)\n    return root\ndef get_root5(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(cmath.sqrt(x.real**2-x.imag**2))\n    return root\ndef get_root6(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(x.real**2+x.imag**2)\n    return root\ndef get_root7(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(cmath.sqrt(x.real**2+x.imag**2))\n    return root\ndef get_root8(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(x.real**2-x.imag**2)\n    return root\ndef get_root9(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(x.real**2-x.imag**2)\n    return root\ndef get_root10(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(cmath.sqrt(x.real**2+x.imag**2))\n    return root\ndef get_root11(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(x.real**2+x.imag**2)\n    return root\ndef get_root12(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(cmath.sqrt(x.real**2-x.imag**2))\n    return root\ndef get_root13(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(x.real**2-x.imag**2)\n    return root\ndef get_root14(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(cmath.sqrt(x.real**2+x.imag**2))\n    return root\ndef get_root15(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(x.real**2+x.imag**2)\n    return root\ndef get_root16(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n    root=[]\n    for x in complex_num:\n        root.append(x.real**2-x.imag**2)\n    return root\ndef get_root17(complex_num):\n    '''\n    Write a python function to get root of complex numbers.\n    '''\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    i = 0\n    j = 0\n    while(i < len(numbers)):\n        for x in range(len(numbers)):\n            j = j + 1\n            d = numbers[j]\n            i = i + 1\n            polar = cmath.polar(d)\n            print(f\"{i} {j} = {polar}\")\n            print(f\"--- {numbers[i]} ---\")\n            numbers[i] = float(polar[0]/polar[1])\n            print(f\"--- {numbers[i]} ---\")\n            print(\"\\n\")\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = (numbers[0] + 1j*numbers[1])/2\n    y = cmath.polar(x)\n    return y\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    for n in numbers:\n        x += (1j * cmath.polar(n))\n        y += (1j * cmath.polar(n))\n        z += (1j * cmath.polar(n))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        #the real part\n        if numbers[0].is_integer() == False:\n            if numbers[0] == 0:\n                return \"Zero\"\n            else:\n                return \"Not a number\"\n        elif numbers[0].is_integer() == True:\n            #the imaginary part\n            if numbers[1].is_integer() == False:\n                return \"Impossible\"\n            else:\n                #the complex number\n                z = (numbers[0]*cmath.pi/2)\n                return \"{:.2f}\".format(z)\n            #the real part\n        else:\n            return convert(numbers[0].real())\n    except:\n        return \"Something went wrong\"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for x in numbers:\n        y = cmath.polar(x)\n        print(y)\n        \nconvert([1+1j,2+2j])\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = round(complex(numbers.real, numbers.imag).real, 2)\n    y = round(complex(numbers.imag, numbers.real).imag, 2)\n    return x, y\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers is None:\n        return None\n    else:\n        result = []\n        for i in range(len(numbers)):\n            if type(numbers[i]) is complex:\n                if type(numbers[i]) is float and n <= 0.0:\n                    n = cmath.sqrt(numbers[i].real**2 + numbers[i].imag**2)\n                    result.append(n)\n                elif type(numbers[i]) is complex and n > 0.0:\n                    n = cmath.sqrt(numbers[i].real**2 + numbers[i].imag**2)\n                    result.append(n)\n            else:\n                result.append(numbers[i])\n        return result"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n    \n    \n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # First, you must complete the function.\n    # Print \"A function is a valid python function\"\n    # Tip: You can define a function as a block of code.\n    # You can write code within a function and pass it to the function as if it were a module.\n    # If you have a block of code that you want to run, you can use a function within another one,\n    # and it will be run when you enter the block.\n    # Return the number of integer elements in the list.\n    # return len(list)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n    #pass # delete this line when you implement this function\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    # YOUR CODE HERE\n    \n    if len(list1) == 0:\n        return 0\n    return len(list(filter(lambda x: type(x) == int, list1)))\n    \n    \n    \n    \ndef string_checker(choice, options):\n    \n    is_valid = \"yes\"\n    \n    for var_item in options:\n        \n        # error message\n        if var_item[0] == choice:\n            return var_item[1]\n        \n        elif var_item[0] in choice:\n            is_valid = \"no\"\n    \n    if is_valid == \"yes\":\n        return var_item[1]\n    \n    elif is_valid == \"no\":\n        return \"Please enter a valid option (yes/no):\"\n    \n    else:\n        return \"We did not understand your entry.\"\n    \n    \n    \ndef command_line_check():\n    \n    '''\n    python3 game.py -h\n    python3 game.py --help\n    python3 game.py -v\n    python3 game.py -V\n    '''\n    \n    import argparse\n    \n    parser = argparse.ArgumentParser(description='counts the integers in a list.')\n    \n    parser.add_argument('-v', '--verbose', action='store_true', help='turn on debugging messages')\n    \n    parser.add_argument('-H', '--help', action='help', help='show help message and exit')\n    \n    parser.add_argument('-i', '--integer', nargs='+', action='append', help='insert an integer')\n    \n    # https://stackoverflow.com/a/5091832\n    # https://www.geeksforgeeks.org/python-string-formatting-in-python/\n    \n    # https://stackoverflow.com/questions/4511900/getting-ipython-window-info-in-python\n    \n    # https://stackoverflow.com/questions/25252575/python-program-to-print-formatted-values-in-a-table-in-a-table-view\n    \n    # https://stackoverflow.com/questions/4511900/python-print-formatted-values-in-a-table-in-a-table-view\n    \n    # https://stackoverflow.com/questions/55841475/how-do-i-find-the-last-item-in-a-list-in-python\n    \n    # https://stackoverflow.com/questions/24761117/how-can-i-get-a-string-in-python-using-index\n    \n    # https://stackoverflow.com/questions/11037141/how-can-i-get-a-string-in-python-using-regex\n    \n    # https://stackoverflow.com/questions/23203426/how-can-i-get-a-string-in-python-using-regex\n    \n    # https://stackoverflow.com/questions/6725291/how-do-i-get-the-last-index-of-a-substring-in-a-string-in-python-using-regex\n    \n    # https://stackoverflow.com/questions/17898883/how-to-get-the-last-index-of-an-element-in-a-string-in-python\n    \n    \n    \n    # See how to run this code with the --help flag\n    # Test run\n    # $ python3 game.py --help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag if you want help\n    #!\n    #! Run this code with the --help flag i"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if type(i) is int:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if type(i) == int:\n            counter += 1\n    return counter\n        "
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # TODO: Write your code here\n    #summ=0\n    #count=0\n    #for i in range(0,len(list1)):\n        #if isinstance(list1[i],int):\n            #summ+=1\n    #return summ\n    #return count\n    for i in list1:\n        if isinstance(i,int):\n            return len(list(filter(lambda x:isinstance(x,int),list(filter(lambda x:x!=0,list(map(str,i)))))\n    return len(list(filter(lambda x:isinstance(x,int),list(filter(lambda x:x!=0,list(map(str,i)))))\n    ))\nprint(count_integer([1,2,3,5]))"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        raise TypeError('l should have at least n elements.')\n    if n < 1:\n        raise ValueError('n should be at least 1.')\n    if n == 1:\n        return [tuple(l)]\n    else:\n        r = []\n        for a in combinations_with_replacement(l, n):\n            r.append(tuple(a))\n        return r\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return l\n    else:\n        l_list = list(l)\n        l_list.sort()\n        l_list_comb = list(combinations_with_replacement(l_list, n))\n        return l_list_comb\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(1, n+1):\n        comb_list.append(list(combinations_with_replacement(l, i)))\n    return comb_list\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l)!= n:\n        return None\n    result = []\n    for i in range(1, len(l)+1):\n        result.append(tuple(l[i-1] for i in range(len(l))))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # def combinations_colors(l, n):\n    #     output = []\n    #     for i in range(n + 1):\n    #         for j in combinations(l, i):\n    #             output.append(tuple(j))\n    #     return output\n    combinations = []\n    for i in range(n + 1):\n        for j in combinations_with_replacement(l, i):\n            combinations.append(tuple(j))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    ans = []\n    for i in range(1, n + 1):\n        c = tuple(l[:i])\n        for j in combinations_with_replacement(l, i):\n            ans.append(c)\n    return ans\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [ tuple(e) for e in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create a list of all the combinations\n    return [tuple(combinations_with_replacement(l, r)) for r in range(n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) > n:\n        return None\n    elif len(l) == n:\n        return [[l[i] for i in range(len(l))]]\n    else:\n        return [list(itertools.combinations(l, len(l)-n)) for i in range(n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # answer = 0\n    # for i in range(1, n+1):\n    #     if prime(i):\n    #         answer += 1\n    #     return answer\n    \n    return sum(filter(lambda x: x%2==0, range(1, n+1)))\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count_primes = 0\n    for i in range(2,n):\n        if is_prime(i):\n            count_primes += 1\n    return count_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        if is_prime(i):\n            num += 1\n    return num\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Create a variable to store the number of primes\n    count = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(n,0,-1):\n        if is_prime(i):\n            count +=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    Prime_num = []\n    for num in range(2, n):\n        if is_prime(num):\n            Prime_num.append(num)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # If n is negative\n    if n < 0:\n        return 0\n    \n    # If n is zero or negative\n    if n == 0:\n        return 0\n    \n    # If n is prime\n    if n == 1:\n        return 1\n    \n    # If n is prime\n    if n == 2:\n        return 2\n    \n    # If n is prime\n    i = 3\n    while i < n:\n        # If n is greater than i\n        if n % i == 0:\n            return 0\n            break\n        i += 2\n    return n\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #1.Declare empty list\n    prime = []\n    #2.Call the function\n    primes = count_Primes_nums(n)\n    #3.Return the list with the number of prime numbers.\n    return len(prime)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a % 10\n    b = b % 10\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # remove all integers from the list\n    a = list(set(a))\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n    #Your code here\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first_num = a\n    second_num = b\n    return(first_num, second_num)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c=a+b\n    d=b+a\n    return(c,d)\n    \na=int(input('Enter a number: '))\nb=int(input('Enter another number: '))\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        return a,b\n    else:\n        return b,a\n    \ndef add_two_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns the sum of them.\n    '''\n    return a+b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a >= b:\n        return (b,a)\n    else:\n        return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # TODO: Write your code here :-)\n    return (b, a)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    n1, n2 = len(test_tup1), len(test_tup2)\n    largest = max(test_tup1, test_tup2)\n    for i in range(n1):\n        if largest[i] < test_tup1[i]:\n            largest = test_tup1[:i] + test_tup1[i + 1:]\n            if largest[-1] < test_tup2[-1]:\n                largest = test_tup2[:n2 - 1] + test_tup2[n2 - 1:]\n            else:\n                largest = test_tup2[:n2 - 1] + test_tup2[n2 - 1:]\n    return largest\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(\"\\n*** Congratulations, you've got your best part *** \\n\")\n    print(\"The first element in the test tuple is: \" + str(test_tup1[0]) + \".\")\n    print(\"The second element in the test tuple is: \" + str(test_tup2[0]) + \".\")\n    \n    print(\"\\nThe first element of the test tuple is: \" + str(test_tup1[1]) + \".\")\n    print(\"The second element of the test tuple is: \" + str(test_tup2[1]) + \".\")\n    \n    print(\"\\nYou've completed the best part of this test set!\")\n    \n    print(\"\\n\\n*** Congratulations, you've mastered the objective of this exercise *** \\n\\n\")\n    "
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1.sort()\n    test_tup2.sort()\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = 0\n    for item in test_tup1:\n        if item > max_val:\n            max_val = item\n    for item in test_tup2:\n        if item > max_val:\n            max_val = item\n    return max_val\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    l1 = [x for x in test_tup1]\n    l2 = [x for x in test_tup2]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # your code goes here\n    return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(\"Testing with {} and {}\".format(test_tup1, test_tup2))\n    if test_tup1 < test_tup2:\n        print(\"{} is better than {}\".format(test_tup1, test_tup2))\n    else:\n        print(\"{} is better than {}\".format(test_tup2, test_tup1))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return test_tup1[0]\n    elif test_tup1[1] == test_tup2[1]:\n        return test_tup1[1]\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1[1]\n        else:\n            return test_tup2[1]\n    \ndef minimize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to minimize the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return test_tup1[0]\n    elif test_tup1[1] == test_tup2[1]:\n        return test_tup1[1]\n    else:\n        if test_tup1[1] < test_tup2[1]:\n            return test_tup1[1]\n        else:\n            return test_tup2[1]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_score = 0\n    \n    # iterate through the tuples\n    for x, y in test_tup1:\n        if x + y > max_score:\n            max_score = x + y\n            \n    for x, y in test_tup2:\n        if x + y > max_score:\n            max_score = x + y\n            \n    # print the result\n    print(max_score)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Tuple 1\n    tup1 = test_tup1\n    # Tuple 2\n    tup2 = test_tup2\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [i for i in range(n+1)]\n    for i in range(2,int(n**0.5)+1):\n        if sieve[i] == 1:\n            for j in range(i+i,n+1,i):\n                sieve[j]=0\n    return sieve[n]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    nth = 2\n    count = 0\n    while (count <= n):\n        if (n % 2 == 0):\n            count += 1\n            n = n - 1\n        else:\n            count = count + 1\n            n = n - 1\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_number = 2\n    for i in range(3, n + 1):\n        if (prime_number == 2):\n            break\n        for j in range(2, i):\n            if (i % j == 0):\n                break\n        else:\n            prime_number += 1\n    return prime_number\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for x in range(2, int(math.sqrt(n)+1)):\n        if n%x==0:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        a=2\n        b=2\n        for i in range(3,n,2):\n            if i%2==0:\n                a=a+1\n            else:\n                b=b+1\n        if a==b:\n            return 1\n        else:\n            return 0\n    \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # num = [i for i in range(n+1)]\n    # for i in range(2, n):\n    #     if num[i]!= 1:\n    #         for j in range(i*i, n+1, i):\n    #             num[j] = 0\n    # return num\n    prime_list = []\n    for i in range(1, n):\n        isprime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isprime = False\n                break\n        if isprime:\n            prime_list.append(i)\n    return prime_list\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i=1\n    a=0\n    while i < n:\n        a = a + (i-1)\n        i = i + 2\n    print(a)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # count the number of newman and newshanks\n    n = n + 1\n    prime = 2\n    while (prime < n):\n        if prime % 2 == 1:\n            prime = prime + 2\n        else:\n            prime = prime + 3\n    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 17\n    else:\n        return (newman_prime(n-1) + newman_prime(n-2))\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a=1\n    i=1\n    for i in range(2,n):\n        a=a+i\n        print(a)\n    \n    print('The number of primes up to {} are:'.format(n))\n    return a\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_list = [1,2,3]\n    print(test_tup1)\n    print(test_tup2)\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if test_tup1[0] == test_tup2[0]:\n        return [test_tup1, test_tup2]\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == test_tup2[i]:\n                if test_tup1[i] < test_tup2[i]:\n                    test_list[i] = test_list[i] + 1\n                elif test_tup1[i] > test_tup2[i]:\n                    test_list[i] = test_list[i] - 1\n        return [test_list]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Inputs must have the same length\"\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    def get_multiple_divisions(test_tup1, test_tup2):\n        '''\n        Return a list of tuples that contain the number of items in the first tuple divided by the number of items in the second tuple.\n        '''\n        \n        # Get the number of items in each tuple.\n        len_test_tup1 = len(test_tup1)\n        len_test_tup2 = len(test_tup2)\n        \n        # Calculate the number of division.\n        divisions = len_test_tup2 / len_test_tup1\n        \n        # Return the division list.\n        return divisions\n        \n    def get_sum_of_divisions(test_tup1, test_tup2):\n        '''\n        Return the sum of the first tuple divided by the second tuple.\n        '''\n        \n        # Get the first element of the tuple.\n        first_element = test_tup1[0]\n        \n        # Get the number of items in each tuple.\n        len_test_tup1 = len(test_tup1)\n        len_test_tup2 = len(test_tup2)\n        \n        # Calculate the number of divisions.\n        divisions = len_test_tup2 / len_test_tup1\n        \n        # Return the sum of the division.\n        return first_element * divisions\n    \n    # Function to get the value of the tuple by index.\n    def get_item(test_tup1, test_tup2, index):\n        '''\n        Return the value of the tuple at the specified index.\n        '''\n        \n        # Get the value at the specified index.\n        value = test_tup1[index]\n        \n        # Return the value.\n        return value\n        \n    # Test all combinations of functions.\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            \n            # Get the function.\n            test_function = getattr(division_elements, test_tup1[i] + test_tup2[j])\n            \n            # Get the number of times the function is called.\n            number_of_times_called = getattr(test_function, test_tup1[i] + test_tup2[j] + \"()\")\n            \n            # Get the number of division by the number of times the function is called.\n            divisions_by_number_of_times_called = getattr(division_elements, number_of_times_called)\n            \n            # Get the sum of the division.\n            sum_of_divisions = getattr(division_elements, get_sum_of_divisions)\n            \n            # Get the value of the tuple at the specified index.\n            value = get_item(test_tup1, test_tup2, i)\n            \n            # Return the calculated value of the tuple.\n            return test_function(test_tup1, test_tup2, i, j, value)\n            \n    # Return a string with the correct value.\n    return str(get_multiple_divisions(test_tup1, test_tup2))\n    \n    \n    "
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = [0] * len(test_tup1)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < 0:\n            result[i] = -test_tup1[i]\n        else:\n            result[i] = test_tup1[i]\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < 0:\n            result[i] = -test_tup2[i]\n        else:\n            result[i] = test_tup2[i]\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Get the first tuple\n    first_tuple = test_tup1\n    # Get the second tuple\n    second_tuple = test_tup2\n    # Get the first tuple's sum\n    first_sum = first_tuple[0]\n    # Get the second tuple's sum\n    second_sum = second_tuple[0]\n    # Divide the sum by the second tuple's sum\n    result = first_sum / second_sum\n    # Return the result\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # START CODE HERE\n    # Write code here\n    return None\n    # END CODE HERE\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division(num1, num2):\n        return num1/num2\n    test_result = []\n    for element in test_tup1:\n        test_result.append(division(element, test_tup2))\n    return test_result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div = test_tup1[0]/test_tup2[0]\n    mod = test_tup1[1]/test_tup2[1]\n    return div, mod\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Convert tuples into a list of tuples and then the function will pass them to the division_elements function.\n    list_test_tup = list(test_tup1) + list(test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def get_division_factors(factor1, factor2):\n        '''\n        Calculates the division factors given two tuples.\n        '''\n        factor1_1 = float(factor1[0])\n        factor1_2 = float(factor1[1])\n        factor2_1 = float(factor2[0])\n        factor2_2 = float(factor2[1])\n        if factor1_1!= 0:\n            return factor1_1/factor2_1\n        elif factor1_2!= 0:\n            return factor1_2/factor2_2\n        else:\n            return 0\n    def get_division_factors_elements(factors_tuple):\n        '''\n        Converts a list of factors to a tuple of division factors.\n        '''\n        factor1 = factors_tuple[0]\n        factor2 = factors_tuple[1]\n        factor1_1 = float(factor1[0])\n        factor1_2 = float(factor1[1])\n        factor2_1 = float(factor2[0])\n        factor2_2 = float(factor2[1])\n        if factor1_1!= 0:\n            return factor1_1/factor2_1\n        elif factor1_2!= 0:\n            return factor1_2/factor2_2\n        else:\n            return 0\n    def get_division_factors_elements_1(factors_tuple):\n        '''\n        Converts a tuple of factors to a tuple of division factors.\n        '''\n        factor1 = factors_tuple[0]\n        factor1_1 = float(factor1[0])\n        factor1_2 = float(factor1[1])\n        if factor1_1!= 0:\n            return factor1_1/factor1_2\n        else:\n            return 0\n    division_factors = tuple(map(get_division_factors, test_tup1, test_tup2))\n    division_factors_elements = tuple(map(get_division_factors_elements, test_tup1))\n    division_factors_elements_1 = tuple(map(get_division_factors_elements_1, test_tup1))\n    return division_factors, division_factors_elements, division_factors_elements_1\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return(list1, list1)\n    else:\n        first = list1[:L//2]\n        second = list1[L//2:]\n        return(split_two_parts(first, L//2), split_two_parts(second, L//2))\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return tuple([list1[:L], list1[L:]],)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == 1:\n        return (list1, list1)\n    else:\n        L = int(L)\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)\n    \ndef merge_two_lists(a,b):\n    '''\n    Write a function that takes in a list and a list and returns a new list which is the intersection of the two lists.\n    '''\n    return (a+b)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part_one = []\n    part_two = []\n    for i in list1:\n        if len(part_one) < L:\n            part_one.append(i)\n        else:\n            part_two.append(i)\n    return part_one, part_two\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #raise NotImplementedError(\"Need to implement this function\")\n    if len(list1) < L:\n        return [], [], []\n    elif len(list1) == L:\n        return list1[:], list1[:], list1[:]\n    else:\n        return list1[:L], list1[L:], list1[L:]\n    \ndef print_lists(ls):\n    '''\n    Print the lists in a tuple in a readable manner.\n    '''\n    for l in ls:\n        print(l)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return tuple(list1[:L]), tuple(list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    return length, list1[:L]\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return \"Yah.\"\n    elif h_age <= 6:\n        return \"chuck.\"\n    elif h_age <= 12:\n        return \"Wee.\"\n    elif h_age <= 18:\n        return \"Wow.\"\n    else:\n        return \"Anchive.\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(h_age)\n    if h_age > 10:\n        dog_age = h_age - 10\n        print(dog_age)\n    else:\n        print(h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"Error: a dog's age cannot be negative.\")\n    elif h_age < 2:\n        return 0\n    elif h_age < 12:\n        return 2\n    elif h_age < 18:\n        return 4\n    else:\n        return 6\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=2:\n        return 0\n    elif h_age<=4:\n        return 1\n    elif h_age<=6:\n        return 2\n    else:\n        return 3\n    "
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = 0\n    if h_age <= 4:\n        dogs_years = h_age\n    elif h_age >= 5 and h_age <= 8:\n        dogs_years = h_age + 1\n    else:\n        dogs_years = h_age + 3\n    return dogs_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age*365\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0 and h_age <= 1:\n        return(h_age)\n    elif h_age >= 2 and h_age <= 3:\n        return(h_age * 7)\n    elif h_age >= 4 and h_age <= 6:\n        return(h_age * 9)\n    elif h_age >= 7 and h_age <= 8:\n        return(h_age * 10)\n    else:\n        return(\"Error\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 17:\n        print('You are a stupid dog.')\n    elif h_age >= 16:\n        print('You are a normal dog.')\n    else:\n        print('You are a normal dog.')\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n_list = []\n    for x in range(0, len(S)):\n        n_list.append(S[x:x+step])\n    return n_list\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    arr = []\n    for i in range(0, len(S), step):\n        arr.append(S[i:i+step])\n    return arr\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    for i in range(1, step, 1):\n        if i % step == 0:\n            yield [S[i-1]]\n        else:\n            yield [S[i-1], S[i]]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: Write your code here\n    if step < 1:\n        return [[]]\n    elif step < len(S):\n        res = []\n        for i in range(len(S)):\n            if i%step == 0:\n                res.append(S[i:i+step])\n        return res\n    else:\n        return [[]]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i*step:(i+1)*step] for i in range(len(S) // step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #return [list(i[:step]) for i in S]\n    #s = [i[:step] for i in S]\n    #return [[i[:step]] for i in S]\n    return [[i[step]] for i in S]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0,len(S),step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(0, len(S), step):\n        a.append(S[i : i + step])\n    return a\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #let's define a function to calculate the lateral surface area.\n    #the definition of a lateral surface area is as follows:\n    #the formula for the lateral surface area is:\n    #the area of the rectangle whose side length is l and is side length multiplied by the area of the rectangle whose face area is A (in cuboid).\n    #where A is the area of the rectangle whose side length is l.\n    #so the lateral surface area is the area multiplied by the area of the face area of the rectangular whose side length is l.\n    #the formula for the lateral surface area is:\n    #the area of the rectangle whose side length is l and is side length multiplied by the area of the face area of the rectangle whose face area is A (in cuboid).\n    #so, the lateral surface area is the area multiplied by the area of the face area of the rectangular whose side length is l.\n    #this is the center of the rectangle whose side length is l.\n    #so the lateral surface area of a cube is the area multiplied by the area of the face area of the cube whose side length is l.\n    #so, the cubic surface area is the area multiplied by the area of the face area of the cube whose side length is l.\n    #so, a more formal definition of a lateral surface area for a cube is as follows:\n    #the surface area of the cube is the area multiplied by the area of the face area of the cube whose side length is l.\n    #the center of the cube is the middle point of its face area.\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    A_m = l**2\n    L_m = l*np.pi\n    A_m_squared = A_m**2\n    C_m = np.pi*(l**2)-(A_m_squared)\n    return (L_m*C_m)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # define variables\n    l2 = l * l\n    l3 = l2 * l2\n    l4 = l3 * l3\n    l5 = l4 * l4\n    l6 = l5 * l5\n    l7 = l6 * l6\n    l8 = l7 * l7\n    l9 = l8 * l8\n    l10 = l9 * l9\n    l11 = l10 * l10\n    l12 = l11 * l11\n    l13 = l12 * l12\n    l14 = l13 * l13\n    l15 = l14 * l14\n    l16 = l15 * l15\n    l17 = l16 * l16\n    l18 = l17 * l17\n    l19 = l18 * l18\n    l20 = l19 * l19\n    l21 = l20 * l20\n    l22 = l21 * l21\n    l23 = l22 * l22\n    l24 = l23 * l23\n    l25 = l24 * l24\n    l26 = l25 * l25\n    l27 = l26 * l26\n    l28 = l27 * l27\n    l29 = l28 * l28\n    l30 = l29 * l29\n    l31 = l30 * l30\n    l32 = l31 * l31\n    l33 = l32 * l32\n    l34 = l33 * l33\n    l35 = l34 * l34\n    l36 = l35 * l35\n    l37 = l36 * l36\n    l38 = l37 * l37\n    l39 = l38 * l38\n    l40 = l39 * l39\n    l41 = l40 * l40\n    l42 = l41 * l41\n    l43 = l42 * l42\n    l44 = l43 * l43\n    l45 = l44 * l44\n    l46 = l45 * l45\n    l47 = l46 * l46\n    l48 = l47 * l47\n    l49 = l48 * l48\n    l50 = l49 * l49\n    l51 = l50 * l50\n    l52 = l51 * l51\n    l53 = l52 * l52\n    l54 = l53 * l53\n    l55 = l54 * l54\n    l56 = l55 * l55\n    l57 = l56 * l56\n    l58 = l57 * l57\n    l59 = l58 * l58\n    l60 = l59 * l59\n    l61 = l60 * l60\n    l62 = l61 * l61\n    l63 = l62 * l62\n    l64 = l63 * l63\n    l65 = l64 * l64\n    l66 = l65 * l65\n    l67 = l66 * l66\n    l68 = l67 * l67\n    l69 = l68 * l68\n    l70 = l69 * l69\n    l71 = l70 * l70\n    l72 = l71 * l71\n    l73 = l72 * l72\n    l74 = l73 * l73\n    l75 = l74 * l74\n    l76 = l75 * l75\n    l77 = l76 * l76\n    l78 = l77 * l77\n    l79 = l78 * l78\n    l80 = l79 * l79\n    l81 = l80 * l80\n    l82 = l81 * l81\n    l83 = l82 * l82\n    l84 = l83 * l83\n    l85 = l84 * l84\n    l86 = l85 * l85\n    l87 = l86 * l86\n    l88 = l87 * l87\n    l89 = l88 * l88\n    l90 = l89 * l89\n    l91 = l90 * l90\n    l92 = l91 * l91\n    l93 = l92 * l92\n    l94 = l93 * l93\n    l95 = l94 * l94\n    l96 = l95 * l95\n    l97 = l96 * l96\n    l98 = l97 * l97\n    l99 = l98 * l98\n    l100 = l99 * l99\n    l101 = l100 * l100\n    l102 = l101 * l101\n    l103 = l102 * l102\n    l104 = l103 * l103\n    l105 = l104 * l104\n    l106 = l105 * l105\n    l107 = l106 * l106\n    l108 = l107 * l107\n    l109 = l108 * l108\n    l110 = l109 * l109\n    l111 = l110 * l110\n    l112 = l111 * l111\n    l113 = l112 * l112\n    l114 = l113 * l113\n    l115 = l114 * l114\n    l116 = l115 * l115\n    l117 = l116 * l116\n    l118 = l117 * l117\n    l119 = l118 * l118\n    l120 = l119 * l119\n    l121 = l120 * l120\n    l122 = l121 * l121\n    l123 = l122 * l122\n    l124 = l123 * l123\n    l125 = l124 * l124\n    l126 = l125 * l125\n    l127 = l126 * l126\n    l128 = l127 * l127\n    l129 = l128 * l128\n    l130 = l129 * l129\n    l131 = l130 * l130\n    l132 = l131 * l131\n    l133 = l132 * l132\n    l134 = l133 * l133\n    l135 = l134 * l134\n    l136 = l135 * l135\n    l137 = l136 * l136\n    l138 = l137 * l137\n    l139 = l138 * l138\n    l140 = l139 * l139\n    l141 = l140 * l140\n    l142 = l141 * l141\n    l143 = l142 * l142\n    l144 = l143 * l143\n    l145 = l144 * l144\n    l146 = l145 * l145\n    l147 = l146 * l146\n    l148 = l147 * l147\n    l149 = l148 * l148\n    l150 = l149 * l149\n    l151 = l150 * l150\n    l152 = l151 * l151\n    l153 = l152 * l152\n    l154 = l153 * l153\n    l155 = l154 * l154\n    l156 = l155 * l155\n    l157 = l156 * l156\n    l158 = l157 * l157\n    l159 = l158 * l158\n    l160 = l159 * l159\n    l161 = l160 * l160\n    l162 = l161 * l161\n    l163 = l162 * l162\n    l164 = l163 * l163\n    l165 = l164 * l164\n    l166 = l165 * l165\n    l167 = l166 * l166\n    l168 = l167 * l167\n    l169 = l168 * l168\n    l170 = l169 * l169\n    l171 = l170 * l170\n    l172 = l171 * l171\n    l173 = l172 * l172\n    l174 = l173 * l173\n    l175 = l174 * l174\n    l176 = l175 * l175\n    l177 = l176 * l176\n    l178 = l177 * l177\n    l179 = l178 * l178\n    l180 = l179 * l179\n    l181 = l180 * l180\n    l182 = l181 * l181\n    l183 = l182 * l182\n    l184 = l183 * l183\n    l185 = l184 * l184\n    l186 = l185 * l185\n    l187 = l186 * l186\n    l188 = l187 * l187\n    l189 = l188 * l188\n    l190 = l189 * l189\n    l191 = l190 * l190\n    l192 = l191 * l191\n    l193 = l192 * l192\n    l194 = l193 * l193\n    l195 = l194 * l194\n    l196 = l195 * l195\n    l197 = l196 * l196\n    l198 = l197 * l197\n    l199 = l198 * l198\n    l200 = l199 * l199\n    l201 = l200 * l200\n    l202 = l201 "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l ** 2\n    if l > s:\n        return 0\n    return ((s - l) * (3 - 4 * s) + (s - l) ** 4) / 6\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #Surface Area of the cube\n    s = l*(l*l-1)\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # # TODO: Write your code here\n    # return sum(i**2 for i in range(1,n+1) if i%2 == 0)\n    # return sum(i**2 for i in range(1, n//2 + 1) if i % 2 == 0)\n    # return sum(i**2 for i in range(1, n // 2 + 1) if i % 2!= 0)\n    \n    # TODO: Write your code here\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n==1:\n        return n\n    elif n<=1:\n        return n\n    else:\n        sq = 1\n        for x in range(1,n):\n            sq = sq + x**2\n        return sq\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i ** 2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    n = n + 1\n    for i in range(1, n + 1):\n        sum_squares = sum_squares + (i ** 2)\n    return sum_squares\n    \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    def sum_squares(n):\n        '''\n        Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n        '''\n        \n        a = 0\n        for i in range(1, n):\n            a += i**2\n        return a\n        \n    if (n % 2 == 0):\n        a = (sum_squares(n//2))\n        return a\n    elif (n % 2!= 0):\n        a = (sum_squares(n//2 + 1))\n        return a\n    \n    \n    \n    \ndef sum_of_squares_of_even_numbers(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    def sum_of_squares(n):\n        '''\n        Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n        '''\n        \n        a = 0\n        for i in range(1, n):\n            a += i**2\n        return a\n        \n    if (n % 2 == 0):\n        a = (sum_of_squares(n//2))\n        return a\n    elif (n % 2!= 0):\n        a = (sum_of_squares(n//2 + 1))\n        return a\n    \n    \n    \ndef sum_of_squares_of_odd_numbers(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    def sum_of_squares(n):\n        '''\n        Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n        '''\n        \n        a = 0\n        for i in range(1, n):\n            a += i**2\n        return a\n        \n    if (n % 2 == 0):\n        a = (sum_of_squares(n//2))\n        return a\n    elif (n % 2!= 0):\n        a = (sum_of_squares(n//2 + 1))\n        return a\n    \n    \n    \ndef max_of_even_numbers(n):\n    '''\n    Write a python function that takes in an integer n and returns the maximum of the even numbers in the input array.\n    '''\n    \n    def even(a):\n        '''\n        Write a python function that takes in an integer n and returns the maximum of the even numbers in the input array.\n        '''\n        \n        a_even = []\n        for i in range(1, n+1):\n            if (i%2==0):\n                a_even.append(i)\n                \n        return max(a_even)\n        \n        \n    if (n % 2 == 0):\n        a = (even(n//2))\n        return a\n    elif (n % 2!= 0):\n        a = (even(n//2 + 1))\n        return a\n    \n    \n    \ndef max_of_odd_numbers(n):\n    '''\n    Write a python function that takes in an integer n and returns the maximum of the odd numbers in the input array.\n    '''\n    \n    def odd(a):\n        '''\n        Write a python function that takes in an integer n and returns the maximum of the odd numbers in the input array.\n        '''\n        \n        a_odd = []\n        for i in range(1, n+1):\n            if (i%2==1):\n                a_odd.append(i)\n                \n        return max(a_odd)\n        \n        \n    if (n % 2 == 0):\n        a = (odd(n//2))\n        return a\n    elif (n % 2!= 0):\n        a = (odd(n//2 + 1))\n        return a\n    \n    \n    \n    \ndef max_of_even_and_odd_numbers(n):\n    '''\n    Write a python function that takes in an integer n and returns the maximum of the even numbers and odd numbers in the input array.\n    '''\n    \n    def even_and_odd(a):\n        '''\n        Write a python function that takes in an integer n and returns the maximum of the even numbers and odd numbers in the input array.\n        '''\n        \n        a_even_odd = []\n        for i in range(1, n+1):\n            if (i%2==0):\n                a_even_odd.append(i)\n                \n        return max(a_even_odd)\n        \n        \n    if (n % 2 == 0):\n        a = (even_and_odd(n//2))\n        return a\n    elif (n % 2!= 0):\n        a = (even_and_odd(n//2 + 1))\n        return a\n    \n    \n    \n    \ndef maximum_and_minimum(a):\n    '''\n    Write a python function that takes in an integer n and returns the maximum of the numbers in the input array.\n    '''\n    \n    def max_and_min(a):\n        '''\n        Write a python function that takes in an integer n and returns the maximum of the numbers in the input array.\n        '''\n        \n        a_max = []\n        a_min = []\n        for i in range(1, n+1):\n            if (i%2==0):\n                a_max.append(i)\n                \n        for i in range(1, n+1):\n            if (i%2==1):\n                a_min.append(i)\n        \n        return max(a_max), min(a_min)\n        \n        \n    if (n % 2 == 0):\n        a = (max_and_min(n//2))\n        return a\n    elif (n % 2!= 0):\n        a = (max_and_min(n//2 + 1))\n        return a\n    \n    \n    \ndef count_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of digits in the input array.\n    '''\n    \n    def digits(a):\n        '''\n        Write a python function that takes in an integer n and returns the number of digits in the input array.\n        '''\n        \n        a_digits = []\n        for i in range(1, n+1):\n            a_digits.append(i)\n            \n        return sum(a_digits)\n        \n        \n    if (n % 2 == 0):\n        a = (digits(n//2))\n        return a\n    elif (n % 2!= 0):\n        a = (digits(n//2 + 1))\n        return a\n    \n    \n    \ndef count_digits_2(n):\n    '''\n    Write a python function that takes in an integer n and returns the number of digits in the input array.\n    '''\n    \n    def digits(a):\n        '''\n        Write a python function that takes in an integer n and returns the number of digits in the input array.\n        '''\n        \n        a_digits = []\n        for i in range(1, n+1):\n            a_digits.append(i)\n        \n        return sum(a_digits)\n        \n        \n    if (n % 2 == 0):\n        a = (digits(n//2))\n        return a\n    elif (n % 2!= 0):\n        a = (digits(n//2 + 1))\n        return a\n    \n    \n    \ndef minimum_of_even_numbers(n):\n    '''\n    Write a python function that takes in an integer n and returns the minimum of the even numbers in the input array.\n    '''\n    \n    def even(a):\n        '''\n        Write a python function that takes in an integer n and returns the minimum of the even numbers in the input array.\n        '''\n        \n        a_even = []\n        for i in range(1, n+1):\n            if (i%2==0):\n                a_even.append(i)\n        \n        return min(a_even)\n        \n        \n    if (n % 2 == 0):\n        a = (even(n//2))\n        retur"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Hint:\n    # If we want to use the range function, you can use an extended function like the function above\n    # Make sure to create a new function with the appropriate parameters\n    # Make sure to add the lambda function that gives the output correct\n    # Make sure to add the return statement\n    # We can also write the same code in the next line\n    \n    def even_odd(n):\n        '''\n        Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n        '''\n        # Hint:\n        # Make sure to create a new function with the appropriate parameters\n        # Make sure to add the lambda function that gives the output correct\n        # Make sure to add the return statement\n        # We can also write the same code in the next line\n        \n        def squares_even_odd(n):\n            '''\n            Create a function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n            '''\n            # Hint:\n            # Make sure to create a new function with the appropriate parameters\n            # Make sure to add the lambda function that gives the output correct\n            # Make sure to add the return statement\n            # We can also write the same code in the next line\n            \n            return squares_even_odd_2(n)\n        \n        # Return the function\n        return squares_even_odd\n    \n    # Call the function\n    return even_odd(n)\n        \ndef squares_even_odd_2(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Hint:\n    # Make sure to create a new function with the appropriate parameters\n    # Make sure to add the lambda function that gives the output correct\n    # Make sure to add the return statement\n    # We can also write the same code in the next line\n    \n    def squares_even_odd_2(n):\n        '''\n        Create a function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n        '''\n        # Hint:\n        # Make sure to create a new function with the appropriate parameters\n        # Make sure to add the lambda function that gives the output correct\n        # Make sure to add the return statement\n        # We can also write the same code in the next line\n        \n        def squares_even_odd_3(n):\n            '''\n            Create a function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n            '''\n            # Hint:\n            # Make sure to create a new function with the appropriate parameters\n            # Make sure to add the lambda function that gives the output correct\n            # Make sure to add the return statement\n            # We can also write the same code in the next line\n            \n            def squares_even_odd_4(n):\n                '''\n                Create a function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n                '''\n                # Hint:\n                # Make sure to create a new function with the appropriate parameters\n                # Make sure to add the lambda function that gives the output correct\n                # Make sure to add the return statement\n                # We can also write the same code in the next line\n                \n                return squares_even_odd_5(n)\n            \n            # Return the function\n            return squares_even_odd_4\n        \n        # Return the function\n        return squares_even_odd_3\n    \n    # Call the function\n    return squares_even_odd_2(n)\n    \ndef squares_even_odd_5(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Hint:\n    # Make sure to create a new function with the appropriate parameters\n    # Make sure to add the lambda function that gives the output correct\n    # Make sure to add the return statement\n    # We can also write the same code in the next line\n    \n    def squares_even_odd_6(n):\n        '''\n        Create a function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n        '''\n        # Hint:\n        # Make sure to create a new function with the appropriate parameters\n        # Make sure to add the lambda function that gives the output correct\n        # Make sure to add the return statement\n        # We can also write the same code in the next line\n        \n        def squares_even_odd_7(n):\n            '''\n            Create a function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n            '''\n            # Hint:\n            # Make sure to create a new function with the appropriate parameters\n            # Make sure to add the lambda function that gives the output correct\n            # Make sure to add the return statement\n            # We can also write the same code in the next line\n            \n            def squares_even_odd_8(n):\n                '''\n                Create a function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n                '''\n                # Hint:\n                # Make sure to create a new function with the appropriate parameters\n                # Make sure to add the lambda function that gives the output correct\n                # Make sure to add the return statement\n                # We can also write the same code in the next line\n                \n                return squares_even_odd_9(n)\n            \n            # Return the function\n            return squares_even_odd_8\n        \n        # Return the function\n        return squares_even_odd_6\n        \n    # Call the function\n    return squares_even_odd_7(n)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    while (n > 0):\n        sum += (n*n)\n        n = n - 1\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    ans = 0\n    num = 1\n    while ans <= n:\n        num += 1\n        ans += num\n    return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    while True:\n        if n%i == 0:\n            return i\n        i += 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 0\n    for i in range(n):\n        if i == n:\n            return i\n        if i % 2 == 0:\n            star_num = i + 1\n        else:\n            star_num = (i + 1)\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    num = 0\n    while n > num:\n        count += 1\n        num = (n*(n+1))//2\n    return count\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return (find_star_num(n - 2) + 1) "
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num=1\n    for i in range(1, n+1):\n        num *= i\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_star_num(n-1) + 1\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 'a' and k <= 'z':\n        return ord(k)\n    else:\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is not str:\n        raise TypeError('k must be a string')\n    \n    for ch in k:\n        if type(ch) is not str:\n            raise TypeError('k must contain only characters')\n        \n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord('a') + k - ord('0'))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return k.encode('ascii', 'ignore')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k)+64)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    elif k.isdigit():\n        return int(k)\n    else:\n        raise ValueError(\"Invalid character\")\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return unichr(k).encode('ascii')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_values = (ord(c) for c in k)\n    return sum(ascii_values) % 256\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n            even_sum += arr[i]\n    return sum\n    \n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = []\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_index.append(i)\n    if len(even_index)!= 0:\n        return sum(arr[i] for i in even_index)\n    else:\n        return None\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0 \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            \n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            s+=arr[i]\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            total_sum += arr[i]\n    return total_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    sum_even_index = 0\n    for index in range(len(arr)):\n        if arr[index] % 2 == 0:\n            even_sum += arr[index]\n            sum_even_index += index\n    return even_sum, sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+(i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0 or n == 1: \n        return 0 \n    elif n == 2: \n        return 2 \n    else: \n        return n * (n + 1) // 2 \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<=1:\n        return n\n    else:\n        return n*even_Power_Sum(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * (n + 1) / 2\n    \n    \ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * (n + 1) / 2\n    \n    \ndef main():\n    print(even_Power_Sum(4))\n    print(odd_Power_Sum(5))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # TODO: Complete the function so that it returns the sum of the first n even natural numbers that are raised to the fifth power.\n    # HINT: Try using the ** operator to exponentiate the number, and see if the result is even. \n    # HINT: Try using a loop and the ** operator to exponetiate the number.\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0 \n    for i in range(n):\n        if (i % 5 == 0):\n            sum += i**3\n    print(sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    for i in range(1,n):\n        if i%3==0:\n            print(i)\n    return 0\n    \neven_Power_Sum(20)"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n):\n        result = result + (i * i)\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        # if i is even:\n        if i % 2 == 0:\n            # sum is the sum of the first n even numbers \n            # we're keeping the first n even numbers\n            sum += i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power=5\n    s=0\n    while(power<n):\n        s=s+power\n        power=power+5\n    return s\nprint(even_Power_Sum(18))\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[2])\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for row in test_list:\n        new_list.append(row[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    if not test_list:\n        raise ValueError('Empty list')\n    else:\n        return [t[0] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tuple_obj in test_list:\n        result_list.append(tuple_obj[1])\n    return result_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[-1])\n    return rear_list\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    front_list = []\n    for element in test_list:\n        front_list.append(element[0])\n    return front_list\n    \ndef print_first_element(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the first element of each tuple.\n    '''\n    print(\"The first element of each tuple is: \")\n    first_list = []\n    for element in test_list:\n        first_list.append(element[0])\n    print(first_list[0])\n    \ndef print_second_element(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the second element of each tuple.\n    '''\n    print(\"The second element of each tuple is: \")\n    second_list = []\n    for element in test_list:\n        second_list.append(element[1])\n    print(second_list[1])\n    \ndef print_third_element(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the third element of each tuple.\n    '''\n    print(\"The third element of each tuple is: \")\n    third_list = []\n    for element in test_list:\n        third_list.append(element[2])\n    print(third_list[2])\n    \ndef print_fourth_element(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the fourth element of each tuple.\n    '''\n    print(\"The fourth element of each tuple is: \")\n    fourth_list = []\n    for element in test_list:\n        fourth_list.append(element[3])\n    print(fourth_list[3])\n    \ndef print_fifth_element(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the fifth element of each tuple.\n    '''\n    print(\"The fifth element of each tuple is: \")\n    fifth_list = []\n    for element in test_list:\n        fifth_list.append(element[4])\n    print(fifth_list[4])\n    \ndef print_sixth_element(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the sixth element of each tuple.\n    '''\n    print(\"The sixth element of each tuple is: \")\n    sixth_list = []\n    for element in test_list:\n        sixth_list.append(element[5])\n    print(sixth_list[5])\n    \ndef print_first_and_second(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the first and second elements of each tuple.\n    '''\n    print(\"The first and second elements of each tuple are: \")\n    first_and_second_list = []\n    for element in test_list:\n        first_and_second_list.append(element[0])\n    print(first_and_second_list[0])\n    print(first_and_second_list[1])\n    \ndef print_first_and_third(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the first and third elements of each tuple.\n    '''\n    print(\"The first and third elements of each tuple are: \")\n    first_and_third_list = []\n    for element in test_list:\n        first_and_third_list.append(element[1])\n    print(first_and_third_list[0])\n    print(first_and_third_list[1])\n    print(first_and_third_list[2])\n    \ndef print_first_and_fourth(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the first and fourth elements of each tuple.\n    '''\n    print(\"The first and fourth elements of each tuple are: \")\n    first_and_fourth_list = []\n    for element in test_list:\n        first_and_fourth_list.append(element[2])\n    print(first_and_fourth_list[0])\n    print(first_and_fourth_list[1])\n    print(first_and_fourth_list[2])\n    print(first_and_fourth_list[3])\n    \ndef print_first_and_fifth(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the first and fifth elements of each tuple.\n    '''\n    print(\"The first and fifth elements of each tuple are: \")\n    first_and_fifth_list = []\n    for element in test_list:\n        first_and_fifth_list.append(element[3])\n    print(first_and_fifth_list[0])\n    print(first_and_fifth_list[1])\n    print(first_and_fifth_list[2])\n    print(first_and_fifth_list[3])\n    print(first_and_fifth_list[4])\n    print(first_and_fifth_list[5])\n    \ndef print_first_and_sixth(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the first and sixth elements of each tuple.\n    '''\n    print(\"The first and sixth elements of each tuple are: \")\n    first_and_sixth_list = []\n    for element in test_list:\n        first_and_sixth_list.append(element[5])\n    print(first_and_sixth_list[0])\n    print(first_and_sixth_list[1])\n    print(first_and_sixth_list[2])\n    print(first_and_sixth_list[3])\n    print(first_and_sixth_list[4])\n    print(first_and_sixth_list[5])\n    \ndef print_first_and_seventh(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the first and seventh elements of each tuple.\n    '''\n    print(\"The first and seventh elements of each tuple are: \")\n    first_and_seventh_list = []\n    for element in test_list:\n        first_and_seventh_list.append(element[7])\n    print(first_and_seventh_list[0])\n    print(first_and_seventh_list[1])\n    print(first_and_seventh_list[2])\n    print(first_and_seventh_list[3])\n    print(first_and_seventh_list[4])\n    print(first_and_seventh_list[5])\n    \ndef print_second_and_third(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the second and third elements of each tuple.\n    '''\n    print(\"The second and third elements of each tuple are: \")\n    second_and_third_list = []\n    for element in test_list:\n        second_and_third_list.append(element[1])\n    print(second_and_third_list[0])\n    print(second_and_third_list[1])\n    print(second_and_third_list[2])\n    print(second_and_third_list[3])\n    print(second_and_third_list[4])\n    print(second_and_third_list[5])\n    \ndef print_second_and_fourth(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a string that contains the second and fourth elements of each tuple.\n    '''\n    print(\"The second and fourth elements of each tuple are: \")\n    second_and_fourth"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    final_list = []\n    for x in range(0,len(test_list)):\n        final_list.append(test_list[x][1])\n    return final_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[-1])\n    return rear\n    \ndef rear_extract_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[0])\n    return rear\n    \ndef rear_extract_3(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n    \ndef rear_extract_4(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[2])\n    return rear\n    \ndef rear_extract_5(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[3])\n    return rear\n    \ndef rear_extract_6(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[4])\n    return rear\n    \ndef rear_extract_7(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[5])\n    return rear\n    \ndef rear_extract_8(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[6])\n    return rear\n    \ndef rear_extract_9(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[7])\n    return rear\n    \ndef rear_extract_10(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[8])\n    return rear\n    \ndef rear_extract_11(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[9])\n    return rear\n    \ndef rear_extract_12(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[10])\n    return rear\n    \ndef rear_extract_13(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[11])\n    return rear\n    \ndef rear_extract_14(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[12])\n    return rear\n    \ndef rear_extract_15(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[13])\n    return rear\n    \ndef rear_extract_16(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[14])\n    return rear\n    \ndef rear_extract_17(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[15])\n    return rear\n    \ndef rear_extract_18(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[16])\n    return rear\n    \ndef rear_extract_19(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[17])\n    return rear\n    \ndef rear_extract_20(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[18])\n    return rear\n    \ndef rear_extract_21(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[19])\n    return rear\n    \ndef rear_extract_22(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[20])\n    return rear\n    \ndef rear_extract_23(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[21])\n    return rear\n    \ndef rear_extract_24(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[22])\n    return rear\n    \ndef rear_extract_25(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[23])\n    return rear\n    \ndef rear_extract_26(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[24])\n    return rear\n    \ndef rear_extract_27(test_list):\n    '''\n    Write a functio"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted_list = []\n    for i in range(len(test_list)):\n        rear_extracted_list.append(test_list[i][2])\n    return rear_extracted_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    rear_count = 0\n    for element in test_list:\n        element = (element[1], element[0])\n        result_list.append(element)\n        rear_count += 1\n    return result_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1[1] -= test_tup2[1]\n    print(test_tup1)\n    print(test_tup2)\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    '''\n    # TODO\n    '''\n    return\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return [val1 - val2 for val1, val2 in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = test_tup1[1:]\n    test_tup2 = test_tup2[1:]\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if (len(test_tup1) < 2) or (len(test_tup2) < 2):\n        return \"Either one or the other element of a tuple is 0\"\n    \n    new_tup1 = tuple(map(lambda x: x-test_tup2[x], test_tup1))\n    new_tup2 = tuple(map(lambda x: x-test_tup2[x], test_tup2))\n    \n    return new_tup1, new_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtraction = tuple()\n    for i in range(len(test_tup1)):\n        subtraction.append(test_tup1[i] - test_tup2[i])\n    return subtraction\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print('Test case 1:')\n    print(test_tup1, '\\n', test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #Remove duplicates\n    test_tup1=tuple(set(test_tup1))\n    test_tup2=tuple(set(test_tup2))\n    \n    #Convert to tuple to check for duplicates\n    test_tup1=tuple(test_tup1)\n    test_tup2=tuple(test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = tuple(test_tup2)\n    \n    return test_tup1 + test_tup3\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #pass\n    pass\n    #pass\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return math.factorial( n * 2 ) / math.factorial( n )\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Your code here\n    #raise NotImplementedError\n    return math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return n*even_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeff = 0\n    for i in range(n+1):\n        sum_even_binomial_coeff += (i) * (i+1) * (n-i) * (n-i+1) / 6\n    return (sum_even_binomial_coeff)\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum_odd_binomial_coeff = 0\n    for i in range(n+1):\n        sum_odd_binomial_coeff += (i) * (i+1) * (n-i) * (n-i+1) / 4\n    return (sum_odd_binomial_coeff)\ndef n_quotient(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the quotient of a/b.\n    '''\n    return (a/b)\ndef n_remainder(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the remainder of a/b.\n    '''\n    return (a%b)\ndef arithmetic_mean(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the arithmetic mean.\n    '''\n    return (a + b) / 2\ndef arithmetic_sum(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the arithmetic sum.\n    '''\n    return (a+b)\ndef geometric_mean(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the geometric mean.\n    '''\n    return math.sqrt(a*b)\ndef harmonic_mean(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the harmonic mean.\n    '''\n    return 1/((1+a)**b)\ndef mean(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the arithmetic mean.\n    '''\n    return (a + b) / 2\ndef median(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the median of a/b.\n    '''\n    return (a+b)/2\ndef mode(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > a[count]:\n            count = i\n    return a[count]\ndef mode2(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return a[count]\ndef mode3(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return b[count]\ndef mode4(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return a[count]\ndef mode5(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return b[count]\ndef mode6(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return a[count]\ndef mode7(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return b[count]\ndef mode8(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return a[count]\ndef mode9(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return b[count]\ndef mode10(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return a[count]\ndef mode11(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return b[count]\ndef mode12(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return a[count]\ndef mode13(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return b[count]\ndef mode14(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return a[count]\ndef mode15(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return b[count]\ndef mode16(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] > b[count]:\n            count = i\n    return b[count]\ndef mode17(a,b): \n    '''\n    Write a python function that takes in a positive integer a and a positive integer b and returns the mode.\n    '''\n    count = 0\n    for i in range(len("
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(0, n + 1, 2):\n        sum = sum + (binomial_Coeff_Sum(i) / (i * (i + 1)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    i=0\n    sum=0\n    while i<=n:\n        if i%2==0:\n            sum=sum+math.pow(2,i)\n        i+=1\n    return sum\n    \ndef odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        if i%2==1:\n            sum=sum+math.pow(2,i)\n        i+=1\n    return sum\ndef factorial(n):\n    '''\n    Write a python function that takes in an integer and returns the factorial of that integer.\n    '''\n    i=1\n    while i<=n:\n        fact=i\n        i=i*fact\n    return fact\ndef neg_binomial_Coeff_Sum( n, k):\n    '''\n    Write a python function that takes in two positive integers n and k. Returns the sum of the negative binomial coefficients of the kth sum of a sequence of the kth positive integers from 1 to n.\n    '''\n    #Use python package\n    '''\n    import math\n    k=math.factorial(k)\n    neg_coeff=math.pow(k,n)\n    sum=0\n    i=0\n    while i<=n-k:\n        sum=sum+math.pow(2,i)\n        i+=1\n    return sum\n    '''\n    sum=0\n    for i in range(0,k):\n        sum=sum+math.pow(2,i)\n    return sum\ndef log_binomial_Coeff_Sum(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k. Returns the sum of the logarithmic binomial coefficients of the kth sum of a sequence of the kth positive integers from 1 to n.\n    '''\n    #Use python package\n    '''\n    import math\n    k=math.factorial(k)\n    neg_coeff=math.pow(k,n)\n    sum=0\n    i=0\n    while i<=n-k:\n        sum=sum+math.log(2)\n        i+=1\n    return sum\n    '''\n    sum=0\n    for i in range(0,k):\n        sum=sum+math.log(2)\n    return sum\ndef factorial_2(n):\n    '''\n    Write a python function that takes in an integer and returns the factorial of that integer.\n    '''\n    i=1\n    fact=1\n    while i<=n:\n        fact=fact*i\n        i+=1\n    return fact\ndef sum_of_triangular_nums(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth consecutive numbers from 1 to n.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+i\n        i+=1\n    return sum\ndef log_sum_of_triangular_nums(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the logarithm of the sum of all consecutive numbers from 1 to n.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        sum=sum+math.log(i)\n        i+=1\n    return sum\ndef factorial_3(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of that integer.\n    '''\n    i=1\n    sum=1\n    while i<=n:\n        sum=sum*i\n        i+=1\n    return sum\ndef log_sum_of_triangular_nums_3(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the logarithm of the sum of all consecutive numbers from 1 to n.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        sum=sum+math.log(i)\n        i+=1\n    return sum\ndef n_th_term_sum_of_triangular_nums(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth term from the nth successive terms from 1 to n.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+i\n        i+=1\n    return sum\ndef number_of_terms_for_n_th_term(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of terms from 1 to n, which is the number of positive integers whose sum is n.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+i\n        i+=1\n    return sum\ndef mod_of_integer(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the remainder of that integer modulo that number.\n    '''\n    i=1\n    while i<=n:\n        if n%i==0:\n            return n%i\n        i+=1\n    return n%i\ndef nth_non_repeating_char(n,k):\n    '''\n    Write a python function that takes in a positive integer n and an integer k and returns the last k digits of the input string.\n    '''\n    i=0\n    sum=''\n    while i<=k:\n        sum=sum+n[i]\n        i+=1\n    return sum\ndef even_sum_of_triangular_nums(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth even consecutive numbers from 1 to n.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+i\n        i+=1\n    return sum\ndef log_sum_of_triangular_nums_3(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the logarithm of the sum of all consecutive numbers from 1 to n.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+math.log(i)\n        i+=1\n    return sum\ndef factorial_4(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of that integer.\n    '''\n    i=1\n    sum=1\n    while i<=n:\n        sum=sum*i\n        i+=1\n    return sum\ndef sum_of_triangular_nums_3(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth term from the nth successive terms from 1 to n.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+i\n        i+=1\n    return sum\ndef nth_term_sum_of_triangular_nums_3(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth term from the nth successive terms from 1 to n.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+i\n        i+=1\n    return sum\ndef number_of_terms_for_n_th_term_3(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of terms from 1 to n, which is the number of positive integers whose sum is n.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+i\n        i+=1\n    return sum\ndef mod_of_integer_3(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the remainder of that integer modulo that number.\n    '''\n    sum=0\n    i=0\n    while i<=n:\n        sum=sum+n%i\n        "
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    return int(math.factorial(n) / math.factorial(2 * n) / math.factorial(n - 2 * n))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # your code goes here\n    \n    return 0\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Fuctions\n    def binomial(n, r):\n        return math.factorial(n) // math.factorial(n-r) // math.factorial(r)\n    #Sum of even binomial coefficients\n    def even_sum(n):\n        return binomial(n, 0)\n    #Sum of odd binomial coefficients\n    def odd_sum(n):\n        return binomial(n, 1)\n    #No. of even numbers\n    def even_nums(n):\n        return even_sum(n) - even_sum(n) - 1\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Calculate the number of terms\n    n_terms = math.factorial(n) // math.factorial(n - 1)\n    # Calculate the number of terms\n    number_of_terms = int(math.factorial(n) / (math.factorial(n - 2)))\n    # Calculate the number of digits\n    digits = math.ceil(math.log(number_of_terms, 2))\n    # Calculate the number of multiples\n    multiples = 2 ** digits\n    # Calculate the number of multiples\n    index = 1\n    # Loop until we have n as a factor\n    while index <= n:\n        # Calculate the index of the first term\n        index = index * multiples\n        # Calculate the index of the second term\n        index = index * multiples\n        # Calculate the index of the third term\n        index = index * multiples\n    # Return the sum of the multiples\n    return (n_terms * index)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume= 4/3 * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3 * pi * (r**3) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 2*pi*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 4*pi*r*h\n    return vol\n    \n    "
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.1415*r**2*h**2\n    return v\n    \nprint(volume_cylinder(4,5))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 4/3*np.pi*r*h**3\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Variables\n    V = 6*pi*r*h\n    \n    # return the volume\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3 * h**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r**3)*(h**3)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict(filter(lambda item: item[1] >= n, dict.items()))\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key, value in dict.items():\n        if value >= n:\n            dict.pop(key)\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    import collections\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filteredDict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filteredDict[key] = value\n    return filteredDict\n    \n    \n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_copy=dict.copy()\n    for key in dict_copy:\n        if dict_copy[key] > n:\n            dict_copy[key]=n\n    return dict_copy\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = dict\n    c = []\n    for key in d:\n        if d[key] >= n:\n            c.append(key)\n    return dict(zip(c,d.values()))\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key,value in dict.items():\n        if value >= n:\n            result.update({key:value})\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict = dict.copy()\n    for k,v in newDict.items():\n        if v > n:\n            newDict.pop(k)\n    return newDict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[i+1]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # your code goes here\n    return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    lst = list(test_tup)\n    lst.remove(lst[0])\n    print(len(lst))\n    for i in range(len(lst)):\n        if i == 0:\n            continue\n        elif lst[i - 1] == lst[i]:\n            continue\n        else:\n            print('x', i, lst[i-1], lst[i])\n            return len(lst)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    def count_first_element(test_tup):\n        counter = 0\n        for i in test_tup:\n            if i < test_tup[0]:\n                counter += 1\n        return counter\n    \n    return count_first_element(test_tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # TODO\n    first = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element < first:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #print(test_tup)\n    c = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            c += 1\n    #print(c)\n    return c\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] < test_tup[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Hint: You may need to print your solution function here to see how it works.\n    return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x=0\n    if n==1:\n        return 1\n    while x<n:\n        if n%2==0:\n            x+=1\n        else:\n            x-=1\n        n//=2\n    return x\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # your code goes here\n    if n%2==0:\n        return n//2\n    else:\n        return (n//2)+(n//2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==1: \n        return 1\n    elif n==2:\n        return 2\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    return n % 4 == 3\n    \ndef is_n_decagonal(n): \n    '''\n    Write a function that checks to see whether n is a\n    decagonal number, and returns True if n is \n    decagonal, and False if not.\n    '''\n    \n    return n % 4 == 3 and is_num_decagonal(n - 1)\n    "
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = 1\n    while n > 1:\n        n = n - 1\n        x = x * 2\n    return x\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    else: \n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2) + is_num_decagonal(n - 3)\n    \nprint(is_num_decagonal(6))\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #n = input(\"How many terms do you want to find: \")\n    n=int(input(\"How many terms do you want to find: \"))\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num += 1\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n % 2 \n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return n + is_num_decagonal(n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    else:\n        return False\n    \n    \ndef print_prime_factors(n):\n    '''\n    Print the prime factors of n.\n    '''\n    # Loop through all primes up to sqrt(n)\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            # Print prime\n            print(i)\n        else:\n            # If we have reached the limit, we can print a factor\n            # only if it's greater than 2.\n            if is_num_decagonal(i):\n                # If it's a prime, print it.\n                print(i)\n            else:\n                # If it's not a prime, it's not a factor of a primes number\n                # so we need to print the factors up to n.\n                print(i, end=', ')\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    searching = False\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            searching = True\n            pos = i\n    if searching:\n        return True, pos\n    else:\n        return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    for i in range(len(dlist)-1):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True,i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # TODO: Complete the function to return a tuple\n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return i,dlist.index(item)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = -1\n    for i, v in enumerate(dlist):\n        if v == item:\n            found = True\n            pos = i\n            break\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # add your code here\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i,dlist.index(item)\n    return -1, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for idx, item in enumerate(dlist):\n        if item == item:\n            return (True, idx)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    #raise NotImplementedError\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i, dlist.index(item)\n    return False\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #the iterator needs to return a tuple with the boolean value and index position\n    iterator = iter(dlist)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        print(\"The given list is empty.\")\n        return True\n    elif len(test_list) > 0 and len(set(test_list)) == len(test_list):\n        print(\"The given list has a duplicate element.\")\n        return True\n    else:\n        print(\"The given list has no duplicate elements.\")\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==0:\n        return True\n    else:\n        for element in test_list:\n            if element in test_list and element not in list(set(test_list)):\n                return False\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = True\n    for element in test_list:\n        if element not in test_list:\n            result = False\n    return result\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in test_list:\n        if i not in unique:\n            unique.append(i)\n    return len(unique)==len(set(unique))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        return False\n    elif len(test_list) == 1:\n        return True\n    elif test_list[0] in test_list[1:]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #Initialize empty lists\n    num_list=[]\n    #Append the values of the list to empty list\n    for i in test_list:\n        num_list.append(i)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = test_list.copy()\n    for item in test_list:\n        if item not in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    newlist=[]\n    for i in nums1:\n        if i not in nums2:\n            newlist.append(i)\n    return newlist\n    \n    \ndef main():\n    a=[1, 2, 3, 4, 5]\n    b=[6, 7, 8, 9, 10]\n    print(sub_list(a, b))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub=[]\n    for x in nums1:\n        if x in nums2:\n            sub.append(x)\n    return sub"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # To get all unique elements in both lists, set its index position\n    # by: index position = index of element in both lists\n    # index is zero index\n    index_list = list(range(len(nums1)))\n    index_list.sort(key = lambda x: nums1.index(x))\n    # set elements to 0 if they don't exist\n    index_list = [0]*len(index_list)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert len(nums1) == len(nums2)\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            result.append(nums1[i])\n        else:\n            result.append(nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for index in range(len(nums1)):\n        nums1[index] = nums1[index] - nums2[index]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # first find the length of nums1 and nums2\n    length = len(nums1) + len(nums2)\n    # initialise the result list\n    result = [0 for _ in range(length)]\n    # iterate over each nums1 and nums2\n    for i in range(0,len(nums1)):\n        for j in range(0,len(nums2)):\n            # if the nums1[i] and nums2[j] are not zero\n            if(nums1[i]!= 0 and nums2[j]!= 0):\n                # get the absolute value of the diff between the nums1[i] and nums2[j]\n                diff = abs(nums1[i] - nums2[j])\n                # increment the result if the diff is less than the threshold\n                if(diff < threshold):\n                    result[i] += 1\n            # if the nums1[i] and nums2[j] are zero\n            if(nums1[i] == 0 and nums2[j] == 0):\n                result[i] += 1\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list=[]\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    length_nums = len(nums1)\n    for i in range(length_nums):\n        if i % 2 == 0:\n            result.append(nums1[i]-nums2[i])\n        else:\n            result.append(nums2[i]-nums1[i])\n    return result\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = list(str(n))\n    for i in range(len(digits)-1):\n        if digits[i] >= digits[i+1]:\n            return False\n    return True\ndef has_duplicates(n): \n    '''\n    Write a python function takes in an integer and return true if the number is a duplicate, false otherwise.\n    '''\n    if validate(n) == False:\n        return False\n    freq = Counter(str(n))\n    for key in freq.keys():\n        if freq[key] > 1:\n            return True\n    return False\ndef has_duplicates_spiral(n):\n    '''\n    Write a python function takes in an integer and return true if the number is a duplicate, false otherwise.\n    '''\n    if validate(n) == False:\n        return False\n    n_copy = n\n    if validate(n_copy) == False:\n        return False\n    n_copy = n_copy[::-1]\n    \n    if has_duplicates(n_copy) == False:\n        return False\n    n_copy = n_copy[::-1]\n    \n    if has_duplicates_spiral(n_copy) == False:\n        return False\n    \n    return True\ndef has_duplicates_spiral_opt(n):\n    '''\n    Write a python function takes in an integer and return true if the number is a duplicate, false otherwise.\n    '''\n    if validate(n) == False:\n        return False\n    n_copy = n\n    if validate(n_copy) == False:\n        return False\n    n_copy = n_copy[::-1]\n    \n    if has_duplicates_spiral_opt(n_copy) == False:\n        return False\n    \n    return True\ndef has_duplicates_spiral_opt_spiral(n):\n    '''\n    Write a python function takes in an integer and return true if the number is a duplicate, false otherwise.\n    '''\n    if validate(n) == False:\n        return False\n    n_copy = n\n    if validate(n_copy) == False:\n        return False\n    n_copy = n_copy[::-1]\n    \n    if has_duplicates_spiral_opt_spiral(n_copy) == False:\n        return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_lst = list(str(n))\n    checker = 0\n    for i in range(len(digit_lst)):\n        if (i==len(digit_lst)-1):\n            checker = int(digit_lst[i])\n        else:\n            if (digit_lst[i]!=digit_lst[i+1]):\n                checker+=int(digit_lst[i])*(10**(len(digit_lst)-1-i))\n        if checker==int(digit_lst[i]):\n            return \"true\"\n    return \"false\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return n < 10**(len(str(n))-1)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #raise NotImplementedError\n    #Your code here\n    return n==sum(map(int,str(n)))\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # YOUR CODE HERE\n    def isValid(n):\n        s = str(n)\n        return s.count(s[-1]) <= 1\n    return isValid(n)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n=int(n)\n    n_list=[]\n    for i in range(n):\n        n_list.append(str(i))\n    count=0\n    for i in range(len(n_list)):\n        count=count+int(n_list[i])\n    if count==n:\n        return True\n    else:\n        return False\ndef frequency(n):\n    '''\n    Write a python function that takes in a string and counts the number of times each digit occurs in it.\n    '''\n    n=str(n)\n    n_list=[]\n    for i in range(len(n)):\n        n_list.append(int(n[i]))\n    count=0\n    for i in range(len(n_list)):\n        count=count+n_list[i]\n    return count\ndef main():\n    n=int(input('Enter a number: '))\n    if validate(n)==True:\n        print('Valid')\n    elif validate(n)==False:\n        print('invalid')\n    elif frequency(n)<=frequency(n%10):\n        print('Number is prime')\n    else:\n        print('Number is not prime')\nmain()"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0 or n >= 1e5:\n        return 'INVALID'\n    else:\n        digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n        if not all(i in digits for i in str(n)):\n            return 'INVALID'\n        else:\n            return f'{n} is a valid number'\n        \ndef main():\n    # print(validate(1))\n    print(validate(0))\n    print(validate(1.2))\n    print(validate(100000000000))\n    print(validate(10000000000))\n    print(validate(1000000000000))\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f=0\n    for i in n:\n        if (i<n[i]):\n            f=1\n            break\n    if (f==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    if(n<=0):\n        raise ValueError(\"n should be greater than 0\")\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def convert(digit):\n        '''\n        For conversion to digit, it returns the integer mapped to the corresponding digit.\n        '''\n        if digit == 0:\n            return 0\n        if digit == 1:\n            return 1\n        if digit == 2:\n            return 10\n        if digit == 3:\n            return 100\n        if digit == 4:\n            return 1000\n        if digit == 5:\n            return 10000\n        if digit == 6:\n            return 100000\n        if digit == 7:\n            return 1000000\n        if digit == 8:\n            return 10000000\n        if digit == 9:\n            return 100000000\n        if digit == 10:\n            return 1000000000\n        if digit == 11:\n            return 10000000000\n        if digit == 12:\n            return 1000000000000\n        if digit == 13:\n            return 10000000000000\n        if digit == 14:\n            return 100000000000000\n        if digit == 15:\n            return 1000000000000000\n        if digit == 16:\n            return 10000000000000000\n        if digit == 17:\n            return 100000000000000000\n        if digit == 18:\n            return 10000000000000000000\n        if digit == 19:\n            return 100000000000000020000\n        if digit == 20:\n            return 10000000000000003000000\n        if digit == 21:\n            return 10000000000000004000000\n        if digit == 22:\n            return 10000000000000005000000\n        if digit == 23:\n            return 10000000000000006000000\n        if digit == 24:\n            return 10000000000000007000000\n        if digit == 25:\n            return 10000000000000008000000\n        if digit == 26:\n            return 10000000000000009000000\n        if digit == 27:\n            return 1000000000000000100\n        if digit == 28:\n            return 10000000000000001200\n        if digit == 29:\n            return 10000000000000001300\n        if digit == 30:\n            return 10000000000000001400\n        if digit == 31:\n            return 10000000000000001500\n        if digit == 32:\n            return 10000000000000001600\n        if digit == 33:\n            return 10000000000000001700\n        if digit == 34:\n            return 10000000000000001800\n        if digit == 35:\n            return 10000000000000001900\n        if digit == 36:\n            return 10000000000000001A00\n        if digit == 37:\n            return 10000000000000001B00\n        if digit == 38:\n            return 10000000000000001C00\n        if digit == 39:\n            return 10000000000000001D00\n        if digit == 40:\n            return 10000000000000001E00\n        if digit == 41:\n            return 10000000000000001F00\n        if digit == 42:\n            return 10000000000000100\n        if digit == 43:\n            return 1000000000000011\n        if digit == 44:\n            return 1000000000000012\n        if digit == 45:\n            return 1000000000000013\n        if digit == 46:\n            return 1000000000000014\n        if digit == 47:\n            return 1000000000000015\n        if digit == 48:\n            return 1000000000000016\n        if digit == 49:\n            return 1000000000000017\n        if digit == 50:\n            return 1000000000000018\n        if digit == 51:\n            return 1000000000000019\n        if digit == 52:\n            return 1000000000000020\n        if digit == 53:\n            return 1000000000000021\n        if digit == 54:\n            return 1000000000000022\n        if digit == 55:\n            return 1000000000000023\n        if digit == 56:\n            return 1000000000000024\n        if digit == 57:\n            return 1000000000000025\n        if digit == 58:\n            return 1000000000000026\n        if digit == 59:\n            return 1000000000000027\n        if digit == 60:\n            return 1000000000000028\n        if digit == 61:\n            return 1000000000000029\n        if digit == 62:\n            return 1000000000000030\n        if digit == 63:\n            return 1000000000000031\n        if digit == 64:\n            return 1000000000000032\n        if digit == 65:\n            return 1000000000000033\n        if digit == 66:\n            return 1000000000000034\n        if digit == 67:\n            return 1000000000000035\n        if digit == 68:\n            return 1000000000000036\n        if digit == 69:\n            return 1000000000000037\n        if digit == 70:\n            return 1000000000000038\n        if digit == 71:\n            return 1000000000000039\n        if digit == 72:\n            return 1000000000000040\n        if digit == 73:\n            return 1000000000000041\n        if digit == 74:\n            return 1000000000000042\n        if digit == 75:\n            return 1000000000000043\n        if digit == 76:\n            return 1000000000000044\n        if digit == 77:\n            return 1000000000000045\n        if digit == 78:\n            return 1000000000000046\n        if digit == 79:\n            return 1000000000000047\n        if digit == 80:\n            return 1000000000000048\n        if digit == 81:\n            return 1000000000000049\n        if digit == 82:\n            return 1000000000000050\n        if digit == 83:\n            return 1000000000000051\n        if digit == 84:\n            return 1000000000000052\n        if digit == 85:\n            return 1000000000000053\n        if digit == 86:\n            return 1000000000000054\n        if digit == 87:\n            return 1000000000000055\n        if digit == 88:\n            return 1000000000000056\n        if digit == 89:\n            return 1000000000000057\n        if digit == 90:\n            return 1000000000000058\n        if digit == 91:\n            return 1000000000000059\n        if digit == 92:\n            return 1000000000000060\n        if digit == 93:\n            return 1000000000000061\n        if digit == 94:\n            return 1000000000000062\n        if digit == 95:\n            return 1000000000000063\n        if digit == 96:\n            return 1000000000000064\n        if digit == 97:\n            return 1000000000000065\n        if digit == 98:\n            return 1000000000000066\n        if digit == 99:\n            return 1000000000000067\n        if digit == 100:\n            return 1000000000000068\n        if digit == 101:\n            return 1000000000000069\n        if digit == 102:\n            return 1000000000000070\n        if digit == 103:\n            return 1000000000000071\n        if digit == 104:\n            return 1000000000000072\n        if digit == 105:\n            return 1000000000000073\n        if digit == 106:\n            return 1000000000000074\n        if digit == 107:\n            return 1000000000000075\n        if digit == 108:\n            return 1000000000000076\n        if digit == 109:\n            return 1000000000000077\n        if digit == 110:\n            return 1000000000000078\n        if digit == 111:\n            return 1000000000000079\n        if digit == 112:\n            return 1000000000000080\n        if digit == 113:\n            return 1000000000000081\n        if digit == 114:\n            return 1000000000000082\n        if digit == 115:\n            return 1000000000000083\n        if digit == 116:\n            return 1000000000000084\n        if digit == 117:\n            return 1000000000000085\n        if digit == 118:\n            return 1000000000000086\n        if digit == 119:\n            return 1000000000000087\n        if digit == 120:\n            return 1000000000000088\n        if digit == 121:\n            return 1000000000000089\n        if digit == 122:\n            return 1000000000000090\n        if digit == 123:\n            return 1000000000000091\n        if digit == 124:\n            return 1000000000000092\n        if digit == 125:\n            return 1000000000000093\n        if digit == 126:\n            return 1000000000000094\n        if digit == 127:\n            return 1000000000000095\n        if digit == 128:\n            return 1000000000000096\n        if digit == 129:\n            return 1000000000000097\n        if digit == 130:\n            return 1000000000000098\n        if digit == 131:\n            return 1000000000000099\n        if digit == 132:\n            return 101000\n        if digit == 133:\n            return 101001\n        if digit == 134:\n            return 101002\n        if digit == 135:\n            return 101003\n        if digit == 136:\n            return 101004\n        if digit == 137:\n            return 101005\n        if digit == 138:\n            return 101006\n        if digit == 139:\n            return 101007\n        if digit == 140:\n            return 101008\n        if digit == 141:\n            return 101009\n        if digit == 142:\n            return 10"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    list1=[]\n    for element in list:\n        list1.append(element)\n    for element in element:\n        if element==element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    if list is None or len(list) <= 0:\n        print('List is empty.')\n        return None\n    \n    for i in list:\n        if element == i:\n            print('Element found.')\n            return None\n            \n    print('Element not found.')\n            \n    return None\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for element in list:\n        if element == element:\n            count+=1\n    return count == len(list)\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n    \ndef check_linked_list(list):\n    '''\n    Write a function that takes in a list and returns a new list containing only the elements of the first half of the list.\n    '''\n    left = 0\n    right = len(list)//2\n    \n    while left < right:\n        temp = list[left]\n        list[left] = list[right]\n        list[right] = temp\n        left += 1\n        right -= 1\n    return list\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    else:\n        if len(list) == 2:\n            if list[0] == element and list[1] == element:\n                return True\n            else:\n                return False\n        else:\n            if len(list) == 3:\n                if list[0] == element and list[1] == element and list[2] == element:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if element in i:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    if element not in list:\n        raise Exception(\"Element not in list\")\n    else:\n        if list[0]!= element:\n            raise Exception(\"List contains duplicate items\")\n        else:\n            return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for el in list:\n        if el!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('[a-b]{2,3}')\n    return pattern.search(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace(\" \", \"\")\n    text = re.sub('[^A-Za-z0-9]', \"\", text)\n    text = re.sub('[A-Za-z0-9]', \"\", text)\n    text = re.sub('[0-9]', \"\", text)\n    text = re.sub('[^0-9]', \"\", text)\n    text = re.sub('[s]$', \"\", text)\n    text = text.replace(\". \", \"\")\n    text = text.replace(\"..\", \".\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\")\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"n\", \"\").replace(\"o\", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\")\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace("
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a\\w+b\\w+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Iterate through the text, look for any 'a' character followed by two or three 'b' characters.\n    # If found, return True, otherwise, return False.\n    pattern = re.compile(r'(?:[ab])')\n    match = pattern.search(text)\n    if match:\n        print(\"Match found!\")\n        return True\n    else:\n        print(\"No match\")\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_list = text.split()\n    if len(text_list)!= 3:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Dictionary to hold the letters of the text.\n    letters_dict = {\n    'a': '.-',\n    'b': '-...',\n    'c': '-.-.',\n    'd': '-..',\n    'e': '.',\n    'f': '..-.',\n    'g': '--.',\n    'h': '....',\n    'i': '..',\n    'j': '.---',\n    'k': '-.-',\n    'l': '.-..',\n    'm': '--',\n    'n': '-.',\n    'o': '---',\n    'p': '.--.',\n    'q': '--.-',\n    'r': '.-.',\n    's': '...',\n    't': '-',\n    'u': '..-',\n    'v': '...-',\n    'w': '.--',\n    'x': '-..-',\n    'y': '-.--',\n    'z': '--..',\n    ' ': '-',\n    '0': '-----',\n    '1': '.----',\n    '2': '..---',\n    '3': '...--',\n    '4': '....-',\n    '5': '.....',\n    '6': '-....',\n    '7': '--...',\n    '8': '---..',\n    '9': '----.'\n    }\n    # List to hold all the letters in the text.\n    letters = list(text)\n    # Creating an empty list for the result.\n    result = []\n    # Iterating through the letters in the text.\n    for letter in letters:\n        # Checking if the letter exists in the dictionary.\n        if letter in letters_dict:\n            # If the letter is in the dictionary, adding it to the result.\n            result.append(letters_dict[letter])\n        else:\n            # If the letter does not exist in the dictionary, returning an error message.\n            return f'Invalid text'\n    # Return a string containing the result.\n    return ''.join(result)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a_b_list = [b for b in text if b.startswith('a')]\n    if len(a_b_list) >= 2 or len(a_b_list) <= 3:\n        return False\n    return True\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters, followed by three 'c' characters.\n    '''\n    a_b_list = [b for b in text if b.startswith('a')]\n    if len(a_b_list) >= 3:\n        return False\n    if len(a_b_list) >= 2:\n        return False\n    if len(a_b_list) <= 1:\n        return False\n    return True\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters, followed by two or three 'c' characters, followed by four 'd' characters, followed by five 'e' characters, followed by five 'f' characters, followed by five 'g' characters, followed by five 'h' characters, followed by five 'i' characters, followed by five 'j' characters, followed by five 'k' characters, followed by five 'l' characters, followed by five'm' characters, followed by five 'n' characters, followed by five 'o' characters, followed by five 'p' characters, followed by five 'q' characters, followed by five 'r' characters, followed by five's' characters, followed by five 't' characters, followed by five 'u' characters, followed by five 'v' characters, followed by five 'w' characters, followed by five 'x' characters, followed by five 'y' characters, followed by five 'z' characters.\n    '''\n    a_b_list = [b for b in text if b.startswith('a')]\n    if len(a_b_list) >= 5:\n        return False\n    if len(a_b_list) >= 4:\n        return False\n    if len(a_b_list) >= 3:\n        return False\n    if len(a_b_list) >= 2:\n        return False\n    if len(a_b_list) <= 1:\n        return False\n    if len(a_b_list) <= 0:\n        return False\n    if len(a_b_list) <= 2:\n        return False\n    if len(a_b_list) <= 3:\n        return False\n    if len(a_b_list) <= 4:\n        return False\n    if len(a_b_list) <= 5:\n        return False\n    if len(a_b_list) <= 6:\n        return False\n    if len(a_b_list) <= 7:\n        return False\n    if len(a_b_list) <= 8:\n        return False\n    if len(a_b_list) <= 9:\n        return False\n    if len(a_b_list) <= 10:\n        return False\n    if len(a_b_list) <= 11:\n        return False\n    if len(a_b_list) <= 12:\n        return False\n    if len(a_b_list) <= 13:\n        return False\n    if len(a_b_list) <= 14:\n        return False\n    if len(a_b_list) <= 15:\n        return False\n    if len(a_b_list) <= 16:\n        return False\n    if len(a_b_list) <= 17:\n        return False\n    if len(a_b_list) <= 18:\n        return False\n    if len(a_b_list) <= 19:\n        return False\n    if len(a_b_list) <= 20:\n        return False\n    if len(a_b_list) <= 21:\n        return False\n    if len(a_b_list) <= 22:\n        return False\n    if len(a_b_list) <= 23:\n        return False\n    if len(a_b_list) <= 24:\n        return False\n    if len(a_b_list) <= 25:\n        return False\n    if len(a_b_list) <= 26:\n        return False\n    if len(a_b_list) <= 27:\n        return False\n    if len(a_b_list) <= 28:\n        return False\n    if len(a_b_list) <= 29:\n        return False\n    if len(a_b_list) <= 30:\n        return False\n    if len(a_b_list) <= 31:\n        return False\n    if len(a_b_list) <= 32:\n        return False\n    if len(a_b_list) <= 33:\n        return False\n    if len(a_b_list) <= 34:\n        return False\n    if len(a_b_list) <= 35:\n        return False\n    if len(a_b_list) <= 36:\n        return False\n    if len(a_b_list) <= 37:\n        return False\n    if len(a_b_list) <= 38:\n        return False\n    if len(a_b_list) <= 39:\n        return False\n    if len(a_b_list) <= 40:\n        return False\n    if len(a_b_list) <= 41:\n        return False\n    if len(a_b_list) <= 42:\n        return False\n    if len(a_b_list) <= 43:\n        return False\n    if len(a_b_list) <= 44:\n        return False\n    if len(a_b_list) <= 45:\n        return False\n    if len(a_b_list) <= 46:\n        return False\n    if len(a_b_list) <= 47:\n        return False\n    if len(a_b_list) <= 48:\n        return False\n    if len(a_b_list) <= 49:\n        return False\n    if len(a_b_list) <= 50:\n        return False\n    if len(a_b_list) <= 51:\n        return False\n    if len(a_b_list) <= 52:\n        return False\n    if len(a_b_list) <= 53:\n        return False\n    if len(a_b_list) <= 54:\n        return False\n    if len(a_b_list) <= 55:\n        return False\n    if len(a_b_list) <= 56:\n        return False\n    if len(a_b_list) <= 57:\n        return False\n    if len(a_b_list) <= 58:\n        return False\n    if len(a_b_list) <= 59:\n        return False\n    if len(a_b_list) <= 60:\n        return False\n    if len(a_b_list) <= 61:\n        return False\n    if len(a_b_list) <= 62:\n        return False\n    if len(a_b_list) <= 63:\n        return False\n    if len(a_b_list) <= 64:\n        return False\n    if len(a_b_list) <= 65:\n        return False\n    if len(a_b_list) <= 66:\n        return False\n    if len(a_b_list) <= 67:\n        return False\n    if len(a_b_list) <= 68:\n        return False\n    if len(a_b_list) <= 69:\n        return False\n    if len(a_b_list) <= 70:\n        return False\n    if len(a_b_list) <= 71:\n        return False\n    if len(a_b_list) <= 72:\n        return False\n    if len(a_b_list) <= 73:\n        return False\n    if len(a_b_list) <= 74:\n        return False\n    if len(a_b_list) <= 75:\n        return False\n    if len(a_b_list) <= 76:\n        return False\n    if len(a_b_list) <= 77:\n        return False\n    if len(a_b_list) <= 78:\n        return False\n    if len(a_b_list) <= 79:\n        return False\n    if len(a_b_list) <= 80:\n        return False\n    if len(a_b_list) <= 8"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if not isinstance(text, str):\n        return False\n    \n    text = text.replace('\\n','')\n    text = text.lower()\n    match_pattern = re.compile(\"^a[bc]{2}b$\")\n    result = match_pattern.search(text)\n    if result is None:\n        return False\n    \n    #print(\"Pattern: 'a' and 'b' is {0} and {1}\".format(result.group(), result.span()))\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if not text:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match('a.\\w+', text):\n        return True\n    elif re.match('a.b.\\w+', text):\n        return True\n    elif re.match('a.b\\w+', text):\n        return True\n    elif re.match('a\\w+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #  Create a new array to store the sums of sub-array for each repeated array\n    array = [0 for i in range(n+1)]\n    #  Initialize the sum of array\n    sum = 0\n    #  Loop through each number in array\n    for i in range(n):\n        #  Find sum of array\n        sum += a[i]\n        #  Recurse\n        if i+1 < n and array[i+1]!= 0:\n            #  Add the sum of array to the array\n            sum += array[i+1]\n        #  If sum of array is already in the array\n        if sum == k:\n            #  Return the maximum sum of the array\n            return max(a)\n        #  Increment the sum of array\n        sum = 0\n        #  Remove current number from array\n        a[i] = 0\n    #  If sum of array is not in the array\n    return -1\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*a[n-1] \n    \ndef min_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the smallest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*min(a[n-1:n+1]) \n    \ndef sum_sub_array(a, n): \n    '''\n    Write a function to calculate the sum of the array a using dynamic programming. \n    '''\n    dp = [0] + [a[0]] + [a[0] + a[1] for i in range(n-2)] + [0]\n    for i in range(2,n+1):\n        for j in range(1,i):\n            dp[i] = max(dp[i], dp[j]+a[i-1] + a[i])\n        dp[i] += dp[i-1]\n    return dp[n] \n    \ndef max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*sum(a) \n    \ndef min_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the smallest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*min(a) \n    \ndef sum_sub_array_length(a, n): \n    '''\n    Write a function to calculate the sum of the array a using dynamic programming. \n    '''\n    dp = [0] + [a[0]] + [a[0] + a[1] for i in range(n-2)] + [0]\n    for i in range(2,n+1):\n        for j in range(1,i):\n            dp[i] = max(dp[i], dp[j]+a[i-1] + a[i])\n        dp[i] += dp[i-1]\n    return dp[n] \n    \ndef max_sub_array_sum_repeated_length(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*sum(a) \n    \ndef min_sub_array_sum_repeated_length(a, n, k): \n    '''\n    Write a function to find the smallest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*min(a) \n    \ndef sum_sub_array_prod(a, n): \n    '''\n    Write a function to calculate the sum of the array a using dynamic programming. \n    '''\n    dp = [0] + [a[0]] + [a[0] + a[1] for i in range(n-2)] + [0]\n    for i in range(2,n+1):\n        for j in range(1,i):\n            dp[i] = max(dp[i], dp[j]+a[i-1] + a[i])\n        dp[i] += dp[i-1]\n    return dp[n] \n    \ndef max_sub_array_sum_repeated_prod(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*sum(a) \n    \ndef min_sub_array_sum_repeated_prod(a, n, k): \n    '''\n    Write a function to find the smallest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*min(a) \n    \ndef product_sub_array(a, n): \n    '''\n    Write a function to calculate the product of the array a using dynamic programming. \n    '''\n    dp = [0] + [a[0]] + [a[0] + a[1] for i in range(n-2)] + [0]\n    for i in range(2,n+1):\n        for j in range(1,i):\n            dp[i] = max(dp[i], dp[j]+a[i-1] + a[i])\n        dp[i] += dp[i-1]\n    return dp[n] \n    \ndef max_sub_array_sum_repeated_length_prod(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*sum(a) \n    \ndef min_sub_array_sum_repeated_length_prod(a, n, k): \n    '''\n    Write a function to find the smallest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*min(a) \n    \ndef product_sub_array_prod(a, n): \n    '''\n    Write a function to calculate the product of the array a using dynamic programming. \n    '''\n    dp = [0] + [a[0]] + [a[0] + a[1] for i in range(n-2)] + [0]\n    for i in range(2,n+1):\n        for j in range(1,i):\n            dp[i] = max(dp[i], dp[j]+a[i-1] + a[i])\n        dp[i] += dp[i-1]\n    return dp[n] \n    \ndef max_sub_array_sum_repeated_prod(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*sum(a) \n    \ndef min_sub_array_sum_repeated_prod(a, n, k): \n    '''\n    Write a function to find the smallest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*min(a) \n    \ndef product_sub_array_length(a, n): \n    '''\n    Write a function to calculate the product of the array a using dynamic programming. \n    '''\n    dp = [0] + [a[0]] + [a[0] + a[1] for i in range(n-2)] + [0]\n    for i in range(2,n+1):\n        for j in range(1,i):\n            dp[i] = max(dp[i], dp[j]+a[i-1] + a[i])\n        dp[i] += dp[i-1]\n    return dp[n] \n    \ndef max_sub_array_sum_repeated_length_prod(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*sum(a) \n    \ndef min_sub_array_sum_repeated_length_prod(a, n, k): \n    '''\n    Write a function to find the smallest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return (n+k-1)*min(a) \n    \ndef sum_sub_array_prod_length(a, n): \n    '''\n    Write a function to calculate the product of th"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max = 0\n    sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(k):\n            sum += a[i]\n        if sum > max:\n            max = sum\n    return max\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a_sum = 0\n    # Find the sum of a in range [1, n]\n    for i in range(1, n):\n        a_sum += a[i]\n    # Find the sum of the k-th repeated subarray of a in range [1, n]\n    for i in range(k-1):\n        a_sum += a[i]\n    # Return the maximum sum of subarray\n    return a_sum\n    \n    \ndef kth_largest_subarray_sum(a, n, k):\n    '''\n    Write a function to find the kth largest element in a contiguous array.\n    '''\n    a_sum = 0\n    # Find the sum of the k-th repeated subarray of a in range [1, n]\n    for i in range(k-1):\n        a_sum += a[i]\n    # Return the kth largest element\n    return a_sum\n    \n    \n    \ndef main():\n    n = 4\n    k = 2\n    #print(max_sub_array_sum_repeated([1, 3, 5, 7], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([1, 2, 4, 8], n, k))\n    #print(max_sub_array_sum_repeated([1, 2, 4, 8], n, k))\n    #print(max_sub_array_sum_repeated([], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([], n, k))\n    #print(max_sub_array_sum_repeated([2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([], n, k))\n    #print(max_sub_array_sum_repeated([2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 4, 2, 4], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub_array_sum_repeated([2, 2, 2, 2, 2], n, k))\n    #print(max_sub"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if a == []:\n        return 0\n    elif n < k:\n        return -1\n    else:\n        return max(a[:n] + a[n+1:] + [a[n]])\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a sliding window for a larger array of size n \n    n_sub_array = n // k\n    for i in range(k):\n        temp_array = []\n        for j in range(k):\n            temp_array.append(a[j])\n        a = temp_array\n    # Initialize sum array and max sum to 0\n    sum_array = [0] * (n + k - 1)\n    max_sum = 0\n    # Initialize sum to 0\n    for i in range(n):\n        sum_array[i] = a[i]\n    # Start from the end of the array and keep sliding\n    for i in range(n, 0, -1):\n        # Start with the smallest sum for the current window size\n        sum_array[i] = min(sum_array[i - k] + a[i], sum_array[i - 1])\n        # If the sum is greater than the max sum, update\n        if sum_array[i] > max_sum:\n            max_sum = sum_array[i]\n    # Return the max sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = a[:k]\n    sum_arr = sum(arr)\n    max_sum = 0\n    i = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    k = 1 #Set up the required array\n    L = len(a)\n    if L == 1: #Just one element to fit the array\n        return a[0]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_numbers = 0\n    for i in range(0, k):\n        sum_numbers = sum_numbers + a[i]\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    def is_square(n):\n        '''\n        Returns True if n is square and False if n is not square.\n        '''\n        if n == int(n) and n % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # your code goes here\n    result = 0\n    #print(n)\n    for x in range(1,n+1):\n        if x % 2 == 0:\n            result = result + (x**2)\n    return result\n    \n    #print(result)\n    #return result\n    \ndef prime_number(n):\n    '''\n    Write a python function takes in an integer n and returns the number of prime numbers that it has.\n    '''\n    # your code goes here\n    result = 0\n    #print(n)\n    for x in range(1,n+1):\n        if (x <= 1):\n            continue\n        else:\n            for y in range(2, x):\n                if (x % y == 0):\n                    break\n            else:\n                result = result + 1\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_sum = 0\n    for n in range(1, n):\n        square_sum += n * n\n    return square_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum = sum + (i**2)\n    return sum\n    "
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if i%2 == 0:\n            sum += i**2\n        else:\n            sum += i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(0, n+1):\n        s += i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even_sum = even_sum + i\n    return even_sum\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            length = max(length, len(list1[i][j]))\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for list1_index in range(len(list1)):\n        max_length = max(len(list1[list1_index]), max_length)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for x in list1:\n        if len(x) > max_len:\n            max_len = len(x)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = max([len(x) for x in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) > 0:\n        for i in range(len(list1)):\n            for j in range(len(list1[i])):\n                list1[i][j] = int(list1[i][j])\n                \n        return max(list1)\n    else:\n        return 0\n    \n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    \n    # return max(list1)\n    \n    \n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    \n    "
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_length = len(list1)\n    max_length = 0\n    for i in range(list_length):\n        for j in range(list_length):\n            if i == j:\n                continue\n            if list1[i][j] > max_length:\n                max_length = list1[i][j]\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return 0\n    else:\n        max_length = 0\n        for l in list1:\n            max_length = max(max_length, len(l))\n        return max_length\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 1\n    if k == n:\n        ways += 1\n    else:\n        for i in range(k + 1):\n            ways *= (2 * n - i) // i\n    print(ways)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(k == n): \n        return 1\n    elif (n == 2): \n        return 0\n    \n    if (n == 1 or k == 0): \n        return 0\n    \n    ways = 0\n    ways += count_no_of_ways(n - 1, k) \n    ways += count_no_of_ways(n - 1, k - 1) \n    ways += count_no_of_ways(n - 1, k + 1) \n    return ways \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n==0) and (k>=1):\n        return 0\n    if (n==0) and (k<=1):\n        return 1\n    if (n==1) and (k==1):\n        return 2\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Using helper function, inorder traversal of the forest\n    def dfs(n, k, visited, arr, color):\n        # To exit the loop\n        if (n > 2):\n            if (color == arr[n-1]):\n                visited[n-1] = 1\n            else:\n                return 0\n        # To exit the loop\n        if (n == 1 or k == 1):\n            return 1\n        # To exit the loop\n        return dfs(n, k, visited, arr, arr[n-1]) + dfs(n-1, k, visited, arr, arr[n-1])\n    # Checking inorder traversal of the forest\n    visited = [0] * n\n    arr = [0] * n\n    for i in range(n):\n        color = arr[i]\n        # To exit the loop\n        if (color == 0):\n            return 0\n        # To exit the loop\n        if (i == 0):\n            arr[i] = 1\n        # To exit the loop\n        elif (color == arr[i-1]):\n            # Checking inorder traversal of the forest\n            # Checking inorder traversal of the forest\n            return dfs(i, k, visited, arr, color)\n    return 0"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2:\n        return n\n    \n    left = 0\n    right = n - 1\n    count = 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 1: \n        return 0 \n    if k == 0: \n        return 1 \n    else: \n        return (count_no_of_ways(n - 1, k) + \n            count_no_of_ways(n - 1, k - 1)\n            + count_no_of_ways(n - 1, k - 2))\ndef fence_painter(n, k): \n    '''\n    Write a function to paint the fence. The function should take as parameters: \n    n: length of the fence \n    k: color of the fence \n    return the number of ways to paint the fence with n posts and k colors. \n    '''\n    return count_no_of_ways(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 1: \n        return 0\n    if k == 2: \n        return 1\n    \n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-3, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n<=2:\n        return n\n    if k<=1:\n        return 0\n    \n    return count_no_of_ways(n-2, k)+count_no_of_ways(n-1, k)"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k==0 or n==1:\n        return 1\n    \n    if n%2:\n        if k<2:\n            return 0\n        return count_no_of_ways(n//2,k-1) + count_no_of_ways(n//2,k)\n    else:\n        if k<2:\n            return 0\n        else:\n            return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    res = 0\n    if (n < m):\n        res = n\n    else:\n        res = m\n    return res\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        a,b = m,n\n        m,n = n,m\n    p = 0\n    i = 1\n    while a!= 0 and b!= 0:\n        if a%i == 0:\n            p += a//i\n        if b%i == 0:\n            p += b//i\n        i += 1\n        a,b = a//i,b//i\n    return p\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        print(n/m)\n    except ZeroDivisionError:\n        print(\"No value for division\")\n        return None\n    finally:\n        print(\"\")\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    try:\n        return n * factorial(n-1)\n    except ZeroDivisionError:\n        print(\"No value for division\")\n        return None\n    finally:\n        print(\"\")\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m: return n\n    if m == 0: return 0\n    if n < m:\n        n,m = m,n\n    while m:\n        if n >= m: return n\n        n,m = m,n-m\n    return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    elif m==0:\n        return 1\n    elif n>0 and m>0:\n        return n//m\n    else:\n        return -1\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    div = m\n    #quotient = m / div\n    quotient = (m/div)\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a=0\n    b=1\n    if m%2==0:\n        b=0\n    for i in range(1,int(m/2)+1):\n        if m%i==0:\n            a=i\n            break\n    else:\n        if m==1:\n            return a\n        else:\n            return 0\n    return a\n    \n    \ndef main():\n    #print(find(12,45))\n    #print(find(12,24))\n    #print(find(15,6))\n    #print(find(60,73))\n    print(find(12,8))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n / 2\n    while q >= m:\n        m = q\n        q = n / m\n    return m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m) + (n%m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return n\n    else:\n        return find(n,m//10) + m%10\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    angle_of_triangle = math.pi/6\n    angle_of_right_angle = angle_of_triangle*0.5\n    # if its a triangle, it will return the third side\n    if w==h or (w==1 and h==2):\n        if w==h:\n            return w/h\n        else:\n            return math.sqrt((w**2)+(h**2))/math.sqrt((w**2)+(h**2))\n    else:\n        # if its a square, it will return the third side\n        if w==h:\n            return w/h\n        else:\n            return math.sqrt((w**2)+(h**2))/math.sqrt((w**2)+(h**2))\n    \ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    \n    angle_of_triangle = math.pi/6\n    angle_of_right_angle = angle_of_triangle*0.5\n    # if its a triangle, it will return the third side\n    if w==h or (w==1 and h==2):\n        if w==h:\n            return w/h\n        else:\n            return math.sqrt((w**2)+(h**2))/math.sqrt((w**2)+(h**2))\n    else:\n        # if its a square, it will return the third side\n        if w==h:\n            return w/h\n        else:\n            return math.sqrt((w**2)+(h**2))/math.sqrt((w**2)+(h**2))\n    \ndef triangle_area(a, b, c):\n    '''\n    Write a function that returns the area of a triangle.\n    '''\n    return math.sqrt((b**2)-(4*a*c))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        return 0\n    elif w<h:\n        return (h-w)/2\n    else:\n        return 0\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h == 0:\n        if w < 0:\n            return (0,-1)\n        elif w == 0:\n            return (0,1)\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-2)))\n    elif h == 1:\n        if w < 0:\n            return (0,1)\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-1)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-1)))\n    elif h == 2:\n        if w < 0:\n            return (math.sqrt(2*h*(h-1)),0)\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-1)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-1)))\n    elif h == 3:\n        if w < 0:\n            return (math.sqrt(2*h*(h-2)),0)\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-2)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-2)))\n    elif h == 4:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-3)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-3)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-3)))\n    elif h == 5:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-4)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-4)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-4)))\n    elif h == 6:\n        if w < 0:\n            return (math.sqrt(2*h*(h-5)),0)\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-5)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-5)))\n    elif h == 7:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-6)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-6)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-6)))\n    elif h == 8:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-7)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-7)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-7)))\n    elif h == 9:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-8)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-8)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-8)))\n    elif h == 10:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-9)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-9)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-9)))\n    elif h == 11:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-10)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-10)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-10)))\n    elif h == 12:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-11)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-11)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-11)))\n    elif h == 13:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-12)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-12)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-12)))\n    elif h == 14:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-13)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-13)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-13)))\n    elif h == 15:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-14)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-14)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-14)))\n    elif h == 16:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-15)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-15)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-15)))\n    elif h == 17:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-16)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-16)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-16)))\n    elif h == 18:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-17)))\n        elif w == 0:\n            return (math.sqrt(2*h),math.sqrt(2*h*(h-17)))\n        else:\n            return (math.sqrt(2*w*(w-2)),math.sqrt(2*h*(h-17)))\n    elif h == 19:\n        if w < 0:\n            return (0,math.sqrt(2*h*(h-18)))\n        elif "
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w/2\n    b = h/2\n    if b < a:\n        t = b\n        r = a\n    else:\n        t = a\n        r = b\n    phi = math.atan(1/r)\n    return t,r,phi\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x=0\n    for i in range(0,int(math.pi/2)):\n        x+=w\n        x+=h\n        x*=1/2\n    return x\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    l=[]\n    for i in range(w):\n        for j in range(h):\n            l.append(w/2)\n    return l\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (math.sqrt((w**2+h**2)**(1/2)))/math.sqrt(2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = 0\n    # Corner cases\n    if (w*h < 1):\n        side = h\n        return side\n    else:\n        # Determine the angle\n        angle = w * (math.atan(h/w))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (h/2)+(w/2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c=0\n    for i in range(w):\n        for j in range(h):\n            if math.sqrt((w-i)*(h-j))>c:\n                c=math.sqrt((w-i)*(h-j))\n    print(c)\n    return c\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(0,len(listval)-1):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    if len(listval) == 1:\n        return listval[0]\n    return max(listval)\n    "
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for i in range(0, len(listval)):\n        if listval[i] > listval[i+1]:\n            listval[i], listval[i+1] = listval[i+1], listval[i]\n    return(listval[i])\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value=0\n    for x in listval:\n        if x>max_value:\n            max_value=x\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for element in listval:\n        if element > maxval:\n            maxval = element\n    return maxval\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # YOUR CODE HERE\n    \n    if number==0:\n        return 0\n    if number==1:\n        return 1\n    sum=0\n    for i in range(1,number):\n        if number%i==0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    print('The sum of the divisors of {} is {}'.format(number, sum(map(lambda x: x % 2, range(1, number + 1)))))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        div_list = []\n        for i in range(1,number):\n            if number % i == 0:\n                div_list.append(i)\n        return sum(div_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return sum_div(number-1) + number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def check(x):\n        if(x%2 == 0):\n            return \"Found\"\n        else:\n            return \"Not Found\"\n    def get_divisors(x):\n        '''\n        Return all divisors of the input number.\n        '''\n        result = []\n        divisors = []\n        for i in range(1,x+1):\n            if(x%i == 0):\n                if(i not in result):\n                    divisors.append(i)\n                    result.append(i)\n        return divisors\n    if(number<2):\n        return 0\n    if(number==2):\n        return 2\n    if(check(number)==\"Found\"):\n        return number\n    divisors = get_divisors(number)\n    if(len(divisors)<2):\n        return 0\n    answer = 0\n    for i in range(len(divisors)):\n        answer+=divisors[i]\n    return answer\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n    divisors = []\n    for divisor in range(1, int(number**0.5) + 1):\n        if number % divisor == 0:\n            divisors.append(divisor)\n            if divisor!= divisors[-1]:\n                divisors.append(divisors[-1])\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    num = number\n    div = 2\n    while num % div!= 0:\n        div += 1\n        num = num // div\n    return num\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 1\n    if number % 2 == 0:\n        return 2\n    else:\n        return 3\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Check if number is even or odd\n    # if even - odd check all multiples of square\n    # if odd - check all multiples of square + 1\n    # if even - odd - return product of all\n    # return product\n    #\n    # # if odd - return product of all multiples of square\n    # # since if even return all multiples\n    # # so we don't have to check for whole numbers\n    # # and just return multiples of square\n    # # which is sum of multiples\n    # # so we just have to check if multiple of both squared\n    # # if it's a multiple of both squares\n    # # return the product of all multiples\n    # return (number * (number - 1) * (number - 2) * (number - 3)\n    #         if (number & (number - 1))\n    #         else number)\n    #\n    # # This only works if we are checking for multiple of both\n    # # squares\n    # if (number & (number - 1))\n    #     return number * (number - 1) * (number - 2) * (number - 3)\n    #\n    # # if it's a multiple of both squares\n    # return (number * (number - 1)\n    #         if (number & (number - 1))\n    #         else number)\n    #\n    # # This only works if we are checking for a multiple of both squares\n    # # This does not work because the square divisor is not\n    # # always one\n    # if (number & (number - 1))\n    #     return number * (number - 1)\n    #\n    # return (number * (number - 1)\n    #         if (number & (number - 1))\n    #         else number)\n    \n    return (number * (number - 1)\n        if (number & (number - 1))\n        else number)"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n    elif number == 2:\n        return 1\n    elif number % 2 == 0:\n        return sum_div(number-1) + sum_div(number+1)\n    else:\n        return sum_div(number-1) + sum_div(number+1) + number\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    invCount = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                invCount += 1\n    return invCount\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv=0\n    n=len(arr)\n    for i in range(0,n-1):\n        inv=0\n        for j in range(0,n-i-1):\n            if arr[j]>arr[j+1]:\n                inv=inv+1\n        if inv==0:\n            return n-i\n        else:\n            return inv\n    return n-1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    i = 0\n    j = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            inversions += 1\n            i = i+1\n        elif arr[i] < arr[i+1]:\n            j = j+1\n            inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    total_inversions = 0\n    \n    for i in range(len(arr)):\n        total_inversions += (arr[i]-i)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[j] < arr[i]):\n                total_inversions += 1\n    \n    return total_inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    l = len(arr)\n    inv = 0\n    for i in range(l):\n        for j in range(i,l):\n            if (arr[j] > arr[i]):\n                inv += 1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i = 0\n    j = 0\n    invCount = 0\n    while(j < len(arr)):\n        if(arr[j] < arr[i]):\n            i = i + 1\n        elif(arr[i] > arr[j]):\n            j = j + 1\n        invCount = invCount + j - i\n    return invCount\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0 \n    inv_array = arr.copy()\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i > j:\n                break \n            if arr[i] < arr[j]:\n                inv_count += 1\n    return inv_count \n    \n    \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    invCount = []\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] > arr[j]:\n                invCount.append(arr[i])\n    return len(invCount)\n    "
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr == []:\n        return 0\n    Inv_Count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j] > arr[i]:\n                Inv_Count += 1\n    return Inv_Count\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for list2 in list1:\n        if type(list2) is list:\n            flattened += flatten_list(list2)\n        else:\n            flattened.append(list2)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result\n    \ndef compare_lists(list1,list2):\n    '''\n    Write a function to compare a given list structure with another given list structure.\n    '''\n    result = True\n    for item in list1:\n        if item not in list2:\n            result = False\n            break\n    return result\n        \ndef is_palindrome(word):\n    '''\n    Write a function to check if the word is a palindrome or not.\n    '''\n    result = False\n    for i in range(len(word)//2):\n        if word[i]!= word[len(word)-1-i]:\n            result = False\n            break\n    return result\n    \ndef is_palindrome_2(word):\n    '''\n    Write a function to check if the word is a palindrome or not.\n    '''\n    result = True\n    for i in range(len(word)//2):\n        if word[i]!= word[len(word)-1-i]:\n            result = False\n            break\n    return result\n    \ndef remove_spaces(word):\n    '''\n    Write a function to remove spaces from a given word.\n    '''\n    result = \"\"\n    for i in range(len(word)):\n        if word[i]!= \" \":\n            result += word[i]\n        else:\n            break\n    return result\n    \ndef is_palindrome_3(word):\n    '''\n    Write a function to check if the word is a palindrome or not.\n    '''\n    result = True\n    for i in range(len(word)):\n        if word[i]!= word[len(word)-1-i]:\n            result = False\n            break\n    return result\n    \ndef read_file(filename):\n    '''\n    Reads a given file and returns a list of words in a dictionary.\n    '''\n    with open(filename,'r') as f:\n        all_words = f.read()\n        all_words = all_words.split()\n    return all_words\n    \ndef write_file(filename,word_list):\n    '''\n    Writes a given list of words to a given file.\n    '''\n    with open(filename,'w') as f:\n        for item in word_list:\n            f.write(item+\"\\n\")\n            \ndef write_file_2(filename,word_list):\n    '''\n    Writes a given list of words to a given file.\n    '''\n    with open(filename,'w') as f:\n        for item in word_list:\n            f.write(item[1:]+\"\\n\")\n            \ndef read_file_2(filename):\n    '''\n    Reads a given file and returns a list of words in a dictionary.\n    '''\n    with open(filename,'r') as f:\n        all_words = f.read()\n        all_words = all_words.split()\n    return all_words\n    \ndef read_file_3(filename):\n    '''\n    Reads a given file and returns a list of words in a dictionary.\n    '''\n    with open(filename,'r') as f:\n        all_words = f.read()\n        all_words = all_words.split('\\n')\n    return all_words\n    \ndef remove_spaces_2(word_list):\n    '''\n    Reads a given file and returns a list of words in a dictionary.\n    '''\n    result = []\n    for word in word_list:\n        if word!= \" \":\n            result.append(word.strip())\n    return result\n    \ndef remove_spaces_3(word_list):\n    '''\n    Reads a given file and returns a list of words in a dictionary.\n    '''\n    result = []\n    for word in word_list:\n        if word!= \" \":\n            result.append(word)\n    return result\n    \ndef replace_spaces_2(word_list):\n    '''\n    Reads a given file and returns a list of words in a dictionary.\n    '''\n    result = []\n    for word in word_list:\n        if word!= \" \":\n            result.append(word)\n    return result\n    \ndef replace_spaces_3(word_list):\n    '''\n    Reads a given file and returns a list of words in a dictionary.\n    '''\n    result = []\n    for word in word_list:\n        if word!= \" \":\n            result.append(word)\n    return result\n    \ndef is_valid_input(input_string):\n    '''\n    Reads a given input and checks whether it is a valid input or not.\n    '''\n    if type(input_string)!= str:\n        return False\n    if input_string == \"\":\n        return False\n    \n    \n    return True\n    \n    \ndef is_in_list(input_string, word_list):\n    '''\n    Reads a given input and checks whether it is a valid input or not.\n    '''\n    for i in word_list:\n        if input_string in i:\n            return True\n    return False\n    \ndef is_in_list_2(input_string, word_list):\n    '''\n    Reads a given input and checks whether it is a valid input or not.\n    '''\n    for i in word_list:\n        if i in input_string:\n            return True\n    return False\n    \ndef is_in_list_3(input_string, word_list):\n    '''\n    Reads a given input and checks whether it is a valid input or not.\n    '''\n    for i in word_list:\n        if i in input_string:\n            if i not in word_list:\n                return False\n    return True\n    \ndef is_in_list_4(input_string, word_list):\n    '''\n    Reads a given input and checks whether it is a valid input or not.\n    '''\n    for i in word_list:\n        if i in input_string:\n            if i not in word_list:\n                return False\n            for j in word_list:\n                if i in j:\n                    return True\n    return False\n    \ndef is_in_list_5(input_string, word_list):\n    '''\n    Reads a given input and checks whether it is a valid input or not.\n    '''\n    for i in word_list:\n        if i in input_string:\n            if i not in word_list:\n                return False\n            for j in word_list:\n                if i in j:\n                    return True\n    return False\n    \ndef is_in_list_6(input_string, word_list):\n    '''\n    Reads a given input and checks whether it is a valid input or not.\n    '''\n    for i in word_list:\n        if i in input_string:\n            if i not in word_list:\n                return False\n    return True\n    \ndef is_in_list_7(input_string, word_list):\n    '''\n    Reads a given input and checks whether it is a valid input or not.\n    '''\n    for i in word_list:\n        if i in input_string:\n            if i not in word_list:\n                return False\n            for j in word_list:\n                if i in j:\n                    return True\n    return False\n    \ndef is_in_list_8(input_string, word_list):\n    '''\n    Reads a given input and checks whether it is a valid input or not.\n    '''\n    for i in word_list:\n        if i in input_string:\n            if i not in word_list:\n                return False\n            for j in word_list:\n                if i in j:\n                    return True\n    return False\n    \ndef count_words_in_list(word_list):\n    '''\n    Reads a given list and returns the number of words in the list.\n    '''\n    result = 0\n    for word in word_list:\n        if type(word) == list:\n            result += len(word)\n        else:\n            result += 1\n    return resul"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for item in list1:\n        if isinstance(item, (list, tuple)):\n            output.extend(flatten_list(item))\n        else:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result=[]\n    if type(list1)==list:\n        for i in range(len(list1)):\n            result.append(list1[i])\n    else:\n        result=[]\n        for i in list1:\n            if type(i)==list:\n                result+=flatten_list(i)\n            else:\n                result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    return flatten_list(list(list1[0])) + flatten_list(list(list1[1]))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 is None:\n        return None\n    if list1 == []:\n        return list1\n    if type(list1[0]) is list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[0] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1,list):\n        flatten_list(list1[0])\n        for i in list1[1:]:\n            flatten_list(i)\n    else:\n        return [list1]\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, list):\n        return [item for sublist in list1 for item in flatten_list(sublist)]\n    else:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # TODO: Write your code here.\n    if type(list1) == list:\n        if type(list1)!= list:\n            raise TypeError('\"list\" is not a list')\n        for i in list1:\n            flatten_list(i)\n    elif type(list1) == dict:\n        if type(list1) == dict:\n            for i in list1:\n                flatten_list(i)\n        else:\n            raise TypeError('\"list\" is not a dict')\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a default dictionary to store the values\n    d = defaultdict(int)\n    # Iterate over the list of tuples\n    for name, (link, title, datetime) in stdata:\n        # Add the link\n        d[link] = d.get(link, 0) + 1\n    # Sort the dictionary\n    d = dict(sorted(d.items(), key=lambda item: item[1]))\n    # Find the highest value\n    highest = max(d.values())\n    # Return the highest value\n    return highest\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # If list is empty return None\n    if not stdata:\n        return None\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n_combs = 0\n    max_aggregate = 0\n    # for key in stdata:\n    #     n_combs += len(stdata[key])\n    #     if n_combs > max_aggregate:\n    #         max_aggregate = n_combs\n    #     print(\"max_aggregate\", max_aggregate)\n    \n    for key in stdata:\n        for entry in stdata[key]:\n            n_combs += 1\n        if n_combs > max_aggregate:\n            max_aggregate = n_combs\n        print(\"max_aggregate\", max_aggregate)\n        \n    print(\"max_aggregate\", max_aggregate)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = dict()\n    total_price = 0\n    for item in stdata:\n        if item[0] not in aggregate.keys():\n            aggregate[item[0]] = int(item[1])\n        else:\n            aggregate[item[0]] = int(aggregate[item[0]]) + int(item[1])\n        total_price += int(item[1])\n    print(total_price)\n    return (aggregate, total_price)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Implement your solution here.\n    return sorted(stdata, key=lambda x: x[1], reverse=True)[0][1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    tuple_dict = defaultdict(list)\n    for (a,b,c,d,e,f,g) in stdata:\n        tuple_dict[(a,b,c,d,e,f,g)].append((a,b,c,d,e,f,g))\n    max_value = 0\n    max_key = ()\n    for (a,b,c,d,e,f,g) in tuple_dict:\n        if len(tuple_dict[(a,b,c,d,e,f,g)]) > 0:\n            key_value_dict = defaultdict(list)\n            for tup in tuple_dict[(a,b,c,d,e,f,g)]:\n                key_value_dict[tup[2]].append(tup)\n            for key in key_value_dict:\n                if key_value_dict[key].count(0) > max_value:\n                    max_value = key_value_dict[key].count(0)\n                    max_key = key\n    return max_key\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    agg = 0\n    for row in stdata:\n        agg+=row[1]\n    return agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    st_max_aggregate = 0\n    # for each tuple\n    for i in range(n):\n        # for each column\n        for j in range(n-i):\n            # calculate the aggregate\n            a = stdata[j][1] + stdata[j+i][1]\n            # update the maximum aggregate\n            if a > st_max_aggregate:\n                st_max_aggregate = a\n    return st_max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_values = []\n    for tuple in stdata:\n        max_aggregate_values.append(max(tuple))\n    return max_aggregate_values\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for s in stdata:\n        max_aggregate = max(max_aggregate,s[-1])\n    return max_aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Write your code here.\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    bit_0 = n - 1\n    count = 1\n    for i in range(2, 2**n):\n        if bit_0 % 2 == 1:\n            count += 1\n            bit_0 = bit_0 // 2\n        else:\n            bit_0 = bit_0 // 2 + 1\n        count += count_binary_seq(n - i)\n    return count\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # for i in range(2**n):\n    #     sum_x = 0\n    #     sum_y = 0\n    #     for j in range(n):\n    #         sum_x += (i & (1 << j))\n    #         sum_y += (i & (1 << (n - 1 - j)))\n    #         # print(i, sum_x)\n    #         # print(i, sum_y)\n    #     # print(sum_x, sum_y)\n    #     # print(sum_x == sum_y)\n    #     if sum_x == sum_y:\n    #         print(sum_x)\n    #     if sum_x == 0:\n    #         return -1\n    #     if sum_y == 0:\n    #         return -1\n    #     return (sum_x + sum_y) % (2 ** n)\n        \n    binary_sum = [0] * (n + 1)\n    for i in range(2 ** n):\n        binary_sum[i >> 1] += i\n        binary_sum[i & (2 ** (n - 1))] -= (i >> 1)\n        \n    total_sum = 0\n    for i in range(n + 1):\n        total_sum += binary_sum[i]\n    return total_sum % (2 ** n)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==2:\n        return 1\n    if n==1:\n        return 0\n    if n==0:\n        return 1\n    num=0\n    m=int(n/2)\n    while m<n:\n        num+=count_binary_seq(n-m)\n        m+=1\n    return num\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    def add_binary(n, a, b):\n        '''\n        Add binary number to array.\n        '''\n        return a + n*b\n    for i in range(0,n):\n        a = add_binary(i,0,1)\n        b = add_binary(i,1,0)\n        if a == b:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq(n): \n        # count_binary_seq(1) = 1\n        # count_binary_seq(2) = 2\n        # count_binary_seq(3) = 1\n        # count_binary_seq(4) = 4\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base case\n    if n < 2:\n        return 0\n    # if the given sum is not equal to the value of first n bits then we will have no binary sequence\n    if n > 2 and n % 2!= 0:\n        return 1\n    # dp table\n    dp = [[0] * (n+1) for _ in range(2)]\n    # base case\n    for i in range(1, 2 * n + 1):\n        # if the first bit of i is 1 then it is not a zero so we will add 1 to i\n        if i & 1 == 1:\n            dp[0][i] = 1\n        else:\n            dp[0][i] = 0\n    # since all the bits are equal to 0 so we have to add 1 to all the i that are odd\n    for i in range(2, 2 * n + 1):\n        # if the first bit of i is 1, we will add 1 to i\n        if i & 1 == 1:\n            dp[1][i] = 1\n        else:\n            dp[1][i] = 0\n    # check if the sum is equal to the sum of first and last bits\n    for i in range(n, 2 * n + 1):\n        # add 1 to the i that is odd\n        if i & 1 == 1:\n            dp[0][i] = dp[1][i]\n        else:\n            dp[0][i] = dp[0][i - 1]\n    # check if the sum is equal to the sum of the last two bits\n    for i in range(1, n + 1):\n        # add 1 to the i that is odd\n        if i & 1 == 1:\n            dp[0][n + i] = dp[0][n - i]\n        else:\n            dp[0][n + i] = dp[0][n + i - 1]\n    # check if the sum is equal to the sum of the first two bits\n    for i in range(n - 1, n, -1):\n        # add 1 to the i that is odd\n        if i & 1 == 1:\n            dp[1][i] = dp[0][i]\n        else:\n            dp[1][i] = dp[1][i + 1]\n    # return the sum of the two binary sequences\n    return sum(dp[0]) + sum(dp[1])\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (count_binary_seq(n-1) + count_binary_seq(n-2))\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    num_of_binary_sequence = 0\n    num_of_binary_sequence += count_binary_seq_recursive(n, 0, 0)\n    num_of_binary_sequence += count_binary_seq_recursive(n, 0, 1)\n    num_of_binary_sequence += count_binary_seq_recursive(n, 1, 0)\n    num_of_binary_sequence += count_binary_seq_recursive(n, 1, 1)\n    return num_of_binary_sequence\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def count_binary_seq(n):\n        n1 = n >> 1\n        n2 = n - n1\n        ans = 0\n        \n        while n1!= 0:\n            if (n2 & 1) == 1:\n                ans += 1\n            n2 = n2 >> 1\n            n1 = n1 >> 1\n            \n        return ans\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    if type(d) is list:\n        return max([dict_depth(i) for i in d]) + 1\n    else:\n        return 1 + max(dict_depth(d.keys()), dict_depth(d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        if len(d) == 0:\n            return 0\n        elif len(d) == 1:\n            return 1\n        else:\n            return dict_depth(d[1]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        print('Invalid dictionary.')\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dfs(node):\n        if node == '$':\n            return 1\n        if node[0] == '{':\n            return dfs(node[1:]) + 1\n        if node[0] == '[':\n            return dfs(node[1:]) + 1 + dfs(node[2:])\n        return dfs(node[1:])\n    return dfs(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d, depth=1):\n        if not d:\n            return depth\n        depth += 1\n        for k, v in d.items():\n            if depth == v:\n                return depth\n            depth = depth * depth\n        return depth\n    if type(d) is dict:\n        return depth(d)\n    elif type(d) is list:\n        return depth(d, 0)\n    else:\n        return depth(d, 1)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(node, depth=0):\n        if depth == len(d):\n            return depth\n        depth = depth + 1\n        for k,v in d.items():\n            if isinstance(v, dict_depth):\n                return depth\n            depth = depth + depth_of_dict(d[k])\n        return depth\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d = dict(d)\n    return len(d)"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def recurse(obj, depth=0):\n        if isinstance(obj, dict):\n            yield depth, obj\n            for depth, subobj in recurse(obj[key], depth+1):\n                yield depth, subobj\n        else:\n            yield depth, obj\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    print(d)\n    depth = 0\n    while '.' in d:\n        depth += 1\n        d = d.replace('.','.' + '.'*depth)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if 'None' in d:\n        return 'NONE'\n    elif len(d) == 0:\n        return 'EMPTY'\n    elif type(d) is dict:\n        return dict_depth(d.keys())\n    else:\n        return d.get(list(d.keys())[-1])\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if(arr[i]==index) :\n            if(rotations == 1) :\n                index = i\n            elif(rotations == -1) :\n                index = len(arr) - i - 1\n            break\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr):\n        return arr[index]\n    if rotations == 1:\n        return arr[index]\n    elif rotations > 1:\n        index_copy = index\n        for i in range(rotations):\n            for i in range(len(arr)-rotations):\n                index_copy += 1\n                if i >= len(arr)-rotations:\n                    index_copy = 0\n                index = arr[index_copy]\n        return index\n    else:\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(\"Enter the element whose index you want to find: \")\n    element = int(input())\n    print(\"rotations: \",rotations)\n    print(\"Index: \",index)\n    rotation = 1\n    for i in range(rotations) :\n        element = arr[index]\n        index = (index + element)%len(arr)\n    print(\"Element at index: \",element,\"is located at index: \",index)\n    \n    \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr) == 0 :\n        return None\n    elif len(arr) == 1 :\n        return arr[0]\n    elif index >= len(arr) :\n        return None\n    else :\n        new_index = index\n        new_index += rotations\n        return arr[new_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while end >= start:\n        mid = (start + end) // 2\n        if (ranges[mid][0] >= index) and (ranges[mid][1] <= index):\n            end = mid\n        elif ranges[mid][0] <= index:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if ranges[end][0] <= index:\n        return arr[end]\n    else:\n        return arr[start]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges[0][1]):\n        for j in range(ranges[1][1]):\n            if arr[index + i][j] == rotations[0]:\n                return arr[index + i][j]\n            if arr[index + i][j] == rotations[1]:\n                return arr[index + i][j]\n            if arr[index + i][j] == rotations[2]:\n                return arr[index + i][j]\n            if arr[index + i][j] == rotations[3]:\n                return arr[index + i][j]\n            if arr[index + i][j] == rotations[4]:\n                return arr[index + i][j]\n    else:\n        return False\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations + 1\n    \n    if r >= len(arr) or r < 0:\n        return -1\n    \n    if rotations == len(ranges):\n        return arr[index]\n    \n    if ranges[rotations] <= r < ranges[rotations+1]:\n        return find_Element(arr,ranges,rotations,index)\n    else:\n        return find_Element(arr,ranges,rotations,index+1)\n    "
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #initialize current and previous index\n    curr_index = 0\n    previous_index = 0\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # base case\n    if arr[index] == 0 :\n        return index\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # start = True\n    s = \"\"\n    for i in words:\n        if i.startswith(\"p\"):\n            # start = False\n            # s += i + \" \"\n            # print(i,'start')\n            s += \" \"\n            # print(i, 'p')\n            # print(s)\n        else:\n            # print(i, 'end')\n            s += i\n    return s\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word = \"\"\n    for i in words:\n        if i[0] == 'p':\n            word += i[1:]\n    return word\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start = words[0].lower()\n    p = []\n    for w in words:\n        if w.lower().startswith(start):\n            p.append(w)\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def getp(word):\n        if word[0] == 'p':\n            return word[1:]\n        return word[1:]\n    def getp2(word):\n        if word[0] == 'p':\n            return word[1:]\n        return word[0]\n    def getp3(word):\n        if word[0] == 'p':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getp(words[0])\n    else:\n        return getp(words[0]) + getp2(words[1])\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    def getq(word):\n        if word[0] == 'q':\n            return word[1:]\n        return word[1:]\n    def getq2(word):\n        if word[0] == 'q':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getq(words[0])\n    else:\n        return getq(words[0]) + getq2(words[1])\ndef start_withd(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'd'.\n    '''\n    def getd(word):\n        if word[0] == 'd':\n            return word[1:]\n        return word[1:]\n    def getd2(word):\n        if word[0] == 'd':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getd(words[0])\n    else:\n        return getd(words[0]) + getd2(words[1])\ndef start_withe(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'e'.\n    '''\n    def gete(word):\n        if word[0] == 'e':\n            return word[1:]\n        return word[1:]\n    def gete2(word):\n        if word[0] == 'e':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return gete(words[0])\n    else:\n        return gete(words[0]) + gete2(words[1])\ndef start_withf(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'f'.\n    '''\n    def getf(word):\n        if word[0] == 'f':\n            return word[1:]\n        return word[1:]\n    def getf2(word):\n        if word[0] == 'f':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getf(words[0])\n    else:\n        return getf(words[0]) + getf2(words[1])\ndef start_withg(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'g'.\n    '''\n    def getg(word):\n        if word[0] == 'g':\n            return word[1:]\n        return word[1:]\n    def getg2(word):\n        if word[0] == 'g':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getg(words[0])\n    else:\n        return getg(words[0]) + getg2(words[1])\ndef start_withh(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'h'.\n    '''\n    def geth(word):\n        if word[0] == 'h':\n            return word[1:]\n        return word[1:]\n    def geth2(word):\n        if word[0] == 'h':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return geth(words[0])\n    else:\n        return geth(words[0]) + geth2(words[1])\ndef start_withi(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'i'.\n    '''\n    def geti(word):\n        if word[0] == 'i':\n            return word[1:]\n        return word[1:]\n    def geti2(word):\n        if word[0] == 'i':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return geti(words[0])\n    else:\n        return geti(words[0]) + geti2(words[1])\ndef start_withj(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'j'.\n    '''\n    def getj(word):\n        if word[0] == 'j':\n            return word[1:]\n        return word[1:]\n    def getj2(word):\n        if word[0] == 'j':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getj(words[0])\n    else:\n        return getj(words[0]) + getj2(words[1])\ndef start_withk(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'k'.\n    '''\n    def getk(word):\n        if word[0] == 'k':\n            return word[1:]\n        return word[1:]\n    def getk2(word):\n        if word[0] == 'k':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getk(words[0])\n    else:\n        return getk(words[0]) + getk2(words[1])\ndef start_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    def getl(word):\n        if word[0] == 'l':\n            return word[1:]\n        return word[1:]\n    def getl2(word):\n        if word[0] == 'l':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getl(words[0])\n    else:\n        return getl(words[0]) + getl2(words[1])\ndef start_withm(words):\n    '''\n    Write a function to return two words from a list of words starting with letter'm'.\n    '''\n    def getm(word):\n        if word[0] =='m':\n            return word[1:]\n        return word[1:]\n    def getm2(word):\n        if word[0] =='m':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getm(words[0])\n    else:\n        return getm(words[0]) + getm2(words[1])\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    def getn(word):\n        if word[0] == 'n':\n            return word[1:]\n        return word[1:]\n    def getn2(word):\n        if word[0] == 'n':\n            return word[1:]\n        return word[0]\n    if len(words)==1:\n        return getn(words[0])\n    else:\n        return getn(words[0]) + getn2(words[1])\ndef start_witho(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'o'.\n    '''\n    def geto(word):\n        if word[0] == 'o':\n            return word[1:]\n        return word[1:]\n    def geto2(word):\n        if word[0] == 'o':\n            return word[1:]\n        return wor"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    final_word = []\n    for i in words:\n        if i.startswith('p'):\n            final_word.append(i)\n    return final_word\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0,len(words)):\n        if words[i] == 'p':\n            return words[i-1], words[i+1]\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0][0:1], words[-1][-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = re.split('[pP]', words)\n    return words[0], words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    out = []\n    for word in words:\n        if word[0] == \"p\":\n            out.append(word)\n    return out\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    out = []\n    for word in words:\n        if word[-1] == \"p\":\n            out.append(word)\n    return out\ndef replace(words):\n    '''\n    Write a function that replaces words that begin with 'p' with 'a' and words that end with 'd' with 'z'.\n    '''\n    new_words = []\n    for word in words:\n        if word[0] == \"p\":\n            word = word[1:] + \"a\"\n        if word[-1] == \"d\":\n            word = word[:-1] + \"z\"\n        new_words.append(word)\n    return new_words\ndef swap(words):\n    '''\n    Write a function that changes the order of the words in the list to be in the correct order.\n    '''\n    new_words = []\n    for word in words:\n        new_word = word.replace(\"p\",\"a\")\n        new_word = word.replace(\"z\",\"a\")\n        new_word = word.replace(\"d\",\"a\")\n        new_word = word.replace(\"a\",\"d\")\n        new_word = word.replace(\"p\",\"z\")\n        new_word = word.replace(\"z\",\"p\")\n        new_word = word.replace(\"a\",\"p\")\n        new_word = word.replace(\"d\",\"z\")\n        new_word = word.replace(\"z\",\"d\")\n        new_words.append(new_word)\n    return new_words\ndef add_word(words):\n    '''\n    Write a function that takes a list of words and returns the list of words with the words added in the correct order.\n    '''\n    new_words = []\n    for word in words:\n        if len(word) > len(new_words):\n            new_words.append(word)\n        elif len(word) < len(new_words):\n            new_word = word.replace(\"p\",\"z\")\n            new_word = word.replace(\"z\",\"p\")\n            new_word = word.replace(\"a\",\"p\")\n            new_word = word.replace(\"d\",\"z\")\n            new_word = word.replace(\"z\",\"a\")\n            new_word = word.replace(\"p\",\"d\")\n            new_word = word.replace(\"z\",\"p\")\n            new_words.append(new_word)\n    return new_words\ndef to_english(words):\n    '''\n    Write a function that takes a list of words and returns a string of the english form of the words.\n    '''\n    new_words = []\n    for word in words:\n        if len(word) > len(new_words):\n            new_words.append(word)\n        elif len(word) < len(new_words):\n            word = word.replace(\"p\",\"z\")\n            word = word.replace(\"z\",\"p\")\n            word = word.replace(\"a\",\"p\")\n            word = word.replace(\"d\",\"z\")\n            word = word.replace(\"z\",\"a\")\n            word = word.replace(\"p\",\"d\")\n            word = word.replace(\"z\",\"p\")\n            new_words.append(word)\n    return new_words\ndef to_spanish(words):\n    '''\n    Write a function that takes a list of words and returns a string of the spanish form of the words.\n    '''\n    new_words = []\n    for word in words:\n        if len(word) > len(new_words):\n            new_words.append(word)\n        elif len(word) < len(new_words):\n            word = word.replace(\"p\",\"z\")\n            word = word.replace(\"z\",\"p\")\n            word = word.replace(\"a\",\"p\")\n            word = word.replace(\"d\",\"z\")\n            word = word.replace(\"z\",\"a\")\n            word = word.replace(\"p\",\"d\")\n            word = word.replace(\"z\",\"p\")\n            new_words.append(word)\n    return new_words\ndef to_french(words):\n    '''\n    Write a function that takes a list of words and returns a string of the french form of the words.\n    '''\n    new_words = []\n    for word in words:\n        if len(word) > len(new_words):\n            new_words.append(word)\n        elif len(word) < len(new_words):\n            word = word.replace(\"p\",\"z\")\n            word = word.replace(\"z\",\"p\")\n            word = word.replace(\"a\",\"p\")\n            word = word.replace(\"d\",\"z\")\n            word = word.replace(\"z\",\"a\")\n            word = word.replace(\"p\",\"d\")\n            word = word.replace(\"z\",\"p\")\n            new_words.append(word)\n    return new_words\ndef get_words(path):\n    '''\n    Read a file and return a list of words.\n    '''\n    with open(path) as f:\n        words = f.read().split('\\n')\n    return words\ndef get_words_list(path):\n    '''\n    Read a file and return a list of words.\n    '''\n    with open(path) as f:\n        words = f.read().split('\\n')\n    return words\ndef word_dict(words):\n    '''\n    Write a function that returns a dictionary of the words.\n    '''\n    new_words = []\n    for word in words:\n        if word in new_words:\n            continue\n        new_words.append(word)\n    return new_words\ndef get_regex(text):\n    '''\n    Write a function that returns a list of all regexes in the text.\n    '''\n    if '$' in text:\n        text = text.replace('$','')\n    if '^' in text:\n        text = text.replace('^','')\n    if '.' in text:\n        text = text.replace('.','')\n    if'' in text:\n        text = text.replace(' ','')\n    regex_list = []\n    for word in text.split('-'):\n        if '.' in word:\n            for word2 in word.split('. '):\n                if word2 == '':\n                    continue\n                for word3 in word2.split(', '):\n                    if word3 == '':\n                        continue\n                    regex = re.compile('[p]?('+word3+'|'+word3+')')\n                    if regex.match(word):\n                        regex_list.append(regex)\n    return regex_list\ndef get_translated(text):\n    '''\n    Write a function that returns a list of all translated words in the text.\n    '''\n    if '$' in text:\n        text = text.replace('$','')\n    if '^' in text:\n        text = text.replace('^','')\n    if '.' in text:\n        text = text.replace('.','')\n    if'' in text:\n        text = text.replace(' ','')\n    regex_list = []\n    for word in text.split('-'):\n        if '.' in word:\n            for word2 in word.split('. '):\n                if word2 == '':\n                    continue\n                for word3 in word2.split(', '):\n                    if word3 == '':\n                        continue\n                    regex = re.compile('[z]?('+word3+'|'+word3+')')\n                    if regex.match(word):\n                        regex_list.append(word3)\n        if'' in word:\n            for word2 in word.split('. '):\n                if word2 == '':\n                    continue\n                for word3 in word2.split(', '):\n                    if word3 == '':\n                        continue\n                    regex = re.compile('[z]?('+word3+'|'+word3+')')\n                    if regex.match(word):\n                        regex_list.append(word3)\n    return regex_list\ndef word_dict_to_list(words):\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = False\n    for word in words:\n        if word[0] == 'p':\n            p = True\n        if not p:\n            return word\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    res = 0\n    start = index\n    i = 0\n    while i < n:\n        if index + i >= n:\n            i = i % n\n            break\n        if a[i] > a[index + i]:\n            if res == k:\n                return res\n            res += a[index + i]\n            i += 1\n        else:\n            res += a[index + i]\n            i += 1\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    \n    if a[index] < 0:\n        return float(\"-inf\")\n    \n    \n    if index == n-1:\n        return max(a[index]+k, max_sum_increasing_subseq(a, n, index+1, k)+a[index])\n    \n    return max(a[index]+k, max_sum_increasing_subseq(a, n, index+1, k), a[index]+k, max_sum_increasing_subseq(a, n, index+1, k)+a[index])\n    \n    \n    \n    \n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if n == index + k:\n        return sum(a[index:n])\n    else:\n        return max(sum(a[index:n]), max_sum_increasing_subseq(a, n, index + 1, k) + a[n] - a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    elif index == 0 or a[index] < a[index - 1]:\n        return a[index]\n    elif a[index] == a[index - 1] and index + 1 < n:\n        return a[index]\n    else:\n        return max(a[index - 1] + max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index, k - 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix_sum = [0] * n # keeping track of the prefix sum\n    prefix_sum[index] = a[index]\n    for i in range(index, n): # init first i elements of prefix sum\n        prefix_sum[i] = max(prefix_sum[i-1] + a[i], a[i])\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k < 0:\n        raise ValueError\n    if index == n and k == 0:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return a[index]\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return sum(a)\n    else:\n        return sum(a[:index + 1]) + max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return a[index]\n    if n == index:\n        return sum(a[index:index+k])\n    return max(a[index:index+k] + max_sum_increasing_subseq(a, n, index, k-1), max_sum_increasing_subseq(a, n, index, k-1) + a[index+k-1])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)==m+n:\n        return tuplex\n    elif len(tuplex)>m+n:\n        for i in range(m+n-len(tuplex)):\n            tuplex.append(' ')\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    assert type(tuplex)==tuple, 'tuplex has to be a tuple'\n    assert type(m)==int and type(n)==int,'m and n have to be int'\n    return tuplex[:m] + tuplex[m+1:n]+tuplex[n+1:]\ndef is_colon(tuplex):\n    '''\n    Check if a tuple is a colon.\n    '''\n    return all([True if type(el)==tuple else False for el in tuplex])\ndef is_colon_tuple(tuplex):\n    '''\n    Check if a tuple is a colon.\n    '''\n    return all([is_colon(el) for el in tuplex])\ndef is_colon_list(tuplex):\n    '''\n    Check if a list is a colon.\n    '''\n    return all([is_colon(el) for el in tuplex])\ndef is_not_colon(tuplex):\n    '''\n    Check if a tuple is not a colon.\n    '''\n    assert type(tuplex)==tuple, 'tuplex has to be a tuple'\n    return not is_colon(tuplex)\ndef is_not_colon_tuple(tuplex):\n    '''\n    Check if a tuple is not a colon.\n    '''\n    return not is_colon_tuple(tuplex)\ndef is_not_colon_list(tuplex):\n    '''\n    Check if a list is not a colon.\n    '''\n    return not is_colon_list(tuplex)\ndef is_not_colon_list_empty(tuplex):\n    '''\n    Check if a list is not empty.\n    '''\n    assert is_not_colon_list(tuplex), 'tuplex is not a list'\n    return not is_colon_list(tuplex)[0]\ndef is_list_not_colon(tuplex):\n    '''\n    Check if a list is not a colon.\n    '''\n    return not is_not_colon_list(tuplex)\ndef is_list_not_colon_tuple(tuplex):\n    '''\n    Check if a list is not a colon.\n    '''\n    return not is_not_colon_list_empty(tuplex)\ndef is_list_not_colon_list(tuplex):\n    '''\n    Check if a list is not a colon.\n    '''\n    return not is_not_colon_list(tuplex)\ndef is_list_not_colon_list_empty(tuplex):\n    '''\n    Check if a list is not empty.\n    '''\n    assert is_not_colon_list(tuplex), 'tuplex is not a list'\n    return not is_not_colon_list(tuplex)[0]\ndef is_colon_array(tuplex):\n    '''\n    Check if a tuple is a colon array.\n    '''\n    assert type(tuplex)==tuple, 'tuplex has to be a tuple'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be a tuple of strings'\n    return any(is_colon(col) for col in tuplex)\ndef is_colon_array_tuple(tuplex):\n    '''\n    Check if a tuple is a colon array.\n    '''\n    assert is_colon_tuple(tuplex), 'tuplex is not a colon array'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be a tuple of strings'\n    return any(is_colon(col) for col in tuplex)\ndef is_colon_array_list(tuplex):\n    '''\n    Check if a tuple is a colon array.\n    '''\n    assert is_colon_list(tuplex), 'tuplex is not a colon array'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be a tuple of strings'\n    return any(is_colon(col) for col in tuplex)\ndef is_colon_array_list_empty(tuplex):\n    '''\n    Check if a tuple is an empty list.\n    '''\n    assert is_list_not_colon_list(tuplex), 'tuplex is not an empty list'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be an empty list of strings'\n    return any(is_colon(col) for col in tuplex)\ndef is_colon_array_list_empty_tuple(tuplex):\n    '''\n    Check if a tuple is an empty list.\n    '''\n    assert is_list_not_colon_list(tuplex), 'tuplex is not an empty list'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be an empty list of strings'\n    return any(is_colon(col) for col in tuplex)\ndef is_colon_array_tuple_empty(tuplex):\n    '''\n    Check if a tuple is an empty list.\n    '''\n    assert is_colon_tuple(tuplex), 'tuplex is not a colon array'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be a tuple of strings'\n    return any(is_colon(col) for col in tuplex)\ndef is_colon_array_tuple_empty_tuple(tuplex):\n    '''\n    Check if a tuple is an empty list.\n    '''\n    assert is_colon_list(tuplex), 'tuplex is not a colon array'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be a tuple of strings'\n    return any(is_colon(col) for col in tuplex)\ndef is_colon_array_list_empty(tuplex):\n    '''\n    Check if a tuple is an empty list.\n    '''\n    assert is_not_colon_list(tuplex), 'tuplex is not an empty list'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be an empty list of strings'\n    return any(is_colon(col) for col in tuplex)\ndef is_colon_array_list_empty_tuple(tuplex):\n    '''\n    Check if a tuple is an empty list.\n    '''\n    assert is_not_colon_list(tuplex), 'tuplex is not an empty list'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be a tuple of strings'\n    return any(is_colon(col) for col in tuplex)\ndef is_colon_list_empty(tuplex):\n    '''\n    Check if a list is an empty list.\n    '''\n    assert is_list_not_colon_list(tuplex), 'tuplex is not an empty list'\n    assert type(tuplex[0])==str and type(tuplex[1])==str and type(tuplex[2])==str, 'tuplex has to be an empty list of strings'\n    return any(is_colon(col) for col i"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) < m + 1 or n < 1:\n        return None\n    elif len(tuplex) == m + 1:\n        return tuplex\n    else:\n        first_tuplex = tuplex[:m+1]\n        second_tuplex = tuplex[m+1:]\n        return colon_tuplex(first_tuplex,m,n -1) + colon_tuplex(second_tuplex,m,n -1)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i][:m] for i in range(n))\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_m = tuplex[n:m]\n    colon_n = tuplex[:n]\n    tuplex_new = colon_m+colon_n\n    return colon_tuplex(tuplex_new,m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i] for i in range(m))\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c=0\n    for i in tuplex:\n        if type(i)==tuple:\n            if len(i)==2:\n                if c==n-1:\n                    return i[0]+\": \"+i[1]+\" \"\n                c+=1\n                i=tuple()\n            else:\n                if c==n-1:\n                    return i[0]+\": \"+i[1]+\" \"\n                c+=1\n                i=tuple()\n    return i\ndef comma_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a comma of a tuple.\n    '''\n    i=tuple()\n    for i in tuplex:\n        if type(i)==tuple:\n            for j in i:\n                if type(j)==int:\n                    if j>=0:\n                        return i[0]+': '+i[1]+' '\n                    else:\n                        if i[0]!=' ':\n                            return i[0]+': '+i[1]+' '\n                        else:\n                            return i[0]+': '+i[1]+' '\n                else:\n                    return i[0]+': '+i[1]+' '\n        else:\n            return i[0]+': '+i[1]+' '\n    return i\ndef minus_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a minus of a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return colon_tuplex(tuplex,m,n)\n    else:\n        return '-'+tuplex\ndef plus_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a plus of a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return colon_tuplex(tuplex,m,n)\n    else:\n        return '+'+tuplex\ndef equal_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an equal of a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return colon_tuplex(tuplex,m,n)\n    else:\n        return '='+tuplex\ndef equal_equal_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an equal equal of a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return colon_tuplex(tuplex,m,n)\n    else:\n        return '='+tuplex\ndef equal_plus_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an equal plus of a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return colon_tuplex(tuplex,m,n)\n    else:\n        return '+'+tuplex\ndef equal_minus_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an equal minus of a tuple.\n    '''\n    if type(tuplex)==tuple:\n        return colon_tuplex(tuplex,m,n)\n    else:\n        return '-'+tuplex\ndef empty_tuplex(m,n):\n    '''\n    Write a function to get an empty tuple.\n    '''\n    if type(m)==tuple:\n        return tuplex()\n    else:\n        return '()'\ndef new_tuplex(m,n):\n    '''\n    Write a function to get a tuple with its value.\n    '''\n    if type(m)==tuple:\n        return m\n    else:\n        return '()'\ndef mul_tuplex(m,n):\n    '''\n    Write a function to multiply a tuple.\n    '''\n    i=0\n    j=0\n    while i<len(m):\n        if type(m[i])==tuple:\n            for k in m[i]:\n                if type(k)==int:\n                    if k>=0:\n                        return m[i][j]+'*'+str(k)\n                    else:\n                        return m[i][j]+'*'+str(-k)\n                else:\n                    return m[i][j]+'*'+str(k)\n        else:\n            return m[i]+'*'+str(m[i])\n        i+=1\n    return '()'\ndef divide_tuplex(m,n):\n    '''\n    Write a function to divide a tuple.\n    '''\n    i=0\n    j=0\n    while i<len(m):\n        if type(m[i])==tuple:\n            for k in m[i]:\n                if type(k)==int:\n                    if k>=0:\n                        return m[i][j]+'/'+str(k)\n                    else:\n                        return m[i][j]+'/'+str(-k)\n                else:\n                    return m[i][j]+'/'+str(k)\n        else:\n            return m[i]+'/'+str(m[i])\n        i+=1\n    return '()'\ndef mod_tuplex(m,n):\n    '''\n    Write a function to mod a tuple.\n    '''\n    if type(m)==tuple:\n        return '('+m[0]+')'+minus_tuplex(m,n)\n    else:\n        return '('+m+')'+minus_tuplex(m,n)\ndef mul_mod_tuplex(m,n):\n    '''\n    Write a function to multiply a tuple.\n    '''\n    i=0\n    j=0\n    while i<len(m):\n        if type(m[i])==tuple:\n            for k in m[i]:\n                if type(k)==int:\n                    if k>=0:\n                        return m[i][j]+mod_tuplex(m,n)+'*'+str(k)\n                    else:\n                        return m[i][j]+mod_tuplex(m,n)+'*'+str(-k)\n                else:\n                    return m[i][j]+mod_tuplex(m,n)+'*'+str(k)\n        else:\n            return m[i]+mod_tuplex(m,n)+'*'+str(m[i])\n        i+=1\n    return '()'\ndef mod_plus_tuplex(m,n):\n    '''\n    Write a function to multiply a tuple.\n    '''\n    if type(m)==tuple:\n        return '('+m[0]+')'+plus_tuplex(m,n)\n    else:\n        return '('+m+')'+plus_tuplex(m,n)\ndef mod_minus_tuplex(m,n):\n    '''\n    Write a function to multiply a tuple.\n    '''\n    if type(m)==tuple:\n        return '('+m[0]+')'+minus_tuplex(m,n)\n    else:\n        return '('+m+')'+minus_tuplex(m,n)\ndef mod_plus_equal_tuplex(m,n):\n    '''\n    Write a function to multiply a tuple.\n    '''\n    if type(m)==tuple:\n        return '('+m[0]+')'+plus_equal_tuplex(m,n)\n    else:\n        return '('+m+')'+plus_equal_tuplex(m,n)\ndef mod_minus_equal_tuplex(m,n):\n    '''\n    Write a function to multiply a tuple.\n    '''\n    if type(m)==tuple:\n        return '('+m[0]+')'+minus_equal_tuplex(m,n)\n    else:\n        return '('+m+')'+minus_equal_tuplex(m,n)\ndef mod_plus_equal_equal_tuplex(m,n):\n    '''\n    Write a function to multiply a tuple.\n    ''"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #tuplex : list of tuples\n    #m : the number of elements\n    #n : the number of elements to get\n    #return a tuple\n    l = len(tuplex)\n    result = []\n    for i in range(n):\n        result.append(tuplex[i][m])\n    result = tuple(result)\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 0:\n        return []\n    if len(tuplex) == 1:\n        return tuplex\n    else:\n        return [tuplex[0]]+colon_tuplex(tuplex[1:],m,n)\n    \n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x=tuplex[m][n]\n    return x[0]\ndef colon_list(list,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    x=list[m][n]\n    return x[0]\ndef get_list_len(l,n):\n    '''\n    Write a function to get the length of a list.\n    '''\n    return len(l[n])\ndef my_sum(l):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            total=total+y\n    return total\ndef my_sub(l,m,n):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            if x[m]<y:\n                total=total+y\n    return total\ndef my_mul(l,m):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=1\n    for x in l:\n        for y in x:\n            total=total*y\n    return total\ndef my_div(l,n):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            total=total+y\n    return total/n\ndef max_index(l):\n    '''\n    Write a function to get the index of the max element.\n    '''\n    mx=l[0][0]\n    for x in l:\n        if x[mx]>mx:\n            mx=x[mx]\n    return mx\ndef min_index(l):\n    '''\n    Write a function to get the index of the min element.\n    '''\n    mn=l[0][0]\n    for x in l:\n        if x[mn]<mn:\n            mn=x[mn]\n    return mn\ndef my_max(l):\n    '''\n    Write a function to get the index of the max element.\n    '''\n    mx=l[0][0]\n    for x in l:\n        if x[mx]>mx:\n            mx=x[mx]\n    return mx\ndef my_min(l):\n    '''\n    Write a function to get the index of the min element.\n    '''\n    mn=l[0][0]\n    for x in l:\n        if x[mn]<mn:\n            mn=x[mn]\n    return mn\ndef my_sum_list(l):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            total=total+y\n    return total\ndef my_len_list(l):\n    '''\n    Write a function to get the length of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            total=total+1\n    return total\ndef my_sub_list(l,m,n):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            if x[m]<y[n]:\n                total=total+y[n]\n    return total\ndef my_mul_list(l,m):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            if x[m]<y[m]:\n                total=total+y[m]\n    return total\ndef my_div_list(l,n):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            if x[m]<y[n]:\n                total=total+y[n]\n    return total/n\ndef my_add_list(l,m,n):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            if x[m]<y[n]:\n                total=total+y[n]\n    return total\ndef my_sum_tup(tuplex):\n    '''\n    Write a function to get the sum of a tuple.\n    '''\n    total=0\n    for x in tuplex:\n        for y in x:\n            total=total+y\n    return total\ndef my_len_tup(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    total=0\n    for x in tuplex:\n        for y in x:\n            total=total+1\n    return total\ndef my_min_tup(tuplex):\n    '''\n    Write a function to get the miniumum element of a tuple.\n    '''\n    mx=tuplex[0][0]\n    for x in tuplex:\n        if x[mx]>mx:\n            mx=x[mx]\n    return mx\ndef my_max_tup(tuplex):\n    '''\n    Write a function to get the maximum element of a tuple.\n    '''\n    mx=tuplex[0][0]\n    for x in tuplex:\n        if x[mx]>mx:\n            mx=x[mx]\n    return mx\ndef my_sum_list_tup(l):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            total=total+y\n    return total\ndef my_len_list_tup(l):\n    '''\n    Write a function to get the length of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            total=total+1\n    return total\ndef my_sub_list_tup(l,m,n):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            if x[m]<y[n]:\n                total=total+y[n]\n    return total\ndef my_mul_list_tup(l,m):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            if x[m]<y[m]:\n                total=total+y[m]\n    return total*m\ndef my_div_list_tup(l,n):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            if x[m]<y[n]:\n                total=total+y[n]\n    return total/n\ndef my_add_list_tup(l,m,n):\n    '''\n    Write a function to get the sum of a list.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            if x[m]<y[n]:\n                total=total+y[n]\n    return total\ndef my_sum_tup_list(l):\n    '''\n    Write a function to get the sum of a tuple.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            total=total+y\n    return total\ndef my_len_tup_list(l):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    total=0\n    for x in l:\n        for y in x:\n            total=total+1\n    return total\ndef my_min_tup_list(l):\n    '''\n    Write a function to get the miniumum element of a tuple.\n    '"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 2:\n        return [min(nums1), max(nums1)]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    prod = nums1[0] * nums2[0]\n    for i in range(1, len(nums1)):\n        for j in range(1, len(nums2)):\n            prod = max(prod * nums1[i], prod * nums2[j], nums1[i] * nums2[j])\n    return prod"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2 or len(nums1)!= len(nums2):\n        return 0\n    l = [0]*len(nums1)\n    l[0] = nums1[0]\n    for i in range(1,len(nums1)):\n        l[i] = nums1[i]*l[i-1]\n    r = [0]*len(nums2)\n    r[0] = nums2[0]\n    for i in range(1,len(nums2)):\n        r[i] = nums2[i]*r[i-1]\n    smallest
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    p = []\n    for x in nums1:\n        if len(x) > len(p):\n            p = x\n    for y in nums2:\n        if len(y) > len(p):\n            p = y\n    while len(p) > 0:\n        if len(p) < N:\n            return None\n        r = []\n        i = 0\n        j = 0\n        while i < len(p):\n            if len(p) < N:\n                return None\n            while j < len(p):\n                if len(p) < N:\n                    return None\n                if p[i] * p[j] < p[i] * p[j + 1]:\n                    r.append(p[i] * p[j])\n                    i += 1\n                    j += 1\n                else:\n                    r.append(p[i] * p[j])\n                    i += 1\n            j = 0\n            while j < len(p):\n                r.append(p[i] * p[j])\n                j += 1\n            i = 0\n            p = r[-N:]\n            r = []\n    return p\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the lists so that they will be in order\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # check if the two lists are of same size\n    # if not, try to add them together\n    # if added, return the largest one\n    if len(nums1)!= len(nums2):\n        return large_product(nums2, nums1, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #return largest number\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    if n < m:\n        return \"nums1 and nums2 have same length\"\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def sum_of_product(nums1, nums2, N):\n        product = 1\n        for i in range(N):\n            product = product * (nums1[i] + nums2[i])\n        return product\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        a,b = b,a\n    return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)==int and type(b)==int:\n        if a<b:\n            return a\n        else:\n            return b\n    elif type(a)==list and type(b)==list:\n        return max(a,b)\n    else:\n        return \"Please, provide a number in correct format.\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n    \nprint(maximum(10,20)"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a == None or b == None:\n        return 0\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a = min(a,b)\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        a,b = b,a\n    while a<b:\n        a+=1\n    return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b>a:\n        return b\n    if b<a:\n        return a\n    return max(a,b)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"String must be a string\")\n    if not str1:\n        raise ValueError(\"String cannot be empty\")\n    else:\n        return tuple(str1)\n    #raise TypeError(\"String must be a string\")\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if type(str1)!= str or len(str1) > 20:\n        return None\n    else:\n        str1 = str1.lower()\n        str1 = str1.replace(' ', '')\n        list_of_tuples = []\n        for char in str1:\n            if char =='':\n                list_of_tuples.append(' ')\n            else:\n                list_of_tuples.append(char)\n        return tuple(list_of_tuples)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if not str1:\n        return ()\n    elif str1[0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return (str1,)\n    else:\n        return (chr(ord(str1[0]) - 97),) + string_to_tuple(str1[1:])"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_string = tuple(str1)\n    return tuple_string\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return (str1.lower(), str1.upper())\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_list = []\n    for char in str1:\n        tuple_list.append(char)\n    return tuple_list\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = tuple(str1.upper().strip())\n    return t\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return (str1.strip()"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & 0xFF\n    n = (n >> 8) & 0xFF\n    n = (n >> 4) & 0xFF\n    n = (n >> 2) & 0xFF\n    n = n & 0xFF\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: return 0\n    return n - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n:\n        n &= ~(1 << (n.bit_length() - 1))\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = n & (n - 1)\n    return (n | mask)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ n & ~n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    a = n & 0x80\n    b = (n >> 7) & 0x80\n    return a | b\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n <= 0:\n        return\n    if n < 1:\n        raise ValueError('n must be >= 1')\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    if n & 0x01!= 0x01:\n        n = n | 0x01\n    else:\n        n = n & 0x02\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    pass \n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r == 0:\n        return 0\n    else:\n        return h*math.pi*r**3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=3.14*(r**2)*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    c = 2*math.pi*r\n    print(\"Volume of a cone is\",c*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = r * (h**3)\n    print('volume of a cone of radius',r,'is',v)\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3) * math.pi * r * r * h * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return h*(r**3)*(math.sqrt(1-3*r*h)/4)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h\ndef sum_volume(r,h):\n    '''\n    Write a function to sum the volumes of a cone.\n    '''\n    return volume_cone(r,h) * (2 * math.pi * r) * (2 * math.pi)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r * h * 2 * math.pi\ndef sum_volume_cylinder(r,h):\n    '''\n    Write a function to sum the volumes of a cylinder.\n    '''\n    return volume_cylinder(r,h) * (2 * math.pi)\ndef volume_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r * h * 3\ndef sum_volume_sphere(r,h):\n    '''\n    Write a function to sum the volumes of a sphere.\n    '''\n    return volume_sphere(r,h) * (3 * math.pi)\ndef volume_pyramid(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return r * h * 4\ndef sum_volume_pyramid(r,h):\n    '''\n    Write a function to sum the volumes of a pyramid.\n    '''\n    return volume_pyramid(r,h) * (3 * math.pi)\ndef volume_cone_pyramid(r,h):\n    '''\n    Write a function to find the volume of a cone in a pyramid.\n    '''\n    return r * h * 4\ndef sum_volume_cone_pyramid(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a pyramid.\n    '''\n    return volume_cone_pyramid(r,h) * (3 * math.pi)\ndef volume_sphere_pyramid(r,h):\n    '''\n    Write a function to find the volume of a sphere in a pyramid.\n    '''\n    return r * h * 4\ndef sum_volume_sphere_pyramid(r,h):\n    '''\n    Write a function to sum the volumes of a sphere in a pyramid.\n    '''\n    return volume_sphere_pyramid(r,h) * (3 * math.pi)\ndef volume_pyramid_cone(r,h):\n    '''\n    Write a function to find the volume of a cone in a pyramid.\n    '''\n    return r * h * 4\ndef sum_volume_cone_pyramid(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a pyramid.\n    '''\n    return volume_cone_pyramid(r,h) * (3 * math.pi)\ndef volume_pyramid_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere in a pyramid.\n    '''\n    return r * h * 4\ndef sum_volume_pyramid_sphere(r,h):\n    '''\n    Write a function to sum the volumes of a sphere in a pyramid.\n    '''\n    return volume_sphere_pyramid(r,h) * (3 * math.pi)\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone in a sphere.\n    '''\n    return r * h * 4\ndef sum_volume_cone_sphere(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a sphere.\n    '''\n    return volume_cone_sphere(r,h) * (3 * math.pi)\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder in a sphere.\n    '''\n    return r * h * 4\ndef sum_volume_cylinder_sphere(r,h):\n    '''\n    Write a function to sum the volumes of a cylinder in a sphere.\n    '''\n    return volume_cylinder_sphere(r,h) * (3 * math.pi)\ndef volume_pyramid_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone in a sphere.\n    '''\n    return r * h * 4\ndef sum_volume_pyramid_cone_sphere(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a sphere.\n    '''\n    return volume_cone_sphere(r,h) * (3 * math.pi)\ndef volume_pyramid_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone in a cylinder.\n    '''\n    return r * h * 4\ndef sum_volume_pyramid_cone_cylinder(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a cylinder.\n    '''\n    return volume_cone_sphere(r,h) * (3 * math.pi)\ndef volume_cylinder_cone_pyramid(r,h):\n    '''\n    Write a function to find the volume of a cylinder in a cone.\n    '''\n    return r * h * 4\ndef sum_volume_cylinder_cone_pyramid(r,h):\n    '''\n    Write a function to sum the volumes of a cylinder in a cone.\n    '''\n    return volume_cone_sphere(r,h) * (3 * math.pi)\ndef volume_pyramid_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone in a cylinder.\n    '''\n    return r * h * 4\ndef sum_volume_pyramid_cone_cylinder(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a cylinder.\n    '''\n    return volume_cone_sphere(r,h) * (3 * math.pi)\ndef volume_cylinder_cone_pyramid_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone in a cylinder.\n    '''\n    return r * h * 4\ndef sum_volume_cylinder_cone_pyramid_sphere(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a cylinder.\n    '''\n    return volume_cone_sphere(r,h) * (3 * math.pi)\ndef volume_pyramid_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone in a cylinder.\n    '''\n    return r * h * 4\ndef sum_volume_pyramid_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a cylinder.\n    '''\n    return volume_cone_sphere(r,h) * (3 * math.pi)\ndef volume_cone_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cone in a cylinder.\n    '''\n    return r * h * 4\ndef sum_volume_cone_cylinder_cone(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a cylinder.\n    '''\n    return volume_cone_sphere(r,h) * (3 * math.pi)\ndef volume_pyramid_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone in a cylinder.\n    '''\n    return r * h * 4\ndef sum_volume_pyramid_cone_cylinder(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a cylinder.\n    '''\n    return volume_cone_sphere(r,h) * (3 * math.pi)\ndef volume_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the volume of a cone in a cylinder.\n    '''\n    return r * h * 4\ndef sum_volume_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to sum the volumes of a cone in a cylinder.\n    '''\n    return volume_cone_sphere(r,h) * "
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def volume(r,h):\n        #volume is the root of the formula\n        #volume is defined as r^3 * h^3\n        volume = math.pow(r,3) * math.pow(h,3)\n        #volume is rounded to the nearest integer\n        #note that, since 3.14 is a value of 3.14,\n        #rounding up means that 3.14 is in the round\n        #but 3.14 rounds down to 0.0001\n        volume = round(volume,4)\n        return volume\n    \n    volume_cone = volume(r,h)\n    return volume_cone\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    s = 4\n    volume = r**s * h**2\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0: \n        return 0\n    elif n <= 2: \n        return 1\n    elif n % 2 == 0: \n        return highest_Power_of_2(n // 2) \n    else: \n        return highest_Power_of_2(n // 2) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    if n % 2 == 0:\n        return highest_Power_of_2(n//2)\n    else:\n        return highest_Power_of_2(3*n+1)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num=int(n)\n    if num<=0:\n        return 0\n    elif num==1:\n        return 1\n    elif num==2:\n        return 2\n    else:\n        n1=0\n        n2=1\n        for i in range(3,num):\n            n1=n1*2\n            n2=n2*2\n        if n1>n2:\n            return n1\n        else:\n            return n2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if(i<=n):\n            count=count+1\n    return count\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num = n\n    power = 0\n    while num > 0:\n        power += 1\n        num = num // 2\n    if num > power:\n        return num\n    else:\n        return power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n <= 1): \n        return n\n    if (n % 2 == 0): \n        return highest_Power_of_2(n//2) \n    else: \n        return highest_Power_of_2(3*n+1)\n    \n    \ndef check_Concat_n(n):\n    '''\n    Write a python function that takes as input a string and checks whether it concatenates n characters or not.\n    '''\n    if (len(n) <= n): \n        return True\n    else: \n        return check_Concat_n(n[1:]) \n    \ndef is_palindrome(n): \n    '''\n    Write a python function that takes as input an integer and returns True if the integer is a palindrome, or False if not. \n    '''\n    if (n < 0): \n        return False\n    if (n < 10): \n        return True\n    elif (check_Concat_n(str(n)[1:])): \n        return True\n    else: \n        return False\n    \ndef is_palindrome_v2(n): \n    '''\n    Write a python function that takes as input an integer and returns True if the integer is a palindrome, or False if not. \n    '''\n    if (n < 10): \n        return True\n    elif (is_palindrome(n)): \n        return True\n    else: \n        return False\n    \ndef not_palindrome(n): \n    '''\n    Write a python function that takes as input an integer and returns True if the integer is not a palindrome, or False if it is palindrome. \n    '''\n    if (is_palindrome(n)): \n        return False\n    else: \n        return True\n    \ndef not_palindrome_v2(n): \n    '''\n    Write a python function that takes as input an integer and returns True if the integer is not a palindrome, or False if it is palindrome. \n    '''\n    if (not is_palindrome(n)): \n        return False\n    else: \n        return True\n    \ndef non_palindrome(n): \n    '''\n    Write a python function that takes as input an integer and returns True if the integer is not a palindrome, or False if it is palindrome. \n    '''\n    if (is_palindrome(n)): \n        return False\n    else: \n        return True\n    \ndef non_palindrome_v2(n): \n    '''\n    Write a python function that takes as input an integer and returns True if the integer is not a palindrome, or False if it is palindrome. \n    '''\n    if (not is_palindrome(n)): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n <= 0):\n        print(\"Input must be a positive integer!\")\n        return -1\n    else:\n        power = 0\n        while (n > power):\n            power = power + 2\n        return power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        print(\"Please provide a positive number.\")\n        return -1\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # code goes here\n    if(n<=0):\n        return None\n    if(n%2==0):\n        return n//2\n    else:\n        return n*2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return highest_Power_of_2(n // 2)\n    else:\n        return highest_Power_of_2((3 * n + 1) / 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 2: \n        return n \n    if n == 3 or n == 4: \n        return 5 \n    if n == 5: \n        return 7 \n    if n % 2 == 0: \n        return find_lucas(n - 2) \n    else: \n        return (find_lucas(n - 1) + find_lucas(n - 3)) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n<=0: \n        return None\n    elif n==1: \n        return 1\n    else:\n        return find_lucas(n-1)+find_lucas(n-2)\n    \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n==4:\n        return 3\n    if n%2==0:\n        return find_lucas(n//2)+1\n    else:\n        return find_lucas(n-1)+1\n    \nprint(find_lucas(6))"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # You can assume that n is positive and does not exceed 100.\n    # 1 <= n <= 100.\n    i = 0\n    x = 1\n    if n <= 0:\n        return None\n    while (i < n):\n        x = 1\n        i = i + 1\n        while (i < n):\n            if (i % 3 == 0 and i % 5 == 0):\n                x = x * 2\n            elif (i % 3 == 0):\n                x = x * 3\n            elif (i % 5 == 0):\n                x = x * 4\n            i = i + 1\n        x = x * (n - i)\n        return x\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(1, n):\n        if i > 1:\n            if n % i == 0:\n                return (i - 1)\n    return n\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # the nth lucas number is calculated as:\n    # n * (n-1) * (n-2) * (n-3)\n    # so for the 1st, 2nd, 3rd, and 4th elements, they must be divisible by 3\n    # The lucas numbers are as follows:\n    # 0 = 0\n    # 1 = 1\n    # 2 = 4\n    # 3 = 7\n    # 4 = 12\n    # 5 = 15\n    # 6 = 20\n    # 7 = 25\n    # 8 = 30\n    # 9 = 35\n    # 10 = 40\n    # 11 = 45\n    # 12 = 50\n    # 13 = 55\n    # 14 = 60\n    # 15 = 65\n    # 16 = 70\n    # 17 = 75\n    # 18 = 80\n    # 19 = 85\n    # 20 = 90\n    # 21 = 95\n    # 22 = 100\n    # 23 = 105\n    # 24 = 110\n    # 25 = 115\n    # 26 = 120\n    # 27 = 125\n    # 28 = 130\n    # 29 = 135\n    # 30 = 140\n    # 31 = 145\n    # 32 = 150\n    # 33 = 155\n    # 34 = 160\n    # 35 = 165\n    # 36 = 170\n    # 37 = 175\n    # 38 = 180\n    # 39 = 185\n    # 40 = 190\n    # 41 = 195\n    # 42 = 200\n    # 43 = 205\n    # 44 = 210\n    # 45 = 215\n    # 46 = 220\n    # 47 = 225\n    # 48 = 230\n    # 49 = 235\n    # 50 = 240\n    # 51 = 245\n    # 52 = 250\n    # 53 = 255\n    # 54 = 260\n    # 55 = 265\n    # 56 = 270\n    # 57 = 275\n    # 58 = 280\n    # 59 = 285\n    # 60 = 290\n    # 61 = 295\n    # 62 = 300\n    # 63 = 305\n    # 64 = 310\n    # 65 = 315\n    # 66 = 320\n    # 67 = 325\n    # 68 = 330\n    # 69 = 335\n    # 70 = 340\n    # 71 = 345\n    # 72 = 350\n    # 73 = 355\n    # 74 = 360\n    # 75 = 365\n    # 76 = 370\n    # 77 = 375\n    # 78 = 380\n    # 79 = 385\n    # 80 = 390\n    # 81 = 395\n    # 82 = 400\n    # 83 = 405\n    # 84 = 410\n    # 85 = 415\n    # 86 = 420\n    # 87 = 425\n    # 88 = 430\n    # 89 = 435\n    # 90 = 440\n    # 91 = 445\n    # 92 = 450\n    # 93 = 455\n    # 94 = 460\n    # 95 = 465\n    # 96 = 470\n    # 97 = 475\n    # 98 = 480\n    # 99 = 485\n    # 100 = 490\n    # 101 = 495\n    # 102 = 500\n    # 103 = 505\n    # 104 = 510\n    # 105 = 525\n    # 106 = 530\n    # 107 = 535\n    # 108 = 540\n    # 109 = 545\n    # 110 = 550\n    # 111 = 555\n    # 112 = 560\n    # 113 = 565\n    # 114 = 570\n    # 115 = 575\n    # 116 = 580\n    # 117 = 585\n    # 118 = 590\n    # 119 = 595\n    # 120 = 600\n    # 121 = 625\n    # 122 = 630\n    # 123 = 635\n    # 124 = 640\n    # 125 = 645\n    # 126 = 650\n    # 127 = 655\n    # 128 = 660\n    # 129 = 665\n    # 130 = 670\n    # 131 = 675\n    # 132 = 680\n    # 133 = 685\n    # 134 = 690\n    # 135 = 695\n    # 136 = 700\n    # 137 = 705\n    # 138 = 710\n    # 139 = 715\n    # 140 = 720\n    # 141 = 725\n    # 142 = 730\n    # 143 = 735\n    # 144 = 740\n    # 145 = 745\n    # 146 = 750\n    # 147 = 755\n    # 148 = 750\n    # 149 = 755\n    # 150 = 750\n    # 151 = 755\n    # 152 = 755\n    # 153 = 755\n    # 154 = 755\n    # 155 = 755\n    # 156 = 755\n    # 157 = 755\n    # 158 = 755\n    # 159 = 755\n    # 160 = 755\n    # 161 = 755\n    # 162 = 755\n    # 163 = 755\n    # 164 = 755\n    # 165 = 755\n    # 166 = 755\n    # 167 = 755\n    # 168 = 755\n    # 169 = 755\n    # 170 = 755\n    # 171 = 755\n    # 172 = 755\n    # 173 = 755\n    # 174 = 755\n    # 175 = 755\n    # 176 = 755\n    # 177 = 755\n    # 178 = 755\n    # 179 = 755\n    # 180 = 755\n    # 181 = 755\n    # 182 = 755\n    # 183 = 755\n    # 184 = 755\n    # 185 = 755\n    # 186 = 755\n    # 187 = 755\n    # 188 = 755\n    # 189 = 755\n    # 190 = 755\n    # 191 = 755\n    # 192 = 755\n    # 193 = 755\n    # 194 = 755\n    # 195 = 755\n    # 196 = 755\n    # 197 = 755\n    # 198 = 755\n    # 199 = 755\n    # 200 = 755\n    # 201 = 755\n    # 202 = 755\n    # 203 = 755\n    # 204 = 755\n    # 205 = 755\n    # 206 = 755\n    # 207 = 755\n    # 208 = 755\n    # 209 = 755\n    # 210 = 755\n    # 211 = 755\n    # 212 = 755\n    # 213 = 755\n    # 214 = 755\n    # 215 = 755\n    # 216 = 755\n    # 217 = 755\n    # 218 = 755\n    # 219 = 755\n    # 220 = 755\n    # 221 = 755\n    # 222 = 755\n    # 223 = 755\n    # 224 = 755\n    # 225 = 755\n    # 226 = 755\n    # 227 = 755\n    # 228 = 755\n    # 229 = 755\n    # 230 = 755\n    # 231 = 755\n    # 232 = 755\n    # 233 = 755\n    # 234 = 755\n    # 235 = 755\n    # 236 = 755\n    # 237 = 755\n    # 238 = 755\n    # 239 = 755\n    # 240 = 755\n    # 241 = 755\n    # 242 = 755\n    # 243 = 755\n    # 244 = 755\n    # 245 = 755\n    # 246 = 755\n    # 247 = 755\n    # 248 = 755\n    # 249 = 755\n    # 250 = 755\n    # 251 = 755\n    # 252 = 755\n    # 253 = 755\n    # 254 = 755\n    # 255 = 755\n    # 256 = 755\n    # 257 = 755\n    # 258 = 755\n    # 259 = 755\n    # 260 = 755\n    # 261 = 755\n    # 262 = 755\n    # 263 = 755\n    # 264 = 755\n    # 265 = 755\n    # 266 = 755\n    # 267 = 755\n    # 268 = 755\n    # 269 = 755\n    # 270 = 755\n    # 271 = 755\n    # 272 = 755\n    # 273 = 755\n    # 274 = 755\n    # 275 = 755\n    # 276 = 755\n    # 277 = 755\n    # 278 = 755\n    # 279 = 755\n    # 280 = 755\n    # 281 = 755\n    # 282 = 755\n    # 283 = 755\n    # 284 = 755\n    # 285 = 755\n    # 286 = 755\n    # 287 = 755\n    # 288 = 755\n    # 289 = 755\n    # 290 = 755\n    # 291 = 755\n    # 292 = 755\n    # 293 = 755\n    # 294 = 755"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    lucas_nums = [1, 2] \n    for i in range(3, n + 1): \n        lucas_nums.append(lucas_nums[i-3] + lucas_nums[i-2] + lucas_nums[i-1])\n    return lucas_nums[n] \n    \ndef main(): \n    '''\n    1) Define a function for finding then'th lucas number. \n    2) Run your function and test it.\n    '''\n    \n    n = int(input('Enter the number of a to get the lucas number: '))\n    print(find_lucas(n))\n        \nmain()"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(1,n+1):\n        if n==i:\n            return i\n        else:\n            #if n==i:\n            #    print(\"n=\",n,\"i=\",i)\n            #else:\n            for j in range(i,n,2):\n                print(j)\n                if n%j==0:\n                    break\n    return -1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [3, 5, 7, 11, 13, 17]\n    return lucas_numbers[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n            \n    if count == 0:\n        return n\n    else:\n        return n+find_lucas(n-count)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string_ = string.replace('.','')\n    string_ = string_.replace(',','')\n    string_ = string_.replace(':','')\n    string_ = string_.replace(';','')\n    string_ = string_.replace('!','')\n    string_ = string_.replace('?','')\n    string_ = string_.replace('\"','')\n    string_ = string_.replace('\\'','')\n    string_ = string_.replace('(','')\n    string_ = string_.replace(')','')\n    string_ = string_.replace('{','')\n    string_ = string_.replace('}','')\n    string_ = string_.replace('|','')\n    string_ = string_.replace('!','')\n    string_ = string_.replace('\\n','')\n    list_ = list_[0: len(string_)]\n    string_ = string_[0: len(string_)]\n    new_list = list_\n    if string_ == \"\":\n        new_list = list_\n        string_ = \" \"\n    for el in new_list:\n        if string_ == \"\":\n            string_ = el\n            continue\n        elif el == \" \":\n            string_ = string_\n            continue\n        elif string_ == \"\":\n            string_ = el\n            continue\n        elif el == \",\":\n            string_ = string_\n            continue\n        elif string_ == \",\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \",\":\n            string_ = el\n            continue\n        elif string_ == \",\":\n            string_ = el\n            continue\n        elif string_ == \":\"\n            string_ = el\n            continue\n        elif string_ == \":\"\n            string_ = el\n            continue\n        elif string_ == \";\":\n            string_ = el\n            continue\n        elif string_ == \";\":\n            string_ = el\n            continue\n        elif string_ == \":\":\n            string_ = el\n            continue\n        elif string_ == \":\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \",\":\n            string_ = el\n            continue\n        elif string_ == \",\":\n            string_ = el\n            continue\n        elif string_ == \":\"\n            string_ = el\n            continue\n        elif string_ == \":\"\n            string_ = el\n            continue\n        elif string_ == \";\":\n            string_ = el\n            continue\n        elif string_ == \";\":\n            string_ = el\n            continue\n        elif string_ == \":\":\n            string_ = el\n            continue\n        elif string_ == \":\":\n            string_ = el\n            continue\n        elif string_ == \",\":\n            string_ = el\n            continue\n        elif string_ == \",\":\n            string_ = el\n            continue\n        elif string_ == \",\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"!\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"?\":\n            string_ = el\n            continue\n        elif string_ == \"\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \".\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n            string_ = el\n            continue\n        elif string_ == \"|\":\n        "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(string) > 1:\n        for index, value in enumerate(list_):\n            list_[index] = value.replace(string[0], str(index))\n    elif len(string) == 1:\n        list_[0] = string[0]\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_.append(element.format(string))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [s.replace(\"{\",\"{\").replace(\"}\",\"}\") for s in list_]\n    for element in list_:\n        if isinstance(element, list):\n            add_string(element, string)\n        else:\n            element = element.replace(\"{\",\"{\").replace(\"}\",\"}\")\n            string = string.replace(element,\"{\").replace(\"}\",\"}\")\n    return string\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        item = item.replace(string, \"\")\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(item.format(string))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return string.join(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        if isinstance(element, str):\n            result = string.replace(element, \"{}\")\n            print(result)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(0, len(l1)):\n        d1[i] = l1[i]\n    for i in range(0, len(l2)):\n        d1[i + len(l2)] = l2[i]\n    for i in range(0, len(l3)):\n        d1[i + len(l3)] = l3[i]\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    if l1 is not None:\n        for idx, el in enumerate(l1):\n            d[idx] = el\n    else:\n        d = None\n    if l2 is not None:\n        for el in l2:\n            if el not in d:\n                d[el] = []\n            d[el].append(idx)\n    else:\n        d = None\n    if l3 is not None:\n        for el in l3:\n            if el not in d:\n                d[el] = {}\n            d[el][el] = idx\n    else:\n        d = None\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(l1)\n    d2 = dict(l2)\n    d3 = dict(l3)\n    d1 = {key:value for key, value in d1.items() if key not in d2.keys()}\n    d2 = {key:value for key, value in d2.items() if key not in d3.keys()}\n    d3 = {key:value for key, value in d3.items() if key not in d1.keys()}\n    return d1, d2, d3"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    if len(l1) > len(l2):\n        for i in l1:\n            if i in d:\n                d[i].append(i)\n            else:\n                d[i] = [i]\n    elif len(l2) > len(l3):\n        for i in l2:\n            if i in d:\n                d[i].append(i)\n            else:\n                d[i] = [i]\n    elif len(l3) > len(l1):\n        for i in l3:\n            if i in d:\n                d[i].append(i)\n            else:\n                d[i] = [i]\n    else:\n        for i in l1:\n            if i in d:\n                d[i].append(i)\n            else:\n                d[i] = [i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        if l1[i] in d1:\n            d1[l1[i]] += 1\n        else:\n            d1[l1[i]] = 1\n    d2 = {}\n    for i in range(len(l2)):\n        if l2[i] in d2:\n            d2[l2[i]] += 1\n        else:\n            d2[l2[i]] = 1\n    d3 = {}\n    for i in range(len(l3)):\n        if l3[i] in d3:\n            d3[l3[i]] += 1\n        else:\n            d3[l3[i]] = 1\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    if len(l1)!= len(l2):\n        raise ValueError(\"Can't convert list of different length\")\n    for i in range(len(l1)):\n        if len(l1[i])!= len(l2[i]):\n            raise ValueError(\"Can't convert list of different length\")\n        if l3 is None:\n            result.update({l1[i][j]:l2[i][j] for j in range(len(l1[i]))})\n        else:\n            result.update({l1[i][j]:l2[i][j] for j in range(len(l1[i])) if l3[j] is not None})\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        d1[l3[i]] = l1[i]\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # YOUR CODE HERE\n    # create a list from l1, l2, l3\n    # create a dictionary of the list items\n    # return the dictionary\n    # you could also write this function to handle lists and dictionaries\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dic = {}\n    for x in range(len(l1)):\n        new_dic[l1[x]] = {\n            \"name\": l2[x],\n            \"age\": l3[x]\n        }\n    return new_dic\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    def dict_convert(d):\n        '''\n        Write a function to convert more than one dictionary to nested dictionary.\n        '''\n        \n        def dict_convert_nested(d):\n            '''\n            Write a function to convert more than one dictionary to nested dictionary.\n            '''\n            if not isinstance(d, dict):\n                return d\n            if len(d) == 0:\n                return {}\n            result = {}\n            for k in d.keys():\n                if isinstance(d[k], dict):\n                    result[k] = dict_convert(d[k])\n                else:\n                    result[k] = d[k]\n            return result\n        return dict_convert_nested(d)\n    \n    d = dict(zip(l1, l2))\n    return dict_convert(d)\n    \n    "
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_sum (n):\n        return n * (n + 1) / 2\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    f = lambda n: max( (f(n/2), f(n/3), f(n/4), f(n/5)), n)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (f (n) + max (f (n/2) + f (n/3) + f (n/4) + f (n/5)))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # get the first solution\n    f_a = 10**30\n    f_b = 0\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    else:\n        #return max( f(n/2) + f(n/3) + f(n/4) + f(n/5), n )\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return n\n    max = 0\n    for i in range (2, n + 1):\n        max = max + (f(i) + max)\n    return max\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    while (f > 0):\n        f -= 1\n        if (f < 0):\n            f = -f\n            return f\n    return f\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = 0\n    while (n%2!= 0):\n        n = n//2\n        result += n\n    while (n%3!= 0):\n        n = n//3\n        result += n\n    while (n%4!= 0):\n        n = n//4\n        result += n\n    while (n%5!= 0):\n        n = n//5\n        result += n\n    return result\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return f(n)\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    a = 1\n    b = 0\n    for i in range(1, n+1):\n        if i%2==0:\n            a = a*i\n        elif i%3==0:\n            b = b*i\n        elif i%4==0:\n            b = b*i\n        elif i%5==0:\n            b = b*i\n    return b + (n**2) + a + b\n        \ndef main():\n    print(\"Calculator\")\n    n = int(input(\"Enter the number of numbers you want to find the maximum sum (between 1 and 99): \"))\n    print(\"The maximum sum is \", get_max_sum(n))\n    \nmain()\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(list(map(len, input_list)))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    \n    for i in input_list:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n    \n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return []\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    output = ''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(output) > max_length:\n            max_length = len(output)\n        output = output + str(input_list[i])\n    return(output)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if input_list == []:\n        return 0\n    elif input_list == [1,2,3,4]:\n        return 3\n    elif input_list == [1,2,3,4,5]:\n        return 5\n    else:\n        return len(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # max_len = len(max(input_list, key = len))\n    # return max_len\n    return max(input_list, key = len)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    res = True\n    for item in test_tup:\n        if item in test_tup:\n            res = False\n    return res\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] not in test_tup[i+1:]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #tuple_list = []\n    #for row in test_tup:\n        #tuple_list.append(row)\n    #check_list = []\n    #for row in test_tup:\n        #if row not in check_list:\n            #check_list.append(row)\n    #return not len(check_list)\n    \n    #return (test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if tuple not in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    a = tuple(test_tup)\n    if len(set(a)) == len(a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for item in test_tup:\n        if item in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup.count(test_tup[0]) == len(test_tup):\n        print('{} is not a duplicate!'.format(test_tup[0]))\n        return False\n    else:\n        print('{} is not a duplicate!'.format(test_tup[0]))\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create list of characters\n    characters = list(str1)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    res = []\n    for ch in str1:\n        if not res or res[-1]!= ch:\n            res.append(ch)\n    return res[0]\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #get length of string\n    str1_len = len(str1)\n    #set counter variable to 0\n    counter = 0\n    #iterate till the length of string\n    for i in range(str1_len):\n        #check if the element is equal to the letter\n        if(str1[i] == str1[i+1]):\n            #increment counter\n            counter += 1\n        #if character is not equal to the letter then the index of the letter\n        elif(str1[i]!= str1[i+1]):\n            #increment counter\n            counter += 1\n            #if counter reaches the max, return the character\n            if(counter == str1_len - 2):\n                return str1[i]\n    #if the return is not the correct character then return the character\n    return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    l = len(str1)\n    if l == 0:\n        return \"\"\n    else:\n        return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # remove any leading and trailing spaces\n    str1 = str1.strip()\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if char == str1[0]:\n            return char\n    return \"None\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    n_occurrence_char = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            n_occurrence_char += 1\n        else:\n            pass\n    return n_occurrence_char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code here\n    a = str1.split(' ')\n    return a[1][0]\n    #raise NotImplementedError\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set(str1.lower().replace(' ','').replace('-','').replace('.','').replace('!','').replace('?','').replace(',','').replace(';','').replace(' ','').replace('.','').replace('!','').replace('?','').replace(',','').replace(';','').replace('\\n','').replace('\\t',''))\n    return next(char for char in char_set if char not in char_set)\n    "
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string: \n        return False\n    else:\n        temp = string[0]\n        if string[0] == temp:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return True\n    \n    # Check if length is a multiple of 3 and return False if it is not\n    if len(string) % 3!= 0:\n        return False\n    \n    # Check if all characters are lowercase\n    if string.islower():\n        return False\n    \n    # Check if it is an uppercase\n    if string.isupper():\n        return False\n    \n    # Check if the characters at the front of the string are an upper case\n    if string[0].isupper():\n        return False\n    \n    # Check if the characters at the end of the string are an upper case\n    if string[-1].isupper():\n        return False\n    \n    # Check if the characters at the beginning of the string are an uppercase\n    if string[0].islower():\n        return False\n    \n    # Check if all the characters at the front of the string are lowercase\n    if string[0].islower():\n        return False\n    \n    # Check if all the characters at the end of the string are lowercase\n    if string[-1].islower():\n        return False\n    \n    # Check if the characters at the beginning of the string are lowercase\n    if string[0].islower():\n        return False\n    \n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) < 1:\n        return False\n    if len(string) > 30:\n        return False\n    if string[0]!= string[-1]:\n        return False\n    if string[0] in string:\n        return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('a') or string.endswith('a'):\n        return True\n    elif len(string) == 1 and string.isalpha():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # check if string starts with the character \n    if string[0] == string[-1]: \n        return True\n    # check if string starts with the character \n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code here\n    # get the match object\n    match = re.match(regex, string)\n    # check if match object is None\n    if match is None:\n        return \"Match failed!\"\n    return \"Match passed\"\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #string=string.replace(' ','')\n    #string=string.replace('.','')\n    #string=string.replace('-','_')\n    #string=string.replace('[','_')\n    #string=string.replace(']','_')\n    #string=string.replace('{','_')\n    #string=string.replace('}','_')\n    #string=string.replace('\"','_')\n    #string=string.replace('!','_')\n    #string=string.replace('&','_')\n    #string=string.replace('|','_')\n    #string=string.replace('$','_')\n    #string=string.replace('&','_')\n    #string=string.replace('&','_')\n    #string=string.replace('_',' ')\n    #string=string.replace('|','_')\n    #string=string.replace('&','_')\n    #string=string.replace('$','_')\n    #string=string.replace('%','_')\n    #string=string.replace('*','_')\n    #string=string.replace('+','_')\n    #string=string.replace('0','_')\n    #string=string.replace('1','_')\n    #string=string.replace('2','_')\n    #string=string.replace('3','_')\n    #string=string.replace('4','_')\n    #string=string.replace('5','_')\n    #string=string.replace('6','_')\n    #string=string.replace('7','_')\n    #string=string.replace('8','_')\n    #string=string.replace('9','_')\n    #string=string.replace('_',' ')\n    #string=string.replace(' ','_')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replace('_',' ')\n    #string=string.replac"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    print(a,b,c)\n    median = (a+b+c[int(len(c)/2)])/3\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if not isinstance(a,(int,float)):\n        raise TypeError(\"Input a number!\")\n    if not isinstance(b,(int,float)):\n        raise TypeError(\"Input b number!\")\n    if not isinstance(c,(int,float)):\n        raise TypeError(\"Input c number!\")\n    if a > b:\n        a,b,c = b,a,c\n    if a > c:\n        a,c = c,a\n    if b > c:\n        b,c = c,b\n    a = sorted([a,b,c])\n    if len(a)%2 == 1:\n        return a[int((len(a)/2)-1)]\n    if len(a)%2 == 0:\n        return (a[int(len(a)/2)] + a[int((len(a)/2)-1)])/2\n    \n    \ndef find_numbers(lst):\n    '''\n    Write a function that returns the smallest and largest number in a list.\n    '''\n    if not isinstance(lst,(list,tuple)):\n        raise TypeError(\"Input a list!\")\n    if len(lst) < 1:\n        raise TypeError(\"Input a list!\")\n    if len(lst) > 1000:\n        raise TypeError(\"Input a list!\")\n    if len(lst) == 1:\n        return lst[0],lst[0]\n    else:\n        if len(lst) == 2:\n            return lst[0],lst[1]\n        else:\n            if lst[0] < lst[1]:\n                return lst[0],lst[1]\n            else:\n                return lst[1],lst[0]\n        \ndef find_even(lst):\n    '''\n    Write a function that returns the number of even numbers in a list.\n    '''\n    if not isinstance(lst,(list,tuple)):\n        raise TypeError(\"Input a list!\")\n    if len(lst) < 1:\n        raise TypeError(\"Input a list!\")\n    if len(lst) > 1000:\n        raise TypeError(\"Input a list!\")\n    if len(lst) == 1:\n        return len([i for i in lst if i%2 == 0])\n    else:\n        if lst[0] % 2 == 0:\n            return len([i for i in lst if i%2 == 0])\n        else:\n            if lst[0] > lst[1]:\n                return len([i for i in lst if i%2 == 0])\n            else:\n                return len([i for i in lst if i%2 == 1])\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    s=a+b+c\n    s=s/3\n    if s%2==0:\n        return (a+b+c)/2\n    else:\n        return (a+b)/2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # write your code here\n    if a==b==c==0:\n        return 0\n    if a==0 or b==0 or c==0:\n        return 0\n    \n    a,b,c=sorted([a,b,c])\n    median= (a+b+c)//2\n    \n    if a==median:\n        return a\n    elif b==median:\n        return b\n    else:\n        return c\n    \n    \n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and b<c:\n        med=a+b+c\n        med=med//3\n        print(\"median is\",med)\n    elif a<b:\n        med=a+b\n        med=med//3\n        print(\"median is\",med)\n    elif b<c:\n        med=b+c\n        med=med//3\n        print(\"median is\",med)\n    elif b==c:\n        med=a\n        med=med//3\n        print(\"median is\",med)\n    else:\n        med=b+c\n        med=med//3\n        print(\"median is\",med)\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if c%2 == 0:\n        if b%2 == 0:\n            return (a+b+c)/3\n        else:\n            return (b+c)/2\n    else:\n        if b%2 == 0:\n            return (a+c)/2\n        else:\n            return (b+c)/1.5\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==b and b==c:\n        return a\n    if b==c:\n        return b\n    a=a+b+c\n    a=a//3\n    return a\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return (a + b + c) / 3\n    else:\n        return \"The numbers are not sorted\"\ndef median_numbers_test(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return (a + b + c) / 3\n    else:\n        return \"The numbers are not sorted\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)<3 or len(b)<3:\n        return None\n    d=[]\n    for i in range(len(a)):\n        d.append(a[i]+b[i]+c[i])\n    d.sort()\n    return d[len(d)//3]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    if len(nums) == 1:\n        return nums[0]\n    \n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n    \n    \n    #return sum(nums)\n    #return sum(map(int, nums))\n    \n    #return sum(nums)\n    \n    \n    #return sum(map(int, str(nums)))\n    \n    #return sum(map(int, ''.join(map(str, nums))))\n    \n    #return sum(nums)\n    \n    \n    #return sum(nums)\n    #return sum(map(int, ''.join(map(str, nums))))\n    \n    #return sum(map(int, ''.join(map(str, nums))))\n    \n    #return sum(nums)\n    \n    #return sum(map(int, ''.join(map(str, nums))))\n    \n    #return sum(nums)\n    #return sum(map(int, ''.join(map(str, nums))))\n    \n    #return sum(nums)\n    \n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    \n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    \n    #return sum(nums)\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    \n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    \n    #return sum(nums)\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    #return sum(map(int, ''.join(map(str, nums))))\n    "
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # TODO: Your code here\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += int(i)\n    return sum\n    \n    "
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    # Add leading 0s to the end\n    nums.append(0)\n    \n    # Iterate over the list\n    for i in range(len(nums)):\n        # Add the result of the current digit to the output\n        nums[i] = sum(int(num) for num in str(nums[i]))\n    \n    # Return the sum of digits of each element\n    return sum(int(num) for num in str(nums[-1]))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pas"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    sum_numbers = 0\n    \n    for i in nums:\n        sum_numbers += int(i)\n    \n    return sum_numbers\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += i\n    return s\n    # should return 6"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for number in nums:\n        sum_of_digits += int(number)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # TODO: Replace pass with your code\n    #pass\n    return(test_tup1[0] ^ test_tup2[0])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return ((test_tup1[0] ^ test_tup2[0]) & 0xFF, (test_tup1[1] ^ test_tup2[1]) & 0xFF, (test_tup1[2] ^ test_tup2[2]) & 0xFF)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    \n    #Return the first element of each tuple as a list\n    a = tup1[0]\n    b = tup2[0]\n    #Return the rest of the tuple as a list\n    c = tup1[1:]\n    d = tup2[1:]\n    #Access the first element of each tuple using a slice syntax\n    e = c[0]\n    f = d[0]\n    \n    #Store the xor result in a variable\n    xor = e ^ f\n    \n    #Return the first element of each tuple as a list\n    return(a, b, c, d, e, f, xor)\n    \ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert tuples to lists\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    # Initialise empty lists\n    xor_list = []\n    # Loop through the lists and perform the bitwise xor\n    for index in range(len(test_tup1)):\n        test_tup1[index] = bin(test_tup1[index])\n        test_tup2[index] = bin(test_tup2[index])\n        test_tup1[index] = test_tup1[index].zfill(32)\n        test_tup2[index] = test_tup2[index].zfill(32)\n        xor_list.append(test_tup1[index] + test_tup2[index])\n    # Return the results\n    return xor_list\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Our answer is always a tuple\n    answer = ()\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = test_tup1\n    else:\n        answer = tuple(t for t in answer for t in test_tup2)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answer) == 0:\n        answer = (0, 0, 0)\n    # Check whether our answer is empty\n    if len(answe"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Obtain all the bits of the first tuple\n    tup1 = tuple(map(int, list(test_tup1)))\n    # Obtain all the bits of the second tuple\n    tup2 = tuple(map(int, list(test_tup2)))\n    # Combine all the bits in the tuple into a single int.\n    xor = sum(tup1) ^ sum(tup2)\n    # Turn the bitstring into a list and print out the result.\n    result = list(map(int, list(bin(xor)[2:].rjust(32, '0'))))\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x1 = test_tup1[0]\n    y1 = test_tup1[1]\n    x2 = test_tup2[0]\n    y2 = test_tup2[1]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_test = ''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            xor_test = xor_test + '0'\n        else:\n            xor_test = xor_test + '1'\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #store the tuples in the form of a list\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n    # YOUR CODE HERE\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = collections.Counter()\n    for i in range(len(test_list)):\n        freq[(test_list[i][0], test_list[i][1])] += 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count=0\n    for item in test_list:\n        if len(set(item))==len(item):\n            count+=1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    freq = {}\n    \n    for string in test_list:\n        word = string.strip().lower()\n        \n        if word not in freq:\n            freq[word] = 1\n        else:\n            freq[word] += 1\n    \n    freq = dict(sorted(freq.items(), key=lambda item: item[1], reverse=True))\n    \n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = dict()\n    for line in test_list:\n        if line[0] not in freq_dict:\n            freq_dict[line[0]] = 0\n        freq_dict[line[0]] += 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list_freq = []\n    for tup in test_list:\n        test_list_freq.append(tup[0])\n    return(len(set(test_list_freq)))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    for test_case in test_list:\n        result = []\n        for test_element in test_case:\n            if isinstance(test_element, tuple):\n                result.append(len(test_element))\n        test_case.append(result)\n    return test_list\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == test_list[i][j]:\n                freq = freq + 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item[0] not in freq_dict:\n            freq_dict[item[0]] = 0\n        freq_dict[item[0]] += 1\n    \n    freq_list = sorted(freq_dict.values())\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][0])\n    return len(set(result))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = tuple(test_tup1)\n    test_tup4 = tuple(test_tup2)\n    return test_tup3, test_tup4\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples(test_tup1, test_tup2):\n        '''\n        write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        test_tup = []\n        test_tup.append(test_tup1)\n        test_tup.append(test_tup2)\n        test_tup = tuple(test_tup)\n        return test_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def create_tuple(tup):\n        new_tup = ()\n        for i in range(len(tup)):\n            new_tup = new_tup + tup[i]\n        return new_tup\n    def add_nested_tuples(tup1, tup2):\n        new_tup1 = create_tuple(tup1)\n        new_tup2 = create_tuple(tup2)\n        new_tup1 = new_tup1 + new_tup2\n        return new_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    # Declare variables\n    result = []\n    # Inner loop\n    for i in test_tup1:\n        result.append(i + test_tup2[i])\n    # Outer loop\n    for i in test_tup2:\n        result.append(i + test_tup1[i])\n    # Return result\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for x, y in zip(test_tup1, test_tup2):\n        if not isinstance(x, tuple) or not isinstance(y, tuple):\n            return False\n    return True\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print(type(test_tup1), type(test_tup2))\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]))\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Define function for index-wise addition\n    def add_element(tup1, tup2):\n        # Create a new tuple containing the sum of each element of the two tuples\n        add_tuple = tuple(map(sum, zip(tup1, tup2)))\n        # Return the add-tuple\n        return add_tuple\n    # Compute the sum of each element of the two tuples\n    add_tuple1 = add_element(test_tup1, test_tup2)\n    # Return the sum of each element of the two tuples\n    return add_tuple1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #get the length of the lists\n    length = len(test_tup1)\n    #for each item in the tuple and concatenate the first item and add the second item\n    for i in range(length):\n        test_tup1[i] += test_tup2[i]\n        #print(test_tup1)\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuples(x,y):\n        x = x + y\n        return x\n    print(test_tup1)\n    print(test_tup2)\n    print(add_tuples(test_tup1, test_tup2))\n    print()\n    \ndef add_tuples2():\n    '''\n    Write a function that returns the sum of two tuples, \n    and return the sum of the two tuples as a new tuple.\n    '''\n    def add_tuples(x,y):\n        x = x + y\n        return x\n    print(add_tuples(1,2))\n    print(add_tuples(3,4))\n    print(add_tuples(5,6))\n    print(add_tuples(7,8))\n    print()\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # minimum of a and b is 1\n    if (a<b):\n        minimum = a\n    else:\n        minimum = b\n    # minimum is now 1\n    return minimum\nprint(minimum(2,3)"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (b > a):\n        temp = a\n        a = b\n        b = temp\n    return a\nprint(minimum(6,8))\nprint(minimum(1,2))\nprint(minimum(7,8))\nprint(minimum(4,6))\nprint(minimum(6,2))\nprint(minimum(2,3))\nprint(minimum(2,4))\nprint(minimum(2,5))\nprint(minimum(1,4))\nprint(minimum(8,6))\nprint(minimum(4,3))\nprint(minimum(6,3))\nprint(minimum(8,2))\nprint(minimum(5,7))\nprint(minimum(4,2))\nprint(minimum(8,1))\nprint(minimum(6,8))\nprint(minimum(4,7))\nprint(minimum(6,6))"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    c = a if b > a else b\n    while a <= b:\n        if a > c:\n            a = a - (a-c)\n            c = c - a\n        else:\n            a = a + (a-c)\n            c = c + a\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b == 0:\n        return a\n    elif b == 1:\n        return a+a\n    else:\n        return a-a\ndef minimum2(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b == 0:\n        return a\n    elif b == 1:\n        return a+a\n    else:\n        return a-a\ndef maximum2(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\ndef division(a,b):   \n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    if b == 0:\n        return a\n    elif b == 1:\n        return a/a\n    else:\n        return a-a\ndef division2(a,b):\n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    return a if a>b else b\ndef add(a,b):   \n    '''\n    Write a python function to find the addition of two numbers.\n    '''\n    return a+b\ndef add2(a,b):\n    '''\n    Write a python function to find the addition of two numbers.\n    '''\n    return a+b\ndef subtract(a,b):   \n    '''\n    Write a python function to find the subtraction of two numbers.\n    '''\n    return a-b\ndef subtract2(a,b):\n    '''\n    Write a python function to find the subtraction of two numbers.\n    '''\n    return a-b\ndef multiply(a,b):   \n    '''\n    Write a python function to find the multiplication of two numbers.\n    '''\n    return a*b\ndef multiply2(a,b):\n    '''\n    Write a python function to find the multiplication of two numbers.\n    '''\n    return a*b\ndef divide(a,b):   \n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    return a/b\ndef divide2(a,b):\n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    return a/b\ndef square(a):   \n    '''\n    Write a python function to find the square of a number.\n    '''\n    return a*a\ndef square2(a):\n    '''\n    Write a python function to find the square of a number.\n    '''\n    return a*a\ndef cube(a):   \n    '''\n    Write a python function to find the cube of a number.\n    '''\n    return a*a*a\ndef cube2(a):\n    '''\n    Write a python function to find the cube of a number.\n    '''\n    return a*a*a*a\ndef power(a,b):   \n    '''\n    Write a python function to find the power of a number.\n    '''\n    return a**b\ndef power2(a,b):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    return a**b\ndef power3(a,b):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    return a**b\ndef remainder(a,b):   \n    '''\n    Write a python function to find the remainder of a number.\n    '''\n    return a%b\ndef remainder2(a,b):\n    '''\n    Write a python function to find the remainder of a number.\n    '''\n    return a%b\ndef modulo(a,b):   \n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo2(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo3(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo4(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo5(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo6(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo7(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo8(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo9(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo10(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo11(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo12(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo13(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo14(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo15(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo16(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo17(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo18(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo19(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo20(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo21(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo22(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo23(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo24(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo25(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo26(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo27(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo28(a,b):\n    '''\n    Write a python function to find the modulo of a number.\n    '''\n    return a%b\ndef modulo29("
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return (a if a>b else b"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        a,b = b,a\n    \n    while a!= b:\n        a = a+b\n        b = b+a\n        \n    return a-b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # write your code here\n    if a > b:\n        min = a\n        a = b\n        b = min\n    return(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #return min(a,b)\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n    \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check=0\n    for i in tuplex:\n        if i==tuple1:\n            check=1\n            break\n    return check\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Declare a tuple as a variable.\n    tuplex = list(tuplex)\n    # Add an element to the tuple.\n    tuplex.append(tuple1)\n    # Display the string in a tuple.\n    print(tuple(tuplex))\n    # Check for the existence of the element in the tuple.\n    if tuple(tuplex) in tuplex:\n        print('true')\n    else:\n        print('false')\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check_tuplex = False\n    for i in tuplex:\n        if i == tuple1:\n            check_tuplex = True\n    return check_tuplex\n    \ndef check_tuple(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check_tuple = False\n    for i in tuplex:\n        if i == tuple1:\n            check_tuple = True\n    return check_tuple\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    tuplex_len = len(tuplex)\n    if tuplex_len == len(tuple1):\n        tuplex_index = 0\n        for i in range(tuplex_len):\n            if tuplex[i] == tuple1[tuplex_index]:\n                return True\n            tuplex_index += 1\n        return False\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple_len = len(tuple1)\n    if tuple_len!= len(tuplex):\n        return False\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1[i]:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # empty tuple\n    if len(tuplex) == 0:\n        return None\n    # a tuple\n    else:\n        for element in tuplex:\n            # if element is in tuple1\n            if element in tuple1:\n                return True\n        # if element is not in tuple1\n        else:\n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = (x % 2) == 0\n    return result\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0 or x == 1: \n        return 1\n    else:\n        if x % 2 == 0: \n            return 0\n        else:\n            return 1\ndef find_triangle_number(x): \n    '''\n    Write a python function to find the triangle number of a given number.\n    '''\n    if (x < 1) or (x > 2): \n        return 1\n    else:\n        return(x * (x - 1) / 2)\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # TODO: complete this function\n    if x < 2:\n        return False\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if x is even, return odd\n    # if x is odd, return even\n    if x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Your code here\n    num = int(x)\n    odd = True\n    # print(x)\n    if num % 2!= 0:\n        odd = False\n    return odd\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0:\n        return False\n    else:\n        return True if (x % 2 == 0) else False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Write your code here\n    return x % 2 == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    try:\n        num = x % 2\n        if num == 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd=0\n    for i in range(x): \n        if (x%2)==0: \n            odd+=1\n    if odd%2==1: \n        return \"Parity is Odd\"\n    else: \n        return \"Parity is Even\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Check if given number is a perfect square.\n    if is_perfect_square(n):\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a = str(n)\n    big = a[0:1] + a[2:3] + a[3:4]\n    return int(big)\n    \ndef count_digits(n):\n    '''\n    Write a function to count the number of digits in a given number.\n    '''\n    s = str(n)\n    s = s.split('0')\n    digits = len(s[0])\n    return digits\n    \n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # change sign of each number\n    sign = 1\n    num = n\n    n = int(str(n)[::-1])\n    # increment sign\n    sign *= -1\n    # add number to negative sign\n    n = n + sign\n    # add number to positive sign\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    while len(str(n)) < n + 10:\n        n = int(str(n)[0]) + 1\n    # add number to negative sign\n    n = n + sign\n    # add number to positive sign\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    while len(str(n)) < n + 10:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zeros\n    if n > 9:\n        n = int(str(n)[0]) + 1\n    # add number to zero"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    if n == '':\n        n = '0'\n    s = 0\n    for i in n:\n        s = s * 10 + int(i)\n    n = str(s)\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n    digits.reverse()\n    return digits\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Your code here\n    if n == 0:\n        return 0\n    elif n < 10:\n        return n\n    \n    a = n // 10\n    b = n % 10\n    return a + rearrange_bigger(b)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def mod_int(n, m):\n        n = str(n)\n        n = n.zfill(m)\n        return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    digits = []\n    for i in range(n):\n        digits.append(int(str(n)[i]))\n    digits.reverse()\n    n = ''.join(str(i) for i in digits)\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 1:\n        return n\n    \n    return int(str(n)[0]) + rearrange_bigger(n//10) + (n%10 if n%10!= 0 else 0)\n    \ndef main():\n    '''\n    First test case:\n    Input:\n    10\n    Output:\n    11\n    '''\n    n = 10\n    print(\"11: \" + str(n))\n    print(\"result: \" + str(rearrange_bigger(n)))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + rearrange_bigger(n // 10)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 1:\n        return nums1 == nums2\n    if len(nums1) == 0 or len(nums2) == 0:\n        return -1\n    if len(nums1) < len(nums2):\n        smallest = heapq.heappop(nums1)\n        heapq.heappush(nums2, smallest)\n        smallest_pair = []\n        for i in nums1:\n            smallest_pair.append((i, smallest[0]))\n        return smallest_pair\n    else:\n        smallest = heapq.heappop(nums2)\n        heapq.heappush(nums1, smallest)\n        smallest_pair = []\n        for i in nums2:\n            smallest_pair.append((i, smallest[0]))\n        return smallest_pair\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Idea: 2 pointers approach.\n    # 1. Using heapsq, the array will be modified\n    # 2. If the length is 1, we just return the array\n    # 3. We keep track of the min heap and the max heap as we move one at a time\n    # 4. Then we recur for the rest of the array, find the min heap and its max heap, and finally the smallest pairs that we get.\n    # Note: the size of the heap must be O(1)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    k_heap = []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    small = []\n    small.extend(sorted(nums1))\n    small.extend(sorted(nums2))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr1 = nums1.copy()\n    arr2 = nums2.copy()\n    heapq.heapify(arr1)\n    heapq.heapify(arr2)\n    while len(arr1) > 0 and len(arr2) > 0:\n        if arr1[0] == arr2[0]:\n            heapq.heappop(arr1)\n            heapq.heappop(arr2)\n        elif arr1[0] < arr2[0]:\n            heapq.heappop(arr1)\n            heapq.heappop(arr2)\n        else:\n            heapq.heappop(arr2)\n            heapq.heappop(arr1)\n    if len(arr1) > 0:\n        heapq.heappop(arr1)\n    if len(arr2) > 0:\n        heapq.heappop(arr2)\n    return len(arr1) + len(arr2)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort both arrays\n    nums1.sort()\n    nums2.sort()\n    \n    # create a heap with size of 1\n    heap = [nums1[0]]\n    for i in range(1,len(nums1)):\n        if nums1[i] > heap[-1]:\n            heapq.heappush(heap, nums1[i])\n            heapq.heappush(heap, nums2[i])\n        else:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums1[i])\n            heapq.heappush(heap, nums2[i])\n    \n    # return the index of the k smallest elements\n    return heapq.heappop(heap) + heapq.heappop(heap"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest = nums1 + nums2\n    smallest.sort()\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time complexity: O(NlogN)\n    # Space Complexity: O(1)\n    # Runtime: 32 ms (94.93%)\n    # Memory Usage: 18.6 MB (42.40%)\n    def smallest_pairs(nums1, nums2):\n        minheap = []\n        for num in nums1:\n            heapq.heappush(minheap, (num, num))\n        for num in nums2:\n            heapq.heappush(minheap, (num, num))\n        while len(minheap) > k:\n            pair = heapq.heappop(minheap)\n            yield pair\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return (0, 0)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    if n == 0:\n        return 0\n    if n == 1:\n        return list1[0][0] * list1[0][1]\n    list_1 = sorted(list1)\n    product = list_1[0][1] * list_1[1][1]\n    for i in range(2, n):\n        product = product * list_1[i][1]\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]\n    for i in range(1, len(list1)):\n        for j in range(0, len(list1[i])):\n            if min_product < list1[i][j]:\n                min_product = list1[i][j]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_val = min(list1[0][1],list1[1][1])\n    min_val_idx = list1[0][0]\n    min_val_idx = list1[1][0]\n    for i in range(2,len(list1)):\n        min_val = min(min_val,list1[i][1])\n        min_val_idx = min(min_val_idx,list1[i][0])\n        if min_val == list1[i][1]:\n            min_val_idx = list1[i][0]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for num in list1:\n        min_product = max(min_product, num[0]*num[1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            min_product = min(min_product, product)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_list = []\n    result = 0\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return list1[0]\n    \n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            if list1[i] * list1[j] < list1[i] * list1[j - 1]:\n                return list1[i] * list1[j]\n    \n    return list1[i] * list1[i]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_p = min(list1)\n    minimum_s = list1.index(minimum_p)\n    return minimum_p, minimum_s\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    min_product_tuple = ()\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if (list1[i][0] * list1[j][1]) > min_product:\n                min_product = (list1[i][0] * list1[j][1])\n                min_product_tuple = (list1[i][0], list1[j][1])\n    return min_product_tuple\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_index = 0\n    min_value = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min_value:\n            min_index = i\n            min_value = listval[i]\n    return min_index\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = 100000\n    for item in listval:\n        if item < minimum:\n            minimum = item\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for elem in listval:\n        if elem < min_value:\n            min_value = elem\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum_value = 0\n    for value in listval:\n        if value < minimum_value:\n            minimum_value = value\n    return minimum_value\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minval = listval[0]\n    for v in listval:\n        if v < minval:\n            minval = v\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Write your code here.\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # create a set to store the values\n    setval = set()\n    \n    # iterate over the list\n    for v in listval:\n        # add the value to the set\n        setval.add(v)\n    \n    # return the minimum value in the set\n    return min(setval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(len(listval)):\n        if minval < listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = 0\n    for value in listval:\n        if value < minimum:\n            minimum = value\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(0,len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('([a-z])([A-Z])','\\\\1_\\\\2',''.join(word.title()))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # In the order of arguments\n    # [ 'w', 'e', 'r','s', 't', 'i', 'd', 'u', 'f' ]\n    # ['word1', 'word2', 'word3', 'word4', 'word5']\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    lst = re.split('([A-Z])', word)\n    return \"\".join([i[0] + i[1].upper() + i[2:] for i in lst])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not isinstance(word,str):\n        raise TypeError(\"word must be a string\")\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.search(\"(?<!^)(?=[A-Z])\", word):\n        return word\n    elif re.search(\"(?<!^)(?=[a-z])\", word):\n        return word\n    elif re.search(\"(?<!^)(?=[A-Z][a-z])\", word):\n        return word\n    elif re.search(\"(?<!^)(?=[A-Z][a-z])\", word):\n        return word\n    elif re.search(\"(?<!^)(?=[A-Z][a-z])\", word):\n        return word\n    elif re.search(\"(?<!^)(?=[A-Z][a-z])\", word):\n        return word\n    elif re.search(\"(?<!^)(?=[A-Z][a-z])\", word):\n        return word\n    else:\n        return word + '_'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # first, replace all the numbers with a simple variable that represents the unique value of the variable.\n    new_word = re.sub('([0-9])([A-Z])', r'\\1_\\2', word)\n    # then, keep the first character in the first position of the new string, so that there will be no double apostrophe.\n    new_word = re.sub('([a-z])', r'\\1_\\2', new_word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'(.)([A-Z][a-z]+)')\n    return pattern.sub(r'\\1\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0] == '_':\n        return word[1:]\n    else:\n        return word+'_'\ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    return re.sub(r'([a-zA-Z])([A-Z])', r'\\1_\\2', word).lower()\ndef combine(word_list):\n    '''\n    Write a function that takes a word list and makes a list of all words that are of the same length.\n    '''\n    temp_list = []\n    for word in word_list:\n        temp_list += [word for word in word_list if len(word) == len(word_list[word])]\n    return temp_list\ndef all_words(word_list):\n    '''\n    Write a function that takes a word list and makes a list of all words that are of the same length.\n    '''\n    temp_list = []\n    for word in word_list:\n        temp_list += [word for word in word_list if len(word) == len(word_list[word])]\n    return temp_list\ndef words_to_camel(words):\n    '''\n    Write a function that takes a word list and makes a list of all words that are of the same length.\n    '''\n    temp_list = []\n    for word in words:\n        temp_list += [word for word in words if len(word) == len(word_list[word])]\n    return temp_list\ndef words_to_snake(words):\n    '''\n    Write a function that takes a word list and makes a list of all words that are of the same length.\n    '''\n    temp_list = []\n    for word in words:\n        temp_list += [word for word in words if len(word) == len(word_list[word])]\n    return temp_list\ndef unique(words):\n    '''\n    Write a function that takes a word list and makes a list of all words that are of the same length.\n    '''\n    temp_list = []\n    for word in words:\n        temp_list += [word for word in words if word not in temp_list]\n    return temp_list\ndef remove_punctuation(word):\n    '''\n    Write a function that takes a word and removes all punctuation from it.\n    '''\n    return re.sub(r'[^\\w\\s]', '', word.lower())\ndef get_stopwords():\n    '''\n    Return a list of stopwords from the txt file.\n    '''\n    with open('stopwords.txt') as f:\n        stopwords = [line.rstrip() for line in f]\n        return stopwords\ndef find_most_common_words(text):\n    '''\n    Write a function that takes a text string and returns a list of words that occur the most often.\n    '''\n    p = r'\\b\\w+\\b'\n    count = {}\n    for word in text.split():\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    if len(count) == 0:\n        return []\n    else:\n        sorted_list = sorted(count.items(), key=lambda x: x[1], reverse=True)\n        return [k for k, v in sorted_list[:3]]\ndef remove_stopwords(text):\n    '''\n    Return a list of words that do not appear in the stopwords list.\n    '''\n    return [word for word in text.split() if word not in get_stopwords()]\ndef stemming(word):\n    '''\n    Return a word in which each letter is replaced by its corresponding\n    first letter, then the next letter, then the next letter, and so on.\n    '''\n    return word.lower().replace(' ','')+word.lower().replace(',','.').replace(':','.').replace('!','.')\ndef uni_case(word):\n    '''\n    Return a word in which each letter is replaced with its corresponding\n    first letter, then the next letter, then the next letter, and so on.\n    '''\n    return word.lower().replace(' ','')+word.lower().replace(',','.').replace('!','.')\ndef lemmatize(word):\n    '''\n    Return a word in which each letter is replaced with its corresponding\n    first letter, then the next letter, then the next letter, and so on.\n    '''\n    return word.lower().replace(' ','')+word.lower().replace(',','.').replace('!','.')\ndef word_count(text):\n    '''\n    Return a list of words in which each word appears 3 times in the text.\n    '''\n    words_count = []\n    for word in text.split():\n        if len(word) > 3:\n            words_count.append(word)\n    return words_count\ndef count_words(text):\n    '''\n    Return a dictionary where the keys are words and the values are their counts.\n    '''\n    count_dict = {}\n    for word in text.split():\n        if word in count_dict:\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n    return count_dict\ndef find_lemmatizer(text):\n    '''\n    Return a list of words with their lemmatized form.\n    '''\n    lemmatized_words = []\n    for word in text.split():\n        if word in lemmatizer:\n            lemmatized_words.append(word+'_'+lemmatizer[word])\n        else:\n            lemmatized_words.append(word+'_'+'_')\n    return lemmatized_words\ndef find_lemmatizer_all_words(text):\n    '''\n    Return a list of words with their lemmatized form.\n    '''\n    lemmatized_words = []\n    for word in text.split():\n        if word in lemmatizer:\n            lemmatized_words.append(word+'_'+lemmatizer[word])\n        else:\n            lemmatized_words.append(word+'_'+'_')\n    return lemmatized_words\ndef lemmatize_word(word):\n    '''\n    Return a word in which each letter is replaced with its corresponding\n    first letter, then the next letter, then the next letter, and so on.\n    '''\n    return word.lower().replace(' ','')+word.lower().replace(',','.').replace('!','.')\ndef find_most_common_lemmatizer(text):\n    '''\n    Return a list of words that occur the most often in the text.\n    '''\n    lemmatizer = find_lemmatizer_all_words(text)\n    lemmatizer_count = count_words(text)\n    lemmatizer_dict = dict(count_words(text))\n    most_common_lemmatizer = []\n    for word in lemmatizer:\n        if word in lemmatizer_count:\n            if lemmatizer_dict[word] > lemmatizer_count[word]:\n                most_common_lemmatizer.append(word)\n    return most_common_lemmatizer\ndef find_most_common_lemmatizer(text):\n    '''\n    Return a list of words that occur the most often in the text.\n    '''\n    lemmatizer = find_lemmatizer(text)\n    lemmatizer_count = count_words(text)\n    lemmatizer_dict = dict(count_words(text))\n    most_common_lemmatizer = []\n    for word in lemmatizer:\n        if word in lemmatizer_count:\n            if lemmatizer_dict[word] > lemmatizer_count[word]:\n                most_common_lemmatizer.append(word)\n    return most_common_lemmatizer\ndef find_most_common_lemmatizer_all_words(text):\n    '''\n    Return a list of words that occur the most often in the text.\n    '''\n    lemmatizer = find_lemmatizer_all_words"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r\"_[a-zA-Z]*\", r\"_\\g<0>\", word).lower()\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_remove_odd = []\n    for i in range(len(l)):\n        if(i % 2 == 1):\n            l_remove_odd.append(l[i])\n    return l_remove_odd\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    for i in range(len(l)):\n        if i % 2 == 1:\n            continue\n        l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [el for el in l if el % 2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return\n    else:\n        start = 0\n        end = len(l)-1\n        while start < end:\n            if l[start] % 2 == 0 and l[end] % 2 == 0:\n                del l[start]\n                del l[end]\n                end -= 1\n            else:\n                start += 1\n        return "
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [el for el in l if el%2!=0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    try:\n        l = list(map(int, l))\n    except:\n        print('Only integers are accepted as arguments')\n        return\n    l.sort()\n    for i in range(len(l)):\n        if l[i]%2==1:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2!=0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == None or len(l) == 0:\n        return []\n    else:\n        res = []\n        for item in l:\n            if item % 2!= 0:\n                res.append(item)\n        return res\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    count = 0\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l[i] = l[i] // 2\n            count += 1\n    print(count)\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l[i] = l[i] // 2\n    print(l)\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Your code here\n    \n    return list1[n-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0:\n        return None\n    elif n >= len(list1):\n        return None\n    else:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)==len(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list2:\n        if element in list1:\n            return True\n        else:\n            return False\n        \n    \ndef count_min_max(list1):\n    '''\n    Write a python function to count the minimum and maximum values in a sequence or not.\n    '''\n    min_val = float('inf')\n    max_val = float('-inf')\n    for element in list1:\n        if element < min_val:\n            min_val = element\n        if element > max_val:\n            max_val = element\n    return min_val, max_val\n    \n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i] == list2[j]:\n                return True\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #check each value in the list1\n    if len(list1)!=len(list2):\n        print(\"invalid input. The length of the list1 must be equal to the length of list2.\")\n    else:\n        print(\"Both the lists have same length.\")\n        for i in range(len(list1)):\n            if list1[i] not in list2:\n                print(\"The value\",list1[i],\"is not present in the list2.\\n\")\n                return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list2:\n        if i in list1:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    # get length of list1\n    length = len(list1)\n    \n    # initialize a tuple to hold the count of overlapping values\n    count = ()\n    \n    # iterate through each value in list1\n    for value in list1:\n        # if there are values in list1 in the list2 that match the value, count the number of occurrences\n        if value in list2:\n            count += (list2.count(value))\n    \n    # return the count of values in list1 that are present in list2 that is not in list1\n    return count\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #pass\n    def yes(x): \n        return x*x\n    def no(x): \n        return x*x\n    \n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            print(yes(list1[i]),'and', no(list2[i]))\n            i += 1\n        else:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > arr[i]*arr[j-1]:\n                return arr[i], arr[j]\n    return arr[-1], arr[-2]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                temp = i\n                j = j\n    return max_product, temp\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]*arr[1]\n    for i in arr:\n        if i>max:\n            max = i\n    return max\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest_product_array = []\n    lowest_product_array = []\n    for i in range(len(arr)):\n        highest_product_array.append(arr[i] * arr[i])\n    for i in range(len(arr)):\n        lowest_product_array.append(arr[i] * arr[len(arr)-1 - i])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # time complexity: O(n)\n    # space complexity: O(1)\n    max1 = arr[0] * arr[0]\n    max2 = arr[0] * arr[1]\n    for i in range(1, len(arr)):\n        if max2!= arr[i] * arr[i]:\n            max2 = arr[i] * arr[i]\n            max1 = arr[i]\n    return max1, max2\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[0]\n    for i in arr:\n        for j in arr:\n            if i * j > max_product:\n                max_product = i * j\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            product = arr[i] * arr[j]\n            if product > count:\n                count = product\n                index = i\n                j = j\n    return arr[index], arr[j]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize an array to store product\n    arr = list(map(int, arr))\n    arr.sort()\n    # create an empty array to store index for \n    index = []\n    # Initialize an array to store result\n    res = 0\n    # Set index as an array of non-negative integers\n    for i in range(len(arr)):\n        index.append(i)\n    # Check the i = 0 and j = len(arr)-1\n    # if index[i] > index[j] then return index[i] and index[j]\n    # if index[i] == index[j] then return index[j]\n    for i in range(len(index)):\n        if index[i]!= index[i-1]:\n            if index[i] > res:\n                res = index[i]\n            elif index[i] < res:\n                res = index[i]\n    # if there is only one element in the array return 0\n    if len(arr) == 1:\n        return 0\n    # If there is more than one element in the array, return the highest product \n    else:\n        for i in range(len(arr)):\n            if arr[i]!= 0:\n                if res > arr[i]:\n                    res = arr[i]\n        return res\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    start = 0\n    end = len(arr)-1\n    mid = int(len(arr)/2)\n    \n    #print(arr[mid])\n    \n    while start <= mid and end >= mid:\n        \n        if arr[start]*arr[mid] < arr[mid]*arr[end]:\n            start = start +1\n        elif arr[start]*arr[mid] > arr[mid]*arr[end]:\n            end = end -1\n        elif arr[start]*arr[mid] == arr[mid]*arr[end]:\n            start = start +1\n            end = end -1\n        elif arr[start]*arr[mid] > arr[mid]*arr[end]:\n            end = end -1\n    return arr[start], arr[end]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #find the maximum product of all the elements\n    maximum = arr[0] * arr[0]\n    for i in range(1, len(arr)): \n        maximum = max(maximum, arr[i] * arr[i])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n = len(Input)\n    if n == 0:\n        return []\n    \n    if n == 1:\n        return Input\n    \n    # find the smallest number\n    smallest_element = Input[0]\n    for element in Input:\n        if element < smallest_element:\n            smallest_element = element\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(tuple(map(tuple, Input))) )\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for x in range(0,len(Input)):\n        for y in range(0,len(Input)-x-1):\n            if Input[y]==Input[y+1]:\n                continue\n            elif Input[y+1]==Input[y] and Input[y] not in Input[y+2:]:\n                return Input[y]\n    return Input[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return tuple(sorted(set(Input)))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # TODO: write a code to find common first element of given list \n    #           of tuple. \n    # Examples: \n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (4,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (4,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (4,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (4,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (1,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (1,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (4,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (1,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (1,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (4,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (4,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (1,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (1,3)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    # group_tuples([(3,2), (1,4), (4,3), (2,7), (5,5), (1,3)]) -> (2,7)\n    "
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = list(map(tuple, Input))\n    return lst[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output = []\n    for x in Input: \n        if x not in output: \n            output.append(x) \n    return output \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input : [(1, 2), (1, 2), (1, 2), (3, 2)]\n    # Output : 2\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = list(Input)\n    unique = []\n    for ele in lst:\n        if ele not in unique:\n            unique.append(ele)\n    return unique\n    \ndef unique_list(lst):\n    '''\n    Write a function to remove duplicates from given list.\n    '''\n    new_lst = []\n    for ele in lst:\n        if ele not in new_lst:\n            new_lst.append(ele)\n    return new_lst\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_tuple_list = []\n    for i in Input:\n        grouped_tuple_list.append(i)\n    return grouped_tuple_list[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key = len)\n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    return min(lst, key = len)\n    \ndef Find_Sum(lst): \n    '''\n    Write a python function to find the sum of elements in a list.\n    '''\n    return sum(lst)\n    "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = []\n    for i in lst:\n        if len(max_length) < len(i):\n            max_length = i\n    return max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            \n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst == None:\n        return None\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0] if lst[0] > lst[1] else lst[1]\n    if len(lst) == 3:\n        return lst[0] if lst[0] > lst[1] and lst[1] > lst[2] else lst[1] if lst[1] > lst[0] and lst[0] > lst[2] else lst[2]\n    if len(lst) == 4:\n        return lst[0] if lst[0] > lst[1] and lst[1] > lst[2] and lst[2] > lst[3] else lst[1] if lst[1] > lst[0] and lst[0] > lst[2] and lst[2] > lst[3] else lst[2] if lst[2] > lst[0] and lst[0] > lst[1] and lst[1] > lst[3] else lst[3]\n    if len(lst) > 4:\n        return Find_Max(lst[:4])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in lst:\n        if i>max:\n            max = i\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # your code goes here\n    max = lst[0]\n    for ele in lst:\n        if ele > max:\n            max = ele\n    return max\ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # your code goes here\n    min = lst[0]\n    for ele in lst:\n        if ele < min:\n            min = ele\n    return min\ndef Check(lst,elem):\n    '''\n    Write a python function to check whether a list contains a certain element.\n    '''\n    # your code goes here\n    if(lst.count(elem)!= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    n = 0\n    for i in range(len(list1)):\n        n += list1[i]\n    print(round(n, 2), \" \" + str(len(list1)))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # your code here\n    total_list = 0\n    length = len(list1)\n    for item in list1:\n        total_list += item\n    return total_list*length\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1.sort()\n    total = 0\n    for item in list1:\n        total += item\n    print(total)\n    \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\nround_and_sum(list1)"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    lst = []\n    total = 0\n    for i in range(len(list1)):\n        total += list1[i]\n        lst.append(total)\n        total = 0\n    return lst\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    for i in range(length):\n        list1[i] = round(list1[i])\n    return sum(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = len(list1)\n    for num in list1:\n        total = total + num\n    return total * length\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    count = 1\n    while count < len(list1):\n        total += list1[count]\n        count += 1\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total=0\n    sum=0\n    for i in list1:\n        sum+=i\n        total+=1\n    print(round(sum/len(list1)))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Method 1\n    list2 = [number**2 for number in list1]\n    print(list2)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return n*n + 3*cube_Sum(n//2) + 3*cube_Sum(n-1)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    numbers=list(range(1,n+1))\n    sum=0\n    for i in numbers:\n        sum=sum+(i**3)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    list_sum = [] \n    \n    for i in range(1, n+1): \n        num = i**3\n        if num % 2 == 0: \n            list_sum.append(num) \n    return(sum(list_sum)) \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    l = []\n    for i in range(1, n + 1):\n        l.append(i ** 3)\n    l.sort()\n    print(l)\n    sum = 0\n    for i in l:\n        sum += i\n    return sum\nprint(cube_Sum(5)"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # define a starting number \n    start = 1\n    # define an end number \n    end = n \n    # declare a variable \n    sum = 0\n    # iterate from the start until end \n    while start <= end: \n        # increment by 2 and divide by 3 \n        sum = sum + start \n        start += 2 \n    # return the total sum \n    return sum \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3)\n    \ndef cube_Sum_2(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3)\n    \ndef cube_Sum_3(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3)\n    \ndef cube_Sum_4(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3)\n    \ndef cube_Sum_5(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3)\n    \ndef cube_Sum_6(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3)\n    \ndef cube_Sum_7(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3)\n    \ndef cube_Sum_8(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3 + (n+7)**3)\n    \ndef cube_Sum_9(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3 + (n+7)**3 + (n+8)**3)\n    \ndef cube_Sum_10(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3 + (n+7)**3 + (n+8)**3 + (n+9)**3)\n    \ndef cube_Sum_11(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3 + (n+7)**3 + (n+8)**3 + (n+9)**3 + (n+10)**3)\n    \ndef cube_Sum_12(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3 + (n+7)**3 + (n+8)**3 + (n+9)**3 + (n+10)**3 + (n+11)**3)\n    \ndef cube_Sum_13(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3 + (n+7)**3 + (n+8)**3 + (n+9)**3 + (n+10)**3 + (n+11)**3 + (n+12)**3)\n    \ndef cube_Sum_14(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3 + (n+7)**3 + (n+8)**3 + (n+9)**3 + (n+10)**3 + (n+11)**3 + (n+12)**3 + (n+13)**3)\n    \ndef cube_Sum_15(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3 + (n+7)**3 + (n+8)**3 + (n+9)**3 + (n+10)**3 + (n+11)**3 + (n+12)**3 + (n+13)**3 + (n+14)**3)\n    \ndef cube_Sum_16(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error'\n    else:\n        return (n**3 + (n+1)**3 + (n+2)**3 + (n+3)**3 + (n+4)**3 + (n+5)**3 + (n+6)**3 + (n+7)**3 + (n+8)**3 + (n+9)**3 + (n+10)**3 + (n+11)**3 + (n+12)**3 + (n+13)**3 + (n+14)**3 + (n+15)**3)\n    \ndef cube_Sum_17(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return 'Error"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + (i ** 3)\n        i += 1\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = 1\n    for x in range(1,n):\n        cube = cube * x\n    return cube\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (\"\".join(test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print(f'{test_tup[0]}')\n    for el in test_tup[1:]:\n        print(f'{el}')\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Do something here...\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = \"\"\n    if len(test_tup) > 0:\n        for element in test_tup:\n            output += element + \" \"\n    else:\n        output += \" \"\n    return output\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += i\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (''.join(test_tup[i] for i in range(len(test_tup))))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # this is a tuple:\n    # (1, 2, 3, 4)\n    # *args are tuples\n    # it should be (1, 2, 3, 4) and not (1, 2, 3, 4, 1)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ()\n    for item in test_tup:\n        result += item\n    return result\n    \n    "
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [x**3 for x in range(n)]\n    return sum(cubes)/len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    A = []\n    for i in range(1, n+1):\n        A.append(i*i*i)\n    print(A)\n    print(\"Sum of all cubes of first\",n,\"natural numbers is :\",sum(A))\n    print(\"Average is :\",sum(A)/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(1, n+1):\n        Sum = Sum + i\n    print(Sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    for i in range(1,n+1):\n        cubes = [1,4,9,16,25,36,49,64,81,100]\n        total_of_cubes = 0\n        for cube in cubes:\n            total_of_cubes = total_of_cubes + cube\n        average = total_of_cubes/n\n        print('Average of cubes of natural numbers',i,'is',average)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Write your code here.\n    cube_list = []\n    for i in range(1, n + 1):\n        cube_list.append(i**3)\n    print(sum(cube_list))\n    # raise NotImplementedError\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    A = []\n    for i in range(1,n+1):\n        A.append(i**3)\n    return sum(A)/len(A)\nprint(find_Average_Of_Cube(100))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    avg = sum(cubes) / n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**3)\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # write your code here\n    cubes = []\n    for i in range(n):\n        cubes.append(n**3)\n    sum = 0\n    for i in range(n):\n        sum = sum + cubes[i]\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum/n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    split_tuple = test_tuple[0].split()\n    return tuple([int(split_tuple[i]) for i in range(1, len(split_tuple)) if split_tuple[i] not in ['(', ')', '*', '#']])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front,rear = test_tuple[0],test_tuple[1]\n    rear_str = re.split('[a-z]+',rear)\n    rear_str = [rear.strip() for rear in rear_str if rear!= '']\n    if front!= rear:\n        return rear\n    else:\n        return rear[0]\n    \n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #dictionary of string as key and value as a list of the index value of each string.\n    dict_ = dict(test_tuple)\n    #a list to iterate over the dictionary.\n    list_ = list(dict_)\n    #extracts only the rear index element of each string\n    return list_\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front, rear = test_tuple\n    assert(len(rear) == 1), \"Cannot extract rear if there are multiple elements in the tuple.\"\n    return front\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_index, rear_index, each_str = 0, 0, ''\n    for each_str in test_tuple:\n        if front_index == 0 and each_str[0] == 'F':\n            front_index = 1\n        if rear_index == len(each_str) and each_str[0] == 'R':\n            rear_index = 1\n        each_str = each_str[front_index:rear_index]\n        front_index += 1\n        rear_index += 1\n        each_str = each_str.replace('F','').replace('R','')\n    return each_str\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list = []\n    for i in range(len(test_tuple)):\n        list.append(test_tuple[i][1])\n    return list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = list(map(lambda x: x[2], test_tuple))\n    return rear_index_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple[0])):\n        try:\n            rear_index.append(int(test_tuple[1][i]))\n        except:\n            rear_index.append(None)\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_index = 0\n    rear_index = -1\n    for string in test_tuple:\n        if front_index == 0:\n            rear_index = string.index('(')\n        elif front_index == 1:\n            if string.index('(') > string.index(')') and string.index('(')!= rear_index:\n                front_index = string.index('(')\n            elif string.index(')') > string.index('(') and string.index(')')!= rear_index:\n                front_index = string.index(')')\n        else:\n            if string.index('(') > string.index('('):\n                front_index = string.index('(')\n            elif string.index('(') < string.index('(') and string.index(')') > string.index('('):\n                front_index = string.index(')')\n            elif string.index(')') > string.index('(') and string.index(')') < string.index('('):\n                front_index = string.index(')')\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(test_tuple[0])\n    print(test_tuple[1])\n    print(test_tuple[2])\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # YOUR CODE HERE\n    sublist_count = 0\n    if type(list1) is list:\n        if x in list1:\n            sublist_count = sublist_count + 1\n    return sublist_count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i][x] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for el in list1:\n        if el == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    s = 0\n    for i in list1:\n        if i[x] == 1:\n            s += 1\n    return s\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)): \n        if list1[i][x] == 1: \n            count = count + 1\n    return count\n    \ndef average_of_lists(list1): \n    ''' \n    Return the average of the sublists. \n    ''' \n    num = 0\n    for i in range(0, len(list1)): \n        num = num + list1[i][x]\n    return num/len(list1)\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    size = 0\n    for x in list1:\n        size += 1\n    if size == x:\n        return size\n    else:\n        return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len(list(filter(lambda x: x == x, list1)))\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    c = 0\n    for i in range(len(list1)): \n        for j in range(len(list1[i])): \n            if list1[i][j] == x: \n                c += 1\n    return c \n        "
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count_list = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count_list += 1\n    return count_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i%2!=0]\n    \n    \n    \n    "
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            new_nums.append(num)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2 == 0]\n    \nnums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(filter_oddnumbers(nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            new_nums.append(num)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [item for item in nums if item%2!=0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # O(n) time complexity, O(1) space complexity\n    # O(n)\n    result = []\n    for number in nums:\n        if number % 2 == 0:\n            result.append(number)\n    return result\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    arr=dt.split('-')\n    arr.reverse()\n    return ''.join(arr)\ndef date_to_datetime(date):\n    '''\n    Converts a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    arr=date.split('-')\n    arr.reverse()\n    return ''.join(arr)\ndef date_to_list(date):\n    '''\n    Converts a date of yyyy-mm-dd format to a list of date\n    '''\n    arr=date.split('-')\n    arr.reverse()\n    return arr\ndef date_to_datetime(date):\n    '''\n    Converts a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    arr=date.split('-')\n    arr.reverse()\n    return ''.join(arr)\ndef get_text_in_line(filepath):\n    '''\n    Reads in a file and returns a text line as a list.\n    '''\n    with open(filepath, 'r') as f:\n        text=f.read()\n        return text.split('\\n')\ndef get_sentence_from_text(text):\n    '''\n    Read in a file and return a list of sentences.\n    '''\n    sentences=[]\n    for line in text:\n        words=line.split()\n        for word in words:\n            sentences.append(word)\n    return sentences\ndef get_abstract_from_text(text):\n    '''\n    Read in a file and return a list of abstract.\n    '''\n    abstract=[]\n    for line in text:\n        if not line.strip():\n            continue\n        abstract.append(line)\n    return abstract\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_in_abstract(abstract):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=abstract.split('\\n')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a list of dates.\n    '''\n    arr=text.split('-')\n    arr.reverse()\n    return arr\ndef get_date_from_text(text):\n    '''\n    Read in a file and return a lis"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # find date (matching the date format)\n    m = re.search(r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})', dt)\n    if m:\n        # output the date\n        d = m.group('year') + '-' + m.group('month') + '-' + m.group('day')\n        return d\n    # try and get last date of the month\n    m = re.search(r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})', dt)\n    if m:\n        # output the last date\n        d = m.group('year') + '-' + m.group('month') + '-' + m.group('day')\n        return d\n    # now try again for the day\n    m = re.search(r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})', dt)\n    if m:\n        # output the last date\n        d = m.group('year') + '-' + m.group('month') + '-' + m.group('day')\n        return d\n    # if not found try and use the month\n    m = re.search(r'(?P<year>\\d{4})-(?P<month>\\d{2})(?P<day>\\d{2})', dt)\n    if m:\n        # output the last date\n        d = m.group('year') + '-' + m.group('month')\n        return d\n    # if not found try and use the day\n    m = re.search(r'(?P<year>\\d{4})-(?P<month>\\d{2})(?P<day>\\d{2})', dt)\n    if m:\n        # output the last date\n        d = m.group('year') + '-' + m.group('month')\n        return d\n    # if not found return a date that is in the format dd-mm-yyyy\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r\"(\\d{1,2})-(\\d{1,2})-(\\d{4})$\"\n    match = re.search(regex, dt)\n    dt = dt.replace(match.group(), \"-\"+match.group()[1]+match.group()[2])\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    '''\n    >>> change_date_format('01-02-15')\n    '01-02-15'\n    '''\n    dt = dt.split('-')\n    return dt[0]+'-'+dt[1]+'-'+dt[2]\ndef get_dict(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = dict()\n    with open(filename) as f:\n        for line in f:\n            name = line.split(' ')[0]\n            date = line.split(' ')[1].split('-')\n            month = int(date[1])\n            day = int(date[2])\n            d[name] = '{}-{}-{}'.format(month,day,date[0])\n    return d\ndef get_user_id(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'UserID':\n            return id\ndef get_country_code(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'CountryCode':\n            return value\ndef get_league_id(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'LeagueID':\n            return value\ndef get_player_id(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'PlayerID':\n            return value\ndef get_year(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'Year':\n            return value\ndef get_position(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'Position':\n            return value\ndef get_position_type(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'PositionType':\n            return value\ndef get_overall(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'Overall':\n            return value\ndef get_win(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'Win':\n            return value\ndef get_lose(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'Lose':\n            return value\ndef get_draw(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'Draw':\n            return value\ndef get_draw_rate(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'DrawRate':\n            return value\ndef get_player_tuple(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'PlayerTuple':\n            return value\ndef get_player_team(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'PlayerTeam':\n            return value\ndef get_number(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'Number':\n            return value\ndef get_number_of_games(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'NumberOfGames':\n            return value\ndef get_average_game_time(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'AverageGameTime':\n            return value\ndef get_games_played(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'GamesPlayed':\n            return value\ndef get_games_won(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'GamesWon':\n            return value\ndef get_games_lost(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'GamesLoss':\n            return value\ndef get_games_drawn(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'GamesDrawn':\n            return value\ndef get_points(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'Points':\n            return value\ndef get_yards(filename):\n    '''\n    Read a file, parse the file to a dictionary and return it.\n    '''\n    d = get_dict(filename)\n    id = 0\n    for key, value in d.items():\n        id += 1\n        if key == 'Yards':\n            return value\ndef get_touchdown_points(filename):\n    '''\n    Read "
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import datetime\n    return str(dt.strftime('%d-%m-%Y'))\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime(\"%d-%m-%Y\")\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    month_d = {\"jan\":\"01\", \"feb\":\"02\", \"mar\":\"03\", \"apr\":\"04\", \"may\":\"05\", \"jun\":\"06\", \"jul\":\"07\", \"aug\":\"08\", \"sep\":\"09\",\n              \"oct\":\"10\", \"nov\":\"11\", \"dec\":\"12\"}\n    \n    if len(dt_list) == 3:\n        return [dt_list[0], month_d[dt_list[2]] + \"-\" + dt_list[1]]\n    else:\n        return [dt_list[0], month_d[dt_list[1]] + \"-\" + dt_list[2]]\n    \ndef change_date_format_gte(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format with the date in the\n    date field in the 'gte' clause.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    \n    if len(dt_list) == 3:\n        return [\"gte\", \"start\", dt_list[0], dt_list[2]]\n    else:\n        return [\"gte\", \"start\", dt_list[0], dt_list[1]]\n    \ndef change_date_format_lte(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format with the date in the\n    date field in the 'lte' clause.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    \n    if len(dt_list) == 3:\n        return [\"lte\", \"start\", dt_list[0], dt_list[2]]\n    else:\n        return [\"lte\", \"start\", dt_list[0], dt_list[1]]\n    \ndef change_date_format_lt(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format with the date in the\n    date field in the 'lt' clause.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    \n    if len(dt_list) == 3:\n        return [\"lt\", \"start\", dt_list[0], dt_list[2]]\n    else:\n        return [\"lt\", \"start\", dt_list[0], dt_list[1]]\n    \ndef change_date_format_gte_or_lt(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format with the date in the\n    date field in the 'gte' or 'lt' clauses.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    \n    if len(dt_list) == 3:\n        return [\"gte\", \"start\", dt_list[0], dt_list[2]]\n    else:\n        return [\"lt\", \"start\", dt_list[0], dt_list[1]]\n    \ndef change_date_format_gte_or_lt_gte(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format with the date in the\n    date field in the 'gte' or 'lt' clauses and with the date in the 'gte' clause in the 'gte' clause.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    \n    if len(dt_list) == 3:\n        return [\"gte\", \"start\", dt_list[0], dt_list[2], dt_list[3]]\n    else:\n        return [\"lt\", \"start\", dt_list[0], dt_list[1], dt_list[2]]\n    \ndef change_date_format_gte_or_lt_lt(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format with the date in the\n    date field in the 'gte' or 'lt' clauses and with the date in the 'gte' clause in the 'lt' clause.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    \n    if len(dt_list) == 3:\n        return [\"gte\", \"start\", dt_list[0], dt_list[2]]\n    else:\n        return [\"lt\", \"start\", dt_list[0], dt_list[1]]\n    \ndef change_date_format_lt_lt(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format with the date in the\n    date field in the 'lt' and 'lt' clauses.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    \n    if len(dt_list) == 3:\n        return [\"lt\", \"start\", dt_list[0], dt_list[2]]\n    else:\n        return [\"lt\", \"start\", dt_list[0], dt_list[1]]\n    \ndef change_date_format_gte_lt(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format with the date in the\n    date field in the 'gte' and 'lt' clauses.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    \n    if len(dt_list) == 3:\n        return [\"lt\", \"start\", dt_list[0], dt_list[2]]\n    else:\n        return [\"gte\", \"start\", dt_list[0], dt_list[1]]\n    \ndef change_date_format_lt_lt_lt(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format with the date in the\n    date field in the 'lt' and 'lt' clauses and with the date in the 'lt' clause in the 'lt' clause.\n    '''\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    dt_list = re.split(pattern,dt)\n    \n    if len(dt_list) == 3:\n        return [\"lt\", \"start\", dt_list[0], dt_list[2]]\n    else:\n        return [\"lt\", \"start\", dt_list[0], dt_list[1]]\n    \ndef change_date_format_lt"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month, day, year = dt.split('-')\n    month_day = month + '-' + day.zfill(2)\n    return '{}-{}-{}'.format(month_day, year, year)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date to datetime object\n    new_date = datetime.strptime(dt, '%Y-%m-%d')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    tup = dt.split('-')\n    try:\n        if tup[2] == '-':\n            tup[2] = '0'\n    except:\n        pass\n    if tup[1] == '-':\n        tup[1] = '0'\n    dt = '-'.join(tup)\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Start the gap\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Calculate the length of the array\n    size = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # The size of the array to be sorted will be a factor of the max number of\n    # elements.\n    max_len = len(my_list)\n    # Number of chunks will be a multiple of the size of the array.\n    chunk_size = max_len / len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    l = len(my_list)\n    gap = l / 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        print('i:',i)\n        for j in range(0, len(my_list)-i-1):\n            if my_list[j] > my_list[j+1]:\n                print('j:',j)\n                temp = my_list[j]\n                print(temp)\n                j += 1\n                print('j:',j)\n                print(temp)\n                temp = my_list[j]\n                print(temp)\n                print(j)\n                j += 1\n                print(j)\n                print(temp)\n                my_list[j] = temp\n                print(my_list)\n                \n            else:\n                print('j:',j)\n                print(my_list[j])\n                j += 1\n                print('j:',j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = my_list[j+1]\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                print(my_list)\n                print(j)\n                j += 1\n                print(j)\n                print(my_list[j])\n                print(j)\n                my_list[j] = temp\n                prin"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    list_size = len(my_list)\n    \n    while list_size > 1:\n        for i in range(0, list_size - 1):\n            #     Calculate index of the midpoint of the unsorted segment.\n            j = list_size - 1\n            while j >= i:\n                if my_list[j] > my_list[j + 1]:\n                    my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n                    j = j - 1\n                else:\n                    break\n            list_size = list_size - 1\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size // 3\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tuple_list = list()\n    for element in test_tup1:\n        tuple_list.append(element)\n    for element in test_tup2:\n        tuple_list.append(element)\n    return tuple_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = list()\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] and test_tup2[i])\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    test_tup3 = []\n    test_tup4 = []\n    test_tup5 = []\n    test_tup6 = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple:\n            test_tup3.append(test_tup1[i])\n        elif type(test_tup1[i]) == list:\n            test_tup4.append(test_tup1[i])\n        elif type(test_tup1[i]) == int:\n            test_tup5.append(test_tup1[i])\n        elif type(test_tup1[i]) == float:\n            test_tup6.append(test_tup1[i])\n        else:\n            print(test_tup1[i])\n    for j in range(len(test_tup2)):\n        if type(test_tup2[j]) == tuple:\n            test_tup5.append(test_tup2[j])\n        elif type(test_tup2[j]) == list:\n            test_tup5.append(test_tup2[j])\n        elif type(test_tup2[j]) == int:\n            test_tup5.append(test_tup2[j])\n        elif type(test_tup2[j]) == float:\n            test_tup5.append(test_tup2[j])\n        else:\n            print(test_tup2[j])\n    if test_tup3!= []:\n        return [test_tup3[0], test_tup3[1], test_tup3[2], test_tup3[3], test_tup3[4], test_tup3[5], test_tup3[6], test_tup3[7]]\n    if test_tup4!= []:\n        return [test_tup4[0], test_tup4[1], test_tup4[2], test_tup4[3], test_tup4[4], test_tup4[5], test_tup4[6], test_tup4[7]]\n    if test_tup5!= []:\n        return [test_tup5[0], test_tup5[1], test_tup5[2], test_tup5[3], test_tup5[4], test_tup5[5], test_tup5[6], test_tup5[7]]\n    if test_tup6!= []:\n        return [test_tup6[0], test_tup6[1], test_tup6[2], test_tup6[3], test_tup6[4], test_tup6[5], test_tup6[6], test_tup6[7]]\n    return [test_tup1[0], test_tup1[1], test_tup1[2], test_tup1[3], test_tup1[4], test_tup1[5], test_tup1[6], test_tup1[7]]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if test_tup1 is None and test_tup2 is None:\n        return False\n    elif test_tup1 is None:\n        return test_tup2\n    elif test_tup2 is None:\n        return test_tup1\n    else:\n        if len(test_tup1)!= len(test_tup2):\n            return False\n        else:\n            return test_tup1.__and__(test_tup2)"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # convert the tuples into lists, and remove the empty elements\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    # remove the empty elements in the lists\n    test_list1 = list(filter(None, test_list1))\n    test_list2 = list(filter(None, test_list2))\n    # create the list of lists containing only elements from the elements\n    test_tuple = test_list1 + test_list2\n    # return the new list\n    return test_tuple\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [test_tup1[0]+test_tup2[0],test_tup1[1]+test_tup2[1]]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = test_tup1 + test_tup2\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tup1 & tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    return tuple(test_tup1_list), tuple(test_tup2_list)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0 and b == 0 and c == 0: \n        print(\"The function is:\",-1)\n        return \n    if a == 0 and b == 0: \n        print(\"The function is:\",1/b)\n        return \n    if a == 0 and b == 0: \n        print(\"The function is:\",c)\n        return \n    print(\"The function is:\",(a**2 + b**2 + c**2)/2) \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola_directrix(a, b, c):\n        print(f'A = {a}, b = {b}, c = {c}')\n        return (b ** 2) - (4 * a * c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a == 0):\n        return False\n    if (b == 0):\n        return False\n    if (c == 0):\n        return False\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (((b**2)-(4*a*c))**2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    try:\n        a = float(a)\n        b = float(b)\n        c = float(c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = (b**2)-(4*a*c)\n    return d\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola(x): \n        return a*x*x + b*x + c\n    return parabola\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * b * (b ** 2 - 4 * a * c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    while True: \n        try:\n            a = float(input(\"a: \"))\n            if a == 0.0: \n                raise ZeroDivisionError \n        except ValueError: \n            print(\"You did not enter a number\") \n        else: \n            break\n    while True: \n        try: \n            b = float(input(\"b: \"))\n            if b == 0.0: \n                raise ZeroDivisionError \n        except ValueError: \n            print(\"You did not enter a number\") \n        else: \n            break\n    while True: \n        try: \n            c = float(input(\"c: \"))\n            if c == 0.0: \n                raise ZeroDivisionError \n        except ValueError: \n            print(\"You did not enter a number\") \n        else: \n            break\n    d = (b**2) - (4*a*c)\n    if d > 0: \n        x1 = -b + d**0.5\n        x2 = -b - d**0.5\n    else: \n        print(\"This quadratic equation does not exist\") \n        return -1\n    return x1,x2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def calculate_value(a, b, c, d):\n        return -(a * d) - b * c\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n    elif len(list1) == len(list2):\n        for item in list1:\n            if item in list2:\n                list2.remove(item)\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        for i in list1:\n            if i not in list2:\n                return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i] == list2[j]:\n                common_elements.append(list1[i])\n    if len(common_elements) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return common_element(list2, list1)\n    elif len(list1) == len(list2):\n        for i in list1:\n            if i in list2:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Write your code here.\n    if len(list1) == len(list2):\n        for x in range(len(list1)):\n            if list1[x]!= list2[x]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list_1 = []\n    list_2 = []\n    for i in range(len(list1)):\n        list_1.append(list1[i])\n        list_2.append(list2[i])\n    list_1 = set(list_1)\n    list_2 = set(list_2)\n    if len(list_1) > len(list_2):\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    return len(common) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    \n    # convert lists to tuples\n    list1_tuple = tuple(list1)\n    list2_tuple = tuple(list2)\n    \n    # check each element in both lists\n    for element in list1_tuple:\n        if list2.count(element) >= 1:\n            common_elements.append(element)\n            \n    for element in list2_tuple:\n        if list1.count(element) >= 1:\n            common_elements.append(element)\n            \n    if len(common_elements) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    lenght = ((base1+base2) * height) / 2.0\n    return (lenght)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # In order to find the median, you have to find two points (base1 and base2) whose lengths are the same.\n    # In other words, you have to find two points whose lengths are the same.\n    # You know that you are not trying to find the median of a trapezium and also there is no way to get the median\n    # of a trapezium. So let's say, you are looking for the length of a trapezium when you look at the \n    # first point.\n    # To be honest, there is no point in finding the median.\n    # That is, you only have to look at the length of the trapezium when looking at the first point.\n    # Let's say, let's say, you have base1 = 10, base2 = 20, and height = 15.\n    # The median is 2.5.\n    # \n    # You can get the median of a trapezium by looking at the point (base1 + height) / 2.\n    # \n    # Implement the function.\n    # \n    # You'll notice that the code that calculates the length of a trapezium is very lengthy.\n    # Let's note the large base1 as base1 + height, and the medium base2 as base2.\n    # \n    # Here is the formula that you will need to calculate the length of a trapezium:\n    # \n    # Let's say, the trapezium is (base1 + base2) / 2.\n    # Let's note that the trapezium is actually a trapezium (a trapezium is a trapezium that is a trapezium)\n    # whose length is given by the two points in the base2-point and the base1+height.\n    # \n    # The trapezium that has the length of the base1 + base2 = base2 - base1 height + height = base2\n    # has an area of (base1 + base2) * (base1 + height) / 2.\n    # \n    # So if you look at the trapezium, you get the area of the trapezium, which is exactly 4.\n    # The trapezium has an area of 4 * base1 * base2 * (base1 + height) / 2 = base2 - base1 height.\n    # But if you look at the base1 - base2 = 1, you get the area of the base1 - base2 = 1.\n    # This is a trapezium because it's a trapezium, not a trapezium.\n    # \n    # So, the trapezium has an area of 4 * base1 * base2 * (base1 + height) / 2.\n    # \n    # For example, if you look at the base1 - base2 = 1, then you get the area of the trapezium.\n    # \n    # So, if you look at the base1 - base2 = 2, you get the area of the trapezium.\n    # \n    # Let's note the base1 - base2 = 2 as the base2-point.\n    # \n    # Let's say, the trapezium is (base1 - base2) / 2.\n    # Let's note that the trapezium is actually a trapezium (a trapezium is a trapezium)\n    # whose length is given by the two points in the base2-point and the base1-base2 = base2 - base1.\n    # \n    # Similarly, the trapezium that has the length of the base1 - base2 = base2 - base1.height = base2 - base1.\n    # has an area of base2 - base2 * (base1 + height) / 2.\n    # \n    # The trapezium that has the length of base1 - base2 = base2 - base1.height + height = base2\n    # has an area of base2 - base2 * (base1 + height) / 2.\n    # \n    # So, the trapezium that has the length of base1 - base2 = base2 - base1.height + height = base2\n    # has an area of (base1 + base2) * (base1 + height) / 2.\n    # \n    # So, the trapezium that has the length of the base1 - base2 = base2 - base1.height + height = base2\n    # has an area of 4 * base1 * base2 * (base1 + height) / 2.\n    # \n    # Let's say, if you look at the base1 - base2 = 2, then you get the area of the trapezium.\n    # \n    # So, if you look at the base1 - base2 = 2, then you get the area of the trapezium.\n    # \n    # Let's note the base1 - base2 = 2 as the base2-point.\n    # \n    # Let's note the base1 - base2 = 2 as the base1-base2.\n    # \n    # Let's say, the trapezium is (base1 - base2) / 2.\n    # Let's note that the trapezium is actually a trapezium (a trapezium is a trapezium)\n    # whose length is given by the two points in the base1-base2 = base2 - base1.\n    # \n    # Similarly, the trapezium that has the length of the base1 - base2 = base2 - base1.height = base2 - base1.\n    # has an area of base2 - base2 * (base1 + height) / 2.\n    # \n    # The trapezium that has the length of base1 - base2 = base2 - base1.height + height = base2\n    # has an area of (base1 + base2) * (base1 + height) / 2.\n    # \n    # So, the trapezium that has the length of the base1 - base2 = base2 - base1.height + height = base2\n    # has an area of 4 * base1 * base2 * (base1 + height) / 2.\n    # \n    # Let's note the base1 - base2 = base2 - base1.height + height = base2\n    # has an area of base2 - base2 * (base1 + height) / 2.\n    # \n    # So, the trapezium that has the length of the base1 - base2 = base2 - base1.height + height = base2\n    # has an area of 4 * base1 * base2 * (base1 + height) / 2.\n    # \n    # Let's note the base1 - base2 = base2 - base1.height + height = base2\n    # has an area of base2 - base2 * (base1 + height) / 2.\n    # \n    # Let's say, the trapezium is (base1 - base2) / 2.\n    # Let's note that the trapezium is actually a trapezium (a trapezium is a trapezium)\n    # whose length is given by the two points in the base2-point and the base1-base2 = base2 - base1.\n    # \n    # Similarly, the trapezium that has the length of the base1 - base2 = base2 - base1.height + height = base2\n    # has an area of base2 - base2 * (base1 + height) / 2.\n    # \n    # The trapezium that has the length of base1 - base2 = base2 - base1.height + height = base2\n    # has an area of base2 - base2 * (base1 + height) / 2.\n    # \n    # So, the trapezium that has the length of the base1 - base2 = base2 - base1.height + height = base2\n    # has an area of 4 * base1 * base2 * (base1 + height) / 2.\n    # \n    # So, the trapezium that has the length of the base1 - base2 = base2 - base1.height + height = base2\n    # has an area of 4 * base1 * base2 * (base1 + height) / 2.\n    # \n    # Let's say, if you look at the base1 - base2 = 1, then you get the area of the trapezium.\n    # \n    # So, if you look at the base1 - base2 = 1, then you get the area of the trapezium.\n    # \n    # Let's note the base1 - base2 = 1 as the base2-point.\n    # \n    # Let's note the base1 - base2 = 1 as the base1-base2.\n    "
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # base1 = median of array A\n    # base2 = median of array B\n    # height = sample height of A and B\n    # Output = median length of A and B\n    #\n    # EX1:\n    # base1 = [1,2,3,4,5]\n    # base2 = [2,3,5,6,7]\n    # height = 8\n    # Output = 3\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #store the values for the median\n    median1=base1+base2\n    median2=base2+base1\n    #find the median\n    if height==1:\n        median=median1\n    elif height>1:\n        median=median1+((height-1)*(median2-median1)/2)\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    mid = (base1+base2)/2\n    if height < base1:\n        return median_trapezium(base2,mid,height)\n    if height < base2:\n        return median_trapezium(mid,base1,height)\n    if height < base1:\n        return median_trapezium(mid,base2,height)\n    \n    return mid\n    \n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(x1,y1,x2,y2):\n        return (((y2 - y1) / (x2 - x1)) * (x1 + x2) + y1)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    suma = 0\n    trapezium = 0\n    #find the sum of the bases \n    #  in the middle\n    for x in range(height//2):\n        suma += base1[x] + base2[x]\n    \n    #find the trapezium \n    #  middle \n    for y in range(height//2):\n        trapezium = base1[y] + base2[height//2 - y - 1]\n        #add up the sum\n        #  of the trapeziums \n        #  of the middle\n        suma += trapezium\n    \n    #find the median \n    #  of the trapeziums \n    #  of the middle\n    if height%2==0:\n        median = (suma + trapezium)/2\n    else:\n        median = (suma + trapezium)/2 + trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 + height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    '''\n    Note:\n    If base1 and base2 are both positive integers, return the median.\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    n = 0\n    if (height%2) == 0:\n        return ((base1 + base2)/2)\n    else:\n        return ((base2 + base1)/2)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) > 0:\n        if number > arr[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    return arr > number\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            count += 1\n    if count >= 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] >= number:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return False\n    for i in range(1,len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == None or len(arr) == 0:\n        return False\n    if arr[0] > number:\n        return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr.count(number) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    elif number > arr[len(arr) - 1]:\n        return True\n    else:\n        return False\n    \ndef check_lesser(arr, number):\n    '''\n    Write a function to check whether the entered number is less than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return True\n    elif number < arr[len(arr) - 1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"[a-zA-Z]\\b\"\n    result = re.match(pattern, text)\n    if result is None:\n        print(\"invalid input\")\n        quit()\n    return result.group(0)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"(a(?:\\b|'))\\b\"\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #start = 0\n    if text == \"\":\n        return True\n    else:\n        for i in range(len(text)):\n            if text[i].startswith('a') or text[i].startswith('b') or text[i].startswith('C') or text[i].startswith('d'):\n                return True\n            else:\n                pass\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.findall('[a-z]+\\b', text)\n    text = re.findall('[^a-z]+\\b', text)\n    text = re.findall('\\d+\\b', text)\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub(r'(\\bA|\\bAA|\\bAA\\b|\\bAA\\b\\b|\\bAA\\b\\b\\b|\\bA\\b|\\bAA\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bA\\b|\\bAA\\b|\\bAA\\b\\b\\b|\\bA\\b|\\bAA\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bA\\b|\\bAA\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bA\\b|\\bAA\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\b\\b\\b|\\bAA\\"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    # Your code here\n    pattern = re.compile('[a-zA-Z\\s]+\\b')\n    match = pattern.findall(text)\n    if len(match) == 0:\n        return False\n    else:\n        return True\n        \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    # Your code here\n    pattern = re.compile('[a-zA-Z\\s]+\\b')\n    match = pattern.findall(text)\n    if len(match) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    m = re.match(r'(.+)(a)(.+)$', text)\n    return m.group(3) + m.group(4)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if len(text)<=2:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # clean the text to remove \"something\"\n    text = re.sub(\"\\s\", \"\", text)\n    # find the first b's\n    b_count = 0\n    b_start = 0\n    b_end = 0\n    b_length = 0\n    for i, char in enumerate(text):\n        if char == \"b\":\n            b_count += 1\n            b_start = i\n            b_end = i + 1\n            b_length = len(text[i: b_end])\n    if b_count > 1:\n        return \"no match\"\n    elif b_length == 0:\n        return \"empty string\"\n    # find the start of the b\n    for i, char in enumerate(text[b_start:b_end]):\n        if char == \"a\":\n            return text[:b_start]\n    return \"no match\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    def find_words(pattern):\n        return re.findall(pattern, text)\n    \n    # Loop through each word\n    matched_text = []\n    for word in find_words(r\"\\w+b\\b\"):\n        # Check if the word contains at least one of the characters in the set of a's\n        if any(char in word for char in set(pattern)):\n            # Only add the word if it doesn't already have a match\n            if not any(x in word for x in matched_text):\n                matched_text.append(word)\n    return matched_text\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(n)\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # return n if n<10\n    # else n-9 if n>10 else n+9\n    return n if n<10 else n-9 if n>10 else n+9\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    i = len(str(n)) - 1\n    while i >= 0:\n        if n % 10 == 0 :\n            n = int(n / 10)\n        else:\n            n = int(n / 10) * 10 + n % 10\n        i -= 1\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    print(\"The last digit is: \", n % 10)\n    \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    print(\"The first digit is: \", n % 10)\n    \ndef check_number(n) :\n    '''\n    Write a python function to check whether a given number is\n    a prime number or not.\n    '''\n    if n <= 0 :\n        print(\"You have entered an invalid number.\")\n        return 0\n    elif n == 1 :\n        print(\"The number \", n, \"is a prime number.\")\n        return 1\n    elif n % 2 == 0 :\n        print(\"The number \", n, \"is not a prime number.\")\n        return 0\n    else :\n        print(\"The number \", n, \"is a prime number.\")\n        return 1\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    a=0\n    if n==0 :\n        return '0'\n    elif n==1 :\n        return '1'\n    elif n<=2 :\n        return '2'\n    else :\n        for i in range(2, n+1) :\n            if i%10==0 :\n                return '0'\n            elif i%10>0 :\n                return '1'\n        return '2'\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n < 0 :\n        return lastDigit(n*-1)\n    else :\n        return lastDigit(n-1)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n < 0 :\n        return -1\n    elif n == 1 :\n        return 1\n    else :\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    if len(n) == 0 :\n        return ''\n    return n[-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: -x, list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for item in list1:\n        if item < 0:\n            neg_list.append(-item)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i > 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    num = []\n    for num1 in list1:\n        num.append(-num1)\n    return num\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for item in list1:\n        new_list.append(-item)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_final = []\n    for i in range(len(list1)):\n        list_final.append(-list1[i])\n    return list_final\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(abs, list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    numbers = []\n    for number in list1:\n        if number < 0:\n            numbers.append(number)\n    return numbers\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char % 2!= 0:\n            count += 1\n    if count % 2 == 0:\n        return str1\n    else:\n        return str1.replace(str1[-1],'')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\" \", \"\")\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.upper()\n    if len(str1)%2 == 0:\n        return str1[:len(str1)-1]\n    else:\n        return str1[1:]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(0, len(str1)-1):\n        if str1[i] % 2!= 0:\n            str1[i] = str1[i]\n        else:\n            str1[i] = \"Odd\"\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str(str1).replace(\"Odd\",\"0\""
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(',',' ').replace('.',' ').replace('!',' ').replace('?',' ').replace('*',' ').replace('-',' ').replace('_',' ').replace('+',' ').replace(' ','')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for char in str1:\n        if char % 2 == 0:\n            str1 = str1.replace(char, '', 1)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1=list(str1)\n    for i in range(0,len(list1)):\n        if list1[i]%2!=0:\n            list1[i] = list1[i]\n    return \"\".join(list1)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # your code here\n    #Hint: you can pass a string into the function\n    #Hint2: you can use len(string) as a base function\n    #Hint3: you can use filter function\n    #Hint4: you can pass a string into the function\n    \n    \n    \n    #Add your code here\n    l = str1.lower()\n    odd_list = []\n    for i in l:\n        if i%2!= 0:\n            odd_list.append(i)\n    final_string = ''.join(odd_list)\n    final_string = final_string.replace('o', '')\n    final_string = final_string.replace('d', '')\n    print(final_string)\n    return final_string\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] % 2!= 0:\n            new_str += str1[i]\n    return new_str\n    \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_count = 0\n    for elem in test_list:\n        if isinstance(elem, tuple):\n            total_count += len(elem)\n    return total_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    '''\n    Assuming test_list is a list of tuples, create a dict of tuples that has the\n    same value as each other with a tuple having the tuple_1 and tuple_2 of the\n    same value.\n    '''\n    d = {}\n    for i in range(len(test_list)):\n        d[test_list[i][0]] = test_list[i][1]\n    return d\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    s_count = {}\n    b_count = {}\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([x for x in test_list if x[1] > x[0]])\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for (a,b) in test_list:\n        if a[1] > b[0] and b[1] > a[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    count_reverse = 0\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][1] < test_list[j][0]:\n                count += 1\n            elif test_list[i][0] < test_list[j][1]:\n                count_reverse += 1\n    print(f\"Count bidirectional: {count}, Reverse count bidirectional: {count_reverse}\")\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Make a set to keep track of unique pairings.\n    pairings = set()\n    # Loop over each test list.\n    for test in test_list:\n        # Loop over each pair of test lists.\n        for i in range(0,len(test)-1):\n            # Get the index of the first test list and the last index.\n            first = test[i]\n            last = test[i+1]\n            # Add the pair to the set of pairings.\n            pairings.add((first,last))\n    # Return the number of pairs.\n    return len(pairings)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    total_count=0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-i-1):\n            total_count+=1\n            if test_list[i]>test_list[j]:\n                total_count+=1\n    return total_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for item in test_list:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    directions = 0\n    for pair in test_list:\n        if pair[0][0] == pair[1][0]:\n            directions += 1\n        if pair[0][1] == pair[1][1]:\n            directions += 1\n    return directions\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return ''.join(map(str, L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(e) for e in L)"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for e in L:\n        result = result * 10 + e\n    return result\n    \ndef reverse_ints(ints):\n    '''\n    Write a function to reverse the elements of a list.\n    '''\n    # O(n) time complexity, O(1) space complexity\n    reverse = []\n    for i in range(len(ints)):\n        reverse.append(ints[i])\n    reverse.reverse()\n    return reverse\n    \ndef main():\n    '''\n    Test your code with the following inputs:\n    0\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    '''\n    # Get the first input line\n    # The user is expected to enter a string, so it will be split into a list\n    n = input().split(',')\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # write your code here\n    # make a set out the elements of the list\n    # then get the largest element\n    # then add it to the set\n    # for a new set to get the total\n    # then return the sum\n    from itertools import chain\n    for i in L:\n        L.append(i)\n    i = chain.from_iterable(L)\n    print(i)\n    return sum(i)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L=list(set(L))\n    if len(L)>1:\n        print(L[0],\",\",L[1])\n    else:\n        print(L[0])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # TODO: Your code here\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # your code goes here\n    str_list = []\n    for i in range(len(L)):\n        str_list.append(str(L[i]))\n    joined_list = ''.join(str_list)\n    return int(joined_list)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall('(?=ADV)([aeiou])(?=[aeiou]+)', text)\n    for adverb in adverbs:\n        pos = adverb.find(text)\n        print(pos)\n        if pos!= -1:\n            return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r'(?:' + r'(\\w+\\s)' + r'|\\b' + r'\\w+\\s' + r'(?:[,.:]\\s)?(\\w+)' + r'(?:\\s|$)' + r'\\b)'\n    p = re.compile(regex)\n    m = p.search(text)\n    if m!= None:\n        text = text[:m.start()] +'' + text[m.start()+1 : m.end()] +''\n    adverbs = p.findall(text)\n    adverbs = [x[0] for x in adverbs]\n    adverb_positions = {}\n    for adverb in adverbs:\n        start = adverb.find(',')\n        if start!= -1:\n            adverb_positions[adverb] = [start+1, start+2, start+3]\n        else:\n            adverb_positions[adverb] = [0, 0, 0]\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"([aeiouAEIOU]+\\b)|(([aeiouAEIOU])[aeiouAEIOU])|(i(ing)|(me|my)e|or|ou|our|our|s|our|us|e|s|the)?\"\n    sentence = re.sub(pattern,'',text,flags=re.MULTILINE)\n    pattern = r\"(\\b[a-zA-Z][a-zA-Z]+\\b)|([a-zA-Z]+)'\\b|(\\b[a-zA-Z]+\\b)|([a-zA-Z]+)'\\b|([aeiouAEIOU]+\\b)|([aeiouAEIOU]+)'\\b|([aeiouAEIOU]+)\\b|([aeiouAEIOU]+)\")\n    pattern_sentence = re.sub(pattern,'',sentence,flags=re.MULTILINE)\n    pattern = r\"\\b(?:[aeiouAEIOU]+)[\\s|]\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b(?:[aeiouAEIOU]+)[\\s|]\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+(\\b)\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+$\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[aeiouAEIOU]+\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[aeiouAEIOU]+\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[aeiouAEIOU]+\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    pattern_sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"([a-zA-Z]+[aeiouAEIOU])|([a-zA-Z]+)\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"(\\b[a-zA-Z]+[aeiouAEIOU])|([a-zA-Z]+)\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"(\\b[a-zA-Z]+[aeiouAEIOU])|([aeiouAEIOU])\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"([a-zA-Z]+[aeiouAEIOU])|([aeiouAEIOU])\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"([a-zA-Z]+[aeiouAEIOU])\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b[a-zA-Z]+\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILINE)\n    pattern = r\"\\b\\b\"\n    sentence = re.sub(pattern,'',pattern_sentence,flags=re.MULTILIN"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position_list = []\n    for ind, word in enumerate(text.split(' ')):\n        if word.lower() == 'the':\n            for adverb in ['the', 'a', 'an', 'and', 'or']:\n                if ind == len(text.split())-1:\n                    break\n                if word[-1] in ['s','p','e','d','t','r','f','c','k','b','v','z']:\n                    adverb_position_list.append([ind,ind+1])\n                else:\n                    adverb_position_list.append([ind,ind+1])\n                    break\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    start = 0\n    for i in range(len(text)):\n        if text[i].upper() == \"A\":\n            start = i+1\n            break\n        if text[i].upper() == \"AVER\":\n            start = i+1\n            break\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define a regular expression\n    r = re.compile(r\"\\b(adverb|r\\b)\")\n    # perform the search\n    result = re.search(r, text)\n    # if there is a match\n    if result:\n        # extract the first group of the match\n        adverb = result.group()[1:].lower()\n        # if adverb contains \"s\", return the start\n        if adverb.startswith(\"s\"):\n            return (result.start(), result.end())\n        # if adverb contains \"r\", return the end\n        elif adverb.startswith(\"r\"):\n            return (result.end(), result.end())\n        # if adverb contains \"i\", return the start\n        elif adverb.startswith(\"i\"):\n            return (result.start(), result.end())\n    # if no adverb was found\n    else:\n        return (-1, -1)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split()\n    for i in range(len(sentence)):\n        if re.search(r'\\bADVB\\b', sentence[i]):\n            adverb = sentence[i].split('+')[0]\n            adverb_position = i\n    return adverb, adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #Initialize lists\n    sentence_list = text.split(\"\\n\")\n    adverb_list = []\n    adverb_index = []\n    noun_list = []\n    noun_index = []\n    previous_adverb = \"none\"\n    previous_noun = \"none\"\n    for i in range(len(sentence_list)):\n        if \"adverb\" in sentence_list[i]:\n            if previous_adverb!= \"none\":\n                adverb_list.append(previous_adverb)\n                adverb_index.append(i)\n                previous_adverb = \"none\"\n        if \"noun\" in sentence_list[i]:\n            if previous_noun!= \"none\":\n                noun_list.append(previous_noun)\n                noun_index.append(i)\n                previous_noun = \"none\"\n    adverb_position_list = []\n    for i in range(len(adverb_list)):\n        adverb_position_list.append([adverb_list[i],adverb_index[i]])\n    #Format adverb_position_list\n    adverb_position_list = format_adverb_position_list(adverb_position_list)\n    #Find adverb's positions\n    adverb_position_list = find_adverb_positions(adverb_position_list)\n    #Find nouns in the sentence\n    noun_position_list = find_nouns(noun_list,noun_index)\n    #Find the position of the nouns in the sentence\n    position_of_nouns = find_noun_position(noun_position_list)\n    #Find the position of the adverbs in the sentence\n    position_of_adverbs = find_adverb_position(adverb_position_list)\n    #Find the positions of the nouns in the sentence\n    return position_of_nouns,position_of_adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = '([a-z])([A-Z])(.*)'\n    match = re.search(pattern,text)\n    if match:\n        adverb_positions = match.group(1,2,3)\n        adverb_position_list = []\n        for pos in adverb_positions.split(','):\n            adverb_position_list.append(pos.strip('(').strip(')'))\n        return adverb_position_list\n    else:\n        return []\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'([^\\s]+)([a-z]+[a-z]?)\\s\\S*([^\\s]+)([a-z]+[a-z]?)\\s\\S*'\n    start_pattern = r'^\\s*([^\\s]+)'\n    end_pattern = r'\\s*$'\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # YOUR CODE HERE\n    pass"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Define the return value\n    return 0\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # If the input is a negative size, that means it's a cube with a side length of zero.\n    if l <= 0:\n        print('Error: 0 length cube')\n        exit(0)\n    # If the input is 0, then the area is 0\n    elif l == 0:\n        print('Error: 0 length cube')\n        exit(0)\n    # If the input is a positive length, then the area is the sum of the cube perimeter and the number of triangles.\n    elif l >= 0:\n        return round((2 * (l ** 3)) * (math.pi), 2)\n    # If the input is a positive number, it's an invalid input\n    else:\n        print('Error: 0 length cube')\n        exit(0)\n    "
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a=5\n    s=0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                s=s+5*a*(i**2)\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = l * l * l\n    print('Surface area of cube of size', l, ':', surfacearea)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #get the outer perimeter of the cube\n    a=l[0]*l[1]*l[2]\n    #get the height of the cube\n    b=l[0]*l[3]*l[1]\n    #get the area of the cube\n    c=a+b\n    #return the area\n    return c\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    from math import pi\n    return pi*(l*l)*(1/3)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # your code here\n    area=0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                area+=2*(i**3)*(j**3)*(k**3)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area_cube = l*(l)*(l)*3\n    return area_cube\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    a = array('i', nums)\n    a.sort(reverse=True)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] > 0:\n        if nums[0] == 0:\n            return 0\n        else:\n            return nums[0] / positive_count(nums[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # write your code here\n    positive_count = 0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            positive_count+=1\n    return positive_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    # Your code here\n    s=sum(nums)\n    for i in range(len(nums)):\n        if nums[i]>0:\n            s-=nums[i]\n    return s/sum(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += 1\n    return total/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    a = array('i', nums)\n    count = 0\n    for i in range(len(a)):\n        if a[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    cnt = 0\n    for i in nums:\n        if i > 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    ratio = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count = count + 1\n        else:\n            ratio = nums[i]/count\n            break\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if nums[i] > 0:\n            count += 1\n    return (sum-count)/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -99999\n    for number in list1:\n        if number < 0:\n            if number > max:\n                max = number\n        else:\n            continue\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return(list1[-1])\n    \nlist1 = [1, 2, -3, 4, -5, -1, 0, 4.5, 0.5]\nprint(largest_neg(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = 0\n    for element in list1:\n        if element < 0:\n            largest_neg = largest_neg + 1\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for num in list1:\n        if num < 0:\n            max = max + num\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    positive = list1.sort()[::-1]\n    negative = list1.sort()\n    return negative[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #Hint: To find the largest negative number, you'll need to use the - operator.\n    for num in list1:\n        if num < 0:\n            return num\n    return None\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    l = len(list1)\n    max = -list1[l-1]\n    for i in range(l-2):\n        if list1[i] < list1[i+1]:\n            max = list1[i]\n            break\n    print(\"largest negative number is\", max)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0:\n            max_neg = num\n    return max_neg\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        while i < n - 1:\n            if test_list[i] < test_list[i+1]:\n                test_list[i], test_list[i+1] = test_list[i+1], test_list[i]\n            i += 1\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim_by_K(tup):\n        return tuple([t[:K] for t in tup])\n    return trim_by_K(test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        if len(t) > K:\n            result.append(t[:K])\n        else:\n            result.append(t)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for x in test_list:\n        if len(x) >= K:\n            x = x[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    temp = []\n    for i in test_list:\n        if len(i) > K:\n            temp.append(i[:K])\n        else:\n            temp.append(i)\n    return temp\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Assign the length of the tuple to the length of the list\n    length = len(test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_tuple = []\n    for element in test_list:\n        if type(element) is tuple:\n            element = element[0:K]\n        new_tuple.append(element)\n    return new_tuple\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed = []\n    for tuple in test_list:\n        if len(tuple) > K:\n            trimmed.append(tuple[:K])\n        else:\n            trimmed.append(tuple)\n    return trimmed\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    tup_len = len(test_tup1)\n    for i in range(0,tup_len):\n        test_tup1[i] = test_tup1[i]*test_tup2[i]\n        \n    return test_tup1\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = (tup1[0] * tup2[0]) + (tup1[1] * tup2[1]) + (tup1[2] * tup2[2])\n    print(f\"\\nThe result is {result}\")\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # write your code here\n    \n    return test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1]\n    \n    "
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #Store the first tuple in the variable test_tup1\n    first_tuple = test_tup1\n    \n    #Store the second tuple in the variable test_tup2\n    second_tuple = test_tup2\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    result = test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1] + test_tup1[2] * test_tup2[2] + test_tup1[3] * test_tup2[3] + test_tup1[4] * test_tup2[4] + test_tup1[5] * test_tup2[5] + test_tup1[6] * test_tup2[6] + test_tup1[7] * test_tup2[7]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # TODO: Implement the index multiplier function\n    #       Input: Two tuples.\n    #       Output: A tuple with all the elements of the given two tuples multiplied together.\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_list1 = [1, 2, 3, 4, 5, 6]\n    test_list2 = [10, 20, 30, 40, 50, 60]\n    \n    return test_list1 * test_list2\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum(lst.count(x) for x in tup)\ndef size(tup): \n    '''\n    Write a python function to count the number of elements in a tuple.\n    '''\n    return len(tup)\ndef get_occurrence(tup): \n    '''\n    Write a python function to count the number of occurrences of each element in a tuple.\n    '''\n    return Counter(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if not tup:\n        return 0\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    count = dict()\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            if tup[i] in count:\n                count[tup[i]] += 1\n            else:\n                count[tup[i]] = 1\n    return count \ndef count_Occurrence2(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence3(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence4(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence5(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence6(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence7(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence8(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence9(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence10(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence11(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence12(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence13(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence14(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence15(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence16(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence17(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence18(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence19(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence20(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence21(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence22(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence23(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence24(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence25(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence26(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence27(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence28(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence29(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence30(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence31(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence32(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence33(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence34(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count \ndef count_Occurrence35(tup"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = 0\n    for i in tup:\n        d[i] += 1\n    return d\ndef most_Occ(tup, lst):\n    '''\n    Write a python function to get the most occurent element of list.\n    '''\n    s = Counter(lst).most_common(1)\n    return s[0][0]\ndef by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    s = Counter(lst).most_common()\n    return s\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_by_count(tup, lst):\n    '''\n    Write a python function to get the elements of a list with the count of the \n    occurence in a tuple.\n    '''\n    d = {}\n    for i in lst:\n        d[i] = lst.count(i)\n    return d\ndef most_Occ_b"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c=0\n    for i in lst:\n        if i in tup:\n            c+=1\n    return c\n    \ndef Max_Occurrence(tup, lst):\n    '''\n    Write a python function to find the max occurence of elements in a tuple.\n    '''\n    c=0\n    for i in lst:\n        if i in tup:\n            c+=1\n    return c\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = 0\n    for i in tup:\n        if i in lst:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    if len(tup)!= len(lst):\n        return \"Please check the length of the tuple and list\"\n    else:\n        d = Counter(tup) \n        print(\"{} occurence in tuple is {}\".format(lst, d.most_common()))\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if not tup:\n        return 0\n    elif not lst:\n        return 0\n    elif len(tup)!= len(lst):\n        return 0\n    else:\n        cnt = Counter(tup)\n        for i in lst:\n            cnt[i] += 1\n        return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst.sort()\n    c = Counter(lst)\n    return c.values()[0]\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = 0 \n    for i in lst: \n        occ = occ + 1 \n    return occ \n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # TODO\n    return [sum(n**2 for n in nums)]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num*num*num)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num*num*num)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    answer = []\n    for i in nums:\n        answer.append(i**3)\n    return answer\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        num = int(num)\n        num *= num\n        num = num ** 3\n        num *= num\n        num = num ** 3\n        num *= num\n        num = num ** 3\n        num *= num\n        num = num ** 3\n        num *= num\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        num = num ** 3\n        nu"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube(nums) for nums in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    \n    for num in nums:\n        result.append(num*num*num)\n        \n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #Sum\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1, n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num = []\n    for i in range(1, n+1): \n        num.append(i) \n    sum = 0 \n    for i in range(len(num)-1, -1, -1): \n        sum += num[i]\n    return sum \n \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # You can write any code for this function.\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    if n < 0:\n        raise Exception('Invalid input')\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return n * cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    list = [] \n    for i in range(1,n+1): \n        if n % i == 0: \n            list.append(i) \n    return sum(list) \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    print(\"sum of range is:\",sum)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in range(len(str)):\n        if i >= l:\n            break\n        s = s + str[i]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while i < len(str):\n        yield str[i:i+l]\n        i += l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # for loop to extract max length of string and convert it to integer\n    for i in range(len(str)):\n        if len(str[i]) > l:\n            str[i] = str[i][0:l]\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = l.index(str)\n    return l[i+1:i+l[i]+1]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    index = 0\n    for value in l:\n        if index == l.index(value):\n            return index, value\n        index += 1\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if type(l) == str:\n        for i in range(len(l)):\n            str.append(l[i])\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = str.split(\" \")\n    for i in range(len(l)):\n        l[i] = str[i]\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in l:\n        if i.__class__.__name__ =='str':\n            str = str.replace(i, '')\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return(str[l[0]:l[1]])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # loop through values to extract from index\n    for i in range(len(l)):\n        # split up value at each index\n        tokens = l[i].split(':')\n        # if value is found, return index and value\n        if len(tokens) == 2:\n            return i, tokens[0], tokens[1]\n    # if no value was found, return None\n    return None\n    \ndef extract_words(str, l):\n    '''\n    Write a function to extract specified size of words from a given list of string values.\n    '''\n    # loop through values to extract from index\n    for i in range(len(l)):\n        # split up value at each index\n        tokens = l[i].split(' ')\n        # if value is found, return index and value\n        if len(tokens) == 2:\n            return i, tokens[0], tokens[1]\n    # if no value was found, return None\n    return None\n    \ndef get_words(str, l):\n    '''\n    Write a function to extract all words from a given list of strings.\n    '''\n    # loop through values to extract from index\n    for i in range(len(l)):\n        # split up value at each index\n        tokens = l[i].split(' ')\n        # if value is found, return index and value\n        if len(tokens) > 1:\n            return i, tokens[0], tokens[1]\n    # if no value was found, return None\n    return None\n    \ndef get_full_text(str, l):\n    '''\n    Write a function to extract all values from a given list of strings.\n    '''\n    # loop through values to extract from index\n    for i in range(len(l)):\n        # split up value at each index\n        tokens = l[i].split(' ')\n        # if value is found, return index and value\n        if len(tokens) > 1:\n            return i, tokens[0], tokens[1]\n    # if no value was found, return None\n    return None\n    \ndef is_punctuation(word):\n    '''\n    Write a function to test whether a word is a punctuation character.\n    '''\n    # tested words\n    tested_words = [\n        'a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F', 'g', 'G',\n        'h', 'H', 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L','m', 'M', 'n', 'N',\n        'o', 'O', 'p', 'P', 'q', 'Q', 'r', 'R','s', 'S', 't', 'T', 'u', 'U',\n        'v', 'V', 'w', 'W', 'x', 'X', 'y', 'Y', 'z', 'Z',\n    ]\n    # if character is a punctuation character, return False, else return True\n    return word.isalpha() and word in tested_words\n    \ndef is_stopword(word):\n    '''\n    Write a function to test whether a word is a stopword.\n    '''\n    # tested words\n    tested_words = [\n        'and', 'an', 'and', 'are', 'as', 'at', 'be', 'because', 'been',\n        'before', 'being', 'below', 'by', 'could', 'did', 'do', 'does',\n        'door', 'either', 'else', 'elsewhere', 'enough', 'for', 'from',\n        'here', 'here', 'hers', 'herself', 'him', 'himself', 'in', 'into',\n        'is', 'isn\\'t', 'it', 'itself','may','me','more','most',\n        'most\\'t','my','myself', 'nor', 'of', 'on', 'once', 'only',\n        'or', 'other', 'our', 'ours', 'ourselves', 'out', 'over', 'own',\n        'past','she','she\\'s','should','shouldn\\'t', 'when', 'when\\'d',\n        'when\\'ll', 'where', 'where\\'d', 'where\\'ll', 'who', 'who\\'s',\n        'whom', 'whom\\'s', 'why', 'why\\'d', 'why\\'ll', 'will', 'won\\'t',\n        'wont', 'would', 'wouldn\\'t', 'you', 'you\\'d', 'you\\'ll',\n    ]\n    # if character is a stopword, return False, else return True\n    return word.lower() in tested_words\n    \ndef count_words(text, stopwords):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    # loop through text\n    for i in range(len(text)):\n        # check if is a stopword\n        if is_stopword(text[i]):\n            # increment count\n            count += 1\n    # if no stopwords were found, return count\n    return count\n    \ndef get_stopwords(stopwords):\n    '''\n    Write a function to extract all stopwords from a given list of strings.\n    '''\n    # loop through stopwords to extract from index\n    for i in range(len(stopwords)):\n        # split up value at each index\n        tokens = stopwords[i].split(',')\n        # if stopword is found, return index and value\n        if len(tokens) == 2:\n            return i, tokens[0], tokens[1]\n    # if no value was found, return None\n    return None\n    \ndef get_raw_text(str, l):\n    '''\n    Write a function to extract all raw values from a given list of strings.\n    '''\n    # loop through values to extract from index\n    for i in range(len(l)):\n        # split up value at each index\n        tokens = l[i].split('-')\n        # if value is found, return index and value\n        if len(tokens) == 2:\n            return i, tokens[0], tokens[1]\n    # if no value was found, return None\n    return None\n    \ndef remove_tags(str, l):\n    '''\n    Write a function to extract all raw values from a given list of strings.\n    '''\n    # loop through values to extract from index\n    for i in range(len(l)):\n        # split up value at each index\n        tokens = l[i].split('\\n')\n        # if value is found, return index and value\n        if len(tokens) > 1:\n            return i, tokens[0], tokens[1]\n    # if no value was found, return None\n    return None\n    \ndef clean_str(str):\n    '''\n    Write a function to clean any special characters in a string.\n    '''\n    # clean string\n    clean_str = str.strip()\n    # if any special characters were found, return empty string\n    if clean_str!= '':\n        return clean_str\n    # otherwise, return empty string\n    return ''\n    \ndef get_entity(str, l):\n    '''\n    Write a function to extract an entity from a given list of string values.\n    '''\n    # loop through values to extract from index\n    for i in range(len(l)):\n        # split up value at each index\n        tokens = l[i].split('-')\n        # if value is found, return index and value\n        if len(tokens) > 1:\n            return i, tokens[0], tokens[1]\n    # if no value was found, return None\n    return None\n    \ndef get_entity_word(str, l):\n    '''\n    Write a function to extract an entity from a given list of string values.\n    '''\n    # loop through values to extract from index\n    for i in range(len(l)):\n        # split up value at each index\n        tokens = l[i].split('-')\n        # if value is found, return index and value\n        if len(tokens) > 1:\n            return i, tokens[0], tokens[1]\n    # if no value was found, return None\n    return None\n    \ndef get_words"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    return re.sub(r'[^\\w]', '', text)\ndef remove_multiple_punctuation(text):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text)\ndef remove_stopwords(text1):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text1).split()\ndef remove_single_punctuation(text):\n    '''\n    Write a function to remove all single punctuation from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text).split()\ndef remove_multiple_stopwords(text):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text).split()\ndef remove_punctuation_space(text):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text).replace(' ', '').split()\ndef remove_stopwords_space(text):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text).replace(' ', '').split()\ndef remove_punctuation_space_n(text):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text).replace(' ', '').replace('\\n', '').split()\ndef remove_stopwords_space_n(text):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text).replace(' ', '').replace('\\n', '').split()\ndef remove_numbers(text):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text).replace(' ', '').replace('.', '').split()\ndef remove_special_characters(text):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    return re.sub(r'[^\\w]','', text).replace('!','').replace('?','').replace('\\'','').replace('\"','').replace(':','').replace(';','').replace('<','').replace('>','').replace('|','').replace('*','').replace('%','').replace('=','').replace('+','').replace('&','').replace('^','').replace('~','').replace('[','').replace(']','').replace('\\\\','').replace(']','').replace('!','').replace('\"','').replace('?','').replace(';','').replace('<','').replace('>','').replace('|','').replace('*','').replace('%','').replace('=','').replace('+','').replace('&','').replace('^','').replace('~','').replace('[','').replace(']','').replace('\\\\','').replace(']','').replace('|','').replace(';','').replace('!','').replace('\"','').replace('\"','').replace(';','').replace('\"','').replace(';','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replace('\"','').replac"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\n', '', text1).strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    text = re.sub(r'\\s+','', text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces\n    text2=text1.replace('\\n','')\n    # remove all whitespaces from the end of the string\n    text2 = re.sub(\" +\",'', text2)\n    # remove all whitespaces from the beginning of the string\n    text2 = re.sub(\" +\",'', text2)\n    # remove all whitespaces from the beginning of the string\n    text2 = re.sub(\" +\",'', text2)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #remove all whitespaces\n    new_text = re.sub('[ \\t\\r\\n]+','', text1)\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'[^\\w\\s]','', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +','', text1)\n    \n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=re.sub('\\s+',' ',text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.replace('  ','')\n    return text2\ndef read_file(filename):\n    '''\n    Read a.txt file and return the string.\n    '''\n    with open(filename) as f:\n        text=f.read().splitlines()\n    return text\ndef get_class(text1,text2):\n    '''\n    Return the class of each word in the given string.\n    '''\n    text3=[]\n    for i in range(len(text1)):\n        if text1[i]==text2[i]:\n            text3.append(text1[i])\n        else:\n            text3.append('_')\n    return text3\ndef find_the_best_word(text1,text2):\n    '''\n    Return the best word for the given two strings.\n    '''\n    m=0\n    for i in range(len(text1)):\n        for j in range(len(text2)):\n            if text1[i]==text2[j]:\n                m=m+1\n                if m>=3:\n                    return text1[i]\n                \ndef get_words_from_file(filename):\n    '''\n    Return a list of the words in the given text file.\n    '''\n    text3=[]\n    with open(filename) as f:\n        text=f.read().splitlines()\n    for i in range(len(text)):\n        text3.append(text[i].strip())\n    return text3\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0.0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount <=0:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0: \n        return 0\n    elif sale_amount == 0: \n        return actual_cost\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while(n>1):\n        if (n%2 == 0):\n            sum += n\n            n = n/2\n        else:\n            n = n*3+1\n            sum += 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    a = n\n    b = math.sqrt(n)\n    c = math.sqrt(n/2)\n    if n % 2 == 0:\n        d = n/2\n    else:\n        d = n\n    c = 0\n    if d % 2 == 0 :\n        f = d/2\n    else:\n        f = d\n    for i in range(1,round(b)+1) :\n        if (n % i == 0) and (n/i == f) :\n            c += i\n            break\n    return c\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    if n>0:\n        while (n%2==0):\n            sum+=2\n            n=n/2\n        if n%2==0:\n            sum+=1\n    return sum\n    \ndef add(x, y): \n    '''\n    Find the sum of x + y.\n    '''\n    return x+y\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==0 : \n        return 0\n    if n==1 : \n        return 1\n    else : \n        return sumofFactors(n//2) + sumofFactors(n-1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))) : \n        if (n % i == 0) : \n            sum += i \n    if sum == n : \n        return sum \n    else : \n        return -1 \ndef mycalc(a, b) :\n    '''\n    calculate the product of a and b\n    '''\n    try: \n        if type(a) == int and type(b) == int: \n            return a*b \n    except TypeError: \n        return 'enter an integer'\n    except ValueError: \n        return 'enter a valid integer'\n    except NameError: \n        return 'enter a valid integer'\n    try: \n        if a == b : \n            return a \n    except TypeError: \n        return 'enter an integer'\n    except NameError: \n        return 'enter a valid integer'\n    \ndef div(a, b) :\n    '''\n    calculate the division of a and b\n    '''\n    try: \n        if type(a) == int and type(b) == int: \n            return int(a/b) \n    except TypeError: \n        return 'enter an integer'\n    except ValueError: \n        return 'enter a valid integer'\n    except NameError: \n        return 'enter a valid integer'\n    try: \n        if a == b : \n            return a \n    except TypeError: \n        return 'enter an integer'\n    except NameError: \n        return 'enter a valid integer'\n    try: \n        if b == 0 : \n            return a \n    except NameError: \n        return 'enter a valid integer'\n    except ValueError: \n        return 'enter a valid integer'\n    \ndef mod(a, b) :\n    '''\n    calculate the modulo of a and b\n    '''\n    try: \n        if type(a) == int and type(b) == int: \n            return b % a \n    except TypeError: \n        return 'enter an integer'\n    except NameError: \n        return 'enter a valid integer'\n    except ValueError: \n        return 'enter a valid integer'\n    except NameError: \n        return 'enter a valid integer'\n    try: \n        if a == b : \n            return a \n    except TypeError: \n        return 'enter an integer'\n    except NameError: \n        return 'enter a valid integer'\n    except ValueError: \n        return 'enter a valid integer'\n    \ndef add(a, b) :\n    '''\n    calculate the addition of a and b\n    '''\n    try: \n        if type(a) == int and type(b) == int: \n            return a+b \n    except TypeError: \n        return 'enter an integer'\n    except NameError: \n        return 'enter a valid integer'\n    except ValueError: \n        return 'enter a valid integer'\n    except NameError: \n        return 'enter a valid integer'\n    try: \n        if a == b : \n            return a \n    except NameError: \n        return 'enter a valid integer'\n    except ValueError: \n        return 'enter a valid integer'\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n % 2 == 0: \n        return (n) + sumofFactors(n // 2)\n    else: \n        return n \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    i = 1 \n    while (i < n) : \n        if (n % i == 0) : \n            return i \n            break\n        i += 1 \n    return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n<0 :\n        return -1\n    else :\n        s=0\n        while(n%2==0) : \n            s+=1\n            n=n//2\n        if(s==1) :\n            return s\n        elif(s==2) :\n            return s\n        elif(s==3) :\n            return s\n        else :\n            return -1\ndef displayFactors(n):\n    '''\n    Print all factors of n.\n    '''\n    if n<0 :\n        print(\"This number is negative\")\n        return -1\n    s=1\n    while(s<=math.sqrt(n)) : \n        if n%s == 0 :\n            return -1\n        else :\n            print(s,end=\" \")\n            s+=1\ndef main():\n    '''\n    1.This function should take an input and print the factors of the number \n    2.This function should also check for numbers with a positive integer \n    3.This function should also check for numbers with a negative integer \n    4.This function should also check for numbers with a non-integer \n    '''\n    print(\"Enter the number\")\n    try:\n        n=int(input())\n        print(\"Factors of n:\",factors(n))\n        print(\"Product of factors of n:\",prod(factors(n)))\n        print(\"Factors of n with negative integer:\",factors(n,-1))\n        print(\"Factors of n with non-integer:\",factors(n,5))\n        print(\"Factors of n with a non-integer:\",factors(n,8))\n    except ValueError:\n        print(\"Input should be a number\")\n    except ZeroDivisionError :\n        print(\"This number can't be divided by 0\")\n    except TypeError :\n        print(\"This number is not an integer\")\nmain()"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0) : \n        return 0\n    elif (n < 0) : \n        return sumofFactors(n * -1) \n    elif (n == 1) : \n        return 1 \n    elif (n % 2 == 0) : \n        return n + sumofFactors(n // 2) \n    else : \n        sum = 0 \n        while (n % 2 == 0) : \n            n = n // 2 \n            sum = sum + 1 \n        return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = 0\n    if n == 0 : \n        return 0\n    else : \n        while n!= 0 : \n            if n % 2 == 0 : \n                factors = factors + 1\n                n = n/2\n            else : \n                n = n*3 + 1\n    return factors\ndef multiple(x, n) : \n    '''\n    Write a python function to return the result of n multiplied by x.\n    '''\n    return x * n\ndef isqrt(x) : \n    '''\n    Write a python function to check whether x is an integer power of 2.\n    '''\n    if x == 1 : \n        return True\n    elif x == 2 : \n        return False\n    else : \n        return (isqrt(x/2) == True) and (((x*x)%2)!= 0)\ndef isqrt2(x) : \n    '''\n    Write a python function to find the square root of a number.\n    '''\n    # formula to calculate the square root of a number\n    return int(math.sqrt(x))\ndef euclid(x,y) : \n    '''\n    Write a python function to find the Euclidean distance of two numbers.\n    '''\n    return math.sqrt(pow(x,2) + pow(y,2))\ndef primeFactors(x) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if x == 0 or x == 1 : \n        return []\n    else : \n        primes = []\n        for n in range(2,x) : \n            if x % n == 0 : \n                break\n        else : \n            primes.append(x)\n        if x % 2 == 0 : \n            primes.append(x//2)\n        else :\n            primes.append(x)\n        primes.append(x//2)\n        return primes\ndef findFactors(x, n) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    if x == 0 or x == 1 : \n        return []\n    else : \n        factors = []\n        for m in range(2,n) : \n            if n % m == 0 : \n                break\n        else : \n            factors.append(m)\n        if n % 2 == 0 : \n            factors.append(n//2)\n        else : \n            factors.append(n)\n        return factors\ndef sqrtFactors(x) : \n    '''\n    Write a python function to find the square roots of a number.\n    '''\n    if x == 0 or x == 1 : \n        return []\n    else : \n        sqrt_factors = []\n        for n in range(2,x//2+1) : \n            if n == x/2 or n == x : \n                break\n            else : \n                if x % n == 0 : \n                    if n!= x/2 : \n                        sqrt_factors.append(x//n)\n                        sqrt_factors.append(n)\n                    else : \n                        sqrt_factors.append(x//n)\n                        sqrt_factors.append(n)\n                else : \n                    sqrt_factors.append(n)\n        return sqrt_factors\ndef isprime(x) : \n    '''\n    Write a python function to check whether a number is a prime number.\n    '''\n    if x == 0 or x == 1 : \n        return False\n    elif x % 2 == 0 : \n        return False\n    elif x % 3 == 0 : \n        return False\n    else : \n        for m in range(5,math.floor(math.sqrt(x))+1) : \n            if x % m == 0 : \n                return False\n        return True\ndef isprimeFactors(x) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if x == 0 or x == 1 : \n        return []\n    else : \n        primeFactors = []\n        for n in range(2,x//2+1) : \n            if n == x/2 or n == x : \n                break\n            else : \n                if x % n == 0 : \n                    primeFactors.append(n)\n                    primeFactors.append(x//n)\n                    primeFactors.append(n)\n                else : \n                    primeFactors.append(n)\n                    primeFactors.append(x//n)\n        return primeFactors\ndef factorial(x) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if x == 0 or x == 1 : \n        return 1\n    else : \n        factorial = 1\n        for n in range(2,x+1) : \n            factorial = factorial * n\n        return factorial\ndef factorial2(x) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if x == 0 or x == 1 : \n        return 1\n    else : \n        factorial = 1\n        for n in range(2,x+1) : \n            factorial = factorial * n\n        return factorial\ndef cartesianProduct(x,y) : \n    '''\n    Write a python function to find all the combinations of x and y.\n    '''\n    x_product = []\n    y_product = []\n    for n in range(x) : \n        x_product.append(n)\n    for n in range(y) : \n        y_product.append(n)\n    return x_product, y_product\ndef commonFactors(x,y) : \n    '''\n    Write a python function to find the common factors of two numbers.\n    '''\n    # formula to calculate the common factors of two numbers\n    product = 1\n    for n in range(1,x) : \n        product = product * n\n    for n in range(1,y) : \n        if n == 1 : \n            return n\n        elif n % 2 == 0 : \n            product = product * (n//2)\n        else : \n            product = product * (n//2) + 1\n    return product\ndef is_prime(x) : \n    '''\n    Write a python function to check whether a number is a prime number.\n    '''\n    if x == 0 or x == 1 : \n        return False\n    elif x % 2 == 0 : \n        return False\n    elif x % 3 == 0 : \n        return False\n    else : \n        for m in range(5,math.floor(math.sqrt(x))+1) : \n            if x % m == 0 : \n                return False\n        return True\ndef is_primeFactors(x) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if x == 0 or x == 1 : \n        return []\n    else : \n        primeFactors = []\n        for n in range(2,x//2+1) : \n            if n == x/2 or n == x : \n                break\n            else : \n                if x % n == 0 : \n                    primeFactors.append(n)\n                    primeFactors.append(x//n)\n                    primeFactors.append(n)\n                else : \n                    primeFactors.append(n)\n                    primeFactors.append(x//n)\n        return primeFactors\ndef gcd(a, b) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    while b!= 0 : \n        a, b = b, a % b \n    return a\ndef is_square(x) : \n    '''\n    Write a python function to check whether a number is a square number.\n    '''\n    if x == 0 or x == 1 : \n        return False\n    elif x % 2 == 0 : \n        return False\n    elif x % 3 == 0 : \n        return False\n    else : \n        for m in range(5,math.floor(math.s"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    if 'z' in text:\n        return 'z'\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def check_word_z(word):\n        if word.startswith(\"z\"):\n            return True\n        else:\n            return False\n    return check_word_z(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # validate the text\n    if text[0] not in 'aeiou':\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern_z = re.compile(\"\\w+z\")\n    print(\"\\nPattern for z: \\n\")\n    print(pattern_z.findall(text))\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # First, we need to make sure that the text contains only letters and numbers.\n    # If there is an alpha or numeric character, the text is not matched.\n    # By the end of the sentence, the text does not contain any non-alphabet characters.\n    if not re.search(r\"[a-zA-Z0-9]\", text) and not re.search(r\"[0-9]\", text):\n        raise NameError('The word must be made of only letters and numbers')\n    # Now, we need to split the string and make sure that there are 2 or more substrings,\n    # as in the following example: \"trex\" and \"trx\" are two substrings: \"trex\", \"trx\"\n    # We need to split the string into substrings.\n    text = re.split(r\"[^a-zA-Z0-9]\", text)\n    # Now, we need to find the first substring which contains a letter.\n    for i in range(len(text)):\n        if re.search(r\"[a-zA-Z]\", text[i]):\n            substring = text[i]\n            break\n    # Now, we need to split the string into 2 substrings, i.e. the substrings\n    # contained within the first substring and the first substring not contained within\n    # the second substring.\n    first = ''\n    second = ''\n    if len(substring) > 2:\n        first = substring[0:2]\n        second = substring[2:]\n    else:\n        first = substring[0]\n    # Now, we need to find the last substring which contains a letter.\n    last = ''\n    if len(substring) > 1:\n        last = substring[-1]\n    else:\n        last = substring[-1]\n    # Now, we need to split the string into 2 substrings, i.e. the substrings\n    # contained within the first substring and the first substring not contained within\n    # the second substring.\n    if len(first) > 2:\n        first_substring = first[0:2]\n        second_substring = first[2:]\n    else:\n        first_substring = first\n        second_substring = first\n    # Now, we need to split the string into 2 substrings, i.e. the substrings\n    # contained within the last substring and the last substring not contained within\n    # the first substring.\n    if len(last) > 2:\n        last_substring = last[-1]\n        first_substring_last = last[0:2]\n        second_substring_last = last[2:]\n    else:\n        last_substring = last\n        first_substring_last = last\n        second_substring_last = last\n    # Now, we need to match the substring of length two.\n    # The first substring of the second substring is matched with the first substring of the\n    # first substring of the second substring, which is also the substring of the last substring.\n    # We need to ensure that the second substring matches the second substring of the second substring\n    # in the second substring of the first substring.\n    if len(first_substring) > 2 and len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the second substring of the first substring.\n    # We need to ensure that the first substring of the second substring matches the first substring\n    # of the second substring of the first substring in the first substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the first substring of the second substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the first substring of the second substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the first substring of the second substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the first substring of the second substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the first substring of the second substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the first substring of the second substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the first substring of the second substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the first substring of the second substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. the first substring of the\n    # first substring of the second substring and the first substring of the second substring.\n    if len(first_substring) < len(second_substring):\n        if re.search(first_substring, second_substring):\n            return True\n    else:\n        if re.search(second_substring, first_substring):\n            return True\n    # Lastly, we need to split the string into 2 substrings, i.e. th"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = '^((.|\\n)*)(.+(z.+)(\\n)(.+(z.+)(\\n)(.+(z.+)(\\n)(.+(z.+)(\\n)(.+(z.+)(\\n)(.+(z.+)(\\n)))\\n)))\\n|)(.+(z.+)(\\n)(.+(z.+)(\\n)(.+(z.+)(\\n)(.+(z.+)(\\n)(.+(z.+)(\\n)))\\n))\\n)'\n    m = re.match(pattern, text)\n    print(m)\n    print(m.group(1))\n    print(m.group(2))\n    print(m.group(3))\n    print(m.group(4))\n    print(m.group(5))\n    print(m.group(6))\n    print(m.group(7))\n    print(m.group(8))\n    print(m.groups())\n    return m\n    # print(m)\n    # print(m.group(1))\n    # print(m.group(2))\n    # print(m.group(3))\n    # print(m.group(4))\n    # print(m.group(5))\n    # print(m.group(6))\n    # print(m.group(7))\n    # print(m.group(8))\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.replace('z', '').replace('.', '').replace('_', '')\n    words = re.split('[a-z]+', text)\n    print(words)\n    for word in words:\n        if word.lower() in wordz.lower():\n            return word\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return len(re.findall('z',text))>=0\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # build an regular expression that matches every word containing 'z'\n    wordz = re.compile(r'\\b\\w+\\b')\n    # return true if the text is a string\n    return wordz.search(text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(\"z\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(\"z\")\n    if not pattern.search(text):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12 or monthnum2 < 1:\n        print(\"Please enter a valid month number\")\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 < 1 or monthnum2 > 12):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Code goes here\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    check_date = False\n    if monthnum2!= 1 and monthnum2!= 2 and monthnum2!= 3:\n        check_date = True\n    else:\n        if monthnum2 == 1:\n            monthnum2 = \"January\"\n        elif monthnum2 == 2:\n            monthnum2 = \"February\"\n        elif monthnum2 == 3:\n            monthnum2 = \"March\"\n        else:\n            check_date = True\n            print(\"Invalid month number\")\n    return check_date\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if int(monthnum2) >= 1 and int(monthnum2) <= 13:\n            pass\n        else:\n            raise ValueError\n    except ValueError:\n        print('Month number should be in range 1 to 12.\\nPlease enter a valid month number.')\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 9 or monthnum2 == 10 or monthnum2 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not isinstance(monthnum2, int):\n        raise TypeError('monthnum2 must be an integer')\n    if monthnum2 <= 0:\n        raise ValueError('monthnum2 must be positive')\n    \n    monthnum2 = int(monthnum2)\n    if monthnum2 < 1 or monthnum2 > 12:\n        raise ValueError('monthnum2 must be in the range 1-12')\n    \n    if monthnum2 > 31:\n        monthnum2 = 31\n    if monthnum2 < 1:\n        monthnum2 = 1\n    \n    return monthnum2\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 > 12) :\n        print(\"That is not a valid month number\")\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if not monthnum2.isnumeric():\n            return \"Invalid date\"\n        elif int(monthnum2) > 12:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 1:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 2:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 3:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 4:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 5:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 6:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 7:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 8:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 9:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 10:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 11:\n            return \"Invalid month number\"\n        elif int(monthnum2) == 12:\n            return \"Invalid month number\"\n    except ValueError:\n        return \"Invalid date\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for x in range(len(stringlist)-1,-1,-1):\n        stringlist[x] = stringlist[x].replace('[','')\n        stringlist[x] = stringlist[x].replace(']','')\n        stringlist[x] = stringlist[x].replace('\\'','')\n        stringlist[x] = stringlist[x].replace('\"','')\n        stringlist[x] = stringlist[x].replace(' ', '')\n        stringlist[x] = stringlist[x].replace(',','')\n        stringlist[x] = stringlist[x].replace(')','')\n        stringlist[x] = stringlist[x].replace('(','')\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # L: Firstly, list of strings.\n    # R: Secondly, list of strings.\n    def reverse_string(L, R):\n        L.reverse()\n        R.reverse()\n        print(''.join(L),''.join(R))\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    # iterate through each string in the given list\n    for string in stringlist:\n        # reverse the string in each iteration\n        # save the reversed string to the final list\n        stringlist[stringlist.index(string)] = string[::-1]\n    # reverse the final list\n    stringlist = stringlist[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = list(stringlist)\n    for i in range(len(stringlist)//2):\n        stringlist[i],stringlist[-i-1] = stringlist[-i-1],stringlist[i]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Start with an empty string\n    stringlist[:] = []\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string_list = []\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # reversed_string_list = []\n    # for i in stringlist:\n    #     reversed_string_list.append(i[::-1])\n    # return reversed_string_list\n    \n    return [i[::-1] for i in stringlist]\n    \n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Write your code here\n    if len(stringlist) == 1:\n        return stringlist\n    else:\n        return reverse_string_list(stringlist[1:]) + [stringlist[0]] + reverse_string_list(stringlist[1:])\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return reverse_list(stringlist, 0, len(stringlist)-1)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    # Create a new list that holds the reversed list\n    reverse_list = []\n    # Create a counter variable\n    counter = 0\n    # Loop through stringlist, looping through each string value\n    for string in stringlist:\n        # Append the next value to the variable\n        reverse_list.append(stringlist[counter])\n        # Increment the counter by one\n        counter += 1\n    # Return the reversed list\n    return reverse_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    if len(lst) == 0: \n        return -1\n    \n    if len(lst) == 1: \n        return lst\n    \n    if len(lst) % 2 == 1: \n        return Find_Min([lst[len(lst)//2],lst[len(lst)//2-1]])\n    else: \n        return Find_Min([lst[(len(lst)//2)],lst[len(lst)//2]])\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    min_idx = 0\n    for i in range(1,len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n            min_idx = i\n    return min_idx\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_l = min(lst)\n    min_ind = lst.index(min_l)\n    return min_ind\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 0\n    lst = sorted(lst)\n    if len(lst) == 1: \n        return lst[0]\n    for i in lst:\n        if len(i) < min_len: \n            min_len = len(i)\n    return lst[min_len-1]\n    \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum_length = len(lst)\n    min_index = -1\n    for i in range(len(lst)):\n        if len(lst[i]) < minimum_length:\n            minimum_length = len(lst[i])\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    lst.remove(min)\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # lst=[1,2,3,4,5,6,7,8,9,0,1]\n    i=0\n    min=lst[i]\n    j=i+1\n    while j<len(lst):\n        if lst[j]<min:\n            min=lst[j]\n        j=j+1\n    # print(min)\n    return min\n        "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = []\n    for i in range(len(lst)):\n        lst.append(lst[i][0])\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)): \n        for j in range(i, len(lst)): \n            if lst[j] < lst[i]: \n                lst[i], lst[j] = lst[j], lst[i] \n    return lst\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #Calculate the length and width of the rectangle\n    #l and b are the coordinates of the rectangle\n    #area of the rectangle\n    #s is the string\n    s = l[0] + b[0] + l[1] + b[1]\n    area = float(s)/2\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2 * (l + b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"Rectangle area is\", l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print('Area of rectangle: '+str(l*b))\n    print()\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    print('Perimeter of rectangle: '+str(l*b))\n    print()\n    \ndef square_area(l,b):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    print('Area of square: '+str(l*b))\n    print()\n    \ndef square_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    print('Perimeter of square: '+str(l*b))\n    print()\n    \ndef draw_shape(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Draw a square: '+str(l*b))\n    print()\n    \ndef draw_shape_area(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Draw a rectangle: '+str(l*b))\n    print()\n    \ndef draw_shape_perimeter(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Draw a rectangle: '+str(l*b))\n    print()\n    \ndef draw_shape_square(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Draw a square: '+str(l*b))\n    print()\n    \ndef draw_shape_circle(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Draw a circle: '+str(l*b))\n    print()\n    \ndef rectangle_and_square_area(l,b):\n    '''\n    Write a function that calculates the area of a rectangle and a square.\n    '''\n    print('Area of rectangle and square: '+str(l*b))\n    print()\n    \ndef rectangle_and_square_perimeter(l,b):\n    '''\n    Write a function that calculates the perimeter of a rectangle and a square.\n    '''\n    print('Perimeter of rectangle and square: '+str(l*b))\n    print()\n    \ndef rectangle_and_square_area_and_perimeter(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a rectangle and a square.\n    '''\n    print('Area of rectangle and square: '+str(l*b))\n    print()\n    \ndef rectangle_and_square_area_and_perimeter_area(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a rectangle and a square.\n    '''\n    print('Area of rectangle and square: '+str(l*b))\n    print()\n    \ndef rectangle_and_circle_area(l,b):\n    '''\n    Write a function that calculates the area of a rectangle and a circle.\n    '''\n    print('Area of rectangle and circle: '+str(l*b))\n    print()\n    \ndef rectangle_and_circle_perimeter(l,b):\n    '''\n    Write a function that calculates the perimeter of a rectangle and a circle.\n    '''\n    print('Perimeter of rectangle and circle: '+str(l*b))\n    print()\n    \ndef rectangle_and_circle_area_and_perimeter(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a rectangle and a circle.\n    '''\n    print('Area of rectangle and circle: '+str(l*b))\n    print()\n    \ndef draw_shape_circle(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Draw a circle: '+str(l*b))\n    print()\n    \ndef draw_shape_square(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Draw a square: '+str(l*b))\n    print()\n    \ndef draw_shape_rectangle(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Draw a rectangle: '+str(l*b))\n    print()\n    \ndef draw_shape_rectangle_area(l,b):\n    '''\n    Write a function that calculates the area of a rectangle and a square.\n    '''\n    print('Area of rectangle: '+str(l*b))\n    print()\n    \ndef draw_shape_rectangle_perimeter(l,b):\n    '''\n    Write a function that calculates the perimeter of a rectangle and a square.\n    '''\n    print('Perimeter of rectangle: '+str(l*b))\n    print()\n    \ndef draw_shape_rectangle_area_and_perimeter(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a rectangle and a square.\n    '''\n    print('Area of rectangle and square: '+str(l*b))\n    print()\n    \ndef draw_shape_circle_area(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Area of circle: '+str(l*b))\n    print()\n    \ndef draw_shape_circle_perimeter(l,b):\n    '''\n    Write a function that draws a shape of a given l,b.\n    '''\n    print('Perimeter of circle: '+str(l*b))\n    print()\n    \ndef draw_shape_circle_area_and_perimeter(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a circle and a square.\n    '''\n    print('Area of circle and square: '+str(l*b))\n    print()\n    \ndef rectangle_and_square_area_and_perimeter_area(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a rectangle and a square.\n    '''\n    print('Area and perimeter of rectangle and square: '+str(l*b))\n    print()\n    \ndef rectangle_and_square_area_and_perimeter_area_area(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a rectangle and a square.\n    '''\n    print('Area and perimeter of rectangle and square: '+str(l*b))\n    print()\n    \ndef rectangle_and_square_area_and_perimeter_area_area_area(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a rectangle and a square.\n    '''\n    print('Area and perimeter of rectangle and square: '+str(l*b))\n    print()\n    \ndef rectangle_and_square_area_and_perimeter_area_area_area_area(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a rectangle and a square.\n    '''\n    print('Area and perimeter of rectangle and square: '+str(l*b))\n    print()\n    \ndef triangle_area(l,b):\n    '''\n    Write a function that calculates the area of a triangle.\n    '''\n    print('Area of triangle: '+str(l*b))\n    print()\n    \ndef triangle_perimeter(l,b):\n    '''\n    Write a function that calculates the perimeter of a triangle.\n    '''\n    print('Perimeter of triangle: '+str(l*b))\n    print()\n    \ndef triangle_area_and_perimeter(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a triangle.\n    '''\n    print('Area of triangle: '+str(l*b))\n    print()\n    \ndef triangle_area_and_perimeter_area(l,b):\n    '''\n    Write a function that calculates the area and perimeter of a triangle.\n    '''\n    print('Area of triangle: '+st"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = ''\n    lower = False\n    for i in range(len(str1)):\n        if not lower:\n            if str1[i].isupper():\n                str2 += str1[i].lower()\n            else:\n                str2 += str1[i].upper()\n            lower = True\n        else:\n            if str1[i].isupper():\n                str2 += str1[i].lower()\n            else:\n                str2 += str1[i].upper()\n            lower = False\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regex\n    new_regex = re.compile(r'([a-zA-Z])')\n    # search the string for the uppercase substrings\n    return new_regex.sub('', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for char in 'AEIOU':\n        str1 = str1.replace(char, '')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.upper()\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2=''\n    for i in str1:\n        if i.isupper():\n            str2 += i\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = str1.lower()\n    new_str = ''\n    for i in range(0, len(res)):\n        if res[i].isupper() == True:\n            new_str += res[i]\n        else:\n            new_str += res[i].upper()\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if(str1[0].isupper()):\n        str1=str1[1:].lower()\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.replace(' ', '')\n    str1 = str1.replace('-', '')\n    str1 = str1.replace('.', '')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for letter in str1:\n        if letter.isupper():\n            new_str += letter.lower()\n        else:\n            new_str += letter\n    return new_str\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst)<1:\n        return None\n    elif len(lst)==1:\n        return lst[0]\n    else:\n        return lst[0]\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def get(sublist): \n        return sublist[0] \n    return [get(sublist) for sublist in lst]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    f1 = lst[0][0] \n    for i in range(1, len(lst)): \n        f1 = f1 + lst[i][0]\n    return f1"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    newLst = []\n    for i in lst:\n        newLst.append(i[0])\n    return newLst\ndef extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0][0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = [x[0] for x in lst]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0]\n    \ndef is_even(num):\n    '''\n    Write a python function to determine if a given number is even.\n    '''\n    return num % 2 == 0\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    import csv\n    import os\n    file_path = os.path.dirname(os.path.realpath(__file__))\n    output = open(file_path+'/filename.csv', 'w')\n    writer = csv.writer(output)\n    writer.writerow(['Name', 'Age', 'City', 'DOB'])\n    for i in range(len(lst)): \n        writer.writerow(lst[i])\n    output.close() "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Declaring a temp var. \n    temp = lst[0] \n    # looping through the lists \n    for i in range(1, len(lst)): \n        # Checking if temp is greater than the value of the list \n        if temp > lst[i]: \n            # If temp is greater than the value of the list, \n            # then assign the temp to the current temp \n            temp = lst[i] \n    # Return the result of the temp \n    return temp \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # your code here\n    return lst[0]\n    \ndef main():\n    '''\n    Below Python program demonstrate the use of lambda function.\n    '''\n    lst = [0,1,2,3,4,5,6,7,8,9]\n    print (\"The first element of the list is :\",Extract(lst))\n    print (\"The last element of the list is :\",Extract(lst)[-1])\n    print (\"The index of the last element of the list is :\",lst.index(9))\nmain("
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    print(lst[0])\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lower_ctr = 0\n    for i in str:\n        if(i.isupper()):\n            lower_ctr+=1\n    return lower_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('U')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            upper += 1\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # def upper_ctr(string):\n    upper = 0\n    for i in range(len(str)):\n        if (str[i].isupper()):\n            upper += 1\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    i=0\n    while i<len(str):\n        if str[i].isupper():\n            i=i+1\n        else:\n            i=i+1\n    return i\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str = str.upper()\n    print(str)\n    upper_ctr(str)\n    return\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr_list = list()\n    for char in str:\n        if char.isupper():\n            upper_ctr_list.append(char.upper())\n    print(f\"Number of upper case characters: {len(upper_ctr_list)}\")\n    return upper_ctr_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1,len(list1)))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            l.append(list1[i]+list1[j])\n    return l\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def check_sum(element):\n        '''\n        Checks if given element is a sum of numbers, can be negative numbers\n        '''\n        if (element<0):\n            return False\n        if (element==0):\n            return True\n        else:\n            for i in range(len(list1)):\n                if check_sum(list1[i]):\n                    return True\n            return False\n    for i in range(1,len(list1)+1):\n        if (check_sum(i)):\n            yield list1[:i]\n            list1[:i] = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = list(list1)\n    list1 = list(map(str, list1))\n    list1.sort()\n    combo_list = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # TODO: Write your code here\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1[0]]\n    else:\n        return [list1[0] + \"\".join(list1[1:])] + combinations_list(list1[1:])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    n = len(list1)\n    if n == 1:\n        return [list1]\n    elif n == 0:\n        return []\n    else:\n        for i in range(n-1):\n            for j in combinations_list(list1[i+1:]):\n                res.append([list1[i]]+j)\n        return res\n        \nprint(combinations_list([1,2,3])"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == None:\n        return None\n    if len(list1) == 1:\n        return [list1]\n    if len(list1) == 2:\n        return [list1[0], list1[0], list1[0]]\n    if len(list1) == 3:\n        return [list1[0], list1[0], list1[1], list1[1], list1[0]]\n    if len(list1) == 4:\n        return [list1[0], list1[0], list1[1], list1[2], list1[0]]\n    if len(list1) == 5:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[0]]\n    if len(list1) == 6:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[0]]\n    if len(list1) == 7:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[0]]\n    if len(list1) == 8:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[0]]\n    if len(list1) == 9:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[0]]\n    if len(list1) == 10:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[0]]\n    if len(list1) == 11:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[0]]\n    if len(list1) == 12:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[0]]\n    if len(list1) == 13:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[0]]\n    if len(list1) == 14:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[0]]\n    if len(list1) == 15:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[14], list1[0]]\n    if len(list1) == 16:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[14], list1[15], list1[0]]\n    if len(list1) == 17:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[14], list1[15], list1[16], list1[0]]\n    if len(list1) == 18:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[14], list1[15], list1[16], list1[17], list1[0]]\n    if len(list1) == 19:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[14], list1[15], list1[16], list1[17], list1[18], list1[0]]\n    if len(list1) == 20:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[14], list1[15], list1[16], list1[17], list1[18], list1[19], list1[0]]\n    if len(list1) == 21:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[14], list1[15], list1[16], list1[17], list1[18], list1[19], list1[20], list1[0]]\n    if len(list1) == 22:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[14], list1[15], list1[16], list1[17], list1[18], list1[19], list1[20], list1[21], list1[0]]\n    if len(list1) == 23:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[14], list1[15], list1[16], list1[17], list1[18], list1[19], list1[20], list1[21], list1[22], list1[0]]\n    if len(list1) == 24:\n        return [list1[0], list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1[10], list1[11], list1[12], list1[13], list1[1"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    \n    possible = []\n    for i in range(len(list1)):\n        possible.extend(combinations_list([list1[:i]+list1[i+1:]]+list1[i:]))\n    return possible\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == [] or len(list1) == 1:\n        return list1\n    # define an empty dictionary\n    comb_dict = {}\n    # for every item in the list\n    for i in range(len(list1)):\n        # iterate through the remaining items in the list\n        for j in range(len(list1)):\n            if i == j:\n                continue\n            else:\n                comb_dict[list1[i]] = list1[j]\n    return comb_dict\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combinations(list_, start, end):\n        if end >= start:\n            if list_.copy()[start:end] == []:\n                yield [list_[start]]\n            else:\n                for sub_list in combinations(list_, start, end-1):\n                    for sub_sub_list in combinations(list_[start:end], start, end-1):\n                        yield sub_list + sub_sub_list\n    return list(combinations(list1, 0, len(list1)))\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_p = 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                if arr[i]*arr[j] > max_p:\n                    max_p = arr[i]*arr[j]\n                if arr[i] < arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n    return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sum = float('-inf')\n    max_sum_index = 0\n    max_sum_subarray = [0]\n    max_sum_subarray_index = 0\n    \n    for i in range(len(arr)):\n        # if arr[i] > max_sum and arr[i] > arr[max_sum_index] and (arr[i] > 0 or arr[i]!= arr[max_sum_index]) and (arr[i] > 0 or arr[i]!= arr[max_sum_index]):\n        max_sum = arr[i]\n        max_sum_index = i\n        \n        # if arr[i] > max_sum and arr[i] > arr[max_sum_index] and (arr[i] > 0 or arr[i]!= arr[max_sum_index]) and (arr[i] > 0 or arr[i]!= arr[max_sum_index]):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                if arr[i] > max_sum:\n                    max_sum = arr[i]\n                    max_sum_index = j\n                    \n                if arr[j] > max_sum and arr[j] > arr[max_sum_index]:\n                    max_sum = arr[j]\n                    max_sum_index = j\n                    \n                if arr[j] > arr[max_sum_index]:\n                    max_sum = arr[j]\n                    max_sum_index = j\n                    \n    for i in range(max_sum_index, len(arr)):\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n            max_sum_index = i\n    \n    return max_sum, max_sum_index\n    \n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    arr_set = set(arr)\n    if len(arr) < 1:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarray_product = []\n    \n    max_subarray_product = []\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = arr[i] * arr[j]\n            \n            if product == 0:\n                continue\n            \n            if product > max_subarray_product[-1]:\n                max_subarray_product = arr[i:j+1]\n            \n            subarray_product.append(product)\n    \n    return max_subarray_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # max_subarray = max_product(arr)\n    max_subarray_product = 0\n    max_product_idx = 0\n    max_product = float(\"-inf\")\n    cur_max_product = float(\"-inf\")\n    cur_max_product_idx = 0\n    for idx in range(len(arr)):\n        cur_max_product_idx = idx\n        # Find the current product of current max product\n        max_product = max(arr[idx], arr[cur_max_product_idx])\n        cur_max_product = max(arr[idx], arr[cur_max_product_idx])\n        cur_max_product_idx += 1\n        \n        # check for product of current max product\n        if cur_max_product!= 0:\n            # find the new current product\n            cur_max_product_idx += 1\n            # Calculate max product of current max product\n            max_product_idx = cur_max_product_idx - 1\n            cur_max_product = max(arr[idx], arr[cur_max_product_idx])\n            # Check if product of current max product is greater than current product\n            if cur_max_product!= 0:\n                # Check if current product is greater than the current max product\n                if cur_max_product > max_product:\n                    # check if max product is greater than the current max product\n                    if arr[idx] >= arr[cur_max_product_idx]:\n                        # Find the index of the max product\n                        max_product_idx = cur_max_product_idx\n                    # Write the current product to the new product idx\n                    max_product_idx = cur_max_product_idx\n        # print(\"arr\", arr, \"cur_max_product: \", cur_max_product, \"max_product: \", max_product)\n        max_subarray_product = max(max_subarray_product, arr[idx])\n    return max_subarray_product\n    # print(\"max_product:\", max_product, \"max_subarray_product: \", max_subarray_product)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarray_size = len(arr)\n    if subarray_size == 1:\n        return arr[0]\n    if subarray_size == 2:\n        return max(arr[0], arr[1])\n    \n    dp = [0] * subarray_size\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, subarray_size):\n        dp[i] = max(arr[i] * dp[i-1], arr[i] * dp[i-2])\n    \n    return dp[-1]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray_product_len = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    max_sub = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            current_product = arr[i]*arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_sub = arr[i:j+1]\n    return max_sub\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # If all values are same, the input value is a correct value\n    if n == len(dict):\n        return True\n    # If any values differ, the input value is an incorrect value\n    elif set(dict.values())!= set(dict.values()):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check_list = []\n    for i in dict:\n        check_list.append(i)\n        check_list.append(n)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if key not in n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    def check_list(dict):\n        '''\n        Write a function to check if all values in a list are same in a dictionary.\n        '''\n        def check_dict(dict, key, value):\n            if value in dict.values():\n                return True\n            else:\n                return False\n        return check_dict(dict, n, dict[n])\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = []\n    for k, v in dict.items():\n        value.append(k)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= key:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if not isinstance(v, dict):\n            raise TypeError(\"You can only pass dict of type: {}\".format(type(v)))\n        if len(v) == 0:\n            raise KeyError(\"All values must be in dict\")\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if type(dict) == dict:\n        for key, value in dict.items():\n            if key not in n:\n                n[key] = value\n    else:\n        return print(\"Error, not a dictionary.\")\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict:\n        if dict[x] == n:\n            return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for k, v in dict.items():\n        if k == n:\n            count += 1\n    if count!= len(dict):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1:\n        if len(dict1[k]) < 1:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict_to_drop = {}\n    for k, v in dict1.items():\n        if len(v) > 0:\n            dict_to_drop[k] = v\n    return dict_to_drop\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return {}\n    elif not dict1.keys():\n        return {}\n    elif not dict1.values():\n        return {}\n    else:\n        return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1.keys():\n        if len(dict1[k]) == 0:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if len(dict1[i]) > 0:\n            new_dict[i] = dict1[i]\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if len(v)==0:\n            dict1.pop(k)\n    return dict1\n    # write your code here\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == []:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    temp_product = 1\n    maximum = 0\n    for i in range(len(arr)-1):\n        temp = arr[i]*arr[i+1]\n        if temp > maximum:\n            maximum = temp\n        else:\n            continue\n        if i==0 or arr[i]!=arr[i-1]:\n            temp_product = arr[i]\n    return temp_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # If there is only one number, return it\n    if len(arr) == 1:\n        return arr[0]\n    # If there are multiple, return the product of all of the numbers\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    # Calculate the product of all numbers up to the second last number\n    return max(max_product(arr[:len(arr)-1]) * arr[len(arr)-1], max_product(arr[:len(arr)-2]))\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        res = arr[0]\n        for i in range(1, len(arr)):\n            res = max(res * arr[i], arr[i])\n        return res\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0],arr[1])\n    else:\n        result = arr[0]\n        for i in range(1,len(arr)):\n            result = max(result*arr[i], arr[i])\n        return result\n    \n    \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr.sort()\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max = 1\n    for i in arr:\n        for j in arr[i:]:\n            if j > max:\n                max = j\n    return max\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    start = 0\n    end = len(arr) - 1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maximum = arr[0]\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            maximum = max(arr[i], maximum)\n        else:\n            maximum = max(maximum*arr[i], arr[i])\n    return maximum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    \n    if n < 3:\n        return max(arr)\n    \n    if arr[0] > arr[1]:\n        return arr[0] * arr[1]\n    \n    if arr[n - 1] > arr[n - 2]:\n        return arr[n - 1] * arr[n - 2]\n    \n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n - 2):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[i + 1][j - 1]\n            if arr[i] * arr[j] > arr[i + 1] * arr[j]:\n                dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + arr[i] * arr[j])\n    return max(dp[0][n - 1], dp[1][n - 1])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return max(arr)\n    if n == 2:\n        return arr[0] * arr[1]\n    max_prod = arr[0]\n    for i in range(1, n):\n        max_prod = max(max_prod * arr[i], arr[i])\n    return max_prod\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    i,j = test_tup[0]\n    # for each element in the tuple, find the index of the corresponding tuple element\n    for k in range(len(test_tup)):\n        # find the index of the corresponding tuple element\n        j = test_tup[k]\n        # find the index of the tuple element\n        i = test_tup.index((i,j))\n        # add the two tuples together\n        test_tup[i] = test_tup[k] + test_tup[k]\n        test_tup[k] = test_tup[i]\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return [test_tup]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple((sum(test_tup[i][j] for j in range(i+1, len(test_tup)))) for i in range(len(test_tup)))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighborhood = []\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    assert isinstance(test_tup, tuple), \"tup is not a tuple\"\n    #assert len(test_tup) == 2, \"two elements are not of the same length\"\n    assert isinstance(test_tup[0], int), \"a tuple of integers is expected\"\n    assert isinstance(test_tup[1], int), \"a tuple of integers is expected\"\n    return tuple(sum(test_tup[i] for i in range(len(test_tup))))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    len_test = len(test_tup[0])\n    len_pair = len(test_tup[1][0])\n    total = 0\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    add = a + b\n    return add\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup\n    n1, n2 = len(x), len(y)\n    if n1!= n2:\n        return None\n    if n1 == 0:\n        return (None, None)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)!= 2:\n        raise Exception('Expected two tuples, but got %d' % len(test_tup))\n    \n    start, end = test_tup\n    return start + end, end + start\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n    z = test_tup[2]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr)<n:\n        return -1\n    \n    for i in range(len(arr)-n+1):\n        if arr[i]*arr[i+n-1]==1:\n            return arr[i]*arr[i+n-1]\n    return -1\n    \ndef solution(arr):\n    answer = 1\n    for i in range(len(arr)):\n        answer*=arr[i]\n    return answer\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #print('1',arr)\n    #print('2',n)\n    #print('3',n%arr[1])\n    #print('4',n%arr[2])\n    #print('5',n%arr[3])\n    #print('6',n%arr[4])\n    #print('7',n%arr[5])\n    #print('8',n%arr[6])\n    #print('9',n%arr[7])\n    #print('10',n%arr[8])\n    #print('11',n%arr[9])\n    #print('12',n%arr[10])\n    #print('13',n%arr[11])\n    #print('14',n%arr[12])\n    #print('15',n%arr[13])\n    #print('16',n%arr[14])\n    #print('17',n%arr[15])\n    #print('18',n%arr[16])\n    #print('19',n%arr[17])\n    #print('20',n%arr[18])\n    #print('21',n%arr[19])\n    #print('22',n%arr[20])\n    #print('23',n%arr[21])\n    #print('24',n%arr[22])\n    #print('25',n%arr[23])\n    #print('26',n%arr[24])\n    #print('27',n%arr[25])\n    #print('28',n%arr[26])\n    #print('29',n%arr[27])\n    #print('30',n%arr[28])\n    #print('31',n%arr[29])\n    #print('32',n%arr[30])\n    #print('33',n%arr[31])\n    #print('34',n%arr[32])\n    #print('35',n%arr[33])\n    #print('36',n%arr[34])\n    #print('37',n%arr[35])\n    #print('38',n%arr[36])\n    #print('39',n%arr[37])\n    #print('40',n%arr[38])\n    #print('41',n%arr[39])\n    #print('42',n%arr[40])\n    #print('43',n%arr[41])\n    #print('44',n%arr[42])\n    #print('45',n%arr[43])\n    #print('46',n%arr[44])\n    #print('47',n%arr[45])\n    #print('48',n%arr[46])\n    #print('49',n%arr[47])\n    #print('50',n%arr[48])\n    #print('51',n%arr[49])\n    #print('52',n%arr[50])\n    #print('53',n%arr[51])\n    #print('54',n%arr[52])\n    #print('55',n%arr[53])\n    #print('56',n%arr[54])\n    #print('57',n%arr[55])\n    #print('58',n%arr[56])\n    #print('59',n%arr[57])\n    #print('60',n%arr[58])\n    #print('61',n%arr[59])\n    #print('62',n%arr[60])\n    #print('63',n%arr[61])\n    #print('64',n%arr[62])\n    #print('65',n%arr[63])\n    #print('66',n%arr[64])\n    #print('67',n%arr[65])\n    #print('68',n%arr[66])\n    #print('69',n%arr[67])\n    #print('70',n%arr[68])\n    #print('71',n%arr[69])\n    #print('72',n%arr[70])\n    #print('73',n%arr[71])\n    #print('74',n%arr[72])\n    #print('75',n%arr[73])\n    #print('76',n%arr[74])\n    #print('77',n%arr[75])\n    #print('78',n%arr[76])\n    #print('79',n%arr[77])\n    #print('80',n%arr[78])\n    #print('81',n%arr[79])\n    #print('82',n%arr[80])\n    #print('83',n%arr[81])\n    #print('84',n%arr[82])\n    #print('85',n%arr[83])\n    #print('86',n%arr[84])\n    #print('87',n%arr[85])\n    #print('88',n%arr[86])\n    #print('89',n%arr[87])\n    #print('90',n%arr[88])\n    #print('91',n%arr[89])\n    #print('92',n%arr[90])\n    #print('93',n%arr[91])\n    #print('94',n%arr[92])\n    #print('95',n%arr[93])\n    #print('96',n%arr[94])\n    #print('97',n%arr[95])\n    #print('98',n%arr[96])\n    #print('99',n%arr[97])\n    #print('100',n%arr[98])\n    #print('101',n%arr[99])\n    #print('102',n%arr[100])\n    #print('103',n%arr[101])\n    #print('104',n%arr[102])\n    #print('105',n%arr[103])\n    #print('106',n%arr[104])\n    #print('107',n%arr[105])\n    #print('108',n%arr[106])\n    #print('109',n%arr[107])\n    #print('110',n%arr[108])\n    #print('111',n%arr[109])\n    #print('112',n%arr[110])\n    #print('113',n%arr[111])\n    #print('114',n%arr[112])\n    #print('115',n%arr[113])\n    #print('116',n%arr[114])\n    #print('117',n%arr[115])\n    #print('118',n%arr[116])\n    #print('119',n%arr[117])\n    #print('120',n%arr[118])\n    #print('121',n%arr[119])\n    #print('122',n%arr[120])\n    #print('123',n%arr[121])\n    #print('124',n%arr[122])\n    #print('125',n%arr[123])\n    #print('126',n%arr[124])\n    #print('127',n%arr[125])\n    #print('128',n%arr[126])\n    #print('129',n%arr[127])\n    #print('130',n%arr[128])\n    #print('131',n%arr[129])\n    #print('132',n%arr[130])\n    #print('133',n%arr[131])\n    #print('134',n%arr[132])\n    #print('135',n%arr[133])\n    #print('136',n%arr[134])\n    #print('137',n%arr[135])\n    #print('138',n%arr[136])\n    #print('139',n%arr[137])\n    #print('140',n%arr[138])\n    #print('141',n%arr[139])\n    #print('142',n%arr[140])\n    #print('143',n%arr[141])\n    #print('144',n%arr[142])\n    #print('145',n%arr[143])\n    #print('146',n%arr[144])\n    #print('147',n%arr[145])\n    #print('148',n%arr[146])\n    #print('149',n%arr[147])\n    #print('150',n%arr[148])\n    #print('151',n%arr[149])\n    #print('152',n%arr[150])\n    #print('153',n%arr[151])\n    #print('154',n%arr[152])\n    #print('155',n%arr[153])\n    "
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    i = 0\n    while i < n: \n        x = arr[i] * arr[i+1]\n        if x >= n: \n            break\n        i += 2 \n    return x\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr.sort()\n    l = len(arr)\n    if l % 2!= 0:\n        return arr[l//2]*arr[(l//2)-1]\n    else:\n        return arr[(l//2)-1]*arr[(l//2)]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return arr[:n] * arr[n:]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1:\n        return arr[0]\n    else:\n        return (arr[0] * find_remainder(arr, n - 1)) % n\n    \ndef sum_mod_n(arr, n):\n    '''\n    Write a python function to sum the array of length n with any remainder of the array to n.\n    '''\n    return (arr[0] * find_remainder(arr, n)) % n\n    \n    \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr_length = len(arr)\n    # start = 1\n    # end = n\n    start = 0\n    end = arr_length\n    # product = 1\n    product = 1\n    # while start <= end:\n    #     product = product * arr[start]\n    #     start = start + 1\n    # return product\n    # loop to store the product of the array multiplications\n    while start <= end:\n        product = product * arr[start]\n        start = start + 1\n        end = end - 1\n    return product\ndef main():\n    print(find_remainder([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15))\nmain()"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n==1:\n        return arr[0]\n    if n==2:\n        return arr[0]*arr[1]\n    if n%2==0:\n        return arr[n//2]*arr[n//2]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(n): \n        remainder *= arr[i] \n    return remainder \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0: \n        return 1\n    elif arr[0] == 1: \n        return 1\n    elif arr[0] == 0: \n        return 0\n    else: \n        return find_remainder(arr[1:], n//arr[0]) * arr[0] % n \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    if len(l) % 2 == 1: \n        return False\n    \n    i = 0\n    while i < len(l) - 1: \n        if l[i] == l[i+1]: \n            i += 1\n        else: \n            return True\n    return False \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consec = False\n    \n    for i in range(0,len(l)-1):\n        if l[i]!= l[i+1]:\n            consec = True\n            break\n    \n    return consec\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    check=[]\n    for i in l:\n        if i % 5 == 0:\n            check.append(i)\n    if len(check)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)%2!=0:\n        return False\n    else:\n        x=l[0]\n        for i in range(1,len(l)):\n            if l[i]!= x+1:\n                return False\n        return True\ndef swap_numbers(l): \n    ''' \n    This function takes the list and swaps the first and the last element. \n    '''\n    l[0],l[-1]=l[-1],l[0]\n    return l\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0: \n        return False\n    if len(l) == 1: \n        return True \n    if l[0]!= l[1]: \n        return True \n    return False \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(l)\n    i = 0\n    while i < len(l) - 1:\n        if l[i] + 1 == l[i + 1]:\n            i = i + 1\n        else:\n            break\n    return l[i] == l[i + 1]\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l: \n        if l.count(i) > 1:\n            return False \n        else: \n            pass \n    return True \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    is_consecutive = True\n    \n    # Traverse through the list\n    for i in range(len(l)-1):\n        # If the number is consecutive\n        if l[i] == l[i+1] == l[i+2] == l[i+3] == l[i+4] == l[i+5] == l[i+6] == l[i+7]:\n            is_consecutive = False\n            break\n    \n    return is_consecutive\n    \nif __name__ == \"__main__\":\n    n = int(input())\n    my_list = list(map(int, input().split()))\n    my_list = list(set(my_list))\n    print(check_Consecutive(my_list))"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(l)\n    if len(l)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    numbers = []\n    count = 0\n    for i in l:\n        if i not in numbers:\n            numbers.append(i)\n        else:\n            count += 1\n    if count == len(l):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    test_tuple1 = test_list1[0]\n    test_tuple2 = test_list2[0]\n    \n    #Create a dictionary from the given tuple list\n    \n    test_dict1 = {}\n    \n    for item in test_list1:\n        test_dict1[item] = 0\n    \n    #Loop through all the tuples\n    \n    for item in test_list2:\n        if item in test_dict1:\n            test_dict1[item] += 1\n    \n    #Create a dictionary from the dictionary\n    \n    test_dict2 = {}\n    \n    for item in test_dict1:\n        test_dict2[item] = test_dict1[item]\n    \n    #Loop through the two dictionaries\n    \n    intersection = []\n    for key in test_dict2:\n        if test_dict2[key] in test_dict1:\n            intersection.append(key)\n    \n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Find list length\n    if len(test_list1)!= len(test_list2):\n        print(\"Input tuples are not of the same size.\")\n        return\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for elem in test_list1:\n        if elem in test_list2:\n            intersection.append(elem)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Write your code here.\n    return tuple(sorted([i for i in test_list1 if i in test_list2]))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not test_list1 or not test_list2:\n        return None\n    if len(test_list1)!= len(test_list2):\n        return None\n    return tuple(sorted(set(test_list1).intersection(test_list2)))\n    # Your code here\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    t_list1 = []\n    t_list2 = []\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersection.append(test_list1[i])\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    for element in test_list1:\n        if element in test_list2:\n            return element\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_tuple = []\n    for i in range(len(test_list1)):\n        if test_list1[i] not in test_tuple:\n            test_tuple.append(test_list1[i])\n    for i in range(len(test_list2)):\n        if test_list2[i] not in test_tuple:\n            test_tuple.append(test_list2[i])\n    return test_tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = ()\n    # compare the size of the tuples\n    if len(test_list1) < len(test_list2):\n        result = (test_list2[i] for i in range(len(test_list1)))\n    elif len(test_list1) > len(test_list2):\n        result = (test_list1[i] for i in range(len(test_list2)))\n    else:\n        return\n    return tuple(result)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res = ''\n    i = 0\n    while i < len(str1):\n        if str1[i] == ch:\n            res += newch\n        else:\n            res += str1[i]\n        i += 1\n    return res"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        s1 = str1.replace(ch,'')\n        return s1+newch\n    else:\n        return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i, c in enumerate(str1):\n        if c == ch:\n            str1 = str1.replace(i,newch)\n    return str1\n    \ndef is_list_like(obj):\n    '''\n    Returns True if obj is a list like object.\n    '''\n    return hasattr(obj,'__len__')\n    \ndef print_list_of_dict(obj,colwidth=50):\n    '''\n    Prints a given list of dictionaries.\n    '''\n    if isinstance(obj,dict):\n        #print(\"<dict>\")\n        print(\"{0:>{1}}\".format(\"Dict\",\"|\"))\n        print(\"{0:>{1}}\".format(\"Name\",\"Value\"))\n        for i,k in enumerate(obj):\n            print(\"{0:>{1}}\".format(i+1,k))\n    elif is_list_like(obj):\n        #print(\"<list>\")\n        print(\"{0:>{1}}\".format(\"List\",\"|\"))\n        print(\"{0:>{1}}\".format(\"Index\",\"Value\"))\n        for i, k in enumerate(obj):\n            print(\"{0:>{1}}\".format(i+1,k))\n    else:\n        raise TypeError(\"Unable to print list of dictionaries\")\n    \ndef print_list_of_tuples(obj,colwidth=50):\n    '''\n    Prints a given list of tuples.\n    '''\n    if isinstance(obj,tuple):\n        #print(\"<tuple>\")\n        print(\"{0:>{1}}\".format(\"Tuple\",\"|\"))\n        print(\"{0:>{1}}\".format(\"Index\",\"Value\"))\n        for i,k in enumerate(obj):\n            print(\"{0:>{1}}\".format(i+1,k))\n    elif is_list_like(obj):\n        #print(\"<list>\")\n        print(\"{0:>{1}}\".format(\"List\",\"|\"))\n        print(\"{0:>{1}}\".format(\"Index\",\"Value\"))\n        for i, k in enumerate(obj):\n            print(\"{0:>{1}}\".format(i+1,k))\n    else:\n        raise TypeError(\"Unable to print list of tuples\")\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #return newstr\n    newstr=str1\n    for i in range(len(str1)):\n        if(ch==str1[i]):\n            newstr=newstr.replace(str1[i],newch)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #create a new string with a new character\n    new_str = \"\"\n    \n    #put the characters into the new string\n    for i in range(len(str1)):\n        if(ch == str1[i]):\n            new_str += newch\n        else:\n            new_str += str1[i]\n    \n    #return the new string\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    output=''\n    for char in str1:\n        if char==ch:\n            output+=newch\n        else:\n            output+=char\n    return output\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1)==0:\n        return str1\n    if len(str1)==1:\n        return str1[0].replace(ch,newch)\n    if len(str1)==2:\n        return str1[0].replace(ch,newch) + str1[1].replace(ch,newch)\n    if len(str1)==3:\n        return str1[0].replace(ch,newch) + str1[1].replace(ch,newch) + str1[2].replace(ch,newch)\n    if len(str1)==4:\n        return str1[0].replace(ch,newch) + str1[1].replace(ch,newch) + str1[2].replace(ch,newch) + str1[3].replace(ch,newch)\n    if len(str1)==5:\n        return str1[0].replace(ch,newch) + str1[1].replace(ch,newch) + str1[2].replace(ch,newch) + str1[3].replace(ch,newch) + str1[4].replace(ch,newch)\n    if len(str1)==6:\n        return str1[0].replace(ch,newch) + str1[1].replace(ch,newch) + str1[2].replace(ch,newch) + str1[3].replace(ch,newch) + str1[4].replace(ch,newch) + str1[5].replace(ch,newch)\n    if len(str1)==7:\n        return str1[0].replace(ch,newch) + str1[1].replace(ch,newch) + str1[2].replace(ch,newch) + str1[3].replace(ch,newch) + str1[4].replace(ch,newch) + str1[5].replace(ch,newch) + str1[6].replace(ch,newch)\n    if len(str1)==8:\n        return str1[0].replace(ch,newch) + str1[1].replace(ch,newch) + str1[2].replace(ch,newch) + str1[3].replace(ch,newch) + str1[4].replace(ch,newch) + str1[5].replace(ch,newch) + str1[6].replace(ch,newch) + str1[7].replace(ch,newch)\n    if len(str1)==9:\n        return str1[0].replace(ch,newch) + str1[1].replace(ch,newch) + str1[2].replace(ch,newch) + str1[3].replace(ch,newch) + str1[4].replace(ch,newch) + str1[5].replace(ch,newch) + str1[6].replace(ch,newch) + str1[7].replace(ch,newch) + str1[8].replace(ch,newch)\n    if len(str1)==10:\n        return str1[0].replace(ch,newch) + str1[1].replace(ch,newch) + str1[2].replace(ch,newch) + str1[3].replace(ch,newch) + str1[4].replace(ch,newch) + str1[5].replace(ch,newch) + str1[6].replace(ch,newch) + str1[7].replace(ch,newch) + str1[8].replace(ch,newch) + str1[9].replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str1 = str1\n    new_str1 = new_str1.replace(ch,newch)\n    return new_str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Idea:\n    # start with a copy of the list \n    # iterate through the list and sort the current value,\n    # add it to a new list in a place that is sorted.\n    # return the sorted list.\n    def _merge(l1, l2):\n        temp = []\n        temp_dict = {}\n        for k, v in l1.items():\n            if k not in temp_dict:\n                temp.append((k,v))\n            else:\n                temp.append((temp_dict[k], v))\n                temp_dict[k] = v\n        for k, v in l2.items():\n            if k not in temp_dict:\n                temp.append((k,v))\n            else:\n                temp.append((temp_dict[k], v))\n                temp_dict[k] = v\n        return temp, temp_dict\n    # if there are no items, return empty list\n    if len(dict1) == 0:\n        return []\n    else:\n        temp, temp_dict = _merge(dict1, dict1)\n        # If it's not a duplicate, then iterate through the list and add the values\n        # to a new list.\n        # Else, add the values to the current list.\n        # Finally, return the new list.\n        for k, v in temp:\n            if k in temp_dict:\n                if v in temp_dict:\n                    temp_dict[v].append(k)\n                else:\n                    temp_dict[v] = [k]\n            else:\n                temp_dict[v] = [k]\n        # Create a new list of values from the temp list\n        return [x for x in temp_dict.values()]\n    "
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # TODO: Use a counter\n    counter = Counter(dict1.values())\n    sorted_dict = dict(counter)\n    sorted_dict = dict(sorted(sorted_dict.items(), key=lambda item: item[1], reverse=True))\n    return(sorted_dict)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda k:k[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_keys = dict1.keys()\n    dict_values = dict1.values()\n    dict_counter = Counter(dict_values)\n    sorted_dict = dict_counter.most_common()\n    sorted_dict.sort(reverse=True)\n    sorted_dict_list = []\n    for item in sorted_dict:\n        sorted_dict_list.append(item[0])\n    return sorted_dict_list\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counts = Counter(dict1.values())\n    return counts.most_common()\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_sorted = dict()\n    for k, v in dict1.items():\n        count = 0\n        for i in v:\n            if i in dict_sorted:\n                dict_sorted[i] = dict_sorted[i] + 1\n            else:\n                dict_sorted[i] = 1\n        for k, v in dict_sorted.items():\n            dict_sorted[k] = v / len(v)\n        dict_sorted[k] = k\n    return dict_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict()\n    for key in dict1:\n        dict2[key] = dict1[key]\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key=lambda k:k['frequency'], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict()\n    for key, value in dict1.items():\n        sorted_dict[value] = sorted(sorted_dict.items(), key=lambda x: x[1])\n    return sorted_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    smallest_num = min(nums)\n    large_num = max(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_list = list(map(lambda x: int(x), nums))\n    num_list.sort()\n    print(f\"The largest value in the array is: {num_list[-1]}\")\n    print(f\"The smallest value in the array is: {num_list[0]}\")\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    total = 0\n    largest = 0\n    smallest = 1000\n    for num in nums:\n        total = num + total\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return total - largest - smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_list = []\n    for num in nums:\n        if num in num_list:\n            if num < num_list[-1]:\n                num_list[-1] = num\n            else:\n                num_list.append(num)\n        else:\n            num_list.append(num)\n    return sum(num_list)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for value in nums:\n        sum += value\n    if len(nums) <= 1:\n        return sum\n    return max(sum, sum - sum.min())\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = nums[0] + nums[-1]\n    return s\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    arr = []\n    for i in nums:\n        arr.append(i)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    \n    return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) <= 1:\n        return nums[0]\n    return max(nums[0], sum(nums[1:]))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = 0\n    num_set = set(nums)\n    for value in num_set:\n        if nums.count(value) >= 2:\n            result += value\n    return result\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lowercase = string.lower()\n    return lowercase\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string.lower()\n    string = string.replace(' ', '')\n    string = string.replace('-', '')\n    string = string.replace('-', '')\n    string = string.replace('\u2013', '')\n    string = string.replace('.', '')\n    string = string.replace(',', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    string = string.replace('{', '')\n    string = string.replace('}', '')\n    string = string.replace('\"', '')\n    string = string.replace('!', '')\n    string = string.replace('?', '')\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.isalpha() == True:\n        return True\n    elif string.isalpha() == False:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_str = string.lower()\n    new_str = lower_str.replace('-', '')\n    new_str = new_str.replace('!', '')\n    new_str = new_str.replace('?', '')\n    new_str = new_str.replace('.', '')\n    new_str = new_str.replace(',', '')\n    new_str = new_str.replace(';', '')\n    new_str = new_str.replace('_', '')\n    new_str = new_str.replace('=', '')\n    new_str = new_str.replace('(', '')\n    new_str = new_str.replace(')', '')\n    new_str = new_str.replace('{', '')\n    new_str = new_str.replace('}', '')\n    return new_str\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string.lower()\n    "
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # scan the string one by one\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str1 = str1.replace(str1[i], '')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = []\n    for i in range(len(str1)):\n        if str1[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n            result.append(str1[i])\n    return ''.join(result)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # code here\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    def remove_lowercase_substr(str1, substr):\n        '''\n        Function to remove lowercase substrings from a given string.\n        '''\n        for i in range(0, len(str1)):\n            if str1[i:i+len(substr)].lower() == substr:\n                str1 = str1[:i+len(substr)]\n        return str1\n    return remove_lowercase_substr(str1, substr)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    x = re.findall('[A-Z]', str1)\n    y = re.findall('[a-z]', str1)\n    z = re.findall('[0-9]', str1)\n    for i in x:\n        str1 = str1.replace(i, \"\")\n    for i in y:\n        str1 = str1.replace(i, \"\")\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    x = re.findall('[A-Z]', str1)\n    for i in x:\n        str1 = str1.replace(i,'')\n    return str1\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove whitespace from a given string.\n    '''\n    y = re.findall('\\s+', str1)\n    for i in y:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef strip_punctuation(str1):\n    '''\n    Write a function to strip punctuation from a given string.\n    '''\n    z = re.findall('[A-Za-z]', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_digit(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    x = re.findall('[0-9]', str1)\n    for i in x:\n        str1 = str1.replace(i,'')\n    return str1\ndef remove_commas(str1):\n    '''\n    Write a function to remove commas from a given string.\n    '''\n    y = re.findall('[,.]', str1)\n    for i in y:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_acronyms(str1):\n    '''\n    Write a function to remove acronyms from a given string.\n    '''\n    x = re.findall('[A-Z]', str1)\n    for i in x:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    y = re.findall('[0-9]', str1)\n    for i in y:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_tokens(str1):\n    '''\n    Write a function to remove tokens from a given string.\n    '''\n    z = re.findall('[A-Za-z]+', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str1 = re.sub('[^A-Za-z0-9_()]','', str1)\n    str1 = re.sub('[ ]{2,}','', str1)\n    str1 = re.sub('[ ]{2,}$','', str1)\n    str1 = str1.strip()\n    return str1\ndef remove_url(str1):\n    '''\n    Write a function to remove URLs from a given string.\n    '''\n    z = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_hashtags(str1):\n    '''\n    Write a function to remove hashtags from a given string.\n    '''\n    z = re.findall('#[A-Za-z0-9_]{1,}', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_emoji(str1):\n    '''\n    Write a function to remove emoji from a given string.\n    '''\n    z = re.findall('[:](?:[a-zA-Z0-9]|_)', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_urls(str1):\n    '''\n    Write a function to remove URLs from a given string.\n    '''\n    z = re.findall('(?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))*', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_other_characters(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    str1 = re.sub('[^A-Za-z0-9_]+','', str1)\n    str1 = re.sub('[^0-9a-zA-Z]','', str1)\n    str1 = str1.strip()\n    return str1\ndef remove_newlines(str1):\n    '''\n    Write a function to remove newlines from a given string.\n    '''\n    str1 = re.sub('[\\n]','', str1)\n    str1 = re.sub('[\\r]','', str1)\n    return str1\ndef remove_newlines_and_spaces(str1):\n    '''\n    Write a function to remove newlines and spaces from a given string.\n    '''\n    str1 = re.sub('[\\n]','', str1)\n    str1 = re.sub('[\\r]','', str1)\n    str1 = re.sub('\\s+','', str1)\n    return str1\ndef remove_hyphens(str1):\n    '''\n    Write a function to remove hyphens from a given string.\n    '''\n    z = re.findall('[-]{1}[A-Z]{1}', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_hyphens_and_spaces(str1):\n    '''\n    Write a function to remove hyphens and spaces from a given string.\n    '''\n    z = re.findall('[-]{1}[A-Z]{1}[A-Z]{1}', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    z = re.findall('[A-Z]', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    return str1\ndef remove_stopwords_and_spaces(str1):\n    '''\n    Write a function to remove stopwords and spaces from a given string.\n    '''\n    z = re.findall('[A-Z]', str1)\n    for i in z:\n        str1 = str1.replace(i, \"\")\n    str1 = re.sub('[a-z]+','', str1)\n    str1 = re.sub('[^a-z]+','', str1)\n    str"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code goes here\n    # if the string contains lowercase substrings, remove them\n    # and add a new string that's all lowercase\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # remove lowercase strings\n    # remove numbers\n    # remove special characters\n    # remove first character\n    # strip spaces\n    # return the result as a list\n    lower_case_str1 = []\n    for char in str1:\n        if char.lower() not in lower_case_str1:\n            lower_case_str1.append(char)\n    lower_case_str2 = []\n    for char in str2:\n        if char.lower() not in lower_case_str2:\n            lower_case_str2.append(char)\n    lower_case_str3 = []\n    for char in str3:\n        if char.lower() not in lower_case_str3:\n            lower_case_str3.append(char)\n    lower_case_str4 = []\n    for char in str4:\n        if char.lower() not in lower_case_str4:\n            lower_case_str4.append(char)\n    lower_case_str5 = []\n    for char in str5:\n        if char.lower() not in lower_case_str5:\n            lower_case_str5.append(char)\n    lower_case_str6 = []\n    for char in str6:\n        if char.lower() not in lower_case_str6:\n            lower_case_str6.append(char)\n    lower_case_str7 = []\n    for char in str7:\n        if char.lower() not in lower_case_str7:\n            lower_case_str7.append(char)\n    lower_case_str8 = []\n    for char in str8:\n        if char.lower() not in lower_case_str8:\n            lower_case_str8.append(char)\n    lower_case_str9 = []\n    for char in str9:\n        if char.lower() not in lower_case_str9:\n            lower_case_str9.append(char)\n    lower_case_str10 = []\n    for char in str10:\n        if char.lower() not in lower_case_str10:\n            lower_case_str10.append(char)\n    lower_case_str11 = []\n    for char in str11:\n        if char.lower() not in lower_case_str11:\n            lower_case_str11.append(char)\n    lower_case_str12 = []\n    for char in str12:\n        if char.lower() not in lower_case_str12:\n            lower_case_str12.append(char)\n    lower_case_str13 = []\n    for char in str13:\n        if char.lower() not in lower_case_str13:\n            lower_case_str13.append(char)\n    lower_case_str14 = []\n    for char in str14:\n        if char.lower() not in lower_case_str14:\n            lower_case_str14.append(char)\n    lower_case_str15 = []\n    for char in str15:\n        if char.lower() not in lower_case_str15:\n            lower_case_str15.append(char)\n    lower_case_str16 = []\n    for char in str16:\n        if char.lower() not in lower_case_str16:\n            lower_case_str16.append(char)\n    lower_case_str17 = []\n    for char in str17:\n        if char.lower() not in lower_case_str17:\n            lower_case_str17.append(char)\n    lower_case_str18 = []\n    for char in str18:\n        if char.lower() not in lower_case_str18:\n            lower_case_str18.append(char)\n    lower_case_str19 = []\n    for char in str19:\n        if char.lower() not in lower_case_str19:\n            lower_case_str19.append(char)\n    lower_case_str20 = []\n    for char in str20:\n        if char.lower() not in lower_case_str20:\n            lower_case_str20.append(char)\n    lower_case_str21 = []\n    for char in str21:\n        if char.lower() not in lower_case_str21:\n            lower_case_str21.append(char)\n    lower_case_str22 = []\n    for char in str22:\n        if char.lower() not in lower_case_str22:\n            lower_case_str22.append(char)\n    lower_case_str23 = []\n    for char in str23:\n        if char.lower() not in lower_case_str23:\n            lower_case_str23.append(char)\n    lower_case_str24 = []\n    for char in str24:\n        if char.lower() not in lower_case_str24:\n            lower_case_str24.append(char)\n    lower_case_str25 = []\n    for char in str25:\n        if char.lower() not in lower_case_str25:\n            lower_case_str25.append(char)\n    lower_case_str26 = []\n    for char in str26:\n        if char.lower() not in lower_case_str26:\n            lower_case_str26.append(char)\n    lower_case_str27 = []\n    for char in str27:\n        if char.lower() not in lower_case_str27:\n            lower_case_str27.append(char)\n    lower_case_str28 = []\n    for char in str28:\n        if char.lower() not in lower_case_str28:\n            lower_case_str28.append(char)\n    lower_case_str29 = []\n    for char in str29:\n        if char.lower() not in lower_case_str29:\n            lower_case_str29.append(char)\n    lower_case_str30 = []\n    for char in str30:\n        if char.lower() not in lower_case_str30:\n            lower_case_str30.append(char)\n    lower_case_str31 = []\n    for char in str31:\n        if char.lower() not in lower_case_str31:\n            lower_case_str31.append(char)\n    lower_case_str32 = []\n    for char in str32:\n        if char.lower() not in lower_case_str32:\n            lower_case_str32.append(char)\n    lower_case_str33 = []\n    for char in str33:\n        if char.lower() not in lower_case_str33:\n            lower_case_str33.append(char)\n    lower_case_str34 = []\n    for char in str34:\n        if char.lower() not in lower_case_str34:\n            lower_case_str34.append(char)\n    lower_case_str35 = []\n    for char in str35:\n        if char.lower() not in lower_case_str35:\n            lower_case_str35.append(char)\n    lower_case_str36 = []\n    for char in str36:\n        if char.lower() not in lower_case_str36:\n            lower_case_str36.append(char)\n    lower_case_str37 = []\n    for char in str37:\n        if char.lower() not in lower_case_str37:\n            lower_case_str37.append(char)\n    lower_case_str38 = []\n    for char in str38:\n        if char.lower() not in lower_case_str38:\n            lower_case_str38.append(char)\n    lower_case_str39 = []\n    for char in str39:\n        if char.lower() not in lower_case_str39:\n            lower_case_str39.append(char)\n    lower_case_str40 = []\n    for char in str40:\n        if char.lower() not in lower_case_str40:\n            lower_case_str40.append(char)\n    lower_case_str41 = []\n    for char in str41:\n        if char.lower() not in lower_case_str41:\n            lower_case_str41.append(char)\n    lower_case_str42 = []\n    for char in str42:\n        if char.lower() not in lower_case_str42:\n            lower_case_str42.append(char"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # TO DO\n    # Use a regex to remove the lowercase characters\n    # \n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"Hi my name is john\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"Hi John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e. the characters which are not in lower case)\n    # ----------------------------------------------------------------\n    # EXAMPLE\n    # input: \"Hi My name is John\"\n    # output: \"HI John\"\n    # ----------------------------------------------------------------\n    # ----------------------------------------------------------------\n    # TO DO\n    # Write a regex to find lowercase characters (i.e"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    if n % 10 == 0 :\n        return n // 10\n    else :\n        return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n > 0 :\n        return n % 10\n    else :\n        return '0'\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return '0'\n    else :\n        return str(n % 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for digit in range(n,0,-1) :\n        if n % digit == 0:\n            return digit\n    return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digits = [int(i) for i in str(n)]\n    return digits[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  ninth_Digit(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  eleventh_Digit(n) :  \n    '''\n    Write a python function to find the eleventh digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  twelfth_Digit(n) :  \n    '''\n    Write a python function to find the twelfth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  thirteenth_Digit(n) :  \n    '''\n    Write a python function to find the thirteenth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  fourteenth_Digit(n) :  \n    '''\n    Write a python function to find the fourteenth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  fifteenth_Digit(n) :  \n    '''\n    Write a python function to find the fifth and sixth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  sixteenth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  seventeenth_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  eighteenth_Digit(n) :  \n    '''\n    Write a python function to find the eight digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  nineteenth_Digit(n) :  \n    '''\n    Write a python function to find the nineteenth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  twentieth_Digit(n) :  \n    '''\n    Write a python function to find the twentieth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  fiftieth_Digit(n) :  \n    '''\n    Write a python function to find the fiftieth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  sixtieth_Digit(n) :  \n    '''\n    Write a python function to find the sixth and seventh digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  seventieth_Digit(n) :  \n    '''\n    Write a python function to find the sixth and seventh digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  ninth_Digit(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  eleventh_Digit(n) :  \n    '''\n    Write a python function to find the eleventh digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  twelfth_Digit(n) :  \n    '''\n    Write a python function to find the twelfth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  thirteenth_Digit(n) :  \n    '''\n    Write a python function to find the thirteenth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  fourteenth_Digit(n) :  \n    '''\n    Write a python function to find the fourteenth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  fifteenth_Digit(n) :  \n    '''\n    Write a python function to find the fifth and sixth digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  sixteenth_Digit(n) :  \n    '''\n    Write a python function to find the sixth and seventh digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  seventeenth_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    if(n < 10):\n        return n\n    else:\n        return n%10\n    \ndef  eighteenth_Digit(n) "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = int(n)\n    return num % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        x=n%10\n        n=n//10\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        elif n==2:\n            return 2\n        elif n==3:\n            return 3\n        else:\n            print(\"Error\")\n            return -1"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    if len(list) < 2:\n        print(\"ValueError: You must enter at least two elements\")\n        return\n    else:\n        odd = []\n        \n        for i in list:\n            if i%2 == 0:\n                odd.append(i)\n        return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    n = len(list)\n    for i in range(n): \n        if i % 2 == 0: \n            print(list[i],end=' ')\n    return None\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_num = []\n    for i in list:\n        if (i % 2 == 0):\n            odd_num.append(i)\n    return odd_num\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    num = list \n    odd = []\n    for i in num: \n        if i % 2 == 1: \n            odd.append(i) \n    return odd\n    \ndef Remove(list, num): \n    ''' \n    Write a python function which takes a list of integers and only returns the first \n    remaining elements of the list.\n    '''\n    num = list\n    temp = []\n    for i in range(len(num)): \n        if i!= num[i]: \n            temp.append(i) \n    for i in range(len(num) - len(temp)): \n        num.pop(temp[i]) \n    return num \n    \n    \ndef quickSort(list, start, end): \n    ''' \n    Write a python function which returns a sorted list, either based on the \n    key or by the value.\n    '''\n    if start < end: \n        split = Partition(list, start, end) \n        quickSort(list, start, split - 1) \n        quickSort(list, split + 1, end) \n        return list\n    else: \n        return list\n    \ndef Partition(list, start, end): \n    ''' \n    Write a python function which takes a list and returns the index of the \n    first element that is smaller than the pivot.\n    '''\n    pivot = list[end] \n    i = start \n    for j in range(start, end): \n        if list[j] <= pivot: \n            swap(list, i, j) \n            i += 1\n            swap(list, i, j) \n    swap(list, i, end) \n    return i \n    \ndef swap(list, i, j): \n    ''' \n    Write a python function which takes a list and two integers i and j as arguments \n    and swaps elements at i and j.\n    '''\n    list[i], list[j] = list[j], list[i] \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2 == 1: \n            odd.append(i) \n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in list: \n        if i % 2 == 1: \n            list.remove(i) \n        else: \n            print (i) \n    return list \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [i for i in list if i % 2!= 0] \n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Write your code here\n    a=0\n    for i in range(n):\n        a+=cube(i)\n    return a\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i ** 3)\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1) :\n        cubes.append(i**3)\n    return sum(cubes)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if(n<0) : return 'Enter a positive integer'\n    else : return sum([i**3 for i in range(n)])\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cubeSum(n):\n        return(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*("
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube(n) :\n        if n<0:\n            return 0\n        elif n==0:\n            return 1\n        else:\n            return n*cube(n-1)\n    print(f'The cube of {n} is : {cube(n)}')\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(i ** 3 for i in range(n) if i**3 == sum(i**3 for i in range(n)))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return (n*n*n) - (n*n*n*(n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Ex:\n    # if n is set to 3, the output is 8, and the sum of the natural numbers from 1-3 is 7\n    # if n is set to 5, the output is 15, and the sum of the natural numbers from 1-3 is 9\n    # if n is set to 1, the output is 9, and the sum of the natural numbers from 1-3 is 6\n    # if n is set to 2, the output is 5, and the sum of the natural numbers from 1-3 is 3\n    # if n is set to 3, the output is 7, and the sum of the natural numbers from 1-3 is 6\n    # Expected Output:\n    # Solution:\n    # def difference(n) :\n    #     if n == 1:\n    #         return 0\n    #     elif n == 2:\n    #         return 1\n    #     elif n == 3:\n    #         return 6\n    #     elif n == 4:\n    #         return 9\n    #     else:\n    #         return n*n*n\n    # if n is set to 3, the output is 8, and the sum of the natural numbers from 1-3 is 7\n    # if n is set to 5, the output is 15, and the sum of the natural numbers from 1-3 is 9\n    # if n is set to 1, the output is 9, and the sum of the natural numbers from 1-3 is 6\n    # if n is set to 2, the output is 5, and the sum of the natural numbers from 1-3 is 3\n    # if n is set to 3, the output is 7, and the sum of the natural numbers from 1-3 is 6\n    # Expected Output:\n    # difference(5) = 3\n    # difference(7) = 5\n    # difference(9) = 15\n    # difference(6) = 9\n    # difference(3) = 1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1,n+1):\n        sum_cubes = sum_cubes + pow(i,3)\n    return sum_cubes\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # write your code here\n    pair_count = 0\n    for i in range(len(A)) :\n        for j in range(i+1, len(A)) :\n            if A[i]!= A[j] :\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if (N==0): \n        return 0\n    elif (N==1):\n        return 1\n    else :\n        return (find_Odd_Pair(A,N-1) + find_Odd_Pair(A,N-2))\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if(A[i]&A[j])!=A[i]^A[j] :\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    P = A.count(1)\n    for i in range(0,N) :\n        if A[i] == 1 :\n            if P == N-1 :\n                return P\n            else :\n                P = P+1\n    return P\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(len(A)-1): \n            if A[i] ^ A[j] == N : \n                count += 1 \n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N):\n        for j in range(0,N):\n            if (A[i]&A[j]==A[i]&A[j])==0:\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] & A[j] == 0 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # write your code here\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if A[i] & A[j] == A[i]^A[j] and A[i] % 2 == 1:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0\n    for i in range(N-1): \n        for j in range(i+1,N) : \n            if A[i]!= A[j] : \n                cnt += 1 \n    return cnt \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c=0\n    for i in range(len(A)) : \n        if (A[i]&1)==1 : \n            c+=1\n    return c\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for character in string:\n        if character.isupper():\n            new_string += '_'\n        else:\n            new_string += character\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper() if string.isupper() else string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    for char in string:\n        if char =='':\n            string = string.replace(' ', '')\n        else:\n            string = string.replace(char, '')\n    string = string.strip()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    newstring = ''\n    for x in string:\n        if x =='':\n            newstring = newstring + '-'\n        elif x == ',':\n            newstring = newstring + '_'\n        elif x == '.':\n            newstring = newstring + '.'\n        elif x == '?':\n            newstring = newstring + '?'\n        elif x == '!':\n            newstring = newstring + '!'\n        elif x == '-':\n            newstring = newstring + '-'\n        elif x == '_':\n            newstring = newstring + '_'\n        elif x =='':\n            newstring = newstring +''\n        else:\n            newstring = newstring + x\n    return newstring\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    string = ''.join(set(string.split()))\n    string = string.replace(' ', '')\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string[0] == \" \":\n        string = \" \" + string[1:]\n    if string[-1] == \" \":\n        string = string[:-1]\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string[-1] == '_':\n        string = string[:-1]\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) <= 1:\n        return string\n    elif string[-1] == '!':\n        string = string[:-1] + string[-1].upper() + '!'\n    elif string[-1] == '?':\n        string = string[:-1] + string[-1].lower() + '?'\n    return string\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digits_difference = 0\n    for i in range(len(n1)):\n        digit1 = int(n1[i])\n        digit2 = int(n2[i])\n        digits_difference += digit1 - digit2\n    return digits_difference\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Note that this is not a total calculation. \n    # In particular, it's the *3, which is the 3 digits of the number\n    # from the second argument.\n    # For example, if n1=5800, n2=6510, the answer will be 16.\n    # In other words, if the numbers are 5900, 600, etc.\n    # If you write it as 5901, the answer will be 2.\n    # So, in this example, 5901 is the first digit, and it is therefore\n    # the *2.\n    # A side-effect of this calculation, we need to convert the number into\n    # a string and then subtract the string (which is a decimal number)\n    # then, we get the final answer.\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(n1[i] - n2[i] for i in range(0, 10))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return n1 - n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the return value to zero\n    sum = 0\n    \n    # For each digit of each input number (n1, n2), compute the sum of the differences\n    # and add it to the return value\n    for digit in range(0,10):\n        digit_diff = n1 - n2\n        digit_sum = digit_diff * 10**digit\n        sum += digit_sum\n    \n    # Return the result\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # If the numbers differ by more than one digit, the function should return a negative number\n    if n1 + n2!= n1 * n2:\n        return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # test with the sum_numbers function\n    import math\n    print('The sum_numbers function is working')\n    assert(n1+n2==sum([digit_distance_nums(n1,i) for i in range(10)]))\n    \n    # test with the digit_distance_nums_c function\n    assert(digit_distance_nums(n1,n2) == math.gcd(n1,n2))\n    \n    # test with the digit_distance_nums_c function\n    assert(digit_distance_nums(n1,n2) == math.gcd(n1,n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        n1, n2 = n2, n1\n    n_sum = 0\n    while n1!= n2:\n        n_sum += 1\n        n1 = n1 * 10 + n1 % 10\n        n2 = n2 * 10 + n2 % 10\n    return n_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    if n1 == n1.split()[0]:\n        return digit_distance_nums(n1.split()[1], n2)\n    elif n2 == n2.split()[0]:\n        return digit_distance_nums(n1.split()[1], n2.split()[1])\n    elif n1.split()[0] < n2.split()[0]:\n        n2 = n2.split()[1]\n        return digit_distance_nums(n1.split()[0], n2)\n    else:\n        n1 = n1.split()[0]\n        return digit_distance_nums(n1, n2)\n    \n    \nprint(digit_distance_nums(\"1\", \"1\"))\nprint(digit_distance_nums(\"1\", \"1.5\"))\nprint(digit_distance_nums(\"1.2\", \"1.2.3\"))\nprint(digit_distance_nums(\"1.2.3\", \"1.2\")"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = len(a)\n    max_sum = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            sub_sum = a[i] + a[j]\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    current_sum = 0\n    for i in range(len(a)):\n        current_sum += a[i]\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n        if current_sum < max_so_far:\n            current_sum = 0\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n    if size % 2 == 0:\n        mid = size/2\n        lst = a[:mid]\n        rst = a[mid:]\n        return max_sub_array_sum(lst, size-mid) + max_sub_array_sum(rst, size-mid)\n    if size % 2!= 0:\n        mid = size/2\n        lst = a[:mid]\n        rst = a[mid:]\n        return max_sub_array_sum(lst, size-mid) + max_sub_array_sum(rst, size-mid)\n    else:\n        lst = a[:size/2]\n        rst = a[size/2:]\n        return max_sub_array_sum(lst, size-mid) + max_sub_array_sum(rst, size-mid)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    a_ = []\n    for i in range(0, size):\n        a_.append(a[i])\n    max_ = a_[-1]\n    max_pos = 0\n    max_pos_idx = 0\n    for i in range(size-2, -1, -1):\n        if max_ > a_[i]:\n            max_ = a_[i]\n            max_pos = i\n            max_pos_idx = a_[i]\n    return max_pos_idx\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    l = []\n    current_sum = 0\n    for i in range(0, size):\n        current_sum = current_sum + a[i]\n        l.append(current_sum)\n    return max(l)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    sub_sum = 0\n    for i in range(size):\n        sum = sum + a[i]\n        if sum > sub_sum:\n            sub_sum = sum\n            if sub_sum == sum:\n                return sum\n    return sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = size\n    if n == 0 or n == 1:\n        return 0\n    max_sum = a[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, a[i] + max_sub_array_sum(a, i-1))\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # https://stackoverflow.com/questions/20996720/find-the-largest-sublist-in-a-list\n    \n    i = 0\n    sum = 0\n    \n    # find the highest index in a\n    # return sum after a[0] = 0\n    # for i in range(size):\n    #     if a[i] == 0:\n    #         sum += a[i]\n    #     else:\n    #         break\n    \n    # find the highest index in a\n    # return sum after a[0] = 0\n    # for i in range(size - 1):\n    #     if a[i] == 0:\n    #         sum += a[i]\n    #     else:\n    #         break\n    \n    # find the highest index in a\n    # return sum after a[0] = 0\n    # for i in range(size - 1, -1, -1):\n    #     if a[i] == 0:\n    #         sum += a[i]\n    #     else:\n    #         break\n    \n    # find the largest sublist\n    for i in range(size):\n        sum += a[i]\n        # find the highest index in a\n        # return sum after a[i] = 0\n        # for i in range(size):\n        #     if a[i] == 0:\n        #         sum += a[i]\n        #     else:\n        #         break\n    \n    # return the sum\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_sum = 0\n    curr_sum = 0\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # my_list1 = [1, 5, 7, 9, 20, 25]\n    # my_list2 = [2, 4, 6, 8, 10, 12]\n    my_list1 = test_tup1\n    my_list2 = test_tup2\n    l1 = len(my_list1)\n    l2 = len(my_list2)\n    if l1 > l2:\n        temp = my_list1\n        my_list1 = my_list2\n        my_list2 = temp\n    else:\n        temp = my_list2\n        my_list2 = my_list1\n        my_list1 = temp\n    # my_list1.sort()\n    # my_list2.sort()\n    # print(my_list1)\n    # print(my_list2)\n    result = []\n    result.extend(my_list1)\n    result.extend(my_list2)\n    return result\n    \n    \n    \n    # # print(my_list1)\n    # # print(my_list2)\n    # return list(set(my_list1 + my_list2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (tuple(sorted(test_tup1)), tuple(sorted(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # assume tuples are unordered\n    output = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            output.append(elem)\n        else:\n            output.append('-')\n    return sorted(output)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    output_list = []\n    if len(test_tup1) > 0 and len(test_tup2) > 0:\n        output_list.extend(test_tup1)\n        output_list.extend(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return_tuple = (test_tup1[0] if len(test_tup1) == len(test_tup2) else test_tup2[0])\n        return_tuple = (return_tuple, test_tup1[1] if len(test_tup1) == len(test_tup2) else test_tup2[1])\n    else:\n        return_tuple = (test_tup2[0] if len(test_tup2) == len(test_tup1) else test_tup1[0])\n        return_tuple = (return_tuple, test_tup2[1] if len(test_tup2) == len(test_tup1) else test_tup1[1])\n    return return_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Write your code here.\n    if test_tup1 is None or test_tup2 is None:\n        return None\n    test_tup = []\n    for x in test_tup1:\n        test_tup.append(x)\n    for y in test_tup2:\n        test_tup.append(y)\n    return tuple(test_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1_sorted = sorted(test_tup1)\n    test_tup2_sorted = sorted(test_tup2)\n    test_tup_final = list(set(test_tup1_sorted) | set(test_tup2_sorted))\n    return tuple(test_tup_final)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    d = {}\n    for i in test_tup1:\n        d[i] = d.get(i,0) + 1\n    for j in test_tup2:\n        d[j] = d.get(j,0) + 1\n    intersection = 0\n    for k in d.keys():\n        if d[k] > intersection:\n            intersection = d[k]\n            if intersection == len(test_tup1) or intersection == len(test_tup2):\n                break\n    return intersection\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    union_elements_list = []\n    \n    i = 0\n    j = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] == test_tup2[j]:\n            union_elements_list.append(test_tup1[i])\n            i += 1\n            j += 1\n        elif test_tup1[i] < test_tup2[j]:\n            i += 1\n        else:\n            j += 1\n    return union_elements_list\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    def Find_Length(lst):\n        n = len(lst)\n        max_len = 1\n        for i in range(1, n+1):\n            if len(lst[i-1]) > max_len:\n                max_len = len(lst[i-1])\n        return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    counter = 0\n    max_len = 0\n    for i in lst:\n        if len(i) > counter:\n            counter = len(i)\n            max_len = i\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    d = {}\n    for x in lst:\n        for y in x:\n            if y not in d:\n                d[y] = 1\n            else:\n                d[y] += 1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # using the built in built in function and count the length of the sublists.\n    max_length = 0\n    max_sublist_length = 0\n    \n    # Find the length of sublist.\n    # For each sublist, check the max length.\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_sublist_length:\n            max_sublist_length = length\n    \n    # The max length is the length of the sublists.\n    return max_sublist_length\n    \ndef Count_Sub_Sub_List(lst):\n    '''\n    Write a python function to count the number of sublists in a list.\n    '''\n    count = 0\n    max_sublist_length = Find_Max_Length(lst)\n    \n    # For each sublist, check the number of sublists.\n    # For each sublist, check the max length.\n    for i in range(max_sublist_length):\n        # Find the number of sublists.\n        # For each sublist, check the number of sublists.\n        for j in range(len(lst)):\n            if lst[j] == i:\n                count += 1\n    return count\n    \ndef Count_Max_Sub_Sub_List(lst):\n    '''\n    Write a python function to find the maximum number of sublists in a list.\n    '''\n    # The maximum number of sublists is the number of sublists in the first sublist.\n    return Count_Sub_Sub_List(lst)\n    \ndef All_Frequencies(lst):\n    '''\n    Write a python function to return the number of each number of 1's.\n    '''\n    # Use the built in function count.\n    # For each number, count the number of 1's.\n    # The function should return a dictionary with all the frequencies.\n    \n    # For each number, count the number of 1's.\n    # The function should return a dictionary with all the frequencies.\n    \n    # For each number, count the number of 1's.\n    # The function should return a dictionary with all the frequencies.\n    \n    # For each number, count the number of 1's.\n    # The function should return a dictionary with all the frequencies.\n    \n    count = 0\n    max_freq = 0\n    freq_dict = {}\n    for num in lst:\n        count += 1\n        if num == 1:\n            freq_dict[num] = count\n    \n    # The number of 1's in a sublist.\n    return freq_dict\n    \ndef All_Sum_Frequencies(lst):\n    '''\n    Write a python function to return the number of each number of 1's.\n    '''\n    # Use the built in function count.\n    # For each number, count the number of 1's.\n    # The function should return a dictionary with all the frequencies.\n    \n    # For each number, count the number of 1's.\n    # The function should return a dictionary with all the frequencies.\n    \n    # For each number, count the number of 1's.\n    # The function should return a dictionary with all the frequencies.\n    \n    # For each number, count the number of 1's.\n    # The function should return a dictionary with all the frequencies.\n    \n    count = 0\n    sum_freq = 0\n    freq_dict = {}\n    for num in lst:\n        count += 1\n        if num == 1:\n            sum_freq += 1\n            freq_dict[num] = sum_freq\n    \n    # The number of 1's in a sublist.\n    return freq_dict\n    \ndef Add_To_Sum(sublist, sum):\n    '''\n    Write a python function to add the sublist.\n    '''\n    # Add the sublist to the sum.\n    # The function should return None.\n    \n    # Add the sublist to the sum.\n    # The function should return None.\n    \n    # Add the sublist to the sum.\n    # The function should return None.\n    \n    if sum > 0:\n        for i in range(len(sublist)):\n            sublist[i] += sum\n            \n    # The sublist should not have negative numbers.\n    # The function should return None.\n    \n    # Add the sublist to the sum.\n    # The function should return None.\n    \n    # Add the sublist to the sum.\n    # The function should return None.\n    \n    # Add the sublist to the sum.\n    # The function should return None.\n    \ndef Get_Total_Sum(lst):\n    '''\n    Write a python function to get the total sum of a list.\n    '''\n    # The total sum of a list.\n    # The function should return a number.\n    \n    # The total sum of a list.\n    # The function should return a number.\n    \n    # The total sum of a list.\n    # The function should return a number.\n    \n    # The total sum of a list.\n    # The function should return a number.\n    \n    # The total sum of a list.\n    # The function should return a number.\n    \n    # The total sum of a list.\n    # The function should return a number.\n    \n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n        \n    return sum\n    \ndef Remove_From_Sum(lst, sub):\n    '''\n    Write a python function to remove a sublist from the total sum.\n    '''\n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None.\n    \n    # Remove the sublist from the total sum.\n    # The function should return None"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_sublist = []\n    for i in lst:\n        lst_sublist.append(len(i))\n    return max(lst_sublist)\n    "
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) > len(lst[i-1]):\n            count += 1\n            #print(lst[i])\n    print('Length of longest sublists: ', count)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n=len(lst)\n    count=1\n    start, end=0, 0\n    maxLen=0\n    if(n==1):\n        return maxLen\n    while(n>start):\n        if(lst[start]==lst[end]):\n            count+=1\n        else:\n            if(count>maxLen):\n                maxLen=count\n            count=1\n        end+=1\n        if(end==n):\n            end=start+1\n            start+=1\n    return maxLen\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    '''\n    python function:\n        find the length of longest sublist\n    '''\n    '''\n    def find_longest_length(lst):\n        longest_length = 0\n        for i in range(0, len(lst)):\n            for j in range(i, len(lst)):\n                if lst[i] > lst[j]:\n                    if lst[j] > longest_length:\n                        longest_length = lst[j]\n        return longest_length\n    '''\n    def find_longest_length(lst):\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if lst[i] > longest_length:\n                longest_length = lst[i]\n        return longest_length\n    '''\n    #return length of longest sublist\n    return len(lst)\n    \n    # O(n) for find longest length\n    # O(1) for find longest sublist\n    \n    '''\n    def Find_Max_Length_2(lst):\n        # O(n)\n        # O(1)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in lst:\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(1)\n    def Find_Max_Length_3(lst):\n        # O(n)\n        # O(1)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            for j in range(0, i):\n                if lst[j] > lst[i]:\n                    if lst[i] > longest_length:\n                        longest_length = lst[i]\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(1)\n    def Find_Max_Length_4(lst):\n        # O(n)\n        # O(1)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in lst:\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(1)\n    def Find_Max_Length_5(lst):\n        # O(n)\n        # O(1)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_6(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_7(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            for j in range(i + 1, len(lst)):\n                if lst[i] > lst[j]:\n                    if lst[j] > longest_length:\n                        longest_length = lst[j]\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_8(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_9(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_10(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_11(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_12(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_13(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_14(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_15(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_16(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n        longest_length = 0\n        for i in range(0, len(lst)):\n            if i > longest_length:\n                longest_length = i\n        return longest_length\n    '''\n    '''\n    # O(n)\n    # O(n)\n    def Find_Max_Length_17(lst):\n        # O(n)\n        # O(n)\n        '''\n        # find longest sublist\n        '''\n    "
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    ans = 0\n    for i in lst:\n        if len(i) > ans:\n            ans = len(i)\n    return ans\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst.sort()\n    l = []\n    if lst == []:\n        print(\"No sublists or sublists have the maximum length\")\n        return 0\n    elif len(lst) == 1:\n        print(\"No sublist has maximum length\")\n        return 0\n    else:\n        for i in range(len(lst)):\n            if len(lst[i]) >= len(lst[i+1]):\n                l.append(lst[i])\n            else:\n                l.append(lst[i+1])\n    if len(l) == 1:\n        print(\"There is only one sublist of length 1\")\n        return len(l)\n    else:\n        print(\"Sublists of length greater than or equal to 1 have length less than or equal to 1\")\n        return l.index(max(l))+1\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return [value.strip() for value in re.findall('[\u201c\u201d]+', text)]\ndef convert_to_days(date):\n    '''\n    Convert a date to a number of days\n    '''\n    try:\n        if date[:3] == 'Jan':\n            return 31\n        elif date[:3] == 'Feb':\n            return 28\n        elif date[:3] == 'Mar':\n            return 31\n        elif date[:3] == 'Apr':\n            return 30\n        elif date[:3] == 'May':\n            return 31\n        elif date[:3] == 'Jun':\n            return 30\n        elif date[:3] == 'Jul':\n            return 31\n        elif date[:3] == 'Aug':\n            return 31\n        elif date[:3] == 'Sep':\n            return 30\n        elif date[:3] == 'Oct':\n            return 31\n        elif date[:3] == 'Nov':\n            return 30\n        elif date[:3] == 'Dec':\n            return 31\n        else:\n            raise ValueError('Date does not match a format supported by the web scraper')\n    except IndexError:\n        raise ValueError('Date does not match a format supported by the web scraper')\ndef validate_date(date):\n    '''\n    Ensure a date is valid.\n    '''\n    try:\n        if date[:3] == 'Jan':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n        elif date[:3] == 'Feb':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            elif len(date) == 4:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            else:\n                raise ValueError('Date is invalid, please enter a valid date')\n        elif date[:3] == 'Mar':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            elif len(date) == 4:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            else:\n                raise ValueError('Date is invalid, please enter a valid date')\n        elif date[:3] == 'Apr':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            elif len(date) == 4:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            else:\n                raise ValueError('Date is invalid, please enter a valid date')\n        elif date[:3] == 'May':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            elif len(date) == 4:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            else:\n                raise ValueError('Date is invalid, please enter a valid date')\n        elif date[:3] == 'Jun':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            elif len(date) == 4:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            else:\n                raise ValueError('Date is invalid, please enter a valid date')\n        elif date[:3] == 'Jul':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            elif len(date) == 4:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            else:\n                raise ValueError('Date is invalid, please enter a valid date')\n        elif date[:3] == 'Aug':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            elif len(date) == 4:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            else:\n                raise ValueError('Date is invalid, please enter a valid date')\n        elif date[:3] == 'Sep':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            elif len(date) == 4:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please enter a valid date')\n                else:\n                    raise ValueError('Date is invalid, please enter a valid date')\n            else:\n                raise ValueError('Date is invalid, please enter a valid date')\n        elif date[:3] == 'Oct':\n            if len(date) == 3:\n                if date[2].isdigit():\n                    if int(date[2]) < 1 or int(date[2]) > 12:\n                        raise ValueError('Date is invalid, please ente"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search(r'[\\s]*(\"[^\"]*\")[^\\s]*', text)\n    if match:\n        return match.group(1)\n    return ''\ndef extract_key_value_pair(text):\n    '''\n    Write a function to extract the key value pair from a string.\n    '''\n    match = re.search(r'(?:\\s*\"([^\"]*\")\\s*\\=\\s*)(?:\\s*)(.+)', text)\n    if match:\n        return match.group(3), match.group(1)\n    return None\ndef extract_numeric_values(text):\n    '''\n    Write a function to extract numeric values from a string.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*[eEfF])?', text)\n    if match:\n        return match.group(1), match.group(2)\n    return None\ndef extract_converted_value(text):\n    '''\n    Write a function to extract a converted value from a string.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*(\\S*\\s*)?\\d+)', text)\n    if match:\n        return match.group(3)\n    return None\ndef extract_absolute_value(text):\n    '''\n    Write a function to extract a value as an absolute value.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*[eEfF])?(?:\\s*[\\+\\-]?\\d+)?', text)\n    if match:\n        return match.group(1)\n    return None\ndef extract_negative_value(text):\n    '''\n    Write a function to extract a negative value from a string.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*(-?\\d+))?', text)\n    if match:\n        return match.group(3)\n    return None\ndef extract_zero_or_one(text):\n    '''\n    Write a function to extract a value as a zero or one.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*(0|1))?', text)\n    if match:\n        return match.group(3)\n    return None\ndef extract_zero_or_one_from_float(text):\n    '''\n    Write a function to extract a value as a zero or one.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*(0|1)(\\d+\\.\\d+))?', text)\n    if match:\n        return match.group(3)\n    return None\ndef extract_one_of_values(text):\n    '''\n    Write a function to extract one of the values from a string.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*(1|2)(\\d+))?', text)\n    if match:\n        return match.group(1)\n    return None\ndef extract_integer_values(text):\n    '''\n    Write a function to extract a value as an integer.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*[+-]?\\d+)?', text)\n    if match:\n        return match.group(1)\n    return None\ndef extract_converted_integer_values(text):\n    '''\n    Write a function to extract a value as an integer.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*(0|1)(\\d+\\.\\d+))?', text)\n    if match:\n        return match.group(1)\n    return None\ndef extract_real_values(text):\n    '''\n    Write a function to extract a value as a real value.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*(1|2)(\\d+))?', text)\n    if match:\n        return match.group(1)\n    return None\ndef extract_converted_real_values(text):\n    '''\n    Write a function to extract a value as a real value.\n    '''\n    match = re.search(r'(?:\\s*(\\d+(\\.\\d*)?|\\.\\d+))(?:\\s*(1|2)(\\d+\\.\\d+))?', text)\n    if match:\n        return match.group(1)\n    return None\ndef extract_boolean_values(text):\n    '''\n    Write a function to extract a value as a boolean.\n    '''\n    match = re.search(r'(?:\\s*(true|false)(?:\\s*(0|1))?)', text)\n    if match:\n        return match.group(1)\n    return None\ndef extract_converted_boolean_values(text):\n    '''\n    Write a function to extract a value as a boolean.\n    '''\n    match = re.search(r'(?:\\s*(true|false)(?:\\s*(0|1)(\\d+\\.\\d+))?)', text)\n    if match:\n        return match.group(1)\n    return None\ndef extract_integer_part(text):\n    '''\n    Write a function to extract an integer part of a string.\n    '''\n    match = re.search(r'(?:\\s*\\d+(\\.\\d*)?|\\.\\d+)(?:\\s*[+-]?\\d+)?', text)\n    if match:\n        return match.group(3)\n    return None\ndef extract_integer_part_from_float(text):\n    '''\n    Write a function to extract an integer part of a string.\n    '''\n    match = re.search(r'(?:\\s*\\d+(\\.\\d*)?|\\.\\d+)(?:\\s*[+-]?\\d+)?', text)\n    if match:\n        return match.group(3)\n    return None\ndef extract_integer_part_from_real(text):\n    '''\n    Write a function to extract an integer part of a string.\n    '''\n    match = re.search(r'(?:\\s*\\d+(\\.\\d*)?|\\.\\d+)(?:\\s*[+-]?\\d+)?', text)\n    if match:\n        return match.group(3)\n    return None\ndef extract_integer_part_from_real_float(text):\n    '''\n    Write a function to extract an integer part of a string.\n    '''\n    match = re.search(r'(?:\\s*\\d+(\\.\\d*)?|\\.\\d+)(?:\\s*[+-]?\\d+)?', text)\n    if match:\n        return match.group(3)\n    return None\ndef extract_real_part(text):\n    '''\n    Write a function to extract a real part of a string.\n    '''\n    match = re.search(r'(?:\\s*[+-]?\\d+)(?:\\s*\\d+(\\.\\d*)?|\\.\\d+)', text)\n    if match:\n        return match.group(1)\n    return None\ndef extract_real_part_from_float(text):\n    '''\n    Write a function to extract a real part of a string.\n    '''\n    match = re.search(r'(?:\\s*[+-]?\\d+)(?:\\s*\\d+(\\.\\d*)?|\\.\\d+)', text)\n    if match:\n        return match.group(1)\n    return None"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # remove special characters\n    text = re.sub(r'[\u2018\u2019\u201c\u201d\u2026]', '', text)\n    # remove new line\n    text = re.sub(r'\\n', '', text)\n    # remove unwanted spaces\n    text = re.sub(r'\\s+', '', text)\n    # remove whitespace\n    text = re.sub('\\s+', '', text)\n    # remove multiple spaces\n    text = re.sub('\\s+','', text)\n    # remove''\n    text = re.sub('\\s+','', text)\n    # remove only digits\n    text = re.sub(r'\\d+', '', text)\n    # remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    start = text.find('\"')\n    end = text.find('\"', start + 1)\n    return text[start + 1:end]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.findall(r'\\(\\s*[^)]+?\\)', text)\n    result = []\n    for x in match:\n        x = x.split(',')\n        for y in x:\n            y = y.strip()\n            y = y.split(' ')\n            for z in y:\n                z = z.strip()\n                if z!= '':\n                    z = z.split(':')\n                    result.append(z)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    q = []\n    for i in text:\n        if i == '\"':\n            q.append(q.pop())\n        elif i == \"'\":\n            q.append(q.pop())\n        else:\n            q.append(i)\n    return q\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    s = text.lower()\n    s = re.sub(r'(?<! )\\[.*?\\]\\s*(?<! )', '', s)\n    s = re.sub(r'\\([^)]*\\)', '', s)\n    s = s.replace('\"','').replace('(','').replace(')','').replace(' ','').replace(';','')\n    s = s.replace(' ','')\n    return s.split(',')\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    reg = re.compile(r\"['\\\"]\\w+\")\n    sub = reg.sub(r\"\\1\", text)\n    return sub\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == '\"':\n        return text\n    text = text.replace('\"',\"\")\n    text = text.replace('\\'','')\n    text = text.replace('\\'',\"\")\n    text = text.replace('\\'',\"\")\n    text = text.replace('\\'',\"\")\n    text = text.replace('\\\\','')\n    text = text.replace('\\\\','')\n    text = text.replace('\\\\',\"\")\n    text = text.replace('\\\\',\"\")\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # regex:\n    # a    /^(?:(?:[^\\W\\s])|\"(?:[^\\W\\s])*\")+?\\s*/\\s*\\w+\\s*\\(\n    # q    (?:[^\\W\\s])|\"(?:[^\\W\\s])*\")+?\\s*/\\s*[^\\w\\s]*\\s*\\(\n    # a        [^\\W\\s]+?\\s*\\(\n    # q        [^\\W\\s]+?\\s*\\(\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    num_pairs=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                num_pairs+=1\n    return num_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # Dictionaries to keep track of unordered pairs.\n    unordered_pairs = {}\n    \n    # Loop through each item in the array.\n    for i in range(len(arr)):\n        \n        # If item is unordered, increment unordered_pairs by 1.\n        if arr[i] in unordered_pairs:\n            unordered_pairs[arr[i]] = unordered_pairs[arr[i]] + 1\n        # If item is not unordered, add it to the dictionary with the count of 1.\n        else:\n            unordered_pairs[arr[i]] = 1\n    \n    # Loop through the unordered pairs dictionary.\n    for i in unordered_pairs:\n        # If item in unordered_pairs is equal to 2, increment the count of pairs by 1.\n        if unordered_pairs[i] == 2:\n            count_Pairs(arr,n,i)\n    \n    return count_Pairs(arr,n)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count_pairs=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j] and arr[i]!=arr[n-1-j]:\n                count_pairs=count_pairs+1\n    return count_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n=len(arr)\n    count=0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            \n            if arr[i]==arr[j]:\n                count+=1\n            \n            \n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]==arr[j]):\n                count+=1\n    return coun"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dp = [0 for i in range(n+1)]\n    for i in range(n+1): \n        if i == 0: \n            dp[i] = 1\n        else: \n            dp[i] = 0\n            for j in range(i-1,n): \n                if arr[i-1] > arr[j]: \n                    dp[i] += dp[j]\n    return dp[n] \n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans = []\n    if len(arr) % 2 == 0:\n        for i in range(0,len(arr),2):\n            if arr[i] == arr[i+1]:\n                ans.append(arr[i])\n    else:\n        for i in range(0,len(arr),2):\n            if arr[i]!= arr[i+1]:\n                ans.append(arr[i])\n    return len(ans)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if (arr[i] > arr[j]) or (arr[j] > arr[i]) or (arr[i]!= arr[j]) or (arr[i] == arr[j]):\n                c += 1\n    return c\ndef count_Pairs2(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] > arr[j]) or (arr[j] > arr[i]) or (arr[i]!= arr[j]) or (arr[i] == arr[j]):\n                c += 1\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]!=arr[j]):\n                cnt+=1\n    return cnt\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(\" \")\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result=[]\n    for i in word:\n        if i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    \ndef splitWord(word):\n    '''\n    Write a python function to split a string into words.\n    '''\n    return split(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    new_word = \"\"\n    for letter in word:\n        new_word = new_word + letter\n    return new_word\ndef is_palindrome(word):\n    '''\n    Write a python function to check a word for palindrome.\n    '''\n    reversed_word = split(word)\n    if reverse_word == reversed_word[::-1]:\n        return True\n    return False\ndef main():\n    word = input(\"Enter the word you want to check for palindrome: \").strip()\n    if is_palindrome(word):\n        print(f\"{word} is a palindrome\")\n    else:\n        print(f\"{word} is not a palindrome\")\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    characters = {}\n    for character in word:\n        if character not in characters:\n            characters[character] = 0\n        characters[character] += 1\n    result = []\n    for i, v in characters.items():\n        result.append(i)\n    return result\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = \"\"\n    count = 0\n    \n    # If the string contains only 1 word, return the whole word\n    if len(word) < 1:\n        return word\n        \n    # For each letter in the word, add a count of how many letters it has\n    for letter in word:\n        count += 1\n        result += letter\n        \n    # Return the result string\n    return result\n    "
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    splitted = []\n    for i in word:\n        splitted.append(i)\n    return splitted\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty list\n    out_list = [] \n    # loop through string \n    for char in word: \n        # append to list if char is not '-', add as an empty string, \n        # and append to list if char is '-' \n        if char not in ['-','']: \n            out_list.append(char) \n        else: \n            out_list.append(\"\") \n    # return the list \n    return out_list "
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    import math\n    if n < 0:\n        print(-1)\n    elif n == 0:\n        return 0\n    else:\n        return math.trunc(n) + sum_digits(n-1)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # return sum([int(i) for i in str(n)])\n    return sum([int(i) for i in str(n) if i.isdigit()])\n    \ndef test():\n    assert sum_digits(123) == 0\n    assert sum_digits(42) == 1\n    assert sum_digits(999) == 2\n    assert sum_digits(113) == 3\n    assert sum_digits(2**1000) == 2**1000\n    assert sum_digits(2**100) == 2**100\n    assert sum_digits(2**10) == 2**10\n    assert sum_digits(0) == 0\n    assert sum_digits(1) == 1\n    \nif __name__ == '__main__':\n    test()"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = abs(n)\n    if n == 0:\n        return 0\n    else:\n        return sum_digits(n // 10) + n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    if n <= 0:\n        return 0\n    \n    \n    # TODO: Write your code here\n    sum = 0\n    while n > 0:\n        sum += n%10\n        n = n//10\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if type(n)!= int:\n        return 0\n    else:\n        n = abs(n)\n        res = 0\n        while n > 0:\n            res = res + n % 10\n            n = n // 10\n        return res\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i=0\n    j=len(list1)-1\n    while i<len(list1):\n        if list1[i]>list1[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = False\n    if list1[0] > list1[1]:\n        flag = True\n    else:\n        flag = False\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    isSorted = True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            isSorted = False\n    return isSorted\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # if len(list1) == 0:\n    #     return False\n    # else:\n    #     if list1[0] == list1[len(list1) - 1]:\n    #         list1.pop(len(list1) - 1)\n    #     return issort_list(list1[0:len(list1) - 1])\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError(\"list must be of type list\")\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Method 1:\n    # l = sorted(list1)\n    # print(l)\n    # if l == list1:\n    #     return True\n    #     # return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1) - 1):\n            if list1[j] > list1[j+1]:\n                list1[j], list1[j+1] = list1[j+1], list1[j]\n    return list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    #Your Code Here\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dict1 = []\n    dict2 = []\n    for i in range(length):\n        dict1.append({})\n        dict2.append({})\n    return dict1, dict2\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n    \ndef create_empty_dict(length):\n    '''\n    Write a function to create a dictionary with a key and a value.\n    '''\n    empty_dict = {}\n    return empty_dict\n    \ndef is_in_dict(key, dictionary):\n    '''\n    Write a function to check if the specified key exists in a dictionary.\n    '''\n    if key in dictionary:\n        return True\n    return False\n    \ndef get_key(dictionary, key):\n    '''\n    Write a function to get a value from a dictionary.\n    '''\n    if key in dictionary:\n        return dictionary.get(key)\n    return None\n    \ndef compare(original, new):\n    '''\n    Write a function to compare two dictionary.\n    '''\n    if original == new:\n        return True\n    return False\n    \ndef main():\n    '''\n    Test Your Code\n    '''\n    print(str(empty_list) + \" \"+ str(create_empty_dict(3)))\n    print(str(empty_dict) + \" \"+ str(create_empty_dict(3)))\n    print(str(empty_dict) + \" \"+ str(create_empty_dict(3)))\n    print(str(is_in_dict(\"name\", empty_dict)))\n    print(str(is_in_dict(\"name\", empty_dict)) + \" \" + str(is_in_dict(\"name\", create_empty_dict(2))))\n    print(str(get_key(\"name\", \"name\")) + \" \" + str(get_key(\"name\", \"name\")))\n    print(str(get_key(\"name\", \"age\")) + \" \" + str(get_key(\"name\", \"age\")))\n    print(str(get_key(\"name\", \"city\")) + \" \" + str(get_key(\"name\", \"city\")))\n    print(str(get_key(\"name\", \"email\")) + \" \" + str(get_key(\"name\", \"email\")))\n    \n    print(str(is_in_dict(\"name\", empty_dict)) + \" \" + str(is_in_dict(\"name\", create_empty_dict(2))))\n    print(str(is_in_dict(\"name\", empty_dict)) + \" \" + str(is_in_dict(\"name\", create_empty_dict(2))))\n    print(str(is_in_dict(\"name\", empty_dict)) + \" \" + str(is_in_dict(\"name\", create_empty_dict(2))))\n    print(str(is_in_dict(\"name\", create_empty_dict(2))) + \" \" + str(is_in_dict(\"name\", create_empty_dict(2))))\n    print(str(is_in_dict(\"name\", create_empty_dict(2))) + \" \" + str(is_in_dict(\"name\", create_empty_dict(2))))\n    print(str(is_in_dict(\"name\", create_empty_dict(2))) + \" \" + str(is_in_dict(\"name\", create_empty_dict(2))))\n    print(str(is_in_dict(\"name\", create_empty_dict(2))) + \" \" + str(is_in_dict(\"name\", create_empty_dict(2))))\n    \n    print(str(get_key(\"name\", \"name\")) + \" \" + str(get_key(\"name\", \"name\")))\n    print(str(get_key(\"name\", \"age\")) + \" \" + str(get_key(\"name\", \"age\")))\n    print(str(get_key(\"name\", \"city\")) + \" \" + str(get_key(\"name\", \"city\")))\n    print(str(get_key(\"name\", \"email\")) + \" \" + str(get_key(\"name\", \"email\")))\n    \n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    \n    print(str(compare(is_in_dict(\"name\", empty_dict), create_empty_dict(2))) + \" \" + str(compare(is_in_dict(\"name\", empty_dict), create_empty_dict(2))))\n    print(str(compare(is_in_dict(\"name\", empty_dict), create_empty_dict(2))) + \" \" + str(compare(is_in_dict(\"name\", empty_dict), create_empty_dict(2))))\n    print(str(compare(is_in_dict(\"name\", empty_dict), create_empty_dict(2))) + \" \" + str(compare(is_in_dict(\"name\", empty_dict), create_empty_dict(2))))\n    print(str(compare(is_in_dict(\"name\", create_empty_dict(2)), create_empty_dict(2))) + \" \" + str(compare(is_in_dict(\"name\", create_empty_dict(2)), create_empty_dict(2))))\n    print(str(compare(is_in_dict(\"name\", create_empty_dict(2)), create_empty_dict(2))) + \" \" + str(compare(is_in_dict(\"name\", create_empty_dict(2)), create_empty_dict(2))))\n    print(str(compare(is_in_dict(\"name\", create_empty_dict(2)), create_empty_dict(2))) + \" \" + str(compare(is_in_dict(\"name\", create_empty_dict(2)), create_empty_dict(2))))\n    print(str(compare(is_in_dict(\"name\", create_empty_dict(2)), create_empty_dict(2))) + \" \" + str(compare(is_in_dict(\"name\", create_empty_dict(2)), create_empty_dict(2))))\n    \n    print(str(get_key(\"name\", \"name\")) + \" \" + str(get_key(\"name\", \"name\")))\n    print(str(get_key(\"name\", \"age\")) + \" \" + str(get_key(\"name\", \"age\")))\n    print(str(get_key(\"name\", \"city\")) + \" \" + str(get_key(\"name\", \"city\")))\n    print(str(get_key(\"name\", \"email\")) + \" \" + str(get_key(\"name\", \"email\")))\n    \n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    print(str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))) + \" \" + str(compare(get_key(\"name\", \"name\"), create_empty_dict(2))))\n    \n    print(str(compare(is_in_dict(\"name\", empty_dic"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dict = []\n    for i in range(length):\n        dict_of_data = {}\n        dict_of_data[\"key\"] = str(i)\n        dict_of_data[\"value\"] = str(i)\n        list_of_dict.append(dict_of_data)\n    return list_of_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    d = []\n    for i in range(length):\n        d.append({})\n    return d\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # initialize a list of lists to empty\n    lists = []\n    \n    # iterate through each sublist\n    for sublist in list1:\n        # make a list of sublists\n        lists.append(list(sublist))\n    \n    # sort each sublist\n    lists = sorted(lists, key=lambda x: x[0])\n    \n    # return the sorted sublists\n    return lists\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j]==' ':\n                list1[i][j]='#'\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # all sublists are equal length, so we can make a copy\n    list2 = []\n    # add each element to the list\n    for element in list1:\n        list2.append(element[0])\n    # sort each sublist\n    for i in range(len(list2)):\n        list2[i] = sorted(list2[i])\n    # copy and return the sorted sublist\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n = len(list1)\n    sorted_list = []\n    i = 0\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort sublists\n    return sorted(list1, key=lambda sublist:sublist[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        new_list.append(sublist)\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    #Create a new list for the sorted sublists\n    sortlist = []\n    #Create a new list for the sorted sublists\n    sortlist2 = []\n    \n    #Create a count variable to count the number of elements in the sublists\n    count = 0\n    #For each element in the given list, put it in a new list\n    for i in range(len(list1)):\n        sortlist.append(list1[i])\n        count+=1\n        if count%2==1:\n            sortlist2.append(sortlist[i])\n            #If there are two elements in a sublist, sort both\n            #The loop iterates over the two sublists one at a time\n            #If the two sublists have the same elements, it goes through the other sublist\n            if count==2:\n                sortlist2.sort()\n            #If there are two elements in the same sublist, it goes through it one at a time\n            #If the two sublists have the same elements, it goes through the other sublist\n            else:\n                sortlist2.sort()\n                sortlist2.sort()\n                sortlist2.sort()\n                sortlist2.sort()\n    \n    return sortlist2\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # writing a function that takes a list and checks if it's already in the list\n    # if so it will print the list out again\n    # if not, it will return the new list which has been created\n    new_list = []\n    nums_set = set(nums)\n    for num in nums:\n        if num not in nums_set:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    i=0\n    for num in nums:\n        if num not in nums[i+1:]:\n            i+=1\n        i+=1\n    return nums[:i+1]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for item in nums:\n        if item not in result:\n            result.append(item)\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for nums in nums:\n        if nums not in unique_nums:\n            unique_nums.append(nums)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #remove duplicate numbers\n    nums_2 = [x for x in nums if x not in nums[0]]\n    return nums_2\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Check if the number of lists has more than one element.\n    if len(nums) < 2:\n        return nums\n    \n    # Create a copy of the list\n    nums_copy = list(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    my_list = []\n    for i in range(len(nums)):\n        if nums[i] not in my_list:\n            my_list.append(nums[i])\n    return my_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    temp_nums = []\n    for num in nums:\n        if num not in temp_nums:\n            temp_nums.append(num)\n    return temp_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    i = 0\n    j = 1\n    while i < len(nums):\n        if nums[i] == nums[j]:\n            i += 1\n        else:\n            j += 1\n            i += 1\n            nums.pop(i)\n    return nums\n    \n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 0\n    for value in list_data:\n        product += value\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    res = {}\n    for i in list_data:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return res\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_length = len(list_data)\n    product = 1\n    for i in range(list_length):\n        product *= list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list = []\n    for i in range(len(list_data)):\n        new_list.append(list_data[i])\n    return sum(new_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return sum(list_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = []\n    for i in list_data:\n        if i not in unique:\n            unique.append(i)\n    return len(unique)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 0\n    for i in list_data:\n        if i not in list_data:\n            unique_product += 1\n    print(unique_product)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    set_data = set(list_data)\n    set_data = set(map(lambda x: x*x, set_data))\n    return sorted(list(set_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    my_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in my_list:\n            my_list.append(list_data[i])\n    return sum(my_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if list_data == None:\n        return None\n    \n    unique_list = []\n    \n    # store all unique elements in unique_list\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    \n    # return the product of unique_list\n    return product(unique_list)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14*r*h*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r*h)/2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h*np.pi\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (math.pi*r*r)*h*2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    a = r*h*pi\n    a = round(a,2)\n    return a\n    \ndef surfacearea_rectangle(r1,h1,r2,h2):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    l1 = abs(r1*h1)\n    l2 = abs(r2*h2)\n    l = min(l1,l2)\n    a = l*h1\n    a = round(a,2)\n    return a\n    \ndef surfacearea_trapezoid(r1,h1,r2,h2):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    l1 = r1*h1\n    l2 = r2*h2\n    l = min(l1,l2)\n    a = l*h1\n    a = round(a,2)\n    return a\n    \ndef surfacearea_circumcircle(r):\n    '''\n    Write a function to find the surface area of a circular circle.\n    '''\n    a = math.pi*r*r\n    a = round(a,2)\n    return a\n    \ndef surfacearea_sierpinski(n):\n    '''\n    Write a function to find the surface area of a sierpinski triangle.\n    '''\n    d = n\n    a = 2*(n+1)*(d+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon(r1,h1):\n    '''\n    Write a function to find the surface area of a heptagon.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_octagon(r1,h1):\n    '''\n    Write a function to find the surface area of a octagon.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_pentagon(r1,h1):\n    '''\n    Write a function to find the surface area of a pentagon.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_3(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_3_2(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_3_3(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_3_4(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_3_5(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_3_6(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_3_7(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_4(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_4_1(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_4_2(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_4_3(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_4_4(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_4_5(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_4_6(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_4_7(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_4_8(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_5(r1,h1):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = h1*r1*(r1+1)\n    a = round(a,2)\n    return a\n    \ndef surfacearea_heptagon_ellipse_5_1(r1,"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (r*r*h)/2\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*np.pi*h**2)*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    radius = r\n    height = h\n    def circlearea(radius,height):\n        return pi * radius * radius\n    circlearea(radius,height)\n    print('circlearea = %f' %circlearea(radius,height))\n    \n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea(r,h)\n    print('circlearea = %f' %circlearea(r,h))\n    \n    circlearea"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r*h)**2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h\n    \ndef surfacearea_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return a*a\n    \ndef surfacearea_rectangle(a,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*h\n    \ndef perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return (a*h)\n    \ndef area(a,h):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return (a*h)/2\n    \ndef volume(a,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (a*h)/3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (r*h/3)**3\n    \ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (a*a)/3\n    \ndef volume_rectangle(a,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (a*h)/2\n    \ndef surface_volume(a,h):\n    '''\n    Write a function to find the surface volume of a sphere.\n    '''\n    return (a*h)/3\n    \ndef surface_volume_cylinder(r,h):\n    '''\n    Write a function to find the surface volume of a cylinder.\n    '''\n    return (r*h)/3\n    \ndef surface_volume_square(a):\n    '''\n    Write a function to find the surface volume of a square.\n    '''\n    return (a*a)/3\n    \ndef surface_volume_rectangle(a,h):\n    '''\n    Write a function to find the surface volume of a rectangle.\n    '''\n    return (a*h)/2\n    \ndef surface_area(a,h):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (a*h)/3\n    \ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r*h/3)\n    \ndef surface_area_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return (a*a)/3\n    \ndef surface_area_rectangle(a,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return (a*h)/2\n    \n    \n    \ndef volume_convexhull(l):\n    '''\n    Write a function to find the volume of a convexhull.\n    '''\n    return (sum(l)/len(l))\n    \ndef volume_concavehull(l):\n    '''\n    Write a function to find the volume of a concavehull.\n    '''\n    return (sum(l)/len(l)/2)\n    \ndef max_area(l):\n    '''\n    Write a function to find the maximum area of a convexhull.\n    '''\n    return max(l)\n    \ndef max_volume(l):\n    '''\n    Write a function to find the maximum volume of a convexhull.\n    '''\n    return max(l)/2\n    \ndef max_perimeter(l):\n    '''\n    Write a function to find the maximum perimeter of a convexhull.\n    '''\n    return max(sum(l))\n    \ndef perimeter_circumference(l):\n    '''\n    Write a function to find the circumference of a convexhull.\n    '''\n    return (2*sum(l)/len(l))\n    \ndef perimeter_circle(l):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return (sum(l)/len(l))\n    \ndef perimeter_rectangle(a,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return (a*h)/2\n    \ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return (a*a)/2\n    \ndef perimeter_rectangle_square(a,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return (a*a)/2\n    \ndef area_convexhull(l):\n    '''\n    Write a function to find the area of a convexhull.\n    '''\n    return (sum(l)/len(l))\n    \ndef area_concavehull(l):\n    '''\n    Write a function to find the area of a concavehull.\n    '''\n    return (sum(l)/len(l)/2)\n    \ndef area_circumcircle(l):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (sum(l)/(len(l)*3))\n    \ndef area_circle(l):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (sum(l)/(len(l)*3))\n    \ndef area_rectangle(a,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (a*h)/2\n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return (a*a)/2\n    \ndef area_rectangle_square(a,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (a*a)/2\n    \ndef area_square_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return (a*a)/2\n    \ndef area_triangle(a,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (a*(a+h)/2)\n    \ndef area_triangle_square(a,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (a*(a+h)/2)\n    \ndef area_square_rectangle(a,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (a*(a+h)/2)\n    \ndef area_rectangle_rectangle(a,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (a*(a+h)/2)\n    \ndef volume_convexhull(l):\n    '''\n    Write a function to find the volume of a convexhull.\n    '''\n    return (sum(l)/len(l))\n    \ndef volume_concavehull(l):\n    '''\n    Write a function to find the volume of a concavehull.\n    '''\n    return (sum(l)/len(l)/2)\n    \ndef volume_circumcircle(l):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (sum(l)/len(l)/3)\n    \ndef volume_circle(l):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (sum(l)/len(l)/3)\n    \ndef volume_rectangle(a,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (a*h*a)\n    \ndef volume_rectangle_square(a,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (a*h*a*a)\n    \ndef volume_square(a):\n    '''\n    Write a functio"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    lst = []\n    for i in range(len(A)):\n        if A[i] not in lst:\n            lst.append(A[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    L=[]\n    for i in range(len(B)):\n        if B[i] not in L:\n            L.append(B[i])\n    return(L==A)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+1] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def is_Sub_array(A,B):\n        if len(A) < len(B):\n            return False\n        else:\n            return True\n    return is_Sub_array(A,B)\n    "
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A.sort()\n    B.sort()\n    return all(A[i] <= B[i] for i in range(len(A)))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (A==[]):\n        return True\n    if B==[] or A[0]!=B[0]:\n        return False\n    if len(A)==len(B):\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==0:\n        return False\n    if len(A)==1:\n        return True\n    if len(B)==0:\n        return False\n    if len(B)==1:\n        return True\n    if B[0] not in A:\n        return False\n    if B[1] not in A:\n        return False\n    return is_Sub_Array(A[1:],B[1:])\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return len(A) == len(B) and all(A[i] == B[i] for i in range(len(A)))\ndef is_Arr_Sub_Array(A,B): \n    '''\n    Write a python function to check whether A is sublist of B or not.\n    '''\n    return all(A[i] == B[i] for i in range(len(A)))\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 0):\n        return 0\n    if (n < 0):\n        return 0\n    elif (n % 10):\n        return last_Digit_Factorial(n // 10) + 1\n    else:\n        return last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    lastDigit = 0\n    for i in range(1, n+1):\n        lastDigit = lastDigit * i\n    return lastDigit"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Your code here\n    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial*i\n    return factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a *= i\n    return a \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    count = 1\n    for i in range(1, n + 1):\n        count = count * i\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n    \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    lastDigitFactorial = 1\n    num = 0\n    while(n > 0): \n        num = n%10\n        n = n//10\n        lastDigitFactorial = lastDigitFactorial*num\n    return lastDigitFactorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial_table = [1,1]\n    for i in range(2, n+1):\n        Factorial_table.append(Factorial_table[i-1]*i)\n    return Factorial_table[n]\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return last_Digit_Factorial(n//2)\n    elif n % 2 == 1: \n        return last_Digit_Factorial(n//2) + 1\n    else: \n        return last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # WRITE YOUR CODE HERE\n    result = list1\n    for i in range(len(list2)):\n        result.append(list3[i])\n    for i in range(len(list2)):\n        result.append(list2[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    temp = []\n    for i in list1:\n        temp.append(i)\n    for j in list2:\n        temp.append(j)\n    for k in list3:\n        temp.append(k)\n    return temp\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    while len(list1) > 0 and len(list2) > 0 and len(list3) > 0:\n        if list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0] = temp\n        elif list1[0] < list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list2[0]\n            list2[0"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list=[]\n    while len(list1)>0 and len(list2)>0 and len(list3)>0:\n        if list1[0]==list2[0] and list1[0]==list3[0]:\n            list1=list1[1:]\n            list2=list2[1:]\n            list3=list3[1:]\n        elif list1[0]==list2[0] and list1[0]==list3[0]:\n            list1=list1[1:]\n            list2=list2[1:]\n            list3=list3[1:]\n        elif list1[0]==list2[0] and list1[0]==list3[0]:\n            list1=list1[1:]\n            list2=list2[1:]\n            list3=list3[1:]\n        else:\n            new_list.append(list1[0])\n            list1=list1[1:]\n            list2=list2[1:]\n            list3=list3[1:]\n    while len(list1)>0:\n        new_list.append(list1[0])\n        list1=list1[1:]\n    while len(list2)>0:\n        new_list.append(list2[0])\n        list2=list2[1:]\n    while len(list3)>0:\n        new_list.append(list3[0])\n        list3=list3[1:]\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list3+list1,list2+list3,list1+list2]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # first pass: split into 3 lists\n    split_list1 = split_list2 = split_list3 = []\n    i = 0\n    while i < len(list1):\n        split_list1.append(list1[i])\n        split_list2.append(list2[i])\n        split_list3.append(list3[i])\n        i += 1\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_for_each = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                list_for_each.append(list1[i]+list2[j]+list3[k])\n    return list_for_each\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(0, len(test_tup1)):\n        for j in range(0, len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j] and test_tup1[i] not in result:\n                result.append(test_tup1[i])\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [tup1 for tup2 in zip(test_tup1, test_tup2) for tup1 in zip(tup2[0], tup2[1]) if tup1[0]!=tup2[0] and tup1[1]!=tup2[1]]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tuple = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            dissimilar_tuple.append(test_tup1[i])\n    \n    return dissimilar_tuple\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                dissimilar.append(test_tup1[i])\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return (test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0], test_tup1[1] if test_tup1[1] > test_tup2[1] else test_tup2[1])\n    \ndef main():\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    print('Given two tuples, find the dissimilar elements in the given two tuples.')\n    print('Example:')\n    print('>>> main()')\n    print('Expected Output:')\n    print('>>> (1, 2) <=> (2, 1)' if find_dissimilar([1, 2], [2, 1]) else '2, 1' if find_dissimilar([1, 2], [2, 1]) else '2')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return test_tup1[0]!= test_tup2[0] or test_tup1[1]!= test_tup2[1]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return sorted([i for i in test_tup1 if i not in test_tup2])\n    else:\n        return []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Error: lengths of tuples are not equal')\n        return None\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    #tup1 = tuple(sorted(set(test_tup1)))\n    #tup2 = tuple(sorted(set(test_tup2)))\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim = []\n    for i in test_tup2:\n        if i not in test_tup1:\n            dissim.append(i)\n    return dissim\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc_tuple = []\n    even_fnc_tuple.append(test_tuple[0])\n    even_fnc_tuple.append(test_tuple[1])\n    even_fnc_tuple.append(test_tuple[2])\n    \n    return even_fnc_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even = list(test_tuple)\n    even.sort()\n    for n in range(len(even)):\n        even[n] = even_fnc(even[n])\n    even = tuple(even)\n    return even\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    odd_list = []\n    \n    for x in test_tuple:\n        if type(x) == int:\n            if x%2 == 0:\n                even_list.append(x)\n            else:\n                odd_list.append(x)\n        else:\n            even_list.append(x)\n    \n    even_list = list(set(even_list))\n    \n    print(even_list)\n    print(odd_list)\n    \n    def remove_uneven_elements(even_list, odd_list):\n        for x in range(len(even_list)):\n            for y in range(len(odd_list)):\n                if even_list[x] == odd_list[y]:\n                    even_list.pop(x)\n                    odd_list.pop(y)\n        return even_list, odd_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if even_fnc(test_tuple):\n        even_tuple = test_tuple[:]\n        even_tuple.remove(even_tuple[0])\n        return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elem = test_tuple[0]\n    for i in range(1, len(test_tuple)):\n        if test_tuple[i] % 2 == 0:\n            even_elem = even_fnc(even_elem, test_tuple[i])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_even(tuple, even_fnc):\n        lst = []\n        for i in range(len(tuple)):\n            if tuple[i] % 2 == 0:\n                lst.append(tuple[i])\n        return tuple[0:len(tuple)] + tuple[len(tuple):]\n    even_tuple = even_fnc(test_tuple, remove_even)\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple[0]) == str:\n        return even_fnc(tuple(map(even_fnc, test_tuple)))\n    else:\n        return even_fnc(even_fnc(tuple(map(even_fnc, test_tuple))))\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tup = test_tuple[:]\n    tup[0] = tup[0] % 2\n    tup = tup[:]\n    tup = even_fnc(tup)\n    return tup \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_index = 0\n    even_list = []\n    odd_index = 0\n    odd_list = []\n    even_list.extend(test_tuple[even_index:])\n    odd_list.extend(test_tuple[odd_index:])\n    even_list.extend(test_tuple[even_index+1:])\n    odd_list.extend(test_tuple[odd_index+1:])\n    even_list = list(set(even_list))\n    odd_list = list(set(odd_list))\n    while even_index < len(test_tuple) and odd_index < len(test_tuple):\n        if even_list[even_index] == odd_list[odd_index]:\n            even_list.remove(even_list[even_index])\n            even_index += 1\n        elif even_list[even_index] < odd_list[odd_index]:\n            odd_list.remove(odd_list[odd_index])\n            odd_index += 1\n        else:\n            even_list.remove(even_list[even_index])\n            even_index += 1\n    return even_list, odd_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    even_el = 0\n    for ele in test_tuple:\n        if ele % 2 == 0:\n            even_el += 1\n            new_tuple.append(ele)\n        else:\n            new_tuple.append(None)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    \n    # calc the minimum corner\n    min_c = (b, s)\n    \n    for i in range(b):\n        for j in range(s):\n            if (min_c[0] <= i and i <= min_c[1]) and (min_c[0] <= j and j <= min_c[1]):\n                area = area + 1\n            \n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s == 0: \n        return 0\n    elif s < 0: \n        return 0\n    else: \n        return (b*(s+1)**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your code here\n    # base edge and height are not required, just used as a reference for the next section.\n    # You can use just the try and except blocks for your convenience\n    try:\n        base = float(input('Enter base edge: '))\n        height = float(input('Enter height: '))\n    except ValueError:\n        print('Invalid input. Please try again.')\n        return 'Invalid input. Please try again.'\n    except:\n        print('Invalid input. Please try again.')\n        return 'Invalid input. Please try again.'\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    try:\n        print(\"\\nArea of a pyramid with base edge\", b, \"and height\", s)\n    except Exception:\n        print(\"\\nInvalid input.\\n\")\n    try:\n        print(\"\\nArea of pyramid of base edge\", b, \"is:\", round(s*b*1.0/2, 2))\n    except Exception:\n        print(\"\\nInvalid input.\\n\")\n    try:\n        print(\"\\nArea of pyramid of height\", s, \"is:\", round(s*s, 2))\n    except Exception:\n        print(\"\\nInvalid input.\\n\")\n    try:\n        print(\"\\nArea of pyramid of base edge\", b, \"is:\", round(s*(b**2), 2))\n    except Exception:\n        print(\"\\nInvalid input.\\n\")\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = 4 * b\n    h = s * (4/3)\n    return h * a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (b//2)*s\n    b = b + (a//2)\n    return a*b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # convert the base edge and height into a list of integers\n    base_edge = list(map(int, str(b)))\n    height = list(map(int, str(s)))\n    # create a list of integers representing the base edge and height\n    base_edge_height = zip(base_edge,height)\n    # create a dictionary of base edge height pairs\n    height_width = dict(base_edge_height)\n    # create a list of the keys for the height dictionary\n    height_keys = list(height_width.keys())\n    # create a list of the values for the height dictionary\n    height_values = list(height_width.values())\n    # create a new list of the values with the new keys and values\n    height_values_new = list(map(lambda x:x[1],height_values))\n    # create a list of the values with the new keys and values\n    height_values_new_join = list(map(lambda x:x[0],height_values))\n    # create a new list of the values with the new keys and values\n    height_values_new_join_join = list(map(lambda x:x[1]+x[0],height_values))\n    # return the list of height values\n    return sum(height_values_new)\n    "
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    def is_square(b,s):\n        if (b/2)**2 == (s/2)**2:\n            return True\n        return False\n    def is_rectangular(b,s):\n        return (is_square(b,s)) and (b/2)**2 == (s/2)**2\n    if is_square(b,s) == False:\n        return None\n    if is_rectangular(b,s) == False:\n        return None\n    l = ((b/2)**2) - (s/2)\n    return math.sqrt(l)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (b + s) / 2\n    b = a + s\n    s = (b - a) / 2\n    a = (b + s) / 2\n    b = a + s\n    return a * b\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s*s-b*s+b*s+s*s-s+s*s-b*s+b+s*s-b*s-s*s)\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if type(dict1) == type({}):\n        return None\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for value in dict1.values():\n        if value:\n            return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        if dict1[i] == '':\n            return False\n    return True\ndef is_number(s):\n    '''\n    Checks if a string is a number\n    '''\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\ndef is_word(s):\n    '''\n    Checks if a string is a word\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_sentence(s):\n    '''\n    Check if a string is a sentence\n    '''\n    if s == '':\n        return False\n    for i in s:\n        if not i.isalpha():\n            return False\n    return True\ndef is_sentence_end(s):\n    '''\n    Check if a string is a sentence end\n    '''\n    if s == '':\n        return False\n    for i in s:\n        if i == '.':\n            return False\n    return True\ndef is_phone(s):\n    '''\n    Check if a string is a phone number\n    '''\n    if s == '':\n        return False\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_email(s):\n    '''\n    Check if a string is an email address\n    '''\n    if s == '':\n        return False\n    for i in s:\n        if not i.isalnum():\n            return False\n    return True\ndef is_time(s):\n    '''\n    Check if a string is a time\n    '''\n    if s == '':\n        return False\n    for i in s:\n        if i not in ['m', 'h', 'd']:\n            return False\n    return True\ndef is_date(s):\n    '''\n    Check if a string is a date\n    '''\n    if s == '':\n        return False\n    for i in s:\n        if i not in ['d', 'y', 'j']:\n            return False\n    return True\ndef is_digit(s):\n    '''\n    Check if a string is a digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_start(s):\n    '''\n    Check if a string is a starting phrase\n    '''\n    if s == '':\n        return False\n    for i in s:\n        if not i.isalpha():\n            return False\n    return True\ndef is_end(s):\n    '''\n    Check if a string is a ending phrase\n    '''\n    if s == '':\n        return False\n    for i in s:\n        if not i.isalpha():\n            return False\n    return True\ndef is_number_zero(s):\n    '''\n    Check if a string is a number zero\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_one(s):\n    '''\n    Check if a string is a number one\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_two(s):\n    '''\n    Check if a string is a number two\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_three(s):\n    '''\n    Check if a string is a number three\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_four(s):\n    '''\n    Check if a string is a number four\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_five(s):\n    '''\n    Check if a string is a number five\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_six(s):\n    '''\n    Check if a string is a number six\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_seven(s):\n    '''\n    Check if a string is a number seven\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_eight(s):\n    '''\n    Check if a string is a number eight\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_nine(s):\n    '''\n    Check if a string is a number nine\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_zero_digit(s):\n    '''\n    Check if a string is a number zero digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_one_digit(s):\n    '''\n    Check if a string is a number one digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_two_digit(s):\n    '''\n    Check if a string is a number two digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_three_digit(s):\n    '''\n    Check if a string is a number three digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_four_digit(s):\n    '''\n    Check if a string is a number four digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_five_digit(s):\n    '''\n    Check if a string is a number five digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_six_digit(s):\n    '''\n    Check if a string is a number six digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_seven_digit(s):\n    '''\n    Check if a string is a number seven digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_eight_digit(s):\n    '''\n    Check if a string is a number eight digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_nine_digit(s):\n    '''\n    Check if a string is a number nine digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_zero_digit_digit(s):\n    '''\n    Check if a string is a number zero digit and digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_one_digit_digit(s):\n    '''\n    Check if a string is a number one digit and digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number_two_digit_digit(s):\n    '''\n    Check if a string is a number two digit and digit\n    '''\n    for i in s:\n        if not i.isdigit():\n            return False\n    for i in s:\n        if not i.isdigit():\n            return False\n    return True\ndef is_number"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_number = [0, 1, 1, 1, 2, 6, 24, 120, 720, 168,\n        540, 672, 1036, 1360, 1392, 1672, 2368, 2384,\n        2416, 2560, 2710, 2920, 3040, 3120, 3320,\n        3452, 3808, 4160, 4384, 4736, 4864, 5040,\n        5120, 5336, 5648, 5952, 6100, 6208,\n        6432, 6576, 6992, 7208, 7384, 7920,\n        8032, 8120, 8336, 8648, 8992,\n        9160, 9352, 9680, 10060, 10240, 10456, 10792, 11104,\n        11120, 11304, 11100, 11376, 11520, 11536, 11648, 11592,\n        11888, 12000, 12000, 12000, 12000, 12000,\n        12000, 12000, 12000, 12000, 12000, 12000,\n        12000, 12000, 12000, 12000, 12000, 12000,\n        12000, 12000, 12000, 12000, 12000, 12000]\n    return catalan_number[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num > 1:\n        return catalan_number(num-1) + catalan_number(num-2)\n    else:\n        return 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 3\n    if num == 3:\n        return 5\n    if num == 4:\n        return 8\n    if num == 5:\n        return 13\n    if num == 6:\n        return 21\n    if num == 7:\n        return 34\n    if num == 8:\n        return 51\n    if num == 9:\n        return 70\n    if num == 10:\n        return 100\n    if num == 11:\n        return 121\n    if num == 12:\n        return 144\n    if num == 13:\n        return 201\n    if num == 14:\n        return 236\n    if num == 15:\n        return 301\n    if num == 16:\n        return 522\n    if num == 17:\n        return 660\n    if num == 18:\n        return 712\n    if num == 19:\n        return 860\n    if num == 20:\n        return 912\n    if num == 21:\n        return 1360\n    if num == 22:\n        return 1420\n    if num == 23:\n        return 1560\n    if num == 24:\n        return 1640\n    if num == 25:\n        return 1760\n    if num == 26:\n        return 1840\n    if num == 27:\n        return 2080\n    if num == 28:\n        return 2120\n    if num == 29:\n        return 2360\n    if num == 30:\n        return 2560\n    if num == 31:\n        return 2760\n    if num == 32:\n        return 2840\n    if num == 33:\n        return 3080\n    if num == 34:\n        return 3120\n    if num == 35:\n        return 3260\n    if num == 36:\n        return 3360\n    if num == 37:\n        return 3520\n    if num == 38:\n        return 3660\n    if num == 39:\n        return 3740\n    if num == 40:\n        return 3880\n    if num == 41:\n        return 3920\n    if num == 42:\n        return 4060\n    if num == 43:\n        return 4120\n    if num == 44:\n        return 4240\n    if num == 45:\n        return 4360\n    if num == 46:\n        return 4420\n    if num == 47:\n        return 4500\n    if num == 48:\n        return 4600\n    if num == 49:\n        return 4240\n    if num == 50:\n        return 4360\n    if num == 51:\n        return 4420\n    if num == 52:\n        return 4560\n    if num == 53:\n        return 4600\n    if num == 54:\n        return 4240\n    if num == 55:\n        return 4360\n    if num == 56:\n        return 4420\n    if num == 57:\n        return 4600\n    if num == 58:\n        return 4240\n    if num == 59:\n        return 4360\n    if num == 60:\n        return 4420\n    if num == 61:\n        return 4560\n    if num == 62:\n        return 4600\n    if num == 63:\n        return 4240\n    if num == 64:\n        return 4360\n    if num == 65:\n        return 4420\n    if num == 66:\n        return 4600\n    if num == 67:\n        return 4240\n    if num == 68:\n        return 4360\n    if num == 69:\n        return 4420\n    if num == 70:\n        return 4600\n    if num == 71:\n        return 4240\n    if num == 72:\n        return 4360\n    if num == 73:\n        return 4420\n    if num == 74:\n        return 4600\n    if num == 75:\n        return 4240\n    if num == 76:\n        return 4360\n    if num == 77:\n        return 4420\n    if num == 78:\n        return 4600\n    if num == 79:\n        return 4240\n    if num == 80:\n        return 4360\n    if num == 81:\n        return 4420\n    if num == 82:\n        return 4600\n    if num == 83:\n        return 4240\n    if num == 84:\n        return 4360\n    if num == 85:\n        return 4420\n    if num == 86:\n        return 4600\n    if num == 87:\n        return 4240\n    if num == 88:\n        return 4360\n    if num == 89:\n        return 4420\n    if num == 90:\n        return 4600\n    if num == 91:\n        return 4240\n    if num == 92:\n        return 4360\n    if num == 93:\n        return 4420\n    if num == 94:\n        return 4600\n    if num == 95:\n        return 4240\n    if num == 96:\n        return 4360\n    if num == 97:\n        return 4420\n    if num == 98:\n        return 4600\n    if num == 99:\n        return 4240\n    if num == 100:\n        return 4360\n    if num == 101:\n        return 4420\n    if num == 102:\n        return 4600\n    if num == 103:\n        return 4240\n    if num == 104:\n        return 4360\n    if num == 105:\n        return 4420\n    if num == 106:\n        return 4600\n    if num == 107:\n        return 4240\n    if num == 108:\n        return 4360\n    if num == 109:\n        return 4420\n    if num == 110:\n        return 4600\n    if num == 111:\n        return 4240\n    if num == 112:\n        return 4360\n    if num == 113:\n        return 4420\n    if num == 114:\n        return 4600\n    if num == 115:\n        return 4240\n    if num == 116:\n        return 4360\n    if num == 117:\n        return 4420\n    if num == 118:\n        return 4600\n    if num == 119:\n        return 4240\n    if num == 120:\n        return 4360\n    if num == 121:\n        return 4420\n    if num == 122:\n        return 4600\n    if num == 123:\n        return 4240\n    if num == 124:\n        return 4360\n    if num == 125:\n        return 4420\n    if num == 126:\n        return 4600\n    if num == 127:\n        return 4240\n    if num == 128:\n        return 4360\n    if num == 129:\n        return 4420\n    if num == 130:\n        return 4600\n    if num == 131:\n        return 4240\n    if num == 132:\n        return 4360\n    if num == 133:\n        return 4420\n    if num == 134:\n        return 4600\n    if num == 135:\n        return 4240\n    if num == 136:\n        return 4360\n    if num == 137:\n        return 4420\n    if num == 138:\n        return 4600\n    if num == 139:\n        return 4240\n    if num == 140:\n        return 4360\n    if num == 141:\n        return 4420\n    if num == 142:\n        return 4600\n    if num == 143:\n        return 4240\n    if num == 144:\n        return 4360\n    if num == 145:\n        return 4420\n    if num == 146:\n        return 4600\n    if num == 147:\n        return 4240\n    if num == 148:\n        return 4360\n    if num == 149:\n        return 4420\n    if num == 150:\n        return 4600\n    if num == 151:\n        return 4240\n    if num == 152:\n        return 4360\n    if num == 153:\n        return 4420\n    if num == 154:\n        return 4600\n    if num == 155:\n        return 4240\n    if num == 156:\n        return 4360\n    if num == 157:\n        return 4420\n    if num == 158:\n        return 4600\n    if num == 159:\n        return 4240\n    if num == 160:\n        return 4360\n    if num == 161:\n        return 4420\n    if num == 162:\n        return 4600\n    if num == 163:\n        return 4240\n    if num == 164:\n        return 4360\n    if num == 165:\n        return 4420\n    if num == 166:\n        return 4600\n    if num == 167:\n        return 4240\n    if num == 168:\n        return 4360\n    if num == 169:"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    count=0\n    result=[]\n    for x in range(1,num+1):\n        count += x**2\n        if count%2:\n            result.append(x)\n        else:\n            result.append(x*2)\n    return result\ndef binomial(n,k):\n    '''\n    Write a function which returns number of ways\n    to obtain n to k.\n    '''\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    if n < k:\n        return binomial(n,k-1)\n    return binomial(n-1,k-2)\ndef factorial(num):\n    '''\n    Write a function which returns number of factorial of\n    the given number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\ndef factorial_dp(num):\n    '''\n    Return the factorial of a given number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return num * factorial_dp(num-1)\ndef fibonacci(n):\n    '''\n    Write a function which returns the\n    number of fibonacci numbers for given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci(n-1)\n    else:\n        return fibonacci(n-2) + fibonacci(n-1)\ndef fibonacci_dp(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp(n-1)\n    else:\n        return fibonacci_dp(n-2) + fibonacci_dp(n-1)\ndef fibonacci_dp_recursive(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_recursive(n-1)\n    else:\n        return fibonacci_dp_recursive(n-2) + fibonacci_dp_recursive(n-1)\ndef fibonacci_dp_iterative(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_iterative(n-1)\n    else:\n        return fibonacci_dp_iterative(n-2) + fibonacci_dp_iterative(n-1)\ndef fibonacci_dp_iterative_recursive(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_iterative_recursive(n-1)\n    else:\n        return fibonacci_dp_iterative_recursive(n-2) + fibonacci_dp_iterative_recursive(n-1)\ndef fibonacci_dp_iterative_recursive_dp(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_iterative_recursive_dp(n-1)\n    else:\n        return fibonacci_dp_iterative_recursive_dp(n-2) + fibonacci_dp_iterative_recursive_dp(n-1)\ndef fibonacci_dp_iterative_dp_recursive(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_iterative_dp_recursive(n-1)\n    else:\n        return fibonacci_dp_iterative_dp_recursive(n-2) + fibonacci_dp_iterative_dp_recursive(n-1)\ndef fibonacci_dp_iterative_dp_recursive_dp(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_iterative_dp_recursive_dp(n-1)\n    else:\n        return fibonacci_dp_iterative_dp_recursive_dp(n-2) + fibonacci_dp_iterative_dp_recursive_dp(n-1)\ndef fibonacci_dp_dp_dp(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_dp_dp(n-1)\n    else:\n        return fibonacci_dp_dp_dp(n-2) + fibonacci_dp_dp_dp(n-1)\ndef fibonacci_dp_dp_dp_recursive(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_dp_dp_recursive(n-1)\n    else:\n        return fibonacci_dp_dp_dp_recursive(n-2) + fibonacci_dp_dp_dp_recursive(n-1)\ndef fibonacci_dp_dp_dp_recursive_dp(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_dp_dp_recursive_dp(n-1)\n    else:\n        return fibonacci_dp_dp_dp_recursive_dp(n-2) + fibonacci_dp_dp_dp_recursive_dp(n-1)\ndef fibonacci_dp_dp_dp_recursive_dp_dp(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_dp_dp_recursive_dp_dp(n-1)\n    else:\n        return fibonacci_dp_dp_dp_recursive_dp_dp(n-2) + fibonacci_dp_dp_dp_dp_recursive_dp_dp(n-1)\ndef fibonacci_dp_dp_dp_recursive_dp_dp_dp(n):\n    '''\n    Return the fibonacci numbers of a given\n    input number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return fibonacci_dp_dp_dp_recursive_dp_dp_dp(n-1)\n    else:\n        return fibonacci_dp_dp_dp_recursive_dp_dp_dp(n-2) + fibonacci_dp_dp_dp_dp_recursive_dp_dp(n-1)\ndef fibonacci_dp_dp_dp_dp_dp_dp_dp(n):\n    '''\n    Return th"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # n is always a positive integer\n    # for every i in range from 1 to n\n    # return the i^th catalan number\n    return pow(1, (n-1)) * pow(i, n)"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def is_nth_catalan(n):\n        '''\n        Check whether a nth Catalan number is exist in the range [0, n)\n        '''\n        if n >= 0:\n            n = abs(n)\n            if n < 2 or n % 2 == 0 or n == 1:\n                return False\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 4\n    if num == 3:\n        return 6\n    if num == 4:\n        return 8\n    if num == 5:\n        return 9\n    if num == 6:\n        return 10\n    if num == 7:\n        return 11\n    if num == 8:\n        return 12\n    if num == 9:\n        return 14\n    if num == 10:\n        return 16\n    if num == 11:\n        return 17\n    if num == 12:\n        return 19\n    if num == 13:\n        return 22\n    if num == 14:\n        return 23\n    if num == 15:\n        return 24\n    if num == 16:\n        return 25\n    if num == 17:\n        return 26\n    if num == 18:\n        return 27\n    if num == 19:\n        return 28\n    if num == 20:\n        return 29\n    if num == 21:\n        return 30\n    if num == 22:\n        return 31\n    if num == 23:\n        return 32\n    if num == 24:\n        return 33\n    if num == 25:\n        return 34\n    if num == 26:\n        return 35\n    if num == 27:\n        return 36\n    if num == 28:\n        return 37\n    if num == 29:\n        return 38\n    if num == 30:\n        return 39\n    if num == 31:\n        return 40\n    if num == 32:\n        return 41\n    if num == 33:\n        return 42\n    if num == 34:\n        return 43\n    if num == 35:\n        return 44\n    if num == 36:\n        return 45\n    if num == 37:\n        return 46\n    if num == 38:\n        return 47\n    if num == 39:\n        return 48\n    if num == 40:\n        return 49\n    if num == 41:\n        return 50\n    if num == 42:\n        return 51\n    if num == 43:\n        return 52\n    if num == 44:\n        return 53\n    if num == 45:\n        return 54\n    if num == 46:\n        return 55\n    if num == 47:\n        return 56\n    if num == 48:\n        return 57\n    if num == 49:\n        return 58\n    if num == 50:\n        return 59\n    if num == 51:\n        return 60\n    if num == 52:\n        return 61\n    if num == 53:\n        return 62\n    if num == 54:\n        return 63\n    if num == 55:\n        return 64\n    if num == 56:\n        return 65\n    if num == 57:\n        return 66\n    if num == 58:\n        return 67\n    if num == 59:\n        return 68\n    if num == 60:\n        return 69\n    if num == 61:\n        return 70\n    if num == 62:\n        return 71\n    if num == 63:\n        return 72\n    if num == 64:\n        return 73\n    if num == 65:\n        return 74\n    if num == 66:\n        return 75\n    if num == 67:\n        return 76\n    if num == 68:\n        return 77\n    if num == 69:\n        return 78\n    if num == 70:\n        return 79\n    if num == 71:\n        return 80\n    if num == 72:\n        return 81\n    if num == 73:\n        return 82\n    if num == 74:\n        return 83\n    if num == 75:\n        return 84\n    if num == 76:\n        return 85\n    if num == 77:\n        return 86\n    if num == 78:\n        return 87\n    if num == 79:\n        return 88\n    if num == 80:\n        return 89\n    if num == 81:\n        return 90\n    if num == 82:\n        return 91\n    if num == 83:\n        return 92\n    if num == 84:\n        return 93\n    if num == 85:\n        return 94\n    if num == 86:\n        return 95\n    if num == 87:\n        return 96\n    if num == 88:\n        return 97\n    if num == 89:\n        return 98\n    if num == 90:\n        return 99\n    if num == 91:\n        return 100\n    if num == 92:\n        return 101\n    if num == 93:\n        return 102\n    if num == 94:\n        return 103\n    if num == 95:\n        return 104\n    if num == 96:\n        return 105\n    if num == 97:\n        return 106\n    if num == 98:\n        return 107\n    if num == 99:\n        return 108\n    if num == 100:\n        return 109\n    if num == 101:\n        return 110\n    if num == 102:\n        return 111\n    if num == 103:\n        return 112\n    if num == 104:\n        return 113\n    if num == 105:\n        return 114\n    if num == 106:\n        return 115\n    if num == 107:\n        return 116\n    if num == 108:\n        return 117\n    if num == 109:\n        return 118\n    if num == 110:\n        return 119\n    if num == 111:\n        return 120\n    if num == 112:\n        return 121\n    if num == 113:\n        return 122\n    if num == 114:\n        return 123\n    if num == 115:\n        return 124\n    if num == 116:\n        return 125\n    if num == 117:\n        return 126\n    if num == 118:\n        return 127\n    if num == 119:\n        return 128\n    if num == 120:\n        return 129\n    if num == 121:\n        return 130\n    if num == 122:\n        return 131\n    if num == 123:\n        return 132\n    if num == 124:\n        return 133\n    if num == 125:\n        return 134\n    if num == 126:\n        return 135\n    if num == 127:\n        return 136\n    if num == 128:\n        return 137\n    if num == 129:\n        return 138\n    if num == 130:\n        return 139\n    if num == 131:\n        return 140\n    if num == 132:\n        return 141\n    if num == 133:\n        return 142\n    if num == 134:\n        return 143\n    if num == 135:\n        return 144\n    if num == 136:\n        return 145\n    if num == 137:\n        return 146\n    if num == 138:\n        return 147\n    if num == 139:\n        return 148\n    if num == 140:\n        return 149\n    if num == 141:\n        return 150\n    if num == 142:\n        return 151\n    if num == 143:\n        return 152\n    if num == 144:\n        return 153\n    if num == 145:\n        return 154\n    if num == 146:\n        return 155\n    if num == 147:\n        return 156\n    if num == 148:\n        return 157\n    if num == 149:\n        return 158\n    if num == 150:\n        return 159\n    if num == 151:\n        return 160\n    if num == 152:\n        return 161\n    if num == 153:\n        return 162\n    if num == 154:\n        return 163\n    if num == 155:\n        return 164\n    if num == 156:\n        return 165\n    if num == 157:\n        return 166\n    if num == 158:\n        return 167\n    if num == 159:\n        return 168\n    if num == 160:\n        return 169\n    if num == 161:\n        return 170\n    if num == 162:\n        return 171\n    if num == 163:\n        return 172\n    if num == 164:\n        return 173\n    if num == 165:\n        return 174\n    if num == 166:\n        return 175\n    if num == 167:\n        return 176\n    if num == 168:\n        return 177\n    if num == 169:\n        return 178\n    if num == 170:\n        return 179\n    if num == 171:\n        return 180\n    if num == 172:\n        return 181\n    if num == 173:\n        return 182\n    if num == 174:\n        return 183\n    if num == 175:\n        return 184\n    if num == 176:\n        return 185\n    if num == 177:\n        return 186\n    if num == 178:\n        return 187\n    if num == 179:\n        return 188\n    if num == 180:\n        return 189\n    if num == 181:\n        return 190\n    if num == 182:\n        return 191\n    if num == 18"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return (num-1) * catalan(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        print(\"Your number must be positive\")\n        return\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    nth = 0\n    while n < num:\n        n += 1\n        nth += n\n    return nth\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    m = re.findall(r'[ly|lya|lyable|lyabatically|lyablaze|lyablazely|lyablely|lyablazely|lyablely|lyabatically|lyablely|lyablazely|lyablely|lyablazely|lyablazely|lyablazely|lyablely|lyablazely|lyablely|lyablely|lyablazely|lyablely|lyablely|lyablazely|lyablely|lyablazely|lyablely|lyablazely|lyablely|lyablely|lyablazely|lyablely|lyablazely|lyablely|lyablely|lyablazely|lyablely|lyablely|lyablazely|lyablely|lyablely|lyablazely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablely|lyablel"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find first ly ending with ly\n    adverbs_ending_ly = []\n    adverbs_ending_ly_idx = []\n    ly_idx = 0\n    for i in range(len(text)):\n        if text[i] == 'ly':\n            if i+1 < len(text):\n                if text[i+1] == 'l' and text[i+2] == 'y':\n                    adverbs_ending_ly.append(text[ly_idx:i+1])\n                    ly_idx = i+1\n                    adverbs_ending_ly_idx.append(ly_idx)\n    return adverbs_ending_ly, adverbs_ending_ly_idx\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Base case\n    if text == \"\":\n        return []\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile('[ly]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('adverb:', text[match.span()[0]:match.span()[1]])\n        print('adverb ending with ly:', text[match.span()[1]:])\n    else:\n        print('adverb:', text)\n    \n    return None\n    \ndef find_adjective(text):\n    '''\n    Write a function to find the first adjective ending with lp and its positions in a given string.\n    '''\n    pattern = re.compile('[lp]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('adjective:', text[match.span()[0]:match.span()[1]])\n        print('adjective ending with lp:', text[match.span()[1]:])\n    else:\n        print('adjective:', text)\n    \n    return None\n    \ndef find_noun(text):\n    '''\n    Write a function to find the first noun ending with vp and its positions in a given string.\n    '''\n    pattern = re.compile('[vp]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('noun:', text[match.span()[0]:match.span()[1]])\n        print('noun ending with vp:', text[match.span()[1]:])\n    else:\n        print('noun:', text)\n    \n    return None\n    \ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with vn and its positions in a given string.\n    '''\n    pattern = re.compile('[vn]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('verb:', text[match.span()[0]:match.span()[1]])\n        print('verb ending with vn:', text[match.span()[1]:])\n    else:\n        print('verb:', text)\n    \n    return None\n    \ndef find_person(text):\n    '''\n    Write a function to find the first person ending with pn and its positions in a given string.\n    '''\n    pattern = re.compile('[pn]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('person:', text[match.span()[0]:match.span()[1]])\n        print('person ending with pn:', text[match.span()[1]:])\n    else:\n        print('person:', text)\n    \n    return None\n    \ndef find_date(text):\n    '''\n    Write a function to find the first date ending with dn and its positions in a given string.\n    '''\n    pattern = re.compile('[dn]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('date:', text[match.span()[0]:match.span()[1]])\n        print('date ending with dn:', text[match.span()[1]:])\n    else:\n        print('date:', text)\n    \n    return None\n    \ndef find_time(text):\n    '''\n    Write a function to find the first time ending with tt and its positions in a given string.\n    '''\n    pattern = re.compile('[tt]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('time:', text[match.span()[0]:match.span()[1]])\n        print('time ending with tt:', text[match.span()[1]:])\n    else:\n        print('time:', text)\n    \n    return None\n    \ndef find_time_zone(text):\n    '''\n    Write a function to find the first time ending with tz and its positions in a given string.\n    '''\n    pattern = re.compile('[tz]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('time zone:', text[match.span()[0]:match.span()[1]])\n        print('time ending with tz:', text[match.span()[1]:])\n    else:\n        print('time zone:', text)\n    \n    return None\n    \ndef find_time_of_day(text):\n    '''\n    Write a function to find the first time ending with tt and its positions in a given string.\n    '''\n    pattern = re.compile('[tt]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('time of day:', text[match.span()[0]:match.span()[1]])\n        print('time ending with tt:', text[match.span()[1]:])\n    else:\n        print('time of day:', text)\n    \n    return None\n    \ndef find_time_of_day_time_zone(text):\n    '''\n    Write a function to find the first time ending with tt and its positions in a given string.\n    '''\n    pattern = re.compile('[tt]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('time of day time zone:', text[match.span()[0]:match.span()[1]])\n        print('time ending with tt:', text[match.span()[1]:])\n    else:\n        print('time of day time zone:', text)\n    \n    return None\n    \ndef find_time_of_day_of_month(text):\n    '''\n    Write a function to find the first time ending with tt and its positions in a given string.\n    '''\n    pattern = re.compile('[tt]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('time of day of month:', text[match.span()[0]:match.span()[1]])\n        print('time ending with tt:', text[match.span()[1]:])\n    else:\n        print('time of day of month:', text)\n    \n    return None\n    \ndef find_time_of_day_of_year(text):\n    '''\n    Write a function to find the first time ending with tt and its positions in a given string.\n    '''\n    pattern = re.compile('[tt]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('time of day of year:', text[match.span()[0]:match.span()[1]])\n        print('time ending with tt:', text[match.span()[1]:])\n    else:\n        print('time of day of year:', text)\n    \n    return None\n    \ndef find_time_of_day_of_week(text):\n    '''\n    Write a function to find the first time ending with tt and its positions in a given string.\n    '''\n    pattern = re.compile('[tt]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('time of day of week:', text[match.span()[0]:match.span()[1]])\n        print('time ending with tt:', text[match.span()[1]:])\n    else:\n        print('time of day of week:', text)\n    \n    return None\n    \ndef find_time_of_day_of_day(text):\n    '''\n    Write a function to find the first time ending with tt and its positions in a given string.\n    '''\n    pattern = re.compile('[tt]')\n    match = pattern.search(text)\n    if match:\n        print(match.span())\n        print('time of day of day:', text[match.span()[0]:match.span()[1]])\n        print('time ending with tt:', text[match.span()[1]:])\n    els"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text)-1):\n        if (text[i] == \"ly\" and text[i+1] == \"ing\"):\n            result.append([i,i+2])\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ads = ['noun','verb']\n    for ad in ads:\n        if ad in text:\n            for i, s in enumerate(text):\n                if 'ly' in s and text[i+1] == 'n':\n                    start = i\n                    break\n            else:\n                continue\n            for i, s in enumerate(text):\n                if 'ly' in s and text[i+1] == 'v':\n                    end = i\n                    break\n            else:\n                continue\n            if end < start:\n                start, end = end, start\n            \n            if (text[end:].find('ly')!= -1) and (text[start+2].find('ly')!= -1):\n                return text[start:end]\n            elif text[start:].find('ly')!= -1:\n                return text[start:start]\n    return None\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #\n    # TODO: replace \"adverbs\" with \"labels\"\n    #\n    positions = []\n    words = text.split()\n    for word in words:\n        if word.endswith('ly') and word[:-3] in words:\n            positions.append(word[-2:].lower() + '.')\n            break\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Remove special characters\n    text = re.sub(r\"[^A-Za-z0-9_\\s]\", \"\", text)\n    # Remove punctuation\n    text = text.replace('\\n', '')\n    # remove duplicate spaces\n    text = re.sub(' +','', text)\n    # Remove consecutive spaces\n    text = re.sub(' +','', text)\n    # remove special characters\n    text = re.sub('[^A-Za-z0-9_\\s]', \"\", text)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    return_string = ''\n    try:\n        for i,w in enumerate(text):\n            if w == 'ly' and i > 0 and i<len(text)-1 and text[i-1] == 'ly':\n                return_string += text[i+1] + text[i-1]\n                for j,w in enumerate(text[i+1:]):\n                    if w == 'ly' and j > 0 and j < len(text)-1 and text[j-1] == 'ly':\n                        return_string += text[j+1] + text[j-1]\n        return return_string\n    except Exception:\n        return \"Error: Invalid text\"\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = re.sub(r'\\([^)]*ly$', '', text)\n    adverbs = re.findall(r\"(\\w[a-z])?ly$\", text)\n    i = 0\n    while i < len(adverbs):\n        if adverbs[i] == 'ly':\n            if 'ly' in text[i:]:\n                text = text[:i] + text[i:][:adverbs[i]] + 'ly'\n                i += 2\n        i += 1\n    return text\n    \n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[1])\n    for i in range(n):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    max_heap = []\n    for item in items:\n        item.sort()\n        heapq.heappush(heap,(item[2],item[0],item[1]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n        if len(heap) > 0:\n            heapq.heappush(max_heap,(heapq.heappop(heap)[2],heapq.heappop(heap)[0],heapq.heappop(heap)[1]))\n    return [i[1] for i in max_heap[-n:]][::-1]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # find the k-th smallest item in the dataset\n    heapq.heapify(items)\n    heapq.nlargest(n,items)\n    return heapq.nlargest(n,items)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_heap = []\n    for i in range(0,n):\n        item = items[i]\n        heapq.heappush(max_heap,item)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_list = []\n    for item in items:\n        if item[1] not in item_list:\n            item_list.append(item[1])\n    print(item_list)\n    heap = [0]\n    heapq.heapify(heap)\n    i = 0\n    for item in heapq.nlargest(n,item_list):\n        if item > 0:\n            heapq.heappush(heap, (heap[-1] + item, i))\n            i += 1\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0: return []\n    if n==1: return items\n    \n    index = (n-1)/2\n    left = expensive_items(items, index)\n    right = expensive_items(items, n-index-1)\n    return left + right\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(len(items)):\n        heapq.heappush(heap,items[i][n])\n        print(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(n):\n        heapq.heappushpop(items,heapq.heappop(items))\n    heapq.heapify(items)\n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    print(items)\n    print(n)\n    item_heap = []\n    item_heap_size = []\n    for item in items:\n        heapq.heappush(item_heap,(item[1],item[0]))\n        item_heap_size.append(len(item_heap))\n    print(item_heap_size)\n    item_heap_size.sort(reverse=True)\n    print(item_heap_size)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    p = []\n    for i in range(n):\n        p.append((heapq.heappop(items[i]),i))\n    \n    heapq.heapify(p)\n    return[(i[0], i[1]) for i in heapq.nlargest(n, p)]\n    \ndef top_expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items[i])\n    return [heapq.heappop(heap) for i in range(n)]\ndef expensive_items_2(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    s = []\n    for i in range(n):\n        s.append((heapq.heappop(items[i]),i))\n    return s\n    \ndef top_expensive_items_2(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    s = []\n    for i in range(n):\n        s.append((heapq.heappop(items[i]), i))\n    return [sorted(s,reverse=True)[0][1]]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        raise ValueError('Less than n elements!')\n    \n    if len(l) == 1:\n        return l\n    \n    k = len(l) // n + 1\n    return l[:k] + split_Arr(l[k:], n)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = [l[i:i+n] for i in range(0,len(l),n)]\n    return new_list\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return []\n    else:\n        if len(l) <= n:\n            return l\n        else:\n            return l[:n] + split_Arr(l[n:], n-1)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l.copy()\n    return l[:n] + [l[n]] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n    \n    \n    \n    "
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    result = ()\n    for i in listx:\n        result = result + (i,)\n    return result\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Write your code here.\n    if len(listx) == 0:\n        return ()\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if listx == []:\n        return None\n    else:\n        return (tuple(listx))\n    #return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = ()\n    for i in listx:\n        tuplex += (i,)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_list = []\n    for item in listx:\n        new_list.append(item)\n    return tuple(new_list)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple = ()\n    for el in listx:\n        tuple += (el,)\n    return tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return [max_val - min_val, max_val, min_val]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #find smallest value\n    smallest = nums[0]\n    smallest_idx = 0\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n            smallest_idx = i\n    \n    #find largest value\n    largest = nums[0]\n    largest_idx = 0\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n            largest_idx = i\n    \n    diff = abs(smallest - largest)\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    maximum = max(nums)\n    minimum = min(nums)\n    return maximum - minimum\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for x in nums:\n        if largest > x:\n            largest = x\n        if smallest < x:\n            smallest = x\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest_diff = nums[0] - nums[-1]\n    smallest_diff = nums[0] - nums[0]\n    for i in range(len(nums)):\n        if nums[i] < nums[i-1]:\n            smallest_diff = nums[i] - smallest_diff\n        if nums[i] > nums[i-1]:\n            largest_diff = nums[i] - largest_diff\n    return largest_diff, smallest_diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    small = nums[0]\n    big = nums[0]\n    small_index = 0\n    big_index = 0\n    for i in range(len(nums)):\n        if nums[i] < small:\n            small = nums[i]\n            small_index = i\n        if nums[i] > big:\n            big = nums[i]\n            big_index = i\n    return [small - small_index, big - big_index]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    # Write your code here.\n    \n    nums = sorted(nums)\n    for i in range(len(nums)-1):\n        if nums[i] - nums[i+1] > 1:\n            return nums[i+1] - nums[i]\n    return nums[len(nums)-1] - nums[0]\n    \nprint(big_diff([1, 2, 3, 4]))"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize the largest and smallest values\n    largest_val = max(nums)\n    smallest_val = min(nums)\n    # Find the difference\n    diff = abs(largest_val - smallest_val)\n    # Check if difference is greater than 10\n    if diff > 10:\n        return 'error'\n    # Return difference\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_n = max(nums)\n    min_n = min(nums)\n    return max_n - min_n\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)==0:\n        return None\n    elif len(nums)==1:\n        return nums[0]\n    elif len(nums)==2:\n        return max(nums) - min(nums)\n    else:\n        smallest=min(nums)\n        largest=max(nums)\n        for num in nums:\n            if num<smallest:\n                smallest=num\n            if num>largest:\n                largest=num\n        return largest-smallest"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b==0:\n        return [a]\n    if b<0:\n        a=a**(-1)\n        b=b**(-1)\n    res=[]\n    for i in range(a,b+1):\n        if not is_perfect_square(i) and i%2==1:\n            res.append(i)\n    return res\ndef is_perfect_square(n):\n    i=1\n    while True:\n        if n%i==0:\n            if n//i==i:\n                return False\n            else:\n                return True\n        i+=1\n        if i==8:\n            return True\ndef is_perfect_square_c(n):\n    return n==int(n**0.5)\ndef is_perfect_square_v(n):\n    return n==(int(n**0.5)+1)**2\ndef solve(a,b):\n    if b==0:\n        return [a]\n    if b<0:\n        b=b**(-1)\n        a=a**(-1)\n    res=[]\n    for i in range(a,b+1):\n        if not is_perfect_square_v(i) and i%2==1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    s = set()\n    for i in range(int(math.sqrt(a))+1):\n        for j in range(int(math.sqrt(b))+1):\n            if (i**2 + j**2) == b:\n                s.add(i**2+j**2)\n    return s\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a >= b):\n        return (a, b)\n    elif (a < 0 or b < 0):\n        return\n    elif (a < 0 or b == 0):\n        return\n    elif (a == b):\n        return\n    else:\n        a, b = b, a\n    while (a % 2 == 0):\n        a = a // 2\n        a = a + 1\n    while (b % 2 == 0):\n        b = b // 2\n        b = b + 1\n    if (a == b):\n        return\n    return (a, b)"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        a, b = b, a\n    return a**2 + b**2 <= b**2\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0:\n        print('Please Enter a Positive Number.')\n        a = int(input())\n    if b < 0:\n        print('Please Enter a Positive Number.')\n        b = int(input())\n    if a == b:\n        return True\n    elif a!= b:\n        if abs(a-b) % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return 0\n    if a == b:\n        return 0\n    if abs(a) > abs(b):\n        return perfect_squares(b, a % b)\n    # if a > b:\n    #     return perfect_squares(b, a % b)\n    return perfect_squares(a, b - a % b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        if a ** 2 + b ** 2 == i ** 2:\n            return i\n    \n    return None\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a>b:\n        a, b = b, a\n    x = (a+b)//2\n    #n = 0\n    #sum = 0\n    #for i in range(1,x+1):\n    #    if x%i==0:\n    #        n += 1\n    #if n==x:\n    #    return True\n    for i in range(1,x+1):\n        if (x%i)==0:\n            #sum += i\n            if x%i==0 and i%2==1:\n                return True\n    return False\ndef prime_factors(a):\n    '''\n    Write a function to find the number of prime factors of a number.\n    '''\n    factors = []\n    for i in range(2,a+1):\n        if a%i==0:\n            factors.append(i)\n    return factors\ndef factor(a):\n    '''\n    Return the factors of a number.\n    '''\n    factors = []\n    i = 2\n    while(a%i)==0:\n        i+=1\n        if i>10:\n            break\n    for j in range(2,i+1):\n        if a%j==0:\n            factors.append(j)\n    return factors\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    for i in range(a, b+1):\n        if a*a + i*i <= b*b:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #print(a,b)\n    for i in range(a,b+1):\n        #print(i,end=\" \")\n        if i == 0 or i == 1:\n            pass\n        elif i % 2 == 0:\n            #print(i,end=\" \")\n            if i**2 == i**2 + 1:\n                pass\n            else:\n                pass\n        elif i % 2 == 1:\n            if i**2 == i**2 - 1:\n                pass\n            else:\n                pass\n    return \"Perfect number!\"\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return int(x),int(y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    r = abs(complex(x,y))\n    theta = cmath.phase(complex(x,y))\n    return(r,theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect5(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect6(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect7(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect9(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect10(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect11(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect12(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect13(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect14(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect15(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect16(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect17(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect18(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect19(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect20(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect21(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect22(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect23(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect24(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect25(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect26(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect27(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect28(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect29(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*cmath.pi\n    y = y*cmath.pi\n    return cmath.rect(x,y)\ndef polar_rect_vect30(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = "
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x == 0 and y == 0:\n        return (0,0)\n    elif x == 0 and y!= 0:\n        return (y,0)\n    elif x!= 0 and y == 0:\n        return (0,y)\n    elif x!= 0 and y!= 0:\n        return (x,y)\n    elif x == 0 and y!= 0:\n        return (y,y)\n    elif x!= 0 and y!= 0:\n        return (x,y)\n    elif x!= 0 and y == 0:\n        return (x,y)\n    else:\n        return (x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_0 = polar_rect(x,0)\n    y_0 = polar_rect(0,y)\n    x_1 = polar_rect(0,y)\n    y_1 = polar_rect(x,0)\n    return(x_0,y_0,x_1,y_1)\ndef polar_to_rect(x_0,y_0,x_1,y_1):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x_0 == x_1 == y_0 == y_1:\n        return(x_0,y_0,x_1,y_1)\n    elif x_0 == 0:\n        return(y_0,x_1,y_1,x_1)\n    elif y_0 == 0:\n        return(x_0,y_1,x_1,y_1)\n    elif x_0 == x_1 == 0:\n        return(x_0,y_0,x_1,y_1)\n    elif y_0 == y_1 == 0:\n        return(x_0,y_1,x_1,y_1)\n    elif x_0 == 0 and x_1 == 0:\n        return(x_0,y_1,x_1,y_1)\n    elif x_0 == 0:\n        return(y_0,x_1,y_1,x_1)\n    elif y_0 == 0:\n        return(x_0,y_1,x_1,y_1)\n    elif x_0 == x_1 == 0:\n        return(x_0,y_0,x_1,y_1)\n    elif y_0 == y_1 == 0:\n        return(x_0,y_1,x_1,y_1)\n    else:\n        return(x_0,y_0,x_1,y_1)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_0 = polar_rect(x,0)\n    y_0 = polar_rect(0,y)\n    x_1 = polar_rect(0,y)\n    y_1 = polar_rect(x,0)\n    return(x_0,y_0,x_1,y_1)\ndef polar_to_rect(x_0,y_0,x_1,y_1):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x_0 == x_1 == y_0 == y_1:\n        return(x_0,y_0,x_1,y_1)\n    elif x_0 == 0:\n        return(y_0,x_1,y_1,x_1)\n    elif y_0 == 0:\n        return(x_0,y_1,x_1,y_1)\n    elif x_0 == x_1 == 0:\n        return(x_0,y_0,x_1,y_1)\n    elif y_0 == y_1 == 0:\n        return(x_0,y_1,x_1,y_1)\n    elif x_0 == 0 and x_1 == 0:\n        return(x_0,y_1,x_1,y_1)\n    elif x_0 == 0:\n        return(y_0,x_1,y_1,x_1)\n    elif y_0 == 0:\n        return(x_0,y_1,x_1,y_1)\n    elif x_0 == x_1 == 0:\n        return(x_0,y_0,x_1,y_1)\n    elif y_0 == y_1 == 0:\n        return(x_0,y_1,x_1,y_1)\n    else:\n        return(x_0,y_0,x_1,y_1)\ndef angle_to_rad(theta):\n    '''\n    Write a function to convert angle to radius.\n    '''\n    theta_0 = cmath.phase(theta)\n    return (2*cmath.pi*theta_0)\ndef rad_to_angle(r):\n    '''\n    Write a function to convert radius to angle.\n    '''\n    theta_0 = cmath.phase(r)\n    return (2*cmath.pi*theta_0)\ndef math_to_angle(theta,r):\n    '''\n    Write a function to convert angular coordinates to angle.\n    '''\n    if theta == 0:\n        return(0)\n    else:\n        # return theta\n        theta_0 = rad_to_angle(r)\n        theta_1 = rad_to_angle(1)\n        return (theta_1 + (theta_0*theta))\ndef angle_to_math(theta):\n    '''\n    Write a function to convert angle to angular coordinates.\n    '''\n    if theta == 0:\n        return(0)\n    else:\n        theta_0 = rad_to_angle(theta)\n        theta_1 = rad_to_angle(1)\n        return (theta_1 + (theta_0*theta))\ndef math_to_angle(theta,r):\n    '''\n    Write a function to convert angular coordinates to angle.\n    '''\n    if theta == 0:\n        return(0)\n    else:\n        theta_0 = rad_to_angle(theta)\n        theta_1 = rad_to_angle(1)\n        return (theta_1 + (theta_0*theta))\ndef _angular_coefficients(x, y, r):\n    '''\n    Write a function to calculate the angular coefficients.\n    '''\n    x_0, y_0, x_1, y_1 = rect_to_polar(x,y)\n    a = (math_to_angle(math_to_angle(x_0,x_1),r)-math_to_angle(math_to_angle(x_0,y_0),r))\n    b = (math_to_angle(math_to_angle(x_1,x_1),r)-math_to_angle(math_to_angle(x_1,y_1),r))\n    c = (math_to_angle(math_to_angle(y_0,y_1),r)-math_to_angle(math_to_angle(y_0,y_0),r))\n    return (a,b,c)\ndef _calc_angular_coefficients(x, y, r):\n    '''\n    Write a function to calculate the angular coefficients.\n    '''\n    if _angular_coefficients(x, y, r) == _angular_coefficients(x, y, r):\n        return (0)\n    else:\n        a,b,c = _angular_coefficients(x, y, r)\n        return (a,b,c)\ndef _intersect_rect_rect(r1,r2):\n    '''\n    Return the intersection of two rectangles.\n    '''\n    if r1[0] > r2[0] and r1[1] > r2[1]:\n        return r1\n    elif r2[0] > r1[0] and r2[1] > r1[1]:\n        return r"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    p = cmath.polar(cmath.atan2(y,x))\n    return p\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rect_theta(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rect_phi(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef pol_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rect_theta(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rect_phi(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rec_phi(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rec_theta(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rec_phi(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rec_theta_phi(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rec_phi_phi(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rec_theta_phi(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return 0,0\n    else:\n        if x>0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y>0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x<0 and y<0:\n            return x,y\n        elif x>0 and y<0:\n            return x,y\n    return 0,0\ndef polar_rec_phi_theta(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # formula for polar coordinates:\n    # pi = 3.141592653589793\n    # r = sqrt(x**2 + y**2)\n    # cos(theta) = x/r\n    # sin(theta) = y/r\n    # return [[cos(theta), -sin(theta)], [sin(theta), cos(theta)]]\n    a = x/cmath.sqrt(y)\n    b = y/cmath.sqrt(y)\n    if abs(a) < 1e-16 or abs(b) < 1e-16:\n        raise ValueError('x and y must be positive')\n    if a == 0:\n        raise ValueError('x cannot be zero')\n    return [[cmath.sqrt(a**2 - b**2), -cmath.sqrt(a**2 - b**2)], [-cmath.sqrt(a**2 - b**2), cmath.sqrt(a**2 - b**2)]]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    ra = x*2*math.pi\n    dec = y*2*math.pi\n    r = math.sqrt((x**2)+y**2)\n    phi = math.atan2(y,x)\n    return ra, dec, r, phi\ndef polar_to_rect(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return x, y\ndef polar_rect_to_poly(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_rect_to_circle(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle_to_poly(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle_to_poly_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_rect_to_circle(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_rect_to_circle_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle_to_rect(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly_rot_to_circle(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly_rot_to_circle_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle_rot_to_poly(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle_rot_to_poly_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle_rot_to_poly_rot_to_circle(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly_to_circle(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly_to_circle_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly_rot_to_circle_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle_rot_to_poly(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_circle_rot_to_poly_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly_rot_to_circle_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly_rot_to_circle_rot_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(phi)\n    y = r*math.sin(phi)\n    return [ra, dec, x, y]\ndef polar_to_poly_rot_to_circle_rot_rot(ra, dec, r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*math.cos(ph"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/math.pi*2*math.pi\n    y=y/math.pi*2*math.pi\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = hypot(x,y)\n    theta = 2 * cmath.asin(r/2.0)\n    return r * cos(theta), r * sin(theta)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList)\n    newList.reverse()\n    newList.append(newList.pop(0))\n    newList.insert(0,newList.pop())\n    newList.reverse()\n    print(newList)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # newList = list(newList) \n    # newList = newList[0:len(newList)-1] + newList[len(newList)-1:] \n    newList = newList[::-1] \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList[0], newList[-1] = newList[-1], newList[0] \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    old_list = newList[0:len(newList)-1]\n    new_list = newList[len(newList)-1:len(newList)]\n    new_list.extend(old_list)\n    return new_list\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = []\n    for i in range(len(newList)): \n        new_list.append(newList[i]) \n        new_list.append(newList[len(newList) - i - 1]) \n    return new_list \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList = newList[::-1]\n    print(newList)\n    return newList\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # your code goes here\n    newList.reverse()\n    newList.append(newList.pop())\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(0,len(newList)-1):\n        newList[i],newList[len(newList)-1-i] = newList[len(newList)-1-i],newList[i]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    newList = newList[:len(newList)//2] + newList[len(newList)//2:]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    # loop through from 2 to n\n    for i in range(2,n+1):\n        # calculate the sum of the co-efficients\n        sum = sum + binomial_coeff(i,k) * sum\n    # return the result\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #if n is less than k\n    if n < k: \n        #return 0\n        return 0\n    #if n is equal to k\n    elif n == k:\n        #return 1\n        return 1\n    #if n is equal to 1\n    elif n == 1:\n        #return 0\n        return 0\n    #if n is greater than 1\n    elif n > 1:\n        #return -1\n        return -1\n    else:\n        print('No binomial coefficients found')\n        return -1\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0 or n==0: \n        return 0\n    else: \n        return (n*binomial_Coeff(n-1,k-1))%(2*10**9+7)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    n_coeff = n*(n-1)\n    s = 0\n    for i in range(k):\n        s += n_coeff*binomial_Coeff(n-1,i)\n    return s\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff_2(n,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return binomial_Coeff(n,k-1)*binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return 1/((n+1)**(k+1)) * math.factorial(n+k+1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    n = n+1\n    coeffs = [1]\n    for i in range(1,n+1):\n        coeffs.append((coeffs[i-1]*(i-1)*k) %n)\n    return sum(coeffs)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k): \n        sum += n**i * (n-1)**(k-i-1)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int(binomialCoeff(n,k,0,0,0,0,0,0,0,0))\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ret = ''\n    for i in range(len(ip)):\n        if ip[i] == '0':\n            ret += ip[i]\n        else:\n            ret += ip[i]\n    return ret\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = []\n    while ip!= '':\n        ip_list.append(ip[0])\n        ip = ip[1:]\n    ip_list = list(set(ip_list))\n    return ''.join(ip_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_ip = 0\n    while len(ip) > 0 and ip[0] == '0':\n        zero_ip += 1\n        ip = ip[1:]\n    return ip + str(zero_ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace('0','')\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # your code goes here\n    str_ip = ip.split('.')\n    zeroes = 0\n    for i in range(len(str_ip)):\n        if i!= 0 and int(str_ip[i]) == 0:\n            zeroes += 1\n            str_ip[i] = '0'*zeroes\n    return '.'.join(str_ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes\n    zeros = 0\n    while zeros == 0:\n        if ip[0]!= '0':\n            return 'Error:'+ ip +'is not a valid ip address'\n        else:\n            zeros = ip[1:]\n    # remove leading zeros\n    ip = ip[:zeros]\n    # remove leading zeros\n    ip = ip.lstrip('0')\n    # remove leading zeros\n    ip = ip.rstrip('0')\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes\n    ip = ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.search(r\"^\\d+\\.\\d+\\.\\d+\\.\\d+$\", ip):\n        print(\"Invalid ip: \" + ip)\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # regex\n    regex = r'\\b(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'\n    # validations\n    if not re.match(regex, ip):\n        raise ValueError(\"Invalid IP address\")\n    # actual code\n    ip = ip.split(\".\")\n    for i in range(len(ip)):\n        ip[i] = int(ip[i])\n    # return\n    return ip[0:3]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a = ip.split('.')\n    c = a[-1]\n    if len(c) > 1:\n        a[-1] = int(c)\n        a.pop()\n    else:\n        a = a\n    return '.'.join(a)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd=0\n    even=0\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even+=list1[i]\n        else:\n            odd+=list1[i]\n    if odd==even:\n        return even\n    else:\n        return odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)==0:\n        return None\n    if len(list1)==1:\n        return list1[0]\n    else:\n        if list1[0]==list1[1]:\n            return list1[0]\n        else:\n            if list1[0]%2==0:\n                return list1[0]\n            else:\n                return list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        print(\"the list has odd numbers\")\n    else:\n        print(\"the list has even numbers\")\n    diff = list1[0] - list1[1]\n    return diff\n    \n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    if even > odd:\n        diff = even - odd\n    elif even < odd:\n        diff = odd - even\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    len_of_list = len(list1)\n    odd_len = len_of_list - 1\n    even_len = len_of_list // 2\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_diff_even_odd=[]\n    for i in range(len(list1)):\n        if i%2==0:\n            list_diff_even_odd.append(list1[i])\n        else:\n            list_diff_even_odd.append(list1[i]+list1[i+1])\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # your code goes here\n    for num in list1:\n        if num%2 == 0:\n            print(num)\n        else:\n            print(num, \"-\", end=\" \")\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = 0\n    even = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd=[]\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_odd.append(list1[i])\n        else:\n            continue\n    return (len(list1)-len(even_odd))\n        \ndef prime_number(n):\n    '''\n    Function to test if a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    # For loop to get the even and odd numbers of list\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    \n    return odd - even\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i,j=0,0\n    ans=0\n    length=len(str1)\n    for i in range(length):\n        if str1[i]==str2[j]:\n            ans+=1\n            j+=1\n        else:\n            if ans:\n                ans-=1\n            return ans\n    return ans+1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    '''\n    Assume that the string represents a binary number, 1 (one), 0 (zero)\n    Input: str1 = \"11100\", str2 = \"100\"\n    Output: 2\n    '''\n    # Solution 1:\n    # count = 0\n    # for i in range(len(str1)):\n    #     if str1[i]!= str2[i]:\n    #         count += 1\n    # return count\n    \n    # Solution 2:\n    # count = 0\n    # for i in range(len(str1)-1):\n    #     if str1[i]!= str2[i]:\n    #         if str1[i] == str2[i]:\n    #             count += 1\n    # return count\n    \n    # Solution 3:\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            str1[i] = str2[i]\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # if any of the list is empty, then return 0\n    if str1 == \"0\" or str2 == \"0\" : return 0\n    \n    # if strings are of length 1, then return 0\n    if len(str1) == 1 or len(str2) == 1: return 0\n    \n    # find the string length\n    l1 = len(str1)\n    l2 = len(str2)\n    \n    # find the minimum string length\n    if l1 > l2:\n        return min_Swaps(str2,str1)\n    else:\n        return min_Swaps(str1,str2) + min_Swaps(str2,str1)\n    \nif __name__ == '__main__' : \n    # generate a random binary string of the specified length\n    string = \"111010111000011101111110011111011100101000110111011001011111100101110101000101101110111101111\"\n    # convert string to binary\n    bin_str = bin(int(string, 2)).replace('0b', '')\n    # convert binary to string\n    bin_str = list(map(str, bin_str))\n    # print binary string\n    print(bin_str)\n    # print count of minimum swaps required\n    print(min_Swaps(bin_str, bin_str)"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1[0] == str2[0] and str1[-1]!= str2[-1]:\n        return 1\n    elif str1[0]!= str2[0]:\n        return 0\n    else:\n        difference = max(str2[::-1]) - min(str1[::-1])\n        if difference == 1:\n            return min_Swaps(str1[1:],str2[1:])\n        elif difference == -1:\n            return max_Swaps(str2[::-1])\n        else:\n            return min_Swaps(str1,str2[1:]) + 1\n        \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    max_swaps = 0\n    # if the string is empty or only has zeros\n    if len(str1) < len(str2):\n        str1,str2 = str2,str1\n        # if the string is longer than the other one\n        if len(str1) > len(str2):\n            # if the string is smaller than the other one\n            # do it now as if its not equal,\n            # we will need to change the string to just check for a zeros\n            for i in range(len(str1)):\n                if str1[i] == 0 and str2[i]!= 0:\n                    str2[i] = 0\n                    str2 = str2[:i] + str2[i+1:]\n            return str2\n    # if the string is longer than the other one\n    if len(str2) > len(str1):\n        str2 = str2[:len(str1)] + str2[len(str1):]\n        # if the string is shorter than the other one\n        # we will need to change the string to just check for a zeros\n        if len(str1) < len(str2):\n            for i in range(len(str2)):\n                if str1[i] == 0 and str2[i]!= 0:\n                    str1[i] = 0\n                    str1 = str1[:i] + str1[i+1:]\n        return str1\n    # if the string is shorter than the other one\n    if len(str1) < len(str2):\n        for i in range(len(str1)):\n            if str1[i] == 0 and str2[i]!= 0:\n                str2[i] = 0\n                str2 = str2[:i] + str2[i+1:]\n        return str2\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    if n == 1 : \n        if str1[0] == '1' and str2[0] == '1': \n            return 1\n        else: \n            return -1\n    elif n == 0 : \n        if str1[0] == '1' and str2[0] == '0': \n            return 1\n        else: \n            return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    \n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            pass\n        elif str1[i] == '1':\n            count += 1\n        elif str2[i] == '1':\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    num_of_swaps = 0\n    \n    if len(str1)!= len(str2):\n        return num_of_swaps\n    \n    str1_temp = str1[::-1]\n    str2_temp = str2[::-1]\n    \n    while str1_temp!= str2:\n        if str1_temp == \"1\" and str2_temp == \"0\":\n            num_of_swaps += 1\n            break\n        elif str1_temp == \"0\" and str2_temp == \"1\":\n            num_of_swaps += 1\n            break\n        elif str1_temp == \"1\" and str2_temp == \"1\":\n            num_of_swaps += 1\n            break\n        else:\n            return num_of_swaps\n            break\n    \n    return num_of_swaps\n    \nif __name__ == \"__main__\":\n    \n    str1 = \"10110011111110011111011\"\n    str2 = \"101100111111101111011111\"\n    \n    num_of_swaps = min_Swaps(str1,str2)\n    \n    print(num_of_swaps)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    str1 = str(int(str1,2))\n    str2 = str(int(str2,2))\n    if str1 < str2 : \n        str2 = '0' + str2\n    else : \n        str1 = '0' + str1\n    return bin(int(str1,2))[2:].count('1') + bin(int(str2,2)).count('1')\n    \n    \ndef main() : \n    '''\n    create an instance of class and print out the minimum number of swaps required to convert a binary number represented as a string to another.\n    '''\n    str1 = str(int(input(\"Enter a binary number represented as a string: \")))\n    str2 = str(int(input(\"Enter a binary number represented as a string: \")))\n    \n    print(\"Minimum number of swaps required to convert {} to {}: {}\".format(str1,str2,min_Swaps(str1,str2)))\n    \n    \nif __name__ == \"__main__\" : \n    main()"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #store the maximum number of swaps needed\n    MaxSwaps = 0\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = 0\n    for i in tuple_list:\n        s += sys.getsizeof(i)\n    return s\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n    \ndef int_tuple(tuple_list):\n    '''\n    Write a function to convert the given tuple to an integer.\n    '''\n    return tuple_list[0]\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_bytes = 0\n    for element in tuple_list:\n        total_bytes += len(element)\n    return total_bytes\ndef string_to_bytes(string):\n    '''\n    Write a function to convert a string to bytes.\n    '''\n    bytes_list = []\n    for char in string:\n        byte_obj = ord(char)\n        bytes_list.append(byte_obj)\n    return bytes_list\ndef bytes_to_string(bytes_list):\n    '''\n    Write a function to convert bytes to a string.\n    '''\n    string = ''\n    for element in bytes_list:\n        string += chr(element)\n    return string\ndef convert_array(array):\n    '''\n    Write a function that takes an array and returns the array after it has been changed.\n    '''\n    new_array = []\n    for element in array:\n        new_array.append(element)\n    return new_array\ndef convert_tuple(tuple):\n    '''\n    Write a function that takes a tuple and returns a tuple of the tuple.\n    '''\n    new_tuple = tuple\n    return new_tuple\ndef string_from_bytes(bytes_list):\n    '''\n    Write a function that takes a list of bytes and returns the string.\n    '''\n    string = ''\n    for element in bytes_list:\n        string += chr(element)\n    return string\ndef bytes_from_string(string):\n    '''\n    Write a function that takes a string and returns the bytes.\n    '''\n    bytes_list = []\n    for element in string:\n        bytes_list.append(ord(element))\n    return bytes_list\ndef string_from_bytes_array(bytes_list):\n    '''\n    Write a function that takes a list of bytes and returns the string.\n    '''\n    string = ''\n    for element in bytes_list:\n        string += chr(element)\n    return string\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list) * 8\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size = size + len(str(i))\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    i = 0\n    while i < len(tuple_list):\n        if len(str(tuple_list[i])) > 4:\n            tuple_list[i] = tuple_list[i][0:4]\n            tuple_list[i] += tuple_list[i][4:]\n            i -= 1\n        else:\n            i += 1\n    return(sum(map(int, tuple_list)))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if tuple_list is None:\n        return -1\n    else:\n        return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    n = 0\n    for i in range(0,len(tuple_list)):\n        n = n + sys.getsizeof(tuple_list[i])\n    return n\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += len(i)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left_idx, right_idx = 0, len(arr1)-1\n    while left_idx < right_idx:\n        mid_idx = left_idx + (right_idx - left_idx) // 2\n        if arr1[mid_idx] < arr2[k-1]:\n            left_idx = mid_idx + 1\n        else:\n            right_idx = mid_idx\n    return arr1[left_idx"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        small = arr1\n        large = arr2\n    else:\n        small = arr2\n        large = arr1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    print(arr1, arr2)\n    # First find the kth element from both arrays\n    temp_arr1 = arr1[0:k]\n    temp_arr2 = arr2[0:k]\n    print(temp_arr1, temp_arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Time: O(n + k)\n    # Space: O(n)\n    j = 0\n    i = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr1[i] if i < len(arr1) and j < len(arr2) else arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pivot = arr1[0]\n    q1 = 0\n    q2 = len(arr1) - 1\n    \n    while q1 < q2:\n        if arr1[q1] < pivot:\n            q1 += 1\n        elif arr1[q1] > pivot:\n            q2 -= 1\n        else:\n            arr1[q1], arr1[q2] = arr1[q2], arr1[q1]\n            q1 += 1\n            q2 -= 1\n    \n    if k <= q1 or k >= q2:\n        return arr1[q1]\n    else:\n        return arr1[q2]\n    \n    \ndef merge_k_groups(arr1, arr2, k):\n    '''\n    Write a function that merges k-groups of arr1 and arr2 into one sorted array.\n    '''\n    \n    if k == 1:\n        return arr1 + arr2\n    \n    output_arr = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            output_arr.append(arr1[i])\n            i += 1\n        else:\n            output_arr.append(arr2[j])\n            j += 1\n    \n    if i < len(arr1):\n        output_arr += arr1[i:]\n    else:\n        output_arr += arr2[j:]\n    \n    if j < len(arr2):\n        output_arr += arr2[j:]\n    \n    return output_arr\n    \ndef main():\n    print(\"Merge k groups\")\n    print(\"Enter number of groups:\")\n    n = int(input())\n    \n    print(\"Enter \", n, \" elements in each group:\")\n    arr1 = []\n    arr2 = []\n    for i in range(n):\n        arr1.append(int(input()))\n        arr2.append(int(input()))\n        \n    print(\"\\nMerged array is:\")\n    print(merge_k_groups(arr1, arr2, n))\n    \n    \nmain()"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Assume the first array is sorted\n    # Assume the second array is sorted\n    # Assume the kth element is located at first position of array\n    \n    # The final answer is the kth element\n    \n    # Time complexity = O(log n)\n    # Space complexity = O(log n)\n    # The input of the function is two sorted arrays\n    \n    # Let i and j be the indcices of the first and the second sorted arrays respectively\n    \n    # kth_index = int((len(arr1) + len(arr2)) / 2)\n    # if kth_index < len(arr1):\n    #     return arr1[kth_index]\n    # else:\n    #     return arr2[kth_index]\n    \n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # Both arrays are sorted\n    \n    # The first variable is a temporary variable that is used for the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # Let k = 0\n    # kth_index = 0\n    # while True:\n    #     if arr1[kth_index] > arr2[kth_index]:\n    #         break\n    #     else:\n    #         kth_index += 1\n    #         if kth_index == len(arr1) or arr1[kth_index] > arr2[kth_index]:\n    #             break\n    \n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # If the kth element is found, then return it\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # If the kth element is found, then return it\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function is two sorted arrays\n    \n    # The first variable is a temporary variable that is used to store the current kth element\n    # The second variable is a temporary variable that is used to store the previous index\n    \n    # The while loop is executed till kth element is found\n    # Time complexity = O(log n)\n    # Space complexity = O(1)\n    # The input of the function i"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find kth index, return -1 if k not present\n    idx = arr1.index(k)\n    return arr1[idx] if idx < len(arr1) and k in arr1[idx+1:] else -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k == 1:\n        return arr1[k]\n    if len(arr2) > k:\n        return find_kth(arr1, arr2[k:], k-1)\n    else:\n        return arr2[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Put to return values in a list\n    result = []\n    # first sort the array\n    arr1.sort()\n    arr2.sort()\n    # copy the arrays to make list of numbers and make a list of nones\n    arr1_nones = arr1\n    arr2_nones = arr2\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    my_list = []\n    num = number\n    while num!= 0:\n        digits = int(num / 10)\n        my_list.append(digits)\n        num = int(num % 10)\n    \n    if len(my_list) == 1:\n        return True\n    else:\n        for i in my_list:\n            if i ** 3 == number:\n                return True\n    return False\n    \n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    from math import sqrt\n    \n    if number==1:\n        return False\n    elif number==0:\n        return False\n    elif number==1 or number==0:\n        return True\n    else:\n        for i in range(2,number):\n            temp = sqrt(number)\n            if temp==1:\n                break\n            elif temp==number:\n                return False\n        else:\n            return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # Calculate the number of digits\n    digits = len(str(number))\n    # Check the number of digits\n    if digits <= 1:\n        return True\n    # Create a list of the upper case letters\n    upper_case_letters = []\n    # Loop through the number\n    for i in str(number):\n        # If there is an upper case letter\n        if i.isupper():\n            upper_case_letters.append(i)\n        else:\n            # If the number is a number\n            # and the number is less than the\n            # length of the upper case letters\n            if digits == len(upper_case_letters) and int(i) == int(i):\n                # If the digits are the same as the upper case letters\n                return True\n            # If the number is not a digit\n            # and the number is less than the length of the upper case letters\n            else:\n                return False\n    # Return false if the number is not armstrong\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n=number\n    n=str(number)\n    count=0\n    if len(n)==1:\n        return 'The number is armstrong'\n    else:\n        for i in n:\n            count+=1\n        for i in n:\n            num=int(i)**count\n            if num==number:\n                return 'The number is armstrong'\n            else:\n                return 'The number is not armstrong'\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def is_armstrong(number):\n        '''\n        Write a function that takes a positive integer number and returns True if the number is armstrong, \n        and False otherwise.\n        '''\n        x=0\n        while(number>0):\n            x=x+1\n            number=number//10\n        if(x==number):\n            return True\n        else:\n            return False\n    \n    def is_armstrong_number(number):\n        '''\n        Write a function to check whether the given number is armstrong or not.\n        '''\n        def armstrong_digit(number, dig):\n            '''\n            Write a function to find a number with the given digits.\n            '''\n            sum=0\n            while(number>0):\n                sum=sum+number%10\n                number=number//10\n            if(sum==dig):\n                return True\n            else:\n                return False\n        \n        number = int(input('Enter the number:'))\n        if(number<10):\n            return False\n        if(number>10):\n            return False\n        else:\n            return armstrong_digit(number,number)\n        \n        \n    def main():\n        number=int(input('Enter the number:'))\n        if(is_armstrong_number(number)):\n            print('The number is armstrong')\n        else:\n            print('The number is not armstrong')\n            \n            \n            \n        \n    main()\nmain()"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    length = len(str(number))\n    for i in range(1, length):\n        if (number % 10)**i == number:\n            return True\n    return False\n    \n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #This is a built-in function\n    def is_armstrong(num):\n        num = str(num)\n        rev = ''\n        for i in range(len(num)):\n            rev = rev + str(int(num[i]) ** len(num) - 1)\n        return rev == num\n    for i in range(1, number):\n        if is_armstrong(i):\n            print(\"This number is an armstrong number\")\n        else:\n            print(\"This number is not an armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    i = 0\n    while i <= len(number_str):\n        sum_str = 0\n        number_str_int = int(number_str)\n        while i <= len(number_str):\n            sum_str += number_str_int * int(number_str[i])\n            i += 1\n        if sum_str == number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    last_digits = len(str(number))\n    sum = 0\n    for i in range(0, last_digits, 1):\n        digit = number // 10 ** i\n        sum += digit * digit\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum = sum + i\n        average = sum/i\n        print(f'Sum and average = {sum} and {average}')\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return number + sum_average(number - 1)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int or not number:\n        raise TypeError(\"please provide integer value\")\n    sum = 0\n    average = 0\n    for i in range(number):\n        sum += number\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, number + 1):\n        s += i\n    return s / number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum = sum + i\n    avg = sum/number\n    print(f\"{number} natural numbers have average {avg}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    a=0\n    for i in range(0,number):\n        a+=i\n    return a/number\ndef sum_even(number):\n    '''\n    Write a function that takes a natural number and returns the sum of all even numbers.\n    '''\n    s=0\n    for i in range(0,number):\n        if i%2==0:\n            s+=i\n    return s\ndef sum_odd(number):\n    '''\n    Write a function that takes a natural number and returns the sum of all odd numbers.\n    '''\n    o=0\n    for i in range(0,number):\n        if i%2!=0:\n            o+=i\n    return o\ndef avg_and_median(number):\n    '''\n    Write a function that returns the average and median of the numbers in a list.\n    '''\n    return(sum_average(number),median(number))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    n = 1\n    while n <= number:\n        total += n\n        n += 1\n    print(\"The sum of the first\", n, \"natural numbers is\", total)\n    print(\"The average of the first\", n, \"natural numbers is\", total/n)\n    return\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,number+1):\n        s = s + i\n    average = s/number\n    return s, average"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for n in range(1, number+1):\n        sum += n\n    average = sum / number\n    return (sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # if n is less than 1, return error\n    if n < 1:\n        return None\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        print(\"{} is even\".format(n))\n    else :\n        print(\"{} is not even\".format(n))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) :\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # return True if n is even\n    return n%2 == 0\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # TODO: Write your code here\n    return 1\n    \nprint(first_repeated_char(\"abcdef\"))\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    output = []\n    count = 0\n    i = 0\n    while i < len(str1):\n        if str1[i] not in output:\n            output.append(str1[i])\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(list(dict.fromkeys([i for i in str1 if str1.count(i) > 1])))\n    return list(dict.fromkeys([i for i in str1 if str1.count(i) > 1]))[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    hash = {}\n    for i in str1:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for i in str1:\n        if hash[i] > 1:\n            return i\n    return \"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # TODO\n    # 1. Create a function named first_repeated_char.\n    # 2. Define the function in a variable named first_repeated_char.\n    # Hint: use a for loop to iterate through a string.\n    # 3. Inside the for loop, create a for-loop and check the first time the character is repeated, then check again the second time the character is repeated.\n    # 4. Print the first time the character is repeated.\n    # 5. Print the second time the character is repeated.\n    #\n    # EXAMPLE\n    # string = \"abcd\"\n    # print(first_repeated_char(string))\n    # Should print \"d\"\n    # string = \"abcd\"\n    # print(first_repeated_char(string))\n    # Should print \"d\"\n    # string = \"qwerty\"\n    # print(first_repeated_char(string))\n    # Should print \"d\"\n    # string = \"aba\"\n    # print(first_repeated_char(string))\n    # Should print \"a\"\n    # string = \"1a2b1\"\n    # print(first_repeated_char(string))\n    # Should print \"1\"\n    # string = \"zzyx\"\n    # print(first_repeated_char(string))\n    # Should print \"z\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return None\n    first = str1[0]\n    for i in range(1, len(str1)):\n        if str1[i] == first:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    c = 0\n    if str1[0] == str1[1]:\n        for i in range(2, len(str1)):\n            if str1[i] == str1[c]:\n                c+=1\n                c+=1\n                if c>=len(str1)-1:\n                    break\n    else:\n        return -1\n    return str1[c]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == str1[i + 1]:\n            return str1[i]\n    return \"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_repeated_character = \"\"\n    # iterating through the string\n    for char in str1:\n        # comparing the first element with the second\n        if char == str1[0]:\n            first_repeated_character = char\n            break\n        else:\n            # if the first element isn't the same as the second element\n            # checking for occurrences\n            first_repeated_character = char\n            break\n    return first_repeated_character\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code here\n    return str1.find(str1[0])\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(range(1, n + 1))\n    \ndef is_lucid(n):\n    '''\n    Write a function that returns true if a number is a lucid number.\n    '''\n    return n > 0 and not (n % 3 == 0 or n % 5 == 0)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [num for num in range(1,n) if num%2==0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lud = []\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n    for i in range(n+1):\n        if n % i == 0:\n            lud.append(i)\n    return lud\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n+1) if i % 10 == 1]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n<0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        ludic=[]\n        for i in range(0,n+1):\n            if(i%10==0):\n                ludic.append(i)\n        return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_numbers = []\n    if n == 0:\n        return []\n    elif n < 0:\n        return []\n    else:\n        for i in range(1, n+1):\n            if i % 10 == 0:\n                luc_numbers.append(i)\n            elif i % 10 == 9:\n                luc_numbers.append(i)\n            elif i % 10 == 5:\n                luc_numbers.append(i)\n            elif i % 10 == 4:\n                luc_numbers.append(i)\n            elif i % 10 == 3:\n                luc_numbers.append(i)\n            elif i % 10 == 2:\n                luc_numbers.append(i)\n            elif i % 10 == 1:\n                luc_numbers.append(i)\n    return luc_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc,s = 0,0\n    while n>0:\n        luc += n%10\n        n//=10\n    while luc >= s:\n        s+=1\n        luc-=1\n    return luc\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def sol(x):\n        if x == 1:\n            return 1\n        if x % 2 == 0:\n            return sol(x / 2) + 1\n        else:\n            return sol(x / 2) + sol(x - 1) + 1\n    print(sol(n))\ndef read_ludic():\n    '''\n    Read and return all the numbers less than or equal to n, in ascending order.\n    '''\n    n = int(input('Enter the number: '))\n    if n <= 0:\n        print('Invalid input')\n        return\n    sol = lambda x: (1 if x <= n else 0 if x > n else x)\n    print(sol(n))\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucky_list = []\n    for i in range(n,0,-1):\n        if i<=100:\n            lucky_list.append(i)\n    return lucky_list"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    li = list(range(n))\n    for i in li:\n        if i <= 0:\n            pass\n        else:\n            if i % 5 == 0:\n                pass\n            else:\n                li.remove(i)\n    return li\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    res = ''\n    if len(s) == 0:\n        return s\n    else:\n        for i in s:\n            if i =='':\n                res +=''\n            else:\n                res += i\n        return res.lstrip().rstrip()\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = [ word.strip().upper() for word in s ]\n    s = [ word.lower() for word in s ]\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # your code goes here\n    return s[::-1]\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    lst = s.split(\" \")\n    lst = list(map(lambda x: x[::-1], lst))\n    return''.join(lst)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_str = []\n    for word in s.split():\n        new_str.append(word[::-1])\n    return \" \".join(new_str)\n    \ndef swap_case(s):\n    '''\n    Write a function to swap case of all the letters in a given string.\n    '''\n    return s.swapcase()\n    \ndef replace_spaces(s):\n    '''\n    Write a function to replace spaces in a string by this character.\n    '''\n    return s.replace(\" \", \"_\")\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef palindrome_permutations(string):\n    '''\n    Write a function that returns all permutations of the given string.\n    '''\n    permutations = []\n    permutations = permutations + string + string\n    permutations = permutations + string\n    permutations = permutations\n    permutations = permutations + string\n    permutations = permutations\n    permutations = permutations + string\n    permutations = permutations\n    permutations = permutations\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n    permutations = permutations + string\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if type(s)!= str:\n        raise TypeError(\"Please provide a string.\")\n    \n    words = s.split()\n    out = \"\"\n    for word in words:\n        out += word + \" \"\n    \n    return out[0:len(out)-1]\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()).replace('  ',' ').split()\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) <= 0:\n        return \"\"\n    else:\n        return s[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # your code goes here\n    if len(s) == 0:\n        return ''\n    else:\n        return''.join(s[::-1])\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    \ndef gen_prime_numbers(n):\n    '''\n    Create a list of primes with a given range\n    '''\n    numbers = []\n    for i in range(n + 1):\n        if prime_num(i):\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2 and num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5,num,5):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    is_prime = True\n    for num in range(2, num):\n        if num % 2 == 0 and num!= 2:\n            is_prime = False\n            return is_prime\n        elif num == 2:\n            is_prime = True\n    return is_prime\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for num in range(2, int(num/2)):\n        if num!= 1:\n            if num!= int(num):\n                print('Not a prime number.')\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # import prime number generator and test it\n    from math import sqrt\n    prime_number_generator = [2]\n    # get number from user\n    num = int(input(\"Enter an integer: \"))\n    while num in prime_number_generator:\n        num = int(input(\"That integer is already in the list. \\nEnter another number: \"))\n    # iterate through the list and add to the set\n    for i in range(2,int(sqrt(num))+1):\n        if num % i == 0:\n            return False\n    # return True if it is not prime number\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Corner case\n    if num == 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3: return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Write your code here\n    return num > 1\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180.0)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degrees = degree * (math.pi/180)\n    return radian_degrees\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180.0)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * 180 / 3.141592654\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # First convert degree to radians\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matcher = re.search(pattern, text)\n    return matcher.groups()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    print(match)\n    start = match.start()\n    end = match.end()\n    print(start, end)\n    return start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substr = ''\n    start = 0\n    end = 0\n    while True:\n        match = re.search(pattern, text, re.MULTILINE | re.DOTALL)\n        if match:\n            #print(\"Found!\")\n            end = match.end()\n            #print(\"End: {}\".format(end))\n            substr = substr + match.group()\n            if substr.endswith('\\n'):\n                #print(\"added newline\")\n                substr = substr + '\\n'\n            elif substr.endswith('\\r'):\n                #print(\"added carriage return\")\n                substr = substr + '\\r'\n            else:\n                #print(\"found spaces\")\n                substr = substr +''\n            #print(\"Found pattern: {}\".format(pattern))\n            #print(\"Found substring: {}\".format(substr))\n            #print(\"Found start index: {}\".format(start))\n            #print(\"Found end index: {}\".format(end))\n            break\n        elif substr.endswith('\\n'):\n            #print(\"added newline\")\n            substr = substr + '\\n'\n        elif substr.endswith('\\r'):\n            #print(\"added carriage return\")\n            substr = substr + '\\r'\n        else:\n            #print(\"Found spaces\")\n            substr = substr +''\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pos = 0\n    count = 0\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.start(), match.end()\n    else:\n        return 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    return match.groups()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # YOUR CODE HERE\n    # TODO: define the search function\n    search_pattern = re.compile(pattern)\n    search_text = re.search(search_pattern, text)\n    return search_text.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text) - 1\n    result = re.findall(pattern, text)\n    return start, end, result\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.findall(pattern, text)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    x = 3**n\n    k = 2*x - 1\n    return 2*(x - 1)\ndef count_k(n): \n    '''\n    Write a python function to count the number of ways of finding a k-digit number.\n    '''\n    k = 0\n    for n in range(1, n + 1):\n        k = k + 2 * bell_Number(n)\n    return k\ndef factorial(n): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\ndef prime(n): \n    '''\n    Write a python function to calculate the prime numbers up to and including n.\n    '''\n    prime_number = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return False\n        prime_number += 1\n    return True\ndef power(n, m): \n    '''\n    Write a python function to calculate the value of a number to the power of another number.\n    '''\n    pow_num = 1\n    for i in range(m):\n        pow_num *= n\n    return pow_num\ndef prime_test(n): \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    if prime(n):\n        print(True)\n    else:\n        print(False)\ndef main(): \n    '''\n    Write a python function to print a table of prime numbers up to and including n.\n    '''\n    print('The table of prime numbers up to and including n')\n    print('{: <10}{: <10}{: <10}{: <10}{: <10}'.format('n', 'n', 'n', 'n', 'n'))\n    for n in range(2, 100):\n        if prime(n):\n            print('{: <10}{: <10}{: <10}{: <10}{: <10}'.format(n, n, n, n, n))\n    print()\ndef factorial_prime(n): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\ndef main1(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 2 is ', factorial_prime(2))\n    print('The factorial of 5 is ', factorial_prime(5))\n    print('The factorial of 10 is ', factorial_prime(10))\n    print('The factorial of 15 is ', factorial_prime(15))\n    print('The factorial of 20 is ', factorial_prime(20))\ndef main2(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 3 is ', factorial_prime(3))\n    print('The factorial of 5 is ', factorial_prime(5))\n    print('The factorial of 10 is ', factorial_prime(10))\n    print('The factorial of 15 is ', factorial_prime(15))\n    print('The factorial of 20 is ', factorial_prime(20))\ndef main3(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 13 is ', factorial_prime(13))\n    print('The factorial of 11 is ', factorial_prime(11))\n    print('The factorial of 13 is ', factorial_prime(13))\ndef main4(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 24 is ', factorial_prime(24))\n    print('The factorial of 15 is ', factorial_prime(15))\n    print('The factorial of 20 is ', factorial_prime(20))\ndef main5(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 37 is ', factorial_prime(37))\n    print('The factorial of 37 is ', factorial_prime(37))\n    print('The factorial of 50 is ', factorial_prime(50))\ndef main6(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 45 is ', factorial_prime(45))\n    print('The factorial of 50 is ', factorial_prime(50))\n    print('The factorial of 85 is ', factorial_prime(85))\ndef main7(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 84 is ', factorial_prime(84))\n    print('The factorial of 85 is ', factorial_prime(85))\n    print('The factorial of 90 is ', factorial_prime(90))\ndef main8(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 4 is ', factorial_prime(4))\n    print('The factorial of 20 is ', factorial_prime(20))\n    print('The factorial of 60 is ', factorial_prime(60))\ndef main9(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 2 is ', factorial_prime(2))\n    print('The factorial of 3 is ', factorial_prime(3))\n    print('The factorial of 7 is ', factorial_prime(7))\n    print('The factorial of 11 is ', factorial_prime(11))\ndef main10(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 17 is ', factorial_prime(17))\n    print('The factorial of 11 is ', factorial_prime(11))\n    print('The factorial of 24 is ', factorial_prime(24))\ndef main11(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 44 is ', factorial_prime(44))\n    print('The factorial of 45 is ', factorial_prime(45))\n    print('The factorial of 47 is ', factorial_prime(47))\n    print('The factorial of 56 is ', factorial_prime(56))\ndef main12(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 51 is ', factorial_prime(51))\n    print('The factorial of 61 is ', factorial_prime(61))\n    print('The factorial of 72 is ', factorial_prime(72))\ndef main13(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 81 is ', factorial_prime(81))\n    print('The factorial of 81 is ', factorial_prime(81))\n    print('The factorial of 82 is ', factorial_prime(82))\n    print('The factorial of 83 is ', factorial_prime(83))\ndef main14(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 99 is ', factorial_prime(99))\n    print('The factorial of 99 is ', factorial_prime(99))\n    print('The factorial of 100 is ', factorial_prime(100))\n    print('The factorial of 200 is ', factorial_prime(200))\ndef main15(): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    print('The factorial of 400 is ', factorial_prime(400))\n    print('The factorial of 100 is ', factorial_prime(100))\n    print('The factorial of 200 is ', factorial_prime(200))\n    print('The factorial of 300 is ', factorial_prime(300))\n    print('The factorial of 400 is ', factorial_prime(400))\ndef main16(): \n    '''\n    Write a python functio"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    elif n % 2 == 0: \n        return bell_Number(n-1) + 1\n    else: \n        return bell_Number(n-1) + 2\nn = int(input(\"Enter the number:\"))\nprint(bell_Number(n)"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    for i in range(1, n+1):\n        print(i, end=' ')\n        if i % 2 == 1:\n            print('*', end='')\n    print()\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    while a < n:\n        a = a + a\n    return a\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n * (n - 1) / 2\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    from math import factorial\n    a = factorial(n)\n    return a % (10 ** 9 + 7)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    for i in range(1, n+1):\n        print(i, end=\" \")\n    print()\n    return n\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1 or n == 2:\n        return n\n    else:\n        return bell_Number(n-1) + n-1"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Create a list of primes\n    primes = list(map(int, range(2, n+1)))\n    # Create a dictionary for the values\n    #   in the dictionary\n    values = {}\n    # Iterate through each primes\n    for prime in primes:\n        # Check if the value of the prime is prime\n        if values.get(prime):\n            # If the value is already present\n            #   increment value of the prime by 1\n            values[prime] += 1\n        # else\n        else:\n            # Else create a new value\n            #   and set it to be the value of\n            #   the prime\n            values[prime] = prime\n    # Create a list of the values in dictionary\n    #   in the order of prime\n    sorted_values = sorted(values.values())\n    # For each value in the sorted list of values\n    #   get the index of the value\n    for i in sorted_values:\n        # Return the index of the value\n        return i\n        # This statement should not be inside the if/else\n        # else statement\n        # Else statement\n    # Return -1\n    return -1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if (n == 0):\n        return 1\n    if (n == 1):\n        return 2\n    if (n == 2):\n        return 3\n    if (n == 3):\n        return 4\n    if (n == 4):\n        return 5\n    if (n == 5):\n        return 6\n    if (n == 6):\n        return 7\n    if (n == 7):\n        return 8\n    if (n == 8):\n        return 9\n    if (n == 9):\n        return 10\n    if (n == 10):\n        return 11\n    if (n == 11):\n        return 12\n    if (n == 12):\n        return 13\n    if (n == 13):\n        return 14\n    if (n == 14):\n        return 15\n    if (n == 15):\n        return 16\n    if (n == 16):\n        return 17\n    if (n == 17):\n        return 18\n    if (n == 18):\n        return 19\n    if (n == 19):\n        return 20\n    if (n == 20):\n        return 21\n    if (n == 21):\n        return 22\n    if (n == 22):\n        return 23\n    if (n == 23):\n        return 24\n    if (n == 24):\n        return 25\n    if (n == 25):\n        return 26\n    if (n == 26):\n        return 27\n    if (n == 27):\n        return 28\n    if (n == 28):\n        return 29\n    if (n == 29):\n        return 30\n    if (n == 30):\n        return 31\n    if (n == 31):\n        return 32\n    if (n == 32):\n        return 33\n    if (n == 33):\n        return 34\n    if (n == 34):\n        return 35\n    if (n == 35):\n        return 36\n    if (n == 36):\n        return 37\n    if (n == 37):\n        return 38\n    if (n == 38):\n        return 39\n    if (n == 39):\n        return 40\n    if (n == 40):\n        return 41\n    if (n == 41):\n        return 42\n    if (n == 42):\n        return 43\n    if (n == 43):\n        return 44\n    if (n == 44):\n        return 45\n    if (n == 45):\n        return 46\n    if (n == 46):\n        return 47\n    if (n == 47):\n        return 48\n    if (n == 48):\n        return 49\n    if (n == 49):\n        return 50\n    if (n == 50):\n        return 51\n    if (n == 51):\n        return 52\n    if (n == 52):\n        return 53\n    if (n == 53):\n        return 54\n    if (n == 54):\n        return 55\n    if (n == 55):\n        return 56\n    if (n == 56):\n        return 57\n    if (n == 57):\n        return 58\n    if (n == 58):\n        return 59\n    if (n == 59):\n        return 60\n    if (n == 60):\n        return 61\n    if (n == 61):\n        return 62\n    if (n == 62):\n        return 63\n    if (n == 63):\n        return 64\n    if (n == 64):\n        return 65\n    if (n == 65):\n        return 66\n    if (n == 66):\n        return 67\n    if (n == 67):\n        return 68\n    if (n == 68):\n        return 69\n    if (n == 69):\n        return 70\n    if (n == 70):\n        return 71\n    if (n == 71):\n        return 72\n    if (n == 72):\n        return 73\n    if (n == 73):\n        return 74\n    if (n == 74):\n        return 75\n    if (n == 75):\n        return 76\n    if (n == 76):\n        return 77\n    if (n == 77):\n        return 78\n    if (n == 78):\n        return 79\n    if (n == 79):\n        return 80\n    if (n == 80):\n        return 81\n    if (n == 81):\n        return 82\n    if (n == 82):\n        return 83\n    if (n == 83):\n        return 84\n    if (n == 84):\n        return 85\n    if (n == 85):\n        return 86\n    if (n == 86):\n        return 87\n    if (n == 87):\n        return 88\n    if (n == 88):\n        return 89\n    if (n == 89):\n        return 90\n    if (n == 90):\n        return 91\n    if (n == 91):\n        return 92\n    if (n == 92):\n        return 93\n    if (n == 93):\n        return 94\n    if (n == 94):\n        return 95\n    if (n == 95):\n        return 96\n    if (n == 96):\n        return 97\n    if (n == 97):\n        return 98\n    if (n == 98):\n        return 99\n    if (n == 99):\n        return 100\n    if (n == 100):\n        return 101\n    if (n == 101):\n        return 102\n    if (n == 102):\n        return 103\n    if (n == 103):\n        return 104\n    if (n == 104):\n        return 105\n    if (n == 105):\n        return 106\n    if (n == 106):\n        return 107\n    if (n == 107):\n        return 108\n    if (n == 108):\n        return 109\n    if (n == 109):\n        return 110\n    if (n == 110):\n        return 111\n    if (n == 111):\n        return 112\n    if (n == 112):\n        return 113\n    if (n == 113):\n        return 114\n    if (n == 114):\n        return 115\n    if (n == 115):\n        return 116\n    if (n == 116):\n        return 117\n    if (n == 117):\n        return 118\n    if (n == 118):\n        return 119\n    if (n == 119):\n        return 120\n    if (n == 120):\n        return 121\n    if (n == 121):\n        return 122\n    if (n == 122):\n        return 123\n    if (n == 123):\n        return 124\n    if (n == 124):\n        return 125\n    if (n == 125):\n        return 126\n    if (n == 126):\n        return 127\n    if (n == 127):\n        return 128\n    if (n == 128):\n        return 129\n    if (n == 129):\n        return 130\n    if (n == 130):\n        return 131\n    if (n == 131):\n        return 132\n    if (n == 132):\n        return 133\n    if (n == 133):\n        return 134\n    if (n == 134):\n        return 135\n    if (n == 135):\n        return 136\n    if (n == 136):\n        return 137\n    if (n == 137):\n        return 138\n    if (n == 138):\n        return 139\n    if (n == 139):\n        return 140\n    if (n == 140):\n        return 141\n    if (n == 141):\n        return 142\n    if (n == 142):\n        return 143\n    if (n == 143):\n        return 144\n    if (n == 144):\n        return 145\n    if (n == 145):\n        return 146\n    if (n == 146):\n        return 147\n    if (n == 147):\n        return 148\n    if (n == 148):\n        return 149\n    if (n == 149):\n        return 150\n    if (n == 150):\n        return 151\n    if (n == 151):\n        return 152\n    if (n == 152):\n        return 153\n    if (n == 153):\n        return 154\n    if (n == 154):\n        return 155\n    if (n == 155):\n        return 156\n    if (n == 156):\n        return 157\n    if (n == 157):\n        return 158\n    if (n == 158):\n        return 159\n    if (n == 159):\n        return 160\n    if (n == 160):\n        return 161\n    if (n == 161):\n        return 162\n    if (n == 162):\n        return 163\n    if (n == 163):\n        return 164\n    if (n == 164):\n        return 165\n    if (n == 165):\n        return 166\n    if (n == 166):\n        return 167\n    if (n == 167):\n        return 168\n    i"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if(L==[] or len(L)==0):\n        return []\n    if(L[-1]==L[0]):\n        list1.pop(-1)\n        return list1\n    else:\n        l = remove_kth_element(list1, L[:-1])\n        return l + [L[-1]]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    # YOUR CODE HERE\n    if not L or not len(L) == 1:\n        return []\n    else:\n        return list(set(list1) - set(L[:len(L) - 1]))\n        #raise NotImplementedError('you must implement remove_kth_element')\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    else:\n        if L[0] <= L[-1]:\n            return remove_kth_element(list1, L[1:])\n        else:\n            return remove_kth_element(list1, L[:-1])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    index = L.index(L[L.index(L[-1])-1])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    if len(list1) < L + 1:\n        return new_list\n    new_list = list1[L:]\n    for i in range(L, len(list1)):\n        new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.sort()\n    return list(set(list1).difference(set(L[L.index(min(list1))])))\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(list1)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return None\n    elif L == 0:\n        return list1\n    else:\n        return remove_kth_element(list1, L-1) + [list1.pop(0)] + remove_kth_element(list1, L)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    if L == []:\n        raise ValueError(\"Empty list\")\n    \n    if len(list1) == 1:\n        return list1\n    \n    if L[-1] == list1[0]:\n        return remove_kth_element(list1[1:], L[1:])\n    \n    # remove 2nd element from the left\n    left_elem = list1[0]\n    # get the index to get the element to remove\n    left_index = L.index(left_elem)\n    # remove the element from the list\n    list1 = remove_kth_element(list1[1:], L[left_index:])\n    # update the new position of the list\n    L = L[left_index:] + L[:left_index]\n    # update the index of the old element\n    L.index(left_elem)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L[L.index(min(list1))]\n    return remove_kth_element(list1, list1.remove(k))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if (N == 0):\n        return max(test_list)\n    if (N == 1):\n        return test_list[0][0]\n    return max(test_list[N-1][0], test_list[N-1][N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # the first argument represents the list to be modified.\n    # the second argument is the index of the column to be modified.\n    # the third argument is the element to be searched.\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([item[N-1] for item in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_index = 0\n    for index, element in enumerate(test_list):\n        if len(element) > max_index:\n            max_index = len(element)\n    return max_index\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # We need to return an array, not a list\n    ans = []\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list)<=0 or N<=0:\n        return 0\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # YOUR CODE HERE\n    m = len(test_list)\n    if m == 1:\n        return test_list[0][0]\n    else:\n        return max(test_list[0])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    \n    # For loop\n    for i in test_list:\n        max_num = max(i)\n        if i.count(max_num) == N:\n            return max_num\n    # return max(i)\n    \n    # For-else\n    # return max(i)\n    \n    # for i in range(len(test_list)):\n    #     print(i, test_list[i])\n    #     if max(test_list[i]) == test_list[i][0]:\n    #         print(i, test_list[i])\n    # return test_list[i][0]\n    \n    # if test_list[0] == test_list[1]:\n    #     return test_list[0][0]\n    # else:\n    #     return test_list[0][0]\n    \n    # if len(test_list) == 2:\n    #     if test_list[1][0] == test_list[1][1]:\n    #         return test_list[1][0]\n    #     else:\n    #         return test_list[1][0]\n    # else:\n    #     for i in range(len(test_list)):\n    #         for j in range(len(test_list)):\n    #             if test_list[i][j] == test_list[i][0]:\n    #                 return test_list[i][j]\n    #     return test_list[0][0]\n    \n    # return test_list[0][0]\n    \n    # if test_list[0][0] == test_list[1][0]:\n    #     return test_list[1][0]\n    # else:\n    #     return test_list[1][0]\n    \n    # return test_list[0][0]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(test_list[i][N])\n    return max(max_list)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    list1 = []\n    for i in lst:\n        list1 += i\n    list1.append(lst[0][0])\n    return list1\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    s1 = []\n    s2 = []\n    for i in lst:\n        s1.append(i[0])\n        s2.append(i[1])\n    return s1, s2\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for lst in lst:\n        result.append([lst[0][0],lst[1][1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    temp = []\n    for i in lst:\n        temp.append([i[0][0],i[0][1]])\n    return temp\ndef check(num):\n    '''\n    Write a python function which takes a number and returns a boolean value of it is a palindrome or not.\n    '''\n    return num==num[::-1]\ndef checkPalindrome(string):\n    '''\n    Write a python function which takes a string and returns a boolean value of it is a palindrome or not.\n    '''\n    return string==string[::-1]\ndef get_rotation_order(lst):\n    '''\n    Write a python function which takes a list and returns a list of the list with the rotated order.\n    '''\n    temp = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i!=j:\n                temp.append(lst[i][j])\n    return temp\ndef get_pascal_triangle(n):\n    '''\n    Write a python function which returns a list of the nth pascal triangle.\n    '''\n    if n==1:\n        return [[1]]\n    else:\n        s=[]\n        for i in range(1,n+1):\n            for j in range(0,i):\n                s.append([1])\n            s.append([0]*(i+1))\n        return s[:-1]\ndef get_sum_sequence(lst):\n    '''\n    Write a python function which returns a list of the sum of the numbers in the lst.\n    '''\n    temp=[]\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i!=j:\n                temp.append(lst[i]+lst[j])\n    return temp\ndef has_cycle(lst):\n    '''\n    Write a python function which returns a boolean value if there is a cycle in a list.\n    '''\n    if len(lst)==1:\n        return True\n    else:\n        for i in range(len(lst)):\n            if len(lst[i])>=2:\n                return True\n        return False\ndef lcm(a,b):\n    '''\n    Write a python function which returns the least common multiple of two positive integers.\n    '''\n    if a>b:\n        m=a\n    else:\n        m=b\n    for i in range(2,m+1):\n        if m%i==0:\n            m=m//i\n    return m\ndef get_largest_prime_below(n):\n    '''\n    Write a python function which returns the largest prime number below n.\n    '''\n    if n==1:\n        return 2\n    for i in range(2,n+1):\n        if is_prime(i):\n            return i\ndef get_factors(num):\n    '''\n    Write a python function which returns the factors of a given number.\n    '''\n    if num==1:\n        return []\n    else:\n        lst=[]\n        for i in range(1,num+1):\n            if num%i==0:\n                lst.append(i)\n    return lst\ndef remove_prefix(s,prefix):\n    '''\n    Write a python function which removes all the words that starts with a given prefix from a string.\n    '''\n    if s=='':\n        return s\n    if s[0:len(prefix)]==prefix:\n        return s[len(prefix):]\n    else:\n        return s\ndef get_fib(n):\n    '''\n    Write a python function which returns the value of the Fibonacci numbers.\n    '''\n    a,b=0,1\n    if n<=0:\n        return 0\n    if n<=3:\n        return a\n    for i in range(4,n+1):\n        a,b=b,a+b\n    return b\ndef fibonacci_number_recur(n):\n    '''\n    Write a python function which returns the value of the nth fibonacci number.\n    '''\n    if n<=1:\n        return n\n    a,b=0,1\n    if n==0:\n        return 0\n    for i in range(n-1):\n        a,b=b,a+b\n    return b\ndef reverse_string(s):\n    '''\n    Write a python function which returns a string with the words reversed.\n    '''\n    if s=='':\n        return ''\n    if s[0]!='a':\n        return s[::-1]\n    return reverse_string(s[1:])\ndef get_linked_list_from_list(arr):\n    '''\n    Write a python function which returns a linked list of elements of a given list.\n    '''\n    if len(arr)==0:\n        return None\n    head=arr[0]\n    for i in range(1,len(arr)):\n        head=arr[i]\n        if head>head[-1]:\n            head=arr[i]\n    return head\ndef partition(arr, start, end):\n    '''\n    Write a python function which returns the partition of a given list.\n    '''\n    if start>end:\n        return None\n    if start==end:\n        return [arr[start]]\n    p=arr[start]\n    l=[]\n    l.append(p)\n    for i in range(start,end+1):\n        if arr[i]<p:\n            l.append(arr[i])\n    l.sort()\n    return l\ndef build_tree(arr,start,end):\n    '''\n    Write a python function which returns the structure of a given tree.\n    '''\n    if start>end:\n        return None\n    mid=int((start+end)/2)\n    root=arr[mid]\n    root=build_tree(arr,start,mid-1)\n    root=build_tree(arr,mid+1,end)\n    return root\ndef count_frequency(arr,n):\n    '''\n    Write a python function which returns the frequency of a given array.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if arr[n-1]!=None:\n        return arr[n-1]\n    else:\n        res=0\n        for i in range(n):\n            if arr[i]!=None:\n                res+=arr[i]\n        return res\ndef count_frequency(arr,n):\n    '''\n    Write a python function which returns the frequency of a given array.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if arr[n-1]!=None:\n        return arr[n-1]\n    else:\n        res=0\n        for i in range(n):\n            if arr[i]!=None:\n                res+=arr[i]\n        return res\ndef get_max_sum(arr):\n    '''\n    Write a python function which returns the maximum sum of a given list.\n    '''\n    if len(arr)==0:\n        return 0\n    if arr[0]!=None:\n        return arr[0]\n    else:\n        max_sum=0\n        for i in range(len(arr)):\n            max_sum+=arr[i]\n        return max_sum\ndef remove_duplicates(arr):\n    '''\n    Write a python function which returns a list of the elements which are not duplicates.\n    '''\n    new_arr=[]\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n    return new_arr\ndef remove_duplicates_and_sort(lst):\n    '''\n    Write a python function which returns a list of the elements which are not duplicates and are not sorted in alphabetical order.\n    '''\n    new_arr=[]\n    for i in lst:\n        if i not in new_arr and i!=None:\n            new_arr.append(i)\n    return new_arr"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_two_lists(lst):\n        result = []\n        first = 0\n        second = 0\n        while len(lst)!= 0:\n            if lst[first] == lst[second]:\n                result.append(lst[first])\n                first += 1\n                second += 1\n                continue\n            elif lst[first] < lst[second]:\n                result.append(lst[first])\n                first += 1\n            else:\n                result.append(lst[second])\n                second += 1\n        return result\n    \n    return merge_two_lists(lst)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n        result.append(sublist[1])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(tup) for tup in zip(*lst)]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst)==0:\n        return []\n    else:\n        lst2=lst.copy()\n        lst2.sort()\n        lst=lst2.copy()\n        return merge(lst)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst)\n    lst_1 = []\n    lst_2 = []\n    for i in lst:\n        lst_1.append(i[0])\n        lst_2.append(i[1])\n    return lst_1, lst_2\n    \n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n    \ndef main():\n    lst = []\n    print(merge(lst))\n    lst1 = [1,2,3,4,5,6,7,8,9,10]\n    print(lst1)\n    lst2 = [1,3,5,7,9,10,11,12]\n    print(lst2)\n    lst3 = [1,3,5,7,9,10,11,12]\n    print(lst3)\n    lst1.sort()\n    lst2.sort()\n    lst3.sort()\n    print(lst1)\n    print(lst2)\n    print(lst3)\n    print(merge(lst1))\n    print(merge(lst2))\n    print(merge(lst3))\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Complete the function by returning the cumulative sum\n    return 0\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        if i!= 0:\n            cum_sum = cum_sum + i\n    return cum_sum\n    \ntest_list = [1,2,3,4,5,6,7,8,9,10]\nprint(\"Total sum of the given tuple list: {}\".format(cummulative_sum(test_list))"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    def sum_array(tuple):\n        l = [0]*len(tuple)\n        for i in tuple:\n            l[i] = l[i] + 1\n        return l\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for val in test_list:\n        cum_sum += val\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for x in test_list:\n        total += x\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = test_list + ((0,),)\n    # loop through list and add each to cumulative sum\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum = cumulative_sum + (test_list[i][1] + cumulative_sum)\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(tup[0] for tup in test_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for num in nums:\n        tuple_list.append(sum(num)/len(num))\n    return tuple_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    for n in nums:\n        total_sum += n\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x) / len(x) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(nums)/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: your code here\n    nums_list = list(map(list, zip(*nums)))\n    \n    return [sum(nums_list[i]) / len(nums_list[i]) for i in range(len(nums_list))]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for n in range(len(nums)):\n        for i in nums[n]:\n            tuple_list.append(i)\n    tuple_list = tuple_list[:len(tuple_list)//2]\n    tuple_list.sort()\n    return tuple_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # return sum(list(map(lambda tup:tup[0], nums))) / len(nums)\n    list1 = []\n    list2 = []\n    for tup in nums:\n        list1.append(tup[0])\n        list2.append(tup[1])\n    average = []\n    for i in range(len(list1)):\n        average.append(list1[i]/list2[i])\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in nums:\n        total.append(sum(i)/len(i))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # if len(nums) == 0:\n    #     return []\n    # else:\n    return [sum(n) / len(n) for n in nums]"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    return sum(nums)/len(nums)\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = ()\n    mod = mod + tuple_tuple(test_tup1)\n    mod = mod + tuple_tuple(test_tup2)\n    return mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Lengths of tuples must match'\n    assert (len(test_tup1)==len(test_tup2)), 'Lengths of tuples must match'\n    \n    for i in range(len(test_tup1)):\n        if i % 2 == 0:\n            test_tup1[i] %= test_tup2[i]\n            \n    print(test_tup1)\n    print(test_tup2)\n    \n    \n    return test_tup1, test_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1])\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    a = test_tup1[1]\n    b = test_tup2[1]\n    return a%b, a%b\n    \ndef tuple_modulo_log(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    a = test_tup1[1]\n    b = test_tup2[1]\n    return a%(b), a%(b)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tuple1_modulo = tuple(test_tup1)\n    tuple2_modulo = tuple(test_tup2)\n    \n    if len(tuple1_modulo) == len(tuple2_modulo):\n        print(f'The tuples are equal. Modulo is {tuple1_modulo[0] * tuple2_modulo[0]}')\n    else:\n        print(f'The tuples are different. Modulo is {tuple1_modulo[0] * tuple2_modulo[0]}')\n    print('\\n')\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('tuples must be of same length')\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Error: the length of tuple must be same.')\n    mod = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    return mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i])\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Get the length of the tuples.\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    # Create an empty list to store the result.\n    result = []\n    # Create an empty list to store the result.\n    for i in range(l1):\n        for j in range(l2):\n            # Use modulo operation to calculate the result.\n            result.append(test_tup1[i] % test_tup2[j])\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Your code here\n    if d == 1:\n        return steps\n    if d == 2:\n        return steps + 1\n    if steps == 0:\n        return 0\n    if d == 3:\n        return steps + 1\n    return min_Jumps(steps - 1, d - 1) + min_Jumps(steps - 1, d)\n    \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jump = 0\n    visited = [[0 for i in range(d)] for j in range(d)] \n    for step in range(1, steps): \n        # Initialize current point as origin \n        curr = 0\n        # Check if starting point is at origin, if so, do not perform any jumps\n        if curr == d: \n            return jump \n        # Iterate through the rows\n        for i in range(0, d): \n            # Check if current point is at the origin, if so, perform no jumps \n            if curr == d: \n                break\n            # If the current point is not at the origin, check if the current point is in visited\n            # If so, add the current point to the visited array, otherwise skip\n            if visited[i][curr] == 0: \n                visited[i][curr] = 1\n                curr += 1\n                # Perform the actual jump \n                if curr == d: \n                    jump += 1\n                    curr -= 1\n                # If the current point is already in the visited array, skip \n                if visited[i][curr] == 1: \n                    pass\n                # If the current point is not in the visited array, we are done \n                elif visited[i][curr] == 0: \n                    break \n    return jump \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Hint: You can use the function defined in \"Problem Set 2\" as a helper function to solve this problem.\n    #You don't need to worry about the variables used and their values\n    def is_valid(d, origin, destination):\n        '''\n        d: the length to be traversed.\n        origin: the origin of the plane.\n        destination: the destination of the plane.\n        '''\n        if d >= origin[0] and d < destination[0]:\n            if d >= origin[1] and d < destination[1]:\n                return True\n        return False\n    \n    #HINT: You can use the following function to solve this problem.\n    #You need to return the number of jumps needed.\n    #The parameter is the steps to be taken. The parameter is a list of lists of ints.\n    def jump(steps, origin, destination, d):\n        '''\n        steps: a list of lists of ints.\n        origin: the origin of the plane.\n        destination: the destination of the plane.\n        d: the length to be traversed.\n        '''\n        if is_valid(d, origin, destination):\n            steps[origin[0]][origin[1]] = steps[origin[0]][origin[1]] + 1\n            if steps[destination[0]][destination[1]] < d:\n                steps[destination[0]][destination[1]] = steps[destination[0]][destination[1]] + 1\n                jump(steps, (origin[0] + 1, origin[1]), (destination[0] + 1, destination[1]), d)\n                steps[destination[0]][destination[1]] = steps[destination[0]][destination[1]] - 1\n                jump(steps, (origin[0] - 1, origin[1]), (destination[0] - 1, destination[1]), d)\n                steps[destination[0]][destination[1]] = steps[destination[0]][destination[1]] + 1\n                jump(steps, (origin[0], origin[1] + 1), (destination[0], destination[1] + 1), d)\n                steps[destination[0]][destination[1]] = steps[destination[0]][destination[1]] - 1\n                jump(steps, (origin[0], origin[1] - 1), (destination[0], destination[1] - 1), d)\n            else:\n                print(\"Found a jump!\")\n    \n    #HINT: You can use the following function to solve this problem.\n    #You need to return the minimum number of jumps needed.\n    #You should not use any built-in functions.\n    def min_Jumps_util(steps, origin, destination, d):\n        '''\n        steps: a list of lists of ints.\n        origin: the origin of the plane.\n        destination: the destination of the plane.\n        d: the length to be traversed.\n        '''\n        if is_valid(d, origin, destination):\n            steps[origin[0]][origin[1]] = steps[origin[0]][origin[1]] + 1\n            if steps[destination[0]][destination[1]] < d:\n                steps[destination[0]][destination[1]] = steps[destination[0]][destination[1]] + 1\n                min_Jumps_util(steps, (origin[0] + 1, origin[1]), (destination[0] + 1, destination[1]), d)\n                steps[destination[0]][destination[1]] = steps[destination[0]][destination[1]] - 1\n                min_Jumps_util(steps, (origin[0] - 1, origin[1]), (destination[0] - 1, destination[1]), d)\n                steps[destination[0]][destination[1]] = steps[destination[0]][destination[1]] + 1\n                min_Jumps_util(steps, (origin[0], origin[1] + 1), (destination[0], destination[1] + 1), d)\n                steps[destination[0]][destination[1]] = steps[destination[0]][destination[1]] - 1\n                min_Jumps_util(steps, (origin[0], origin[1] - 1), (destination[0], destination[1] - 1), d)\n            else:\n                print(\"Found a jump!\")\n    \n    jump(steps, origin, destination, d)\n    return sum(steps[destination[0]][destination[1]])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    for i in range(0, d): \n        for j in range(0, d): \n            if i > 0 and j > 0: \n                if steps + i + j > d: \n                    return False\n    return True\n \ndef check_path(steps, d): \n    ''' \n    Write a function that checks if the path reaches a point of form (d, 0) from origin to origin (x, y). \n    ''' \n    if steps == d: \n        return True\n    if steps < d: \n        return False\n    if steps > d: \n        return False\n    for i in range(0, d): \n        for j in range(0, d): \n            if i > 0 and j > 0: \n                if steps + i + j > d: \n                    return False\n    return True\n "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return steps + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d < 0:\n        return -1\n    else:\n        return steps + min_Jumps(steps+1, d-1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    elif d == 1: \n        return min_Jumps(steps-1, d) \n    else: \n        return min(min_Jumps(steps-1, d), min_Jumps(steps, d-1)) \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Create an array with the number of jumps to reach the given point of form (d, 0)\n    s = [0 for i in range(steps+1)]\n    s[0] = 1\n    \n    # Define the point of origin to start at\n    q = [0, 0]\n    \n    # Keep going through the rest of the steps\n    for j in range(1, steps+1): \n        \n        # Check if the point of origin is reached\n        if (q[0], q[1]) == (d[0], d[1]):\n            return s[j]\n            \n        # Check if the point of the current step has a previous point to reach the origin\n        if s[j-1] > 1:\n            # Jump the current step\n            s[j] = s[j-1] + 1\n        \n        # If the point of current step is not reached, increase the direction of the current step\n        else:\n            q = [q[0], q[1]]\n            q[0] += 1\n            \n    # If we reached the final step, return the number of jumps required\n    return s[steps]"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def check_jumps(x, y):\n        '''\n        Eq. (41)\n        '''\n        return x == steps[x][y] and y == 0\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # looping till lenght of nums1 \n    for i in range(len(nums1)):\n        # looping till lenght of nums2\n        for j in range(len(nums2)):\n            # checking the condition to check for length of nums1 \n            if i==j:\n                pass\n            else:\n                # checking if list 1 contains element or not\n                if nums1[i]==nums2[j]:\n                    print(nums1[i],\" \",nums2[j],\" \",sep=\"\")\n                else:\n                    print(nums1[i],\" \",nums2[j],\" \",sep=\"\",end=\" \")\n    return\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Find min and max value of two list\n    #find which one has the min value \n    min_value=min(nums1)\n    max_value=max(nums1)\n    #check if the second list has the same value\n    if len(nums2)!= len(nums1):\n        #if true than return False\n        return False\n    #return boolean value if true\n    if nums1[0] == nums2[0]:\n        return False\n    #append the min value and check if its the max value\n    for i in range(len(nums1)):\n        if nums1[i] < min_value:\n            min_value=nums1[i]\n    #find the max value\n    if max_value == min_value:\n        return False\n    #find index of min value\n    if nums1.index(min_value)<nums2.index(min_value):\n        return False\n    return True\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # This method takes two lists and returns a list of new elements.\n    result = []\n    for i in range(len(nums1)):\n        result.append([])\n        for j in range(len(nums2)):\n            if nums1[i] < nums2[j]:\n                result[i].append(nums1[i])\n            elif nums1[i] > nums2[j]:\n                result[i].append(nums2[j])\n            else:\n                result[i].append(nums1[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list=[]\n    for i in nums1:\n        new_list.append(i/nums2)\n    return new_list\n    \ndef avg(nums1,nums2):\n    '''\n    Write a function to find the average of two numbers.\n    '''\n    return sum(nums1)/len(nums1)\n    \ndef max_min(nums):\n    '''\n    Write a function to find the maximum and minimum value in a list of numbers.\n    '''\n    return max(nums),min(nums)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # create a new list with appropriate length and elements\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        small_list = nums2\n        large_list = nums1\n    else:\n        small_list = nums1\n        large_list = nums2\n    \n    small_list.sort()\n    large_list.sort()\n    \n    #print(small_list,large_list)\n    for i in range(len(small_list)):\n        if i % 2 == 0:\n            small_list[i] = small_list[i] // 2\n            #print(small_list[i])\n        else:\n            small_list[i] = small_list[i] * 3 + large_list[i]\n            #print(small_list[i])\n    return small_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    dic = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in dic:\n            dic[nums1[i]] = 1\n        else:\n            dic[nums1[i]] += 1\n    for i in range(len(nums2)):\n        if nums2[i] not in dic:\n            dic[nums2[i]] = 1\n        else:\n            dic[nums2[i]] += 1\n    res = []\n    for i in dic:\n        if dic[i] % 2 == 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)>len(nums2):\n        for i in range(len(nums1)):\n            nums1[i]/=nums2[i]\n    else:\n        for i in range(len(nums2)):\n            nums1[i]/=nums2[i]\n    return nums1\n    \n    \n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Divide the two lists by each other and return the results\n    #Return the index position of the two lists that had max difference\n    list_1 = []\n    list_2 = []\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            list1.append(nums1[i])\n        elif nums1[i] in nums2:\n            list2.append(nums1[i])\n        else:\n            continue\n    return list1,list2\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    while count < len(test_str):\n        if test_str[count] == \"0\":\n            test_str = test_str[:count]+test_str[count+1:]\n        else:\n            count += 1\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\" \", \"\")\n    test_str = test_str.split(\"-\")\n    new_list = []\n    for i in range(len(test_str)):\n        if test_str[i] == \"0\":\n            new_list.append(test_str[i])\n            new_list.append(\"0\")\n            new_list.append(test_str[i+1])\n        else:\n            new_list.append(test_str[i])\n            new_list.append(\"0\")\n            new_list.append(test_str[i+1])\n    return new_list\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\"10\",\"20\")\n    test_str = test_str.replace(\"5\",\"20\")\n    test_str = test_str.replace(\"2\",\"5\")\n    test_str = test_str.replace(\"6\",\"2\")\n    test_str = test_str.replace(\"8\",\"4\")\n    test_str = test_str.replace(\"3\",\"2\")\n    test_str = test_str.replace(\"9\",\"4\")\n    test_str = test_str.replace(\"1\",\"4\")\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if(len(test_str) <= 0):\n        return\n    # Write your code here\n    if (len(test_str)==1):\n        return test_str\n    # Write your code here\n    arr = []\n    arr = test_str.split(\" \")\n    arr = arr[::-1]\n    arr.pop()\n    res = \"\".join(arr)\n    return res\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    new_str = \"\"\n    while count < len(test_str):\n        if test_str[count] == \" \":\n            count += 1\n            continue\n        new_str += test_str[count]\n        count += 1\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    new_str = ''\n    \n    for i in test_str:\n        \n        if i.isdigit():\n            new_str += i\n        else:\n            new_str += '-'\n    \n    return new_str\n    \n    \ndef main():\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    test_str = '1234-456789'\n    print('Original String:', test_str)\n    print('Expected result:', '34-45-6789')\n    print('Actual result:', move_num(test_str))\n    print('Original String:', test_str)\n    print('Expected result:', '34-45-6789')\n    print('Actual result:', move_num(test_str))\n    \n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = test_str.replace(\"#\", \"\").replace(\"+\", \"\").replace(\"*\", \"\").replace(\"(\", \"\").replace(\")\", \"\")\n    new_str = new_str.replace(\" \",\"\").split(\".\")\n    if len(new_str) == 1:\n        print(\"I'm sure you want to use single digits\")\n    else:\n        print(new_str)\n        for i in range(0, len(new_str)):\n            for j in range(0, len(new_str[i])):\n                if j % 2 == 0:\n                    new_str[i][j] = \".\"\n    print(\"\\n\".join(new_str))\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == '':\n        return ''\n    elif test_str == '-':\n        test_str = test_str[0]\n        test_str = test_str.rstrip('-')\n        test_str += '-10'\n    else:\n        test_str = test_str.replace('-', '')\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('123', '456')\n    test_str = test_str.replace('321', '456')\n    test_str = test_str.replace('34', '456')\n    test_str = test_str.replace('9', '456')\n    test_str = test_str.replace('123', '456')\n    test_str = test_str.replace('123', '456')\n    test_str = test_str.replace('321', '456')\n    test_str = test_str.replace('321', '456')\n    test_str = test_str.replace('34', '456')\n    test_str = test_str.replace('34', '456')\n    test_str = test_str.replace('9', '456')\n    test_str = test_str.replace('9', '456')\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    for i in test_str:\n        if i.isnumeric():\n            test_str = test_str[:test_str.index(i)] + i + test_str[test_str.index(i)+1:]\n    return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # def largest_subset(a):\n    #     m = 1\n    #     for i in range(1,len(a)):\n    #         if (m) * a[i] >= sum(a):\n    #             m = m * a[i]\n    #         else:\n    #             m = m * a[i] - sum(a)\n    #     return m\n    \n    # return largest_subset(a)\n    l = 0\n    r = 0\n    sub = []\n    def sub_get(l,r,sub):\n        while l <= r:\n            m = (l+r) // 2\n            if m*m >= sum(sub):\n                return m\n            if m*m < sum(sub):\n                l = m + 1\n            else:\n                r = m - 1\n        return None\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # define the variables\n    subset_count = 0\n    l = len(a)\n    # define the set\n    numbers = set(a)\n    # find the number of divisibility pairs\n    for i in range(0, l):\n        for j in range(i + 1, l):\n            if a[i] % a[j] == 0:\n                subset_count += 1\n    # return the result\n    return subset_count\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = []\n    s = set(a)\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            # Check if the number can be divided by the first value\n            if s.issubset(set([a[i], a[j]])):\n                result.append([a[i], a[j]])\n    return result[0][1]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return nlargest(2,a"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = [0 for _ in range(len(a))]\n    for i in range(len(a)):\n        s[i] = 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = set()\n    for i in a:\n        if i not in s:\n            s.add(i)\n    return len(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n=len(a)\n    if n<1:\n        return 0\n    if n==1:\n        return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_sum = 0\n    max_sum_index = -1\n    min_val = a[0]\n    sum = 0\n    \n    for index, item in enumerate(a):\n        sum += item\n        if sum > max_sum:\n            max_sum = sum\n            max_sum_index = index\n        \n        if item < min_val:\n            min_val = item\n    \n    return max_sum_index + 1, max_sum\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    count = [1 for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                count[i] += count[j]\n    index = n\n    for i in range(n):\n        if count[i] < count[index]:\n            index = i\n    return index"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    max_index = 0\n    \n    if not a:\n        return 0\n    \n    # This is in-place, so pop is O(1).\n    \n    for i in range(len(a)):\n        if (a[i] % 2 == 0):\n            subset = a[:i] + a[i+1:]\n            if (len(subset) > max_index):\n                max_index = len(subset)\n        \n    return max_index\n    \n    # \n    # def largest_subset(a):\n    #     if not a:\n    #         return 0\n    #     if len(a) == 1:\n    #         return 1\n        \n    #     # This is in-place, so pop is O(1).\n    #     min_length = largest_subset(a[:-1])\n        \n    #     for i in range(min_length, len(a)):\n    #         if (a[i] % 2 == 0):\n    #             subset = a[:i] + a[i+1:]\n    #             if (len(subset) > min_length):\n    #                 min_length = len(subset)\n    #     return min_length\n        \n    # return largest_subset(a)"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n == 1):\n        return (arr1[0] + arr2[0])/2\n    elif (n == 2):\n        return (arr1[0] + arr2[1])/2\n    elif (n == 3):\n        return (arr1[1] + arr2[2])/2\n    elif (n == 4):\n        return (arr1[2] + arr2[3])/2\n    elif (n == 5):\n        return (arr1[3] + arr2[4])/2\n    elif (n == 6):\n        return (arr1[4] + arr2[5])/2\n    elif (n == 7):\n        return (arr1[5] + arr2[6])/2\n    elif (n == 8):\n        return (arr1[6] + arr2[7])/2\n    elif (n == 9):\n        return (arr1[7] + arr2[8])/2\n    elif (n == 10):\n        return (arr1[8] + arr2[9])/2\n    elif (n == 11):\n        return (arr1[9] + arr2[10])/2\n    elif (n == 12):\n        return (arr1[10] + arr2[11])/2\n    elif (n == 13):\n        return (arr1[11] + arr2[12])/2\n    elif (n == 14):\n        return (arr1[12] + arr2[13])/2\n    elif (n == 15):\n        return (arr1[13] + arr2[14])/2\n    elif (n == 16):\n        return (arr1[14] + arr2[15])/2\n    elif (n == 17):\n        return (arr1[15] + arr2[16])/2\n    elif (n == 18):\n        return (arr1[16] + arr2[17])/2\n    elif (n == 19):\n        return (arr1[17] + arr2[18])/2\n    elif (n == 20):\n        return (arr1[18] + arr2[19])/2\n    elif (n == 21):\n        return (arr1[19] + arr2[20])/2\n    elif (n == 22):\n        return (arr1[20] + arr2[21])/2\n    elif (n == 23):\n        return (arr1[21] + arr2[22])/2\n    elif (n == 24):\n        return (arr1[22] + arr2[23])/2\n    elif (n == 25):\n        return (arr1[23] + arr2[24])/2\n    elif (n == 26):\n        return (arr1[24] + arr2[25])/2\n    elif (n == 27):\n        return (arr1[25] + arr2[26])/2\n    elif (n == 28):\n        return (arr1[26] + arr2[27])/2\n    elif (n == 29):\n        return (arr1[27] + arr2[28])/2\n    elif (n == 30):\n        return (arr1[28] + arr2[29])/2\n    elif (n == 31):\n        return (arr1[29] + arr2[30])/2\n    elif (n == 32):\n        return (arr1[30] + arr2[31])/2\n    elif (n == 33):\n        return (arr1[31] + arr2[32])/2\n    elif (n == 34):\n        return (arr1[32] + arr2[33])/2\n    elif (n == 35):\n        return (arr1[33] + arr2[34])/2\n    elif (n == 36):\n        return (arr1[34] + arr2[35])/2\n    elif (n == 37):\n        return (arr1[35] + arr2[36])/2\n    elif (n == 38):\n        return (arr1[36] + arr2[37])/2\n    elif (n == 39):\n        return (arr1[37] + arr2[38])/2\n    elif (n == 40):\n        return (arr1[38] + arr2[39])/2\n    elif (n == 41):\n        return (arr1[39] + arr2[40])/2\n    elif (n == 42):\n        return (arr1[40] + arr2[41])/2\n    elif (n == 43):\n        return (arr1[41] + arr2[42])/2\n    elif (n == 44):\n        return (arr1[42] + arr2[43])/2\n    elif (n == 45):\n        return (arr1[43] + arr2[44])/2\n    elif (n == 46):\n        return (arr1[44] + arr2[45])/2\n    elif (n == 47):\n        return (arr1[45] + arr2[46])/2\n    elif (n == 48):\n        return (arr1[46] + arr2[47])/2\n    elif (n == 49):\n        return (arr1[47] + arr2[48])/2\n    elif (n == 50):\n        return (arr1[48] + arr2[49])/2\n    elif (n == 51):\n        return (arr1[49] + arr2[50])/2\n    elif (n == 52):\n        return (arr1[50] + arr2[51])/2\n    elif (n == 53):\n        return (arr1[51] + arr2[52])/2\n    elif (n == 54):\n        return (arr1[52] + arr2[53])/2\n    elif (n == 55):\n        return (arr1[53] + arr2[54])/2\n    elif (n == 56):\n        return (arr1[54] + arr2[55])/2\n    elif (n == 57):\n        return (arr1[55] + arr2[56])/2\n    elif (n == 58):\n        return (arr1[56] + arr2[57])/2\n    elif (n == 59):\n        return (arr1[57] + arr2[58])/2\n    elif (n == 60):\n        return (arr1[58] + arr2[59])/2\n    elif (n == 61):\n        return (arr1[59] + arr2[60])/2\n    elif (n == 62):\n        return (arr1[60] + arr2[61])/2\n    elif (n == 63):\n        return (arr1[61] + arr2[62])/2\n    elif (n == 64):\n        return (arr1[62] + arr2[63])/2\n    elif (n == 65):\n        return (arr1[63] + arr2[64])/2\n    elif (n == 66):\n        return (arr1[64] + arr2[65])/2\n    elif (n == 67):\n        return (arr1[65] + arr2[66])/2\n    elif (n == 68):\n        return (arr1[66] + arr2[67])/2\n    elif (n == 69):\n        return (arr1[67] + arr2[68])/2\n    elif (n == 70):\n        return (arr1[68] + arr2[69])/2\n    elif (n == 71):\n        return (arr1[69] + arr2[70])/2\n    elif (n == 72):\n        return (arr1[70] + arr2[71])/2\n    elif (n == 73):\n        return (arr1[71] + arr2[72])/2\n    elif (n == 74):\n        return (arr1[72] + arr2[73])/2\n    elif (n == 75):\n        return (arr1[73] + arr2[74])/2\n    elif (n == 76):\n        return (arr1[74] + arr2[75])/2\n    elif (n == 77):\n        return (arr1[75] + arr2[76])/2\n    elif (n == 7"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n = len(arr1) + len(arr2)\n    if n < 2:\n        return None\n    return (arr1[n//2] + arr2[n//2])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    if len(arr1) < len(arr2):\n        return sorted_arr1[n // 2]\n    elif len(arr1) > len(arr2):\n        return sorted_arr2[n // 2]\n    else:\n        return sorted_arr1[n // 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        if len(arr1) > len(arr2):\n            if arr1[len(arr1)//2] > arr2[len(arr2)//2]:\n                return arr1[len(arr1)//2]\n            else:\n                return arr2[len(arr2)//2]\n        else:\n            if arr1[len(arr1)//2] > arr2[len(arr2)//2]:\n                return arr1[len(arr1)//2]\n            else:\n                return arr2[len(arr2)//2]\n    else:\n        if len(arr1) > len(arr2):\n            if arr1[len(arr1)//2] < arr2[len(arr2)//2]:\n                return arr1[len(arr1)//2]\n            else:\n                return arr2[len(arr2)//2]\n        else:\n            if arr1[len(arr1)//2] < arr2[len(arr2)//2]:\n                return arr1[len(arr1)//2]\n            else:\n                return arr2[len(arr2)//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr1[1])/2\n    else:\n        return get_median(arr1, arr2, n-1) + get_median(arr1, arr2, n-2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    median1 = arr1[0] if len(arr1) > 0 else None\n    median2 = arr2[0] if len(arr2) > 0 else None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 1:\n        return None\n    \n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return (arr1[n//2] + arr2[n//2])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Edge cases\n    if n == 1:\n        if len(arr1) == 1:\n            return arr1[0]\n        elif len(arr2) == 1:\n            return arr2[0]\n        else:\n            return (arr1[len(arr1)//2] + arr2[len(arr2)//2])/2\n    else:\n        left = 0\n        right = n - 1\n        mid = 0\n        if len(arr1) < len(arr2):\n            left = len(arr1)\n        else:\n            left = len(arr2)\n        if len(arr1) == len(arr2):\n            right = len(arr1)\n        else:\n            right = len(arr2)\n        if len(arr1) >= len(arr2):\n            mid = (left + right) // 2\n        else:\n            mid = (left + right) // 2 + 1\n        if mid == 1:\n            return arr1[mid - 1]\n        else:\n            return (arr1[mid - 1] + arr2[mid - 1]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the two lists with the same element\n    if len(arr1) < len(arr2):\n        arr = arr2\n        arr1 = arr\n    else:\n        arr = arr1\n        arr1 = arr\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        mid1 = arr1[n//2]\n        mid2 = arr2[n//2]\n    else:\n        mid1 = arr1[n//2]\n        mid2 = arr2[n//2]\n    median = (mid1 + mid2)/2\n    return median\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(x,n) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        lst.append(nums[i]**n)\n    return lst\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l = []\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(x, n):\n        p = 1\n        while n:\n            p = p * x\n            n -= 1\n        return p\n    \n    p = power(nums, n-1)\n    if n < 0:\n        p = power(p, n-1)\n    return p"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Implement me\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    return nums[n-2]**nums[n-1]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==1:\n        return nums\n    else:\n        return [nth_nums(i,n-1) for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    powers = []\n    for num in nums:\n        powers.append(num ** n)\n    return powers\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n*x for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def fac(n):\n        if n == 1:\n            return n\n        else:\n            return n * fac(n - 1)\n    return [fac(n) for n in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    x=1\n    y=1\n    for i in range(len(nums)):\n        x=x*nums[i]\n    return x\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    print(string.upper())\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == string.upper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = str(string.upper())\n    return string\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_chars = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for char in string:\n        if char not in upper_chars:\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = string.upper()\n    return upper_string\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = string.upper()\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    intermediate_list = [newList[0], newList[-1]] \n    newList = newList[1:-1] \n    intermediate_list.extend(newList) \n    return intermediate_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = len(newList)\n    print(f\"New list is : {newList}\\n\")\n    for i in range(a): \n        newList[i], newList[a - i - 1] = newList[a - i - 1], newList[i]\n    print(\"New list after swap is : \")\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = newList[0]\n    new_list2 = newList[len(newList) - 1]\n    new_list.append(new_list2)\n    return new_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #store the first and last element of list\n    first_element = newList[0]\n    last_element = newList[-1]\n    #swap the elements\n    newList[0] = last_element\n    newList[-1] = first_element\n    #return the list\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList.reverse()\n    first = newList[0]\n    second = newList[-1]\n    newList[0] = second\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList.append(newList.pop())\n    newList.reverse()\n    newList.append(newList.pop())\n    return newList\n    \n    \ndef reverse_List(newList): \n    '''\n    Write a python function to return the elements of a given list in reverse order.\n    '''\n    newList.reverse()\n    newList.append(newList.pop())\n    newList.reverse()\n    newList.append(newList.pop())\n    return newList\n    \n    \ndef insert_at(newList, element): \n    '''\n    Write a python function to add an element in a given list at a given index.\n    '''\n    newList.append(element)\n    newList.insert(0,element)\n    return newList\n    \n    \ndef delete_at(newList, index): \n    '''\n    Write a python function to delete an element at a given index.\n    '''\n    newList.pop(index)\n    newList.remove(element)\n    return newList\n    \n    \ndef bubble_sort(newList): \n    '''\n    Write a python function to sort a given list in descending order.\n    '''\n    for index in range(0, len(newList) - 1):\n        for element in range(index + 1, len(newList)):\n            if newList[element] < newList[index]:\n                temp = newList[element]\n                newList[element] = newList[index]\n                newList[index] = temp\n    return newList\n    \n    \ndef selection_sort(newList): \n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    for index in range(len(newList) - 1):\n        lowest = index\n        for element in range(index + 1, len(newList)):\n            if newList[element] < newList[lowest]:\n                lowest = element\n        temp = newList[index]\n        newList[index] = newList[lowest]\n        newList[lowest] = temp\n    return newList\n    \n    \ndef merge(newList): \n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        temp = []\n        for index in range(len(newList)):\n            if index == 0:\n                temp.append(newList[index])\n            elif newList[index] < temp[-1]:\n                temp.append(newList[index])\n            else:\n                temp.append(newList[index])\n        return temp + newList[index:]\n    \n    \ndef merge_sort(newList): \n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        # Find the midpoint of the list\n        middle = len(newList) // 2\n        # Sort first half\n        left = newList[:middle]\n        # Sort the remaining half\n        right = newList[middle:]\n        # Merge the sublists\n        left = merge_sort(left)\n        right = merge_sort(right)\n        # Merge the sublists\n        return merge(left) + righ"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i = 0\n    j = len(newList) - 1\n    \n    while i < j: \n        temp = newList[i]\n        newList[i] = newList[j]\n        newList[j] = temp \n        i = i + 1\n        j = j - 1\n    \n    return newList\n    \n    \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = newList[1:len(newList)] + newList[0:1]\n    return new_list\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 2 * r**2\n    area = (4 * math.pi * (r**2)) / 3\n    if s >= area :\n        print (\"Area of a triangle with a given radius:\", area)\n    else :\n        print(\"Area of a triangle with a given radius:\", s)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    sides = r*2\n    area = 0\n    for side in range(sides) :\n        if side**2 == sides :\n            area = side\n            break\n        if side**2 <= sides :\n            area += side\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return r**2 * math.pi\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef triangle_perimeter(a, b, c) :  \n    '''\n    Write a python function to find the perimeter of the triangle formed by the three sides of a, b, c.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef line_intersection(a, b, c, d) :  \n    '''\n    Write a python function to find the point on the line between the two points.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef line_intersection_no_vars(a, b, c, d, e, f) :  \n    '''\n    Write a python function to find the point on the line between the two points.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef triangle_intersection(a, b, c, d, e, f) :  \n    '''\n    Write a python function to find the point on the triangle where the angle between the two sides of the triangle and the line between the two points is equal to the angle between the two lines.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_vars_no_other_vars_no_other_vars(a, b) :  \n    '''\n    Write a python function to find the number of ways a and b can be connected.\n    '''\n    # Your code here\n    # your code here\n    pass\n    \ndef connect_no_vars_no_other_"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Fill in this line\n    return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r == 0) :\n        return 0\n    if (r == 1) :\n        return 1\n    if (r == 2) :\n        return 4\n    if (r > 2) :\n        area = (r**2 * 3) / 2\n        return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (4*3.14*(r**2))/3.0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = sqrt(2*r*r - 4*r*r*r)\n    b = sqrt(2*r*r*r - 4*r*r*r)\n    return (b*b-4*a*r*r)/(2*a)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # try:\n    #     p = (3 * 4 / 3) * math.sin(math.pi / 3)\n    #     print(f'The area of the triangle with radius {r} is {(3 * 4 / 3) * math.sin(math.pi / 3)}')\n    # except:\n    #     print('Error in calculating the area of the triangle!')\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    for x in range(3, r, 2) :  \n        for y in range(2, r, 2) :  \n            a = (x*y)**(1/2)  \n            if a > 0 :  \n                print(a)  \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = end or len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start == end:\n        return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start==end:\n        return 0\n    \n    middle = (start+end)//2\n    if array[middle]<array[middle+1]:\n        return middle+1\n    else:\n        return find_First_Missing(array,start,middle-1)\n    \n    \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second missing number from a sorted list of natural numbers.\n    '''\n    if start==end:\n        return 0\n    \n    middle = (start+end)//2\n    if array[middle]>array[middle+1]:\n        return middle+1\n    else:\n        return find_Second_Missing(array,middle+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    while start<=end:\n        m=array[start]+array[end]\n        if m<=0:\n            start+=1\n        elif m>0:\n            end-=1\n    return start+1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    for i in range(start,end+1):\n        if array[i]==end:\n            end=i\n    return end\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end):\n        if array[i] == None:\n            return i\n    return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start==end:\n        return end\n    if array[end]!=array[start]:\n        return find_First_Missing(array,end+1,end)\n    else:\n        return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end == 0:\n        end = 1\n    while end <= len(array):\n        index = start\n        while index <= end and array[index] > array[index-1]:\n            index += 1\n        array[index-1],array[index] = array[index],array[index-1]\n        end += 1\n    return array[start:end]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    for i in range(start,end):\n        if array[i] > array[i+1]:\n            return array[i+1]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    replaced_str = ''\n    for char in string:\n        if char!='':\n            replaced_str += char\n    return replaced_str\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for char in string:\n        if char!='' and char!= '\\n':\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    result = ''\n    for i in string:\n        if i!='':\n            result += i\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \ndef main():\n    print(\"Function to replace spaces in a string\")\n    string = input(\"Enter a string to replace spaces: \")\n    print(replace_spaces(string))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    output = \"\"\n    for i in range(len(string)):\n        if string[i] == \" \":\n            output += \"%\"\n        else:\n            output += string[i]\n    return output\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for i in range(0, len(list)):\n        if list[i]%2 == 0:\n            even_nums.append(list[i])\n    return even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    print(\"Even numbers in the list are:\", even_numbers)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Even_num=[]\n    for i in list: \n        if i % 2 == 0: \n            Even_num.append(i)\n    return Even_num \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = [] \n    for number in list: \n        if number % 2 == 0: \n            even_num.append(number) \n    return even_num \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list: \n        if num % 2 == 0: \n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    res=[]\n    for i in list:\n        if i % 2 ==0:\n            res.append(i)\n    return res\ndef PrintList(list):\n    '''\n    Write a python function to print all the even numbers from a list.\n    '''\n    for i in list:\n        if i % 2 ==0:\n            print(i)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list: \n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # define a for loop\n    for x in list:\n        if x % 2 == 0:\n            yield x\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_of_evens = []\n    even_list = []\n    for element in list:\n        if element%2 == 0:\n            list_of_evens.append(element)\n    return list_of_evens\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Adjacent coordinates\n    # This code will search for the coordinates in a given list of coordinates\n    adjacents = [(ele[0], ele[1]+1), (ele[0], ele[1]-1), (ele[0]+1, ele[1]), (ele[0]-1, ele[1])]\n    return [ele for ele in adjacents if ele in sub]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        return sub[ele[1]]\n    else:\n        sub.append(ele)\n        return adjac(ele[1:], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele[0]+sub[0], ele[1]+sub[1]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [(ele[0] + ele[1], ele[0] - ele[1], ele[0] * ele[1], ele[1] + ele[0], ele[1] - ele[0], ele[1] * ele[0]) for ele in sub] \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (0,0):\n        return sub\n    if ele[0] > 0:\n        sub.append((ele[0], ele[1] - 1))\n    if ele[0] < n-1:\n        sub.append((ele[0] + 1, ele[1] - 1))\n    if ele[1] > 0:\n        sub.append((ele[0], ele[1] + 1))\n    if ele[1] < m-1:\n        sub.append((ele[0], ele[1] + 1))\n    return adjac(ele = ele[0], sub = sub) + adjac(ele = ele[1], sub = sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return\n    sub.append(ele)\n    adjac(ele[0], sub)\n    adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele)!= 2: \n        return sub\n    if ele[0] == ele[1]: \n        sub.append((ele[0] + ele[0] + ele[0]) % 10)\n        sub.append((ele[1] + ele[1] + ele[1]) % 10)\n    else: \n        sub.append(ele[0])\n        sub.append(ele[1])\n        sub.append(ele[1] + ele[0])\n    adjac(ele[:2], sub) \n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return sub\n    else: \n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        sub.remove(ele)\n    for i in range(ele[0] + 1, ele[0] + 2):\n        for j in range(ele[1] + 1, ele[1] + 2):\n            if i >= 0 and i < len(grid[0]) and j >= 0 and j < len(grid):\n                if grid[i][j] == '.':\n                    pass\n                elif grid[i][j] == 'o':\n                    sub.append((i, j))\n                else:\n                    sub.append((i, j))\n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele)!= 2: \n        raise ValueError(\"invalid coordinate tuple\")\n    x,y = ele\n    sub = []\n    if x+1 < 10: \n        sub.append((x+1, y))\n    if y+1 < 10: \n        sub.append((x, y+1))\n    if x-1 >= 0: \n        sub.append((x-1, y))\n    if y-1 >= 0: \n        sub.append((x, y-1))\n    return sub \n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string\n    words = text.split()\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\")\n    text = text.replace(\"\\n\",\"\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = re.sub(r'[\\s]+', \"_\", text)\n    text = re.sub(r'[ ]+', \" \", text)\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for word in text.split():\n        if word!= \" \":\n            new_text += word.replace(\" \",\"_\")\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # start with an empty string\n    string = \"\"\n    # iterate through the text\n    for char in text:\n        # if the char is an underscore:\n        if char == '_':\n            # add a underscore to the string\n            string += '_'\n        # if it is not a space:\n        elif char!='':\n            # add a underscore to the string\n            string += '_'\n            # add the next char to the string\n            string += char\n    # return the string\n    return string\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for char in text:\n        if char =='' or char == '\\t' or char == '\\n':\n            result += char + '_'\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('\\t', '_t')\n    text = text.replace('\\n', '_n')\n    text = text.replace('\\r', '_r')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    s = ''\n    for char in text:\n        if char.isspace():\n            s += '_'\n        else:\n            s += char\n    return s\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \"\".join([s.replace(\" \",\"_\") for s in text.split()])\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('  ','_').replace(' ','_'"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    new_list=[]\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            new_list.append(0)\n        else:\n            new_list.append(num_list[i])\n    return new_list\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize result with 0\n    result = []\n    # loop through the list\n    for i in range(len(num_list)):\n        # check if it is 0\n        if num_list[i] == 0:\n            result.append(num_list[i:])\n            # move it\n            num_list[i:]= 0\n    return result\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, item in enumerate(num_list):\n        if item == 0:\n            num_list.pop(index)\n            num_list.append(0)\n            break\n    \n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result = []\n    i = 0\n    for num in num_list:\n        if num!= 0:\n            result.append(num)\n            i += 1\n    if i == len(num_list):\n        print(\"-1\")\n    else:\n        print(f'{i} = {result}')\n    return result\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result = []\n    for num in num_list:\n        if num == 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    list_num = []\n    for i in range(0, len(num_list)):\n        if num_list[i] == 0:\n            list_num.append(i)\n    for i in range(0, len(num_list)):\n        num_list.insert(i, 0)\n    return num_list, list_num\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Your code here\n    if len(num_list)==0:\n        return\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.append(0)\n    print(num_list)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR the values\n    sum_xor = 0\n    for i in range(0,n,2) : \n        sum_xor += arr[i]\n    # return the sum\n    return sum_xor \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s += (arr[i]^arr[j])\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #write your code here\n    return 0\n    \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        for j in range(i+1, n) : \n            ans = ans ^ arr[i] ^ arr[j]\n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total=0\n    for i in range(n) : \n        if arr[i]==0 : \n            total=total+0\n        else : \n            total=total+1\n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + arr[i]\n    return sum\n    \ndef pair_xor_Sum_3(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_4(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_5(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_6(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_7(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_8(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_9(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_10(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_11(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_12(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_13(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_14(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_15(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_16(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_17(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_18(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_19(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_20(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_21(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_22(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_23(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_24(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_25(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_26(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_27(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n    return sum\n    \ndef pair_xor_Sum_28(arr,n) : \n    '''\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    a=0\n    b=0\n    for i in range(n):\n        a=a^arr[i]\n    for i in range(n):\n        b=b^arr[n-i-1]\n    return a^b\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0,len(arr)-1,2):\n        x += arr[i] * arr[i+1]\n    print(x)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0,len(arr)-1) : \n        if (arr[i] & arr[i+1]) == 0 :\n            res += arr[i] ^ arr[i+1]\n    return res\n    \n    \ndef pair_xor_Sum_By_Binary(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0,len(arr)-1) : \n        if arr[i] ^ arr[i+1] == 0 :\n            res += arr[i]\n    return res\n    \n    \ndef pair_xor_Sum_By_Set(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0,len(arr)-1) : \n        if arr[i] & arr[i+1] == 0 :\n            res += arr[i]\n    return res\n    \n    \ndef main() : \n    arr = [1,2,3,4,5,6,7]\n    #arr = [1,2,3,4,5,6,7]\n    #arr = [0,0,0,0,0,0,0]\n    #arr = [4,4,4,4,4,4,4]\n    #arr = [4,4,4,4,4,4,4]\n    #arr = [0,0,0,0,0,0,0]\n    print(pair_xor_Sum_By_Binary(arr,len(arr)))\n    print(pair_xor_Sum_By_Set(arr,len(arr)))\n    print(pair_xor_Sum(arr,len(arr)))\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    answer = 0\n    for i in range(n-1):\n        answer = answer ^ arr[i]\n    return answer\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    length = len(iterable)\n    if length <= 1:\n        return iterable\n    else:\n        left = []\n        right = []\n        for i in range(0, length - 1):\n            if iterable[i] > iterable[i + 1]:\n                left.append(iterable[i])\n            else:\n                right.append(iterable[i])\n        heapq.heapify(left)\n        heapq.heapify(right)\n        for i in range(0, length - 1):\n            iterable[i] = right[0]\n            heapq.heappushpop(right, iterable[i])\n        for i in range(0, length - 1):\n            iterable[i] = left[0]\n            heapq.heappushpop(left, iterable[i])\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable == None:\n        return None\n    if iterable == []:\n        return []\n    hq.heapify(iterable)\n    return hq.nlargest(1, iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: x.age)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable.sort(key = lambda x: x.value, reverse = True)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=hq.heapq.nlargest, reverse=True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    res = []\n    for i in iterable:\n        res.append((i, 1))\n    hq.heapify(res)\n    while res:\n        i, weight = hq.heappop(res)\n        yield i, weight\n    for i in iterable:\n        yield (i, 0)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def swap(s,i,j):\n        # this will swap the first i elements and the last j elements of list\n        temp = s[i]\n        s[i] = s[j]\n        s[j] = temp\n    def quick_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[0]\n        less = []\n        greater = []\n        for i in range(1,len(arr)):\n            if arr[i] < pivot:\n                less.append(arr[i])\n            else:\n                greater.append(arr[i])\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n    \n    return quick_sort(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return heapq.heappop(heap)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: x.value, reverse=True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: (x[1], x[0]))\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_profit = 0\n    total_loss = 0\n    for i in range(len(actual_cost)):\n        if actual_cost[i] < sale_amount:\n            total_profit += actual_cost[i]\n            total_loss += sale_amount - actual_cost[i]\n        else:\n            total_profit += actual_cost[i]\n            total_loss += sale_amount - actual_cost[i]\n    return [total_profit,total_loss]\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (sale_amount <= actual_cost):\n        print(actual_cost-sale_amount)\n        print(actual_cost-sale_amount)\n        return\n    else:\n        print('fail')\n        return\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    import numpy as np\n    import numpy.linalg as linalg\n    import numpy.random as rnd\n    import time\n    import random\n    random.seed(0)\n    \n    n = actual_cost.shape[0]\n    \n    # calculate probabilities\n    p_0 = (n*np.ones((n,1)))/n\n    p_1 = np.zeros((n,1))\n    p_1 = p_1.T\n    p_1[0,0] = 1.0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in actual_cost:\n        if i < sale_amount:\n            return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Check the type of the inputs\n    if actual_cost is None:\n        return True\n    if actual_cost < 0:\n        return False\n    if sale_amount < 0:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    '''\n    the `sale_amount` is a float number\n    the profit should be recorded as a positive float number\n    the profit should be recorded as a negative float number\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Your code here\n    if actual_cost>sale_amount:\n        print(\"The sale amount cannot be greater than the actual cost\")\n        return False\n    if actual_cost-sale_amount<0:\n        print(\"The sale amount cannot be greater than the actual cost\")\n        return False\n    if actual_cost<sale_amount:\n        print(\"The sale amount cannot be less than the actual cost\")\n        return False\n    if actual_cost+sale_amount>11000:\n        print(\"The sale amount cannot be greater than 11000\")\n        return False\n    if actual_cost-sale_amount==0:\n        print(\"The sale amount cannot be zero\")\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost - sale_amount) < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_temp = (v * 9.0 / 5) + 32\n    wind_chill_c = wind_chill_temp - 273.15\n    if wind_chill_c > 100:\n        wind_chill_c = wind_chill_c - 100\n    return round(wind_chill_c,2)\ndef cloud_mask(temp,pressure):\n    '''\n    Write a function that takes as input an air temperature and pressure in celsius and returns a boolean whether the temperature is in the cloud mask.\n    '''\n    mask = True\n    if temp < 0.0:\n        mask = False\n    if temp > 500.0:\n        mask = False\n    if pressure < 0.0:\n        mask = False\n    if pressure > 1013.25:\n        mask = False\n    return mask\ndef wind_spill(v, t, k, alpha, beta):\n    '''\n    Write a function that takes as input the wind speed in km/h and the time in seconds, the wind chill index and the alpha and beta parameters, and returns the wind spillage level based on the formula.\n    '''\n    wind_spill = (v*9.0/5)+32\n    if wind_spill >= 1015:\n        wind_spill = wind_spill - 1015\n    if wind_spill < 0:\n        wind_spill = 0\n    if wind_spill >= 1210:\n        wind_spill = wind_spill - 1210\n    if wind_spill < 0:\n        wind_spill = 0\n    if wind_spill < 2.5:\n        wind_spill = wind_spill * 0.94\n    if wind_spill < 4.0:\n        wind_spill = wind_spill * 0.87\n    if wind_spill < 8.0:\n        wind_spill = wind_spill * 0.92\n    if wind_spill < 12.0:\n        wind_spill = wind_spill * 0.96\n    if wind_spill < 15.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 20.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 25.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 30.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 35.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 40.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 50.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 60.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 70.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 80.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 90.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 100.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 101.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 105.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 115.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 120.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 130.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 140.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 150.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 160.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 170.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 180.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 190.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 210.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 230.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 240.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 250.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 270.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 300.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 350.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 400.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 450.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 500.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 550.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 600.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 650.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 700.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 750.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 800.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 900.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 1000.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 1150.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 1250.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 1300.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 1350.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 1450.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 1500.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 1750.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 1850.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 2000.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 2150.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 2200.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 2200.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 2300.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 2400.0:\n        wind_spill = wind_spill * 0.97\n    if wind_spill < 2600.0:\n        wind_spill = wind_spill "
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # get the wind speed\n    s = v * 3.6\n    # get the air temperature\n    t = 273.15 - t\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    try:\n        temp=t*9/5+32\n        v=math.ceil(v)\n        n=v-9.0\n        w=0.75+1.13*math.log((n-0.75)/(0.75+0.26*math.exp(-n/10.0)),10)\n        z=((9.0*w-32)/5.0)\n        h=(9.0*w+32)/5.0\n        c=temp+((v-9)**2.0)*(z+z)\n        return round(c)\n    except:\n        print(\"Error: Invalid value.\")\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Calculate the wind chill index\n    wind_chill_index = v*(9/5) + 32\n    wind_chill_index = round(wind_chill_index)\n    #Convert the wind_chill_index from a given wind_chill_index to an integer\n    wind_chill_index = int(wind_chill_index)\n    #Convert the temperature to a given temperature_c\n    temperature_c = (t * 9/5) + 32\n    #Convert the temperature_c to a given temperature_f\n    temperature_f = temperature_c*(9/5)\n    #Calculate the wind chill temperature based on the wind chill index and the temperature in celsius\n    wind_chill_index_c = wind_chill_index * math.exp((temperature_c - 32) / 9)\n    #Return the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius\n    return round(wind_chill_index_c)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = 6300 - (v * 0.6215 * (t + 35))\n    return round(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = (v/3.6)*(9/5) + 35\n    return round(wind_chill,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return v * math.exp(-0.01*t)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 0:\n        v = -v\n        t = -t\n    w = 2.5\n    return math.log((v/w)/(v+w),10) + t\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return((v/3.6)*((9/5)*(t**4))+32)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (0.75 * v ** 5 + 0.62 * v ** 3 + 35.74) / (v ** 4 * (1 - 0.62 * t + 35.74))\n    return round(chill, 2)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names=[]\n    for name in sample_names:\n        if name.startswith(\"a\"):\n            names.append(name)\n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].islower():\n            count += len(name)\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for name in sample_names:\n        new_list.append(len(name.split()))\n    summation = sum(new_list)\n    return summation\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a list\n    nam_list = [item.lower() for item in sample_names]\n    # create a new list with all items in lowercase\n    nam_list = list(map(item.lower() for item in nam_list))\n    # create a new list with the number of letters\n    nam_list = list(map(len, nam_list))\n    # find the first item in nam_list\n    start_index = nam_list.index(min(nam_list))\n    # return the value\n    return start_index\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    with open('nam.txt', 'w') as namfile:\n        namfile.write('\\n'.join(sample_names))\n        namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('a')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('b')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('c')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('d')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('e')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('f')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('g')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('h')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('i')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('j')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('k')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('l')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('m')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('n')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('o')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('p')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('q')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('r')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('s')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().startswith('t')]))\n    namfile.close()\n    namfile = open('nam.txt', 'r')\n    nam = namfile.read()\n    namfile.close()\n    names = nam.split('\\n')\n    namfile = open('nam.txt', 'w')\n    namfile.write('\\n'.join([name for name in names if name.lower().starts"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sorted(sample_names)\n    n = 0\n    for name in sample_names:\n        if name[0] == 'a':\n            n += len(name)\n    return n\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names.sort()\n    for name in sample_names:\n        if name[0]!= 'a':\n            break\n        elif name[0] == 'a':\n            continue\n    length = len(sample_names) - len(sample_names.count(name[0]))\n    return length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name.islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # TODO: Write a function that, given a list of names, sums the length of each name and prints it out.\n    s = 0\n    for i in range(len(sample_names)):\n        if len(sample_names[i].split(\" \")[0]) < 3:\n            s += len(sample_names[i].split(\" \")[0])\n        else:\n            s += len(sample_names[i].split(\" \")[0])\n    print(f\"There are {s} names that start with a letter.\")\n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names.sort()\n    #for i in range(len(sample_names)):\n    #    if sample_names[i].startswith(\"a\"):\n    #        sample_names.remove(sample_names[i])\n    sample_nam = 0\n    for name in sample_names:\n        if name.startswith(\"a\"):\n            sample_nam += len(name)\n    return sample_nam\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    if len(items) == 0:\n        return ''\n    \n    current_item = items[0]\n    for item in items:\n        if item == current_item:\n            continue\n        else:\n            output.append(item)\n    return ''.join(output)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return [item.replace('(', '') for item in items]\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items == \"\": return \"None\"\n    if len(items) == 1: return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i, item in enumerate(items):\n        if re.match(r'\\(', item):\n            items[i] = item[1:-1]\n        else:\n            items[i] = item\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis.\n    # Replace \"(\" with \")\n    # Replace \"(\" and \")\" with \")\n    # Replace \"(\" and \")\" with \")\"\n    items = items.replace(')', ')')\n    items = items.replace('(', ')')\n    items = items.replace(')', ')')\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    # your code goes here\n    # logic to remove the parenthesis\n    my_list = []\n    for i in items:\n        if i == '(':\n            my_list.append('(')\n        elif i == ')':\n            if my_list[-1] == '(':\n                my_list.pop()\n            else:\n                my_list.append(')')\n    return ''.join(my_list)\n    \n    # DO NOT CHANGE THIS FUNCTION\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_string = ''\n    for i in items:\n        if i == '(':\n            new_string += ')'\n        elif i == ')':\n            new_string += '('\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def check_parenthesis(item):\n        return item == '('.join([''.join(x) for x in zip(*[iter(item)]*2)])\n    res = []\n    for item in items:\n        if check_parenthesis(item):\n            res.append(item)\n    return ''.join(res)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) < 1:\n        return []\n    if len(items) == 1:\n        return items\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\ndef remove_hyphen(items):\n    '''\n    Write a function to remove all hyphens from a string.\n    '''\n    if len(items) < 1:\n        return []\n    items = items.replace('-', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\ndef remove_noise(items):\n    '''\n    Write a function to remove all words with the word 'not' in a string.\n    '''\n    if len(items) < 1:\n        return []\n    items = items.replace('not', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\ndef remove_long_word(items):\n    '''\n    Write a function to remove words of length greater than 10.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if len(word) > 10:\n            return word\n    return items\ndef remove_start_end(items):\n    '''\n    Write a function to remove the strings before an end_token.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] == '#':\n            return word\n    return items\ndef remove_no_space(items):\n    '''\n    Write a function to remove all space from a string.\n    '''\n    if len(items) < 1:\n        return []\n    items = items.replace(' ', '')\n    return items\ndef remove_no_dot(items):\n    '''\n    Write a function to remove all dot from a string.\n    '''\n    if len(items) < 1:\n        return []\n    items = items.replace('.', '')\n    return items\ndef remove_numbers(items):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] == '#':\n            return word\n    return items\ndef remove_lower(items):\n    '''\n    Write a function to remove all lowercase letters from a string.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0].islower():\n            return word\n    return items\ndef remove_punctuation(items):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            return word\n    return items\ndef remove_symbols(items):\n    '''\n    Write a function to remove all symbols from a string.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] in ['#', '!', '?']:\n            return word\n    return items\ndef remove_word_punct(items):\n    '''\n    Write a function to remove all words and punctuation from a string.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            if word[0]!= word[-1]:\n                return word\n    return items\ndef remove_alpha_numeric(items):\n    '''\n    Write a function to remove all alpha numeric characters.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0].isalpha() and len(word) > 1:\n            return word\n    return items\ndef remove_space(items):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] =='':\n            return word\n    return items\ndef remove_punctuation_without_space(items):\n    '''\n    Write a function to remove all punctuation from a string without the space.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            if word[0]!= word[-1]:\n                return word\n    return items\ndef remove_punctuation_without_space(items):\n    '''\n    Write a function to remove all punctuation from a string without the space.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            if word[0]!= word[-1]:\n                return word\n    return items\ndef remove_punctuation_with_space(items):\n    '''\n    Write a function to remove all punctuation from a string with the space.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0]!= word[-1]:\n            return word\n    return items\ndef remove_punctuation_with_space(items):\n    '''\n    Write a function to remove all punctuation from a string with the space.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] == word[-1]:\n            return word\n    return items\ndef remove_punctuation_with_space(items):\n    '''\n    Write a function to remove all punctuation from a string with the space.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0]!= word[-1]:\n            return word\n    return items\ndef remove_punctuation_with_space(items):\n    '''\n    Write a function to remove all punctuation from a string with the space.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0] == word[-1]:\n            if word[0]!= word[-1]:\n                return word\n    return items\ndef remove_punctuation_with_space(items):\n    '''\n    Write a function to remove all punctuation from a string with the space.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        if word[0]!= word[-1]:\n            return word\n    return items\ndef remove_punctuation_with_space(items):\n    '''\n    Write a function to remove all punctuation from a string with the space.\n    '''\n    if len(items) < 1:\n        return []\n    words = items.split()\n    for word in words:\n        i"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # your code goes here\n    for i in items:\n        if i[-1] == '(':\n            i = i[:-1]\n        else:\n            i = i[:-1]\n    return i\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1 or n == 2:\n        return n\n    else:\n        return (n % 2) * 2 + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # initialize the dp array with 0 \n    dp = [0 for i in range(n)] \n    \n    # loop through all possible combinations for dp\n    for i in range(n): \n        dp[i] = (i+1) \n        for j in range(i): \n            dp[i] = max(dp[i], dp[j]+1) \n        \n    # return the nth nonagonal\n    return dp[n-1] \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return is_nonagonal(n - 1) + is_nonagonal(n - 2) \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1,n+1):\n        if n - i >= 0:\n            return n - i\n        else:\n            continue\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n_0_prime = n//2\n    if (n-n_0_prime) % 2 == 1:\n        return n_0_prime\n    else:\n        return n_0_prime*2\n    \ndef sum_of_squares(n):\n    '''\n    Write a function to calculate the sum of squares.\n    '''\n    return (n**2)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    print(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n<=0:\n        print(\"Number must be positive\")\n        return \n    if n==1:\n        print(1)\n        return \n    if n==2:\n        print(2)\n        return \n    if n%2==1:\n        print(n//2)\n        return\n    print(n//2)\n    return\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Write your code here\n    if n == 1 or n == 2: \n        return n\n    if n % 2 == 0: \n        return 1\n    else: \n        return 1 + is_nonagonal(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    print('test')\n    \n    if 'z' not in text:\n        return True\n    \n    if len(text) >1:\n        if text[0] == 'z' or text[0] == 'Z':\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_list = re.findall(r'\\w+', text)\n    print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)\n    if text_list[-1]=='z':\n        print('in the middle')\n        text_list = text_list[:-1]\n        print(text_list)\n    if text_list[0]=='z':\n        print('in the middle')\n        text_list = text_list[1:]\n        print(text_list)"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_double_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_double_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_double_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_double_triple_double_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_double_triple_double_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_double_triple_double_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_double_triple_double_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_triple_double_triple_double(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \"z\" and len(text_split) > 1:\n        return False\n    return True\ndef text_match_wordz_middle_double_triple_double_triple(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    if text_split[0] == \""
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile('z?(.)')\n    pattern = re.sub('^z?', '', pattern)\n    pattern = re.sub('z?z', '', pattern)\n    pattern = re.sub('z?zz', '', pattern)\n    pattern = re.sub('z?zzz', '', pattern)\n    pattern = re.sub('z?zzzz', '', pattern)\n    pattern = re.sub('z?zzzzz', '', pattern)\n    pattern = re.sub('z?zzzz', '', pattern)\n    pattern = re.sub('z?zzzzz', '', pattern)\n    pattern = re.sub('z?zzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub('z?zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '', pattern)\n    pattern = re.sub("
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text[0]!= \"z\" and text[-1]!= \"z\"\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    '''\n    text = \"Hey guys, my friend!!!\"\n    text = text.lower()\n    for index, char in enumerate(text):\n        if char == 'z' and index < len(text)-1:\n            return True\n        elif index == len(text)-1:\n            return False\n    '''\n    # my rule:\n    # 1. for every char except 'z' in text.\n    # 2. if text.index('z') < (len(text)-1)\n    # 3. return True\n    '''\n    pattern = r\"[a-z]+\"\n    text = re.findall(pattern,text)\n    # print(text)\n    if len(text) > 0:\n        for index, char in enumerate(text):\n            # print(char)\n            if char == 'z' and index < len(text)-1:\n                # print('z')\n                return True\n            elif index == len(text)-1:\n                # print('z')\n                return False\n    return False\n    '''\n    # my rule:\n    # 1. for every char except 'z' in text.\n    # 2. if text.index('z') > 0\n    # 3. return True\n    '''\n    pattern = r\"[a-z]+\"\n    text = re.findall(pattern,text)\n    # print(text)\n    if len(text) > 0:\n        for index, char in enumerate(text):\n            # print(char)\n            if char == 'z':\n                # print('z')\n                if index > 0:\n                    return True\n                else:\n                    return False\n            else:\n                # print('z')\n                return False\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) == 0:\n        return True\n    elif text[0] == 'z':\n        return False\n    else:\n        return text_match_wordz_middle(text[1:])\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text=re.sub(r'[^\\w\\s]','',text)\n    #print(\"text = \", text)\n    #print(\"text[0] = \", text[0])\n    #print(\"text[len(text)-1] = \", text[len(text)-1])\n    #print(\"text[0:2] = \", text[0:2])\n    #print(\"text[len(text)-2] = \", text[len(text)-2])\n    if text[0]==\"z\" or text[len(text)-1]==\"z\":\n        #print(\"text[0] = \", text[0])\n        #print(\"text[len(text)-1] = \", text[len(text)-1])\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=re.sub(r'[^\\w\\s]','',text)\n    #print(\"text = \", text)\n    #print(\"text[0] = \", text[0])\n    #print(\"text[len(text)-1] = \", text[len(text)-1])\n    #print(\"text[0:2] = \", text[0:2])\n    #print(\"text[len(text)-2] = \", text[len(text)-2])\n    if text[len(text)-1]==\"z\" or text[len(text)-2]==\"z\":\n        #print(\"text[0] = \", text[0])\n        #print(\"text[len(text)-1] = \", text[len(text)-1])\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0] == 'z'):\n        text_len = len(text)\n        if(text_len > 1 and text[0] == text[text_len - 1]):\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1] \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    len_arr = len(input) \n    k = k % len_arr\n    index = 0\n    while index < len_arr: \n        #print index,input[index] \n        input[index], input[k] = input[k], input[index] \n        k = k - 1\n        index = index + 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # code here\n    start = 0\n    end = len(input) - 1\n    if end < k:\n        print(\"Error: Array is too small.\")\n    else:\n        while start < end:\n            temp = input[start]\n            input[start] = input[end]\n            input[end] = temp\n            end -= 1\n            start += 1\n        print(\"Reverse array in order:\", input)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input)-k, -1, -1):\n        output.append(input[i])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # write your code here\n    return input[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    for i in range(0, length):\n        for j in range(0, (k - 1)):\n            temp = input[i]\n            input[i] = input[j]\n            input[j] = temp\n    print(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def swap_elements(arr, index1, index2):\n        if index1 >= index2:\n            return\n        temp = arr[index1]\n        arr[index1] = arr[index2]\n        arr[index2] = temp\n    arr = input[:]\n    for i in range(k):\n        swap_elements(arr, i, k-1)\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if (k>=len(input)):\n        return input\n    output = []\n    count = len(input)//k\n    if count==0:\n        output = input\n    elif count==1:\n        output = input[:count]\n    else:\n        for i in range(count):\n            output.append(input[count*i:count*(i+1)])\n            \n    return outpu"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = []\n    for i in range(k):\n        reverse.append(input[i])\n    reverse.reverse()\n    return reverse\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    # reverse input array and save it to output array\n    for i in range(len(input)):\n        output.append(input[-i-1])\n    # now do for k in range(0,len(input),1):\n    #    for i in range(k):\n    #        output.append(input[i])\n    #        k -= 1\n    # now return the reversed array\n    return output\n    \n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"The input is not a tuple\")\n    for key, value in test_dict.items():\n        if not isinstance(value, dict):\n            raise TypeError(\"Each item in the dict must be a dictionary\")\n    test_tup += (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for i in test_dict.items():\n        test_tup += (i[0],)\n        test_tup += (i[1],)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup\n    for i in test_dict:\n        new_tup += (i, test_dict[i])\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    for key in test_dict:\n        test_tup = test_tup + (key, test_dict[key])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup[0] + test_dict + test_tup[1] + test_dict + test_tup[2]\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #create a new tuple to add the key and the value to it\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    try:\n        new_tup = test_tup + test_dict\n    except TypeError:\n        print(\"The function cannot be added. This is likely an error.\")\n    except NameError:\n        print(\"Error. The variable has not been defined.\")\n    except ValueError:\n        print(\"The variable is not a number.\")\n    else:\n        return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if len(test_tup) == 1:\n        test_tup = test_tup + (test_dict,)\n    elif len(test_tup) == 2:\n        test_tup = test_tup + (test_dict[0], test_dict[1])\n    elif len(test_tup) == 3:\n        test_tup = test_tup + (test_dict[0], test_dict[1], test_dict[2])\n    elif len(test_tup) == 4:\n        test_tup = test_tup + (test_dict[0], test_dict[1], test_dict[2], test_dict[3])\n    elif len(test_tup) == 5:\n        test_tup = test_tup + (test_dict[0], test_dict[1], test_dict[2], test_dict[3], test_dict[4])\n    return test_tup\n    \ndef print_tuple(test_tup):\n    '''\n    Write a function to print a tuple. The output should be a tuple.\n    '''\n    print(test_tup)\n    \ndef main():\n    '''\n    Write a function to sort a tuple in the following way:\n    (1, 2, 3, 4, 5)\n    (1, 5, 4, 3, 2)\n    (4, 3, 2, 1, 5)\n    (1, 3, 5, 2, 4)\n    (4, 3, 2, 1, 5)\n    '''\n    test_tuple = (1, 2, 3, 4, 5)\n    test_tuple = add_dict_to_tuple(test_tuple, {1:2, 3:1, 5:4, 4:3, 2:5})\n    print_tuple(test_tuple)\n    \nmain("
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    return sum(cost[i][j] for i in range(len(cost)) for j in range(len(cost[i]))) / len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost == []:\n        return 0\n    \n    # construct a path using path list as a mapping\n    # return the average of the cells in path\n    def pathCalc(path):\n        totalSum = 0\n        for i in range(len(path) - 1):\n            totalSum += path[i][-1]\n        \n        return totalSum / len(path)\n    \n    # initialize matrix with all zeros\n    matrix = []\n    \n    for i in range(len(cost)):\n        matrix.append([])\n        for j in range(len(cost[0])):\n            matrix[i].append(0)\n    \n    # Add the first node to the matrix\n    matrix[0].append(cost[0][0])\n    \n    # loop through the rest of the nodes\n    for i in range(1, len(cost)):\n        for j in range(len(cost[0])):\n            # calculate the average of the next cells\n            totalSum = 0\n            for k in range(len(path)):\n                totalSum += path[k][j]\n            \n            # update the current cell with the path sum\n            matrix[i][j] = totalSum / len(path)\n    \n    return pathCalc(matrix)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    total_path_count = 0\n    for path in cost:\n        total_path_count += len(path)\n    avg = total_path_count / N\n    return avg\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = getPaths(cost)\n    paths = list(map(lambda path: path.pop(), paths))\n    return getAverage(paths)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m, n = len(cost), len(cost[0])\n    path = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i==0 or j==0:\n                path[i][j] = 0\n            elif i==1 or j==n:\n                path[i][j] = cost[i][j]\n            elif (i-1)==0 or (j-1)==n:\n                path[i][j] = path[i-1][j-1] + cost[i-1][j]\n            else:\n                path[i][j] = max(path[i-1][j], path[i][j-1]) + cost[i-1][j]\n    return path[m][n]/float(m*n)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #Initialize all cells as the 0 value\n    totalCost = 0\n    count = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # We use recursion, since we can't know whether the current cell is the bottom-left cell or not.\n    # This is why I decided to use a stack, a custom stack, and a variable for dp, which I will call for each cell.\n    stack = []\n    dp = [0 for i in range(len(cost))]\n    path = []\n    # We use recursion for the path to be the bottom-left cell.\n    def constructPath(currRow, currColumn, totalCost):\n        # I am assuming the stack is always in the right direction, so we will push the current cell to the stack\n        # I will use the stack, the current path, the cell we want to go to, and the cell we want to go to\n        # the cells that we have already visited, to the number of cells visited\n        # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n        stack.append((currRow, currColumn))\n        # We check if we have reached the end of the path, if we do, we have found the maximum path.\n        if currRow == len(cost) - 1 and currColumn == len(cost) - 1:\n            path.append([currRow, currColumn])\n            dp[currRow][currColumn] = totalCost / len(cost)\n        else:\n            dp[currRow][currColumn] = dp[currRow][currColumn]\n            # I will use the the current cell, the cell we want to go to, the cell we want to go to\n            # the cells that we have already visited, to the number of cells visited\n            # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n            dp[currRow][currColumn] = dp[currRow][currColumn] + max(dp[currRow - 1][currColumn], dp[currRow][currColumn - 1])\n            constructPath(currRow, currColumn, dp[currRow][currColumn])\n    \n    # Here we will use recursion to construct the path to the bottom-right cell.\n    # We will start at the top-left cell.\n    # It's time to construct the path, since this cell is the bottom-right cell.\n    constructPath(0, 0, 0)\n    # I am using a variable for the current dp, which I will call for the cell at the top of the stack.\n    currentPath = path[:]\n    # I am using a stack, in which I will push the current cell to the stack.\n    # I will use the stack, the current path, the cell we want to go to, and the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0]\n    # I am using a stack, in which I will push the current cell to the stack.\n    # I will use the stack, the current path, the cell we want to go to, and the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    stack.append((0, 0))\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + max(dp[0][1], dp[0][2])\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][1]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][2]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][1]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][2]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][1]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][2]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][1]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][2]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][1]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + dp[0][2]\n    # I am using the current cell, the cell we want to go to, the cell we want to go to\n    # the cells that we have already visited, to the number of cells visited\n    # I want to use a variable for the current dp, which I will call for the cell at the top of the stack\n    dp[0][0] = dp[0][0] + d"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    A = [0]*N\n    \n    for i in range(0,N):\n        for j in range(i,N):\n            A[i] += cost[j][i]\n            A[j] += cost[j][i]\n        A[i] = A[i]/N\n        A[i] = A[i]/N\n    return max(A)\n    \ndef minPathSum(grid):\n    '''\n    Given a square matrix of size N*N, return a cost matrix that is the same size as grid.\n    '''\n    N = len(grid)\n    cost = [[0 for x in range(N)] for y in range(N)]\n    \n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                cost[i][j] = 0\n                \n            if j>=i:\n                cost[i][j] = -1\n    \n    return cost\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    print(\"Max Average Of Path:\",end=\" \")\n    print(\"\\n\")\n    average = 0\n    n = len(cost)\n    for i in range(n):\n        average = average + cost[i][i]\n    average = average/n\n    print(f\"Average : {average}\")\n    print(\"\\n\")\n    return average\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        raise ValueError(\"Empty matrix\")\n    if len(cost) < 1:\n        raise ValueError(\"Matrix is empty\")\n    res = [0]\n    for i in range(len(cost)):\n        res.append(sum(cost[i]))\n    return res / len(cost)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_student={}\n    for s in students:\n        if (((s[1][0]>=h) and (s[1][1]>=w)) or ((s[1][0]<h) and (s[1][1]<w))):\n            new_student[s[0]]=s[1]\n    return new_student\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = sorted(students.items(),key = lambda x: x[1][1],reverse = True) #sort by weight\n    filter_list = []\n    #print(students)\n    for i in range(0,len(students)):\n        #print(students[i])\n        for j in range(i+1,len(students)):\n            if students[i][1][0] >= students[j][1][0] and students[i][1][1] >= students[j][1][1]:\n                filter_list.append(students[i])\n                filter_list.append(students[j])\n    if w == 'g' or w == 'G':\n        return filter_list\n    elif h == 'g' or h == 'G':\n        return filter_list\n    else:\n        return filter_list\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.values():\n        if student[1]>h and student[1]>w:\n            print(student[0], student[1])\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    sorted_students = sorted(students, key=lambda x: (x[1][0],x[1][1]))\n    for i in range(len(sorted_students)):\n        if(sorted_students[i][0] >= h and sorted_students[i][1] >= w):\n            return sorted_students[i]\n    return False\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = []\n    for student in students.keys():\n        student_weight = students[student][1]\n        if student_weight >= h and student_weight <= w:\n            filtered_students.append(student)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        student_height,student_weight = students[student]\n        if student_height < h and student_weight < w:\n            filtered_students[student] = student_height,student_weight\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_height = 200\n    min_weight = 80\n    filtered_students = []\n    for student in students:\n        if student[1] >= min_weight and student[1] >= min_height:\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for stu in students.values():\n        if stu[1][0] >= h and stu[1][1] >= w:\n            filtered_students.append(stu)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data=[]\n    for student in students:\n        if student[1][1]>h and student[1][0]>w:\n            filtered_data.append(student)\n    return filtered_data\n    \n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # TODO: Write your code here.\n    filtered_students = []\n    for student in students:\n        if student[1][0] >= h and student[1][1] >= w:\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([eq(nums1[i], nums2[i]) for i in range(len(nums1))])\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([1 for i, j in zip(nums1, nums2) if i == j])\n    \ndef count_by_key(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([1 for i, j in zip(nums1, nums2) if i == j])\n    \ndef count_first_greater_than_second(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([1 for i, j in zip(nums1, nums2) if i > j])\n    \ndef count_indices_set_x_times(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([1 for i, j in zip(nums1, nums2) if count_same_pair(nums1, nums2) > j])\n    \ndef count_indices_set_x_times_sorted(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([1 for i, j in zip(nums1, nums2) if count_same_pair(nums1, nums2) > j])\n    \ndef count_indices_set_x_times_sorted_by_key(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([1 for i, j in zip(nums1, nums2) if count_same_pair(nums1, nums2) > j])\n    \ndef count_indices_set_x_times_and_sorted(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([1 for i, j in zip(nums1, nums2) if count_same_pair(nums1, nums2) > j])\n    \ndef count_indices_set_x_times_and_sorted_by_key(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([1 for i, j in zip(nums1, nums2) if count_same_pair(nums1, nums2) > j])\n    \ndef main():\n    a = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]\n    b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    \n    c = []\n    \n    print(count_first_greater_than_second(a, b))\n    \n    print(count_indices_set_x_times(a, b))\n    \n    print(count_indices_set_x_times_sorted(a, b))\n    \n    print(count_indices_set_x_times_sorted_by_key(a, b))\n    \n    print(count_indices_set_x_times_and_sorted(a, b))\n    \n    print(count_indices_set_x_times_and_sorted_by_key(a, b))\n    \nmain()\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # find the index where both lists are the same value\n    m, n = len(nums1), len(nums2)\n    left_idx, right_idx = 0, 0\n    while left_idx < m and right_idx < n:\n        if nums1[left_idx] == nums2[right_idx]:\n            left_idx += 1\n            right_idx += 1\n        elif nums1[left_idx] < nums2[right_idx]:\n            left_idx += 1\n        else:\n            right_idx += 1\n    return left_idx - m\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Make sure that the two lists have the same length.\n    if len(nums1)!= len(nums2):\n        return 0\n    # Create a dictionary to count which values in the two lists have the same values.\n    d = dict()\n    for i in range(len(nums1)):\n        if nums1[i] in d:\n            d[nums1[i]] += 1\n        else:\n            d[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in d:\n            d[nums2[i]] += 1\n        else:\n            d[nums2[i]] = 1\n    # Find the unique numbers in the two lists.\n    # If the value is in d, the index of the value is found.\n    # If the value is not in d, it is not in the dictionary.\n    # return the number of indices where the two lists have the same values.\n    return len(d)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    #Count the number of occurence of the numbers in nums1 and nums2\n    num_map = {}\n    for i in nums1:\n        if i in num_map:\n            num_map[i] += 1\n        else:\n            num_map[i] = 1\n    \n    num_map = sorted(num_map.items())\n    \n    for i in num_map:\n        if i[1] == 1:\n            return i[0]\n    \n    return None\n    \ndef common_elements(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to return the common elements in nums1 and nums2.\n    The input lists must be of the same size.\n    '''\n    \n    #For each element in nums1, find the element in nums2 that also exists in nums1.\n    #If the element exists, return it.\n    #Else, return none.\n    \n    num_map = {}\n    \n    #For each element in nums1, find the element in nums2 that also exists in nums1.\n    #If the element exists, return it.\n    #Else, return none.\n    for i in nums1:\n        if i in num_map:\n            num_map[i] += 1\n        else:\n            num_map[i] = 1\n    \n    num_map = sorted(num_map.items())\n    \n    for i in num_map:\n        if i[1] == 1:\n            return i[0]\n    \n    return None\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    pair_count = 0\n    \n    for num in nums1:\n        if num in nums2:\n            pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #List of the pairs\n    n = len(nums1)\n    p = {}\n    #Starting from the index, count up from 1. If the number of indices that are 1 in nums1 and nums2, increase by one.\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            p[nums1[i]] = p.get(nums1[i],0) + 1\n    #find the number of pairs\n    return len(p)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # iterate over each value in the list.\n    counts1 = 0\n    counts2 = 0\n    # iterate over each value in the second list\n    for i in range(len(nums1)):\n        # iterate over each value in the first list\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                # if two elements are the same, increment the count\n                if i == j:\n                    counts1 += 1\n                    print(counts1)\n                else:\n                    counts2 += 1\n                    print(counts2)\n    print(counts1, counts2)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i, val in enumerate(nums1):\n        if val == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    power = power - 1\n    base = base // 10\n    \n    while base!= 0:\n        remainder = base % 10\n        base = base // 10\n        if remainder!= 0:\n            base = base * 10 + remainder\n    \n    return base\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 1:\n        return 1\n    else:\n        return base + power_base_sum(base-1, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = str(power)\n    base = int(base)\n    if base == 0:\n        return 0\n    elif len(power) == 1:\n        return 1\n    elif power[0] == '0':\n        return 1\n    elif len(power) == 2:\n        if int(power[1]) >= base:\n            return 1 + power_base_sum(base - int(power[1]), power[1])\n        else:\n            return int(power[1]) + power_base_sum(base, int(power[1]))\n    elif len(power) == 3:\n        if int(power[1]) >= base:\n            return 1 + power_base_sum(base - int(power[1]), power[1])\n        elif int(power[1]) >= base:\n            return 1 + power_base_sum(base, int(power[1]))\n        else:\n            return int(power[1]) + power_base_sum(base, int(power[2]))\n    elif len(power) == 4:\n        return power_base_sum(base, int(power[1])) + power_base_sum(base, int(power[2])) + power_base_sum(base, int(power[3]))\n    elif len(power) == 5:\n        return power_base_sum(base, int(power[1])) + power_base_sum(base, int(power[2])) + power_base_sum(base, int(power[3])) + power_base_sum(base, int(power[4]))\n    else:\n        return 0\n    \n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_base_sum = 0\n    for base_digit in str(base):\n        power_base_sum += int(base_digit) ** power\n    return power_base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_power = list(str(base))\n    power_sum = 0\n    power_sum += int(power)\n    for digit in base_power:\n        power_sum += int(digit)\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1\n    sum = 0\n    while power >= 0:\n        sum = sum + int(base) ** power\n        power = power - 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base!= 0:\n        sum += base % 10\n        base = int(base / 10)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(x) for x in str(base) if int(x) <= power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_val = int(power)\n    if power_val > len(base) or (power_val == len(base) and power_val <= 0):\n        return base\n    \n    sum_val = 0\n    for i in range(len(base)):\n        sum_val += int(base[i]) * (10**i)\n    return str(sum_val)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return base\n    else:\n        return power_base_sum(base, power - 1) + base\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.split('[ \\t\\n]+',text1)\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_marks = re.findall(r'\\?\\w+', text1)\n    for marker in quotation_marks:\n        if marker[0] == '?':\n            text1 = text1.replace(marker[0], marker[1])\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.split('[\\s,]', text1)[0]\n    text2 = re.split('[\\s,]', text1)[1]\n    quotation_reg = re.compile(r'[\\\"]{2}[\\s,]')\n    quotation_reg2 = re.compile(r'[\\s,]')\n    #print(quotation_reg.findall(text1))\n    quotation_list = quotation_reg.findall(text2)\n    #print(quotation_list)\n    for i in quotation_list:\n        if i[0] == '\"':\n            quotation_list.remove(i)\n    #print(quotation_list)\n    quotation_list = quotation_list + quotation_list\n    #print(quotation_list)\n    quotation_list = list(dict.fromkeys(quotation_list))\n    #print(quotation_list)\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    #print(quotation_list)\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    #print(quotation_list)\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    #print(quotation_list)\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = list(dict.fromkeys(quotation_list))\n    quotation_list = lis"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_mark_pattern = re.compile(r'\\w+?\"\\w+')\n    return quotation_mark_pattern.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #pattern = r\"(?P<delim>')(?P<qout>\\w+)(?P<qop>('|\\?))\" #\\ w means that the next quotation marks are included\n    #pattern = r\"(?P<delim>')(?P<qout>\\w+)(?P<qop>('|\\?))\" #\\ w means that the next quotation marks are included\n    pattern = r\"(?P<delim>')(?P<qout>\\w+)\" #\\ w means that the next quotation marks are included\n    m = re.search(pattern, text1) #pattern is a regular expression pattern\n    #check if the pattern matches\n    if m:\n        #print(\"Match 1\")\n        qout = m.group('qout') #qout = \"What is the name of the movie?\"\n        qop = m.group('qop') #qop = \"how are you?\"\n        print(\"Find the quote, please\")\n        print(qout)\n        print(qop)\n        #return qout, qop\n        return qout, qop\n    else:\n        #print(\"Match 2\")\n        return None\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = '.*\"{1,}\"'\n    output_list = re.findall(regex, text1)\n    print(output_list)\n    return output_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot = re.compile('([\\'\"][\\'\"][^\"\\']*[\\'\"][^\"\\']*[\\'\"][^\"\\']*[\\'][^\"\\']*[\\'\"][^\"\\']*[\\'\"][^\"\\']*[\\'][^\"\\']*[\\'\"][^\"\\']*[\\'][^\"\\']*[\\'][^\"\\']*[\\'])')\n    quot_list = []\n    quot_list.append(quot.search(text1).group(0))\n    for i in range(1, len(text1)):\n        if quot.search(text1[i:]).group() == quot_list[i-1]:\n            quot_list[i] = quot_list[i-1]+quot_list[i]\n        else:\n            quot_list.append(quot.search(text1[i:]).group())\n    quot_list.append(text1[len(text1)-1:])\n    return quot_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    # If no quotation mark at the end\n    if '\"' in text1:\n        \n        # Replace all quotation marks with single quotes\n        text2 = text1.replace(\"'\",\"''\")\n        # Remove the new line character\n        text3 = text2.replace(\"\\n\",\"\")\n        # Lowercase all words\n        text4 = text3.lower()\n        # Remove trailing whitespaces\n        text5 = text4.rstrip()\n        # Remove punctuations\n        text6 = re.sub(\"[^A-Za-z0-9_\\s]\", \" \", text5)\n        # Split the text into a list of words\n        list1 = text6.split(\" \")\n        # Convert list into string\n        text7 = \"\".join(list1)\n        # Remove empty words\n        text8 = text7.replace(\" \", \"\")\n        # Remove remaining punctuations\n        text9 = re.sub(\"[^A-Za-z0-9_\\s]\", \" \", text8)\n        # Split the text into a list of words\n        list2 = text9.split(\" \")\n        # Convert list into string\n        text10 = \"\".join(list2)\n        # Get only the letters\n        text11 = text10.replace(\" \", \"\")\n        # Get only the letters\n        text12 = \"\".join(char for char in text11 if char.isalpha())\n        # Convert string into list\n        list3 = text12.split(\" \")\n        # Remove all empty words\n        list4 = [w for w in list3 if len(w)!= 0]\n        # Remove the initial quotation\n        list4.pop(0)\n        # Remove the last quotation\n        list4.pop(-1)\n        # Convert list back into string\n        list5 = \" \".join(list4)\n        # Split the string into a list\n        list6 = list5.split(\" \")\n        # Convert list into string\n        list7 = \"\".join(list6)\n        # Strip all characters after quotes\n        list8 = list7.rstrip(\"'''\")\n        # Strip all characters after quotes\n        list9 = list8.rstrip(\"'\")\n        # Remove the remaining characters\n        list10 = list9.replace(\"'\",\"\").replace(\" \",\"\").replace(\"'\",\"\")\n        # Remove initial and final quotation\n        list10 = list10.replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Remove empty words\n        list11 = list10.replace(\" '\",\"\").replace(\" '\",\"\")\n        # Remove empty words\n        list12 = list11.replace(\"'\",\"\").replace(\"'\",\"\")\n        # Remove all empty words\n        list13 = list12.replace(\" '\",\"\").replace(\" '\",\"\")\n        # Split the string into a list\n        list14 = list13.split(\" \")\n        # Convert list into string\n        list15 = \"\".join(list14)\n        # Remove all empty words\n        list16 = list15.replace(\" '\",\"\").replace(\" '\",\"\")\n        # Remove all empty words\n        list17 = list16.replace(\"'\",\"\").replace(\"'\",\"\")\n        # Get only the letters\n        list18 = list17.replace(\" \", \"\")\n        # Get only the letters\n        list19 = list18.replace(\" \", \"\").replace(\"'\",\"\").replace(\" '\",\"\").replace(\"'\",\"\")\n        # Convert string into list\n        list20 = \"\".join(list19)\n        # Split the string into a list\n        list21 = list20.split(\" \")\n        # Remove all empty words\n        list22 = [w for w in list21 if len(w)!= 0]\n        # Remove the initial quotation\n        list22.pop(0)\n        # Remove the last quotation\n        list22.pop(-1)\n        # Convert list back into string\n        list23 = \" \".join(list22)\n        # Split the string into a list\n        list24 = list23.split(\" \")\n        # Convert list into string\n        list25 = \"\".join(list24)\n        # Strip all characters after quotes\n        list26 = list25.rstrip(\"'''\")\n        # Strip all characters after quotes\n        list27 = list26.rstrip(\"'\")\n        # Remove all empty words\n        list28 = list27.rstrip(\" '\").replace(\" '\",\"\").replace(\"'\",\"\").replace(\" '\",\"\")\n        # Remove all empty words\n        list29 = list28.rstrip(\"'\").replace(\" '\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Remove all empty words\n        list30 = list29.rstrip(\"'\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Get only the letters\n        list31 = list30.replace(\" \", \"\").replace(\"'\",\"\").replace(\" '\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\" '\",\"\").replace(\"'\",\"\")\n        # Convert string into list\n        list32 = \"\".join(list31)\n        # Split the string into a list\n        list33 = list32.split(\" \")\n        # Convert list into string\n        list34 = \"\".join(list33)\n        # Strip all characters after quotes\n        list35 = list34.rstrip(\"'''\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Strip all characters after quotes\n        list36 = list35.rstrip(\"'\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Remove all empty words\n        list37 = list36.replace(\" '\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Remove all empty words\n        list38 = list37.replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Remove all empty words\n        list39 = list38.replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Get only the letters\n        list40 = list39.replace(\" \", \"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Convert string into list\n        list41 = \"\".join(list40)\n        # Split the string into a list\n        list42 = list41.split(\" \")\n        # Convert list into string\n        list43 = \"\".join(list42)\n        # Strip all characters after quotes\n        list44 = list43.rstrip(\"'''\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Strip all characters after quotes\n        list45 = list44.rstrip(\"'\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Remove all empty words\n        list46 = list45.replace(\" '\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Remove all empty words\n        list47 = list46.replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Get only the letters\n        list48 = list47.replace(\" \", \"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Convert string into list\n        list49 = \"\".join(list48)\n        # Split the string into a list\n        list50 = list49.split(\" \")\n        # Convert list into string\n        list51 = \"\".join(list50)\n        # Strip all characters after quotes\n        list52 = list51.rstrip(\"'''\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\")\n        # Strip all characters after quotes\n        list53 = list52.rstrip(\"'''\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\""
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # 1. Initialize pattern\n    pattern = re.compile(r\"\\s?\\\"(.+?)\\\"\\s?\")\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_dict = {}\n    pattern = re.compile(r'(?<=\\s)([^,]*?)(?=\\s|$)')\n    quotation_dict['quotation'] = pattern.findall(text1)\n    return quotation_dict\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    return tuple((t_i * t_2) for t_i in t_1)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result = result + (test_tup[i] * test_tup[i + 1])\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2 = test_tup\n    return (t_1 * t_2, t_1 + t_2)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Write your code here\n    if len(test_tup)!= N+1:\n        print(\"Your test tuple is not valid\")\n        return 0\n    else:\n        t_1 = test_tup[0]\n        for i in range(1,N):\n            t_1 = t_1 * test_tup[i]\n        return t_1\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    else:\n        x = test_tup[0]\n        for i in range(1,len(test_tup)):\n            x = x*test_tup[i]\n        return x\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    sum_vals = 0\n    for i in range(len(test_tup) - 1):\n        sum_vals += test_tup[i]\n    return test_tup, sum_vals\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2 = test_tup\n    test_tup = (t_1 * t_2)\n    return test_tup\n    \n    \ndef get_sum_of_triplets(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to (t_i + t_i +... + t_i + t_i +...).\n    '''\n    t_1, t_2, t_3 = test_tup\n    t_4 = (t_1 + t_2 + t_3 + t_4)\n    return t_4\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup)!= N:\n        return print(\"ERROR\")\n    return tuple(map(lambda x: x * test_tup[0], test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return test_tup[0] * test_tup[1]\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2, t_3,..., t_N = test_tup\n    assert len(test_tup) >= 3, \"Not enough values in tuple\"\n    t_1, t_2, t_3 = t_1, t_2, t_3\n    assert t_1 * t_2!= t_1, \"Multiplication must be (a + b) * c == c\"\n    assert t_1 * t_2 * t_3!= t_1, \"Multiplication must be (a + b) * c == c\"\n    for t_i in range(len(test_tup) - 1):\n        assert t_1 * t_2 * t_3 * t_i == test_tup[t_i], \"Multiplication must be (a + b) * c == c\"\n    return (t_1, t_2, t_3)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1 + lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #create empty list to append the sum\n    sum_list=[]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return (lst1[0]+lst2[0])\n    \n    \nlst1 = [1,2,3,4]\nlst2 = [1,1,1,1]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # your code here\n    list_sum = [0 for i in range(len(lst1))]\n    for i in range(len(lst1)):\n        list_sum[i] = lst1[i] + lst2[i]\n    return list_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n    \n    \ndef sublist_intersection(l1, l2, l3):\n    '''\n    Write a function that takes as input three lists [a_1,...,a_n], [b_1,...,b_n], and returns a new list that has only the elements of the intersection of the lists, in sorted order, except for the elements of the second list.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n    \n    \ndef sublist_union(l1, l2, l3):\n    '''\n    Write a function that takes as input three lists [a_1,...,a_n], [b_1,...,b_n], and returns a new list that has the intersection of the lists, in sorted order.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n    \n    \ndef intersection(l1, l2, l3):\n    '''\n    Write a function that takes as input three lists [a_1,...,a_n], [b_1,...,b_n], and returns a new list that contains only the elements of the intersection of the lists, in sorted order.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n    \n    \ndef union(l1, l2, l3):\n    '''\n    Write a function that takes as input three lists [a_1,...,a_n], [b_1,...,b_n], and returns a new list that contains the union of the lists, in sorted order.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n    \n    \ndef is_intersect(l1, l2, l3):\n    '''\n    Write a function that takes as input three lists [a_1,...,a_n], [b_1,...,b_n], and returns True if the intersection of the lists, in sorted order, is a superset of the lists, in sorted order.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n    \n    \ndef is_superset(l1, l2, l3):\n    '''\n    Write a function that takes as input three lists [a_1,...,a_n], [b_1,...,b_n], and returns True if the intersection of the lists, in sorted order, is a superset of the lists, in sorted order.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n    \n    \ndef is_intersection_superset(l1, l2, l3):\n    '''\n    Write a function that takes as input three lists [a_1,...,a_n], [b_1,...,b_n], and returns True if the intersection of the lists, in sorted order, is the superset of the lists, in sorted order.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n    \n    \ndef is_in_list(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    for l in l2:\n        if l in l1:\n            return True\n    return False\n    \n    \ndef is_in_list_2(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l2 if i in l1]\n    \n    \ndef is_in_list_3(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_4(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l2 if i in l1]\n    \n    \ndef is_in_list_5(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_6(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_7(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_8(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_9(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_10(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_11(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_12(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_13(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_14(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_15(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_16(l1, l2):\n    '''\n    Write a function that takes as input a list, l1, and l2, and returns True if l1 is contained in l2.\n    '''\n    return [i for i in l1 if i in l2]\n    \n    \ndef is_in_list_17(l1, l2):\n    '''\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!=len(lst2):\n        raise ValueError(\"Cannot sum lists of different sizes.\")\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Write your code here\n    if len(lst1)!= len(lst2):\n        return 0\n    l = []\n    for i in range(len(lst1)):\n        l.append(lst1[i] + lst2[i])\n    return l\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # write your code here\n    return lst1[0]+lst2[0]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Determine if the current number is unique\n    def is_unique(x):\n        if x not in set(nums):\n            return False\n        return True\n    #Find consecutive duplicates in the list and add it to a list\n    consecutive_duplicates = list(filter(is_unique, nums))\n    return consecutive_duplicates\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_nums = []\n    new_nums = list(dict.fromkeys(nums))\n    if len(new_nums) > 0:\n        for elem in new_nums:\n            if len(new_nums) > 1:\n                if elem not in new_nums[len(new_nums) - 1]:\n                    new_nums.remove(elem)\n        if len(new_nums) == 1:\n            return new_nums[0]\n    return None\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    # Your code goes here\n    # initialize the duplicates list\n    duplicates = []\n    \n    # loop through the list\n    for i in range(len(nums)):\n        # add the previous element to the duplicates list\n        if nums[i] not in duplicates:\n            # append it\n            duplicates.append(nums[i])\n        \n        # check if the last element has been checked so far\n        elif nums[i] == duplicates[-1]:\n            # if it is not, append the previous element\n            duplicates.append(nums[i])\n    \n    # print the answer\n    print(len(duplicates))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # TODO: Write your code here\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return nums\n    for i in range(len(nums)):\n        if nums[i]!= nums[i-1] and nums[i-1]!= nums[i-2]:\n            nums[i] = nums[i-1]\n            nums[i-1] = nums[i-2]\n    return nums\n    "
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    a = set()\n    for i in range(0,len(nums)):\n        if nums[i] not in a:\n            a.add(nums[i])\n    for i in a:\n        if i+1 in a:\n            # print(i)\n            continue\n        else:\n            nums[i+1] = nums[i]\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create an empty array\n    result = []\n    # Create a set\n    set = set(nums)\n    # Iterate through the set\n    for k, v in groupby(nums):\n        # If the k-th element of the set is not in the result array\n        if k not in result:\n            # Add k-th element to the result array\n            result.append(k)\n            # Check if the k-th element has been already seen\n            # for the same set\n            if k in set:\n                # Add the k-th element to the result array\n                result.append(k)\n                # Remove the k-th element from the set\n                set.remove(k)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # iterate over a list\n    for index, item in enumerate(nums):\n        # if current item is greater than previous item, then update the previous item\n        if item > nums[index - 1]:\n            nums[index - 1] = nums[index]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    i = 0\n    while i < len(nums):\n        num = nums[i]\n        if num in seen:\n            if i == 0:\n                return nums[:i + 1]\n            else:\n                return nums[:i + 1] + [num]\n        else:\n            seen.add(num)\n            i += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # n is size of list\n    # this function is used to check if list is a subset of another list or not.\n    # this function is used for output if it's a subset of another list.\n    n = len(nums)\n    if n == 0:\n        return False\n    return [x for x, y in groupby(nums) if y == n]\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = 2 * r * math.sin(math.radians(h))\n    b = 4 * r * math.cos(math.radians(h))\n    c = h\n    return (a+b+c)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculate the surface area of the cone\n    x = (math.pi * (r ** 2)) / 4\n    print(\"The surface area of the cone is\", x)\n    #calculate the area of a circle with radius r\n    a = math.pi * (r ** 2)\n    print(\"The area of a circle with radius r is\", a)\n    #calculate the perimeter of the cone\n    p = a * (math.cos(math.pi * (r ** 2)))\n    print(\"The perimeter of the cone is\", p)\n    #calculate the volume of the cone\n    V = (p * math.sin(math.pi * (r ** 2)))\n    print(\"The volume of the cone is\", V)\n    #return the surface area and volume\n    return (a,p,V)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # theta must be in radians\n    # check whether theta is given correctly\n    theta = math.pi/3\n    phi = (theta - math.pi/2)\n    lateral_surface = r * math.sin(phi)\n    lateral_surface_cone = math.pi * (r * math.sin(phi) + h)\n    return lateral_surface, lateral_surface_cone\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0\n    for i in range(r):\n        s += 2*(math.pi*math.sqrt(h))*math.exp(-(math.pi**2)/2*(r-i))\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=2.26*(math.pi)\n    return a*(r**2)*h\ndef triangle(x,y,z):\n    '''\n    Write a function that finds the medial axis of the given points.\n    '''\n    return (x+y+z)/2\ndef midpoints(x,y,z):\n    '''\n    Write a function that finds the midpoints of the given points.\n    '''\n    return (x+y+z)/2\ndef lines(x1,y1,z1,x2,y2,z2):\n    '''\n    Write a function that finds the intersections of a line through two points.\n    '''\n    return (x1*x2+y1*y2+z1*z2)/(x1+x2+z1+z2)\ndef bresenham(x1,y1,x2,y2):\n    '''\n    Write a function that calculates the bresenham line using bresenham's algorithm.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)\ndef cost(x,y,z):\n    '''\n    Write a function that calculates the total cost of the given points.\n    '''\n    return lateralsurface_cone(x,y)+breshenham(x,y,x,y)+breshenham(x,y,x,y)+breshenham(x,y,x,y)\ndef lines_cost(x1,y1,z1,x2,y2,z2):\n    '''\n    Write a function that calculates the total cost of the given lines.\n    '''\n    return lateralsurface_cone(x1,y1)+lateralsurface_cone(x2,y2)+lateralsurface_cone(x1,y1)+lateralsurface_cone(x2,y2)\ndef perimeter(x,y,z):\n    '''\n    Write a function that finds the perimeter of the given points.\n    '''\n    return (x+y+z)/2\ndef weight(x,y,z):\n    '''\n    Write a function that calculates the weight of the given points.\n    '''\n    return (x**2 + y**2 + z**2)**0.5\ndef centroid(x,y,z):\n    '''\n    Write a function that calculates the centroid of the given points.\n    '''\n    return (x+y+z)/2\ndef volume(x,y,z):\n    '''\n    Write a function that calculates the volume of the given points.\n    '''\n    return (x*y*z)**0.5\ndef std(x,y,z):\n    '''\n    Write a function that calculates the standard deviation of the given points.\n    '''\n    return (x**2+y**2+z**2)/3\ndef angle(x,y,z):\n    '''\n    Write a function that calculates the angle of the given points.\n    '''\n    return math.atan(std(y)/std(x))\ndef closest(x,y,z):\n    '''\n    Write a function that returns the closest point of the given coordinates.\n    '''\n    return (x+y+z)/2\ndef closest_2d(x,y,z):\n    '''\n    Write a function that returns the closest point of the given coordinates.\n    '''\n    return (x,y)\ndef last_point(x,y,z):\n    '''\n    Write a function that returns the last point of the given coordinates.\n    '''\n    return (x,y)\ndef last_point_2d(x,y,z):\n    '''\n    Write a function that returns the last point of the given coordinates.\n    '''\n    return (x,y)\ndef midpoint(x,y,z):\n    '''\n    Write a function that returns the midpoint of the given coordinates.\n    '''\n    return (x+y+z)/2\ndef midpoint_2d(x,y,z):\n    '''\n    Write a function that returns the midpoint of the given coordinates.\n    '''\n    return (x,y)\ndef dist(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return (math.sqrt((x-y)**2+(z-y)**2))\ndef midpoint_dist(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist(x,y,z)\ndef dist_2d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return math.sqrt((x-y)**2+(z-y)**2)\ndef dist_3d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return math.sqrt((x-y)**2+(z-y)**2+(x-z)**2+(y-z)**2)\ndef midpoint_dist_2d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist_2d(x,y,z)\ndef midpoint_dist_3d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist_3d(x,y,z)\ndef midpoint_dist_2d_2d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist_2d(x,y,z)\ndef midpoint_dist_3d_2d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist_3d(x,y,z)\ndef midpoint_dist_3d_2d_2d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist_2d(x,y,z)\ndef midpoint_dist_2d_3d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist_3d(x,y,z)\ndef midpoint_dist_3d_2d_3d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist_2d(x,y,z)\ndef midpoint_dist_2d_3d_2d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist_3d(x,y,z)\ndef midpoint_dist_3d_2d_3d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return dist_2d(x,y,z)\ndef midpoint_2d_dist(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return math.sqrt((x-y)**2+(z-y)**2)\ndef midpoint_dist_2d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return math.sqrt((x-y)**2+(z-y)**2)\ndef midpoint_dist_3d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return math.sqrt((x-y)**2+(z-y)**2+(x-z)**2+(y-z)**2)\ndef midpoint_dist_2d_2d(x,y,z):\n    '''\n    Write a function that returns the distance between the given coordinates.\n    '''\n    return math.sqrt((x-y)**2+(z-y)**2)\ndef midpoint_dist_3d"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    \n    #we begin by making the radius r half so the ceiling is at the apex. This is the same as the height h.\n    r_half = r/2\n    \n    #the cone angle is at the apex. This is the same as the height h.\n    theta_apex = h/2\n    \n    #then we calculate the area of the hemisphere by using the formula below:\n    a = math.pi * (r_half**2) * math.exp(-1*math.cos(math.radians(theta_apex)))\n    \n    #now we add that to the area calculation. The formula is:\n    #a = (pi*r**2)*(1-1/math.cos(theta))\n    #and so on.\n    return a\ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    \n    #we begin by making the radius r half so the ceiling is at the apex. This is the same as the height h.\n    r_half = r/2\n    \n    #the cone angle is at the apex. This is the same as the height h.\n    theta_apex = h/2\n    \n    #then we calculate the area of the hemisphere by using the formula below:\n    a = math.pi * (r_half**2) * math.exp(-1*math.cos(math.radians(theta_apex)))\n    \n    #now we add that to the area calculation. The formula is:\n    #a = (pi*r**2)*(1-1/math.cos(theta))\n    #and so on.\n    return a\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2*math.pi*r*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * r * math.pi * h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    e = 2*math.pi*r\n    print(\"A cone has a surface area of: \" + str(e*math.sin(h)))\n    l = e*math.sin(h)\n    print(\"Lateral surface area is: \" + str(l))\n    return l\ndef main():\n    '''\n    Write a function to compute the surface area of a cylinder given radius r and height h.\n    '''\n    radius = float(input(\"Enter the radius of the cylinder: \"))\n    height = float(input(\"Enter the height of the cylinder: \"))\n    surfacearea = lateralsurface_cone(radius,height)\n    print(\"The surface area of the cylinder is: \" + str(surfacearea))\nmain()\n    "
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Write your code here\n    s = r * math.pow(math.pi,3) * h\n    return s\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('.','')\n    text = text.replace(',',' ')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('+',':').replace('.',':').replace(',',':').replace(' ',':').replace(';','::').replace('!','::').replace('?','::').replace('\\n','::').replace('\\'','::')\n    #print(text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(?P<space>\\s+)'\n    pattern += r'(?P<comma>\\,)'\n    pattern += r'(?P<dot>\\:)'\n    pattern += r'(?P<dots>\\;)'\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)\n    text = re.sub(pattern, r'\\1: ', text)"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_to_replace = r'\\s+'\n    text_to_replace = text_to_replace + r'\\s+'\n    return text_to_replace\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \",\":\").replace(\" \",\":\").replace(\".\",\":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace('-', ':')\n    text = text.replace('!', ':')\n    text = text.replace(';', ':')\n    text = text.replace('$', ':')\n    text = text.replace('&', ':')\n    text = text.replace('@', ':')\n    text = text.replace('#', ':')\n    text = text.replace('$', ':')\n    text = text.replace('*', ':')\n    text = text.replace('%', ':')\n    text = text.replace('^', ':')\n    text = text.replace('=', ':')\n    text = text.replace('[', ':')\n    text = text.replace(']', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace(' ', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    text = text.replace('?', ':')\n    text = text.replace('|', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('-',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    text = text.replace(';',':')\n    text = text.replace('?',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('.',':')\n    text = text.replace('-',' ')\n    text = text.replace('!',':')\n    text = text.replace('!',':')\n    text = text.replace('!',':')\n    text = text.replace('-',' ')\n    text = text.replace('!',':')\n    text = text.replace('!',':')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('?',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('?',':')\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('!','?')\n    text = text.replace('?',':')\n    text = text.replace(' ',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace(' ',':')\n    text = text.replace('?',':')\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace(' ',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('.',':')\n    text = text.replace('!','?')\n    text = text.replace('!','?')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text = text.replace('?',':')\n    text "
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':' + text.replace('.', ':') +'')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\ndef split_text(text):\n    '''\n    Split a sentence into separate sentences using whitespace and commas as separators.\n    '''\n    result = []\n    for word in text.split(' '):\n        result.append(word)\n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' +',' :',text)\n    text = re.sub('[ \\t\\n\\r]+',' :',text)\n    text = re.sub('[^a-zA-Z ]',' :',text)\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = 0\n    last = len(A)-1\n    while first <= last:\n        middle = (first + last)//2\n        if A[middle] == x:\n            return middle\n        elif A[middle] < x:\n            first = middle + 1\n        else:\n            last = middle - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    res = 0\n    if not A:\n        return res\n    first_index = -1\n    for i, num in enumerate(A):\n        if num == x:\n            first_index = i\n            break\n    return first_index\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n    while left<right:\n        mid = (left+right)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid+1\n        else:\n            right = mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    l = len(A)\n    i = -1\n    while True:\n        if i >= l-1:\n            if A[i] == x:\n                return i\n            i -= 1\n        else:\n            if A[i] == x:\n                return i\n            i += 1\n        \n    "
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def first_occurrence(a, n):\n        if n == 0:\n            return 0\n        i = 1\n        while (i < n and a[i] < a[i - 1]):\n            i += 1\n        return i - 1\n    \n    i = 0\n    pos = 0\n    while (i < len(A) and A[i] < x):\n        i += 1\n    \n    while (i < len(A)):\n        if A[i] == x:\n            pos = i\n            break\n        i += 1\n    \n    if pos == -1:\n        print(\"No\")\n        return -1\n    else:\n        return pos\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Edge case\n    if len(A) == 0:\n        return 0\n    # Binary Search:\n    left = 0\n    right = len(A) - 1\n    while (left < right):\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def binary_search(L, x):\n        '''\n        Binary search\n        :param L: lower bound of the interval\n        :param x: number to be found\n        :return: index of the x\n        '''\n        left = 0\n        right = len(L) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # test the sorted array\n    first_index = 0\n    last_index = len(A) - 1\n    while first_index <= last_index:\n        middle_index = (first_index + last_index) // 2\n        if A[middle_index] == x:\n            return middle_index\n        if A[middle_index] > x:\n            last_index = middle_index - 1\n        else:\n            first_index = middle_index + 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([sum(i) for i in product(*arr)])\n    \n    \nif __name__ == \"__main__\":\n    arr = [0,1,2,3,4,5,6]\n    print(sum_Of_Subarray_Prod(arr)"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    # Initialize sum of subarray prod to 0\n    subArrayProd = [0] * len(arr)\n    \n    # Traverse array starting with index 0 and adding to subArrayProd\n    for i in range(len(arr)):\n        subArrayProd[i] = arr[i] * subArrayProd[i]\n    \n    # Iterate to find sum of subarray product\n    for j in range(len(subArrayProd)-1, -1, -1):\n        sum = subArrayProd[j]\n        # Find total product of subarray subArrayProd\n        for k in range(j):\n            if arr[k] > arr[j] and sum > 0:\n                sum = sum - arr[k] * subArrayProd[k]\n        # Add to sum of subarray prod\n        subArrayProd[j] = sum\n    \n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(1, len(arr)):\n        sum += arr[i]\n    return sum\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # code here\n    sum = 0\n    for i in range(len(arr)):\n        if i>0 and arr[i-1] == arr[i]:\n            pass\n        else:\n            sum += arr[i] * (i+1)\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_Of_Prod = 0\n    i = 0\n    while(i < len(arr)):\n        sum_Of_Prod += arr[i]*i\n        i+=1\n    return sum_Of_Prod\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum += arr[j]*arr[i]\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum += arr[i]\n    return max_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subsum = []\n    for i in arr:\n        for j in range(len(i)):\n            subsum.append(i[:j]+i[j+1:])\n    prod = 1\n    for i in subsum:\n        prod = prod*len(i)\n    return prod\n    \ndef main():\n    n = int(input(\"Enter the length of the array:\"))\n    arr = []\n    for i in range(n):\n        arr.append(int(input()))\n    arr.sort()\n    print(sum_Of_Subarray_Prod(arr))\n    print(arr)\nmain()\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sub_arr=[]\n    prod_of_arr=[]\n    temp=[]\n    prod=1\n    for i in arr:\n        sub_arr.append(i)\n    for i in sub_arr:\n        for j in range(len(i)-1):\n            prod=prod*i[j]\n        prod_of_arr.append(prod)\n        prod=1\n        for j in range(len(i)-1):\n            prod=prod*i[j+1]\n        prod_of_arr.append(prod)\n    return sum(prod_of_arr)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    result = bin(n)[2:]\n    if result.startswith(\"0b\"):\n        result = result[2:]\n    if result.endswith(\"1\"):\n        result = result[:-1]\n    return int(result, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    t = bin(n).split('0b')\n    i = len(t) - 2\n    if i == 0:\n        return 0\n    else:\n        return int(t[i - 1] + t[i] + t[i - 1] + t[i])\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(bin(n))\n    x=n%(2**len(str(bin(n))))\n    print(x)\n    z=0\n    for i in range(len(str(bin(n)))-1):\n        if x==0:\n            z+=1\n            x=0\n        if x==1:\n            z+=1\n            x=0\n        if z==len(str(bin(n))):\n            z=0\n            x=1\n    print(x)\n    if x==0:\n        n=n-1\n    if x==1:\n        n=n+1\n    print(n)\n    if n==2**len(str(bin(n))):\n        n=0\n    if n==2**len(str(bin(n)))-1:\n        n=1\n    print(n)\n    print(bin(n))\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    s = bin(n)[2:]\n    s = s.replace(\"0b\", \"\")\n    i = len(s)-1\n    while i > -1:\n        if s[i] == '1':\n            s = s[:i] + \"0\" + s[i+1:]\n        else:\n            s = s[:i] + \"1\" + s[i+1:]\n        i -= 1\n    print(s)\n    return s\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask1 = 0x00001111\n    mask2 = 0xFFFFFF00\n    return bin(n & mask1)[2:].zfill(n.bit_length()) + bin(n & mask2)[2:].zfill(n.bit_length())\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask_0 = 1 << 0\n    mask_1 = 1 << 1\n    mask_2 = 1 << 2\n    mask_3 = 1 << 3\n    mask_4 = 1 << 4\n    mask_5 = 1 << 5\n    mask_6 = 1 << 6\n    mask_7 = 1 << 7\n    mask_8 = 1 << 8\n    mask_9 = 1 << 9\n    mask_10 = 1 << 10\n    mask_11 = 1 << 11\n    mask_12 = 1 << 12\n    mask_13 = 1 << 13\n    mask_14 = 1 << 14\n    mask_15 = 1 << 15\n    mask_16 = 1 << 16\n    mask_17 = 1 << 17\n    mask_18 = 1 << 18\n    mask_19 = 1 << 19\n    mask_20 = 1 << 20\n    mask_21 = 1 << 21\n    mask_22 = 1 << 22\n    mask_23 = 1 << 23\n    mask_24 = 1 << 24\n    mask_25 = 1 << 25\n    mask_26 = 1 << 26\n    mask_27 = 1 << 27\n    mask_28 = 1 << 28\n    mask_29 = 1 << 29\n    mask_30 = 1 << 30\n    mask_31 = 1 << 31\n    mask_32 = 1 << 32\n    \n    mask = mask_0 << 22\n    mask |= mask_1 << 21\n    mask |= mask_2 << 20\n    mask |= mask_3 << 19\n    mask |= mask_4 << 18\n    mask |= mask_5 << 17\n    mask |= mask_6 << 16\n    mask |= mask_7 << 15\n    mask |= mask_8 << 14\n    mask |= mask_9 << 13\n    mask |= mask_10 << 12\n    mask |= mask_11 << 11\n    mask |= mask_12 << 10\n    mask |= mask_13 << 9\n    mask |= mask_14 << 8\n    mask |= mask_15 << 7\n    mask |= mask_16 << 6\n    mask |= mask_17 << 5\n    mask |= mask_18 << 4\n    mask |= mask_19 << 3\n    mask |= mask_20 << 2\n    mask |= mask_21 << 1\n    mask |= mask_22 << 0\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #print(bin(n).replace('0b','').replace('1','').replace('1','0').replace('1','1').zfill(8))\n    m = n>>1\n    n = m|(n&-m)\n    n = n<<1\n    n = n|(n&-n)\n    m = m|(m&-m)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (n - 1)\n    n = n | (n << 1)\n    n = n | (n << 2)\n    n = n | (n << 3)\n    n = n | (n << 4)\n    n = n | (n << 5)\n    n = n | (n << 6)\n    n = n | (n << 7)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(num):\n        mask = bin(num).replace(\"0b\", \"\")\n        new_mask = mask[1:] + mask[:-1]\n        return int(new_mask, 2)\n    n = toggle_bits(n)\n    while n!= 0:\n        n = toggle_bits(n)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    '''\n    TODO:\n    Complete the function to toggle bits of the number except the first and the last bit.\n    '''\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #1\n    # print(x)\n    i = bisect.bisect_left(a, x, lo=0, hi=len(a))\n    #2\n    j = bisect.bisect_left(a, x, hi=len(a))\n    #3\n    return i, j\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    if x < a[low]:\n        return low+1\n    elif x > a[high]:\n        return high\n    else:\n        return high-low+1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    p=0\n    while a[p]>=x:\n        p+=1\n    return p\n    \ndef find_min(a):\n    '''\n    Given a sorted list of elements, find the minimum element in the list. \n    '''\n    return min(a)\n    \ndef merge(a, b, c):\n    '''\n    Given two sorted lists, merge them into one new list. \n    '''\n    d=[]\n    i,j,k=0,0,0\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            d.append(a[i])\n            i+=1\n        else:\n            d.append(b[j])\n            j+=1\n    d.extend(a[i:])\n    d.extend(b[j:])\n    return d\n    \ndef merge_sort(a):\n    '''\n    Given a sorted list, merge sort it.\n    '''\n    if len(a)<=1:\n        return a\n    mid=len(a)//2\n    l=a[:mid]\n    r=a[mid:]\n    l=merge_sort(l)\n    r=merge_sort(r)\n    return merge(l,r,a)\n    \ndef selection_sort(a):\n    '''\n    Given a sorted list, sort it.\n    '''\n    for i in range(len(a)):\n        index=bisect.bisect(a,a[i])\n        a[i],a[index]=a[index],a[i]\n    return a\n    \ndef partition(a,p,r):\n    '''\n    Given a sorted list and a pivot, return a pivot index and its index in the list.\n    '''\n    i=p-1\n    l,r=0,len(a)-1\n    #g=bisect.bisect_left(a,a[i])\n    while i<len(a) and a[i]<=a[p]:\n        i+=1\n    while a[i]<=a[p]:\n        i+=1\n    if i-l==r:\n        return i,a[i]\n    elif i-l==1:\n        if a[i]<a[p]:\n            a[i],a[r]=(a[r],a[i])\n        else:\n            a[i],a[l]=(a[l],a[i])\n    elif i-l==r-1:\n        if a[i]<a[r]:\n            a[i],a[r]=(a[r],a[i])\n        else:\n            a[i],a[l]=(a[l],a[i])\n    return i-1,a[i]\n    \ndef select_sort(a):\n    '''\n    Given a sorted list, sort it.\n    '''\n    for i in range(len(a)):\n        index=bisect.bisect_left(a,a[i])\n        a[i],a[index]=a[index],a[i]\n    return a\n    \ndef selection_sort_recursive(a):\n    '''\n    Given a sorted list, sort it.\n    '''\n    for i in range(len(a)):\n        index=bisect.bisect_left(a,a[i])\n        a[i],a[index]=a[index],a[i]\n    return a\n    \ndef insertion_sort(a):\n    '''\n    Given a sorted list, sort it.\n    '''\n    for i in range(1,len(a)):\n        for j in range(i):\n            if a[i]<a[j]:\n                a[i],a[j]=a[j],a[i]\n                break\n    return a\n    \ndef find_position(a,x):\n    '''\n    Find the position of x in a sorted list\n    '''\n    i=len(a)\n    while i>0 and a[i-1]<=x:\n        i-=1\n    return i-1\n    \ndef merge_two_sorted_lists(a,b):\n    '''\n    Given two sorted lists, merge them into one new list. \n    '''\n    i,j,k=0,0,0\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            a[i],a[j]=a[j],a[i]\n            k+=1\n        else:\n            j+=1\n        i+=1\n    if i<len(a):\n        a[k:]=a[i:k]\n    else:\n        a[k:]=b[j:k]\n    return a\n    \ndef merge_sort(a):\n    '''\n    Given a sorted list, sort it.\n    '''\n    if len(a)<=1:\n        return a\n    mid=len(a)//2\n    left=a[:mid]\n    right=a[mid:]\n    left=merge_sort(left)\n    right=merge_sort(right)\n    return merge(left,right,a)\n    \ndef print_list(a):\n    '''\n    Given a sorted list, print the list.\n    '''\n    for i in range(len(a)):\n        print(a[i],end=' ')\n    print()\n    \ndef swap(a,i,j):\n    '''\n    Given a sorted list and a pivot, swap the element in the list.\n    '''\n    a[i],a[j]=a[j],a[i]\n    return a\n    \ndef bubble_sort(a):\n    '''\n    Given a sorted list, sort it.\n    '''\n    for i in range(len(a)):\n        for j in range(len(a)-1-i):\n            if a[j]>a[j+1]:\n                a[j],a[j+1]=a[j+1],a[j]\n    return a\n    \ndef merge_sort(a):\n    '''\n    Given a sorted list, sort it.\n    '''\n    if len(a)<=1:\n        return a\n    mid=len(a)//2\n    l=a[:mid]\n    r=a[mid:]\n    l=merge_sort(l)\n    r=merge_sort(r)\n    return merge(l,r,a)\n    \ndef partition(a,p,r):\n    '''\n    Given a sorted list and a pivot, return a pivot index and its index in the list.\n    '''\n    i=p-1\n    l,r=0,len(a)-1\n    #g=bisect.bisect_left(a,a[i])\n    while i<len(a) and a[i]<a[p]:\n        i+=1\n    while a[i]<a[p]:\n        i+=1\n    if i-l==r:\n        return i,a[i]\n    elif i-l==1:\n        if a[i]<a[p]:\n            a[i],a[r]=(a[r],a[i])\n        else:\n            a[i],a[l]=(a[l],a[i])\n    elif i-l==r-1:\n        if a[i]<a[r]:\n            a[i],a[r]=(a[r],a[i])\n        else:\n            a[i],a[l]=(a[l],a[i])\n    return i-1,a[i]\n    \ndef select_sort(a):\n    '''\n    Given a sorted list, sort it.\n    '''\n    for i in range(len(a)):\n        index=bisect.bisect_left(a,a[i])\n        a[i],a[index]=a[index],a[i]\n    return a\n    \ndef select_sort_recursive(a):\n    '''\n    Given a sorted list, sort it.\n    '''\n    for "
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    if i == n:\n        return -1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    h = len(a) - 1\n    while l <= h:\n        mid = (l + h) // 2\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            h = mid - 1\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x, lo=0, hi=len(a))\ndef left_insertion_sort(a):\n    '''\n    Sort a list of values in ascending order by the left insertion point. The input list should be sorted in ascending order.\n    '''\n    n = len(a)\n    for i in range(1, n):\n        j = i - 1\n        key = a[i]\n        while j >= 0 and a[j] > key:\n            a[j + 1] = a[j]\n            j -= 1\n        a[j + 1] = key\n    return a\ndef sort(a):\n    '''\n    Sort a list of values in ascending order.\n    '''\n    n = len(a)\n    for i in range(n):\n        j = i + 1\n        while j < n and a[j] < a[i]:\n            a[j], a[i] = a[i], a[j]\n            j += 1\n    return a\ndef remove(a, x):\n    '''\n    Remove the leftmost value in a that is less than x.\n    '''\n    i = bisect.bisect_left(a, x)\n    return a[:i]\ndef remove_all(a, x):\n    '''\n    Remove all values that are less than x.\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    for j in range(i, n):\n        if a[j] < x:\n            a[i:j] = a[j:]\n    return a\ndef merge(a, b):\n    '''\n    Merge the two sorted lists.\n    '''\n    l = len(a)\n    r = len(b)\n    if l > r:\n        i = 0\n        j = l - 1\n        while i < r:\n            if a[i] > b[j]:\n                a[i:j] = a[i:]\n                i += 1\n                j -= 1\n            else:\n                i += 1\n    else:\n        i = 0\n        j = l - 1\n        while i < r:\n            if a[i] > b[j]:\n                a[i:j] = a[i:]\n                i += 1\n                j -= 1\n            else:\n                i += 1\n    return a\ndef get_next_position(a):\n    '''\n    Return the next index in the list whose value is less than or equal to a.\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, a[-1])\n    return n - i - 1\ndef get_next_index(a, x):\n    '''\n    Return the next index in a that is less than or equal to x.\n    '''\n    i = bisect.bisect_left(a, x)\n    j = get_next_position(a)\n    return j + i\ndef partition(a, l, r):\n    '''\n    Partition a into a list of size l, such that the sum of all values in the partition is less than or equal to a.\n    '''\n    i = l - 1\n    pivot = a[r]\n    for j in range(l, r):\n        if a[j] < pivot:\n            i = i - 1\n            a[i], a[j] = a[j], a[i]\n    a[i + 1], a[r] = a[r], a[i + 1]\n    return i + 1\ndef quick_sort(a):\n    '''\n    Sort a in ascending order by the first element less than or equal to the pivot.\n    '''\n    if len(a) <= 1:\n        return a\n    m = len(a) // 2\n    left = quick_sort(a[:m])\n    right = quick_sort(a[m:])\n    return merge(left, right)\ndef binary_search(a, x):\n    '''\n    Search an ordered list for x in ascending order, return the index of the x if found.\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    if i < n and a[i] == x:\n        return i\n    return -1\ndef binary_search_recursive(a, x, low=0, high=None):\n    '''\n    Search an ordered list for x in ascending order, return the index of the x if found.\n    '''\n    if high is None:\n        high = len(a) - 1\n    if high < low:\n        return -1\n    mid = (high + low) // 2\n    if a[mid] == x:\n        return mid\n    elif a[mid] < x:\n        return binary_search_recursive(a, x, mid + 1, high)\n    elif a[mid] > x:\n        return binary_search_recursive(a, x, low, mid - 1)\ndef random_list(size):\n    '''\n    Return a random, size-element list.\n    '''\n    import random\n    return [random.randint(-100, 100) for i in range(size)]\ndef is_square(a):\n    '''\n    Check whether a is a square matrix.\n    '''\n    n = len(a)\n    for i in range(n):\n        if n > 2:\n            for j in range(i, n):\n                if a[i][j]!= a[j][i]:\n                    return False\n    return True\ndef is_square_n(n):\n    '''\n    Check whether a is a square matrix.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return False\n    if n == 8:\n        return True\n    if n == 9:\n        return False\n    if n == 10:\n        return True\n    if n == 11:\n        return False\n    if n == 12:\n        return True\n    if n == 13:\n        return False\n    if n == 14:\n        return True\n    if n == 15:\n        return False\n    if n == 16:\n        return True\n    if n == 17:\n        return False\n    if n == 18:\n        return True\n    if n == 19:\n        return False\n    if n == 20:\n        return True\n    if n == 21:\n        return False\n    if n == 22:\n        return True\n    if n == 23:\n        return False\n    if n == 24:\n        return True\n    if n == 25:\n        return False\n    if n == 26:\n        return True\n    if n == 27:\n        return False\n    if n == 28:\n        return True\n    if n == 29:\n        return False\n    if n == 30:\n        return True\n    if n == 31:\n        return False\n    if n == 32:\n        return True\n    if n == 33:\n        return False\n    if n == 34:\n        return True\n    if n == 35:\n        return False\n    if n == 36:\n        return True\n    if n == 37:\n        return False\n    if n == 38:\n        return True\n    if n == 39:\n        return False\n    if n == 40:\n        return True\n    if n == 41:\n        return False\n    if n == 42:\n        return True\n    if n == 43:\n        return False\n    if n == 44:\n        return True\n    if n == 45:\n        return False\n    if n == 46:\n        return True\n    if n == 47:\n        return False\n    if n == 48:\n        return True\n    if n == 49:\n        return False\n    if n == 50:\n        return True\n    if n == 51:\n        return False\n    if n == 52:\n        return True\n    if n == 53:\n        return False\n    if n == 54:\n        return True\n    if n == 55:\n    "
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    return l if a[l] == x else l + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    if l == len(a):\n        return -1\n    else:\n        return l\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    # define binary search\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    # if a[i-1] is not less than the x value,\n    # insert x at it's correct position\n    if a[i-1] > x:\n        i = i - 1\n        return i\n    # If a[i-1] is less than x,\n    # then insert x at the i'th position\n    # of a[i-1]\n    else:\n        i = i - 1\n        return i\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    # define binary search\n    i = bisect.bisect_right(a, x)\n    if i == l:\n        return l-1\n    # if a[i+1] is not less than the x value,\n    # insert x at it's correct position\n    if a[i+1] > x:\n        i = i + 1\n        return i\n    # If a[i+1] is less than x,\n    # then insert x at the i'th position\n    # of a[i+1]\n    else:\n        i = i + 1\n        return i\n    \ndef delete(a, i):\n    '''\n    Write a function to delete the element at the specified index.\n    '''\n    return a[:i] + a[i+1:]\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a,x)\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].lower() in ['a','e','i','o','u']:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    flag = 0\n    for i in string:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            flag += 1\n    if(flag == 3):\n        return True\n    else:\n        return False\ndef check_str_v(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant or not using regex.\n    '''\n    flag = 0\n    for i in string:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'u' or i == 'y' or i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y':\n            flag += 1\n    if(flag == 2):\n        return True\n    else:\n        return False\ndef check_str_c(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant or not using regex.\n    '''\n    flag = 0\n    for i in string:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'u' or i == 'y':\n            flag += 1\n    if(flag == 2):\n        return True\n    else:\n        return False\ndef check_str_m(string):\n    '''\n    Write a function to check whether the given string is starting with a Markovian word or not using regex.\n    '''\n    flag = 0\n    for i in string:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'u' or i == 'y':\n            flag += 1\n    if(flag == 1):\n        return True\n    else:\n        return False\ndef check_str_s(string):\n    '''\n    Write a function to check whether the given string is starting with a simple word or not using regex.\n    '''\n    flag = 0\n    for i in string:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'u' or i == 'y':\n            flag += 1\n    if(flag == 2):\n        return True\n    else:\n        return False\ndef check_str_p(string):\n    '''\n    Write a function to check whether the given string is starting with a pword or not using regex.\n    '''\n    flag = 0\n    for i in string:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'u' or i == 'y':\n            flag += 1\n    if(flag == 3):\n        return True\n    else:\n        return False\ndef check_str_n(string):\n    '''\n    Write a function to check whether the given string is starting with a nword or not using regex.\n    '''\n    flag = 0\n    for i in string:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'u' or i == 'y':\n            flag += 1\n    if(flag == 2):\n        return True\n    else:\n        return False\ndef check_str_z(string):\n    '''\n    Write a function to check whether the given string is starting with a zword or not using regex.\n    '''\n    flag = 0\n    for i in string:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'u' or i == 'y':\n            flag += 1\n    if(flag == 2):\n        return True\n    else:\n        return False\ndef check_str_w(string):\n    '''\n    Write a function to check whether the given string is starting with a wword or not using regex.\n    '''\n    flag = 0\n    for i in string:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'u' or i == 'y':\n            flag += 1\n    if(flag == 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    lst = ['a', 'e', 'i', 'o', 'u']\n    if any(word.upper() in string.upper() for word in lst):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #TODO: implement this function\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    return match\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    result = pattern.search(string)\n    if result is None:\n        return string\n    else:\n        return string[0:result.start()]\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return any(c in 'aeiouAEIOU' for c in string)\ndef check_num(number): \n    '''\n    Write a function to check whether the given string is starting with a number or not using regex.\n    '''\n    return re.match(r'^[0-9]+$',number)\ndef check_upper(string): \n    '''\n    Write a function to check whether the given string is starting with a uppercase letter or not using regex.\n    '''\n    return re.match(r'^[A-Z]+$',string)\ndef check_lower(string): \n    '''\n    Write a function to check whether the given string is starting with a lowercase letter or not using regex.\n    '''\n    return re.match(r'^[a-z]+$',string)\ndef check_symbol(string): \n    '''\n    Write a function to check whether the given string is starting with a symbol or not using regex.\n    '''\n    return re.match(r'^[!@$]$',string)\ndef check_punctuation(string): \n    '''\n    Write a function to check whether the given string is starting with a symbol or not using regex.\n    '''\n    return re.match(r'[^!.\\s]*',string)\ndef check_symbol_punct(string): \n    '''\n    Write a function to check whether the given string is starting with a symbol or not using regex.\n    '''\n    return re.match(r'[^!#]*',string)\ndef find_num(string): \n    '''\n    Write a function to check whether the given string is starting with a number or not using regex.\n    '''\n    return re.match(r'^[0-9]+$',string)\ndef find_upper(string): \n    '''\n    Write a function to check whether the given string is starting with a uppercase letter or not using regex.\n    '''\n    return re.match(r'^[A-Z]+$',string)\ndef find_lower(string): \n    '''\n    Write a function to check whether the given string is starting with a lowercase letter or not using regex.\n    '''\n    return re.match(r'^[a-z]+$',string)\ndef find_symbol(string): \n    '''\n    Write a function to check whether the given string is starting with a symbol or not using regex.\n    '''\n    return re.match(r'^[!@$]$',string)\ndef find_punctuation(string): \n    '''\n    Write a function to check whether the given string is starting with a symbol or not using regex.\n    '''\n    return re.match(r'[^!#]*',string)\ndef find_symbol_punct(string): \n    '''\n    Write a function to check whether the given string is starting with a symbol or not using regex.\n    '''\n    return re.match(r'[^!#]*',string)\ndef split_words(string): \n    '''\n    Write a function to split the words of a given string into a list of string.\n    '''\n    words = string.split()\n    return words\ndef split_string(string): \n    '''\n    Write a function to split the string into a list of string.\n    '''\n    return string.split()\ndef get_words(string): \n    '''\n    Write a function to split the words of a given string into a list of string.\n    '''\n    words = string.split()\n    return words\ndef get_punctuation(string): \n    '''\n    Write a function to split the words of a given string into a list of string.\n    '''\n    punctuation = re.findall('[!@$]',string)\n    return punctuation\ndef clean_string(string): \n    '''\n    Write a function to clean the given string using regex and whitespace.\n    '''\n    string = string.replace('\"',' ')\n    string = string.replace('#',' ')\n    string = string.replace('!',' ')\n    string = string.replace('$',' ')\n    string = string.replace('%',' ')\n    string = string.replace('*',' ')\n    string = string.replace('+',' ')\n    string = string.replace('=',' ')\n    string = string.replace('?',' ')\n    string = string.replace('`',' ')\n    string = string.replace('{',' ')\n    string = string.replace('}',' ')\n    string = string.replace('[',' ')\n    string = string.replace(']',' ')\n    string = string.replace('<',' ')\n    string = string.replace('>',' ')\n    string = string.replace(';',' ')\n    string = string.replace(';',' ')\n    string = string.replace(':',' ')\n    string = string.replace(':',' ')\n    string = string.replace('\"',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = string.replace('!',' ')\n    string = strin"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    return n*geometric_sum(n-1)\n    \ndef five(n):\n    '''\n    Write a function that returns the sum of the 5-digit numbers in the range 0 to 9.\n    '''\n    sum=0\n    for i in range(0,5):\n        sum+=int(n[i])\n    return sum\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def recurse(n,x,y):\n        if n==0:\n            return x+y\n        return recurse(n-1,x*n,y*n)\n    return recurse(n,1,1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    else:\n        return geometric_sum(n-1) + geometric_sum(n-2) + geometric_sum(n-3)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum_rec(n, first, last):\n        if n <= 1:\n            return first+last\n        else:\n            return first*last+geometric_sum_rec(n-1, first+last, first*last)\n    return geometric_sum_rec(n, 0, 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n        \ndef main():\n    # write your code here\n    n = input()\n    print(geometric_sum(int(n)))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = math.ceil(n/10)\n    j = n - (i * 10)\n    k = math.floor(n/10)\n    m = n - (k * 10)\n    if i == 0:\n        return 0\n    elif i == 1:\n        return j\n    elif i == 2:\n        return k\n    elif i == 3:\n        return m\n    elif i == 4:\n        return n\n    elif i == 5:\n        return i\n    elif i == 6:\n        return j\n    elif i == 7:\n        return k\n    elif i == 8:\n        return m\n    elif i == 9:\n        return n\n    else:\n        return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0:\n        return -1\n    elif n==1:\n        return 0\n    else:\n        i=0\n        while(i<n):\n            if n%i==0:\n                return i\n            i+=1\n        return -1\n    \ndef is_prime(n):\n    '''\n    Check whether a number is prime or not. https://www.geeksforgeeks.org/check-if-number-is-prime/\n    '''\n    if(n==2):\n        return True\n    elif(n%2==0):\n        return False\n    if n==1:\n        return False\n    elif(n==3):\n        return True\n    else:\n        for i in range(3,math.ceil(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    l=0\n    if n<10:\n        return 0\n    for i in range(1,n+1):\n        l=l+i\n        if(l%10==n):\n            return l\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0: \n        return 0 \n    for i in range(1, n+1): \n        if (n % i) == 0: \n            return i \n            break \n    else: \n        return n \n    \ndef is_square(a): \n    '''\n    Write a python function to check if a number is a square. https://www.geeksforgeeks.org/square-numbers-for-numbers-and-perfect-squares/\n    '''\n    if a % 2 == 0: \n        return True \n    return False \n    \ndef is_square_contains(a): \n    '''\n    Write a python function to check if a number is a square containing another number. \n    https://www.geeksforgeeks.org/square-numbers-for-numbers-and-perfect-squares/\n    '''\n    if (a % 2) == 0: \n        return True \n    return False \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    lst = []\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if math.gcd(j, i) == 1:\n                lst.append(j)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    '''\n    You can use math.floor() function to get a floating point number with its decimal representation.\n    '''\n    print(math.floor(n))\n    '''\n    The if condition is used to check if the user input is a floating point number, if yes the function will return the index of the largest floating point number.\n    If the user input is not a floating point number, then it will throw an error.\n    '''\n    if isinstance(n,float):\n        return int(math.floor(n))\n    else:\n        return int(math.floor(n.replace(',','.')))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 10:\n        return n\n    else:\n        index = n + 1\n        while index % 10 == 0:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 10:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 11:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 1:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 2:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 3:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 4:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 5:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 6:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 7:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 8:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 9:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 0:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 1:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 2:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 3:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 4:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 5:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 6:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 7:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 8:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 9:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 0:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 1:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 2:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 3:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 4:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 5:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 6:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 7:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 8:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 9:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 0:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 1:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 2:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 3:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 4:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 5:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 6:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 7:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 8:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 9:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 0:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 1:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 2:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 3:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 4:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 5:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 6:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 7:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 8:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 9:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 0:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 1:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 2:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 3:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 4:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 5:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 6:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 7:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 8:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 9:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 0:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 1:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 2:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 3:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 4:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 5:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 6:\n            index //= 10\n        if index == 0:\n            return index - 1\n        while index % 10 == 7:\n            index //= 10\n        if index == 0:\n            return inde"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest = math.floor(math.log(n, 10))\n    if n <= 0: \n        return -1\n    \n    while smallest >= 0: \n        if n % 10 == smallest: \n            return smallest \n        n = n // 10 \n        smallest -= 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    x = 0\n    for i in range(1, n+1):\n        x += i**3\n        \n    return x\n    #print(x)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    print('Finding the index of smallest triangular number with n digits')\n    for i in range(0,n):\n        a = math.sqrt(i)\n        if a > 1:\n            for j in range(i, int(math.sqrt(i)+1)):\n                if i%j == 0:\n                    break\n            else:\n                if a < i/j:\n                    return j-1\n        else:\n            if i < 2:\n                return i-1\n            else:\n                return i\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # write your code here\n    return { test_tup[i+1][0]: test_tup[i][0] for i in range(len(test_tup)-1)}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup_d = {}\n    # for index in range(len(test_tup)-1):\n    #     key = test_tup[index]\n    #     value = test_tup[index+1]\n    #     test_tup_d[key] = value\n    # return test_tup_d\n    \n    test_tup_d = dict((i,j) for i,j in test_tup)\n    return test_tup_d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    temp_dict = {}\n    for i in range(len(test_tup)):\n        temp_dict[test_tup[i][0]] = test_tup[i][1]\n    return temp_dict\n    \ndef validate_dict(test_dict):\n    '''\n    Write a function that tests if a dictionary is valid.\n    '''\n    print(test_dict)\n    print(type(test_dict))\n    print(test_dict)\n    \n    if (type(test_dict) is not dict):\n        return False\n    \n    for key in test_dict.keys():\n        if (key not in test_dict.keys()):\n            return False\n            \n    return True\n            \ndef get_key_value(test_dict, key):\n    '''\n    Write a function to get the value of the given key from a dictionary using the key.\n    '''\n    if(key not in test_dict.keys()):\n        return None\n    \n    return test_dict[key]\n    \ndef get_values(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.values()\n    \ndef get_values_as_tuples(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.items()\n    \ndef get_values_as_list(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.keys()\n    \ndef get_values_as_list_as_tuples(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.items()\n    \ndef get_values_as_list_as_tuples_as_dicts(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.items()\n    \ndef is_unique(test_dict):\n    '''\n    Write a function that checks if a dictionary is unique.\n    '''\n    if(type(test_dict) is not dict):\n        return False\n    \n    if(len(test_dict) == 0):\n        return False\n        \n    return True\n    \ndef get_last_key(test_dict):\n    '''\n    Write a function that gets the last key in a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict[-1]\n    \ndef get_last_key_as_list(test_dict):\n    '''\n    Write a function that gets the last key in a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict[-1]\n    \ndef get_last_key_as_list_as_tuples(test_dict):\n    '''\n    Write a function that gets the last key in a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict[-1]\n    \ndef get_last_key_as_list_as_tuples_as_dicts(test_dict):\n    '''\n    Write a function that gets the last key in a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict[-1]\n    \ndef get_last_key_as_list_as_tuples_as_dicts_as_tuples(test_dict):\n    '''\n    Write a function that gets the last key in a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict[-1]\n    \ndef is_unique_as_tuples(test_dict):\n    '''\n    Write a function that checks if a dictionary is unique.\n    '''\n    if(type(test_dict) is not dict):\n        return False\n    \n    if(len(test_dict) == 0):\n        return False\n        \n    if(type(test_dict) is not list):\n        return False\n    \n    if(len(test_dict)!= len(set(test_dict))):\n        return False\n        \n    return True\n    \ndef merge_two_dicts(test_dict):\n    '''\n    Write a function that merges two dictionaries using the key.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict\n    \ndef get_key_value_as_list(test_dict):\n    '''\n    Write a function that gets the value of the given key from a dictionary using the key.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict[test_dict.keys()[-1]]\n    \ndef get_values_as_list(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.values()\n    \ndef get_values_as_list_as_tuples(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.items()\n    \ndef get_values_as_list_as_tuples_as_dicts(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.items()\n    \ndef get_values_as_list_as_tuples_as_dicts_as_tuples(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.items()\n    \ndef get_values_as_list_as_tuples_as_dicts_as_tuples_as_dicts(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.items()\n    \ndef get_values_as_tuples_as_dicts_as_tuples_as_dicts(test_dict):\n    '''\n    Write a function that gets all the values of a dictionary.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict.items()\n    \ndef merge_two_dicts(test_dict):\n    '''\n    Write a function that merges two dictionaries using the key.\n    '''\n    if(type(test_dict) is not dict):\n        return None\n    \n    return test_dict\n    \ndef is_unique_as_dicts(test_dict):\n    '''\n    Write a function that checks if a dictionary is unique.\n    '''\n    if(type(test_dict) is not dict):\n        return False\n    \n    if(len(test_dict) == 0):\n        return False\n    \n    if(type(test_dict) is not list):\n        return False\n    \n    if(len(test_dict)!= len(set(test_dict))):\n        return False\n        \n    return True\n    \ndef remov"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    output_tup = {}\n    for elem in test_tup:\n        if elem in output_tup:\n            output_tup[elem] += 1\n        else:\n            output_tup[elem] = 1\n    return output_tup"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    i = 0\n    for element in test_tup:\n        dict[i] = element\n        i += 1\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #create dict to hold values\n    dict = {}\n    #iterate through the list\n    for index,item in enumerate(test_tup):\n        #add adjacent values to dict\n        if index % 2 == 0:\n            dict[item] = test_tup[index - 1]\n        else:\n            dict[item] = test_tup[index + 1]\n    #return the dict\n    return dict\n    "
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val = []\n    for i in test_tup:\n        key_val.append(i)\n    return dict(zip(key_val, test_tup))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)):\n        dict[test_tup[i][0]] = test_tup[i][1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = None\n    value = None\n    for i in test_tup:\n        if i[0] == i[1]:\n            key = i\n        if key is not None:\n            value = i\n    return value, key\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for character in s:\n        if character in dict1:\n            dict1[character] += 1\n        else:\n            dict1[character] = 1\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    \n    # Base case\n    if len(s) <= 1 :\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = list(s)\n    for i in range(0,len(s)-1):\n        if s[i] == s[i+1]:\n            print(\"False\")\n        else:\n            print(\"True\")\n    return\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #all_char = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    #print(all_char)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c_list = list(s)\n    for c in s:\n        if c not in c_list:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for char in s :\n        if char.lower()!= char.upper() :\n            count += 1\n    if count == len(s) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    lst = list(s)\n    lst = [i for i in s]\n    for i in lst :\n        if i not in lst :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i] == s[j]:\n                continue\n            if s[i] not in set(s[i+1:]):\n                return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Remove white spaces from each string\n    s = \"\".join([e for e in s if e.isspace() == False])\n    # Remove digits from each string\n    s = \"\".join([e for e in s if e.isdigit() == False])\n    # Remove punctuation from each string\n    s = \"\".join([e for e in s if e.isalpha() == True])\n    # Remove non-alpha characters from each string\n    s = \"\".join([e for e in s if e.isalpha() == False])\n    # Remove special characters from each string\n    s = \"\".join([e for e in s if e.isalnum() == True])\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round(math.pi*side**2, 3)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side==\"a\":\n        return 0.5*4*math.sqrt(3)*math.pi\n    elif side==\"b\":\n        return 0.5*4*math.pi*math.sqrt(3)*math.sqrt(3)\n    else:\n        return 0.5*4*math.pi*math.sqrt(3)*math.sqrt(3)\n    \ndef perimeter_tetrahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a tetrahedron.\n    '''\n    if side==\"a\":\n        return 4*math.sqrt(3)*math.pi\n    elif side==\"b\":\n        return 4*math.pi*math.sqrt(3)*math.sqrt(3)\n    else:\n        return 4*math.pi*math.sqrt(3)*math.sqrt(3)\n    \ndef volumetric_tetrahedron(side):\n    '''\n    Write a function to caluclate the volumetric of a tetrahedron.\n    '''\n    if side==\"a\":\n        return 4.0/math.pi*(3.0/8.0+1.0/8.0)*(2.0/3.0+1.0/3.0)\n    elif side==\"b\":\n        return 4.0/math.pi*(3.0/8.0+1.0/8.0)*(2.0/3.0+1.0/3.0)\n    else:\n        return 4.0/math.pi*(3.0/8.0+1.0/8.0)*(2.0/3.0+1.0/3.0)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'a':\n        return 0.333333333333333333\n    elif side == 'b':\n        return 0.5\n    elif side == 'c':\n        return 0.333333333333333333\n    elif side == 'd':\n        return 0.666666666666666666666666\n    elif side == 'e':\n        return 0.333333333333333333\n    elif side == 'f':\n        return 0.333333333333333333\n    else:\n        return 0.333333333333333333\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    p=side/2\n    area=p**2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side==0:\n        return 1\n    elif side==1:\n        return 3/4\n    elif side==2:\n        return 3/4\n    elif side==3:\n        return 2*(2**(1/3))\n    elif side==4:\n        return 2**(1/3)\n    elif side==5:\n        return 2*(2**(1/3))\n    elif side==6:\n        return 2**(1/3)\n    elif side==7:\n        return 2**(1/3)\n    elif side==8:\n        return 2**(1/3)\n    elif side==9:\n        return 2**(1/3)\n    elif side==10:\n        return 2**(1/3)\n    elif side==11:\n        return 2**(1/3)\n    elif side==12:\n        return 2**(1/3)\n    elif side==13:\n        return 2**(1/3)\n    elif side==14:\n        return 2**(1/3)\n    elif side==15:\n        return 2**(1/3)\n    elif side==16:\n        return 2**(1/3)\n    elif side==17:\n        return 2**(1/3)\n    elif side==18:\n        return 2**(1/3)\n    elif side==19:\n        return 2**(1/3)\n    elif side==20:\n        return 2**(1/3)\n    elif side==21:\n        return 2**(1/3)\n    elif side==22:\n        return 2**(1/3)\n    elif side==23:\n        return 2**(1/3)\n    elif side==24:\n        return 2**(1/3)\n    elif side==25:\n        return 2**(1/3)\n    elif side==26:\n        return 2**(1/3)\n    elif side==27:\n        return 2**(1/3)\n    elif side==28:\n        return 2**(1/3)\n    elif side==29:\n        return 2**(1/3)\n    elif side==30:\n        return 2**(1/3)\n    elif side==31:\n        return 2**(1/3)\n    elif side==32:\n        return 2**(1/3)\n    elif side==33:\n        return 2**(1/3)\n    elif side==34:\n        return 2**(1/3)\n    elif side==35:\n        return 2**(1/3)\n    elif side==36:\n        return 2**(1/3)\n    elif side==37:\n        return 2**(1/3)\n    elif side==38:\n        return 2**(1/3)\n    elif side==39:\n        return 2**(1/3)\n    elif side==40:\n        return 2**(1/3)\n    elif side==41:\n        return 2**(1/3)\n    elif side==42:\n        return 2**(1/3)\n    elif side==43:\n        return 2**(1/3)\n    elif side==44:\n        return 2**(1/3)\n    elif side==45:\n        return 2**(1/3)\n    elif side==46:\n        return 2**(1/3)\n    elif side==47:\n        return 2**(1/3)\n    elif side==48:\n        return 2**(1/3)\n    elif side==49:\n        return 2**(1/3)\n    elif side==50:\n        return 2**(1/3)\n    elif side==51:\n        return 2**(1/3)\n    elif side==52:\n        return 2**(1/3)\n    elif side==53:\n        return 2**(1/3)\n    elif side==54:\n        return 2**(1/3)\n    elif side==55:\n        return 2**(1/3)\n    elif side==56:\n        return 2**(1/3)\n    elif side==57:\n        return 2**(1/3)\n    elif side==58:\n        return 2**(1/3)\n    elif side==59:\n        return 2**(1/3)\n    elif side==60:\n        return 2**(1/3)\n    elif side==61:\n        return 2**(1/3)\n    elif side==62:\n        return 2**(1/3)\n    elif side==63:\n        return 2**(1/3)\n    elif side==64:\n        return 2**(1/3)\n    elif side==65:\n        return 2**(1/3)\n    elif side==66:\n        return 2**(1/3)\n    elif side==67:\n        return 2**(1/3)\n    elif side==68:\n        return 2**(1/3)\n    elif side==69:\n        return 2**(1/3)\n    elif side==70:\n        return 2**(1/3)\n    elif side==71:\n        return 2**(1/3)\n    elif side==72:\n        return 2**(1/3)\n    elif side==73:\n        return 2**(1/3)\n    elif side==74:\n        return 2**(1/3)\n    elif side==75:\n        return 2**(1/3)\n    elif side==76:\n        return 2**(1/3)\n    elif side==77:\n        return 2**(1/3)\n    elif side==78:\n        return 2**(1/3)\n    elif side==79:\n        return 2**(1/3)\n    elif side==80:\n        return 2**(1/3)\n    elif side==81:\n        return 2**(1/3)\n    elif side==82:\n        return 2**(1/3)\n    elif side==83:\n        return 2**(1/3)\n    elif side==84:\n        return 2**(1/3)\n    elif side==85:\n        return 2**(1/3)\n    elif side==86:\n        return 2**(1/3)\n    elif side==87:\n        return 2**(1/3)\n    elif side==88:\n        return 2**(1/3)\n    elif side==89:\n        return 2**(1/3)\n    elif side==90:\n        return 2**(1/3)\n    elif side==91:\n        return 2**(1/3)\n    elif side==92:\n        return 2**(1/3)\n    elif side==93:\n        return 2**(1/3)\n    elif side==94:\n        return 2**(1/3)\n    elif side==95:\n        return 2**(1/3)\n    elif side==96:\n        return 2**(1/3)\n    elif side==97:\n        return 2**(1/3)\n    elif side==98:\n        return 2**(1/3)\n    elif side==99:\n        return 2**(1/3)\n    elif side==100:\n        return 2**(1/3)\n    elif side==101:\n        return 2**(1/3)\n    elif side==102:\n        return 2**(1/3)\n    elif side==103:\n        return 2**(1/3)\n    elif side==104:\n        return 2**(1/3)\n    elif side==105:\n        return 2**(1/3)\n    elif side==106:\n        return 2**(1/3)\n    elif side==107:\n        return 2**(1/3)\n    elif side==108:\n        return 2**(1/3)\n    elif side==109:\n        return 2**(1/3)\n    elif side==110:\n        return 2**(1/3)\n    elif side==111:\n        return 2**(1/3)"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side) + \".\")\n    elif side == 1:\n        print(\"There is a parallelequilateral triangle with sides length of \" + str(side) + \".\")\n    elif side == 2:\n        print(\"There is an isosceles triangle with sides length of \" + str(side) + \".\")\n    elif side == 3:\n        print(\"There is an isosceles triangle with sides length of \" + str(side) + \".\")\n    elif side == 4:\n        print(\"There is a scalene triangle with sides length of \" + str(side) + \".\")\n    elif side == 5:\n        print(\"There is a convexed triangle with sides length of \" + str(side) + \".\")\n    elif side == 6:\n        print(\"There is a convexed triangle with sides length of \" + str(side) + \".\")\n    elif side == 7:\n        print(\"There is a isosceles triangle with sides length of \" + str(side) + \".\")\n    elif side == 8:\n        print(\"There is a isosceles triangle with sides length of \" + str(side) + \".\")\n    elif side == 9:\n        print(\"There is a convexed triangle with sides length of \" + str(side) + \".\")\n    elif side == 10:\n        print(\"There is a convexed triangle with sides length of \" + str(side) + \".\")\n    else:\n        print(\"There is a triangle with sides length of \" + str(side) + \".\")\n    \ndef isosceles_triangle(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the isosceles triangle.\n    '''\n    if side_1 == 0 and side_2 == 0 and side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == 0 and side_2 == 0 and side_3 == side_2:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_2) + \".\")\n    elif side_1 == 0 and side_2 == side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == side_2 == side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == side_2 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_2 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_2) + \".\")\n    elif side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_3) + \".\")\n    else:\n        print(\"There is a triangle with sides length of \" + str(side_1) + \".\")\n        print(\"There is a triangle with sides length of \" + str(side_2) + \".\")\n        print(\"There is a triangle with sides length of \" + str(side_3) + \".\")\n        \ndef parallelequilateral_triangle(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the parallelequilateral triangle.\n    '''\n    if side_1 == 0 and side_2 == 0 and side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == side_2 == side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_2 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_2) + \".\")\n    elif side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_3) + \".\")\n    else:\n        print(\"There is a triangle with sides length of \" + str(side_1) + \".\")\n        print(\"There is a triangle with sides length of \" + str(side_2) + \".\")\n        print(\"There is a triangle with sides length of \" + str(side_3) + \".\")\n        \ndef hyperosceles_triangle(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the hyperosceles triangle.\n    '''\n    if side_1 == 0 and side_2 == 0 and side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == side_2 == side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_2 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_2) + \".\")\n    elif side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_3) + \".\")\n    else:\n        print(\"There is a triangle with sides length of \" + str(side_1) + \".\")\n        print(\"There is a triangle with sides length of \" + str(side_2) + \".\")\n        print(\"There is a triangle with sides length of \" + str(side_3) + \".\")\n        \ndef convex_triangle(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the convex triangle.\n    '''\n    if side_1 == side_2 == side_3 == 0:\n        print(\"There is a triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_2 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_2) + \".\")\n    elif side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_3) + \".\")\n    else:\n        print(\"There is a triangle with sides length of \" + str(side_1) + \".\")\n        print(\"There is a triangle with sides length of \" + str(side_2) + \".\")\n        print(\"There is a triangle with sides length of \" + str(side_3) + \".\")\n        \ndef isosceles_triangle_eliminate(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the isosceles triangle.\n    '''\n    if side_1 == 0 and side_2 == 0 and side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == side_2 == side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_1 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_1) + \".\")\n    elif side_2 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_2) + \".\")\n    elif side_3 == 0:\n        print(\"There is an equilateral triangle with sides length of \" + str(side_3) + \".\")\n    else:\n        print(\"There is a triangle with sides length of \" + str(side_1) + \".\")\n        print(\"There is a triangle with sides length of \" + str(side_2) + \".\")\n        prin"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    n=int(side)\n    return pow(2,n)*(4-n)*(3.14/360)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/6 * side ** 2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side * side) * math.sqrt(3)\n    return area\ndef area_pyramid(n):\n    '''\n    Write a function to calculate the area of a pyramid.\n    '''\n    area = n * (n ** 2) * math.sqrt(3)\n    return area\ndef area_cube(n):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    area = n * math.sqrt(3)\n    return area\ndef volume_cuboid(side):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    volume = math.sqrt(side ** 3) * math.sqrt(3)\n    return volume\ndef volume_pyramid(n):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    volume = n * math.sqrt(3) * n\n    return volume\ndef volume_cube(n):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    volume = n * math.sqrt(3)\n    return volume\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_cube_pyramid(n):\n    '''\n    Write a function to calculate the volume of a cube pyramid.\n    '''\n    volume = n * math.sqrt(3) * n\n    return volume\ndef volume_cube_cuboid(side):\n    '''\n    Write a function to calculate the volume of a cube cuboid.\n    '''\n    volume = math.sqrt(side ** 3) * math.sqrt(3)\n    return volume\ndef volume_circle(side):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    volume = math.pi * math.pow(side, 2)\n    return volume\ndef volume_pyramid_cuboid(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * side ** 3\n    return volume\ndef volume_pyramid_cuboid_2(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 3)\n    return volume\ndef volume_triangle(side):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_pyramid_cuboid_3(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 3)\n    return volume\ndef volume_pyramid_cuboid_4(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 4)\n    return volume\ndef volume_pyramid_cuboid_5(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 5)\n    return volume\ndef volume_pyramid_cuboid_6(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 6)\n    return volume\ndef volume_cube_cuboid_7(side):\n    '''\n    Write a function to calculate the volume of a cube cuboid.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_pyramid_cuboid_8(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 8)\n    return volume\ndef volume_pyramid_cuboid_9(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 9)\n    return volume\ndef volume_pyramid_cuboid_10(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 10)\n    return volume\ndef volume_cube_cuboid_11(side):\n    '''\n    Write a function to calculate the volume of a cube cuboid.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_pyramid_cuboid_12(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 12)\n    return volume\ndef volume_pyramid_cuboid_13(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 13)\n    return volume\ndef volume_cube_cuboid_14(side):\n    '''\n    Write a function to calculate the volume of a cube cuboid.\n    '''\n    volume = side ** 3\n    return volume\ndef volume_pyramid_cuboid_15(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 14)\n    return volume\ndef volume_pyramid_cuboid_16(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 15)\n    return volume\ndef volume_pyramid_cuboid_17(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 16)\n    return volume\ndef volume_pyramid_cuboid_18(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 17)\n    return volume\ndef volume_pyramid_cuboid_19(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 18)\n    return volume\ndef volume_pyramid_cuboid_20(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 19)\n    return volume\ndef volume_pyramid_cuboid_21(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 20)\n    return volume\ndef volume_pyramid_cuboid_22(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 21)\n    return volume\ndef volume_pyramid_cuboid_23(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 22)\n    return volume\ndef volume_pyramid_cuboid_24(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 23)\n    return volume\ndef volume_pyramid_cuboid_25(side):\n    '''\n    Write a function to calculate the volume of a cube pyramid cuboid.\n    '''\n    volume = n ** 3 * math.pow(side, 24)\n    return volume\ndef volume_pyramid_cuboid_26(side):\n    '''\n    Write a function to calculate the volume of "
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 0.25*math.pi*6\n    elif side == 2:\n        return math.pi*2\n    elif side == 3:\n        return 0.25*math.pi*6\n    else:\n        return 0.25*math.pi*6\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(list)\n    \n    def rotate_right_rec(list, m):\n        print(list)\n        if len(list) == 1:\n            return list\n        else:\n            return list[-1] + rotate_right_rec(list[0:-1], m + 1)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(len(list)-1, -1, -1):\n        list[i] = list[i+1]\n    list[-1] = list[0]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        for j in range(n - 1, -1, -1):\n            #print(f'{j + 1}: {list[j]}')\n            list[j], list[j + 1] = list[j + 1], list[j]\n            #print(f'list[{j + 1}] = {list[j + 1]}')\n            #print(f'list[{j}] = {list[j]}')\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    j = len(list) - 1\n    while j >= 0:\n        for i in range(j + 1):\n            list[i], list[j] = list[j], list[i]\n        j -= 1\n    return list\n    \ndef get_times(int_list):\n    '''\n    write a function to get the number of times a given item has been repeated\n    '''\n    return int_list.count(int_list[0])\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        # \ub9cc\uc57d \ub370\uc774\ud130\uac00 \ub9ac\uc2a4\ud2b8\uc758 \uc694\uc18c\uac00 \uc544\ub2c8\ub77c\uba74, \uc55e\ucabd\uc5d0 \uc6d0\ub798\ub294 \ub370\uc774\ud130\ub97c \uc790\uae30\ub85c \uc774\ub3d9\n        if list[i] == None:\n            list[i] = list[i+1]\n            continue\n        # \ub370\uc774\ud130\uac00 \ub9ac\uc2a4\ud2b8\uc758 \uc694\uc18c\uac00 \uc544\ub2c8\ub77c\uba74, \uc804\ubd80 \uc6d0\ub798\ub294 \ub370\uc774\ud130\ub97c \uc790\uae30\ub85c \uc774\ub3d9\n        elif list[i] == list[i+1]:\n            list[i] = list[i+1]\n            continue\n        # \ub370\uc774\ud130\uac00 \ub9ac\uc2a4\ud2b8\uc758 \uc694\uc18c\uac00 \uc544\ub2c8\ub77c\uba74, \uc804\ubd80 \uc6d0\ub798\ub294 \ub370\uc774\ud130\ub97c \uc790\uae30\ub85c \uc774\ub3d9\n        elif list[i] == list[i-1]:\n            list[i] = list[i-1]\n            continue\n        # \ub370\uc774\ud130\uac00 \ub9ac\uc2a4\ud2b8\uc758 \uc694\uc18c\uac00 \uc544\ub2c8\ub77c\uba74, \uc804\ubd80 \uc6d0\ub798\ub294 \ub370\uc774\ud130\ub97c \uc790\uae30\ub85c \uc774\ub3d9\n        elif list[i] == None:\n            list[i] = list[i-1]\n            continue\n    # \ub0a8\uc740 \uc694\uc18c\uac00 \uba87 \ubc88\uc9f8 \ub370\uc774\ud130 \uc774\ub77c\uba74, \ubaa8\ub4e0 \uc6d0\uc18c\ub97c \uc774\ub3d9\n    if list[0]!= None:\n        for i in range(m):\n            list[i] = list[i-1]\n    # \ub0a8\uc740 \uc694\uc18c\uac00 \uc544\ub2c8\ub77c\uba74, \ubaa8\ub4e0 \uc6d0\uc18c\ub97c \uc774\ub3d9\n    else:\n        for i in range(m):\n            list[i] = list[i+1]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    left = 0\n    right = len(list)-1\n    \n    while left < right:\n        #print(f\"left: {left} right: {right}\")\n        for i in range(left, right):\n            temp = list[i]\n            list[i] = list[right]\n            list[right] = temp\n        right -= 1\n        left += 1\n    \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m >= len(list):\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        for j in range(len(list)):\n            list[i], list[j] = list[j], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    i=0\n    j=len(list)-1\n    while i<j:\n        list[i],list[j]=list[j],list[i]\n        i+=1\n        j-=1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = list[::-1]\n    #print(new_list)\n    return new_list\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    count = 0\n    for item in test_tup:\n        if item == None:\n            count = count + 1\n    if count > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val!= None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return (test_tup[0] is None or test_tup[0] == '')\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == () or test_tup == ():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for v in test_tup:\n        if v is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if tuple(test_tup) == None:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def isprime(x):\n        if x == 1:\n            return False\n        elif x == 2:\n            return True\n        else:\n            for i in range(2, int(math.sqrt(x)) + 1):\n                if x % i == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print('Divisible by digits')\n    divisible = []\n    # this one is naive\n    for i in range(startnum, endnum+1):\n        if is_prime(i):\n            divisible.append(i)\n    \n    # this one has a nicer way, but it works\n    # for even or odd numbers, we need to join them together\n    # then split the string and return a list, the number is the first element\n    for i in divisible:\n        divisible.append(i)\n        splitnum = divisible[0]\n        divisible.pop(0)\n        divisible.append(splitnum)\n        \n    print(divisible)\n    return(divisible)\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not. \n    '''\n    if num < 2:\n        return(False)\n    if num == 2:\n        return(True)\n    if num > 2 and num % 2 == 0:\n        return(False)\n    if num > 2 and num % 3 == 0:\n        return(False)\n    if num > 2 and num % 5 == 0:\n        return(False)\n    i = 7\n    while i ** 2 <= num:\n        if num % i == 0:\n            return(False)\n        i += 2\n    return(True)\n    \ndef even_or_odd(num):\n    '''\n    Write a function to determine if a number is even or odd.\n    '''\n    if num % 2 == 0:\n        return('even')\n    else:\n        return('odd')\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum):\n        if(i % 10 == 0):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by(num):\n        for digit in str(num):\n            if int(digit) % num == 0:\n                return False\n        return True\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    output = []\n    for i in range(startnum, endnum + 1):\n        if i % 10 == 0:\n            output.append(i)\n        else:\n            i_div = i // 10\n            if i_div in output:\n                pass\n            else:\n                output.append(i_div)\n    return output\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    range1= range(startnum,endnum)\n    range2= range(0,10)\n    for i in range1:\n        num=i\n        for j in range2:\n            if num%j==0:\n                range1.append(num)\n                break\n    return range1\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here.\n    return\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    isEven = lambda n: (n % 2) == 0\n    return [num for num in range(startnum, endnum) if isEven(num)]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    for i in range(startnum, endnum):\n        for j in range(10):\n            if i % j == 0:\n                numbers.append(j)\n    return numbers\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    s = 4*math.pi*r\n    t = math.tan(a)\n    c = math.cos(a)\n    a2 = (r**2)/(s*c)\n    return s*t*a2\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    def area(r,a):\n        return r * math.sin(a)\n    if r*math.sin(a)>0:\n        return None\n    else:\n        #print(\"AREA\")\n        #print(area(r,a))\n        return area(r,a)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a==0:\n        return None\n    \n    pi=math.pi\n    R=r*math.cos(a*pi/180)\n    return R*math.sin(a*pi/180)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0\n    for x in range(r):\n        y = math.tan(math.radians(a))*r\n        area += y*y\n    area = round(area,3)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pi = 3.14159265358979323846\n    #phi = pi*a/(2*r)\n    phi = a\n    area = r*(math.sin(phi))**2\n    print(\"Area of sector is \"+str(round(area,5)))\ndef sector_perimeter(r,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pi = 3.14159265358979323846\n    #phi = pi*a/(2*r)\n    phi = a\n    peri = 2*(math.sin(phi))*r\n    print(\"Perimeter of sector is \"+str(round(peri,5)))\ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pi = 3.14159265358979323846\n    #phi = pi*a/(2*r)\n    phi = a\n    vol = (math.pi*(r**2))*(math.sin(phi))\n    print(\"Volume of sector is \"+str(round(vol,5)))\ndef sector_angle(r,a):\n    '''\n    Write a function to find angle between two sectors. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pi = 3.14159265358979323846\n    #phi = pi*a/(2*r)\n    phi = a\n    if r == r:\n        print(\"The angle is \"+str(round(phi,5)))\n    elif r == 0:\n        print(\"The angle is \"+str(round(phi,5)))\n    elif r == 1:\n        print(\"The angle is \"+str(round(phi,5)))\n    else:\n        phi = pi*a/(2*r)\n        print(\"The angle is \"+str(round(phi,5)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    print('sector area'+ str(r) +'' + str(a))\n    if r > 0:\n        theta = (math.pi/180) * a\n        theta = theta * (180/math.pi)\n        x = math.cos(theta) * r\n        y = math.sin(theta) * r\n        print('theta ='+ str(theta))\n        print('x ='+ str(x))\n        print('y ='+ str(y))\n    elif r < 0:\n        theta = (math.pi/180) * a\n        theta = theta * (180/math.pi)\n        x = math.cos(theta) * r\n        y = math.sin(theta) * r\n        print('theta ='+ str(theta))\n        print('x ='+ str(x))\n        print('y ='+ str(y))\n    else:\n        print('The angle input is invalid')\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 360 or a >= 360 or a < 0:\n        return None\n    if r > 360 or a >= 360:\n        return None\n    if a > 360:\n        return None\n    if r <= 360 and a <= 360:\n        return 360\n    if r <= 360 and a <= 360 and r >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r <= 360 and a >= 360 and r >= 360:\n        return ((360*(360/(a*360))*(math.pi**3))*r**3)\n    if r <= 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a >= 360 and a >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360 and r >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a >= 360 and r >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360 and r >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a >= 360 and a >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360 and r >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r >= 360:\n        return None\n    return None\ndef sector_area_1(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 360 or a >= 360 or a < 0:\n        return None\n    if r > 360 or a >= 360:\n        return None\n    if r <= 360 and a >= 360:\n        return 360\n    if r <= 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r <= 360 and a < 360 and r >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r <= 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r <= 360 and a < 360 and r >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r <= 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360 and r >= 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r >= 360:\n        return None\n    return None\ndef sector_area_2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 360 or a >= 360:\n        return None\n    if r > 360 or a >= 360:\n        return None\n    if r <= 360 and a >= 360:\n        return 360\n    if r <= 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r <= 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r <= 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r <= 360 and a < 360:\n        return (360*(360/(a*360))*(math.pi**3))*r**3\n    if r <= 36"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    c = (math.cos(a))\n    r = r * c\n    s = r * (r+1)\n    return s\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<=180:\n        return 0\n    elif a<=360:\n        return math.pi*r**2\n    elif a>=360:\n        return -1\n    else:\n        a=math.radians(a)\n        if a<=math.pi/2:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>=math.pi/2 and a<=math.pi*(2*math.pi)/3:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(2*math.pi)/3 and a<=math.pi*(3*math.pi)/4:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(3*math.pi)/4 and a<=math.pi*(4*math.pi)/5:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(4*math.pi)/5 and a<=math.pi*(5*math.pi)/6:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(5*math.pi)/6 and a<=math.pi*(6*math.pi)/7:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(6*math.pi)/7 and a<=math.pi*(7*math.pi)/8:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(7*math.pi)/8 and a<=math.pi*(8*math.pi)/9:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(8*math.pi)/9 and a<=math.pi*(9*math.pi)/10:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(9*math.pi)/10 and a<=math.pi*(10*math.pi)/11:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(10*math.pi)/11 and a<=math.pi*(11*math.pi)/12:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(11*math.pi)/12 and a<=math.pi*(12*math.pi)/13:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(12*math.pi)/13 and a<=math.pi*(13*math.pi)/14:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(13*math.pi)/14 and a<=math.pi*(14*math.pi)/15:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(14*math.pi)/15 and a<=math.pi*(15*math.pi)/16:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(15*math.pi)/16 and a<=math.pi*(16*math.pi)/17:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(16*math.pi)/17 and a<=math.pi*(17*math.pi)/18:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(17*math.pi)/18 and a<=math.pi*(18*math.pi)/19:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(18*math.pi)/19 and a<=math.pi*(19*math.pi)/20:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(19*math.pi)/20 and a<=math.pi*(20*math.pi)/21:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(20*math.pi)/21 and a<=math.pi*(21*math.pi)/22:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(21*math.pi)/22 and a<=math.pi*(22*math.pi)/23:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(22*math.pi)/23 and a<=math.pi*(23*math.pi)/24:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(23*math.pi)/24 and a<=math.pi*(24*math.pi)/25:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(24*math.pi)/25 and a<=math.pi*(25*math.pi)/26:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(25*math.pi)/26 and a<=math.pi*(26*math.pi)/27:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(26*math.pi)/27 and a<=math.pi*(27*math.pi)/28:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(27*math.pi)/28 and a<=math.pi*(28*math.pi)/29:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(28*math.pi)/29 and a<=math.pi*(29*math.pi)/30:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(29*math.pi)/30 and a<=math.pi*(30*math.pi)/31:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(30*math.pi)/31 and a<=math.pi*(31*math.pi)/32:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(31*math.pi)/32 and a<=math.pi*(32*math.pi)/33:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(32*math.pi)/33 and a<=math.pi*(33*math.pi)/34:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(33*math.pi)/34 and a<=math.pi*(34*math.pi)/35:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(34*math.pi)/35 and a<=math.pi*(35*math.pi)/36:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(35*math.pi)/36 and a<=math.pi*(36*math.pi)/37:\n            return 2*math.pi*r**2*math.sin(a)\n        elif a>math.pi*(36*math.pi)/3"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    result = 0 \n    i, j, k = 0, 0, 0 \n    while(i < len(X) and j < len(Y) and k < len(Z)): \n        if(X[i] == Y[j] == Z[k]): \n            result = max(result, len(X[i:]) + len(Y[j:]) + len(Z[k:]) ) \n            i += 1 \n            j += 1 \n            k += 1 \n        elif(X[i] < Y[j] < Z[k]): \n            j += 1 \n        elif(X[i] < Z[k] < Y[j]): \n            i += 1 \n        elif(X[i] > Y[j] > Z[k]): \n            k += 1 \n    return result \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #set up DP array \n    dp = [[0 for x in range(len(Z)+1)] for x in range(len(X)+1)] \n    # loop through rows\n    for i in range(1, len(X)+1): \n        for j in range(1, len(Z)+1): \n            # if the current character in X or Z is a blank character then return max\n            if X[i-1] == Z[j-1] or X[i-1] == Z[j-1] and Z[j-1]!= '.':\n                dp[i][j] = dp[i-1][j-1] + 1\n            # if the current character in X and Z is not a blank character then return max\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # returns the longest common subsequence \n    return dp[len(X)][len(Z)]\n    \ndef solve(X, Y, Z):\n    '''\n    Write a function that returns the longest common subsequence between the characters in strings X and Y.\n    X and Y are strings of length at most 1.\n    '''\n    #get the longest common subsequence of the strings X and Y\n    return lcs_of_three(X, Y, Z)\n    \ndef solve2(X, Y, Z):\n    '''\n    Write a function that returns the longest common subsequence between the characters in strings X and Y.\n    X and Y are strings of length at most 1.\n    '''\n    #get the longest common subsequence of the strings X and Y\n    return max(lcs_of_three(X, Y, Z), len(X) + len(Y), len(Z) + len(Y))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # declaring global variables \n    LCS = [[0 for x in range(len(X)+1)] for y in range(len(Y)+1)]\n    i, j, k = 0, 0, 0\n    \n    # iterate through the array \n    for x in range(len(X)): \n        for y in range(len(Y)): \n            if X[x] == Y[y]: \n                LCS[y+1][x+1] = LCS[y][x] + 1\n                if x+1 == y: \n                    i = x\n                    j = y\n                k = max(k, LCS[y+1][x+1])\n            else: \n                LCS[y+1][x+1] = max(LCS[y][x], LCS[y+1][x+1])\n    \n    # return the lcs\n    return LCS[k][j]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    x = len(Z)\n    if n == 0 or m == 0 or x == 0: \n        return 0\n    if n == 0:\n        return max(Z[0], Y[0])\n    if m == 0:\n        return max(Z[0], X[0])\n    if x == 0:\n        return max(Z[0], Y[0])\n    LCS = [[0] * (x+1) for i in range(n+1)]\n    LCS[0][0] = 0\n    for j in range(1, n+1):\n        for k in range(1, x+1):\n            if X[j-1] == Z[k-1]:\n                LCS[j][k] = LCS[j-1][k-1] + 1\n            else:\n                LCS[j][k] = max(LCS[j-1][k], LCS[j][k-1])\n    return LCS[n][x]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X) # m is the length of X\n    n = len(Y) # n is the length of Y\n    d = len(Z) # d is the length of Z\n    l = [[0 for x in range(d+1)] for x in range(m+1)] # l[i][j] stores the length of L[i] to L[i+1], and L[j+1][k] to L[j+1][k+1]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = sorted(X) \n    Y = sorted(Y) \n    Z = sorted(Z) \n    L = len(X) \n    L = L - 1 \n    R = len(Y) \n    R = R - 1 \n    max_lcs = 0 \n    if X[0] == Y[0] and Y[0] == Z[0]: \n        return max_lcs \n    elif X[0] == Y[1] and Y[1] == Z[1]: \n        return max_lcs \n    elif X[0] == Y[2] and Y[2] == Z[2]: \n        return max_lcs \n    if X[L] == Y[R] and Y[R] == Z[R]: \n        return max_lcs \n    elif X[L] == Y[R] and Y[R] == Z[R]: \n        return lcs_of_three(X[1:L+1], Y[1:R+1], Z[1:R+1]) \n    else: \n        print(\"ERROR\") \n    return max_lcs\ndef lcs_of_two(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    X = sorted(X) \n    Y = sorted(Y) \n    if X[0] == Y[0]: \n        return lcs_of_two(X[1:], Y) \n    else: \n        print(\"ERROR\") \n    return max_lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs = []\n    #Initialize result\n    lcs = \"\"\n    #Create lcs array \n    arr = [0] * len(X)\n    #Loop through each string\n    for i in range(len(X)):\n        #If string is already used, skip\n        if (arr[i]!= 0):\n            continue\n        #Find all possible characters to find common\n        for j in range(i, len(X)):\n            if (arr[j] == 1):\n                #If it has more than one matching, make it a string\n                if (arr[j] == 0):\n                    lcs = lcs + X[i] + X[j]\n                #If it has no matching, skip it\n                if (lcs[0] == X[i] and lcs[1] == X[j]):\n                    continue\n                #If the first char is equal to the second char, make it a string\n                elif (lcs[0] == X[i]):\n                    lcs = lcs + X[i] + X[j]\n                #If the first char is not equal to the second char, make it a string\n                elif (lcs[0]!= X[i]):\n                    lcs = lcs + X[i] + X[j]\n    #Return result\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # corner case\n    if len(X) < len(Y) or len(Y) < len(Z): return \"\"\n    elif len(X) < len(Z): return Z\n    elif len(Y) < len(Z): return X\n    \n    # track which places we get the longest common subsequence\n    LCS = [[0 for x in range(len(Z) + 1)] for y in range(len(X) + 1)]\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i-1] == Z[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    \n    # print the LCS and return it\n    if LCS[-1][-1]!= 0:\n        return LCS[-1][-1]\n    else:\n        return \"\"\n    \ndef levenshtein_distance(str1, str2): \n    '''\n    The Levenshtein Distance Algorithm, and the Metric which is used to calculate the distance between two strings. https://en.wikipedia.org/wiki/Levenshtein_distance\n    '''\n    # corner case\n    if len(str1) < len(str2):\n        return str2[len(str1)-1]\n    elif len(str1) > len(str2):\n        return str1[0]\n    \n    # track\n    LCS = [[0 for x in range(len(str2)+1)] for y in range(len(str1)+1)]\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    \n    # print the LCS and return it\n    if LCS[-1][-1]!= 0:\n        return LCS[-1][-1]\n    else:\n        return str1[-1]\n    \ndef count_substring(str, pattern):\n    '''\n    Count the number of occurrences of the pattern in the given string. Returns a dictionary with pattern as key and number of occurrences as value\n    '''\n    # corner case\n    if len(pattern) == 0:\n        return {}\n    \n    # count the occurrence of pattern in string\n    count = {}\n    for i in range(len(str) - len(pattern)+1):\n        if pattern in str[i:i+len(pattern)]:\n            if pattern in count:\n                count[pattern] += 1\n            else:\n                count[pattern] = 1\n    \n    # return the result as a dictionary\n    return count\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X)<len(Y):\n        return lcs_of_three(Z,Y,X)\n    elif len(X)<len(Y):\n        return lcs_of_three(Z,Y,X)\n    else:\n        LCS_of_X = lcs_of_three(X,Y,Z)\n        LCS_of_Y = lcs_of_three(X,Y,Z)\n        LCS_of_Z = lcs_of_three(X,Y,Z)\n        return LCS_of_X[0] + LCS_of_Y[0] + LCS_of_Z[0]\ndef lcs(X, Y, Z):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_three(X,Y,Z)\ndef lcs_of_array(x):\n    if len(x)<3:\n        return len(x)\n    else:\n        LCS = [[0 for i in range(len(x))] for i in range(len(x))]\n        for i in range(len(x)-1):\n            for j in range(len(x)):\n                if i==0 or j==0:\n                    LCS[i][j] = 0\n                elif x[i] == x[j]:\n                    LCS[i][j] = LCS[i-1][j-1] + 1\n                else:\n                    LCS[i][j] = max(LCS[i-1][j],LCS[i][j-1])\n        return LCS[len(x)-1][len(x)-1]\ndef lcs_of_string(x,y):\n    if len(x)<len(y):\n        return len(y)\n    else:\n        LCS = [[0 for i in range(len(x))] for i in range(len(y))]\n        for i in range(len(x)):\n            for j in range(len(y)):\n                if i==0 or j==0:\n                    LCS[j][i] = 0\n                elif x[i] == y[j]:\n                    LCS[j][i] = LCS[j-1][i-1] + 1\n                else:\n                    LCS[j][i] = max(LCS[j-1][i],LCS[j][i-1])\n        return LCS[len(x)-1][len(y)-1]\ndef lcs_of_string_lower_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x.lower(),y.lower())\ndef lcs_of_string_upper_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y.upper())\ndef lcs_of_strings(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y.lower()) + lcs_of_string(y,x)\ndef lcs_of_strings_lower_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y.lower()) + lcs_of_string(y.lower(),x)\ndef lcs_of_strings_upper_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y.upper()) + lcs_of_string(y.upper(),x)\ndef lcs_of_string_and_string_lower_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y.lower()) + lcs_of_string(y,x)\ndef lcs_of_string_and_string_upper_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y.upper()) + lcs_of_string(y.upper(),x)\ndef lcs_of_string_and_string_both_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y) + lcs_of_string(y,x)\ndef lcs_of_string_and_string_both_count_lower_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y) + lcs_of_string(y,x) + lcs_of_string(x,y.lower())\ndef lcs_of_string_and_string_both_count_upper_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y) + lcs_of_string(y,x) + lcs_of_string(x.lower(),y)\ndef lcs_of_string_and_string_both_count_both_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y) + lcs_of_string(y,x) + lcs_of_string(x.lower(),y.lower())\ndef lcs_of_string_and_string_both_count_both_count_lower_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y) + lcs_of_string(y,x) + lcs_of_string(x.lower(),y.lower())\ndef lcs_of_string_and_string_both_count_lower_count_upper_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y) + lcs_of_string(y,x) + lcs_of_string(x.lower(),y.upper())\ndef lcs_of_string_and_string_both_count_both_count_both_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y) + lcs_of_string(y,x) + lcs_of_string(x.lower(),y.lower()) + lcs_of_string(x.lower(),y.upper())\ndef lcs_of_string_and_string_both_count_both_count_both_count_lower_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y) + lcs_of_string(y,x) + lcs_of_string(x.lower(),y.lower()) + lcs_of_string(x.lower(),y.upper()) + lcs_of_string(x.lower(),y.lower())\ndef lcs_of_string_and_string_both_count_both_count_lower_count_upper_count(x,y):\n    '''\n    Return the length of the longest common subsequence of two strings X,Y.\n    '''\n    return lcs_of_string(x,y) + lcs_of_string(y,x) + lcs_of_string(x.lower(),y.lower()) + lcs_of_string(x.lower(),y.upper()) + lcs_of_string("
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) > len(Y) and len(Y) > len(Z): \n        return lcs_of_three(X, Z, Y)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'[^A-Z]','', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = \"\"\n    for word in str1.split():\n        if word[0].isupper():\n            result += word[0] + \" \"\n        else:\n            result += word[0] + \" \" + word[1].upper() + \" \"\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'^\\W','', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # for i in range(0, len(str1)):\n    #     if str1[i].isupper():\n    #         str1 = str1[0:i] +'' + str1[i:]\n    #     if str1[i].islower():\n    #         str1 = str1[0:i] +'' + str1[i:]\n    str1 = str1.strip().lower()\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('  ','')\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    splitted_str = re.split(r'(\\b[a-zA-Z]\\b) ', str1)\n    for i in splitted_str:\n        if i[0].isupper():\n            splitted_str.insert(0, i + \" \")\n    return''.join(splitted_str)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace('-','').replace('(', '(').replace(')', ')').replace('&', 'AND').replace('|', 'OR').replace('!', 'NOT').replace('?', 'NOT?').replace('&', 'AND').replace('|', 'OR')\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = '([A-Z]+[a-z]+)'\n    str1 = str1.replace(\" \", \"\")\n    if(str1!= ''):\n        result = re.findall(pattern, str1)\n        result = str(result)\n        if(result!= ''):\n            result = str(result).replace(\"'\", \"\")\n            result = result.replace('[','').replace(']','')\n            result = result.replace('[','').replace(']','')\n            result = result.replace('\\'', '')\n            result = result.replace(' ', '').replace('.', '').replace('(', '').replace(')', '').replace('-','').replace(',','')\n            result = result.replace('[', '').replace(']', '').replace('[', '').replace(']', '').replace(']', '').replace('[', '').replace(']', '').replace('[', '').replace(']', '')\n            result = result.split(' ')\n            for x in result:\n                if x == '':\n                    result.remove(x)\n            result =''.join(result)\n            result = result.replace('\"', '')\n            result = result.replace(\"''\",'').replace(\"'\", '')\n            result = result.replace('[', '').replace(']', '').replace('[', '').replace(']', '').replace(']', '').replace('[', '').replace(']', '')\n            result = result.replace('\\'', '').replace('.', '').replace('(', '').replace(')', '').replace('-','').replace(',','').replace(']','').replace(']','')\n            result = result.replace('[','').replace(']','').replace('[','').replace(']','').replace('[','').replace(']','')\n            result = result.replace(']','').replace(']','').replace(']','')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            result = result.replace('[', '').replace(']', '')\n            resul"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = str1.split()\n    new_word_list = []\n    for word in word_list:\n        if word[0].isupper():\n            new_word_list.append(word +'')\n        else:\n            new_word_list.append(word +'')\n    return''.join(new_word_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #Let's create a dictionary for processing the capital words\n    dict1 = {
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # e.g. \"How are you?\" -> \"How are you?\"\n    for i in range(len(str1)):\n        if str1[i][0].isupper():\n            str1[i] = str1[i].capitalize()\n        if str1[i].startswith(' '):\n            str1[i] = str1[i][1:]\n    return str1\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    print(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_sort = []\n    num_sort = num_sort + [nums_str[i] for i in range(0, len(nums_str)) if nums_str[i] > '0']\n    num_sort = sorted(num_sort)\n    return num_sort\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    lst_nums = []\n    for i in nums_str:\n        try:\n            float(i)\n            lst_nums.append(float(i))\n        except:\n            print(i, \"not a number\")\n    lst_nums.sort()\n    return lst_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_list = []\n    for x in nums_str:\n        new_list.append(int(x))\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=float)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: float(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if len(nums_str) == 0:\n        return []\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Write your code here.\n    if len(nums_str) == 0:\n        return\n    \n    elif len(nums_str) == 1:\n        return nums_str\n    \n    else:\n        nums_str.sort()\n        return sort_numeric_strings(nums_str[1:]) + [nums_str[0]]\n    \n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # note: do not use sort()\n    return sorted(nums_str, key=float)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if isinstance(test_tup, tuple):\n        test_list.append(test_tup)\n    elif isinstance(test_tup, list):\n        test_tup = tuple(test_tup)\n        test_list.append(test_tup)\n    else:\n        raise TypeError('tuple or list expected, tuple of tuples')\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list = test_list + (test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for index in range(len(test_list)):\n        test_list[index] = test_tup\n    return test_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # TODO: modify this function to return a new list with the new tuple\n    \n    return test_list + [test_tup]\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_tup = ()\n    for i in range(len(test_list)):\n        new_tup += (test_list[i],)\n    return new_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \ndef add_item(test_dict, test_item):\n    '''\n    Write a function that takes a dictionary and adds the given item\n    to it.\n    '''\n    test_dict[test_item] = test_dict.get(test_item, 0) + 1\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if not test_list:\n        test_list.append(test_tup)\n        return test_list\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return arr == [1]\n    \n    if arr[i][1] == arr[i + 1][1]:\n        return arr[i] == arr[i+1]\n    \n    if arr[i][1] < arr[i + 1][1]:\n        return check_min_heap_helper(arr[:i] + arr[i + 1:], i)\n    else:\n        return check_min_heap_helper(arr[:i] + [arr[i]], i)\n    \n    \ndef min_heapify(arr, i):\n    '''\n    Write a function to determine the min heap to make the input array is min heap.\n    '''\n    if check_min_heap_helper(arr, i) == True:\n        return\n    \n    l = 2 * i + 1\n    r = 2 * i + 2\n    \n    if l < len(arr) and arr[l][1] < arr[i][1]:\n        arr[i] = arr[l]\n        min_heapify(arr, l)\n    if r < len(arr) and arr[r][1] < arr[i][1]:\n        arr[i] = arr[r]\n        min_heapify(arr, r)\n    \n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2*i+1]:\n        return True\n    elif arr[i] < arr[2*i+2]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return False\n    \n    if arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]:\n        return False\n    \n    if arr[i] < arr[2*i+3]:\n        return True\n    else:\n        return False\n    \n    \ndef min_heapify(arr, i):\n    '''\n    Write a function to heapify the given array. https://www.geeksforgeeks.org/heap-in-python/\n    '''\n    # If the current node is the root node, then we can't make any changes\n    if i >= len(arr):\n        return\n    \n    # Find the minimum element in the subarray\n    min_idx = i\n    min_idx_child = i*2+1\n    for child in range(min_idx_child, len(arr), 2):\n        if arr[i] < arr[child] and check_min_heap_helper(arr, child):\n            min_idx = child\n            min_idx_child = child*2+1\n            \n    # Move the root node down and heapify the subarray\n    arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    min_heapify(arr, min_idx)\n    \n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i] < arr[0]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[i//2] and i % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i <= 0:\n        return True\n    if arr[i] < arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = arr[i]\n    if (i < len(arr) - 1) and (arr[i] < arr[i + 1]):\n        return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 1\n    elif n == 6:\n        return 1\n    elif n == 7:\n        return 1\n    elif n == 8:\n        return 1\n    elif n == 9:\n        return 1\n    elif n == 10:\n        return 1\n    elif n == 11:\n        return 1\n    elif n == 12:\n        return 1\n    elif n == 13:\n        return 1\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 1\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 1\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 1\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 1\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 1\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 1\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 1\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 1\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 1\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 1\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 1\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 1\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 1\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 1\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 1\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 1\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 1\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 1\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 1\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 1\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 1\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 1\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 1\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 1\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 1\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 1\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 1\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 1\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 1\n    elif n == 72:\n        return 1\n    elif n == 73:\n        return 1\n    elif n == 74:\n        return 1\n    elif n == 75:\n        return 1\n    elif n == 76:\n        return 1\n    elif n == 77:\n        return 1\n    elif n == 78:\n        return 1\n    elif n == 79:\n        return 1\n    elif n == 80:\n        return 1\n    elif n == 81:\n        return 1\n    elif n == 82:\n        return 1\n    elif n == 83:\n        return 1\n    elif n == 84:\n        return 1\n    elif n == 85:\n        return 1\n    elif n == 86:\n        return 1\n    elif n == 87:\n        return 1\n    elif n == 88:\n        return 1\n    elif n == 89:\n        return 1\n    elif n == 90:\n        return 1\n    elif n == 91:\n        return 1\n    elif n == 92:\n        return 1\n    elif n == 93:\n        return 1\n    elif n == 94:\n        return 1\n    elif n == 95:\n        return 1\n    elif n == 96:\n        return 1\n    elif n == 97:\n        return 1\n    elif n == 98:\n        return 1\n    elif n == 99:\n        return 1\n    elif n == 100:\n        return 1\n    elif n == 101:\n        return 1\n    elif n == 102:\n        return 1\n    elif n == 103:\n        return 1\n    elif n == 104:\n        return 1\n    elif n == 105:\n        return 1\n    elif n == 106:\n        return 1\n    elif n == 107:\n        return 1\n    elif n == 108:\n        return 1\n    elif n == 109:\n        return 1\n    elif n == 110:\n        return 1\n    elif n == 111:\n        return 1\n    elif n == 112:\n        return 1\n    elif n == 113:\n        return 1\n    elif n == 114:\n        return 1\n    elif n == 115:\n        return 1\n    elif n == 116:\n        return 1\n    elif n == 117:\n        return 1\n    elif n == 118:\n        return 1\n    elif n == 119:\n        return 1\n    elif n == 120:\n        return 1\n    elif n == 121:\n        return 1\n    elif n == 122:\n        return 1\n    elif n == 123:\n        return 1\n    elif n == 124:\n        return 1\n    elif n == 125:\n        return 1\n    elif n == 126:\n        return 1\n    elif n == 127:\n        return 1\n    elif n == 128:\n        return 1\n    elif n == 129:\n        return 1\n    elif n == 130:\n        return 1\n    elif n == 131:\n        return 1\n    elif n == 132:\n        return 1\n    elif n == 133:\n        return 1\n    elif n == 134:\n        return 1\n    elif n == 135:\n        return 1\n    elif n == 136:\n        return 1\n    elif n == 137:\n        return 1\n    elif n == 138:\n        return 1\n    elif n == 139:\n        return 1\n    elif n == 140:\n        return 1\n    elif n == 141:\n        return 1\n    elif n == 142:\n        return 1\n    elif n == 143:\n        return 1\n    elif n == 144:\n        return 1\n    elif n == 145:\n        return 1\n    elif n == 146:\n        return 1\n    elif n == 147:\n        return 1\n    elif n == 148:\n        return 1\n    elif n == 149:\n        return 1\n    elif n == 150:\n        return 1\n    elif n == 151:\n        return 1\n    elif n == 152:\n        return 1\n    elif n == 153:\n        return 1\n    elif n == 154:\n        return 1\n    elif n == 155:\n        return 1\n    elif n == 156:\n        return 1\n    elif n == 157:\n        return 1\n    elif n == 158:\n        return 1\n    elif n == 159:\n        return 1\n    elif n == 160:\n        return 1\n    e"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return (int(n * (n + 1) / 2))\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0 or n > 99:\n        return -1\n    return (n**2 + 1)**3 % 1000\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    from math import floor\n    m=floor(n/2)\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    elif n==4:\n        return 7\n    elif n==5:\n        return 11\n    elif n==6:\n        return 13\n    elif n==7:\n        return 21\n    elif n==8:\n        return 43\n    elif n==9:\n        return 85\n    elif n==10:\n        return 171\n    elif n==11:\n        return 341\n    elif n==12:\n        return 683\n    elif n==13:\n        return 1365\n    elif n==14:\n        return 2731\n    elif n==15:\n        return 2417\n    elif n==16:\n        return 4953\n    elif n==17:\n        return 744\n    elif n==18:\n        return 1109\n    elif n==19:\n        return 1757\n    elif n==20:\n        return 20338\n    elif n==21:\n        return 40573\n    elif n==22:\n        return 6357\n    elif n==23:\n        return 13990\n    elif n==24:\n        return 14283\n    elif n==25:\n        return 42933\n    elif n==26:\n        return 8810\n    elif n==27:\n        return 15951\n    elif n==28:\n        return 46735\n    elif n==29:\n        return 84224\n    elif n==30:\n        return 11775\n    elif n==31:\n        return 17127\n    elif n==32:\n        return 4395\n    elif n==33:\n        return 82559\n    elif n==34:\n        return 9908\n    elif n==35:\n        return 16149\n    elif n==36:\n        return 49839\n    elif n==37:\n        return 9577\n    elif n==38:\n        return 11387\n    elif n==39:\n        return 15233\n    elif n==40:\n        return 27383\n    elif n==41:\n        return 8901\n    elif n==42:\n        return 11009\n    elif n==43:\n        return 18453\n    elif n==44:\n        return 8875\n    elif n==45:\n        return 17791\n    elif n==46:\n        return 24361\n    elif n==47:\n        return 43961\n    elif n==48:\n        return 83831\n    elif n==49:\n        return 9478\n    elif n==50:\n        return 11655\n    elif n==51:\n        return 16587\n    elif n==52:\n        return 42247\n    elif n==53:\n        return 9177\n    elif n==54:\n        return 12943\n    elif n==55:\n        return 18245\n    elif n==56:\n        return 42783\n    elif n==57:\n        return 84029\n    elif n==58:\n        return 11374\n    elif n==59:\n        return 17258\n    elif n==60:\n        return 42791\n    elif n==61:\n        return 90793\n    elif n==62:\n        return 12179\n    elif n==63:\n        return 18188\n    elif n==64:\n        return 43891\n    elif n==65:\n        return 85852\n    elif n==66:\n        return 11861\n    elif n==67:\n        return 12913\n    elif n==68:\n        return 16659\n    elif n==69:\n        return 44595\n    elif n==70:\n        return 93575\n    elif n==71:\n        return 12317\n    elif n==72:\n        return 18794\n    elif n==73:\n        return 42745\n    elif n==74:\n        return 84975\n    elif n==75:\n        return 11747\n    elif n==76:\n        return 14432\n    elif n==77:\n        return 39410\n    elif n==78:\n        return 10754\n    elif n==79:\n        return 13168\n    elif n==80:\n        return 45064\n    elif n==81:\n        return 90192\n    elif n==82:\n        return 13809\n    elif n==83:\n        return 16586\n    elif n==84:\n        return 43887\n    elif n==85:\n        return 83916\n    elif n==86:\n        return 11490\n    elif n==87:\n        return 17299\n    elif n==88:\n        return 49073\n    elif n==89:\n        return 94956\n    elif n==90:\n        return 12179\n    elif n==91:\n        return 19463\n    elif n==92:\n        return 41394\n    elif n==93:\n        return 8699\n    elif n==94:\n        return 11503\n    elif n==95:\n        return 18602\n    elif n==96:\n        return 42791\n    elif n==97:\n        return 87516\n    elif n==98:\n        return 12777\n    elif n==99:\n        return 18502\n    elif n==100:\n        return 46219\n    elif n==101:\n        return 91946\n    elif n==102:\n        return 1158\n    elif n==103:\n        return 17996\n    elif n==104:\n        return 44947\n    elif n==105:\n        return 8816\n    elif n==106:\n        return 11483\n    elif n==107:\n        return 16453\n    elif n==108:\n        return 43961\n    elif n==109:\n        return 83769\n    elif n==110:\n        return 11701\n    elif n==111:\n        return 17237\n    elif n==112:\n        return 42253\n    elif n==113:\n        return 84976\n    elif n==114:\n        return 11461\n    elif n==115:\n        return 16093\n    elif n==116:\n        return 42790\n    elif n==117:\n        return 87814\n    elif n==118:\n        return 11943\n    elif n==119:\n        return 46889\n    elif n==120:\n        return 94417\n    elif n==121:\n        return 13074\n    elif n==122:\n        return 16448\n    elif n==123:\n        return 42065\n    elif n==124:\n        return 85587\n    elif n==125:\n        return 11385\n    elif n==126:\n        return 16134\n    elif n==127:\n        return 42692\n    elif n==128:\n        return 84843\n    elif n==129:\n        return 11741\n    elif n==130:\n        return 14169\n    elif n==131:\n        return 36377\n    elif n==132:\n        return 85852\n    elif n==133:\n        return 11308\n    elif n==134:\n        return 15164\n    elif n==135:\n        return 43606\n    elif n==136:\n        return 85588\n    elif n==137:\n        return 11439\n    elif n==138:\n        return 13231\n    elif n==139:\n        return 21632\n    elif n==140:\n        return 43725\n    elif n==141:\n        return 8767\n    elif n==142:\n        return 11103\n    elif n==143:\n        return 18262\n    elif n==144:\n        return 42789\n    elif n==145:\n        return 84744\n    elif n==146:\n        retur"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n > n-1:\n        print('Too high.')\n    elif n < 0:\n        print('Too low.')\n    else:\n        a = 0\n        for i in range(n):\n            if n%i == 0:\n                a += i\n        if n == 2:\n            a = 1\n        return a"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return ( n % 10 ) + ( ( n // 10 ) * ( ( n % 10 ) % 10 ) )\n    \n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n > 99: \n        return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n % 10000\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # Return the jacobsthal number.\n    if n < 1:\n        return None\n    \n    # Check if the number is between 1 and 10^n.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 9\n    elif n == 6:\n        return 10\n    elif n == 7:\n        return 11\n    elif n == 8:\n        return 13\n    elif n == 9:\n        return 16\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 20\n    elif n == 12:\n        return 22\n    elif n == 13:\n        return 23\n    elif n == 14:\n        return 25\n    elif n == 15:\n        return 26\n    elif n == 16:\n        return 28\n    elif n == 17:\n        return 31\n    elif n == 18:\n        return 32\n    elif n == 19:\n        return 33\n    elif n == 20:\n        return 35\n    elif n == 21:\n        return 36\n    elif n == 22:\n        return 38\n    elif n == 23:\n        return 41\n    elif n == 24:\n        return 44\n    elif n == 25:\n        return 46\n    elif n == 26:\n        return 48\n    elif n == 27:\n        return 51\n    elif n == 28:\n        return 53\n    elif n == 29:\n        return 55\n    elif n == 30:\n        return 56\n    elif n == 31:\n        return 58\n    elif n == 32:\n        return 59\n    elif n == 33:\n        return 61\n    elif n == 34:\n        return 65\n    elif n == 35:\n        return 66\n    elif n == 36:\n        return 68\n    elif n == 37:\n        return 71\n    elif n == 38:\n        return 73\n    elif n == 39:\n        return 75\n    elif n == 40:\n        return 76\n    elif n == 41:\n        return 78\n    elif n == 42:\n        return 81\n    elif n == 43:\n        return 84\n    elif n == 44:\n        return 87\n    elif n == 45:\n        return 90\n    elif n == 46:\n        return 96\n    elif n == 47:\n        return 98\n    elif n == 48:\n        return 101\n    elif n == 49:\n        return 104\n    elif n == 50:\n        return 107\n    elif n == 51:\n        return 108\n    elif n == 52:\n        return 111\n    elif n == 53:\n        return 114\n    elif n == 54:\n        return 117\n    elif n == 55:\n        return 120\n    elif n == 56:\n        return 126\n    elif n == 57:\n        return 128\n    elif n == 58:\n        return 131\n    elif n == 59:\n        return 132\n    elif n == 60:\n        return 138\n    elif n == 61:\n        return 141\n    elif n == 62:\n        return 144\n    elif n == 63:\n        return 147\n    elif n == 64:\n        return 150\n    elif n == 65:\n        return 152\n    elif n == 66:\n        return 157\n    elif n == 67:\n        return 160\n    elif n == 68:\n        return 163\n    elif n == 69:\n        return 165\n    elif n == 70:\n        return 168\n    elif n == 71:\n        return 171\n    elif n == 72:\n        return 174\n    elif n == 73:\n        return 177\n    elif n == 74:\n        return 180\n    elif n == 75:\n        return 183\n    elif n == 76:\n        return 185\n    elif n == 77:\n        return 188\n    elif n == 78:\n        return 191\n    elif n == 79:\n        return 194\n    elif n == 80:\n        return 196\n    elif n == 81:\n        return 198\n    elif n == 82:\n        return 201\n    elif n == 83:\n        return 204\n    elif n == 84:\n        return 207\n    elif n == 85:\n        return 210\n    elif n == 86:\n        return 212\n    elif n == 87:\n        return 214\n    elif n == 88:\n        return 217\n    elif n == 89:\n        return 220\n    elif n == 90:\n        return 223\n    elif n == 91:\n        return 225\n    elif n == 92:\n        return 228\n    elif n == 93:\n        return 231\n    elif n == 94:\n        return 234\n    elif n == 95:\n        return 237\n    elif n == 96:\n        return 240\n    elif n == 97:\n        return 243\n    elif n == 98:\n        return 245\n    elif n == 99:\n        return 248\n    elif n == 100:\n        return 251\n    elif n == 101:\n        return 254\n    elif n == 102:\n        return 257\n    elif n == 103:\n        return 260\n    elif n == 104:\n        return 263\n    elif n == 105:\n        return 265\n    elif n == 106:\n        return 268\n    elif n == 107:\n        return 271\n    elif n == 108:\n        return 274\n    elif n == 109:\n        return 277\n    elif n == 110:\n        return 280\n    elif n == 111:\n        return 281\n    elif n == 112:\n        return 282\n    elif n == 113:\n        return 285\n    elif n == 114:\n        return 288\n    elif n == 115:\n        return 291\n    elif n == 116:\n        return 294\n    elif n == 117:\n        return 297\n    elif n == 118:\n        return 300\n    elif n == 119:\n        return 301\n    elif n == 120:\n        return 304\n    elif n == 121:\n        return 308\n    elif n == 122:\n        return 311\n    elif n == 123:\n        return 313\n    elif n == 124:\n        return 314\n    elif n == 125:\n        return 317\n    elif n == 126:\n        return 320\n    elif n == 127:\n        return 323\n    elif n == 128:\n        return 325\n    elif n == 129:\n        return 338\n    elif n == 130:\n        return 341\n    elif n == 131:\n        return 344\n    elif n == 132:\n        return 347\n    elif n == 133:\n        return 350\n    elif n == 134:\n        return 353\n    elif n == 135:\n        return 355\n    elif n == 136:\n        return 338\n    elif n == 137:\n        return 352\n    elif n == 138:\n        return 356\n    elif n == 139:\n        return 368\n    elif n == 140:\n        return 371\n    elif n == 141:\n        return 374\n    elif n == 142:\n        return 379\n    elif n == 143:\n        return 380\n    elif n == 144:\n        return 383\n    elif n == 145:\n        return 385\n    elif n == 146:\n        return 387\n    elif n == 147:\n        return 390\n    elif n == 148:\n        return 391\n    elif n == 149:\n        return 392\n    elif n == 150:\n        return 395\n    elif n == 151:\n        return 398\n    elif n == 152:\n        return 400\n    elif n == 153:\n        return 403\n    elif n == 154:\n        return 404\n    elif n == 155:\n        return 407\n    elif n == 156:\n        return 410\n    elif n == 157:\n        return 411\n    elif n == 158:\n        return 414\n    elif n == 159:\n        retur"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list)\n    m = 0\n    for i in range(K,len(test_list)):\n        if test_list[i][0] > test_list[m][0]:\n            m = i\n        elif test_list[i][0] == test_list[m][0]:\n            if test_list[i][1] < test_list[m][1]:\n                m = i\n    return test_list[m]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # TODO: Write a code to find minimum k records from tuple list\n    \n    #TODO: Make function return minimum k records from tuple list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Code here\n    \n    # create a count array\n    \n    C = []\n    # check if the list contains only one value\n    if len(test_list) == 1:\n        return 1\n    # find the length of the list\n    elif len(test_list) > 1:\n        # if the list has more than 1 element\n        # then we are counting the minimum number of values\n        # from the first element\n        # and append it to the count array\n        # else append the rest of the list\n        C.append(1)\n        count = 1\n        \n        # for each element in the list\n        for i in test_list[1:]:\n            # if i is less than the first element\n            # then add 1 to count\n            if i < test_list[0]:\n                # increase count by one\n                count += 1\n                # append it to the count array\n                C.append(count)\n            else:\n                # if i is greater than the first element\n                # then add 1 to count\n                C.append(count+1)\n                # update the count\n                count = 1\n        # return the minimum element in the count array\n        return min(C)\n    else:\n        # return -1 if the list is empty\n        return -1\n    \n    \n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def find_min_k(k):\n        t = []\n        for i in test_list:\n            if k <= len(i):\n                t.append(i)\n            else:\n                t.append(i[:k])\n        return t\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # default variable for return value\n    output = []\n    # starting index\n    k = 0\n    # create empty list\n    data = []\n    # creating lists with k items\n    for i in range(len(test_list)):\n        data.append(test_list[i])\n    # sorting the list by k items\n    data.sort(key=lambda x: x[k])\n    # iterating through the list and finding the minimum k records\n    while len(data) > k:\n        # if the current minimum value is less than the starting point\n        if data[0][k] < data[k][k]:\n            # record k's index as min index\n            output.append(data[k])\n            # remove it from the list and move the index to the next minimum value\n            data.remove(data[k])\n            k += 1\n        else:\n            # otherwise, update k\n            k += 1\n    return output\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return min(tuple(test_list[i:i+K] for i in range(0, len(test_list), K)))\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = 0\n    min_value = 0\n    for i in range(len(test_list)):\n        curr_min = min_value\n        for j in range(i+1, len(test_list)):\n            if test_list[j][1] <= curr_min:\n                curr_min = test_list[j][1]\n        min_value = curr_min\n        min_k = min(min_k, len(test_list) - i)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K <= 0:\n        print(\"Invalid K\")\n        return\n    if len(test_list) < K:\n        print(\"Invalid Input\")\n        return\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum_k = test_list[0][0]\n    for i in range(len(test_list)):\n        if minimum_k > test_list[i][0]:\n            minimum_k = test_list[i][0]\n    return minimum_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        if(test_list[i][1] > max):\n            max = test_list[i][1]\n        if(test_list[i][2] < max):\n            max = test_list[i][2]\n    if(max == 0):\n        return -1\n    k = K-1\n    while(k >= 0):\n        for i in range(len(test_list)):\n            if(test_list[i][1] == max):\n                test_list.pop(i)\n                test_list.insert(i, (max, max))\n                if(len(test_list) > k):\n                    test_list.pop(k)\n                    test_list.insert(k, (max, max))\n                    break\n        k-=1\n    return test_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = [i for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n    return index\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_index_list = []\n    i = 0\n    while i < len(l1):\n        if l1[i] == l2[i] or l1[i] == l3[i] or l2[i] == l3[i]:\n            common_index_list.append(i)\n        i += 1\n    return common_index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    \n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1[i]] in l3:\n            result.append(l1[i])\n        if l1[i] in l2 and l2[l1[i]] not in result:\n            result.append(l2[l1[i]])\n        if l1[i] not in l2 and l2[l1[i]] in result:\n            result.append(l2[l1[i]])\n        if l1[i] in l3 and l3[l1[i]] not in result:\n            result.append(l3[l1[i]])\n        if l1[i] not in l3 and l3[l1[i]] in result:\n            result.append(l3[l1[i]])\n    \n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for el in l1:\n        if el in l2 and el in l3:\n            res.append(el)\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    list_of_lists = [l1, l2, l3]\n    common_elements = []\n    for element in list_of_lists:\n        if len(set(element)) == len(element):\n            common_elements.append(element)\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # l1 = ['a', 'b', 'c']\n    # l2 = ['d', 'e']\n    # l3 = ['f', 'g']\n    l1 = l1[0]\n    l2 = l2[0]\n    l3 = l3[0]\n    index1 = l1.index(l1[0])\n    index2 = l2.index(l2[0])\n    index3 = l3.index(l3[0])\n    index_list = [index1, index2, index3]\n    index_list.sort()\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for el in l1:\n        for el2 in l2:\n            if el == el2:\n                l4.append(el)\n    for el in l3:\n        for el2 in l2:\n            if el == el2:\n                l4.append(el)\n    return l4\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(0,len(l1)):\n        if l1[i] not in l2 and l1[i] not in l3:\n            res.append(l1[i])\n    return res\n    \n    \ndef extract_index_list_2(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(0,len(l1)):\n        if l1[i] not in l2 and l1[i] not in l3:\n            res.append(l1[i])\n    return res\n    \n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_list = list(set(l1))\n    l2_list = list(set(l2))\n    l3_list = list(set(l3))\n    common_list = []\n    for i in l1_list:\n        for j in l2_list:\n            if i in l3:\n                common_list.append(i)\n        for k in l3_list:\n            if j in l2:\n                common_list.append(j)\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    while index1 < len(l1) and index2 < len(l2) and index3 < len(l3):\n        if l1[index1] == l2[index2] == l3[index3]:\n            index1 += 1\n            index2 += 1\n            index3 += 1\n        else:\n            index1 += 1\n    return index1, index2, index3\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    smallest_index = 0\n    for i in range(0, len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    second = numbers[1]\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for number in numbers:\n        if number % 2 == 1:\n            if number > 100:\n                return number\n    return 100\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for n in numbers:\n        if n < smallest:\n            smallest = n\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for i in range(len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_number = min(numbers)\n    return smallest_number\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        return second_smallest(numbers[1:])\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    a = sorted(numbers)\n    if len(a) == 1:\n        return a[0]\n    return a[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    lowest = None\n    second = None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex_pattern = r\"\\b[ab]?\\b\"\n    if re.match(regex_pattern, text):\n        return \"a\"\n    else:\n        return \"b\"\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if \"a\" in text.lower() or \"a\" in text.upper():\n        return \"a\"\n    elif \"b\" in text.lower() or \"b\" in text.upper():\n        return \"b\"\n    elif \"o\" in text.lower() or \"o\" in text.upper():\n        return \"o\"\n    elif \"t\" in text.lower() or \"t\" in text.upper():\n        return \"t\"\n    else:\n        return \"0\"\ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'^(a){1}b$', text.lower()) is not None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by four or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by five or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by six or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by seven or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g.h')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by eight or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g.h.i')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 9 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g.h.i.j')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by ten or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g.h.i.j.k')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by eleven or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g.h.i.j.k.l')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by twelve or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g.h.i.j.k.l.m')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by thirteen or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g.h.i.j.k.l.m.n')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by fourteen or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g.h.i.j.k.l.m.n.o')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by fifteen or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p')\n    text = pattern.search(text)\n    if text:\n        return text.group().lower()\n    else:\n        return ''\ndef text_match_zero_one_16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by sixteen or more 'b's. https://www.w3resource.com/pytho"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile('[ab]' )\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    for letter in text:\n        if letter == 'a' or letter == 'b':\n            print(letter)\n        else:\n            print('a or b')\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b[a-z]\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\w+', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w+\\b', '.', text, flags=re.I)\n    text = re.sub(r'\\b\\w"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    n = len(text)\n    pattern = r'[a-zA-Z]*\\b'\n    m = re.search(pattern, text, flags=re.I)\n    if m:\n        return n, m\n    else:\n        return n, 0\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'(.*a)(.*b)', text)\n    print(result)\n    # print(result.group(1))\n    # print(result.group(2))\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # look for first character\n    match = re.search(r'a\\b', text)\n    if match:\n        # check if 'a' character is at the end of the string\n        if match.end()!= len(text):\n            return False\n        # print(match)\n        # check if 'b' character is at the end of the string\n        if match.end() == len(text):\n            return False\n    return True\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower()\n    pattern = r'(a)\\s+(b)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # starting from 1\n    for i in range(1, len(test_list) - 1):\n        # we should count the pairs of the two strings\n        if test_list[i] == test_list[i-1]:\n            count += 1\n    # reverse\n    if test_list[-1] == test_list[0]:\n        count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i]!= test_list[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #define helper function that will print out the reverse pairs for the given list\n    def reverse_list(input_list):\n        for i in range(len(input_list)-1,-1,-1):\n            print(input_list[i])\n        \n    #check if the given list is empty\n    def empty_list(input_list):\n        if len(input_list) == 0:\n            print(\"List is empty.\")\n            return\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # To store the number of pairs\n    count_pairs = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    a = []\n    for i in test_list:\n        a.append(i)\n    for i in range(len(a)-2):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j] and (a[j] not in a[i+1:len(a)]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # set the number of pairs to 0 \n    n = 0\n    # set the list of reverse strings\n    rev_string_list = []\n    # iterate through the list of strings\n    for i in range(0, len(test_list)):\n        # if the string is a pair of a pair of strings\n        if test_list[i] == test_list[i].reverse():\n            # add the pair to the list\n            rev_string_list.append(test_list[i])\n            # add a counter to the number of pairs\n            n += 1\n    # return the number of pairs\n    return n\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Checking if it's empty string or not\n    if (str(test_list) == \"\") or (str(test_list).isspace()):\n        return 0\n    \n    # Start counting from the index of the first character\n    start_index = 1\n    # Counting for the index\n    for i in range(start_index, len(test_list)):\n        # Counting the reverse pairs\n        if test_list[i] == test_list[i+1]:\n            # Add the count of the reverse pairs\n            start_index += 1\n            # Check if the count is equal to 1\n            if start_index == 1:\n                return start_index\n    return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Your code here\n    \n    answer = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Helper function\n    def count_pair(str1, str2):\n        return str1.count(str2)\n    \n    # Function to count the pairs\n    count_pair_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            count_pair_list.append(count_pair(test_list[i], test_list[j]))\n    \n    return count_pair_list\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in list1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store unique values\n    unique_values_dict = dict()\n    # create a loop to iterate through each list\n    for value in list1:\n        # check if the value is already in the dictionary\n        if value in unique_values_dict.keys():\n            # increment the number of times the value occurs\n            unique_values_dict[value] += 1\n        else:\n            # add the value to the dictionary and the value to the count\n            unique_values_dict[value] = 1\n    # return the dictionary\n    return unique_values_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return dict(zip(list1,count_list(list1)))\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Your code here\n    count = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list1[j]:\n                if i in count:\n                    count[i] += 1\n                else:\n                    count[i] = 1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for x in range(len(list1)):\n        if list1[x] not in unique_dict:\n            unique_dict[list1[x]] = 0\n        unique_dict[list1[x]] += 1\n    return unique_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in count:\n                count[list1[i][j]] = 1\n            else:\n                count[list1[i][j]] += 1\n    return count\n    \n    \n    \ndef list_to_string(list1):\n    '''\n    Write a function that converts a list to a string.\n    '''\n    s = ''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in s:\n                s += list1[i][j]\n    return s\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = {}\n    for i in list1:\n        if i not in counter:\n            counter[i] = 1\n        else:\n            counter[i] += 1\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(x):list1.count(x) for x in list1}\n    \ndef group_tuples(n, list1):\n    '''\n    Write a function that takes a list of tuples and returns a list of tuples where all of the tuples have been sorted lexicographically.\n    '''\n    list2 = []\n    list3 = []\n    for i in range(0, n):\n        list1[i] = tuple(list1[i])\n    for i in range(0, n):\n        list3.append(tuple(sorted(list1[i])))\n    list1 = list3\n    return list1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Your code here\n    tuple_dict = {}\n    #for i in list1:\n    #    tuple_dict[tuple(i)] = tuple_dict.get(tuple(i), 0) + 1\n    return tuple_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_of_tuples = {}\n    # break list into chunks\n    for i in range(0, len(list1)):\n        list_of_tuples[list1[i]] = list1[i+1] - list1[i]\n    return list_of_tuples\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if type(num) == str:\n            num = float(num)\n        if len(str(num)) == 0:\n            return False\n        if type(num)!= float and type(num)!= int:\n            return False\n        if num == 0:\n            return False\n        if num >= 1:\n            return True\n        if num == -1:\n            return True\n    except:\n        return False\n    \ndef is_integer(num):\n    '''\n    Write a function to check whether a given string is an integer number with a precision of 1.\n    '''\n    try:\n        if type(num) == str:\n            num = float(num)\n        if len(str(num)) == 0:\n            return False\n        if type(num)!= float and type(num)!= int:\n            return False\n        if num == 0:\n            return False\n        if num >= 1:\n            return True\n        if num == -1:\n            return True\n    except:\n        return False\n    \ndef is_finite(num):\n    '''\n    Write a function to check whether a given string is a finite number with a precision of 1.\n    '''\n    try:\n        if type(num) == str:\n            num = float(num)\n        if len(str(num)) == 0:\n            return False\n        if type(num)!= float and type(num)!= int:\n            return False\n        if num == 0:\n            return False\n        if num >= 1:\n            return True\n        if num == -1:\n            return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = int(num)\n    except:\n        return False\n    else:\n        return False if num < 0 else True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pow_of_2 = 2\n    if num < 0:\n        num = -num\n        pow_of_2 = 3\n    num = str(num)\n    \n    for i in num:\n        if i.isdigit():\n            num = num.replace(i,'')\n    if num == \"\":\n        return False\n    elif num[0].isdigit():\n        if num[0].isdigit() and len(num) == pow_of_2:\n            return True\n        return False\n    elif num[1].isdigit():\n        if num[1].isdigit() and len(num) == pow_of_2:\n            return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n    except:\n        return False\n    return num.is_integer() or num.is_float()\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return (int(num) == int(float(num)))\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '':\n        return False\n    else:\n        if num[-1] == '.':\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    s=str(num)\n    if len(s)<2:\n        return False\n    if s[0] in ['0','1']:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return(type(num) == str and num.isdigit())\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdecimal()\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdigit() and len(num) == len(str(num))\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #using dictionary to find the value to index\n    temp = dict()\n    for i in range(len(arr)):\n        temp[arr[i]] = i\n    #if there are more than one element it's not unique\n    if len(temp)>1:\n        return False\n    else:\n        #loop through and iterate over all the elements in the dictionary\n        for i in range(len(arr)):\n            #if the element is in the dictionary then return false\n            if arr[i] in temp:\n                return False\n            #else if it isn't in the dictionary then return true\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    x=0\n    n=len(arr)\n    arr.sort()\n    for i in range(n):\n        if x==arr[i]:\n            x+=1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Your code here\n    for i in range(len(arr)):\n        if arr[i] == arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    uniques = []\n    for i in range(len(arr)):\n        if arr[i] not in uniques:\n            uniques.append(arr[i])\n    return len(uniques) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # if the length of the list is greater than 2\n    if len(arr) <= 2:\n        return True\n    # if the length of the list is less than 3,\n    # it means that it is not a list\n    elif len(arr) > 3:\n        return False\n    # if the list is empty, the result is a list\n    # which contains only one distinct element\n    elif len(arr) == 0:\n        return False\n    else:\n        # set a counter\n        counter = 1\n        # while the counter is less than the length of the list\n        while counter <= len(arr):\n            # set the current value of current index as the current index\n            current_index = arr[counter-1]\n            # if the current value is equal to the current element\n            if current_index == arr[counter]:\n                # set the counter to the next value\n                counter += 1\n            # if the current value is not equal to the current element\n            elif current_index!= arr[counter-1]:\n                return False\n        # return the boolean result\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for elem in arr:\n        if elem in arr:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # condition 1 - iterating the array\n    for elem in arr:\n        if elem not in arr:\n            return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    print(\"Unique element in list is: \", arr)\n    print(\"Number of unique element in list: \", len(arr))\n    print(\"Length of unique element in list: \", len(set(arr)))\n    print(\"Length of unique element in array: \", len(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    '''\n    -Array [3,3,4,2,3,1,1,1] is not a valid list.\n    '''\n    '''\n    -Return the length of a list that contains only one distinct element or not.\n    '''\n    '''\n    -Write your own code here to determine whether a list contains only one distinct element or not.\n    '''\n    '''\n    -Do not use the built in function in your solution.\n    '''\n    # Your code here\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    check_month_day = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    \n    if(monthnum3 in check_month_day):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == '02':\n        return False\n    elif monthnum3 == '03':\n        return True\n    elif monthnum3 == '04':\n        return True\n    elif monthnum3 == '05':\n        return True\n    elif monthnum3 == '06':\n        return True\n    elif monthnum3 == '07':\n        return True\n    elif monthnum3 == '08':\n        return True\n    elif monthnum3 == '09':\n        return True\n    elif monthnum3 == '10':\n        return True\n    elif monthnum3 == '11':\n        return True\n    elif monthnum3 == '12':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 0 or monthnum3 == 1:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 2:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 3:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 4:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 5:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 6:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 7:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 8:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 9:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 10:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 11:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    elif monthnum3 == 12:\n        print(\"The month number is \" + str(monthnum3))\n        return True\n    else:\n        print(\"The month number is \" + str(monthnum3))\n        return False\n    \ndef check_monthnumber_year(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 0 or monthnum == 1:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 2:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 3:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 4:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 5:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 6:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 7:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 8:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 9:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 10:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 11:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    elif monthnum == 12:\n        print(\"The month number is \" + str(monthnum))\n        return True\n    else:\n        print(\"The month number is \" + str(monthnum))\n        return False\n    \ndef days_in_month(month, year):\n    '''\n    Return the number of days in a given month and year in a given month/year.\n    '''\n    if month == 1:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return 29\n                else:\n                    return 28\n            else:\n                return 31\n        else:\n            if year % 4 == 0:\n                return 31\n            else:\n                return 30\n    elif month == 2:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 31\n    elif month == 3:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 4:\n        if year % 4 == 0:\n            return 31\n        else:\n            return 30\n    elif month == 5:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 6:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 7:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 8:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 9:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 10:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 11:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 12:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    else:\n        print(\"Enter a valid month number\")\n        return -1\n    \n    \ndef days_in_month2(month, year):\n    '''\n    Write a function to return the number of days in a given month and year.\n    '''\n    if month == 1:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 31\n    elif month == 2:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 3:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 4:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 5:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 6:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 7:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 8:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 9:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 10:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 11:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 30\n    elif month == 12:\n        if year % 4 == 0:\n            if yea"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    try:\n        monthnum3 = int(monthnum3)\n        if monthnum3 < 1 or monthnum3 > 12:\n            raise ValueError\n    except ValueError:\n        print('Invalid month number')\n        return False\n    month = monthnum3 % 12\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        if monthnum3 == 1:\n            return True\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 == 3:\n            return True\n        elif monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_numbers = {1 : 31, 2 : 28, 3 : 31, 4 : 30, 5 : 31, 6 : 30, 7 : 31, 8 : 31, 9 : 30, 10 : 31, 11 : 30, 12 : 31}\n    if monthnum3 in month_numbers:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        if monthnum3 < 1 or monthnum3 > 12:\n            raise ValueError\n    except ValueError as e:\n        print(f'Error : {e}')\n        return False\n    if monthnum3 % 3 == 0:\n        if monthnum3 % 100!= 0:\n            print(f'Error : Month number is not 30 days')\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 <= 2):\n        return True\n    elif(monthnum3 > 2):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        if monthnum3 == 1:\n            if 1 <= monthnum3 <= 3:\n                return True\n            else:\n                return False\n        elif monthnum3 == 2:\n            if 1 <= monthnum3 <= 4:\n                return True\n            else:\n                return False\n        elif monthnum3 == 3:\n            if 1 <= monthnum3 <= 5:\n                return True\n            else:\n                return False\n        elif monthnum3 == 4:\n            if 1 <= monthnum3 <= 6:\n                return True\n            else:\n                return False\n        elif monthnum3 == 5:\n            if 1 <= monthnum3 <= 7:\n                return True\n            else:\n                return False\n        elif monthnum3 == 6:\n            if 1 <= monthnum3 <= 8:\n                return True\n            else:\n                return False\n        elif monthnum3 == 7:\n            if 1 <= monthnum3 <= 9:\n                return True\n            else:\n                return False\n        elif monthnum3 == 8:\n            if 1 <= monthnum3 <= 10:\n                return True\n            else:\n                return False\n        elif monthnum3 == 9:\n            if 1 <= monthnum3 <= 11:\n                return True\n            else:\n                return False\n        elif monthnum3 == 10:\n            if 1 <= monthnum3 <= 12:\n                return True\n            else:\n                return False\n        elif monthnum3 == 11:\n            if 1 <= monthnum3 <= 1:\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    i = 2\n    while i < n - 1: \n        if arr[i] - arr[i-2] < min_diff:\n            min_diff = arr[i] - arr[i-2]\n        i += 1\n    return min_diff\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    l = len(arr)\n    minimum = arr[0]\n    minimum_index = 0\n    minimum_value = arr[0]\n    for i in range(1,l):\n        if arr[i] < minimum:\n            minimum = arr[i]\n            minimum_index = i\n        if arr[i] > minimum:\n            minimum = arr[i]\n            minimum_index = i\n    return minimum_value - minimum_index\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    print('find_min_diff')\n    min_diff = arr[0]\n    index1 = 0\n    index2 = 0\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if arr == None: \n        return -1\n    min_diff = arr[0] \n    for i in range(1,n): \n        if arr[i] - arr[i-1] < min_diff: \n            min_diff = arr[i] - arr[i-1]\n    return min_diff \n  "
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    max = arr[0]\n    min = arr[0]\n    for i in arr:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return abs(min - max)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = float('inf')\n    for i in range(0,n): \n        for j in range(0,n): \n            if (arr[i] - arr[j]) == (arr[i] - arr[j]): \n                if arr[i] - arr[j] < diff: \n                    diff = arr[i] - arr[j]\n    return diff\n \n "
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array in order\n    arr.sort()\n    i = 0\n    j = 0\n    count = 0\n    while(i < n):\n        if arr[i]!= arr[j]:\n            count += 1\n            if arr[j]!= arr[i]:\n                i = j + 1\n                j = i\n        else:\n            j = j + 1\n        i += 1\n    return count\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=arr[0]\n    for i in range(1,n):\n        if min_diff>arr[i]:\n            min_diff=arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr_min = 0\n    for i in range(n):\n        arr_min = arr_min + arr[i]\n    return arr_min\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Set initial values \n    min_diff = n*n\n    arr.sort()\n    \n    # Loop through array until one element is less than the other\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                diff = arr[i] - arr[j]\n                if diff < min_diff:\n                    min_diff = diff\n    \n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    if len(str) == 0:\n        return 0\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in str:\n        if i.isdigit():\n            n += 1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits=0\n    for x in str:\n        if x.isdigit():\n            digits+=1\n    return digits\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    d=0\n    for i in str:\n        if(i=='0'):\n            d+=1\n    return d\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    list_digit = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n    ctr = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            ctr += 1\n            continue\n        else:\n            break\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i == \"0\":\n            cnt += 1\n    print(cnt)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr+=1\n    return ctr\n    \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n % 2 == 0 \ndef is_zero(n): \n    '''\n    Write a function to check whether a positive integer is a zero. geeksforgeeks.org/is-zero-string-with-n-in-python-program/\n    '''\n    if n == 0: \n        return True\n    else: \n        return False\ndef is_prime(n): \n    '''\n    Write a function to check whether a positive integer is a prime number. geeksforgeeks.org/is-prime-number-in-python-program/\n    '''\n    if n == 2 or n == 3: \n        return True\n    if n%2 == 0 or n<2: \n        return False\n    if n%3 == 0: \n        return False\n    if n%5 == 0: \n        return False\n    if n%7 == 0: \n        return False\n    i=5\n    while i*i <= n: \n        if n%i==0: \n            return False\n        i=i+6\n    return True\ndef is_prime_number(n): \n    '''\n    Write a function to check whether a positive integer is a prime number. geeksforgeeks.org/is-prime-number-in-python-program/\n    '''\n    if is_prime(n): \n        return True\n    return False\ndef is_palindrome(n): \n    '''\n    Write a function to check whether a positive integer is a palindrome. geeksforgeeks.org/is-palindrome-in-python-program/\n    '''\n    if n==int(str(n)[::-1]): \n        return True\n    return False\ndef prime_factor(n): \n    '''\n    Write a function to find the prime factors of a positive integer. geeksforgeeks.org/prime-factorization-in-python-program/\n    '''\n    if n<2: \n        return []\n    primes=[] \n    for i in range(2,int(math.sqrt(n)+1)): \n        if n%i==0: \n            primes.append(i) \n            if i==int(math.sqrt(n)): \n                primes.append(n//i) \n    return primes\ndef power_of_two(n): \n    '''\n    Write a function to calculate the power of a number. geeksforgeeks.org/calculate-the-power-of-a-number-in-python-program/\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    return n*power_of_two(n-1)\ndef is_prime_in_python(n): \n    '''\n    Write a function to check whether a positive integer is a prime number. geeksforgeeks.org/is-prime-number-in-python-program/\n    '''\n    if is_prime(n) == True: \n        return True\n    return False\ndef is_prime_in_java(n): \n    '''\n    Write a function to check whether a positive integer is a prime number. geeksforgeeks.org/is-prime-number-in-java-program/\n    '''\n    if is_prime_java(n) == True: \n        return True\n    return False\ndef is_prime_in_csharp(n): \n    '''\n    Write a function to check whether a positive integer is a prime number. geeksforgeeks.org/is-prime-number-in-csharp-program/\n    '''\n    if is_prime_csharp(n) == True: \n        return True\n    return False\ndef is_divisible_by(n): \n    '''\n    Write a function to check whether a positive integer is a divisible number. geeksforgeeks.org/is-divisible-by-in-python-program/\n    '''\n    if n%2==0: \n        return True\n    if n%3==0: \n        return False\n    if n%5==0: \n        return False\n    if n%7==0: \n        return False\n    return False\ndef is_divisible_by_in_java(n): \n    '''\n    Write a function to check whether a positive integer is divisible by another positive integer. geeksforgeeks.org/is-divisible-by-in-java-program/\n    '''\n    if is_divisible_by(n) == True: \n        return True\n    return False\ndef is_divisible_by_in_csharp(n): \n    '''\n    Write a function to check whether a positive integer is divisible by another positive integer. geeksforgeeks.org/is-divisible-by-in-csharp-program/\n    '''\n    if is_divisible_by(n) == True: \n        return True\n    return False\ndef is_divisible_by_in_python(n): \n    '''\n    Write a function to check whether a positive integer is divisible by another positive integer. geeksforgeeks.org/is-divisible-by-in-python-program/\n    '''\n    if is_divisible_by(n) == True: \n        return True\n    return False\ndef is_divisible_by_in_java(n): \n    '''\n    Write a function to check whether a positive integer is divisible by another positive integer. geeksforgeeks.org/is-divisible-by-in-java-program/\n    '''\n    if is_divisible_by(n) == True: \n        return True\n    return False\ndef is_divisible_by_in_python(n): \n    '''\n    Write a function to check whether a positive integer is divisible by another positive integer. geeksforgeeks.org/is-divisible-by-in-python-program/\n    '''\n    if is_divisible_by(n) == True: \n        return True\n    return False\ndef is_in_range(a,b): \n    '''\n    Write a function to check whether a positive integer is in the range [a,b]. geeksforgeeks.org/is-in-range-in-python-program/\n    '''\n    if a<=b: \n        return True\n    return False\ndef is_in_range_in_java(a,b): \n    '''\n    Write a function to check whether a positive integer is in the range [a,b]. geeksforgeeks.org/is-in-range-in-java-program/\n    '''\n    if a<=b: \n        return True\n    return False\ndef is_in_range_in_csharp(a,b): \n    '''\n    Write a function to check whether a positive integer is in the range [a,b]. geeksforgeeks.org/is-in-range-in-csharp-program/\n    '''\n    if a<=b: \n        return True\n    return False\ndef is_in_range_in_python(a,b): \n    '''\n    Write a function to check whether a positive integer is in the range [a,b]. geeksforgeeks.org/is-in-range-in-python-program/\n    '''\n    if a<=b: \n        return True\n    return False\ndef is_in_range_in_java(a,b): \n    '''\n    Write a function to check whether a positive integer is in the range [a,b]. geeksforgeeks.org/is-in-range-in-java-program/\n    '''\n    if a<=b: \n        return True\n    return False\ndef is_in_range_in_python(a,b): \n    '''\n    Write a function to check whether a positive integer is in the range [a,b]. geeksforgeeks.org/is-in-range-in-python-program/\n    '''\n    if a<=b: \n        return True\n    return False\ndef is_in_range_in_java(a,b): \n    '''\n    Write a function to check whether a positive integer is in the range [a,b]. geeksforgeeks.org/is-in-range-in-java-program/\n    '''\n    if a<=b: \n        retur"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return n\n    if n%2 == 1: \n        return n//2\n    if n%2 == 0: \n        return (n//2) + 1\ndef check_nth_polite_number(n): \n    '''\n    Write a function to find the nth number of polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2 == 1: \n        print(\"The number of the number \" + str(n) + \" is POLITENOMETER\")\n    if n%2 == 0: \n        print(\"The number of the number \" + str(n) + \" is PRIMETER\")\n    \ndef factorial(n): \n    '''\n    Write a function to compute factorial of any number \n    '''\n    if n == 0: \n        return 1\n    if n==1: \n        return 1\n    else: \n        return n*factorial(n-1) \ndef factorial_series(n): \n    '''\n    Write a function to compute the factorial of any number \n    '''\n    factorial_num = 1\n    for i in range(1,n+1): \n        factorial_num = factorial_num * i\n    return factorial_num \ndef fibonacci_series(n): \n    '''\n    Write a function to compute the fibonacci series \n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n    return fibonacci_series(n-1) + fibonacci_series(n-2) \ndef factorial_series_one(n): \n    '''\n    Write a function to compute the factorial of any number \n    '''\n    if n == 0: \n        return 1 \n    if n == 1: \n        return 1 \n    return n*factorial_series_one(n-1) \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return math.gcd(n, (n-1)%n)==1 \n    \ndef nth_polite(n): \n    '''\n    Return the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    while n > 0: \n        if is_polite(n) : \n            return n \n        n = n - 1 \n    return \"No nth polite number\"\n    \ndef count_ones(n): \n    '''\n    Return the count of 1's. geeksforgeeks.org/count-ones-number/\n    '''\n    cnt = 0\n    for i in range(1, n): \n        if is_polite(i): \n            cnt = cnt + 1 \n    return cnt\n    \ndef count_zeros(n): \n    '''\n    Return the count of 0's. geeksforgeeks.org/count-zeros-number/\n    '''\n    cnt = 0\n    for i in range(1, n): \n        if not is_polite(i): \n            cnt = cnt + 1 \n    return cnt\n    \ndef polynomial_mod(a,b,n): \n    '''\n    Return the nth polynomial modulo a,b. geeksforgeeks.org/modulo-and-pow/\n    '''\n    mod = 1\n    for i in range(1,n): \n        mod = mod * a + b\n    return mod \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [2, 3, 5, 8, 13, 21, 34, 55, 89]\n    index = 0\n    for i in range(len(polite_numbers)):\n        if n == i:\n            return n\n        index += 1\n    return 0\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            polite_count += 1\n    return polite_count\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n >= 1 and n <= 9:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1 or n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        return is_polite(n/2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    g = 1\n    while g < n+1:\n        g = g*10\n    return n+1-g\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 1\n    if n % 2 == 0:\n        a = n\n        n = n//2\n    else:\n        n = n//2\n    while n>1:\n        if n%2 == 1:\n            n = n//2\n        else:\n            n = 3*n+1\n    return a\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    f = n * (n+1) // 2\n    return f % 10 == 0 or f == 1\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    res1 = []\n    for i in range(len(l1)):\n        if l1[i+1] - l1[i] == 1:\n            res1.append([l1[i],l1[i+1]])\n        elif l1[i+1] - l1[i] == -1:\n            res1.append([l1[i],l1[i+1]])\n    res.append(res1)\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x, x+1) for x in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s = l1\n    for i in range(1, len(s)):\n        if s[i]!= s[i-1]:\n            s.append(s[i])\n    return s\n    \ndef groups(l):\n    '''\n    Write a function that returns all the groups of the given list.\n    '''\n    groups = []\n    for i in range(1, len(l)):\n        if l[i] not in groups:\n            groups.append(l[i])\n    return groups\n    \ndef fibonacci(n):\n    '''\n    Write a function that returns the nth fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef skip_words(d):\n    '''\n    Write a function that skips words in a dictionary.\n    '''\n    l = []\n    for i in d:\n        if 'http' in i:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    s1 = []\n    for i in range(len(l1)-1):\n        s1.append([l1[i],l1[i+1]])\n        s1.sort()\n        s1 = set(s1)\n        l.append(s1)\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output_list = []\n    for i in range(len(l1)):\n        output_list.append([l1[i], l1[i+1]])\n    return output_list\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    list_of_pairs = []\n    for i in range(len(l1)):\n        list_of_pairs.append((l1[i],i))\n    return list_of_pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1) - 1):\n        if l1[i]!= l1[i + 1]:\n            l.append([l1[i],l1[i + 1]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,y) for x,y in zip(l1,l1[1:]) for y in y if x == y]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        for j in range(len(l1)):\n            if i == j:\n                l2.append([l1[i],l1[j]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    '''\n    l1 = [1,2,3,4,5,6]\n    pair_list = []\n    for i in range(0,len(l1)):\n        for j in range(i+1,len(l1)):\n            if l1[i] == l1[j]:\n                pair_list.append((l1[i],l1[j]))\n    return pair_list\n    '''\n    l1 = [1,2,3,4,5,6,7,8,9,10]\n    l2 = []\n    for i in range(0,len(l1)-1):\n        if l1[i]!= l1[i+1]:\n            l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    res = 0\n    for i in range(len(arr)-1):\n        if arr[i] + arr[i+1] == sum:\n            res += 1\n    return res\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] + arr[i+1] == sum:\n            return i+1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if arr == [] or sum == 0:\n        return 0\n    count = 0\n    pairs = [[arr[0], arr[0]]]\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for num in arr:\n        pairs_count += 1\n        if num == sum:\n            return pairs_count\n    return pairs_count\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for num in arr:\n        if num == sum:\n            pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict = {}\n    pairs = []\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if sum in arr:\n        return (arr.index(sum))\n    else:\n        return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #find the sum of all numbers in arr.\n    sum_array = sum(arr)\n    #count the number of pairs with this sum.\n    pair_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum_array:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if sum == arr[i] + arr[j]:\n                count += 1\n    return count\n    \ndef main():\n    print(get_pairs_count([1, 2, 3, 4], 3))\n    print(get_pairs_count([1, 2, 3, 4], 2))\n    print(get_pairs_count([1, 2, 3, 4], 1))\n    print(get_pairs_count([1, 2, 3, 4], 0))\n    print(get_pairs_count([1, 2, 3, 4], 5))\n    print(get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))\n    \nmain()"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    diff = []\n    #check if length of lists are the same\n    if len(li1)!= len(li2):\n        print(\"the length of the lists are not same\")\n        return\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff.append(li1[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d=[]\n    for i in li1:\n        if i in li2:\n            d.append(i)\n    return d\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=list(set(li1).difference(set(li2)))\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1-li2"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)!= len(li2):\n        print(\"List lengths must be the same.\")\n        return\n    diff = 0\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff += 1\n    print(diff)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    result.append(li2[0])\n    result.append(li2[1])\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #get list of elements\n    list1=li1\n    list2=li2\n    #get the length of list\n    length=len(list1)\n    #get the first element\n    first=list1[0]\n    #get the second element\n    second=list2[0]\n    #set a flag\n    flag=0\n    #loop through both lists\n    for i in range(1,length):\n        #if the values are the same\n        if(first==list1[i] and second==list2[i]):\n            flag=1\n        #if the values are different\n        if(first!=list1[i] and second!=list2[i]):\n            flag=1\n        #if the values are the same and the flag is false,then we have found a match\n        if(first==list1[i] and second==list2[i] and flag==0):\n            return(list1[i]-list2[i])\n    #if the values are not the same\n    if(flag==0):\n        #return -1\n        return -1\n    #if the first value is more than the second value, then we have a match\n    elif(first>second):\n        #return the difference\n        return(first-second)\n    #if the first value is less than the second value, then we have a match\n    else:\n        #return the difference\n        return(second-first)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (len(li1)-len(li2))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # if n == 1, then return 1\n    # if n == 2, then return 3\n    # if n > 2, then return n\n    if n == 1 : \n        return 1\n    if n == 2 : \n        return 3\n    if n > 2 : \n        return n**2\n    \n    \ndef is_prime(n) : \n    '''\n    Write a python function to determine if a number is prime or not.\n    '''\n    # If n is not divisible by 2, it is not prime\n    if n < 2 : \n        return False\n    \n    # For each digit of n, check if it is less than\n    # n-1, or if it is divisible by 2\n    for i in range(2, n) : \n        if n%i == 0 : \n            return False\n    return True\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if (n%2 == 0) : \n        return n*(n+1)//2\n    else : \n        return n*(n+1)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    res = 0\n    for i in range(0, n + 1) :\n        if i % 2!= 0 : \n            res = res + (i ** 3)\n    return res\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        return 0\n    return n * n * n + (n + 1) * n + (n + 2) * n + (n + 3) * n + (n + 4) * n + (n + 5) * n + (n + 6) * n + (n + 7) * n\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n<=0 : \n        return None\n    if n == 1 : \n        return 1\n    else : \n        return odd_num_sum(n-1) * 4\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n%2 == 0) : \n        return n**2\n    else : \n        return (n**4) + (n**3) + (n**2) \n    \n    \ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    if (n%2 == 0) : \n        return n**2\n    else : \n        return (n**4) + (n**3) + (n**2) \n    \n    \ndef print_multiple_matrix(matrix) : \n    '''\n    Print a list of lists where each list in matrix is an even and odd numbers.\n    '''\n    for i in range(len(matrix)): \n        for j in range(len(matrix[0])):\n            if (j % 2 == 0) : \n                print(matrix[i][j], end = \" \") \n            else : \n                print(matrix[i][j], end = \" \") \n        print() \n    return\n    \ndef sum_of_matrix(matrix) : \n    '''\n    Return sum of matrix.\n    '''\n    matrix_sum = 0\n    for i in range(len(matrix)): \n        matrix_sum += matrix[i][0] \n    return matrix_sum\n    \ndef main() : \n    '''\n    Main program.\n    '''\n    list_numbers = []\n    user_input = input(\"Enter numbers separated by spaces:\\n\")\n    for i in range(len(user_input)) : \n        number = int(user_input[i])\n        list_numbers.append(number)\n    print(list_numbers)\n    \n    print(\"Enter a number\\n\")\n    user_input = int(input())\n    if (user_input % 2 == 0) : \n        even_num_sum(user_input)\n    else : \n        odd_num_sum(user_input)\n    print(even_num_sum(user_input))\n    print(odd_num_sum(user_input))\n    print(even_num_sum(user_input))\n    print(sum_of_matrix(list_numbers))\n    print(sum_of_matrix(list_numbers[::2]))\n    print(sum_of_matrix(list_numbers[1::2]))\n    print(sum_of_matrix(list_numbers[::-2]))\n    print(sum_of_matrix(list_numbers[::-2]))\n    return\n    \n    \nif __name__ == \"__main__\" : \n    main()\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    res = 0\n    num_list = []\n    for i in range(n):\n        num_list.append(i**3)\n    for j in num_list:\n        if j%2==0:\n            res += j\n    return res\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    try : \n        # return sum([i**4 for i in range(1, n) if i%2 == 0])\n        return sum([i**4 for i in range(1, n, 2) if i%2 == 0])\n    except : \n        # return 0\n        return 0\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i + 1)**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        sum += i ** 3 \n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # exp = '(((())()()))'\n    if len(exp)%2!= 0:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    num = 0\n    op = '+'\n    for i in exp:\n        if i in '()':\n            num += 1\n            if i == '+' or i == '*':\n                stack.append(i)\n            else:\n                while stack and (stack[-1]!= '(' and stack[-1]!= ')') and stack[-1]!= op:\n                    stack.pop()\n                if num > 0:\n                    num -= 1\n                else:\n                    return False\n        else:\n            if num > 0:\n                num -= 1\n            else:\n                return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n    if not stack:\n        return True\n    else:\n        return False\ndef eval_expression(exp):\n    '''\n    Write a function to evaluate an expression.\n    '''\n    stack = []\n    for i in exp:\n        if i == '+':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a + b)\n        elif i == '-':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a - b)\n        elif i == '*':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a * b)\n        elif i == '/':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a / b)\n        elif i == '^':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a ** b)\n        elif i == 'pow':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a ** b)\n        elif i == 'div':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a // b)\n        elif i =='mod':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a % b)\n        elif i == '+':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a + b)\n        elif i == '-':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a - b)\n        elif i == '*':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a * b)\n        elif i == '/':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a / b)\n        elif i == '^':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a ** b)\n        elif i == 'pow':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a ** b)\n        elif i == 'div':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a // b)\n        elif i =='mod':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a % b)\n        elif i == '*':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a * b)\n        elif i == 'div':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a // b)\n        elif i =='mod':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a % b)\n        elif i == '+':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a + b)\n        elif i == '-':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a - b)\n        elif i == '*':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a * b)\n        elif i == '/':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a / b)\n        elif i == '^':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a ** b)\n        elif i == 'pow':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a ** b)\n    return stack.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([exp])\n    is_balanced = True\n    while stack:\n        current = stack.popleft()\n        if current == '(':\n            stack.appendleft(')')\n        elif current == '{' or current == '[':\n            stack.appendleft(']')\n        elif current == '}' or current == ']':\n            return is_balanced\n    return is_balanced\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top_of_stack = stack.pop()\n                if top_of_stack == '(':\n                    return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    expression = [x for x in exp.split()]\n    stack = []\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    q=deque()\n    for i in exp:\n        if i==\"(\":\n            q.append(i)\n        elif i==\")\":\n            if not q:\n                return False\n            else:\n                q.pop()\n    if not q:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if '(' in exp:\n        left_open = True\n        right_open = True\n        if exp.count('(')!= exp.count(')'):\n            return False\n        for i in exp:\n            if i == '(':\n                left_open = False\n            if i == ')':\n                right_open = False\n        if left_open and right_open:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    q = deque()\n    q.append((exp, 0))\n    n = len(exp)\n    if n == 0:\n        return True\n    while len(q)!= 0:\n        curr_exp, i = q.popleft()\n        if curr_exp == \"(\" or curr_exp == \"{\" or curr_exp == \"[\":\n            if curr_exp == \")\":\n                if i == 0:\n                    q.append((curr_exp, i + 1))\n                elif i == n - 1:\n                    q.append((curr_exp, i - 1))\n                else:\n                    return False\n            else:\n                if i == 0:\n                    q.append((curr_exp, i + 1))\n                elif i == n - 1:\n                    q.append((curr_exp, i - 1))\n                else:\n                    return False\n        else:\n            if i == 0:\n                return False\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c in '([{':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = [w for w in test_str.split()]\n    lengths = [len(w) for w in words]\n    if not lengths:\n        return test_str\n    max_length = max(lengths)\n    temp = []\n    for i in range(len(lengths)):\n        if lengths[i] == max_length:\n            temp.append(words[i])\n    return''.join(temp)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    for c in test_str:\n        if len(c) == K:\n            res.append(c)\n    return ''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_lengths = [len(word) for word in test_str.split()]\n    if len(test_str) == 0:\n        return \"\"\n    elif len(word_lengths) == 0:\n        return test_str\n    elif len(word_lengths) == 1:\n        return test_str[:K] + test_str[K+1:]\n    else:\n        if word_lengths[0] > K:\n            return test_str[:K] + test_str[K:]\n        elif word_lengths[0] == K:\n            return test_str[:K] + test_str[K+1:]\n        else:\n            return test_str[:K] + test_str[K:] + test_str[K+1:]\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return ''.join(sorted(test_str, key = len, reverse = True)[:K])"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    word_list = list(test_str.split())\n    for i in range(len(word_list)):\n        for j in range(K):\n            if len(word_list[i]) == K:\n                new_str += word_list[i]\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    K = int(K)\n    c = 0\n    for i in range(0, len(test_str)-K):\n        c += 1\n        if test_str[i:i+K] in test_str[i:i+K]:\n            test_str = test_str[:i] + test_str[i+K:]\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    for word in test_str:\n        if len(word) == K:\n            res.append(word)\n    return ''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    import string\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return_string = ''\n    for char in test_str:\n        if len(char) == K:\n            return_string += char\n    return return_string\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    lst = []\n    for i in words:\n        if len(i)==K:\n            lst.append(i)\n        else:\n            pass\n    lst = list(set(lst))\n    return \" \".join(lst)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    pattern_list = regex.findall(text)\n    for match in pattern_list:\n        if match in text:\n            return match\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    sub = regex.finditer(text)\n    res = list()\n    for i in range(0, len(sub)):\n        s = sub[i].start()\n        e = sub[i].end()\n        if (s <= e):\n            res.append((s, e, sub[i].group()))\n    if res == []:\n        return None\n    res.sort(key=lambda x: x[2])\n    return res[0][0],res[0][1],res[0][2]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    match = regex.findall(text)\n    if len(match) == 0:\n        return None\n    else:\n        start = 0\n        end = len(match[0])\n        index = 0\n        while index < len(match):\n            if match[index][start:end] == match[index][:start]:\n                index += 1\n            else:\n                end = end-1\n                start = start + end\n            index += 1\n        return [start,end]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    for s in subs:\n        print(s.start())\n        print(s.end())\n        print(s.group())\n    return\ndef number_substring(text,pattern):\n    '''\n    Write a function to find the occurrence of the substring in a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    for s in subs:\n        print(s.start())\n        print(s.end())\n        print(s.group())\n    return\ndef count_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring in a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef pattern_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of a substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    for s in subs:\n        print(s.start())\n        print(s.end())\n        print(s.group())\n    return\ndef delete_from_string(text,pattern):\n    '''\n    Write a function to delete a substring from a string.\n    '''\n    subs = re.finditer(pattern,text)\n    for s in subs:\n        print(s.start())\n        print(s.end())\n        print(s.group())\n    return\ndef substrings_from_string(text,pattern):\n    '''\n    Write a function to find all substrings within a string.\n    '''\n    subs = re.finditer(pattern,text)\n    for s in subs:\n        print(s.start())\n        print(s.end())\n        print(s.group())\n    return\ndef substring_from_string(text,pattern):\n    '''\n    Write a function to find the substring within a string.\n    '''\n    subs = re.finditer(pattern,text)\n    for s in subs:\n        print(s.start())\n        print(s.end())\n        print(s.group())\n    return\ndef count_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef pattern_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef delete_from_string_occurance_substring(text,pattern):\n    '''\n    Write a function to delete a substring from a string.\n    '''\n    subs = re.finditer(pattern,text)\n    for s in subs:\n        print(s.start())\n        print(s.end())\n        print(s.group())\n    return\ndef substrings_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef substring_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef count_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef delete_substrings_from_string(text,pattern):\n    '''\n    Write a function to delete a substring from a string.\n    '''\n    subs = re.finditer(pattern,text)\n    for s in subs:\n        print(s.start())\n        print(s.end())\n        print(s.group())\n    return\ndef substring_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef substrings_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef delete_substrings_from_string_occurance_substring(text,pattern):\n    '''\n    Write a function to delete a substring from a string.\n    '''\n    subs = re.finditer(pattern,text)\n    for s in subs:\n        print(s.start())\n        print(s.end())\n        print(s.group())\n    return\ndef substring_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef delete_substrings_from_string_occurance_substring(text,pattern):\n    '''\n    Write a function to delete a substring from a string.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef substrings_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef delete_substrings_from_string_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to delete a substring from a string.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef substring_occurance_substring_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substring within a string. Return None if there is no match.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = count + 1\n    return count\ndef delete_substrings_from_string_occurance_substring_occurance_substring(text,pattern):\n    '''\n    Write a function to delete a substring from a string.\n    '''\n    subs = re.finditer(pattern,text)\n    count = 0\n    for s in subs:\n        count = coun"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    # create the dictionary for the pattern\n    pattern_dict = {}\n    # create the dictionary for the text\n    text_dict = {}\n    # create a counter for the text\n    text_counter = 0\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(pattern)<1:\n        return None\n    elif len(pattern)==1:\n        return text.find(pattern[0])\n    elif len(pattern)==2:\n        m=pattern[0]+pattern[1]\n        if m in text:\n            return text.find(m)\n        else:\n            return None\n    else:\n        l=len(pattern)\n        i=0\n        r=l-1\n        while i<r:\n            m=pattern[i]+pattern[i+1]\n            if m in text:\n                return text.find(m)\n            else:\n                if i>0:\n                    i-=1\n                    r-=1\n                else:\n                    return None\n            i+=1\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.replace(pattern,'')\n    pattern = pattern.replace('[0-9]','.')\n    pattern = pattern.replace('[^A-Za-z0-9 ]','.')\n    if len(pattern)==0:\n        return None\n    \n    # first, find the number of occurence\n    occurence_dict = {}\n    for char in pattern:\n        if char not in occurence_dict:\n            occurence_dict[char] = 0\n        occurence_dict[char] += 1\n        \n    \n    # now find the position of the matched substrings\n    for char in pattern:\n        if char not in occurence_dict:\n            return None\n        if occurence_dict[char]>0:\n            if char in text:\n                return char+'.'\n            else:\n                occurence_dict[char] -=1\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(text)\n    text = re.sub('[^A-Za-z0-9_]', '', text) #'[^A-Za-z0-9_]' -> delete all the characters outside the vowels\n    vowels = ['a','e','i','o','u']\n    lst = []\n    counter = 0\n    for i in range(len(text)):\n        if text[i] in vowels:\n            lst.append(counter)\n            counter += 1\n        else:\n            counter = 0\n    \n    if len(lst) == 0:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.split(' ')\n    # pattern = pattern.replace('\\n','')\n    pattern = pattern.replace('\\t','')\n    pattern = pattern.replace('[','')\n    pattern = pattern.replace(']','')\n    pattern = pattern.replace('{','')\n    pattern = pattern.replace('}','')\n    pattern = pattern.replace('.','')\n    pattern = pattern.replace('!','')\n    pattern = pattern.replace('?','')\n    pattern = pattern.replace(',','')\n    pattern = pattern.replace('!',' ')\n    pattern = pattern.replace('?',' ')\n    pattern = pattern.replace('(','')\n    pattern = pattern.replace(')','')\n    pattern = pattern.replace('{','')\n    pattern = pattern.replace('}','')\n    #pattern = pattern.replace('.',' ')\n    #pattern = pattern.replace('!',' ')\n    #pattern = pattern.replace('?',' ')\n    #pattern = pattern.replace(',',' ')\n    #pattern = pattern.replace('!',' ')\n    #pattern = pattern.replace('?',' ')\n    pattern = pattern.replace('*',' ')\n    #pattern = pattern.replace('-',' ')\n    #pattern = pattern.replace('+',' ')\n    pattern = pattern.replace('\\t','')\n    pattern = pattern.replace('-',' ')\n    pattern = pattern.replace('.',' ')\n    pattern = pattern.replace('!',' ')\n    pattern = pattern.replace('?',' ')\n    pattern = pattern.replace('\\\\','')\n    pattern = pattern.replace('\\\\n','')\n    pattern = pattern.replace('\\\\\\\\','')\n    pattern = pattern.replace('\\\\r','')\n    pattern = pattern.replace('\\\\t','')\n    pattern = pattern.replace('\\x00','')\n    pattern = pattern.replace('\\x01','')\n    pattern = pattern.replace('\\x02','')\n    pattern = pattern.replace('\\x03','')\n    pattern = pattern.replace('\\x04','')\n    pattern = pattern.replace('\\x05','')\n    pattern = pattern.replace('\\x06','')\n    pattern = pattern.replace('\\x07','')\n    pattern = pattern.replace('\\x08','')\n    pattern = pattern.replace('\\x09','')\n    pattern = pattern.replace('\\x0a','')\n    pattern = pattern.replace('\\x0b','')\n    pattern = pattern.replace('\\x0c','')\n    pattern = pattern.replace('\\x0d','')\n    pattern = pattern.replace('\\x0e','')\n    pattern = pattern.replace('\\x0f','')\n    pattern = pattern.replace('\\x10','')\n    pattern = pattern.replace('\\x11','')\n    pattern = pattern.replace('\\x12','')\n    pattern = pattern.replace('\\x13','')\n    pattern = pattern.replace('\\x14','')\n    pattern = pattern.replace('\\x15','')\n    pattern = pattern.replace('\\x16','')\n    pattern = pattern.replace('\\x17','')\n    pattern = pattern.replace('\\x18','')\n    pattern = pattern.replace('\\x19','')\n    pattern = pattern.replace('\\x1a','')\n    pattern = pattern.replace('\\x1b','')\n    pattern = pattern.replace('\\x1c','')\n    pattern = pattern.replace('\\x1d','')\n    pattern = pattern.replace('\\x1e','')\n    pattern = pattern.replace('\\x1f','')\n    pattern = pattern.replace('\\x20','')\n    pattern = pattern.replace('\\x21','')\n    pattern = pattern.replace('\\x22','')\n    pattern = pattern.replace('\\x23','')\n    pattern = pattern.replace('\\x24','')\n    pattern = pattern.replace('\\x25','')\n    pattern = pattern.replace('\\x26','')\n    pattern = pattern.replace('\\x27','')\n    pattern = pattern.replace('\\x28','')\n    pattern = pattern.replace('\\x29','')\n    pattern = pattern.replace('\\x2a','')\n    pattern = pattern.replace('\\x2b','')\n    pattern = pattern.replace('\\x2c','')\n    pattern = pattern.replace('\\x2d','')\n    pattern = pattern.replace('\\x2e','')\n    pattern = pattern.replace('\\x2f','')\n    pattern = pattern.replace('\\x30','')\n    pattern = pattern.replace('\\x31','')\n    pattern = pattern.replace('\\x32','')\n    pattern = pattern.replace('\\x33','')\n    pattern = pattern.replace('\\x34','')\n    pattern = pattern.replace('\\x35','')\n    pattern = pattern.replace('\\x36','')\n    pattern = pattern.replace('\\x37','')\n    pattern = pattern.replace('\\x38','')\n    pattern = pattern.replace('\\x39','')\n    pattern = pattern.replace('\\x3a','')\n    pattern = pattern.replace('\\x3b','')\n    pattern = pattern.replace('\\x3c','')\n    pattern = pattern.replace('\\x3d','')\n    pattern = pattern.replace('\\x3e','')\n    pattern = pattern.replace('\\x3f','')\n    pattern = pattern.replace('\\x40','')\n    pattern = pattern.replace('\\x41','')\n    pattern = pattern.replace('\\x42','')\n    pattern = pattern.replace('\\x43','')\n    pattern = pattern.replace('\\x44','')\n    pattern = pattern.replace('\\x45','')\n    pattern = pattern.replace('\\x46','')\n    pattern = pattern.replace('\\x47','')\n    pattern = pattern.replace('\\x48','')\n    pattern = pattern.replace('\\x49','')\n    pattern = pattern.replace('\\x4a','')\n    pattern = pattern.replace('\\x4b','')\n    pattern = pattern.replace('\\x4c','')\n    pattern = pattern.replace('\\x4d','')\n    pattern = pattern.replace('\\x4e','')\n    pattern = pattern.replace('\\x4f','')\n    pattern = pattern.replace('\\x50','')\n    pattern = pattern.replace('\\x51','')\n    pattern = pattern.replace('\\x52','')\n    pattern = pattern.replace('\\x53','')\n    pattern = pattern.replace('\\x54','')\n    pattern = pattern.replace('\\x55','')\n    pattern = pattern.replace('\\x56','')\n    pattern = pattern.replace('\\x57','')\n    pattern = pattern.replace('\\x58','')\n    pattern = pattern.replace('\\x59','')\n    pattern = pattern.replace('\\x5a','')\n    pattern = pattern.replace('\\x5b','')\n    pattern = pattern.replace('\\x5c','')\n    pattern = pattern.replace('\\x5d','')\n    pattern = pattern.replace('\\x5e','')\n    pattern = pattern.replace('\\x5f','')\n    pattern = pattern.replace('\\x60','')\n    pattern = pattern.replace('\\x61','')\n    pattern = pattern.replace('\\x62','')\n    pattern = pattern.replace('\\x63','')\n    pattern = pattern.replace('\\x64','')\n    pattern = pattern.replace('\\x65','')\n    pattern = pattern.replace('\\x66','')\n    pattern = pattern.replace('\\x67','')\n    pattern = pattern.replace('\\x68','')\n    pattern = pattern.replace('\\x69','')\n    pattern = pattern.replace('\\x6a','')\n    pattern = pattern.replace('\\x6b','')\n    pattern "
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_splitted = pattern.split(':')\n    start_pos = 0\n    end_pos = 0\n    for i in range(0,len(text)):\n        if text[i:].startswith(pattern_splitted[0]):\n            start_pos = i\n        if text[i:].endswith(pattern_splitted[1]):\n            end_pos = i\n    return end_pos - start_pos\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if index % 2 == 0:\n            if nums[index] % 2 == 1:\n                return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # if nums is empty return True\n    if not nums:\n        return True\n    \n    # find the position of the last element\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    i=0\n    while i<len(nums):\n        if nums[i]%2!=0:\n            return False\n        i=i+1\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if not nums:\n        return True\n    else:\n        odd_pos = 0\n        for i in range(len(nums)):\n            if nums[i]%2 == 1:\n                nums[i] = nums[i]//2\n                odd_pos += 1\n        if odd_pos == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Declare a new array to save the odd numbers.\n    odd = []\n    \n    for i in range(0, len(nums)):\n        # Get the odd number.\n        odd_num = nums[i] % 2\n        \n        # If odd_num is odd_num, add it to odd.\n        if odd_num == 1:\n            odd.append(nums[i])\n    \n    # Return whether it has odd numbers.\n    if len(odd) % 2 == 1:\n        return True\n    else:\n        return False\n    \n    "
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # your code here\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_checker(num):\n    '''\n    :param num: any number\n    :return: a boolean\n    '''\n    # your code here\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    else:\n        return True\n    \ndef primes():\n    '''\n    :return: a list of all prime numbers\n    '''\n    # your code here\n    nums = list(range(100, 1000))\n    for num in nums:\n        if prime_checker(num) == True:\n            yield num\n            \ndef primes_2(nums):\n    '''\n    :param nums: a list of numbers\n    :return: a list of all prime numbers\n    '''\n    # your code here\n    for num in nums:\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                yield num\n        \ndef prime_factors(num):\n    '''\n    :param num: any number\n    :return: a list of all prime numbers\n    '''\n    # your code here\n    factors = []\n    for i in range(1, int(math.sqrt(num) + 1)):\n        if num % i == 0:\n            factors.append(i)\n            if i!= math.sqrt(num):\n                factors.append(int(math.sqrt(num)))\n    return factors\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd.append(nums[i])\n    if len(odd) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return False if nums[0]%2 == 0 else True\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n    for index, letter in enumerate(test_str):\n        for vowel in 'aeiou':\n            if letter == vowel:\n                if index % 2 == 0:\n                    count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiouAEIOU')\n    return sum([1 for c in test_str if c in vowels])\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    \n    for letter in test_str:\n        if letter in 'aeiou':\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count=0\n    for i in range(len(test_str)):\n        for j in range(len(test_str)-1):\n            if test_str[j] in 'aeiou':\n                if test_str[j] == test_str[j+1]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # your code goes here\n    vowels = {'a','e','i','o','u'}\n    # initialise count\n    count = 0\n    # iterate over string\n    for char in test_str:\n        # if character is a vowel\n        if char in vowels:\n            count += 1\n    # return count\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    vowels_count = 0\n    for char in test_str:\n        if char in vowels:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    \n    for letter in test_str:\n        if letter in 'aeiouAEIOU':\n            vowels += 1\n            \n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char in \"aeiou\":\n            count += 1\n        if char in \"AEIOU\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.replace('a','a').replace('i','a').replace('o','i').replace('u','u').replace('y','y').replace('e','e').replace('r','e')\n    vowels_count = 0\n    for char in test_str:\n        if char in 'aeiou':\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    \n    for char in test_str:\n        if char in vowels:\n            count = count + 1\n        \n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if not arr :\n        return 0\n    counter = dict()\n    for i in arr :\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    return sum(counter.values())\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    total = 0\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize count\n    count = 0\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #Your code here\n    #str_arr = str(arr)\n    #str_arr = str_arr.replace('[', '')\n    #str_arr = str_arr.replace(']', '')\n    #arr = str_arr.split(',')\n    #arr = [int(num) for num in arr]\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    s = 0\n    for i in arr:\n        s+=i\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = 0\n    s = 0\n    for i in range(len(arr)):\n        if(arr[i]!= arr[i-1]):\n            x += arr[i]\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n=len(arr)\n    \n    # initialize the result with the minimum as the current sum \n    result = min(arr) \n    \n    # The loop will run from 0 to n-1 \n    for i in range(n): \n        # If current sum is the same as the \n        # result, we found the sum. \n        if (arr[i] == result): \n            # We found the sum, return the result \n            return result \n        \n        # If current sum is not the same as the \n        # result, we subtract the current sum \n        # from the result and repeat the process \n        else: \n            # current sum is smaller than or equal to the \n            # result, so we do not use the current sum \n            # to find the next smaller sum \n            if (arr[i] < result): \n                # we do not use the current sum \n                # to find the next smaller sum \n                result = arr[i] \n                # We found the result, so return it \n    return result \n    \nprint(find_sum([1,1,2,2,4,4,4,2,2])) "
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i]:\n            sum += arr[i]\n    return sum \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            total = total + arr[i]\n    return total\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    unpacked_list = []\n    list_of_lists = []\n    for el in list1:\n        unpacked_list.append(el)\n    for el in list1:\n        if el not in unpacked_list:\n            list_of_lists.append([el])\n        else:\n            if not unpacked_list.index(el) == (len(unpacked_list) - 1):\n                list_of_lists[unpacked_list.index(el) + 1].append(el)\n            else:\n                list_of_lists[unpacked_list.index(el) + 1].append(el)\n    return list_of_lists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # use groupby to group the list into 2 sublists\n    grouped_by_element = groupby(list1, lambda x: x.count(x))\n    \n    # create list of two-tuples and then create list of list of 2 tuples\n    result = []\n    result_list = []\n    \n    # for each element in the list\n    for element in list1:\n        # get the count of that element\n        count = element.count(element)\n        # add that element to the list\n        result.append((element, count))\n        # create a list of the 2 tuples from the previous iteration\n        result_list.append(list(grouped_by_element[element]))\n    \n    # return the list\n    return result_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    for group in groupby(list1):\n        if len(list(group)) > 1:\n            output.append(list(group))\n        if len(list(group)) == 2:\n            if list(group) not in output:\n                output.append(list(group))\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = [[]]\n    for i, element in enumerate(list1):\n        if element!= res[i - 1][-1]:\n            res[i - 1].append(element)\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    lists = []\n    for i in range(len(list1)):\n        if i%2:\n            if len(lists)>0:\n                lists[len(lists)-1].append(list1[i])\n            else:\n                lists.append([list1[i]])\n        else:\n            lists[len(lists)-1].append(list1[i])\n    return lists\ndef sort_by_size(array):\n    '''\n    Write a function that sorts a given array of numbers.\n    '''\n    numbers_sorted = []\n    for item in array:\n        numbers_sorted.append(item)\n    return sorted(numbers_sorted)\ndef groupby_sorted(list1):\n    '''\n    Write a function that groups a given list of numbers into groups of equal size.\n    '''\n    lists = []\n    for item in list1:\n        if len(lists)>0:\n            groups = groupby(lists[len(lists)-1])\n            lists.clear()\n            for group in groups:\n                lists.append(list(group))\n        lists[len(lists)-1].append(item)\n    return lists\ndef reverse_lists(list1):\n    '''\n    Write a function that reverses a given list.\n    '''\n    new_list = []\n    for item in list1:\n        new_list.append(item)\n    return new_list\ndef reverse_lists_sorted(list1):\n    '''\n    Write a function that reverses a given list.\n    '''\n    new_list = []\n    for item in list1:\n        new_list.append(item)\n    return sorted(new_list)\ndef count_consecutive_duplicates(list1):\n    '''\n    Write a function that returns the number of consecutive duplicates in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if list1[i] == list1[i+1]:\n            count+=1\n    return count\ndef count_consecutive_duplicates_sorted(list1):\n    '''\n    Write a function that returns the number of consecutive duplicates in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if list1[i] == list1[i+1]:\n            count+=1\n    return count\ndef count_consecutive_duplicates_sorted_recursive(list1, start=0, end=None):\n    '''\n    Write a function that returns the number of consecutive duplicates in a given list.\n    '''\n    if end is None:\n        end = len(list1)\n    if start == end:\n        return 0\n    if list1[start] == list1[end]:\n        count = 1+count_consecutive_duplicates_sorted_recursive(list1, start+1, end)\n    else:\n        count = 0\n    return count\ndef count_consecutive_duplicates_sorted_recursive(list1, start=0, end=None):\n    '''\n    Write a function that returns the number of consecutive duplicates in a given list.\n    '''\n    if end is None:\n        end = len(list1)\n    if start == end:\n        return 0\n    if list1[start] == list1[end]:\n        count = 1+count_consecutive_duplicates_sorted_recursive(list1, start+1, end)\n    else:\n        count = 0\n    return count\ndef compare_lists(list1, list2):\n    '''\n    Write a function that compares a given list of numbers and returns a boolean.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\ndef find_duplicate_items(list1):\n    '''\n    Write a function that finds duplicate items in a given list.\n    '''\n    duplicates = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j]:\n                duplicates.append((list1[i], list1[j]))\n    return duplicates\ndef numbers_are_equal(list1, list2):\n    '''\n    Write a function that returns a boolean, that is, if the two given lists are equal.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for item1 in list1:\n        if item1 not in list2:\n            return False\n    return True\ndef product_of_numbers(list1):\n    '''\n    Write a function that returns the product of a given list.\n    '''\n    total = 1\n    for item in list1:\n        total *= item\n    return total\ndef product_of_numbers_recursive(list1, start=0):\n    '''\n    Write a function that returns the product of a given list.\n    '''\n    if start == len(list1):\n        return 1\n    else:\n        item = list1[start]\n        list1[start] = 0\n        return product_of_numbers_recursive(list1, start+1)\ndef product_of_numbers_recursive_sorted(list1, start=0):\n    '''\n    Write a function that returns the product of a given list.\n    '''\n    if start == len(list1):\n        return 1\n    else:\n        item = list1[start]\n        list1[start] = 0\n        return product_of_numbers_recursive_sorted(list1, start+1)\ndef product_of_numbers_recursive_sorted_recursive(list1, start=0):\n    '''\n    Write a function that returns the product of a given list.\n    '''\n    if start == len(list1):\n        return 1\n    else:\n        item = list1[start]\n        list1[start] = 0\n        return product_of_numbers_recursive_sorted_recursive(list1, start+1)\ndef product_of_numbers_recursive_sorted_recursive_sorted(list1, start=0):\n    '''\n    Write a function that returns the product of a given list.\n    '''\n    if start == len(list1):\n        return 1\n    else:\n        item = list1[start]\n        list1[start] = 0\n        return product_of_numbers_recursive_sorted_recursive_sorted(list1, start+1)\ndef product_of_numbers_recursive_sorted_recursive_sorted_recursive(list1, start=0):\n    '''\n    Write a function that returns the product of a given list.\n    '''\n    if start == len(list1):\n        return 1\n    else:\n        item = list1[start]\n        list1[start] = 0\n        return product_of_numbers_recursive_sorted_recursive_sorted_recursive(list1, start+1)\ndef average_of_numbers(list1):\n    '''\n    Write a function that returns the average of a given list.\n    '''\n    return sum(list1) / len(list1)\ndef merge_sort(list1):\n    '''\n    Write a function that sorts a given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n    mid = len(list1)//2\n    left = list1[:mid]\n    right = list1[mid:]\n    return merge_sort(left) + right\ndef merge_sort_recursive(list1):\n    '''\n    Write a function that sorts a given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n    mid = len(list1)//2\n    left = merge_sort_recursive(list1[:mid])\n    right = merge_sort_recursive(list1[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    '''\n    Write a function that merges two given lists.\n    '"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    m = max(list1) # the maximum element in the list\n    \n    if m == 1: # if the maximum element in the list is 1\n        return [list1] # return the list with only 1 element\n    \n    elif m == 2: # if the maximum element in the list is 2\n        return [list1[:1]] # return the list with only 1 element with the second to the last element\n    \n    elif m % 2!= 0: # if the maximum element in the list is not even, the maximum element is not a duplicate\n        return [list1[:m//2]] + pack_consecutive_duplicates(list1[m//2:]) # return only the n-th element of the list with the n-th and the n-th element to the last\n    \n    else: # if the maximum element in the list is an even number, all elements are a duplicate\n        return [list1[:m//2]] + pack_consecutive_duplicates(list1[m//2:m//2*2]) + pack_consecutive_duplicates(list1[m//2*2:])\n    \n    \n    \ndef find_consecutive_duplicates(list):\n    '''\n    Write a function to find the consecutive duplicates of a given list elements.\n    '''\n    \n    list.sort() # sort the list\n    \n    # the largest element in the list is the smallest, so the size of the array is m.\n    # we check the first element of the list to find the index of the largest element.\n    # after that, we compare the previous element of the list to the next element of the largest element.\n    # if the two elements are the same, we compare the previous element of the next element of the previous element.\n    # if the two elements are different, we compare the next element of the previous element.\n    # finally, if there is no element in the list, the largest element is the next element.\n    # the number of consecutive duplicates is m - m//2.\n    \n    \n    index = 0\n    m = len(list)\n    max_index = len(list) - 1\n    \n    while index < max_index:\n        \n        if index == 0:\n            \n            if list[index] == list[index + 1] and list[index] == list[index + 2] and list[index]!= list[index + 3]: # the first element of the sublist is the first element of the list\n                return [list[index]] # return only the element of the sublist with the first element\n            else:\n                list[index], list[index + 1] = list[index + 1], list[index] # swap the two elements\n                \n        elif list[index] == list[index + 1] and list[index]!= list[index + 2]: # the second element of the sublist is the second element of the list\n            return [list[index]] # return only the element of the sublist with the second element\n        \n        elif list[index]!= list[index + 1] and list[index]!= list[index + 2] and list[index]!= list[index + 3]: # the next element of the sublist is the next element of the list\n            return [list[index]] # return only the element of the sublist with the next element\n        \n        else: # no element in the sublist, the last element of the list is the last element.\n            list[index], list[index + 1] = list[index + 1], list[index] # swap the two elements\n            \n        index += 1\n    \n    return [] # if the list is empty, we return an empty list\n    \n    \ndef find_number_of_unique_elements(list):\n    '''\n    Write a function to determine the number of unique elements in a given list.\n    '''\n    \n    list.sort() # sort the list\n    \n    # the largest element in the list is the smallest, so the size of the array is m.\n    # we check the first element of the list to find the index of the largest element.\n    # after that, we compare the previous element of the list to the next element of the largest element.\n    # if the two elements are the same, we compare the previous element of the next element of the previous element.\n    # if the two elements are different, we compare the next element of the previous element.\n    # finally, if there is no element in the list, the largest element is the next element.\n    # the number of unique elements is m - m//2.\n    \n    # we use the groupby() method to group the elements of the list in a sub-list\n    # so that there is no duplication\n    \n    # the smallest element in the list is the second smallest element in the list, so we compare the second smallest element to the second smallest element\n    # if the elements are the same, we compare the next smallest element of the next element of the previous element.\n    # if the elements are different, we compare the next element of the previous element.\n    # finally, if there is no element in the list, the smallest element is the next element.\n    # the number of unique elements is m - m//2.\n    \n    # to find the index of the smallest element, we need to use the groupby() method\n    \n    index = 0\n    m = len(list)\n    \n    count = 0\n    for group in groupby(list):\n        if index == 0:\n            if group[0] == group[1] and group[0]!= group[2]:\n                count += 1\n        elif group[0] == group[1] and group[0]!= group[2]:\n            count += 1\n        else:\n            if group[0]!= group[1] and group[0]!= group[2]:\n                count += 1\n        index += 1\n    return count\n    \n    \ndef count_pairs(list):\n    '''\n    Write a function to count the number of pairs of elements that are the same.\n    '''\n    \n    list.sort() # sort the list\n    \n    # the largest element in the list is the smallest, so the size of the array is m.\n    # we check the first element of the list to find the index of the largest element.\n    # after that, we compare the previous element of the list to the next element of the largest element.\n    # if the two elements are the same, we compare the previous element of the next element of the previous element.\n    # if the two elements are different, we compare the next element of the previous element.\n    # finally, if there is no element in the list, the largest element is the next element.\n    # the number of pairs is m - m//2.\n    \n    # to find the index of the largest element, we need to use the groupby() method\n    \n    # the smallest element in the list is the second smallest element in the list, so we compare the second smallest element to the second smallest element\n    # if the elements are the same, we compare the next smallest element of the next element of the previous element.\n    # if the elements are different, we compare the next element of the previous element.\n    # finally, if there is no element in the list, the smallest element is the next element.\n    # the number of pairs is m - m//2.\n    \n    # to find the index of the smallest element, we need to use the groupby() method\n    \n    index = 0\n    m = len(list)\n    count = 0\n    \n    for group in groupby(list):\n        if index == 0:\n            if group[0] == group[1] and group[0]!= group[2]:\n                count += 1\n        elif group[0] == group[1] and group[0]!= group[2]:\n            count += 1\n        else:\n            if group[0]!= group[1] and group[0]!= group[2]:\n                count += 1\n        index += 1\n    return count\n    \n    \n    \ndef find_smallest_elements(list):\n    '''\n    Write a function to find the smallest elements in a given list.\n    '''\n    \n    list.sort() # sort the list\n    \n    # the largest element in the list is the smallest, so the size of the array is m.\n    # we check the first element of the list to find the index of the largest element.\n    # after that, we compare the previous element of the list to the next element of the largest element.\n    # if the two elements are the same, we compare the previous element of the next element of the previous element.\n    # if the tw"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # write your code here\n    list_to_pack = []\n    for elem in list1:\n        list_to_pack.append(elem)\n        if list_to_pack.count(elem) > 1:\n            list_to_pack.remove(elem)\n    return list_to_pack\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(map(list, zip(*g))) for k, g in groupby(sorted(list1), key=lambda x: len(x))]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if list1 is None or list1 == []:\n        return None\n    list1.sort(reverse=True)\n    n = len(list1)\n    n_grouped = groupby(list1)\n    n_dup_l = [None] * n\n    n_dup_r = [None] * n\n    n_dup_i = 0\n    n_dup_j = 0\n    # Prep for while loop\n    for key, group in n_grouped:\n        if n_dup_i % 2 == 1:\n            for i, (dup_key, dup_group) in enumerate(group):\n                if i == 0:\n                    n_dup_l[i] = dup_key\n                    n_dup_r[i] = dup_group\n                else:\n                    n_dup_j = dup_key\n            n_dup_i += 1\n        else:\n            for i, (dup_key, dup_group) in enumerate(group):\n                if i == 0:\n                    n_dup_l[i] = dup_key\n                    n_dup_j = dup_group\n                else:\n                    n_dup_i = dup_key\n                    n_dup_j = dup_group\n            n_dup_i += 1\n    # Trim n_dup_l, n_dup_r, n_dup_i, and n_dup_j by the length of the list\n    n_dup_l = n_dup_l[:n_dup_i]\n    n_dup_r = n_dup_r[:n_dup_j]\n    n_dup_i = n_dup_i - n_dup_j\n    # Merge the remaining elements to the end of the list\n    n_dup_l.extend(n_dup_r)\n    n_dup_l.extend(n_dup_i)\n    # Prep for list slicing\n    list1_l = [None] * len(list1)\n    list1_j = [None] * len(list1)\n    list1_r = [None] * len(list1)\n    list1_i = [None] * len(list1)\n    for i, (key, group) in enumerate(groupby(list1)):\n        list1_l[i] = key[0]\n        list1_r[i] = key[1]\n        list1_j[i] = group[0]\n        list1_i[i] = group[1]\n    return [list1_l, list1_j, list1_r, list1_i]\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for i in list1:\n        for j in i:\n            if j in unique_dict:\n                unique_dict[j] = unique_dict[j] + 1\n            else:\n                unique_dict[j] = 1\n    return unique_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) <= 1:\n        return {}\n    \n    unique_dict = {}\n    for i in list1:\n        if not i in unique_dict:\n            unique_dict[i] = 0\n        unique_dict[i] += 1\n    \n    return unique_dict\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    dictionary={}\n    if len(list1)==1:\n        return dictionary\n    \n    else:\n        for i in range(len(list1)):\n            list1[i]=tuple(list1[i])\n            dictionary[list1[i][0]]=dictionary.get(list1[i][0],0)+1\n    return dictionary\n    \n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_count = {}\n    for element in list1:\n        if element not in unique_count:\n            unique_count[element] = 1\n        else:\n            unique_count[element] += 1\n    return unique_count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return_dict = {}\n    for i in list1:\n        if i not in return_dict.keys():\n            return_dict[i] = 1\n        else:\n            return_dict[i] += 1\n    return return_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    t = {}\n    #total = 1\n    #for item in list1:\n    #    total += 1\n    #    t[item] = total\n    #return t\n    for item in list1:\n        t[item] = 1\n    return t\n    # return {item: t[item] for item in list1}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for x in list1:\n        if x not in dic:\n            dic[x] = 0\n        else:\n            dic[x] += 1\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # TODO: Write your code here\n    count={}\n    for i in list1:\n        count[i]=count.get(i,0)+1\n    return count\n    \ndef main():\n    '''\n    Write your function here\n    '''\n    print(unique_sublists([1,2,3,4,5,5]))\n    print(unique_sublists([1,2,3,4,5,5]))\n    print(unique_sublists([1,2,3,4,5,6,7,8,9]))\n    print(unique_sublists([1,2,3,4,5,5]))\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    \n    for item in list1:\n        if item in unique_list:\n            unique_list[item] += 1\n        else:\n            unique_list[item] = 1\n    \n    return unique_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_set = set(test_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def sum_combinations(numbers):\n        if len(numbers) == 0:\n            return 1\n        if len(numbers) == 1:\n            return numbers[0]\n        if len(numbers) == 2:\n            return numbers[0]*numbers[1]\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    if len(test_list) == 0:\n        return []\n    \n    # Create a hashmap to store the sums with tuples in the given list.\n    sums = {}\n    \n    # Iterate through all of the elements in the given list.\n    for num in test_list:\n        sums[num] = num\n    \n    # Iterate through all possible combinations of nums and sum them together.\n    combinations_sums = {}\n    \n    for sums in combinations(sums, len(test_list)):\n        combinations_sums[tuple(sums)] = sums\n        \n    return combinations_sums\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list=set(test_list)\n    test_list=list(test_list)\n    \n    result = []\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if type(test_list) is not tuple:\n        return None\n    if len(test_list)<2:\n        return test_list\n    if len(test_list)<3:\n        return None\n    if len(test_list)>=4:\n        return test_list\n    combinations_set = list(combinations(test_list,2))\n    return combinations_set\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    combination_tuples = []\n    \n    #first compute all combinations of tuples\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            combination_tuples.append(j)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    s = set()\n    def dfs(i, curr):\n        s.add(tuple(curr))\n        for j in range(i, len(test_list)):\n            t = tuple(test_list[j])\n            if t in s:\n                dfs(j + 1, curr + [t])\n    dfs(0, [])\n    print(s)\n    return len(s)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # your code here\n    res = []\n    if len(test_list) == 0:\n        return res\n    for i in test_list:\n        res += combinations(i, len(i))\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #Write your code here\n    test_list = list(test_list)\n    print(\"\")\n    print(\"****************************************\")\n    print(\"\\nTEST CASE:\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"This test list: \")\n    print(test_list)\n    print(\"\\nA total of: \")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\")\n    print(\"\")\n    print(\"\\nResult:\")\n    print(\"(\",len(test_list),\")\")\n    print(\"(\",len(test_list), \")\")\n    print(\"****************************************\""
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return [[]]\n    else:\n        return combinations(test_list,len(test_list))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    j = 2\n    count = 0\n    while i < n :\n        if n % i == 0 :\n            count += 1\n        i += j\n        j += 2\n        if count > 1 :\n            break\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 0 : \n        return 0\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    \n    if count % 2 == 0:\n        return 0\n    \n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return n\n    return None\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors = 0 \n    for i in range(1,int(math.sqrt(n)+1)): \n        if (n % i == 0): \n            count_divisors += 1 \n    if count_divisors % 2 == 0: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    l = []\n    i = 1\n    while i<=math.sqrt(n):\n        if n%i==0:\n            if i==1:\n                l.append(i)\n            else:\n                if i!=1:\n                    l.append(i)\n                    l.append(i)\n        i=i+1\n    if len(l)==2:\n        print(l)\n        return l[1]\n    else:\n        return \"no\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0:\n            divisors.append(i)\n            if i!= int(math.sqrt(n)) : \n                divisors.append(n // i)\n        \n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = 1\n    b = 2\n    while b <= n :\n        if n % b == 0 :\n            print(b)\n            a = a + 1\n            b = b + 2\n        else : \n            b = b + 1\n            \n    if a > 1 :\n        print(a)\n        \n    \n    \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # n : integer to check\n    # return : boolean\n    if n == 0 or n == 1: \n        return True\n    for i in range(1, math.floor(math.sqrt(n))+1) : \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        print (\"There are no divisors of a number\") \n        return 0\n    count_divisors = 0\n    for i in range(1, n//2+1): \n        if n % i == 0 : \n            count_divisors += 1\n    if count_divisors == 0 : \n        print (\"There are no divisors of a number\") \n        return 0\n    else : \n        print (\"There are divisors of a number\") \n        return 1\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # TODO:\n    # O(N^2) time (n = length of arr)\n    # O(1) space (n = length of arr)\n    # The function will return the sum of all odd length subarrays in arr.\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        sum += arr[i]\n        if(arr[i]%2==0):\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Create an empty list to store odd length subarrays\n    sum_of_odd_length = []\n    \n    # Traverse through array\n    for i in range(len(arr)):\n        # Add to the list if length is odd\n        if i%2 == 0:\n            sum_of_odd_length.append(sum(arr[i:i+2]))\n    \n    # Return sum\n    return sum(sum_of_odd_length)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_ = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_ += arr[i]\n    return sum_\n    \n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_array = [0] * len(arr)\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        odd_length_array[i] = arr[i] % 2\n    for i in range(len(arr)):\n        if (odd_length_array[i] == 1):\n            odd_length_sum += arr[i]\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    count = 1\n    for i in range(0,len(arr)):\n        count = count * 2 + 1\n        if arr[i] % 2!= 0:\n            count = count * 2\n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Your code goes here\n    odd = []\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            odd.append(arr[i])\n    for i in range(len(arr)):\n        if i%2!= 0:\n            sum += odd[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(0,len(arr)):\n        if i % 2!= 0:\n            odd_sum = odd_sum + arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if (i % 2) == 1:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    h, s, v = cv2.split(cv2.cvtColor(bgr_image, cv2.COLOR_BGR2HSV))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # step 1 - convert from color to hsv\n    H = 0\n    S = 0\n    V = 0\n    # step 2 - find the min value of the two channels\n    max_r = max(r, g, b)\n    min_r = min(r, g, b)\n    # if the two values are the same, then we can assume the hue will be 0\n    if max_r == min_r:\n        V = 0\n        H = 0\n    else:\n        # divide by the maximum value\n        V = (r - min_r) / (max_r - min_r)\n        if V < 0.299:\n            # if the value is less than 0.299, then we set the hue to 0\n            H = 0\n        elif V > 0.333:\n            # if the value is greater than 0.333, then we set the hue to 0\n            H = 0.2856\n        else:\n            # if the value is greater than 0.333, then we set the hue to 0\n            H = 0.5987\n    # step 3 - convert to hsv\n    H = H * 360\n    S = V * 255\n    return (H, S, V)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #convert rgb to hsv\n    r, g, b = rgb_to_hsv(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0:\n        return 0, 0, 0\n    else:\n        r = r/255\n        g = g/255\n        b = b/255\n        max_v = 255\n        max_h = max(0, 255-g, 255-r, max_v)\n        min_h = min(0, 255-g, 255-r, min_v)\n        h_intercept = max(0, (max_h-min_h)/2)\n        h = max_h\n        if g > max_v:\n            h = h_intercept\n        elif r > max_v:\n            h = h_intercept\n        if b > max_h:\n            h = h_intercept\n        elif g > max_h:\n            h = h_intercept\n        elif r > max_h:\n            h = h_intercept\n        return h, min_h, max_h\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    return hsv_to_rgb(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    h = 0.0\n    s = 0.0\n    v = 0.0\n    if r < 0.0:\n        h = (1.0*r)/(r+g+b)\n        s = 0.0\n    else:\n        v = (1.0*b)/(r+g+b)\n        h = (1.0-v)/(1.0-r+g-b)\n    h = 0.0 if h == 0.0 else h\n    s = 0.0 if s == 0.0 else s\n    v = 0.0 if v == 0.0 else v\n    if h < 0.0:\n        h = 2.0*(1.0-h)\n    else:\n        h = 2.0*(1.0-h)\n    if s < 0.0:\n        s = 2.0*(1.0-s)\n    else:\n        s = 2.0*(1.0-s)\n    if v < 0.0:\n        v = 2.0*(1.0-v)\n    else:\n        v = 2.0*(1.0-v)\n    if h <= 0.0:\n        return 0.0,0.0,0.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_r = 255\n    max_g = 255\n    max_b = 255\n    min_r = 0\n    min_g = 0\n    min_b = 0\n    \n    if max_r > max_g > max_b:\n        max_r, max_g, max_b = max_b, max_g, max_r\n    if max_r > max_g > max_b:\n        max_r, max_g, max_b = max_g, max_b, max_r\n    if max_r > max_g > max_b:\n        max_r, max_g, max_b = max_b, max_g, max_r\n    if max_r > max_g > max_b:\n        max_r, max_g, max_b = max_b, max_g, max_r\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # convert to unsigned 8-bit integer so that \n    # it can be written to a 24-bit integer\n    r = int(255 * r)\n    g = int(255 * g)\n    b = int(255 * b)\n    \n    # define the hue saturation value of the RGB color\n    hue = b\n    saturation = (g - r) / 255\n    value = (r + g + b) / 255\n    \n    # assign the hue and saturation values to the appropriate variables\n    # in the hsv color space\n    hsv = (hue, saturation, value)\n    \n    # convert the hue and saturation values to an hsv color\n    # in the rgb color space using a bitwise and operation\n    return tuple(map(int, [hsv[0] & 0xFF, hsv[1], hsv[2]]))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert to hsv\n    h = 0.5*r + 0.5*g + 0.5*b\n    s = 0.5*r - 0.5*g - 0.5*b\n    v = 0.5*r*g - 0.5*b*g\n    # set color values\n    if h < 0.0:\n        h = 0.0\n    if s < 0.0:\n        s = 0.0\n    if v < 0.0:\n        v = 0.0\n    if h > 1.0:\n        h = 1.0\n    if s > 1.0:\n        s = 1.0\n    if v > 1.0:\n        v = 1.0\n    # convert to hsv\n    h = h*60.0\n    s = s*60.0\n    v = v*60.0\n    # combine\n    h = max(min(h, 1.0), 0.0)\n    s = max(min(s, 1.0), 0.0)\n    v = max(min(v, 1.0), 0.0)\n    # calculate the value\n    if v == 0.0:\n        return 0.0, 0.0, 0.0\n    u = v*(1 - s)\n    v = s*(1 - v)\n    p = v*(1 - h)\n    q = v*(1 + h)\n    t = v*(1 + t)\n    if u > 1.0:\n        u = 1.0\n    if v > 1.0:\n        v = 1.0\n    if p > 1.0:\n        p = 1.0\n    if q > 1.0:\n        q = 1.0\n    # saturate\n    if u < 0.0:\n        u = 0.0\n    if v < 0.0:\n        v = 0.0\n    if p < 0.0:\n        p = 0.0\n    if q < 0.0:\n        q = 0.0\n    # return\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_odd += list1[i]\n    if even_odd == 0:\n        return 0\n    return even_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in range(0,len(list1)):\n        result = result * list1[i]\n    print(result)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if not list1:\n        return 'wrong list'\n    else:\n        even = 1\n        odd = 0\n        while(even+odd):\n            if even%2==0:\n                even = even//2\n            else:\n                odd = odd//2\n        return list1[even-1]*list1[odd-1]\n        \nprint(mul_even_odd([2,4,6,8,10,12,14,16,18,20])"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    length = len(list1)\n    for i in range(0, length):\n        if list1[i] % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    print(f\"The product of even numbers in the list is {even}\")\n    print(f\"The product of odd numbers in the list is {odd}\")\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product = product * i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 0\n    for ele in list1:\n        if ele % 2 == 0:\n            result += ele\n        else:\n            result -= ele\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    i = 0\n    j = len(list1)-1\n    k = 0\n    while(j >= 0):\n        if (list1[i] % 2) == 0:\n            list1[k] = list1[i] * list1[k]\n            j -= 1\n            k += 1\n        else:\n            list1[k] = list1[i] * list1[k]\n            i += 1\n            j -= 1\n            k -= 1\n    print(list1)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_odd.append(list1[i])\n        else:\n            even_odd.append(0)\n    print(even_odd)\n    return even_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for i in range(0,len(list1),2):\n        list1[i] = list1[i]*2\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        list2 = list1[1:]\n        list3 = list1[0]\n        list2.sort()\n        list3.sort()\n        if list2[0] % 2 == 0:\n            return mul_even_odd(list2) * mul_even_odd(list3)\n        else:\n            return mul_even_odd(list2) * mul_even_odd(list3) * mul_even_odd(list2[1:])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    for i in range(len(test_str)):\n        int_list.append(int(test_str[i]))\n    return tuple(int_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    lst = test_str.split(\",\")\n    new = []\n    for each in lst:\n        new.append(int(each))\n    return new\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str[0] == '(' and test_str[-1] == ')':\n        return tuple(eval(test_str[1:-1]))\n    else:\n        return tuple(eval(test_str))\n    \ndef string_to_int_tuple(test_str):\n    '''\n    Write a function to convert string tuple to integer tuple.\n    '''\n    return tuple([eval(test_str) for test_str in test_str.split(',')])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n    \n    \n    \ndef test_int():\n    '''\n    Test case:\n    >>> tuple_str_int('1,2,3,4,5')\n    (1, 2, 3, 4, 5)\n    '''\n    test_tuple = (1, 2, 3, 4, 5)\n    assert tuple_str_int(test_tuple) == (1, 2, 3, 4, 5)\n    \n    \n    \ndef test_tuple_int():\n    '''\n    Test case:\n    >>> tuple_str_int(('1', '2', '3', '4'))\n    ('1', 2, 3, 4)\n    '''\n    assert tuple_str_int((1, 2, 3, 4)) == (1, 2, 3, 4)\n    \n    \n    \ndef test_tuple_flatten():\n    '''\n    Test case:\n    >>> tuple_str_int(('1,2,3,4'))\n    (1, 2, 3, 4)\n    '''\n    assert tuple_str_int(('1,2,3,4')) == (1, 2, 3, 4)\n    \n    \n    \ndef test_tuple_getitem():\n    '''\n    Test case:\n    >>> tuple_str_int(('1,2,3,4'))\n    (1, 2, 3, 4)\n    '''\n    assert tuple_str_int((1, 2, 3, 4)) == (1, 2, 3, 4)\n    \n    \n    \ndef test_tuple_iter():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    '''\n    assert tuple_str_int((1, 2, 3, 4)) == (1, 2, 3, 4)\n    \n    \n    \ndef test_tuple_len():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    4\n    '''\n    assert tuple_str_len((1, 2, 3, 4)) == 4\n    \n    \n    \ndef test_tuple_append():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    >>> tuple_str_append((1, 2, 3, 4))\n    (1, 2, 3, 4, 5)\n    '''\n    assert tuple_str_append((1, 2, 3, 4)) == (1, 2, 3, 4, 5)\n    \n    \n    \ndef test_tuple_extend():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    >>> tuple_str_extend((1, 2, 3, 4))\n    (1, 2, 3, 4, 5)\n    '''\n    assert tuple_str_extend((1, 2, 3, 4)) == (1, 2, 3, 4, 5)\n    \n    \n    \ndef test_tuple_insert():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    >>> tuple_str_insert((1, 2, 3, 4), (3, 4, 5))\n    (1, 2, 3, 4, 5)\n    '''\n    assert tuple_str_insert((1, 2, 3, 4), (3, 4, 5)) == (1, 2, 3, 4, 5)\n    \n    \n    \ndef test_tuple_pop():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    >>> tuple_pop((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    '''\n    assert tuple_pop((1, 2, 3, 4)) == (1, 2, 3, 4)\n    \n    \n    \ndef test_tuple_remove():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    >>> tuple_remove((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    '''\n    assert tuple_remove((1, 2, 3, 4)) == (1, 2, 3, 4)\n    \n    \n    \ndef test_tuple_reverse():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    (3, 4, 5, 1)\n    >>> tuple_reverse((3, 4, 5, 1))\n    (5, 4, 3, 1)\n    '''\n    assert tuple_reverse((3, 4, 5, 1)) == (5, 4, 3, 1)\n    \n    \n    \ndef test_tuple_steal():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    >>> tuple_steal((1, 2, 3, 4))\n    (1, 2, 3, 4, 5)\n    '''\n    assert tuple_steal((1, 2, 3, 4)) == (1, 2, 3, 4, 5)\n    \n    \n    \ndef test_tuple_slice():\n    '''\n    Test case:\n    >>> tuple_str_int((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    >>> tuple_slice((1, 2, 3, 4), start=(1, 2, 3))\n    (1, 2, 3, 4)\n    '''\n    assert tuple_slice((1, 2, 3, 4), start=(1, 2, 3)) == (1, 2, 3, 4)\n    \n    \n    \ndef test_tuple_str_full():\n    '''\n    Test case:\n    >>> tuple_str_full((1, 2, 3, 4))\n    '1 2 3 4'\n    '''\n    assert tuple_str_full((1, 2, 3, 4)) == '1 2 3 4'\n    \n    \n    \ndef test_tuple_str_indices():\n    '''\n    Test case:\n    >>> tuple_str_full((1, 2, 3, 4))\n    '1 2 3 4'\n    >>> tuple_str_indices((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    '''\n    assert tuple_str_indices((1, 2, 3, 4)) == (1, 2, 3, 4)\n    \n    \n    \ndef test_tuple_str_map():\n    '''\n    Test case:\n    >>> tuple_str_full((1, 2, 3, 4))\n    '1 2 3 4'\n    >>> tuple_str_map((1, 2, 3, 4))\n    (1, 2, 3, 4)\n    '''\n    assert tuple_str_map((1, 2, 3, 4)) == (1, 2, 3, 4)\n    \n    \n    \ndef test_tuple_str_reduce():\n    '''\n    Test case:\n    >>> tuple_str_full((1, 2, 3, 4))\n    '1 2 3 4'\n    >>> tuple_str_reduce((1, 2, 3, 4))\n    1\n    '''\n    assert tuple_str_reduce((1, 2, 3, 4)) == 1\n    \n    \n    \ndef test_tuple_str_to_str():\n    '''\n    Test case:\n    >>> tuple_str_full((1, 2, 3, 4))\n    '1 2 3 4'\n    >>> tuple_str_to_str((1, 2, 3, 4))\n    '1 2 3 4'\n    '''\n    assert tuple_str_to_str((1, 2, 3, 4)) == '1 2 3 4'\n    \n    \n    \ndef test_tuple_str_upper():\n    '''\n    Test case:\n    >>> tuple_str_full((1, 2, 3, 4))\n    '1 2 3 4'\n    >>> tuple_str_upper(("
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int,test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_int = ()\n    for x in test_str:\n        test_int = test_int + (int(x),)\n    return test_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if len(test_str) == 0:\n        return 0\n    elif len(test_str) > 1:\n        return int(test_str)\n    else:\n        return 0\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_list = list(map(int, test_str.split(',')))\n        if len(test_list) == 0:\n            return 0\n        test_list = tuple(test_list)\n        return test_list\n    except ValueError:\n        return 0\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return (int(x) for x in test_str)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if a[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # if x is not in the list\n    if x not in a:\n        # if x is in the list\n        # we insert it and return the index\n        a.append(x)\n        return a.index(x)\n    else:\n        # if x is in the list\n        # we do not need to insert it, just return the index\n        return 0\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x == a[0]:\n        return a[0]\n    elif x > a[0]:\n        i = bisect.bisect_left(a,x)\n        return a[i]\n    else:\n        return a[-1]\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a):\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    i = bisect.bisect_right(a, x)\n    if i < l:\n        return i\n    else:\n        return l\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return a[l]\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    return i - 1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    # Build a regex for the string to match\n    regex = re.compile(r'(?<=\\b)\\w+(?=\\w)')\n    # Split the string into a list of words\n    words = regex.split(text)\n    # Iterate through the list and match\n    for word in words:\n        if word[0] == 'a' and len(word) > 2:\n            if word[1:3] == 'b':\n                return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '(?:a|b)3(?=\\s)'\n    text = re.sub(pattern, '', text)\n    pattern = '(?:b|c|d)3(?=\\s)'\n    text = re.sub(pattern, '', text)\n    pattern = '(?:c|d)3(?=\\s)'\n    text = re.sub(pattern, '', text)\n    pattern = '(?:d|e)3(?=\\s)'\n    text = re.sub(pattern, '', text)\n    pattern = '(?:e|f)3(?=\\s)'\n    text = re.sub(pattern, '', text)\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(\\d+)(b(\\d+))')\n    match = pattern.search(text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #for each character\n    for i in text:\n        #if this is a letter, then if the previous character is a letter, then it must be a 3\n        if i.isalpha():\n            if i.isupper():\n                if i.islower():\n                    if text.count(i) == 3:\n                        return i\n        #if this is a number, then it must be a 3\n        elif i.isdigit():\n            if text.count(i) == 3:\n                return i\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Case:\n    # Case 1:\n    #\n    # A, B\n    #\n    # A, B, C\n    #\n    # A, B, C, D\n    #\n    # You need to return False because a is not preceded by three.\n    #\n    # Case 2:\n    #\n    # A, B, C\n    #\n    # A, B, C, D\n    #\n    # A, B, C, D, E\n    #\n    # You need to return True because three is followed by a.\n    #\n    # CASE 3:\n    #\n    # A, B, C\n    #\n    # A, B, C, D\n    #\n    # A, B, C, D, E\n    #\n    # You need to return False because three is followed by a.\n    #\n    # Case 4:\n    #\n    # A, B, C\n    #\n    # A, B, C, D\n    #\n    # A, B, C, D, E\n    #\n    # You need to return False because three is not followed by any character.\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    search_obj = re.search(\"(\\w)(\\s*a\\s*)(\\s*b\\s*)(\\s*).*\",text,flags=re.IGNORECASE)\n    if search_obj:\n        return search_obj.group(2)\n    else:\n        return \"\"\ndef test(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    search_obj = re.search(\"(\\w)(\\s*a\\s*)(\\s*b\\s*)(\\s*)(\\s*).*\",text,flags=re.IGNORECASE)\n    if search_obj:\n        return search_obj.group(3)\n    else:\n        return \"\"\ndef test_3(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    search_obj = re.search(\"(\\w)(\\s*a\\s*)(\\s*b\\s*)(\\s*)(\\s*).*\",text,flags=re.IGNORECASE)\n    if search_obj:\n        return search_obj.group(4)\n    else:\n        return \"\"\ndef test_4(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    search_obj = re.search(\"(\\w)(\\s*a\\s*)(\\s*b\\s*)(\\s*)(\\s*)(\\s*)(\\s*).*\",text,flags=re.IGNORECASE)\n    if search_obj:\n        return search_obj.group(5)\n    else:\n        return \"\"\ndef test_5(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    search_obj = re.search(\"(\\w)(\\s*a\\s*)(\\s*b\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*).*\",text,flags=re.IGNORECASE)\n    if search_obj:\n        return search_obj.group(6)\n    else:\n        return \"\"\ndef test_6(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    search_obj = re.search(\"(\\w)(\\s*a\\s*)(\\s*b\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s*)(\\s"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b|c|d)?'\n    return re.search(pattern, text) is not None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.match(\"a\\w+b\", text)\n    print(match)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # empty string or \" \" are not considered as tokens\n    if not text:\n        return False\n    # the given string does not start with a 'a' or a 'b'\n    if not text[0] in [\"a\",\"b\"] :\n        return False\n    # remove the leading or trailing whitespace\n    text = text.strip()\n    # search for 'a' or 'b'\n    pattern = re.compile(\"[a-b]{3}\")\n    match = pattern.search(text)\n    # if no match return False\n    if match == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # First make a regular expression to detect a triple of whitespace (whitespaces between items)\n    # We'll use this regular expression to detect a triple of whitespace.\n    s_whitespace = re.compile(\"(?<=[^0-9a-zA-Z_])[ \\t]+\")\n    # Same for the \"end\" marker\n    s_whitespace_end = re.compile(\"(\\n\\n)|(\\n)|(\\r\\n)|(\\r)|(\\n)|(\\t))\")\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result = tuple(test_str)\n    result = tuple(result)\n    return result\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result = ()\n    for i in test_str:\n        result += (i,)\n    return result\n    \n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = tuple(test_list)\n    new_tuple = tuple(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    # Part 1: Write your own function here...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    new_tuple = ()\n    for i in test_list:\n        new_tuple += (i,)\n    return new_tuple\n    \n    # Part 2: Write your own function here...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    return new_tuple\n    \n    # Part 3: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    return tuple(test_list)\n    \n    # Part 4: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 5: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 6: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 7: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 8: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 9: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 10: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 11: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 12: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 13: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 14: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 15: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 16: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 17: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 18: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 19: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 20: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 21: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 22: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 23: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 24: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 25: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 26: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 27: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 28: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 29: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 30: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 31: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 32: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 33: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 34: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 35: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 36: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 37: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 38: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 39: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 40: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 41: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 42: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 43: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 44: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 45: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 46: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 47: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 48: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 49: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 50: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 51: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 52: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 53: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 54: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 55: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 56: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 57: Try to use the tuple() constructor...\n    #raise NotImplementedError('Subclass of tuple is not implemented')\n    \n    # Part 58: Try to use the tuple() constructor...\n    "
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_list == None or test_str == None:\n        return None\n    tuple_list = list(test_list)\n    # write your code here\n    if test_str == ']':\n        return tuple(tuple_list)\n    else:\n        tuple_list.append(test_str)\n        return tuple(tuple_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(eval, test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # test_list = ['ab','cd','ef','gh']\n    # test_str = 'abcdefgh'\n    tuple_list = []\n    for i in range(len(test_list)):\n        if i == 0 or test_list[i]!= test_list[i - 1]:\n            tuple_list.append(test_list[i])\n    return tuple_list, test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple()\n    list_split = test_list.split(\",\")\n    for i in range(len(list_split)):\n        list_split[i] = list_split[i].strip().split(\":\")\n        new_tuple += list_split[i]\n    return tuple(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_str, tuple(test_list)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i]%2==0):\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even.append(nums[i])\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for i in range(len(nums)):\n        if i%2==0:\n            evens.append(nums[i])\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            evens.append(nums[i])\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_position = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_position += 1\n    return even_position\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if not nums:\n        return False\n    for i in range(0,len(nums),2):\n        if nums[i]%2==0:\n            if nums[i+1]%2==0:\n                return True\n    return False\ndef find_even_index(nums):\n    '''\n    Write a python function to find the even index of a given list.\n    '''\n    i=0\n    for x in nums:\n        if x%2==0:\n            i+=1\n        else:\n            break\n    if i%2!=0:\n        print(i)\n    else:\n        print(0)\n    return i\ndef main():\n    # print(find_even_index([1,2,3,4,5,6,7,8,9,10]))\n    print(even_position([1,2,3,4,5,6,7,8,9,10]))\n    # print(find_even_index([1,2,3,4,5,6,7,8,9,10]))\n    # print(find_even_index([1,2,3,4,5,6,7,8,9,10]))\n    # print(find_even_index([1,2,3,4,5,6,7,8,9,10]))\n    # print(find_even_index([1,2,3,4,5,6,7,8,9,10]))\n    # print(find_even_index([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Find the value for even index of nums\n    for idx in range(0, len(nums), 2):\n        if idx % 2 == 0:\n            if nums[idx] % 2 == 0:\n                return True\n    return False\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = (tuple(test_tup))\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.pop(0)\n    test_tup.pop(-1)\n    test_tup = tuple(test_tup)\n    print(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: not x[1], test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == type(()):\n        new_tup = tuple(test_tup)\n        return new_tup\n    else:\n        print(\"Invalid Input\")\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove(test):\n        # remove first element\n        if test[0] == ():\n            return test[1:]\n        # remove second element\n        elif test[1] == ():\n            return test[:1]\n        # return a tuple of two elements\n        elif test[0] == test[1]:\n            return test[2:]\n        # return tuple of two elements as a list\n        elif type(test[0]) == list:\n            return test[:1] + remove(test[1:])\n        # return tuple of two elements as a single element list\n        elif type(test[0]) == tuple:\n            return remove(test[1:]) + remove(test[2:])\n        else:\n            return (test[:1], test[1:]) + test[2:]\n    # remove first element from a tuple\n    # remove second element from a tuple\n    # return a tuple\n    return tuple(remove(test) for test in test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for x in test_tup:\n        if type(x) == list:\n            new_list += x\n        else:\n            new_list += [x]\n    return new_list\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    t = test_tup\n    #Create empty dictionary to store result\n    result = {}\n    #Create empty list to store result\n    t2 = []\n    #Loop through given tuple\n    for i in t:\n        #If element is a tuple, remove the tuple and add to result\n        if type(i) is tuple:\n            result.update(i)\n            t2.append(i)\n        #Else add element to list\n        else:\n            t2.append(i)\n    #Return the tuple with elements removed from it\n    return t2\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    output_tuple = []\n    for i in test_tup:\n        if i not in output_tuple:\n            output_tuple.append(i)\n    return output_tuple\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(tup for tup in test_tup if tup is not None)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(None, test_tup)"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if len(input_list) == 0:\n        return 0\n    else:\n        n = len(input_list)\n        i = 1\n        for j in range(n):\n            if input_list[j] == 1:\n                i += 1\n        return i\ndef print_lists(list1): \n    '''\n    Write a python function that prints the elements in a given list.\n    '''\n    if len(list1) == 0:\n        print('Empty List')\n    else:\n        i = 0\n        for j in list1:\n            i = i + 1\n            if i == len(list1):\n                print(list1[i - 1])\n            else:\n                print(list1[i - 1], end ='')\ndef test():\n    '''\n    Write a python function that tests your code.\n    '''\n    x = print_lists([1, 2, 3])\n    y = count_list([1, 2, 3])\n    z = print_lists([1, 2, 3, 4, 5, 6, 7])\n    print(x)\n    print(y)\n    print(z)\n    print(z == y)\n    print('Done')\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Write your code here.\n    \n    count = 0\n    for i in range(len(input_list)):\n        for j in range(len(input_list)):\n            if input_list[i] == input_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Python 2.7\n    # @param input_list the list\n    # @return count the number of lists\n    # @throws KeyError is the list does not exist\n    \n    \n    \n    \n    return len(input_list"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if len(input_list) == 1:\n        return 1\n    elif len(input_list) == 2:\n        return 2\n    else:\n        return 3 * count_list(input_list[0]) + count_list(input_list[1])\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output = {}\n    for x in input_list:\n        if type(x) == list:\n            for y in x:\n                if y in output:\n                    output[y] += 1\n                else:\n                    output[y] = 1\n            print(output)\n    print(output)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output = 0\n    for l in input_list:\n        if isinstance(l, list):\n            output += len(l)\n    return output\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in range(len(input_list)):\n        if type(input_list[i])==list:\n            count+=1\n    print(count)"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) == list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = list(input_list[i])\n        print(f'Number of list: {i + 1}')\n        print(input_list[i])\n    return input_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    i = 0\n    while i < len(input_list):\n        print(len(input_list[i]))\n        i+=1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return None\n    if len(arr)==1:\n        return arr[0]\n    if arr[0]==x:\n        return len(arr)-1\n    return last(arr[1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if array is empty\n    if len(arr)==0:\n        return -1\n    # if x is in the head\n    if x in arr:\n        return arr.index(x)\n    # if x is in the tail\n    if x not in arr[::-1]:\n        return arr.index(x)\n    # if x is not in the head or tail\n    return last(arr[::-1],x)\n    \ndef find_last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if array is empty\n    if len(arr)==0:\n        return -1\n    # if x is in the head\n    if x in arr:\n        return arr.index(x)\n    # if x is in the tail\n    if x not in arr[::-1]:\n        return arr.index(x)\n    # if x is not in the head or tail\n    return find_last(arr[::-1],x)\n    \ndef find_last_index(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if array is empty\n    if len(arr)==0:\n        return -1\n    # if x is in the head\n    if x in arr:\n        return arr.index(x)\n    # if x is in the tail\n    if x not in arr[::-1]:\n        return arr.index(x)\n    # if x is not in the head or tail\n    return find_last_index(arr[::-1],x)\n    \ndef remove(arr,x):\n    '''\n    Write a python function to remove an element from a sorted array.\n    '''\n    # if array is empty\n    if len(arr)==0:\n        return arr\n    # if x is in the head\n    if x in arr:\n        return arr.pop(arr.index(x))\n    # if x is in the tail\n    if x not in arr[::-1]:\n        return arr.pop(arr.index(x))\n    # if x is not in the head or tail\n    return arr\n    \ndef quick_sort(arr):\n    '''\n    Write a python function to sort a sorted array of numbers.\n    '''\n    # if array is empty\n    if len(arr)==0:\n        return arr\n    # if x is in the head\n    if arr[0]<arr[1]:\n        return arr[0:1]\n    # if x is in the tail\n    if arr[-1]>arr[-2]:\n        return arr[::-1]\n    # if x is not in the head or tail\n    return quick_sort(arr[1:])+[arr[0]]+quick_sort(arr[1:])\n    \ndef count(arr,x):\n    '''\n    Write a python function to count occurrences of x in a sorted array.\n    '''\n    # if array is empty\n    if len(arr)==0:\n        return 0\n    # if x is in the head\n    if arr[0]==x:\n        return 1\n    # if x is in the tail\n    if arr[-1]==x:\n        return len(arr)\n    # if x is not in the head or tail\n    return count(arr[1:],x)+count(arr[1:],x)+1\n    \ndef find(arr,x):\n    '''\n    Write a python function to return the index of the first occurrence of x in a sorted array.\n    '''\n    # if array is empty\n    if len(arr)==0:\n        return -1\n    # if x is in the head\n    if arr[0]==x:\n        return 0\n    # if x is in the tail\n    if arr[-1]==x:\n        return len(arr)-1\n    # if x is not in the head or tail\n    return find(arr[1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    index = len(arr)-1\n    while index >= 0 and arr[index] > x:\n        index -= 1\n    return index\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x==arr[len(arr)-1]:\n        return len(arr)-1\n    else:\n        return len(arr)-1 if arr[len(arr)-1]<x else len(arr)-1-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # use recursive approach\n    # recursive case\n    if arr[0] == x:\n        return 0\n    if arr[len(arr)-1] == x:\n        return len(arr)-1\n    \n    # iterate through array and find the last position\n    for i in range(len(arr)-1):\n        if arr[i] == x:\n            return i\n            \n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0 or arr[0]==x:\n        return 0\n    return last(arr[1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        \n        mid = (low + high) // 2\n        \n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return low\n    \n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.find(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    \n    while(left <= right):\n        mid = (left + right) //2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid -1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left=0\n    right=len(arr)-1\n    while(left<=right):\n        mid = (left + right)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            right = mid - 1\n        else:\n            left = mid + 1\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_starta_end = re.search('(a)(b)',text)\n    print(text_starta_end.group(2))\n    return text_starta_end.group(2)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    text = re.sub(r'a+', 'a', text)\n    text = re.sub(r'b+', 'b', text)\n    text = re.sub(r'\\bb', 'b', text)\n    text = re.sub(r'\\b\\w+', '', text)\n    text = re.sub(r'\\w+', '', text)\n    text = re.sub(r'\\W+', '', text)\n    \n    return text\n    \ndef text_starta_endb_ref(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    text = re.sub(r'a+', 'a', text)\n    text = re.sub(r'b+', 'b', text)\n    text = re.sub(r'\\bb', 'b', text)\n    text = re.sub(r'\\b\\w+', '', text)\n    text = re.sub(r'\\w+', '', text)\n    text = re.sub(r'\\W+', '', text)\n    \n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    def pattern_starta_endb(text):\n        \"\"\"\n        Initial pattern of string:\n        >>> pattern_starta_endb('Hello')\n        ('Hello', 'b')\n        \"\"\"\n        # pattern of string\n        pattern = r'[a-zA-Z]+\\s*[a-zA-Z]+\\s*'\n        match = re.search(pattern, text)\n        if match:\n            print('found start a end b')\n            starta_endb = match.group()\n            return starta_endb\n        else:\n            print('no start a end b')\n            return None\n    \n    starta_endb = pattern_starta_endb(text)\n    if starta_endb:\n        print(starta_endb)\n        return starta_endb\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a(\\w+)b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # preprocessing\n    text = text.strip()\n    if 'a' in text:\n        pattern = re.compile(r'a\\s+\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+')\n        return pattern.search(text)\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a([^\\s\\w]+b)')\n    return pattern.search(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # pass\n    if re.search('a[b]', text):\n        print(\"Found\")\n        pass\n    else:\n        print(\"Did not find\")\n        pass\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # find all the 'a's in text\n    a_num = re.findall('[a-z]', text)\n    # find all the 'b's in text\n    b_num = re.findall('[b-z]', text)\n    # combine them\n    print(a_num + b_num)\n    # if a is in text, add it to a_num\n    if a_num:\n        a_num[0] = a_num[0] + 'a'\n    # if a is in text, add it to b_num\n    if a_num:\n        a_num[0] = a_num[0] + 'b'\n    # if b is in text, add it to a_num\n    if b_num:\n        b_num[0] = b_num[0] + 'a'\n    # if b is in text, add it to b_num\n    if b_num:\n        b_num[0] = b_num[0] + 'b'\n    # return the text with a and b\n    return text +'' + a_num[0] + b_num[0]\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(\"(?i)(?<=a )\\b\\w+\\b\",text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #string to match\n    text_to_match = '''\n    a\n    b\n    '''\n    # pattern to match\n    p = re.compile(r'a\\b')\n    # matches\n    matches = p.finditer(text_to_match)\n    print(matches)\n    # matches\n    # print(matches)\n    # matches\n    for match in matches:\n        print(match)\n        print(match.start())\n        print(match.end())\n        print(match.group())\n        # match.start() is the position of the first occurrence of 'a'. \n        #match.end() is the position of the last occurrence of 'a'\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    dict_sum = 0\n    for key, value in dict.items():\n        dict_sum += value\n    return dict_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.keys():\n        sum = sum + dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # TODO: Write your code here\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total=0\n    for key in dict:\n        total+= dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for k,v in dict.items():\n        sum+=v\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(n for n in n if n % 2 == 1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd = 0\n    for i in range(n): \n        if i % 2!= 0: \n            odd = odd + i \n    return odd\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    \n    if (n <= 0):\n        print('Invalid input!')\n        return\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n + sum(filter(lambda x: x % 2 == 1, range(n+1))) \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    i = 0\n    result = 0\n    while(i < n):\n        if i % 2 == 1:\n            result += i\n        i += 1\n    return result\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    s = 0\n    while l <= r:\n        if l%2 == 1:\n            s += l\n        l += 1\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1): \n        if i % 2!= 0: \n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total = total + i\n    return total\n    \nprint(sum_odd(100))\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2!= 0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n==0):\n        return 0\n    if (n==1):\n        return 1\n    if (n%2==0):\n        return sum_odd(n//2) + n%2\n    return sum_odd(n-1) + n%2\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # If arr is empty return 0\n    if len(arr) == 0:\n        return 0\n    # if arr is not empty\n    else:\n        # initialize sum array\n        sum = 0\n        # for every element in the array\n        for i in range(len(arr)):\n            # for every element in the array\n            for j in range(i, len(arr)):\n                # if the current element equals 0\n                if arr[i] == arr[j]:\n                    # add to the sum array\n                    sum += arr[i]\n        return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0]+arr[1]\n    else:\n        arr.sort()\n        print(f'SUM = {arr[-1]+arr[-2]+arr[-3]}')\n        return sum(arr[-4:])\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    sum = 0\n    for ele in arr:\n        sum += ele\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    def _sum_(arr):  \n        '''\n        Use sum() to get the sum of all the elements in the array\n        '''\n        return sum(arr)\n    return _sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # your code goes here\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n % (2 ** d) == 0:\n        return n\n    else:\n        return n - (2 ** d) + (2 ** d)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & (((1 << d)-1) )\n    l = n>>d&1;\n    l = (l<<d) | (l>>(d-1))\n    l = (l<<(d-1)) & (((1 << d)-1) )\n    l = l|n\n    return l\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    x = n & 0xffffffff\n    i = 1\n    while i <= d:\n        x = (((x << 24) + (x >> 24)) & 0xffffffff) | ((x >> 56) & 0xffffffff)\n        i += 1\n    return x\n    \ndef main():\n    '''\n    This program will take an integer from the user and print it in binary format.\n    '''\n    n = int(input('Enter a number : '))\n    print('The binary representation of the number : ',end='')\n    print(bin(n)[2:].zfill(32),end='')\n    d = int(input('Enter a number of d bits : '))\n    print('The binary representation of the number : ',end='')\n    print(bin(n)[2:].zfill(32),end='')\n    print(left_rotate(n,d))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp=n\n    n=(n>>d)&0xffffffff\n    n=(n<<d)&0xffffffff\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n < 2**32:\n        return n\n    \n    n = n & 1\n    n += d\n    \n    n = n >> 1\n    n = (n << 1) | 0\n    n = n | 1\n    return n\n    "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    b=bin(n)\n    if d==0:\n        return 0\n    if d==1:\n        return 1\n    if d==2:\n        return 0\n    if d==3:\n        return 1\n    if d==4:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==5:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==6:\n        return 1\n    if d==7:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==8:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==9:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==10:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==11:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==12:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==13:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==14:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==15:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==16:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==17:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==18:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==19:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==20:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==21:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==22:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==23:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==24:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==25:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==26:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==27:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==28:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==29:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==30:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==31:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==32:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==33:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==34:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==35:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==36:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==37:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==38:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==39:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==40:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==41:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==42:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==43:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==44:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==45:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==46:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==47:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==48:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==49:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==50:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==51:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==52:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==53:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==54:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==55:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==56:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==57:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==58:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==59:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==60:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==61:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==62:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==63:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==64:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==65:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==66:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==67:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==68:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==69:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==70:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==71:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==72:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==73:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==74:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==75:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==76:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==77:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==78:\n        if n&1:\n            return 1\n        else:\n            return 0\n    if d==79:\n        if n&1:\n        "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n<<d\n    n |= (n>>31) & 0xffffffff\n    n |= (n>>18) & 0xffffffff\n    n |= (n>>12) & 0xffffffff\n    n |= (n>>6) & 0xffffffff\n    n |= (n>>4) & 0xffffffff\n    n |= (n>>2) & 0xffffffff\n    n |= (n>>1) & 0xffffffff\n    n |= n & 0xffffffff\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a = bin(n).replace('0b','')\n    a = a[::-1]\n    a = int(a,2)\n    b = a>>(d>>2)\n    c = a&(0xffffffff)\n    d = (c>>d)&(0xffffffff)\n    return d|(b<<d)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Write your code here\n    temp=n\n    n=temp>>d\n    temp=temp<<(d&(-d))\n    n=n<<(d&(-d))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #your code here\n    l=n%32\n    r=n%32\n    temp=n\n    if(d==1):\n        temp=temp^l\n        n=n^l\n    if(d==2):\n        temp=temp^l\n        n=n^(l*l)\n    if(d==3):\n        temp=temp^l\n        n=n^(l*(l+1))\n    if(d==4):\n        temp=temp^l\n        n=n^((l+1)*(l+2))\n    if(d==5):\n        temp=temp^l\n        n=n^((l+2)*(l+3))\n    if(d==6):\n        temp=temp^l\n        n=n^((l+3)*(l+4))\n    if(d==7):\n        temp=temp^l\n        n=n^((l+4)*(l+5))\n    if(d==8):\n        temp=temp^l\n        n=n^((l+5)*(l+6))\n    if(d==9):\n        temp=temp^l\n        n=n^((l+6)*(l+7))\n    if(d==10):\n        temp=temp^l\n        n=n^((l+7)*(l+8))\n    if(d==11):\n        temp=temp^l\n        n=n^((l+8)*(l+9))\n    if(d==12):\n        temp=temp^l\n        n=n^((l+9)*(l+10))\n    if(d==13):\n        temp=temp^l\n        n=n^((l+10)*(l+11))\n    if(d==14):\n        temp=temp^l\n        n=n^((l+11)*(l+12))\n    if(d==15):\n        temp=temp^l\n        n=n^((l+12)*(l+13))\n    if(d==16):\n        temp=temp^l\n        n=n^((l+13)*(l+14))\n    if(d==17):\n        temp=temp^l\n        n=n^((l+14)*(l+15))\n    if(d==18):\n        temp=temp^l\n        n=n^((l+15)*(l+16))\n    if(d==19):\n        temp=temp^l\n        n=n^((l+16)*(l+17))\n    if(d==20):\n        temp=temp^l\n        n=n^((l+17)*(l+18))\n    if(d==21):\n        temp=temp^l\n        n=n^((l+18)*(l+19))\n    if(d==22):\n        temp=temp^l\n        n=n^((l+19)*(l+20))\n    if(d==23):\n        temp=temp^l\n        n=n^((l+20)*(l+21))\n    if(d==24):\n        temp=temp^l\n        n=n^((l+21)*(l+22))\n    if(d==25):\n        temp=temp^l\n        n=n^((l+22)*(l+23))\n    if(d==26):\n        temp=temp^l\n        n=n^((l+23)*(l+24))\n    if(d==27):\n        temp=temp^l\n        n=n^((l+24)*(l+25))\n    if(d==28):\n        temp=temp^l\n        n=n^((l+25)*(l+26))\n    if(d==29):\n        temp=temp^l\n        n=n^((l+26)*(l+27))\n    if(d==30):\n        temp=temp^l\n        n=n^((l+27)*(l+28))\n    if(d==31):\n        temp=temp^l\n        n=n^((l+28)*(l+29))\n    if(d==32):\n        temp=temp^l\n        n=n^((l+29)*(l+30))\n    if(d==33):\n        temp=temp^l\n        n=n^((l+30)*(l+31))\n    if(d==34):\n        temp=temp^l\n        n=n^((l+31)*(l+32))\n    if(d==35):\n        temp=temp^l\n        n=n^((l+32)*(l+33))\n    if(d==36):\n        temp=temp^l\n        n=n^((l+33)*(l+34))\n    if(d==37):\n        temp=temp^l\n        n=n^((l+34)*(l+35))\n    if(d==38):\n        temp=temp^l\n        n=n^((l+35)*(l+36))\n    if(d==39):\n        temp=temp^l\n        n=n^((l+36)*(l+37))\n    if(d==40):\n        temp=temp^l\n        n=n^((l+37)*(l+38))\n    if(d==41):\n        temp=temp^l\n        n=n^((l+38)*(l+39))\n    if(d==42):\n        temp=temp^l\n        n=n^((l+39)*(l+40))\n    if(d==43):\n        temp=temp^l\n        n=n^((l+40)*(l+41))\n    if(d==44):\n        temp=temp^l\n        n=n^((l+41)*(l+42))\n    if(d==45):\n        temp=temp^l\n        n=n^((l+42)*(l+43))\n    if(d==46):\n        temp=temp^l\n        n=n^((l+43)*(l+44))\n    if(d==47):\n        temp=temp^l\n        n=n^((l+44)*(l+45))\n    if(d==48):\n        temp=temp^l\n        n=n^((l+45)*(l+46))\n    if(d==49):\n        temp=temp^l\n        n=n^((l+46)*(l+47))\n    if(d==50):\n        temp=temp^l\n        n=n^((l+47)*(l+48))\n    if(d==51):\n        temp=temp^l\n        n=n^((l+48)*(l+49))\n    if(d==52):\n        temp=temp^l\n        n=n^((l+49)*(l+50))\n    if(d==53):\n        temp=temp^l\n        n=n^((l+50)*(l+51))\n    if(d==54):\n        temp=temp^l\n        n=n^((l+51)*(l+52))\n    if(d==55):\n        temp=temp^l\n        n=n^((l+52)*(l+53))\n    if(d==56):\n        temp=temp^l\n        n=n^((l+53)*(l+54))\n    if(d==57):\n        temp=temp^l\n        n=n^((l+54)*(l+55))\n    if(d==58):\n        temp=temp^l\n        n=n^((l+55)*(l+56))\n    if(d==59):\n        temp=temp^l\n        n=n^((l+56)*(l+57))\n    if(d==60):\n        temp=temp^l\n        n=n^((l+57)*(l+58))\n    if(d==61):\n        temp=temp^l\n        n=n^((l+58)*(l+59))\n    if(d==62):\n        temp=temp^l\n        n=n^((l+59)*(l+60))\n    if(d==63):\n        temp=temp^l\n        n=n^((l+60)*(l+61))\n    if(d==64):\n        temp=temp^l\n        n=n^((l+61)*(l+62))\n    if(d==65):\n    "
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    while'' in text:\n        text = text.replace(' ','')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = str(text)\n    return text.replace(' ','')\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern,'', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(' ', '')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # your code goes here\n    return text.replace(' ', '')\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # your code goes here\n    for char in text:\n        if char!='':\n            return text.replace(char, '')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\ndef split_words(text):\n    '''\n    Write a function to split a string into a list of words.\n    '''\n    return re.split(r'\\s+', text)\ndef remove_punc(text):\n    '''\n    Write a function to remove punctuation from a text.\n    '''\n    text = text.translate(remove_all_spaces)\n    text = remove_punc_from_list(text)\n    return text\ndef remove_punc_from_list(text):\n    '''\n    Write a function to remove punctuation from a list of words.\n    '''\n    punc_list = ['.', ',', ':', ';', ')', '(', '!', '?', '!', ';', ')', '(', ')', '!', ';', ')', ':', ';', ')', ',']\n    return [word for word in text if word not in punc_list]\ndef remove_hyphen(text):\n    '''\n    Write a function to remove hyphens from a string.\n    '''\n    return text.replace(\"-\", \"\")\ndef remove_numbers(text):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef to_lower_case(text):\n    '''\n    Write a function to convert a string to lower case.\n    '''\n    text = text.lower()\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function to remove stopwords from a text.\n    '''\n    return re.sub(r'\\b(\\w*[a-z]\\w*)\\b', '', text)\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef remove_multiple_capital_letters(text):\n    '''\n    Write a function to remove multiple capital letters from a string.\n    '''\n    return re.sub(r'([A-Z])(\\s+\\w+)\\b', r'\\2', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return text.translate(remove_all_punctuation_translate)\ndef remove_all_punctuation_translate(match):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return match.group(0).replace('.', '').replace(',', '').replace(';', '').replace('!', '').replace('?', '').replace('!', '').replace(';', '').replace(')', '').replace(')', '').replace('(', '').replace(' ', '')\ndef remove_spaces(text):\n    '''\n    Write a function to remove spaces from a text.\n    '''\n    return re.sub(r'\\s+','', text)\ndef split_characters(text):\n    '''\n    Write a function to split a string into a list of characters.\n    '''\n    return re.split(r'\\s+', text)\ndef remove_stopwords(text):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    return re.sub(r'\\b(\\w*[a-z]\\w*)\\b', '', text)\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef remove_other_special_chars(text):\n    '''\n    Write a function to remove other special characters from a string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef normalize(text):\n    '''\n    Write a function to normalize a string.\n    '''\n    text = remove_stopwords(remove_digits(remove_punctuation(remove_other_special_chars(remove_punctuation_translate(remove_multiple_capital_letters(remove_multiple_punctuation(remove_punctuation_translate(remove_hyphen(remove_numbers(remove_punctuation(remove_punctuation_translate(remove_punctuation_translate(remove_characters(remove_punctuation_translate(remove_punctuation_translate(remove_characters(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate(remove_punctuation_translate"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x) == len(y) == len(z) == 3, \"the number of arrays should be three!\"\n    equal_number = 0\n    for i in x:\n        for j in y:\n            for k in z:\n                if i == j == k:\n                    equal_number += 1\n    return equal_number\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    import math\n    if x==y==z==0:\n        return 0\n    elif x==y or x==z or z==y:\n        return 1\n    elif x>y and x>z and y>z:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z==0:\n        return 0\n    elif x==0 and y==z:\n        return 1\n    elif x==z and y==0:\n        return 2\n    elif x==0 and y==z:\n        return 3\n    elif x==0 and y!=0 and z!=0:\n        return 4\n    else:\n        return 0\n    \n    \n    \ndef main():\n    '''\n    Test the program.\n    '''\n    print(\"Testing the add function...\")\n    print(str(test_add(4,5,6))+\" + \"+str(test_add(4,5,7))+\" = \"+str(test_add(4,5,7)))\n    print(str(test_add(2,5,6))+\" + \"+str(test_add(2,5,7))+\" = \"+str(test_add(2,5,7)))\n    print(str(test_add(0,0,0))+\" + \"+str(test_add(0,0,0))+\" = \"+str(test_add(0,0,0)))\n    print(str(test_add(0,0,0))+\" + \"+str(test_add(0,0,0))+\" = \"+str(test_add(0,0,0)))\n    print(str(test_add(0,0,0))+\" + \"+str(test_add(0,0,0))+\" = \"+str(test_add(0,0,0)))\n    print(str(test_add(0,0,0))+\" + \"+str(test_add(0,0,0))+\" = \"+str(test_add(0,0,0)))\n    \n    print(\"Testing the subtract function...\")\n    print(str(test_subtract(4,5,6))+\" - \"+str(test_subtract(4,5,7))+\" = \"+str(test_subtract(4,5,7)))\n    print(str(test_subtract(2,5,6))+\" - \"+str(test_subtract(2,5,7))+\" = \"+str(test_subtract(2,5,7)))\n    print(str(test_subtract(0,0,0))+\" - \"+str(test_subtract(0,0,0))+\" = \"+str(test_subtract(0,0,0)))\n    print(str(test_subtract(0,0,0))+\" - \"+str(test_subtract(0,0,0))+\" = \"+str(test_subtract(0,0,0)))\n    print(str(test_subtract(0,0,0))+\" - \"+str(test_subtract(0,0,0))+\" = \"+str(test_subtract(0,0,0)))\n    print(str(test_subtract(0,0,0))+\" - \"+str(test_subtract(0,0,0))+\" = \"+str(test_subtract(0,0,0)))\n    \n    print(\"Testing the multiply function...\")\n    print(str(test_multiply(4,5,6))+\" * \"+str(test_multiply(4,5,7))+\" = \"+str(test_multiply(4,5,7)))\n    print(str(test_multiply(2,5,6))+\" * \"+str(test_multiply(2,5,7))+\" = \"+str(test_multiply(2,5,7)))\n    print(str(test_multiply(0,0,0))+\" * \"+str(test_multiply(0,0,0))+\" = \"+str(test_multiply(0,0,0)))\n    print(str(test_multiply(0,0,0))+\" * \"+str(test_multiply(0,0,0))+\" = \"+str(test_multiply(0,0,0)))\n    print(str(test_multiply(0,0,0))+\" * \"+str(test_multiply(0,0,0))+\" = \"+str(test_multiply(0,0,0)))\n    print(str(test_multiply(0,0,0))+\" * \"+str(test_multiply(0,0,0))+\" = \"+str(test_multiply(0,0,0)))\n    \n    print(\"Testing the divide function...\")\n    print(str(test_divide(4,5,6))+\" / \"+str(test_divide(4,5,7))+\" = \"+str(test_divide(4,5,7)))\n    print(str(test_divide(2,5,6))+\" / \"+str(test_divide(2,5,7))+\" = \"+str(test_divide(2,5,7)))\n    print(str(test_divide(0,0,0))+\" / \"+str(test_divide(0,0,0))+\" = \"+str(test_divide(0,0,0)))\n    print(str(test_divide(0,0,0))+\" / \"+str(test_divide(0,0,0))+\" = \"+str(test_divide(0,0,0)))\n    print(str(test_divide(0,0,0))+\" / \"+str(test_divide(0,0,0))+\" = \"+str(test_divide(0,0,0)))\n    \n    print(\"Testing the floor function...\")\n    print(str(test_floor(4,5,6))+\" // \"+str(test_floor(4,5,7))+\" = \"+str(test_floor(4,5,7)))\n    print(str(test_floor(2,5,6))+\" // \"+str(test_floor(2,5,7))+\" = \"+str(test_floor(2,5,7)))\n    print(str(test_floor(0,0,0))+\" // \"+str(test_floor(0,0,0))+\" = \"+str(test_floor(0,0,0)))\n    print(str(test_floor(0,0,0))+\" // \"+str(test_floor(0,0,0))+\" = \"+str(test_floor(0,0,0)))\n    print(str(test_floor(0,0,0))+\" // \"+str(test_floor(0,0,0))+\" = \"+str(test_floor(0,0,0)))\n    \n    print(\"Testing the ceil function...\")\n    print(str(test_ceil(4,5,6))+\" + \"+str(test_ceil(4,5,7))+\" = \"+str(test_ceil(4,5,7)))\n    print(str(test_ceil(2,5,6))+\" + \"+str(test_ceil(2,5,7))+\" = \"+str(test_ceil(2,5,7)))\n    print(str(test_ceil(0,0,0))+\" + \"+str(test_ceil(0,0,0))+\" = \"+str(test_ceil(0,0,0)))\n    print(str(test_ceil(0,0,0))+\" + \"+str(test_ceil(0,0,0))+\" = \"+str(test_ceil(0,0,0)))\n    print(str(test_ceil(0,0,0))+\" + \"+str(test_ceil(0,0,0))+\" = \"+str(test_ceil(0,0,0)))\n    \n    print(\"Testing the modulo function...\")\n    print(str(test_modulo(4,5,6))+\" % \"+str(test_modulo(4,5,7))+\" = \"+str(test_modulo(4,5,7)))\n    print(str(test_modulo(2,5,6))+\" % \"+str(test_modulo(2,5,7))+\" = \"+str(test_modulo(2,5,7)))\n    print(str(test_modulo(0,0,0))+\" "
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            if x[i]==y[j] and x[i]==z[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    numbers=[]\n    for i in range(3):\n        numbers.append(x[i]==y[i]==z[i])\n    return(sum(numbers))"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num = 0\n    for i in x:\n        if i in y:\n            num +=1\n        elif i in z:\n            num +=1\n    return num\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x==y==z, \"Something went wrong\"\n    return \"Good job!\"\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #print(\"Test: Three equal numbers: \",x,y,z)\n    if x == y == z:\n        count = x + y + z\n    elif x == z == y:\n        count = y + z + x\n    elif y == z == x:\n        count = z + y + x\n    else:\n        count = x + z + y\n    #print(\"count: \",count)\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c = 0\n    for i in range(3):\n        if x[i] == y[i] == z[i]:\n            c += 1\n    return c\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    # Sorts the array\n    arr = sorted(arr)\n    # Creates a counter to keep track of how many times the loop is going to run\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # 1. Create the counts array\n    counts = [0 for i in range(len(arr))]\n    # 2. Create the array of the rotated array\n    for i in range(len(arr)):\n        counts[i] = counts[i] + 1\n    # 3. Find the difference between the count and the total array\n    for i in range(len(arr)):\n        counts[i] = counts[i] - arr[i]\n    # 4. Compute the average of the count array\n    total = 0\n    for i in range(len(counts)):\n        total = total + counts[i]\n    return total / len(counts)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        count += arr[i] * (i + 1)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    def find_rotation(arr):\n        rotated_arr = []\n        for i in range(n):\n            rotated_arr.append(arr[i])\n        rotated_arr.reverse()\n        print(rotated_arr)\n        return rotated_arr\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1,len(arr)):\n        while arr[i-1] > arr[i]:\n            count += 1\n            arr[i],arr[i-1] = arr[i-1],arr[i]\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    d = {}\n    for i in range(n):\n        d[arr[i]] = d.get(arr[i], 0) + 1\n    \n    # print(d)\n    \n    r = 0\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         # print(j, d[arr[i]])\n    #         if arr[j] < arr[i]:\n    #             d[arr[i]] = d.get(arr[i], 0) + 1\n    #             # print(arr[i], d[arr[i]])\n    #         else:\n    #             d[arr[j]] = d.get(arr[j], 0) + 1\n    #             # print(arr[i], d[arr[i]])\n    #             # print(arr[j], d[arr[j]])\n    #     r += d[arr[i]] - d[arr[j]]\n    \n    return r\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    N = len(arr)\n    rotations = 0\n    if(N == 1):\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    if len(arr) == 1:\n        return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        raise ValueError (\"Invalid Number\")\n    if n == 0 :\n        return True\n    elif n == 1 :\n        return True\n    elif n % 2 == 0 :\n        return False\n    else :\n        k = 3\n        while(k * k <= n):\n            if n % k == 0 :\n                return False\n            k = k + 2\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == int(n**.5)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 : return True\n    if n % 2 == 0 : return False\n    for i in range(3,int(math.sqrt(n))+1) :\n        if n % i == 0 : return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n==0) :\n        return True\n    elif (n%2==0):\n        return False\n    elif (n==1):\n        return True\n    else:\n        for i in range (3,int(math.sqrt(n)+1)) :\n            if (n%i==0) :\n                return False\n        return True\n        \nprint(is_perfect_square(18))\nprint(is_perfect_square(12))\nprint(is_perfect_square(11))\nprint(is_perfect_square(1))\nprint(is_perfect_square(2))\nprint(is_perfect_square(3))\nprint(is_perfect_square(5)"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n)\n    if (x==1) :\n        return True\n    if (x==2) :\n        return True\n    if (x%2==0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n**(1/2))\n    if n == x :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 :\n        return True\n    else :\n        for i in range(1, int(math.sqrt(n))+1) :\n            if n % i == 0 :\n                return False\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    elif n == 2 or n == 3 :\n        return True\n    elif n % 2 == 0 :\n        return False\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    temp = n\n    check = 0\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            check = 1\n            break\n    return check\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = len(arr)\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == []:\n        return True\n    else:\n        return arr[0] % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even = True\n    for number in arr:\n        if number % 2!= 0:\n            even = False\n    return even \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Take a set of elements and store the products of elements in a variable.\n    set_elements = set(arr)\n    set_prod = set()\n    for i in set_elements:\n        set_prod.add(i * arr[i])\n    \n    # Check if all elements in the set are even numbers.\n    if len(set_prod) == len(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # find the maximum number\n    max_num = max(arr)\n    # find the remainder\n    mod = max_num % 2\n    # if the remainder is 0\n    if mod == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if sum(arr)%2==0: \n        return True\n    else: \n        return False\n        \ndef is_product_even_v2(arr): \n    '''\n    2\n    2\n    1 2\n    2 2\n    1 2\n    '''\n    if sum(arr)%2==0: \n        return True\n    else: \n        return False\n        \ndef is_product_even_v3(arr): \n    '''\n    1 2 1 2 2\n    1 2 1 2 2\n    1 2 1 2 2\n    '''\n    for i in arr: \n        if i!=1 and i!=2:\n            return False\n    return True\n        "
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return arr[0]%2==0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == []:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list=[]\n    for i in lists:\n        sum_list.append(sum(i))\n    \n    return max_sum(sum_list)\n    \n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    for i in range(len(lists)):\n        result.append([sum(lists[i]),i])\n    result.sort(key = lambda x: x[0], reverse = True)\n    return result[0][1]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in range(len(lists)):\n        max_sum.append(max(lists[i]))\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # O(n) to look through the list of lists\n    max_sum_list = []\n    # create a list of 0's\n    zero_list = [0 for _ in range(len(lists))]\n    # add the elements to the max_sum_list\n    for lst in lists:\n        for e in lst:\n            if e!= 0:\n                max_sum_list.append(e)\n    # sort the list in ascending order\n    max_sum_list.sort(reverse=True)\n    # return the max_sum_list\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in lists:\n        for j in i:\n            if j > max_sum[0]:\n                max_sum = [j] + max_sum\n            elif j > max_sum[0]:\n                max_sum = max_sum + [j]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    def get_highest_sum(list):\n        highest_sum = 0\n        for element in list:\n            highest_sum += element\n        return highest_sum\n    \n    return max_sum_list(lists)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = []\n    for i in lists:\n        i = [x for x in i]\n        l.append(max(i))\n    return l\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            lists[i][j] = lists[i][j] + max(lists[i])\n    return lists\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    c = 0\n    #define a start index and end index\n    i, e = 0, 0\n    #searching for each character in given string\n    for j in range(len(test_str)):\n        if(test_str[j].isupper()):\n            c += 1\n            #check if current character is the maximum\n            if(c > c_max):\n                c_max = c\n                i = j\n            #if the current character is the maximum\n            if(c == c_max):\n                e = j\n    return test_str[i:e+1]\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    temp = []\n    for i in test_str:\n        if i.isupper():\n            temp.append(i)\n    if len(temp) == 0:\n        return 0\n    else:\n        return max(temp)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # 1. add the whole string and use a for loop\n    # 2. add spaces to the front of the result\n    # 3. split the string into a list\n    # 4. use list comprehension to find the maximum run\n    # 5. write your code here\n    # validate the input and store the result in a variable\n    if len(test_str) < 2:\n        raise ValueError(\"Must be at least two characters\")\n    # store the result in a list\n    result = [0] * len(test_str)\n    for i in range(len(test_str)):\n        result[i] = max(result[i], test_str[i].isupper())\n    # print the list\n    print(result)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if(char.isupper()):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    alphabet_list = set(string.ascii_uppercase)\n    total_alphabet = len(alphabet_list)\n    l_alphabet_list = []\n    for i in range(0,total_alphabet):\n        l_alphabet_list.append(alphabet_list.pop())\n    print(l_alphabet_list)\n    max_run_list = []\n    for i in range(0,len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] not in l_alphabet_list:\n                max_run_list.append(test_str[i])\n    return ''.join(max_run_list)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    chars = ''.join(sorted(test_str))\n    if chars == \"\":\n        return 0\n    return max(map(max_run_uppercase, chars.split()))\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    m = 0\n    for x in test_str:\n        if x.isupper():\n            m = m + 1\n    return m\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_run = 0\n    lower_run = 0\n    for char in test_str:\n        if char.isupper():\n            upper_run += 1\n        else:\n            lower_run += 1\n    return upper_run, lower_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_upper_str = ''\n    count_upper = 0\n    count_digit = 0\n    count_lower = 0\n    for char in test_str:\n        if char.isupper():\n            count_upper += 1\n        elif char.islower():\n            count_lower += 1\n        elif char.isnumeric():\n            count_digit += 1\n        else:\n            pass\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upper = 0\n    for char in test_str:\n        if char.isupper():\n            max_upper = max(max_upper, len(char))\n    return max_upper\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return (nums[nums.index(nums[0])-1])\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    mylist = []\n    for item in nums:\n        if item % 2 == 0:\n            mylist.append(item)\n    return mylist[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            odd_nums.append(nums[i])\n    return odd_nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # create a while loop that is used to check if the odd number is present in the list\n    # input: nums\n    # return: the index of the first odd number in the list\n    i = 0\n    while i < len(nums) and nums[i] % 2!= 0:\n        i += 1\n    return i - 1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n    return False\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_number = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_number = nums[i]\n            break\n    return odd_number\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    result = None\n    start = 0\n    end = len(nums) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if nums[mid] % 2 == 1:\n            result = nums[mid]\n            break\n        elif nums[mid] % 2 == 0:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return result\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_count = 0\n    for num in nums:\n        if num % 2!= 0:\n            odd_count += 1\n    if odd_count % 2 == 1:\n        return nums[odd_count // 2]\n    else:\n        return nums[odd_count // 2 - 1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    start = 0\n    end = len(nums)-1\n    for i in range(start,end):\n        if nums[i]%2 == 1:\n            return nums[i]\n        \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    start = 0\n    end = len(nums)-1\n    for i in range(start,end):\n        if nums[i]%2 == 0:\n            return nums[i]\n        \ndef merge_sort(nums):\n    '''\n    Write a python function to return the elements of nums in sorted order.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    mid = len(nums)//2\n    left = nums[:mid]\n    right = nums[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        if len(test_tup) > K:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        tup_list = test_tup\n        check_K(tup_list, K)\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check = True\n    if len(test_tup) <= K:\n        check = False\n    else:\n        check = True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    N = len(test_tup)\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if test_tup[i][1] == test_tup[j][1]:\n                return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_tup = test_tup\n    check_tup_1 = sorted(check_tup)\n    for i in range(0,K-1):\n        if check_tup_1[i]!= check_tup_1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if len(test_tup) < 2:\n        return False\n    \n    for i in range(len(test_tup) - 1):\n        if test_tup[i][1] < test_tup[i + 1][1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if len(test_tup) == K else False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0].count(K) > 0\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    cnt = 0\n    for i in range(K):\n        if test_tup[i][1] == \"F\":\n            cnt += 1\n    if cnt == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Write your code here.\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                print(test_tup1[i] < test_tup2[i], test_tup1[i], test_tup2[i])\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1 = test_tup1[:]\n    test_tup2 = test_tup2[:]\n    result = False\n    for i in range(0,len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            result = False\n        else:\n            result = True\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup1=tuple(test_tup1)\n    tup2=tuple(test_tup2)\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # code here\n    return test_tup1[0] < test_tup2[0]\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    s1, s2 = 0, 0\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            s2 += 1\n            s1 += test_tup1[i]\n        else:\n            return False\n    return s1 < s2\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    if test_tup1[1] > test_tup2[1]:\n        return False\n    if test_tup1[0] < test_tup2[0]:\n        return False\n    if test_tup1[1] < test_tup2[1]:\n        return False\n    return True\n    \n    "
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    smaller = True\n    for elem1 in test_tup1:\n        if elem1 < test_tup2[0]:\n            smaller = False\n            break\n    return smaller\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(sorted(test_tup1, key = lambda x: x[0]) <= tuple(sorted(test_tup2, key = lambda x: x[0])))\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for index in range(len(test_tup1)):\n        if test_tup2[index] > test_tup1[index]:\n            return False\n    return True\n"
    }
]