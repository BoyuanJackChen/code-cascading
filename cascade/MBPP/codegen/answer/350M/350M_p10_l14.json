[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set()\n    if len(test_tup1)!= len(test_tup2):\n        return \"List lengths must be the same!\"\n    for i in range(len(test_tup1)):\n        shared_elements.add(test_tup1[i])\n    for i in range(len(test_tup2)):\n        shared_elements.add(test_tup2[i])\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    s=set(test_tup1)\n    p=set(test_tup2)\n    if len(s.intersection(p))!=len(s):\n        return len(s.intersection(p))\n    else:\n        return 0\n    \n    \n    \n    \n    \ndef test_functions(tup1,tup2):\n    '''\n    Write a function to find the number of common elements between the given two lists.\n    '''\n    s=set(tup1)\n    p=set(tup2)\n    if len(s.intersection(p))!=len(s):\n        return len(s.intersection(p))\n    else:\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef main():\n    '''\n    Write a function to find the number of common elements between the given two lists.\n    '''\n    \n    \n    \n    \n    \n    \n    \nif __name__ == '__main__':\n    main()\n    "
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # YOUR CODE HERE\n    if type(test_tup1) is not list:\n        return \n    if type(test_tup2) is not list:\n        return\n    if len(test_tup1) == len(test_tup2):\n        return\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    shared_elements = []\n    \n    # to store the shared elements in a list\n    for i in range(0, len(test_tup1)):\n        for j in range(i + 1, len(test_tup1)):\n            if test_tup1[i] == test_tup2[j]:\n                shared_elements.append(test_tup1[i])\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n        elif test_tup2[i] in test_tup1:\n            shared_elements.append(test_tup2[i])\n        else:\n            shared_elements.append(\"None\")\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    from collections import Counter\n    import copy\n    from itertools import chain\n    def count_in_list(in_list):\n        # Returns the count of elements in the list.\n        return len(set(in_list))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Set all shared elements to \"None\"\n    shared = {'name':'', 'age':'', 'college':''}\n    # Loop through the two lists to find the shared elements\n    for element in test_tup1:\n        for element2 in test_tup2:\n            if element == element2:\n                shared['name'] = element\n                shared['age'] = element2\n                shared['college'] = element2\n                break\n    # Return the values of the shared elements\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code here\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        pass\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if type(test_tup1)!= list or type(test_tup2)!= list:\n        print(\"Invalid input data type.\")\n        return\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return n > 1 and n % 2 == 0 and n % 3 == 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        return True\n    \ndef prime_factors(n):\n    '''\n    Write a python function to determine the prime factors of a given number.\n    '''\n    # create a variable to store the number n\n    n = n \n    # create a while loop that keeps running the loop until n is a prime number\n    while n!= 1:\n        if is_not_prime(n):\n            # if n is not prime, don't need to continue the loop\n            break\n        # if n is prime, add 1 to n\n        n += 1\n    # return the prime factors of n\n    return n\n    \ndef divisors(n):\n    '''\n    Create a dictionary with keys as the numbers and values as their factors.\n    '''\n    # create a dictionary with the values as the factors\n    d = {}\n    # loop over the numbers in the range [2, n]\n    for i in range(2, n+1):\n        # if i is not a prime number\n        if not is_not_prime(i):\n            # if i is a prime number\n            # create a list with the factors for i\n            factors = [i]\n            # go through the factors and add to the dictionary\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    factors.append(j)\n            # if the factors are all prime numbers, add them to the dictionary\n            if prime_factors(i) in factors:\n                d[i] = prime_factors(i)\n    # return the dictionary\n    return d\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==0:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        # Note the number of even numbers is even\n        for i in range(3, math.ceil(math.sqrt(n)) + 1, 2):\n            # Note the number of odd numbers is odd\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=0:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #If n is an integer, then return True.\n    if not n:\n        return True\n    if n < 2:\n        return False\n    #Find the largest prime factor of n.\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return n\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return 0\n        i += 2\n    return 1\ndef is_prime(n):\n    '''\n    A number is a prime if its only divisors are 1, 2, and 3.\n    A number n is considered to be prime if the only divisors are 1, 2, and 3.\n    '''\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    \n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n % i == 0:\n            return False\n    return True\ndef num_check(n):\n    '''\n    Check if a number is prime or not.\n    '''\n    if is_prime(n):\n        return str(n) +'is prime.'\n    else:\n        return 'The number is not prime.'\ndef find_large_prime(n):\n    '''\n    Find a number whose value is greater than the number of its digits.\n    '''\n    if is_prime(n):\n        return n\n    num = []\n    # if there are digits, use it as a pivot to avoid division by 0.\n    if len(str(n)) > 1:\n        for i in range(len(str(n))):\n            # if this number is divided by 3, add it to num\n            if i < len(str(n))-1:\n                if n % 3 == 0:\n                    num.append(n)\n                # if this number is divided by 5, add it to num\n            if n % 5 == 0:\n                num.append(n)\n            # if this number is divided by 7, add it to num\n            if n % 7 == 0:\n                num.append(n)\n    # if there are digits, divide by them as a pivot, to avoid division by 0.\n    else:\n        for i in range(len(str(n))):\n            # if this number is divided by 3, add it to num\n            if i < len(str(n))-1:\n                if n % 3 == 0:\n                    num.append(n)\n            # if this number is divided by 5, add it to num\n            if i < len(str(n))-1:\n                if n % 5 == 0:\n                    num.append(n)\n            # if this number is divided by 7, add it to num\n            if i < len(str(n))-1:\n                if n % 7 == 0:\n                    num.append(n)\n    # if there are no divisors, return None\n    if len(num) == 0:\n        return None\n    else:\n        # return the largest divisor.\n        return find_large_prime(max(num))\ndef find_prime(n):\n    '''\n    Find a number whose value is greater than the number of its digits.\n    '''\n    if is_prime(n):\n        return str(n) +'is prime.'\n    else:\n        # if there are digits, divide by them as a pivot, to avoid division by 0.\n        if len(str(n)) > 1:\n            for i in range(len(str(n))):\n                # if this number is divided by 3, add it to num\n                if i < len(str(n))-1:\n                    if n % 3 == 0:\n                        n = n // 3\n                # if this number is divided by 5, add it to num\n                if i < len(str(n))-1:\n                    if n % 5 == 0:\n                        n = n // 5\n                # if this number is divided by 7, add it to num\n                if i < len(str(n))-1:\n                    if n % 7 == 0:\n                        n = n // 7\n        # if there are digits, divide by them as a pivot, to avoid division by 0.\n        else:\n            for i in range(len(str(n))):\n                # if this number is divided by 3, add it to num\n                if i < len(str(n))-1:\n                    if n % 3 == 0:\n                        n = n // 3\n                # if this number is divided by 5, add it to num\n                if i < len(str(n))-1:\n                    if n % 5 == 0:\n                        n = n // 5\n                # if this number is divided by 7, add it to num\n                if i < len(str(n))-1:\n                    if n % 7 == 0:\n                        n = n // 7\n        # if there are no divisors, return None\n        if len(str(n)) == 0:\n            return None\n        else:\n            # return the largest divisor.\n            return find_prime(max(str(n)))\ndef main():\n    print('Is a prime number?')\n    print(' ')\n    num = int(input('Enter a number: '))\n    print(num_check(num))\n    print(' ')\n    print(num_check(find_large_prime(num)))\n    print(' ')\n    print(num_check(find_prime(num)))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    i = 0\n    while i < n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False\ndef is_prime(n):\n    '''\n    This function returns if a number is a prime number or not.\n    '''\n    i = 2\n    while i < math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef prime_sum(n):\n    '''\n    Return sum of all the primes below n.\n    '''\n    s = 0\n    i = 1\n    while i <= n:\n        if is_prime(i):\n            s += i\n        i += 1\n    return s\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # TODO: Write your code here\n    largest=[]\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        if len(heap)>0:\n            heapq.heappop(heap)\n    for i in range(n):\n        if nums[i] not in largest:\n            heapq.heappush(heap,nums[i])\n    print(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums,reverse=True)[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    nums_heap = []\n    for i in range(n):\n        nums_heap.append(hq.heappop(nums))\n    nums.sort(reverse=True)\n    return nums_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, nums[i])\n    for i in range(n-1,0,-1):\n        if nums[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    heapq.heapify(hq)\n    for i in nums:\n        heapq.heappush(hq,i)\n    ans = []\n    while hq:\n        curr_ele = heapq.heappop(hq)\n        if len(ans) < n:\n            ans.append(curr_ele)\n        else:\n            ans.append(curr_ele)\n        if len(ans) == n:\n            break\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    return(nums[n-1])\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    return(nums[-1])\ndef heap_queue_merge(nums,n):\n    '''\n    Write a function to merge the given n sorted list of numbers into a new sorted list.\n    The function should return a list of numbers. It should not return a reference to the input list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        nums.pop(i)\n    return heapq.heapify(heap)\ndef heap_queue_heap_sort(nums,n):\n    '''\n    Write a function to sort a given list of numbers in ascending order using heapq, using the following function:\n        nums= [ 1, 4, 3, 8, 9, 10, 5, 2, 6, 7, 11 ]\n    Return a sorted list of numbers.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        nums.pop(i)\n    return heapq.heapify(heap)\ndef heap_queue_heap_sort_reverse(nums,n):\n    '''\n    Write a function to sort a given list of numbers in descending order using heapq, using the following function:\n        nums= [ 1, 4, 3, 8, 9, 10, 5, 2, 6, 7, 11 ]\n    Return a sorted list of numbers.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        nums.pop(i)\n    return heapq.heapify(heap)\ndef heap_heap_sort(nums,n):\n    '''\n    Write a function to sort a given list of numbers in ascending order using heapq, using the following function:\n        nums= [ 1, 4, 3, 8, 9, 10, 5, 2, 6, 7, 11 ]\n    Return a sorted list of numbers.\n    '''\n    for i in range(n):\n        heapq.heappush(nums,nums[i])\n        nums.pop(i)\n    return nums\ndef heap_heap_sort_reverse(nums,n):\n    '''\n    Write a function to sort a given list of numbers in descending order using heapq, using the following function:\n        nums= [ 1, 4, 3, 8, 9, 10, 5, 2, 6, 7, 11 ]\n    Return a sorted list of numbers.\n    '''\n    for i in range(n):\n        heapq.heappush(nums,nums[i])\n        nums.pop(i)\n    return nums\ndef heap_heap_sort_not(nums,n):\n    '''\n    Write a function to sort a given list of numbers in ascending order using heapq, using the following function:\n        nums= [ 1, 4, 3, 8, 9, 10, 5, 2, 6, 7, 11 ]\n    Return a sorted list of numbers.\n    '''\n    for i in range(n):\n        heapq.heappush(nums,nums[i])\n        nums.pop(i)\n    return nums\ndef heap_heap_sort_not_reverse(nums,n):\n    '''\n    Write a function to sort a given list of numbers in descending order using heapq, using the following function:\n        nums= [ 1, 4, 3, 8, 9, 10, 5, 2, 6, 7, 11 ]\n    Return a sorted list of numbers.\n    '''\n    for i in range(n):\n        heapq.heappush(nums,nums[i])\n        nums.pop(i)\n    return nums\ndef heap_sift(nums,n):\n    '''\n    Write a function to sort a given list of numbers in ascending order, using the following function:\n        nums= [ 1, 4, 3, 8, 9, 10, 5, 2, 6, 7, 11 ]\n    Return a sorted list of numbers.\n    '''\n    for i in range(n):\n        heapq.heappush(nums,nums[i])\n        nums.pop(i)\n    return heapq.heapify(nums)\ndef heap_heap_push(nums,n):\n    '''\n    Write a function to push the values of an element in a given list into the heap, using the following function:\n        nums= [ 1, 4, 3, 8, 9, 10, 5, 2, 6, 7, 11 ]\n    Return a sorted list of numbers.\n    '''\n    heapq.heappush(nums,nums[0])\n    nums.pop(0)\n    return nums\ndef heap_heap_pop(nums,n):\n    '''\n    Write a function to pop the smallest number from a given list of numbers.\n    The function should return the smallest number.\n    '''\n    heapq.heapreplace(nums,heapq.heappop(nums))\n    nums.pop(0)\n    return nums\ndef heap_heap_pop_last(nums,n):\n    '''\n    Write a function to pop the last value from a given list of numbers.\n    The function should return the last number.\n    '''\n    heapq.heapreplace(nums,nums[-1])\n    nums.pop()\n    return nums\ndef heap_heap_pop_first(nums,n):\n    '''\n    Write a function to pop the first value from a given list of numbers.\n    The function should return the first number.\n    '''\n    heapq.heapreplace(nums,nums[0])\n    nums.pop(0)\n    return nums\ndef heap_heap_push_first(nums,n):\n    '''\n    Write a function to push the first value of a given list of numbers.\n    The function should return the first number.\n    '''\n    heapq.heappush(nums,nums[0])\n    nums.pop(0)\n    return nums\ndef heap_heap_push_second(nums,n):\n    '''\n    Write a function to push the second value of a given list of numbers.\n    The function should return the second number.\n    '''\n    heapq.heappush(nums,nums[0])\n    heapq.heapreplace(nums,nums[-1])\n    nums.pop(-1)\n    return nums\ndef heap_heap_push_last(nums,n):\n    '''\n    Write a function to push the last value of a given list of numbers.\n    The function should return the last number.\n    '''\n    heapq.heappush(nums,nums[-1])\n    nums.pop(-1)\n    return nums\ndef heap_heap_push_first_last(nums,n):\n    '''\n    Write a function to push the first and last value of a given list of numbers.\n    The function should return the first and last number.\n    '''\n    heapq.heappush(nums,nums[0])\n    heapq.heappush(nums,nums[-1])\n    return nums\ndef heap_heap_sort(nums,n):\n    '''\n    Write a function to sort a given list of numbers in ascending order, using the following function:\n        nums= [ 1, 4, 3, 8, 9, 10, 5, 2, 6, 7, 11 ]\n    Return a sorted list of numbers.\n    '''\n    for i in range(n):\n        heapq.heappush(nums,nums[i])\n        nums.pop(i)\n    return nums\ndef heap_heap_sort_not(nums,n):\n    '''\n    Write a function to sort a give"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def heapify_down(l,i):\n        largest = l[0]\n        largest_index = 0\n        for j in range(i,n):\n            if l[j][0] > largest:\n                largest = l[j][0]\n                largest_index = j\n        if largest_index!= 0:\n            l[i],l[largest_index] = l[largest_index],l[i]\n            heapify_down(l,largest_index)\n            print(f'After Downheap {l}')\n    heap = [0] * n\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        print(f'{nums[i]}')\n        print(f'After Downheap {heap}')\n    print(f'Largest Number is {nums[0]}')\n    print(f'The heap is {heap}')\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    n_heap=[]\n    for i in range(n):\n        heapq.heappush(n_heap,nums[i])\n    s=[]\n    for i in range(n):\n        if n_heap and nums[i]>n_heap[0]:\n            heapq.heappop(n_heap)\n        else:\n            s.append(nums[i])\n    return s\n    # return heapq.nlargest(n,nums)\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    s=[]\n    for i in range(n):\n        heapq.heappush(s,nums[i])\n    n_heap=[]\n    for i in range(n):\n        heapq.heappush(n_heap,heapq.heappop(s))\n    return s\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap_list = []\n    heapq.heapify(heap_list)\n    for i in nums:\n        heapq.heappush(heap_list,-i)\n    for i in range(n-1,0,-1):\n        heapq.heappop(heap_list)\n    return -1 if heap_list else 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Write your code here\n    return x % 2 == 0 \n    \n    \n    \n    \ndef is_Palindrome(s):\n    '''\n    Write a Python function to check whether a string is a palindrome or not.\n    '''\n    #Write your code here\n    return s == s[::-1]\n    \n    \n    \n    \ndef remove_unwanted_characters(string):\n    '''\n    Write a Python function to remove all the unwanted characters from the given string.\n    '''\n    #Write your code here\n    return string.replace(' ','')\n    \n    \n    \n    \ndef is_short_string(string):\n    '''\n    Write a Python function to check whether a given string is a short string or not.\n    '''\n    #Write your code here\n    return len(string) <= 5\n    \n    \n    \n    \ndef remove_duplicate_characters(string):\n    '''\n    Write a Python function to remove duplicate characters from the given string.\n    '''\n    #Write your code here\n    return string.replace(' ','')\n    \n    \n    \n    \n    \n    \ndef palindrome_number(x):\n    '''\n    Write a Python function to check whether an integer is palindrome or not.\n    '''\n    #Write your code here\n    return x == int(str(x)[::-1])\n    \n    \n    \n    \n    \ndef palindrome_number_recursive(x):\n    '''\n    Write a Python function to check whether an integer is palindrome or not.\n    '''\n    #Write your code here\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    elif x < 10:\n        return palindrome_number_recursive(x*10)\n    else:\n        return palindrome_number_recursive(x//10) and palindrome_number_recursive(x%10)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef palindrome_number_iterative(x):\n    '''\n    Write a Python function to check whether an integer is palindrome or not.\n    '''\n    #Write your code here\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        if str(x)[::-1] == str(x)[::-1][::-1]:\n            return True\n        else:\n            return palindrome_number_iterative(x*10) and palindrome_number_iterative(x//10) and palindrome_number_iterative(x%10)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef alphabet_position(string):\n    '''\n    Write a Python function to find the position of the first alphabet letter in a given string.\n    '''\n    #Write your code here\n    return string.find(string[0])\n    \n    \n    \n    \n    \n    \ndef swap_case(string):\n    '''\n    Write a Python function to swap case of a string.\n    '''\n    #Write your code here\n    return string.swapcase()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    elif x % 2 == 0:\n        return False\n    elif x % 2!= 0:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True \n    if x < 0: \n        return False \n    while x >= 1: \n        if x % 2 == 1: \n            return True \n        x = x / 2\n    return False \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x!= x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x<0:\n        if x>=1:\n            for i in range(len(x)-1):\n                if x[i] == x[i+1]:\n                    return False\n            return True\n        else:\n            return True\n    else:\n        for i in range(len(x)-1):\n            if x[i] == x[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # TODO: Write your code here\n    if x > 1:\n        if x % 2!= 0:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x % 2)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x<0:\n        x=x*-1\n    dif = x%2\n    return dif!= 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    '''\n    x = -3\n    if x % 2 == 0:\n        print(x, \"is a power of two\")\n    else:\n        print(x, \"is not a power of two\")\n    '''\n    x = 10\n    if x % 2!= 0:\n        print(x, \"is not a power of two\")\n    else:\n        print(x, \"is a power of two\")\n    \n    x = -3\n    if x % 2 == 0:\n        print(x, \"is not a power of two\")\n    else:\n        print(x, \"is a power of two\")\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_chars = []\n    if len(text) >= 4:\n        for char in text:\n            if char.isalpha():\n                list_chars.append(char)\n    return list_chars\ndef convert_list_to_set(list_char):\n    '''\n    Write a function that takes a list of characters and return the set of characters that are at least 4 characters long.\n    '''\n    list_set = set(list_char)\n    return list_set\ndef find_set_char(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_set = []\n    if len(text) >= 4:\n        for char in text:\n            if char.isalpha():\n                list_set.append(char)\n    return list_set\ndef swap_char_to_num(text):\n    '''\n    Write a function that takes a string of text and return the string of characters which are at least 4 characters long and are numeric.\n    '''\n    list_char = []\n    if len(text) >= 4:\n        for char in text:\n            if char.isdigit():\n                list_char.append(char)\n    return list_char\ndef convert_string_to_list(text):\n    '''\n    Write a function that takes a string and returns a list of characters which are at least 4 characters long.\n    '''\n    list_char = []\n    if len(text) >= 4:\n        for char in text:\n            if char.isalpha():\n                list_char.append(char)\n    return list_char\ndef convert_set_to_list(list_set):\n    '''\n    Write a function that takes a set of characters and return the string of characters which are at least 4 characters long and are numeric.\n    '''\n    list_list = []\n    for char in list_set:\n        if char.isalpha():\n            list_list.append(char)\n    return list_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for char in text:\n        if len(char) >= 4:\n            result.append(char)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_str = ''\n    temp = ''\n    temp_list = []\n    for char in text:\n        if(len(char) >= 4):\n            if(temp!= char):\n                temp = char\n                temp_list.append(char)\n            if(len(char) > len(temp)):\n                long_str = temp\n                temp = char\n            else:\n                long_str += temp\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    result = re.findall(r'[A-Za-z]+', text)\n    return result\ndef find_long_words(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    \n    result = re.findall(r'\\w+\\s[A-Za-z]+\\s\\w+', text)\n    return result\ndef find_digit_words(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    \n    result = re.findall(r'\\w+\\s[0-9]+\\s\\w+', text)\n    return result\ndef find_capital_words(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    \n    result = re.findall(r'\\w+\\s[A-Z]+\\s\\w+', text)\n    return result\ndef find_middle_words(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    \n    result = re.findall(r'\\w+\\s[0-9]+\\s\\w+', text)\n    return result\ndef find_start_words(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    \n    result = re.findall(r'\\w+\\s[a-z]+\\s\\w+', text)\n    return result\ndef find_stop_words(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    \n    result = re.findall(r'\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_list = re.findall(r'\\w+', text)\n    for word in text_list:\n        if len(word) >= 4:\n            yield word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #pattern = r'(?:(?=\\W|^)(?=[A-Z])|(?=\\w))' #Regex for the pattern\n    #result = re.findall(pattern, text)\n    #print(result)\n    '''\n    pattern = r'(?:(?=\\W|^)(?=.*[A-Z])|(?=\\w))' #Regex for the pattern\n    words = re.findall(pattern, text)\n    return words\n    '''\n    words = []\n    for word in find_char_long(text):\n        if len(word) >=4:\n            words.append(word)\n    return words\ndef get_longest_word(words):\n    longest_word = None\n    for word in words:\n        if longest_word is None or len(word)>len(longest_word):\n            longest_word = word\n    return longest_word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #Your code goes here\n    l=[]\n    for word in text.split():\n        if len(word)>=4:\n            l.append(word)\n    return l\n    \ndef all_words(text):\n    '''\n    Write a function to get all words in a text.\n    '''\n    #Your code goes here\n    words=[]\n    for word in text.split():\n        if len(word)>=4:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    r = re.finditer('[a-zA-Z]*'+text+'[a-zA-Z]*', text)\n    for i in r:\n        print(i)\n        if i.start() >= 2:\n            print(\"*\"*20)\n            print(i.start())\n        if i.end() >= 2:\n            print(\"*\"*20)\n            print(i.end())\n        print(\"*\"*20)\ndef find_char_long_2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    r = re.finditer(r'[a-zA-Z]*'+text+'[a-zA-Z]*', text)\n    for i in r:\n        print(i)\n        if i.start() >= 2:\n            print(\"*\"*20)\n            print(i.start())\n        if i.end() >= 2:\n            print(\"*\"*20)\n            print(i.end())\n        print(\"*\"*20)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    text = text.replace('-','')\n    text = re.sub('[^a-zA-Z]', '', text)\n    text = text.strip()\n    return text\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    characters = []\n    for char in text:\n        if len(char) >= 4:\n            characters.append(char)\n    return characters\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 1 character short in a string.\n    '''\n    characters = []\n    for char in text:\n        if len(char) <= 1:\n            characters.append(char)\n    return characters\ndef find_number_long(text):\n    '''\n    Write a function to find all numbers which are at least 4 characters long in a string.\n    '''\n    number = []\n    for number in text:\n        if len(number) >= 4:\n            number.append(number)\n    return number\ndef find_number_short(text):\n    '''\n    Write a function to find all numbers which are at least 1 character short in a string.\n    '''\n    number = []\n    for number in text:\n        if len(number) <= 1:\n            number.append(number)\n    return number\ndef find_all(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    word = []\n    for word in text:\n        if len(word) >= 2:\n            word.append(word)\n    return word\ndef find_all_long(text):\n    '''\n    Write a function to find all words which are at least 1 character long in a string.\n    '''\n    word = []\n    for word in text:\n        if len(word) >= 1:\n            word.append(word)\n    return word\ndef find_all_short(text):\n    '''\n    Write a function to find all words which are at least 1 character short in a string.\n    '''\n    word = []\n    for word in text:\n        if len(word) >= 1:\n            word.append(word)\n    return word\ndef find_numbers(text):\n    '''\n    Write a function to find all numbers which are at least 1 character long in a string.\n    '''\n    number = []\n    for number in text:\n        if len(number) >= 1:\n            number.append(number)\n    return number\ndef find_any(text):\n    '''\n    Write a function to find all words which are at least 1 character long in a string.\n    '''\n    characters = []\n    for char in text:\n        if len(char) >= 1:\n            characters.append(char)\n    return characters\ndef remove_long(text):\n    '''\n    Write a function to remove all words which are at least 1 character long in a string.\n    '''\n    characters = []\n    for char in text:\n        if len(char) >= 1:\n            characters.append(char)\n    return characters\ndef remove_short(text):\n    '''\n    Write a function to remove all words which are at least 1 character short in a string.\n    '''\n    characters = []\n    for char in text:\n        if len(char) <= 1:\n            characters.append(char)\n    return characters\ndef remove_any(text):\n    '''\n    Write a function to remove all words which are at least 1 character long or short in a string.\n    '''\n    characters = []\n    for char in text:\n        if len(char) <= 1 or len(char) >= 1:\n            characters.append(char)\n    return characters\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums = [int(i) for i in nums]\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i] * nums[i])\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for i in range(len(nums)):\n        squared_nums.append(nums[i]**2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_num = num**2\n        squared_nums.append(squared_num)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums.sort()\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    if type(nums)!= list:\n        raise TypeError('Must be a list')\n    nums = [x**2 for x in nums]\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square = []\n    for num in nums:\n        square.append(num ** 2)\n    return square\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    l=len(nums)\n    for i in range(l):\n        nums[i]**=2\n    square_sum=0\n    for i in range(l):\n        square_sum=square_sum+nums[i]\n    return square_sum\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    n = len(str)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    rotations = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == str[i - 1]):\n            count += 1\n        else:\n            count = 0\n            break\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #1st try\n    rotations_lst = []\n    count_Rotations = 0\n    for i in range(len(str)):\n        if str[i] == str[i-1]:\n            count_Rotations = count_Rotations + 1\n            rotations_lst.append(count_Rotations)\n        else:\n            count_Rotations = 0\n            rotations_lst.append(count_Rotations)\n    return min(rotations_lst)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    str_str = str\n    if len(str) > len(str_str):\n        return -1\n    else:\n        for i in range(0, len(str)):\n            for j in range(0, len(str_str)):\n                if str[i] == str_str[j]:\n                    str_str = str_str[0:j] + str_str[j+1:len(str)]\n                    rotations += 1\n                    \n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    dictionary = {}\n    for i in range(len(str)):\n        dictionary[str[i]] = str[i+1:]\n    return dictionary\n    \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def count(l,r):\n        n = 0\n        while(l>=0 and r<=n):\n            if l%2!= r%2:\n                n+=1\n            l//=2\n            r//=2\n        return n\n    n = len(str)\n    if n < 2:\n        return n\n    j = 1\n    if n%2 == 0:\n        j = 2\n    l = 0\n    r = n\n    while(l<=r):\n        if l % 2!= r % 2:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r -= 1\n            j += 2\n    rotations = count(l,r)\n    return rotations + j - 2\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # all_rotations = 0\n    # for i in range(0, len(str)):\n    #     all_rotations += get_rotations(str, i)\n    \n    # print(all_rotations)\n    rotations = 0\n    while rotations < get_rotations(str, len(str) - rotations):\n        rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    rotations=0\n    for i in range(n):\n        rotations+=str.count('A')\n    if rotations==0:\n        return n\n    return n-rotations-1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(0, len(str)):\n        rotations = []\n        index = 0\n        for j in range(0, len(str) - i):\n            rotations.append(str[j: j+i])\n        \n        if(len(rotations) == 0):\n            return i\n        else:\n            for k in range(0,len(rotations)):\n                if(rotations[k].count(rotations[k][0]) > 0):\n                    rotations.remove(rotations[k])\n            #print(rotations)\n        \n    return i\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 1:\n        return s\n    \n    a = s[0]\n    b = s[1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return ''\n    elif len(s) == 1:\n        return s\n    else:\n        index_of_char = 0\n        for index_of_char in range(len(s)):\n            if s[index_of_char] == ch:\n                index_of_char = index_of_char + 1\n        \n        s = s[:index_of_char - 1] + s[index_of_char + 1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        i = s.index(ch)\n        s = s[:i] + s[i+1:]\n        return s\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i]==ch:\n                if i==0 or s[i-1]!=ch:\n                    s=s[:i]+s[i+1:]\n                    break\n        return s\n    \ndef test_remove_Occ(s,ch):\n    '''\n    Test to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i]==ch:\n                if i==0 or s[i-1]!=ch:\n                    s=s[:i]+s[i+1:]\n                    break\n        return s\n    \ndef compare_occ(s,ch):\n    '''\n    Write a python function to check if string s is a palindrome.\n    '''\n    if len(s)==1:\n        return True\n    elif s[0]!=s[-1]:\n        return False\n    else:\n        return compare_occ(s[1:-1],ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    temp = s[0:1]\n    if len(s) % 2!= 0:\n        temp = temp + s[s.length() - 1]\n        s = s[:s.length() - 1]\n    if len(s) % 2!= 0:\n        temp = temp + s[s.length() - 1]\n        s = s[:s.length() - 1]\n    if len(s) % 2!= 0:\n        temp = temp + s[s.length() - 1]\n        s = s[:s.length() - 1]\n    if len(s) % 2!= 0:\n        temp = temp + s[s.length() - 1]\n        s = s[:s.length() - 1]\n    s = s[:s.length() - 1] + temp\n    return s\ndef remove_repeat(s):\n    '''\n    Write a python function to remove the repeated characters of a given string.\n    '''\n    l = len(s)\n    for i in range(l):\n        if s[i] in s[i+1:l]:\n            s = s[:i] + s[i+1:l]\n    return s\ndef change_replace(s):\n    '''\n    Write a python function to change the first and last character of a given string.\n    '''\n    s = s.replace(\"a\",\"1\")\n    s = s.replace(\"A\",\"1\")\n    return s\ndef remove_Symbol(s):\n    '''\n    Write a python function to remove the first and last symbol of a given string.\n    '''\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\'\", \"\")\n    s = s.replace(\"'\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    return s\ndef get_more_symbol(s):\n    '''\n    Write a python function to get the number of the number of the first symbol in a given string.\n    '''\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\'\", \"\")\n    s = s.replace(\"'\", \"\")\n    s = s.replace(\" \", \"\")\n    if \"-\" in s:\n        return s.count(\"-\")\n    else:\n        return s.count(\"!\")\ndef count_number_of_symbol(s):\n    '''\n    Write a python function to count the number of the number of the first symbol in a given string.\n    '''\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\'\", \"\")\n    s = s.replace(\"'\", \"\")\n    s = s.replace(\" \", \"\")\n    if \"-\" in s:\n        s = s.count(\"-\")\n    else:\n        s = s.count(\"!\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) < 1:\n        return None\n    if ch not in s:\n        return None\n    else:\n        return s[1:len(s)-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return ''\n    \n    left = 0\n    right = len(s)-1\n    while left<=right:\n        if s[left]==ch and s[right]==ch:\n            s = s[:left]+s[left+1:]\n            left+=1\n            right-=1\n        elif s[left]==ch:\n            left+=1\n        elif s[right]==ch:\n            right-=1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s or len(s)==0: \n        return \"No string\"\n    if len(s)==1: \n        if s[0] == ch: \n            return \"Removed\"\n        else: \n            return \"Not removed\"\n    if ch == s[0]: \n        return \"Removed\"\n    if ch == s[-1]: \n        return \"Removed\"\n    s1 = s[0: len(s) - 1] \n    s2 = s[len(s) - 1: len(s) - 1 + len(s) - 1] \n    if s1 == s2: \n        return \"Removed\"\n    else: \n        return \"Not removed\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    def get_occ(s,ch):\n        '''\n        Function to get the occurrence of character ch.\n        '''\n        lst = []\n        for i in range(len(s)):\n            if(s[i]==ch):\n                lst.append(i)\n        return lst\n    occ = get_occ(s,ch)\n    return s[:occ[0]] + s[occ[1]:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    if(ch=='A'):\n        s = s.lower()\n    else:\n        s = s.upper()\n    for i in range(len(s)):\n        if(ch==s[i]):\n            count+=1\n    if(count==0):\n        return s\n    else:\n        return 'ERROR'\n    \n    \n    \ndef commonLetter(s1,s2):\n    '''\n    Write a python function to find the common characters between two strings.\n    '''\n    l1=[]\n    l2=[]\n    for i in s1:\n        if(i in s2):\n            l1.append(i)\n    for i in s2:\n        if(i in s1):\n            l2.append(i)\n    return l1,l2\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sort_by_sum = sorted(M, key = lambda i: sum(i), reverse=True)\n    return sort_by_sum\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x:x[0])\n    for i in range(len(M)):\n        M[i].append(M[i][0])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_count = M.shape[0]\n    sorted_row = []\n    sum_row = sum(M[:,0])\n    for row in M:\n        sorted_row.append(row/sum_row)\n    sorted_row.sort()\n    return sorted_row"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_copy = M.copy()\n    SUM = sum(M_copy.values())\n    for col in range(len(M_copy.values())):\n        for row in range(col+1, len(M_copy)):\n            if M_copy[row] < SUM - M_copy[col]:\n                M_copy[row], M_copy[col] = M_copy[col], M_copy[row]\n    return M_copy\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    count = 0\n    for i in range(0, len(M)):\n        count += M[i][count]\n    for i in range(0, len(M) - 1):\n        for j in range(i, len(M)):\n            if count > M[i][j]:\n                M[i], M[j] = M[j], M[i]\n                count -= M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_sorted = []\n    for x in range(len(M)):\n        M_sorted.append(sum(M[x]))\n    return M_sorted\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N):\n        for j in range(N-1):\n            if M[j][i] > M[j+1][i]:\n                temp = M[j][i]\n                M[j][i] = M[j+1][i]\n                M[j+1][i] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x: sum(x))\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # iterate over rows and sum them\n    for i in range(0,len(M)):\n        M[i][i] = 0\n    # iterate over rows and add them to the matrix\n    for i in range(0,len(M)):\n        for j in range(0,len(M[i])-1):\n            M[i][j] += M[i][j+1]\n    # sort rows by sum\n    for i in range(0,len(M)):\n        for j in range(0,len(M[i])):\n            M[i][j] = M[i][j]/len(M[i])\n    # return matrix\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_rows = len(M)\n    M_columns = len(M[0])\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    m = l * h\n    return m * l * b\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = 0\n    if (b > l):\n        temp = b\n        b = l\n        l = temp\n        temp = h\n        h = temp\n    \n    if (b < l) :\n        temp = b\n        b = l\n        l = temp\n        temp = h\n        h = temp\n    \n    if (l > b) :\n        temp = b\n        b = l\n        l = temp\n        temp = h\n        h = temp\n    \n    if (l < b) :\n        temp = b\n        b = l\n        l = temp\n        temp = h\n        h = temp\n    \n    if (h > b) :\n        temp = b\n        b = h\n        h = temp\n        temp = l\n        l = temp\n    \n    if (h < b) :\n        temp = b\n        b = h\n        h = temp\n        temp = l\n        l = temp\n    \n    if (l == b) :\n        vol = l\n    \n    if (l == h) :\n        vol = l\n    \n    if (l == temp) :\n        vol = l\n    \n    if (h == temp) :\n        vol = h\n    \n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    m = (b*h) / 2\n    volume = (1/3)*(4/3)*(l*h**2)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if (l < b) : \n        return ((b-l)/2)*h\n    else : \n        return h**3\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = ((b**2)*(h/2))\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l < b and h < b : return 0\n    if l < b and h < b : return 1\n    if l < b and h < b : return 1\n    if l < b and h < b : return 1\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < b : return 2\n    if l < b and h < "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l <= 0:\n        return \"prism has no base length\"\n    if b <= 0:\n        return \"prism has no base width\"\n    if h <= 0:\n        return \"prism has no height\"\n    volume = (l * b * h)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = 0\n    for i in range(l,h+1,b) :\n        for j in range(i,h+1,b) :\n            for k in range(j,h+1,b) :\n                v += (b**3)/3\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    '''\n    l : Length of the base of the triangle\n    b : Base of the triangle\n    h : Height of the triangle\n    '''\n    '''\n    Volume of the triangle\n    '''\n    v = (b*h) * (l*l)\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (2*(h**2) - (l**2))/(h**3)\n    return v\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub(r'[^A-Za-z0-9]+','',text)\n    text = re.sub(r'_',' ',text)\n    text = re.sub(r'[^a-z0-9]+',' ',text)\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('-',' ')\n    return text == text.casefold()\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('([a-z0-9])([A-Z])', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) < 5:\n        return False\n    else:\n        if text[0:5] == '_ ':\n            if text[5:] == '_':\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if re.search('[a-zA-Z]', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(char.isupper() for char in text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]\\w*_\\w+[a-z0-9]', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # i = 0\n    # while i<len(text):\n    #     if text[i] in ['a','e','i','o','u']:\n    #         for j in range(i+1,len(text)):\n    #             if text[j] in ['a','e','i','o','u']:\n    #                 break\n    #             else:\n    #                 continue\n    #     if text[i] in ['0','1','2','3','4','5','6','7','8','9']:\n    #         for j in range(i+1,len(text)):\n    #             if text[j] in ['0','1','2','3','4','5','6','7','8','9']:\n    #                 break\n    #             else:\n    #                 continue\n    #     if text[i] in ['@','#','$','%','&','*','(',')','{','}','<','>',':',';']:\n    #         for j in range(i+1,len(text)):\n    #             if text[j] in ['@','#','$','%','&','*','(',')','{','}','<','>',':',';']:\n    #                 break\n    #             else:\n    #                 continue\n    #     if text[i] in ['!','?']:\n    #         for j in range(i+1,len(text)):\n    #             if text[j] in ['!','?']:\n    #                 break\n    #             else:\n    #                 continue\n    #     if text[i] in ['(']:\n    #         for j in range(i+1,len(text)):\n    #             if text[j] in ['(',')']:\n    #                 break\n    #             else:\n    #                 continue\n    #     if text[i] in ['{']:\n    #         for j in range(i+1,len(text)):\n    #             if text[j] in ['{']:\n    #                 break\n    #             else:\n    #                 continue\n    #     if text[i] in ['}']:\n    #         for j in range(i+1,len(text)):\n    #             if text[j] in ['}']:\n    #                 break\n    #             else:\n    #                 continue\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text.isalpha():\n        print('True')\n        return True\n    elif text.isnumeric():\n        print('True')\n        return True\n    elif re.search(r'[0-9]', text):\n        print('True')\n        return True\n    elif re.search(r'[A-Z]', text):\n        print('True')\n        return True\n    elif re.search(r'[a-z]', text):\n        print('True')\n        return True\n    else:\n        print('False')\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase = text.lower()\n    text_lowercase_underscore = re.sub(r'[^A-Za-z0-9_]','', text_lowercase)\n    return text_lowercase_underscore.count('_')\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4/3)*a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*len(a)\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # return 4 * (a ** 2)\n    return (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 0\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a) + (4 * a) + (2 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a) + (4 * a) + (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    sq_per = 0\n    for x in range(1,a):\n        sq_per += x * x\n    return sq_per\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Your code here\n    p = 0\n    for side in range(1,a):\n        p+=4*side\n    print(p)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # return 2*(a**2)\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4*(a**2))\n    \ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    return (a**2)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp_list = []\n    for c in string: \n        if c in list_of_chars: \n            temp_list.append(c)\n    return \"\".join(temp_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    #find first non-numeric char\n    start = 0\n    for index, char in enumerate(string):\n        if char.isalnum():\n            start = index\n            break\n    #remove first non-numeric char\n    return string[start+1:]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    start = 0\n    end = len(string)\n    # print(string[start:end])\n    for i in range(len(string)):\n        if string[i] in string[start:end]:\n            start += 1\n            end += 1\n        else:\n            end -= 1\n        # print(string[start:end])\n    \n    return string[start:end]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string.split(\" \") if char in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    list_of_chars = list(string)\n    \n    indexes_of_chars = []\n    for index, char in enumerate(list_of_chars):\n        if char not in indexes_of_chars:\n            indexes_of_chars.append(index)\n    \n    return ''.join(list_of_chars[indexes_of_chars[0]:])\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(filter(lambda x: x in string, string))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    for i in range(0,len(string)):\n        if string[i] in string[:i]:\n            lst.append(string[i])\n    return lst\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [i for i in string.split() if i in set(string)]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for character in string:\n        if character in list:\n            list.remove(character)\n        else:\n            list.append(character)\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        if string[i] in list:\n            pass\n        else:\n            list.append(string[i])\n    return list\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # //All the elements are unique\n    array = set(arraynums)\n    \n    if len(array) == len(arraynums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # ===Modify this test to be robust to duplicate numbers===\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    n=len(arraynums)\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arraynums[i]==arraynums[j]):\n                print(i,j)\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Your code here\n    arraynums = arraynums.sort()\n    duplicates = []\n    for i in arraynums:\n        if i in duplicates:\n            return True\n        else:\n            duplicates.append(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"Testing duplicate array:\")\n    for num in arraynums:\n        print(num)\n    print()\n    \n    # TODO: Write your code here\n    duplicate = []\n    for num in arraynums:\n        if num not in duplicate:\n            duplicate.append(num)\n    return duplicate"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = []\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    print('Original array', nums)\n    nums_set = set(nums)\n    print('Set', nums_set)\n    for i in nums:\n        print(i, end=\" \")\n        for j in nums_set:\n            if i == j:\n                print(f\"{j} found at index {i}\")\n                return True\n    print(f\"No duplicate found\")\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Your code here\n    return True\n    \n    \n    # -------------------\n    # Test it\n    # -------------------\n    import random\n    import timeit\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Import the array and convert it to a set\n    array = set(arraynums)\n    # Return the count of duplicate elements\n    return arraynums.count(arraynums[array.index(min(arraynums))]) > 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x <= 5\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%5==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return(x%2 == 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x <=0):\n        return False\n    elif(x <= 5):\n        return True\n    elif(x <= 10):\n        return True\n    elif(x <= 50):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x % 4) == 0:\n        return False\n    if (x % 5) == 0:\n        return False\n    if (x % 3) == 0:\n        return True\n    if (x % 7) == 0:\n        return True\n    \n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 'woodball' in x\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 'woodball' in x.lower()\n    "
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x > 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 1:\n        return False\n    rev1 = rev(num -1)\n    if rev1 == False:\n        return False\n    if num % 2 == 1:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num = num[::-1]\n    rev_num2 = rev_num[::-1]\n    if int(num) == int(rev_num2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rem = num % 10\n        num = num // 10\n        rev = rev * 10 + rem\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        temp = num % 10\n        rev = rev * 10 + temp\n        num = num // 10\n    if rev == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(num)\n    if rev_num == 0:\n        return False\n    rev_num_reverse = str(rev_num)[::-1]\n    if rev_num_reverse == '0':\n        return False\n    if int(rev_num_reverse) == rev_num:\n        return True\n    if int(rev_num_reverse) == rev_num:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    rev = num * 2\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num!= 0:\n        digit = num % 10\n        rev = rev * 10 + digit\n        num = num // 10\n    if rev == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num > 2*num:\n        print(\"Number is NOT one less than twice its reverse\")\n    else:\n        print(\"Number is one less than twice its reverse\")\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    pass"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    lst = [str(num), '-']\n    return str(lst[0]) + str(lst[1])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr : \n        return []\n    else : \n        number = arr[0]\n        max = 1\n        for i in range(len(arr) - 1) : \n            if arr[i] < number : \n                number = arr[i]\n                max = arr[i + 1] \n        return max"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0: \n        return 0\n    \n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # write your code here\n    num=int(''.join(map(str,arr)))\n    max_num=0\n    for i in range(num):\n        for j in range(i+1,num):\n            if num%2==0:\n                if max_num<int(''.join(map(str,str(j)+str(i)))):\n                    max_num=int(''.join(map(str,str(j)+str(i))))\n            else:\n                if max_num<int(''.join(map(str,str(i)+str(j)))):\n                    max_num=int(''.join(map(str,str(i)+str(j))))\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Creating a set of all the digits \n    digits = set(map(int, arr)) \n    # Checking if a given number can be formed by digits.\n    if (len(digits) < 3) :\n        return \"Sorry, we can't number with three digits\"\n    else : \n        # If there are 3 numbers, then we can find the maximum number \n        # using a bit pattern.\n        max_num = max(digits)\n        for digit in range(1, max_num+1) : \n            if digits.issubset({digit}): \n                return digit\n        # If there is no other digits in the set, then we can find the maximum \n        # number using the same rules.\n        return find_Max_Num(list(digits))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1): \n        temp = arr[i] + arr[i+1] \n        if temp > arr[i] : \n            arr[i] = temp \n    return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    MaxNum = arr[0]\n    for i in arr : \n        if i > MaxNum : \n            MaxNum = i\n    return MaxNum\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # your code goes here\n    \n    max = 0\n    for i in arr :\n        if i > max :\n            max = i\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    output = None\n    \n    if arr == None:\n        return output\n    \n    # hash the given list of digits\n    for num in arr:\n        hash_value = hash(num)\n        \n        # calculate if the given number can be formed with the given hash\n        if hash_value <= num_size and hash_value not in hash_set:\n            \n            # if the number is already present in the hash_set, return the number\n            if hash_value in hash_set:\n                return num\n            \n            # otherwise, increment the hash_set\n            hash_set.add(hash_value)\n            \n    # return none if any error occurred\n    return None\n    "
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxnum = 0\n    for digit in range(1,10):\n        if sum(map(int,str(digit))) > maxnum:\n            maxnum = sum(map(int,str(digit)))\n    return maxnum\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(0, len(arr)-1):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] < arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr[-1]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return True\n    elif x<y:\n        return False\n    else:\n        return x>y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return (x < y) \n    else: \n        return (y > x) \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return  (x>y) or (x<y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return y<x\n    return x<y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign = -1\n    if (x > y):\n        sign = 1\n    elif (x < y):\n        sign = -1\n    else:\n        sign = 0\n    return sign\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0:\n        if y < 0:\n            return True\n        return False\n    else:\n        if x > 0 and y < 0:\n            return True\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    signs = {\"O\":0, \"X\":0, \".\":0}\n    for i in range(len(x)):\n        if x[i] == y[i]:\n            signs[\".\"] += 1\n        elif x[i] < y[i]:\n            signs[\"O\"] += 1\n        elif x[i] > y[i]:\n            signs[\"X\"] += 1\n    print(signs)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x==-y or x==y or -x==y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return(True)\n    elif x < y:\n        return(False)\n    else:\n        return(True)"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 4:\n        return n\n    else:\n        return (is_octagonal(n-1) + is_octagonal(n-2)) % 10\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n < 0):\n        print('Incorrect number!')\n    elif (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    elif (n == 2):\n        return 3\n    elif (n == 3):\n        return 5\n    elif (n == 4):\n        return 7\n    elif (n == 5):\n        return 10\n    elif (n == 6):\n        return 13\n    elif (n == 7):\n        return 15\n    elif (n == 8):\n        return 19\n    elif (n == 9):\n        return 21\n    elif (n == 10):\n        return 24\n    elif (n == 11):\n        return 27\n    elif (n == 12):\n        return 30\n    elif (n == 13):\n        return 33\n    elif (n == 14):\n        return 35\n    elif (n == 15):\n        return 39\n    elif (n == 16):\n        return 42\n    elif (n == 17):\n        return 46\n    elif (n == 18):\n        return 49\n    elif (n == 19):\n        return 52\n    elif (n == 20):\n        return 56\n    elif (n == 21):\n        return 60\n    elif (n == 22):\n        return 63\n    elif (n == 23):\n        return 65\n    elif (n == 24):\n        return 69\n    elif (n == 25):\n        return 72\n    elif (n == 26):\n        return 76\n    elif (n == 27):\n        return 81\n    elif (n == 28):\n        return 84\n    elif (n == 29):\n        return 89\n    elif (n == 30):\n        return 92\n    elif (n == 31):\n        return 96\n    elif (n == 32):\n        return 101\n    elif (n == 33):\n        return 104\n    elif (n == 34):\n        return 109\n    elif (n == 35):\n        return 112\n    elif (n == 36):\n        return 117\n    elif (n == 37):\n        return 120\n    elif (n == 38):\n        return 123\n    elif (n == 39):\n        return 127\n    elif (n == 40):\n        return 131\n    elif (n == 41):\n        return 134\n    elif (n == 42):\n        return 139\n    elif (n == 43):\n        return 142\n    elif (n == 44):\n        return 146\n    elif (n == 45):\n        return 151\n    elif (n == 46):\n        return 154\n    elif (n == 47):\n        return 157\n    elif (n == 48):\n        return 160\n    elif (n == 49):\n        return 163\n    elif (n == 50):\n        return 168\n    elif (n == 51):\n        return 171\n    elif (n == 52):\n        return 174\n    elif (n == 53):\n        return 179\n    elif (n == 54):\n        return 182\n    elif (n == 55):\n        return 186\n    elif (n == 56):\n        return 191\n    elif (n == 57):\n        return 194\n    elif (n == 58):\n        return 198\n    elif (n == 59):\n        return 203\n    elif (n == 60):\n        return 207\n    elif (n == 61):\n        return 210\n    elif (n == 62):\n        return 214\n    elif (n == 63):\n        return 219\n    elif (n == 64):\n        return 222\n    elif (n == 65):\n        return 225\n    elif (n == 66):\n        return 229\n    elif (n == 67):\n        return 232\n    elif (n == 68):\n        return 235\n    elif (n == 69):\n        return 239\n    elif (n == 70):\n        return 242\n    elif (n == 71):\n        return 245\n    elif (n == 72):\n        return 248\n    elif (n == 73):\n        return 251\n    elif (n == 74):\n        return 254\n    elif (n == 75):\n        return 259\n    elif (n == 76):\n        return 262\n    elif (n == 77):\n        return 265\n    elif (n == 78):\n        return 268\n    elif (n == 79):\n        return 271\n    elif (n == 80):\n        return 274\n    elif (n == 81):\n        return 279\n    elif (n == 82):\n        return 282\n    elif (n == 83):\n        return 285\n    elif (n == 84):\n        return 288\n    elif (n == 85):\n        return 291\n    elif (n == 86):\n        return 294\n    elif (n == 87):\n        return 299\n    elif (n == 88):\n        return 302\n    elif (n == 89):\n        return 305\n    elif (n == 90):\n        return 308\n    elif (n == 91):\n        return 311\n    elif (n == 92):\n        return 314\n    elif (n == 93):\n        return 317\n    elif (n == 94):\n        return 320\n    elif (n == 95):\n        return 323\n    elif (n == 96):\n        return 326\n    elif (n == 97):\n        return 331\n    elif (n == 98):\n        return 334\n    elif (n == 99):\n        return 339\n    elif (n == 100):\n        return 342\n    elif (n == 101):\n        return 345\n    elif (n == 102):\n        return 348\n    elif (n == 103):\n        return 351\n    elif (n == 104):\n        return 354\n    elif (n == 105):\n        return 357\n    elif (n == 106):\n        return 360\n    elif (n == 107):\n        return 363\n    elif (n == 108):\n        return 366\n    elif (n == 109):\n        return 369\n    elif (n == 110):\n        return 372\n    elif (n == 111):\n        return 375\n    elif (n == 112):\n        return 378\n    elif (n == 113):\n        return381\n    elif (n == 114):\n        return 384\n    elif (n == 115):\n        return 389\n    elif (n == 116):\n        return 392\n    elif (n == 117):\n        return 395\n    elif (n == 118):\n        return 400\n    elif (n == 119):\n        return 403\n    elif (n == 120):\n        return 408\n    elif (n == 121):\n        return 411\n    elif (n == 122):\n        return 414\n    elif (n == 123):\n        return 417\n    elif (n == 124):\n        return 420\n    elif (n == 125):\n        return 423\n    elif (n == 126):\n        return 426\n    elif (n == 127):\n        return 431\n    elif (n == 128):\n        return 444\n    elif (n == 129):\n        return 449\n    elif (n == 130):\n        return 462\n    elif (n == 131):\n        return 465\n    elif (n == 132):\n        return 482\n    elif (n == 133):\n        return 485\n    elif (n == 134):\n        return 488\n    elif (n == 135):\n        return 491\n    elif (n == 136):\n        return 494\n    elif (n == 137):\n        return 495\n    elif (n == 138):\n        return 500\n    elif (n == 139):\n        return 504\n    elif (n == 140):\n        return 509\n    elif (n == 141):\n        return 514\n    elif (n == 142):\n        return 521\n    elif (n == 143):\n        return 524\n    elif (n == 144):\n        return 531\n    elif (n == 145):\n        return 544\n    elif (n == 146):\n        return 551\n    elif (n == 147):\n        return 564\n    elif (n == 148):\n        return 571\n    elif (n == 149):\n        return 574\n    elif (n == 150):\n        return 579\n    elif (n == 151):\n        return 582\n    e"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return n \n    if n == 1: \n        return n \n    return n * is_octagonal(n - 1) "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Write your code here.\n    if n < 0:\n        return None\n    \n    div = n // 2\n    \n    if n % 2 == 0:\n        return (div * div)\n    \n    else:\n        return ((div * div) + 1"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return n\n    if n % 2 == 0:\n        return is_octagonal(n - 1) + 2 * is_octagonal(n - 1 / 2)\n    else:\n        return 3 * is_octagonal(n - 1) + 2 * is_octagonal(n - 1 / 2) + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = 1\n    while (n-1)//3*3 <= n:\n        x+=3\n        n-=3*x\n    return x\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return n \n    elif n % 2 == 1: \n        return int(is_octagonal(n/2)) \n    else: \n        return is_octagonal(n - 1) + int(is_octagonal(n-1) + is_octagonal(n-2)) \n    \nn = int(input()) \nprint(is_octagonal(n)) "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    while (n / 10) > 0:\n        num = num * 10\n        n = n / 10\n    return nu"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n%2 == 0:\n        return is_octagonal(3*n+1)\n    elif n%2 == 1:\n        return is_octagonal(3*n+2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==1: \n        return 1\n    elif n==2: \n        return 2\n    else: \n        return is_octagonal(n-1) + 2*is_octagonal(n-2)"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary with the same key as the string, and the value as a list.\n    dictionary = defaultdict(list)\n    # Convert string to list\n    s = list(s)\n    # Loop over the string.\n    for i in range(len(s)):\n        # Append to the dictionary.\n        dictionary[s[i]].append(i+1)\n    # Loop through the dictionary.\n    for k in dictionary:\n        # Loop through the list of substrings.\n        for l in dictionary[k]:\n            # Check to see if the sum of the digits equals the length of the substring.\n            if len(k) == len(s) - l:\n                # If it does, increment the count.\n                # Add the length of the substring to a dictionary value.\n                dictionary[k].append(len(s) - l)\n    # Return the dictionary.\n    return dictionary\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    my_dict = {}\n    count = 0\n    for i in range(len(s)):\n        count += 1\n        if s[i] in my_dict:\n            my_dict[s[i]] += 1\n        else:\n            my_dict[s[i]] = 1\n    for i in range(len(s)):\n        if my_dict[s[i]]!= 1:\n            count -= 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # number of substrings that are equal to the length of the substring\n    count=0\n    \n    # iterate through the string\n    for i in range(len(s)):\n        # count how many digits there are\n        count+=len(s[i:])\n    \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d={}\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if s[i:j]==s[i:j][::-1]:\n                if s[i:j] in d:\n                    d[s[i:j]]+=1\n                else:\n                    d[s[i:j]]=1\n    return len(d)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    \n    for i in range(len(s)):\n        d[s[i]] = d[s[i]] + 1 if s[i]!= '0' else 1\n    \n    print(d)\n    return d[sum(d.values())]\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    for i in range(len(s)):\n        dic[s[i]]+=1\n    dic = dic.keys()\n    for i in range(len(dic)):\n        dic[dic[i]]-=1\n    return len(dic)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substrings(s, n):\n        if n < 0:\n            return\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        if n % 2 == 0:\n            return count_substrings(s, n//2) + count_substrings(s, n//2 + 1)\n        return count_substrings(s, n//2) + count_substrings(s, n//2 + 1)\n    \n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count = count + 1\n        else:\n            count = count + count_substrings(s, count)\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    my_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            try:\n                my_dict[s[i:j]] += 1\n            except:\n                my_dict[s[i]] += 1\n    return my_dict\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_dict = defaultdict(int)\n    for char in s:\n        if char in sub_dict:\n            sub_dict[char] += 1\n        else:\n            sub_dict[char] = 1\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Flattened(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length flattened.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Iterative(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if (i + 1) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Recursive(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    def helper(s, i, j):\n        if (i + j) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for k in range(len(s_count)):\n            sum_of_digits += int(s_count[k])\n        if sum_of_digits == n:\n            count += 1\n    for i in range(n):\n        if (i + 1) % n == 0:\n            helper(s, i, 0)\n    return count\ndef count_Substrings_Recursive_Flattened(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length flattened.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if (i + 1) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Iterative_Flattened(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length flattened.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if (i + 1) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Recursive_Iterative(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if (i + 1) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Iterative_Recursive(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length flattened.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if (i + 1) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Flattened_Iterative(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length flattened.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if (i + 1) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Flattened_Recursive(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length flattened.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if (i + 1) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Recursive_Flattened(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length flattened.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if (i + 1) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\ndef count_Substrings_Iterative_Flattened(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length flattened.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if (i + 1) % n == 0:\n            count += 1\n        s_count = s[i:i+n]\n        sum_of_digits = 0\n        for j in range(len(s_count)):\n            sum_of_digits += int(s_count[j])\n        if sum_of_digits == n:\n            count += 1\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs = sorted(xs)\n    min = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf')\n    smallest_index = None\n    for i, x in enumerate(xs):\n        if x < smallest:\n            smallest = x\n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = 0\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    smallest = xs[0]\n    for i in range(1,len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    numbers=[]\n    for x in xs:\n        if x not in numbers:\n            numbers.append(x)\n    numbers.sort()\n    return numbers[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = None\n    for i in xs:\n        if i < smallest_num:\n            smallest_num = i\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(\"\\n Smallest number in a list is:\")\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    print(smallest)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    lst = []\n    for i in range(len(xs)):\n        lst.append(xs[i])\n    lst.sort()\n    return lst[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    sorted_list = sorted(xs)\n    minimum = sorted_list[0]\n    return minimum\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # your code here\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[i][j] - test_list[i][j-1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff > max_val:\n                max_val = diff\n    return max_val\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    def max_difference(test_list):\n        '''\n        Write a function that takes in a tuple of integers and returns the maximum difference between them.\n        '''\n        if len(test_list) == 0:\n            return None\n        elif len(test_list) == 1:\n            return test_list[0]\n        elif len(test_list) == 2:\n            return test_list[0] - test_list[1]\n        elif len(test_list) == 3:\n            return test_list[0] - test_list[1] - test_list[2]\n        elif len(test_list) == 4:\n            return test_list[0] - test_list[1] - test_list[2] - test_list[3]\n        else:\n            return test_list[0] - test_list[1] - test_list[2] - test_list[3] - test_list[4]\n    return max_difference(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            temp = test_list[i] - test_list[j]\n            if temp > max:\n                max = temp\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    def get_pair(test_list):\n        return (test_list[0], test_list[1])\n    \n    def get_max_difference(test_list):\n        \n        pairs = list(map(get_pair, test_list))\n        max_difference = 0\n        max_pair = (0, 0)\n        for i in range(len(pairs)):\n            for j in range(len(pairs)):\n                if i < j:\n                    if pairs[i] - pairs[j] > max_difference:\n                        max_difference = pairs[i] - pairs[j]\n                        max_pair = pairs[i]\n                    elif pairs[i] - pairs[j] < max_difference:\n                        max_difference = pairs[j] - pairs[i]\n                        max_pair = pairs[j]\n        return max_difference, max_pair\n    \n    def find_difference(test_list):\n        '''\n        Write a function to find the maximum difference between available pairs in the given tuple list.\n        '''\n        \n        pair_difference, pair_max = get_max_difference(test_list)\n        \n        if pair_difference!= 0:\n            return (pair_max[0] + pair_max[1], pair_difference)\n        else:\n            return None\n    \n    test_list = []\n    test_list = test_list + test_list\n    \n    return find_difference(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    available_pairs = []\n    for test_item in test_list:\n        if test_item not in available_pairs:\n            available_pairs.append(test_item)\n    return available_pairs[-1] - available_pairs[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    '''\n    Your code should take in a list of tuples, and return the maximum difference in the tuples.\n    '''\n    '''\n    def max_difference(test_list):\n        max_diff = 0\n        for i in range(len(test_list)-1):\n            for j in range(i+1, len(test_list)):\n                difference = test_list[i][1] - test_list[j][1]\n                if difference > max_diff:\n                    max_diff = difference\n        return max_diff\n    '''\n    \n    '''\n    Here's your solution for part 2.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(a[1]-b[1]) for a,b in zip(test_list, test_list[1:]))\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create list of tuples\n    subjectmarks_list = []\n    for item in subjectmarks:\n        subjectmarks_list.append(tuple(item))\n    # sort\n    subjectmarks_list.sort()\n    # return list\n    return subjectmarks_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda k: k[1])\n    subjectmarks = sorted(subjectmarks, key=lambda k: k[0])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples\n    subject_marks = []\n    for subjectmarks in subjectmarks:\n        subject_marks.append(subjectmarks[1])\n    subject_marks.sort()\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    lst = []\n    for data in subjectmarks:\n        lst.append(data[1])\n    lst.sort(reverse=True)\n    return lst\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda t:t[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda k:k[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Replace pass with code\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    if data_list:\n        for x in data_list:\n            if type(x) == list:\n                result.extend(recursive_list_sum(x))\n            else:\n                result.append(x)\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    output = []\n    for item in data_list:\n        if isinstance(item, list):\n            output.extend(recursive_list_sum(item))\n        else:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Get the length of the list\n    num_elements = len(data_list)\n    # Loop through the list to sum each element.\n    result = 0\n    # For every element in the list, add it to the result.\n    for index in range(num_elements):\n        result += data_list[index]\n    # Return the result\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_of_elements = 0\n    for element in data_list:\n        if type(element) == list:\n            sum_of_elements += recursive_list_sum(element)\n        else:\n            sum_of_elements += element\n    return sum_of_elements\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_list = [x for l in data_list for x in l]\n    return data_list.__add__(data_list)\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) <= 1:\n        return data_list\n    else:\n        return data_list + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in list:\n        if i > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]>0:\n            count+=1\n    return count\ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]<0:\n            count+=1\n    return count\ndef average(list):\n    '''\n    Write a python function to compute the average of a list.\n    '''\n    sum=0\n    for i in range(len(list)):\n        sum+=list[i]\n    return sum/len(list)\ndef mode(list):\n    '''\n    Write a python function to compute the mode of a list.\n    '''\n    mode_list=[]\n    num_list=[]\n    for i in range(len(list)):\n        if list[i] not in mode_list:\n            mode_list.append(list[i])\n            num_list.append(i)\n    print('mode list:',mode_list)\n    print('mode list:',num_list)\n    if len(num_list)>0:\n        return mode_list[num_list[0]]\n    else:\n        return None\ndef menu():\n    '''\n    Write a python function to implement a simple menu of program options.\n    '''\n    print(\"\\n1) Add a new element\")\n    print(\"2) Delete a element\")\n    print(\"3) Update a element\")\n    print(\"4) Get a list of elements\")\n    print(\"5) Get an element\")\n    print(\"6) Sort an element\")\n    print(\"7) Count the number of elements\")\n    print(\"8) Average of elements\")\n    print(\"9) Mode of elements\")\n    print(\"10) Exit\")\n    print(\"\\nChoose an option: \",end=\"\")\n    op=int(input())\n    return op\ndef main():\n    '''\n    Write a python function to implement the menu of program options.\n    '''\n    print(\"\\nWelcome to the Average Program!\")\n    op=menu()\n    while op!=9:\n        if op==1:\n            print(\"\\nAdd a new element\\n\")\n            new_num=input(\"Enter a new element: \")\n            num_list.append(new_num)\n        elif op==2:\n            print(\"\\nDelete a element\\n\")\n            num_list.pop()\n        elif op==3:\n            print(\"\\nUpdate a element\\n\")\n            num_list.pop()\n            num_list.append(input(\"Enter a new element: \"))\n        elif op==4:\n            print(\"\\nGet a list of elements\\n\")\n            print(\"Enter elements: \")\n            list_of_elements=input(\"Enter elements: \")\n            list_of_elements=list_of_elements.split(\",\")\n            num_list=[]\n            for i in range(len(list_of_elements)):\n                list_of_elements[i]=int(list_of_elements[i])\n            print(\"List:\",list_of_elements)\n        elif op==5:\n            print(\"\\nGet an element\\n\")\n            print(\"Enter element: \")\n            element=input(\"Enter element: \")\n            num_list.append(element)\n        elif op==6:\n            print(\"\\nSort an element\\n\")\n            num_list.sort()\n            print(\"List:\",num_list)\n        elif op==7:\n            print(\"\\nCount the number of elements\\n\")\n            print(\"Enter elements: \")\n            list_of_elements=input(\"Enter elements: \")\n            list_of_elements=list_of_elements.split(\",\")\n            num_list=[]\n            for i in range(len(list_of_elements)):\n                list_of_elements[i]=int(list_of_elements[i])\n            print(\"List:\",list_of_elements)\n        elif op==8:\n            print(\"\\nAverage of elements\\n\")\n            print(\"Enter elements: \")\n            list_of_elements=input(\"Enter elements: \")\n            list_of_elements=list_of_elements.split(\",\")\n            num_list=[]\n            for i in range(len(list_of_elements)):\n                list_of_elements[i]=float(list_of_elements[i])\n            print(\"List:\",list_of_elements)\n        elif op==9:\n            print(\"\\nMode of elements\\n\")\n            print(\"Enter elements: \")\n            list_of_elements=input(\"Enter elements: \")\n            list_of_elements=list_of_elements.split(\",\")\n            num_list=[]\n            for i in range(len(list_of_elements)):\n                list_of_elements[i]=int(list_of_elements[i])\n            print(\"List:\",list_of_elements)\n        elif op==10:\n            print(\"\\nExit\\n\")\n        else:\n            print(\"\\nInvalid option\")\n        op=menu()\n    print(\"\\nDone!\")\nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    total_positives = 0\n    for x in list:\n        if x > 0:\n            total_positives += 1\n    return total_positives\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive=0\n    for i in list:\n        if i>0:\n            positive+=1\n    print(\"Number of positive numbers in list are\",positive)\nlist=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_num = 0\n    for i in list:\n        if i > 0:\n            positive_num += 1\n    return positive_num\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        return list.count(1) + pos_count(list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i==0:\n            count+=1\n    return count\ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i==0:\n            count+=1\n    return count\ndef average(list):\n    '''\n    Write a python function to calculate the average of all numbers in a list.\n    '''\n    sum=0\n    for i in list:\n        sum+=i\n    avg=sum/len(list)\n    return avg\ndef num_neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i<0:\n            count+=1\n    return count\ndef main():\n    list=[]\n    num=int(input(\"Enter the number of elements in a list: \"))\n    for i in range(num):\n        ele=int(input(\"Enter the element in a list: \"))\n        list.append(ele)\n    print(\"The list is: \",list)\n    print(\"The number of positive numbers: \",pos_count(list))\n    print(\"The number of negative numbers: \",neg_count(list))\n    print(\"The average of the elements: \",average(list))\n    print(\"The number of negative numbers: \",num_neg_count(list))\nmain()"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        return 180\n    if n == 181:\n        return 181\n    if n == 182:\n        return 182\n    if n == 183:\n        return 18"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    a = n\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(arr,n):\n        if n==1:\n            return 1\n        if arr[n]==0:\n            return 0\n        if n==0:\n            return 0\n        if n==1:\n            return 1\n        \n        return 1+helper(arr[1:n],n-1)\n    return helper(arr,n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<2:\n        return 1\n    else:\n        return bell_number(n-2) + bell_number(n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 3:\n        return n\n    \n    pow = 1\n    for k in range(2, n):\n        pow += 1\n        pow = (pow // 2) * 2\n        if pow >= n:\n            return pow\n    \n    return pow\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 2:\n        return n\n    if n == 3:\n        return 5\n    \n    nums = [0,1,2,3,4,5,6,7,8,9]\n    count = [0,0,0,0,0,0,0,0,0,0]\n    count[1] = (nums[1] * 2) + nums[0]\n    count[2] = (nums[0] + nums[1] + nums[2]) * 2 + nums[3]\n    count[3] = (nums[0] + nums[1] + nums[2]) * 2 + nums[3]\n    count[4] = (nums[0] + nums[1] + nums[2]) * 2 + nums[4]\n    count[5] = (nums[0] + nums[1] + nums[2]) * 2 + nums[5]\n    count[6] = (nums[0] + nums[1] + nums[2]) * 2 + nums[6]\n    count[7] = (nums[0] + nums[1] + nums[2]) * 2 + nums[7]\n    count[8] = (nums[0] + nums[1] + nums[2]) * 2 + nums[8]\n    count[9] = (nums[0] + nums[1] + nums[2]) * 2 + nums[9]\n    return count[n-1]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if(len(A)<=1): return False\n    else: return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #Your code here\n    def test(A, flag):\n        for i in range(len(A)-1):\n            if A[i]>A[i+1]:\n                flag = False\n                break\n        return flag\n    \n    return test(A, False)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if(A[0] >= A[1]):\n        print(f\"array1 is not monotonic\")\n    else:\n        print(f\"array1 is monotonic\")\n        return True\n    if(A[-1] <= A[-2]):\n        print(f\"array2 is not monotonic\")\n    else:\n        print(f\"array2 is monotonic\")\n        return True\n    \nA = [1, 2, 3, 4, 5, 6]\nis_Monotonic(A"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return False\n    elif A[0]!= A[-1]:\n        return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] < A[i - 1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # all rows have same sum or positive sum\n    # all columns have same negative sum\n    # sum of all non-negative rows or columns has at least one positive sum\n    # A is assumed to be monotonic if sum of rows and columns are positive or\n    # sum of all non-negative rows and columns is at least one positive sum\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    k = 0\n    for i in range(0,len(A)): \n        if A[i] < A[k]:\n            k = i\n    return A[k] == A[k+1]"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Your code here \n    if A[0] >= A[1] and A[0] >= A[2]: \n        print(\"First Element Is Greater than Second Element\") \n    elif A[1] >= A[0] and A[1] >= A[2]: \n        print(\"First Element Is Greater than Second Element\") \n    else: \n        print(\"First Element is not Greater than Second Element\") \n    if A[2] >= A[0] and A[2] >= A[1]: \n        print(\"Second Element Is Greater than First Element\") \n    elif A[1] >= A[0] and A[1] >= A[2]: \n        print(\"Second Element Is Greater than First Element\") \n    else: \n        print(\"Second Element is not Greater than First Element\") \n    return \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    B=len(A) \n    for i in range(B):\n        for j in range(B): \n            if A[i]>A[j]:\n                return False\n    return True \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < 2:\n        return True\n    return l[0:2] == s or l[1:2] == s\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if len(l)!= len(s):\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i] not in l:\n                return False\n        return True\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n    if s in l:\n        return True\n    elif not is_sublist(l[1:], s):\n        return False\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for x in range(0, len(s) - len(l)):\n        if s[x : x + len(l)]!= l:\n            return False\n    return True\n    \ndef find_jumps(l, s, i):\n    '''\n    Write a function that finds all possible jumps from the given list. \n    '''\n    res = []\n    for x in range(i, len(s)):\n        if s[x] in l:\n            j = l.index(s[x])\n            res.append((s[i], s[j]))\n    return res\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[0:len(s)] == s\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    # initialize the returned values to zero\n    res = []\n    \n    # loop through the list\n    for i in range(len(l)):\n        # loop through the sub list\n        for j in range(len(s)):\n            # if the sub list contains the given value\n            if s[j] in l[i]:\n                # add the index to the returned values\n                res.append(i)\n                # return the list\n                return res\n    # if the sublist does not contain any values, return the empty list\n    return re"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s.sort()\n    if s == l:\n        return True\n    else:\n        if len(s) == len(l):\n            for i in s:\n                if i in s:\n                    return True\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if l.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0 or len(l) < 2:\n        return True\n    else:\n        for i in range(1, len(l)-1):\n            if l[i] in s:\n                return True\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Count = 0\n    for i in Input:\n        if len(i)!= len(set(i)):\n            Count += 1\n    if Count == len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 1:\n        return False\n    for i in range(len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # write your code here\n    if len(Input[0]) == len(Input[1]):\n        for x in range(len(Input)):\n            if len(Input[x])!= len(Input[1]):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n        else:\n            pass\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return False\n    input_list = list(map(tuple, Input))\n    count = 0\n    for i in range(len(input_list)-1):\n        if input_list[i] == input_list[i+1]:\n            count += 1\n        else:\n            return False\n    if count == len(input_list):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    lst = []\n    i=0\n    while i < len(Input):\n        tup = []\n        j = 0\n        while j < len(Input[i]):\n            tup.append(Input[i][j])\n            j = j + 1\n        if len(tup) == len(set(tup)):\n            lst.append(tup)\n        i = i + 1\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) <= 1:\n        return False\n    if len(Input) == 2:\n        return True\n    if len(Input) == 3:\n        if Input[0] == Input[1] and Input[1] == Input[2]:\n            return True\n    else:\n        return find_equal_tuple(Input[0:2])\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    mid = length // 2\n    for i in range(length):\n        if nums[i] > nums[mid]:\n            temp = nums[i]\n            nums[i] = nums[mid]\n            nums[mid] = temp\n            mid = mid - 1\n    \n    for i in range(mid, length):\n        if nums[i] > nums[mid]:\n            temp = nums[i]\n            nums[i] = nums[mid]\n            nums[mid] = temp\n            mid = mid - 1\n    return nums\n    \n    \n    # O(nlogn) time complexity\n    # O(n) space complexity\n    # Your code here\n    \n    \n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #choosing the minimum and maximum value for the elements\n    minimum = nums[0]\n    maximum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < minimum:\n            minimum = nums[i]\n        if nums[i] > maximum:\n            maximum = nums[i]\n    #splitting the array into two halves\n    if len(nums) % 2 == 0:\n        #half the size\n        half = len(nums) // 2\n        #swapping the elements that are in the half\n        for i in range(half):\n            nums[i], nums[half-1-i] = nums[half-1-i], nums[i]\n    else:\n        #we will split the array into half\n        half = len(nums) // 2\n        #swapping the elements that are in the half\n        for i in range(half, len(nums)):\n            nums[i], nums[half+i-half] = nums[half+i-half], nums[i]\n    #sorting the two half sorted array\n    for i in range(len(nums)):\n        for j in range(len(nums)//2):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    if l == 0:\n        return\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # loop through the array, skipping\n    # the first element to be sorted\n    for i in range(len(nums)):\n        # set current value of i to\n        # its index in the sorted array\n        current = i\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combs = []\n    for i in range(len(nums)-1):\n        combs.append([nums[i],nums[i+1]])\n    combs.sort()\n    print(combs)\n    for i in range(len(combs)):\n        print(combs[i][1], end ='')\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #1. Set temp to 0\n    temp = 0\n    #2. While temp does not equal to n-1\n    while temp < n-1:\n        #3. Set the temp to the minimum position\n        temp = nums[0]\n        #4. Set the value to the position to be moved\n        for i in range(1, len(nums)):\n            if nums[i] < temp:\n                temp = nums[i]\n        #5. Swap\n        nums[temp], nums[i] = nums[i], nums[temp]\n    #6. return the sorted list\n    return nums\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # Find position of minimum value in array\n        minimum_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[minimum_index]:\n                minimum_index = j\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def swap_XY(s,x,y):\n        s[x],s[y]=s[y],s[x]\n    def  x_y_sub(s):\n        for i in range(0,len(s),2):\n            swap_XY(s,i,i+1)\n    def check_square(s):\n        for i in range(len(s)):\n            if s[i]!=s[i+1]:\n                return False\n        return True\n    return check_square(n)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq_1 = n//4\n    sq_2 = 3 * n//4\n    sq_3 = 9 * n//4\n    sq_4 = n - 2*sq_1\n    sq_5 = 3*n - sq_2\n    sq_6 = 9*n - sq_3\n    return (sq_1 == sq_2 or sq_2 == sq_3 or sq_3 == sq_4 or sq_4 == sq_5 or sq_5 == sq_6)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n * n == n\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return (n - 2*n) % 10 == 0\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    if n == 0: \n        return 0 \n    elif n < 0: \n        return 1 \n    elif n < 10: \n        return n \n    elif n < 100: \n        return n * n \n    elif n < 1000: \n        return n * n * n \n    elif n < 1000000: \n        return n * n * n * n \n    else: \n        return 1\n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40 \n    else: \n        return 50\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 10: \n        return 0 \n    elif n < 100: \n        return 10 \n    elif n < 1000: \n        return 20 \n    elif n < 10000: \n        return 30 \n    elif n < 1000000: \n        return 40"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return -1 \n    elif n < 0: \n        return -1 \n    elif n > 20: \n        return -1 \n    else: \n        return (n - 2) ** 2\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        dif_square=n//2\n        return dif_square+dif_square==n or dif_square-dif_square==n\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n >= 0):\n        print(dif_Square(abs(n-1)))\n    else:\n        print(False)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a,b = n//2, n-a//2\n    if n==2:\n        return a == b\n    elif n==3:\n        return a+b==0\n    elif a+b==0:\n        return True\n    else:\n        return False\ndef dif_Cube(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of three cubes or not.\n    '''\n    a,b,c = n//3, n//6, n-a//3\n    if n==3:\n        return a == b==c\n    elif n==4:\n        return a+b==c==0\n    elif a+b+c==0:\n        return True\n    else:\n        return False\ndef dif_Cube_Prime(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of three cubes or not.\n    '''\n    a,b,c = n//3, n//6, n-a//3\n    if n==3:\n        return a == b==c\n    elif n==4:\n        return a+b==c==0\n    elif a+b+c==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = set(colors)\n    for color in colors:\n        for pattern in patterns:\n            if color == pattern:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        for color in colors:\n            if set(pattern).issubset(set(color)):\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(patterns)):\n        if colors[i]!= patterns[i][0]:\n            return False\n        if colors[i] == patterns[i][1]:\n            return False\n        for j in range(i+1, len(patterns)):\n            if colors[j]!= patterns[i][2]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Get the pattern used\n    patterns_used = [p[0] for p in patterns]\n    \n    # Create a list of patterns\n    patterns = [[i] for i in range(len(colors))]\n    \n    # Add pattern to the pattern array\n    patterns[0].extend(patterns_used)\n    \n    # Get a tuple for the used pattern\n    used_pattern = tuple(patterns_used)\n    \n    # Get the length of the pattern\n    length = len(patterns[0])\n    \n    # Create a 1D boolean array\n    pattern_array = [False] * length\n    \n    # Set pattern_array to 1 if we can find it\n    pattern_array[used_pattern] = True\n    \n    # For every column in the first pattern\n    for pattern_ind in range(pattern_array.__len__()):\n        # If the pattern matches\n        if (pattern_array[pattern_ind]):\n            # Check if the pattern matches the rest of the patterns\n            for pattern_ind2 in range(pattern_ind + 1, pattern_array.__len__()):\n                # If we can find the pattern, we can stop\n                if (pattern_array[pattern_ind2]):\n                    # Return 1 if we can\n                    return 1\n    \n    # Return 0 if there is no match\n    return 0\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # TEST CASE: pattern.length!= patterns.length\n    if pattern.length!= len(patterns):\n        return False\n    # TEST CASE: colors.length!= patterns.length\n    if colors.length!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # define\n    patterns = sorted(patterns)\n    for pattern in patterns:\n        for color in colors:\n            for i in range(len(pattern)):\n                if pattern[i]!= color[i]:\n                    break\n            else:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepattern(pattern, colors):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Note, there is no test for this case\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if patterns[j][0] == colors[i][0]:\n                if patterns[j][1] == colors[i][1]:\n                    return True\n                else:\n                    return False\n    return False\n    \ndef main():\n    print('Enter a tuple:')\n    print('Green: (255, 0, 0)')\n    print('Red: (0, 0, 255)')\n    print('Blue: (255, 255, 0)')\n    print('Yellow: (0, 255, 255)')\n    print('Yellow: (255, 255, 0)')\n    print('Yellow: (255, 0, 0)')\n    print('Orange: (255, 165, 0)')\n    print('Pink: (255, 192, 203)')\n    print('Red: (255, 0, 0)')\n    colors = input('Enter the tuple: ').split(',')\n    patterns = input('Enter the patterns: ').split(',')\n    print(is_samepatterns(colors, patterns))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_count = 0\n    for pattern in patterns:\n        pattern_count += 1\n        for j in range(len(pattern)):\n            if not (pattern[j] in colors):\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # to find tuples which have all elements divisible by k from the given list of tuples\n    # as a set of tuples\n    set_of_tuples = set()\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    count = 0\n    for i in range(0, len(test_list)):\n        if test_list[i][0] % K == 0:\n            count += 1\n    if count == len(test_list):\n        return test_list\n    else:\n        return []\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # TODO: Write your code here\n    indices = list(map(lambda x: x[0], test_list))\n    for i in range(len(indices)):\n        if indices[i] % K!= 0:\n            return []\n    return test_lis"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Implement here\n    tuples = []\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[j][0] % K == 0:\n                tuples.append(test_list[j])\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: x[0]%K == 0, test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for a, b in test_list:\n        if a % K == 0 and b % K == 0:\n            result.append((a, b))\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for t in test_list:\n        if sum(t[1:])%K==0:\n            res.append(t)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    n = len(test_list)\n    l = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][1] % test_list[j][1] == 0:\n                l.append((test_list[i][0], test_list[j][0]))\n    if len(l) >= K:\n        return l\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if not test_list:\n        return []\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if not is_divisible_by(test_list[i], test_list[j], K):\n                result.append((test_list[i], test_list[j]))\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%10==0): \n        return False\n    else:\n        return True\n        \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Initialize a variable that will be set to zero\n    result = 0\n    # Loop through each value in the array and check to see if the number\n    # is divisible by 11\n    for x in n:\n        # Check if number is divisible by 11\n        if x % 11 == 0:\n            # If it is, set result to 1\n            result = 1\n        # If it is not divisible by 11, set result to 0\n        else:\n            result = 0\n    # If result is 1, return True\n    return result == 1\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 2 == 0:\n        print(\"It is a Divisibility\")\n    else:\n        print(\"It is NOT Divisibility\")\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    print(type(n))\n    a = n%10\n    b = n//10%10\n    print(a,b)\n    if a==b:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1,10):\n        if (n % i == 0):\n            print(\"Divisible by 11\")\n            return True\n        else:\n            print(\"Not divisible by 11\")\n            return False\ndef is_Duplicate(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1,10):\n        if (n % i == 0):\n            print(\"Number\",i,\"is divisible by 11\")\n            return True\n        else:\n            print(\"Number\",i,\"is not divisible by 11\")\n            return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%10==0: return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # your code goes here\n    if len(s)%2!= 0:\n        return False\n    if len(s) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_len = len(s)\n    if word_len % 2!= 0:\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.lower()\n    word_len = len(word)\n    \n    if word_len % 2!= 0:\n        return 'odd'\n    else:\n        return 'even'\n    \n    # if word_len % 2 == 0:\n    #     return 'even'\n    # else:\n    #     return 'odd'\n    \nprint(word_len('Womens'))\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n=0\n    for i in s:\n        if i=='a':\n            n+=1\n        else:\n            n-=1\n    if n%2==0:\n        return \"odd\"\n    else:\n        return \"even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #Initialize an empty string for storing the length of the word\n    #Then, add the length of the word to an integer variable.\n    #Check if the length of the word is odd or even\n    #Return the integer variable\n    if len(s) % 2 == 0:\n        return len(s)\n    else:\n        return len(s) + 1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_s = len(s)\n    return len_s%2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # CODE GOES HERE \n    return len(s)%2 == 0\n    "
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return \"odd\"\n    else:\n        return \"even\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n%3==1:\n        return 1\n    if n%3==2:\n        return 1\n    if n%3==0:\n        return 1\n    return 2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        print \"Invalid input. \"\n        return\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    assert n >= 0 and n <= 9, 'n must be between 0 and 9 inclusive'\n    return n*(n+1)//2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    answer = 1\n    if n == 0:\n        return 1\n    else:\n        for i in range(1, n):\n            answer = answer * (n - i)\n            answer = answer * (n - 1)\n        return answer\n    \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 9\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 12\n    elif n == 8:\n        return 13\n    elif n == 9:\n        return 14\n    elif n == 10:\n        return 15\n    elif n == 11:\n        return 16\n    elif n == 12:\n        return 17\n    elif n == 13:\n        return 18\n    elif n == 14:\n        return 19\n    elif n == 15:\n        return 20\n    elif n == 16:\n        return 21\n    elif n == 17:\n        return 22\n    elif n == 18:\n        return 23\n    elif n == 19:\n        return 24\n    elif n == 20:\n        return 25\n    elif n == 21:\n        return 26\n    elif n == 22:\n        return 27\n    elif n == 23:\n        return 28\n    elif n == 24:\n        return 29\n    elif n == 25:\n        return 30\n    elif n == 26:\n        return 31\n    elif n == 27:\n        return 32\n    elif n == 28:\n        return 33\n    elif n == 29:\n        return 34\n    elif n == 30:\n        return 35\n    elif n == 31:\n        return 36\n    elif n == 32:\n        return 37\n    elif n == 33:\n        return 38\n    elif n == 34:\n        return 39\n    elif n == 35:\n        return 40\n    elif n == 36:\n        return 41\n    elif n == 37:\n        return 42\n    elif n == 38:\n        return 43\n    elif n == 39:\n        return 44\n    elif n == 40:\n        return 45\n    elif n == 41:\n        return 46\n    elif n == 42:\n        return 47\n    elif n == 43:\n        return 48\n    elif n == 44:\n        return 49\n    elif n == 45:\n        return 50\n    elif n == 46:\n        return 51\n    elif n == 47:\n        return 52\n    elif n == 48:\n        return 53\n    elif n == 49:\n        return 54\n    elif n == 50:\n        return 55\n    elif n == 51:\n        return 56\n    elif n == 52:\n        return 57\n    elif n == 53:\n        return 58\n    elif n == 54:\n        return 59\n    elif n == 55:\n        return 60\n    elif n == 56:\n        return 61\n    elif n == 57:\n        return 62\n    elif n == 58:\n        return 63\n    elif n == 59:\n        return 64\n    elif n == 60:\n        return 65\n    elif n == 61:\n        return 66\n    elif n == 62:\n        return 67\n    elif n == 63:\n        return 68\n    elif n == 64:\n        return 69\n    elif n == 65:\n        return 70\n    elif n == 66:\n        return 71\n    elif n == 67:\n        return 72\n    elif n == 68:\n        return 73\n    elif n == 69:\n        return 74\n    elif n == 70:\n        return 75\n    elif n == 71:\n        return 76\n    elif n == 72:\n        return 77\n    elif n == 73:\n        return 78\n    elif n == 74:\n        return 79\n    elif n == 75:\n        return 80\n    elif n == 76:\n        return 81\n    elif n == 77:\n        return 82\n    elif n == 78:\n        return 83\n    elif n == 79:\n        return 84\n    elif n == 80:\n        return 85\n    elif n == 81:\n        return 86\n    elif n == 82:\n        return 87\n    elif n == 83:\n        return 88\n    elif n == 84:\n        return 89\n    elif n == 85:\n        return 90\n    elif n == 86:\n        return 91\n    elif n == 87:\n        return 92\n    elif n == 88:\n        return 93\n    elif n == 89:\n        return 94\n    elif n == 90:\n        return 95\n    elif n == 91:\n        return 96\n    elif n == 92:\n        return 97\n    elif n == 93:\n        return 98\n    elif n == 94:\n        return 99\n    elif n == 95:\n        return 100\n    elif n == 96:\n        return 101\n    elif n == 97:\n        return 102\n    elif n == 98:\n        return 103\n    elif n == 99:\n        return 104\n    elif n == 100:\n        return 105\n    elif n == 101:\n        return 106\n    elif n == 102:\n        return 107\n    elif n == 103:\n        return 108\n    elif n == 104:\n        return 109\n    elif n == 105:\n        return 110\n    elif n == 106:\n        return 111\n    elif n == 107:\n        return 112\n    elif n == 108:\n        return 113\n    elif n == 109:\n        return 114\n    elif n == 110:\n        return 115\n    elif n == 111:\n        return 116\n    elif n == 112:\n        return 117\n    elif n == 113:\n        return 118\n    elif n == 114:\n        return 119\n    elif n == 115:\n        return 120\n    elif n == 116:\n        return 121\n    elif n == 117:\n        return 122\n    elif n == 118:\n        return 123\n    elif n == 119:\n        return 124\n    elif n == 120:\n        return 125\n    elif n == 121:\n        return 126\n    elif n == 122:\n        return 127\n    elif n == 123:\n        return 128\n    elif n == 124:\n        return 129\n    elif n == 125:\n        return 130\n    elif n == 126:\n        return 131\n    elif n == 127:\n        return 132\n    elif n == 128:\n        return 133\n    elif n == 129:\n        return 134\n    elif n == 130:\n        return 135\n    elif n == 131:\n        return 136\n    elif n == 132:\n        return 137\n    elif n == 133:\n        return 138\n    elif n == 134:\n        return 139\n    elif n == 135:\n        return 140\n    elif n == 136:\n        return 141\n    elif n == 137:\n        return 142\n    elif n == 138:\n        return 143\n    elif n == 139:\n        return 144\n    elif n == 140:\n        return 145\n    elif n == 141:\n        return 146\n    elif n == 142:\n        return 147\n    elif n == 143:\n        return 148\n    elif n == 144:\n        return 149\n    elif n == 145:\n        return 150\n    elif n == 146:\n        return 151\n    elif n == 147:\n        return 152\n    elif n == 148:\n        return 153\n    elif n == 149:\n        return 154\n    elif n == 150:\n        return 155\n    elif n == 151:\n        return 156\n    elif n == 152:\n        return 157\n    elif n == 153:\n        return 158\n    elif n == 154:\n        return 159\n    elif n == 155:\n        return 160\n    elif n == 156:\n        return 161\n    elif n == 157:\n        return 162\n    elif n == 158:\n        return 163\n    elif n == 159:\n        return 164\n    elif n == 160:\n        return 165\n    elif n == 161:\n        return 166\n    elif n == 162:\n        return 167\n    elif n == 163:\n        return 168\n    elif n == 164:\n        return 169\n    elif n == 165:\n        return 170\n    elif n == 166:\n        return 171\n    elif n == 167:\n        return 172\n    elif n ="
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def get_number(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        if n == 4:\n            return 7\n        if n == 5:\n            return 11\n        if n == 6:\n            return 13\n        if n == 7:\n            return 17\n        if n == 8:\n            return 19\n        if n == 9:\n            return 23\n        if n == 10:\n            return 29\n        if n == 11:\n            return 31\n        if n == 12:\n            return 37\n        if n == 13:\n            return 41\n        if n == 14:\n            return 47\n        if n == 15:\n            return 51\n        if n == 16:\n            return 57\n        if n == 17:\n            return 61\n        if n == 18:\n            return 67\n        if n == 19:\n            return 71\n        if n == 20:\n            return 73\n        if n == 21:\n            return 79\n        if n == 22:\n            return 83\n        if n == 23:\n            return 89\n        if n == 24:\n            return 97\n        if n == 25:\n            return 101\n        if n == 26:\n            return 107\n        if n == 27:\n            return 111\n        if n == 28:\n            return 127\n        if n == 29:\n            return 131\n        if n == 30:\n            return 137\n        if n == 31:\n            return 143\n        if n == 32:\n            return 149\n        if n == 33:\n            return 153\n        if n == 34:\n            return 157\n        if n == 35:\n            return 163\n        if n == 36:\n            return 167\n        if n == 37:\n            return 171\n        if n == 38:\n            return 173\n        if n == 39:\n            return 179\n        if n == 40:\n            return 181\n        if n == 41:\n            return 183\n        if n == 42:\n            return 191\n        if n == 43:\n            return 193\n        if n == 44:\n            return 197\n        if n == 45:\n            return 203\n        if n == 46:\n            return 205\n        if n == 47:\n            return 207\n        if n == 48:\n            return 209\n        if n == 49:\n            return 211\n        if n == 50:\n            return 213\n        if n == 51:\n            return 219\n        if n == 52:\n            return 221\n        if n == 53:\n            return 223\n        if n == 54:\n            return 227\n        if n == 55:\n            return 229\n        if n == 56:\n            return 231\n        if n == 57:\n            return 233\n        if n == 58:\n            return 239\n        if n == 59:\n            return 241\n        if n == 60:\n            return 243\n        if n == 61:\n            return 247\n        if n == 62:\n            return 251\n        if n == 63:\n            return 253\n        if n == 64:\n            return 257\n        if n == 65:\n            return 259\n        if n == 66:\n            return 261\n        if n == 67:\n            return 263\n        if n == 68:\n            return 269\n        if n == 69:\n            return 271\n        if n == 70:\n            return 273\n        if n == 71:\n            return 277\n        if n == 72:\n            return 279\n        if n == 73:\n            return 281\n        if n == 74:\n            return 283\n        if n == 75:\n            return 285\n        if n == 76:\n            return 287\n        if n == 77:\n            return 289\n        if n == 78:\n            return 291\n        if n == 79:\n            return 293\n        if n == 80:\n            return 295\n        if n == 81:\n            return 297\n        if n == 82:\n            return 299\n        if n == 83:\n            return 301\n        if n == 84:\n            return 303\n        if n == 85:\n            return 307\n        if n == 86:\n            return 311\n        if n == 87:\n            return 313\n        if n == 88:\n            return 317\n        if n == 89:\n            return 319\n        if n == 90:\n            return 321\n        if n == 91:\n            return 323\n        if n == 92:\n            return 327\n        if n == 93:\n            return 331\n        if n == 94:\n            return 333\n        if n == 95:\n            return 337\n        if n == 96:\n            return 341\n        if n == 97:\n            return 343\n        if n == 98:\n            return 349\n        if n == 99:\n            return 351\n        if n == 100:\n            return 353\n        if n == 101:\n            return 357\n        if n == 102:\n            return 359\n        if n == 103:\n            return 361\n        if n == 104:\n            return 363\n        if n == 105:\n            return 365\n        if n == 106:\n            return 367\n        if n == 107:\n            return 369\n        if n == 108:\n            return 371\n        if n == 109:\n            return 373\n        if n == 110:\n            return 375\n        if n == 111:\n            return 377\n        if n == 112:\n            return 379\n        if n == 113:\n            return 383\n        if n == 114:\n            return 385\n        if n == 115:\n            return 387\n        if n == 116:\n            return 390\n        if n == 117:\n            return 391\n        if n == 118:\n            return 393\n        if n == 119:\n            return 396\n        if n == 120:\n            return 399\n        if n == 121:\n            return 410\n        if n == 122:\n            return 411\n        if n == 123:\n            return 413\n        if n == 124:\n            return 417\n        if n == 125:\n            return 420\n        if n == 126:\n            return 421\n        if n == 127:\n            return 423\n        if n == 128:\n            return 427\n        if n == 129:\n            return 428\n        if n == 130:\n            return 429\n        if n == 131:\n            return 431\n        if n == 132:\n            return 433\n        if n == 133:\n            return 436\n        if n == 134:\n            return 439\n        if n == 135:\n            return 451\n        if n == 136:\n            return 453\n        if n == 137:\n            return 454\n        if n == 138:\n            return 457\n        if n == 139:\n            return 461\n        if n == 140:\n            return 463\n        if n == 141:\n            return 466\n        if n == 142:\n            return 469\n        if n == 143:\n            return 470\n        if n == 144:\n            return 471\n        if n == 145:\n            return 473\n        if n == 146:\n            return 476\n        if n == 147:\n            return 479\n        if n == 148:\n            return 481\n        if n == 149:\n            return 483\n        if n == 150:\n            return 485\n        if n == 151:\n            return 486\n        if n == 152:\n            return 487\n        if n == 153:\n            return 490\n        if n == 154:\n            return 491\n        if n == 155:\n            return 493\n        if n == 156:\n            return 496\n        if n == 157:\n            return 497\n        if n == 158:\n            return 498\n        if n == 159:\n            return 499\n        if n == 160:\n            return 500\n        if n == 161:\n            return 501\n        if n == 162:\n            return 503\n        if n == 163:\n            return 505\n        if n == 164:\n            return 507\n        if n == 165:\n            return 510\n        if n == 166:\n            return 511\n        if n == 167:\n            return 512\n        if n == 168:\n            return 519\n        if n == 169:\n            return 520\n        if n == 170:\n            return 521\n        if n == 171:\n            return 523\n        if n == 172:\n            return 524\n        if n == 173:\n            return 525\n        if n == 174:\n            return 526\n        if n == 175:\n            return 527\n        if n == 176:\n            return 528\n        if n == 177:\n            return 529\n        if n == 178:\n            return 530\n        if n == 179:\n            return 531\n        i"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    # Your code here\n    answer = 0\n    for i in range(1,n+1):\n        answer = answer*(n-i)\n        \n    return answer\n    \ndef main():\n    n = int(input(\"Input a number of tetrahedra: \"))\n    print(\"The tetrahedral number is\", tetrahedral_number(n))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Corner case:\n    if n < 0:\n        return -1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    \n    # Iterate through all the possible values\n    possible_values = [0, 1] + [i for i in range(2, n+1)]\n    \n    # Assign each possible value to a variable\n    result = possible_values[0]\n    for value in possible_values[1:]:\n        result = tetrahedral_number(value) + tetrahedral_number(result)\n    return result\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = math.pi * (r ** 3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    v = (2*pi*r**2)*math.sqrt(4*r**3)\n    print(f\"Volume of sphere is {v}\")\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r <= 1:\n        return math.pi * (r**3)\n    else:\n        # formula for calculating volume of sphere with radius r\n        volume_r = math.pi * (r**3)\n        for i in range(2, int(math.sqrt(r))):\n            if r % i == 0:\n                return math.pi * (r**3)\n        volume_r = volume_r + math.pi * (r**3)\n        return volume_r\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4*3.14*r*r,1)\ndef area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4*3.14*r*r,1)\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4*3.14*r,1)\ndef volume_cylinder(r,h):\n    '''\n    Write a function that calculates and returns the volume of a cylinder.\n    '''\n    return round(4*3.14*r*r*h,1)\ndef area_cylinder(r,h):\n    '''\n    Write a function that calculates and returns the volume of a cylinder.\n    '''\n    return round(4*3.14*r*r*h,1)\ndef perimeter_cylinder(r,h):\n    '''\n    Write a function that calculates and returns the volume of a cylinder.\n    '''\n    return round(4*3.14*r*r*h,1)\ndef volume_trapezoid(r):\n    '''\n    Write a function that calculates and returns the volume of a trapezoid.\n    '''\n    return round(4*3.14*r*r,1)\ndef area_trapezoid(r):\n    '''\n    Write a function that calculates and returns the volume of a trapezoid.\n    '''\n    return round(4*3.14*r,1)\ndef perimeter_trapezoid(r):\n    '''\n    Write a function that calculates and returns the volume of a trapezoid.\n    '''\n    return round(4*3.14*r,1)\ndef volume_quadric(r):\n    '''\n    Write a function that calculates and returns the volume of a quadric.\n    '''\n    return round(4*3.14*r*r,1)\ndef area_quadric(r):\n    '''\n    Write a function that calculates and returns the volume of a quadric.\n    '''\n    return round(4*3.14*r,1)\ndef perimeter_quadric(r):\n    '''\n    Write a function that calculates and returns the volume of a quadric.\n    '''\n    return round(4*3.14*r,1)\ndef volume_ellipsoid(r):\n    '''\n    Write a function that calculates and returns the volume of a ellipsoid.\n    '''\n    return round(4*3.14*r*r,1)\ndef area_ellipsoid(r):\n    '''\n    Write a function that calculates and returns the volume of a ellipsoid.\n    '''\n    return round(4*3.14*r,1)\ndef perimeter_ellipsoid(r):\n    '''\n    Write a function that calculates and returns the volume of a ellipsoid.\n    '''\n    return round(4*3.14*r,1)\ndef volume_square(r):\n    '''\n    Write a function that calculates and returns the volume of a square.\n    '''\n    return round(4*3.14*r,1)\ndef area_square(r):\n    '''\n    Write a function that calculates and returns the volume of a square.\n    '''\n    return round(4*3.14*r,1)\ndef perimeter_square(r):\n    '''\n    Write a function that calculates and returns the volume of a square.\n    '''\n    return round(4*3.14*r,1)\ndef volume_dodecahedron(r):\n    '''\n    Write a function that calculates and returns the volume of a dodecahedron.\n    '''\n    return round(4*3.14*r*r,1)\ndef area_dodecahedron(r):\n    '''\n    Write a function that calculates and returns the volume of a dodecahedron.\n    '''\n    return round(4*3.14*r,1)\ndef perimeter_dodecahedron(r):\n    '''\n    Write a function that calculates and returns the volume of a dodecahedron.\n    '''\n    return round(4*3.14*r,1)\ndef volume_rectangle(r):\n    '''\n    Write a function that calculates and returns the volume of a rectangle.\n    '''\n    return round(4*3.14*r*r,1)\ndef area_rectangle(r):\n    '''\n    Write a function that calculates and returns the volume of a rectangle.\n    '''\n    return round(4*3.14*r,1)\ndef perimeter_rectangle(r):\n    '''\n    Write a function that calculates and returns the volume of a rectangle.\n    '''\n    return round(4*3.14*r,1)\ndef volume_sphere(r):\n    '''\n    Write a function that calculates and returns the volume of a sphere.\n    '''\n    return round(4*3.14*r,1)\ndef area_sphere(r):\n    '''\n    Write a function that calculates and returns the volume of a sphere.\n    '''\n    return round(4*3.14*r,1)\ndef perimeter_sphere(r):\n    '''\n    Write a function that calculates and returns the volume of a sphere.\n    '''\n    return round(4*3.14*r,1)\ndef volume_cylinder(r,h):\n    '''\n    Write a function that calculates and returns the volume of a cylinder.\n    '''\n    return round(4*3.14*r*r*h,1)\ndef area_cylinder(r,h):\n    '''\n    Write a function that calculates and returns the volume of a cylinder.\n    '''\n    return round(4*3.14*r*r*h,1)\ndef perimeter_cylinder(r,h):\n    '''\n    Write a function that calculates and returns the volume of a cylinder.\n    '''\n    return round(4*3.14*r*r*h,1)\ndef volume_trapezoid(r):\n    '''\n    Write a function that calculates and returns the volume of a trapezoid.\n    '''\n    return round(4*3.14*r*r,1)\ndef area_trapezoid(r):\n    '''\n    Write a function that calculates and returns the volume of a trapezoid.\n    '''\n    return round(4*3.14*r,1)\ndef perimeter_trapezoid(r):\n    '''\n    Write a function that calculates and returns the volume of a trapezoid.\n    '''\n    return round(4*3.14*r,1)\ndef volume_quadric(r):\n    '''\n    Write a function that calculates and returns the volume of a quadric.\n    '''\n    return round(4*3.14*r,1)\ndef area_quadric(r):\n    '''\n    Write a function that calculates and returns the volume of a quadric.\n    '''\n    return round(4*3.14*r,1)\ndef perimeter_quadric(r):\n    '''\n    Write a function that calculates and returns the volume of a quadric.\n    '''\n    return round(4*3.14*r,1)\ndef volume_ellipsoid(r):\n    '''\n    Write a function that calculates and returns the volume of a ellipsoid.\n    '''\n    return round(4*3.14*r*r,1)\ndef area_ellipsoid(r):\n    '''\n    Write a function that calculates and returns the volume of a ellipsoid.\n    '''\n    return round(4*3.14*r*r,1)\ndef perimeter_ellipsoid(r):\n    '''\n    Write a function that calculates and returns the volume of a ellipsoid.\n    '''\n    return round(4*3.14*r*r,1)\ndef volume_square(r):\n    '''\n    Write a function that calculates and returns the volume of a square.\n    '''\n    return round(4*3.14*r,1)\ndef area_square(r):\n    '''\n    Write a function that calculates and returns the volume of a square.\n    '''\n    return round(4*3.14*r,1"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = 4 * math.pi * (r**2)\n    return a\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(\"volume of sphere is\",math.pi*(r**3)/6)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Volume of a sphere given by pi*r^3\n    return math.pi*r*r*3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r**3*6.283185307179586\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    arr = []\n    for i in strr:\n        arr.append(ord(i))\n    arr.sort(reverse=True)\n    return chr(int(arr[0])%26+65)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    my_list = list(strr)\n    result_list = []\n    for i in range(len(my_list)):\n        result_list.append(chr(int(my_list[i]) % 26 + 65))\n    final_list = list(set(result_list))\n    return final_list\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    dictionary = {\n        'a': '0',\n        'b': '1',\n        'c': '2',\n        'd': '3',\n        'e': '4',\n        'f': '5',\n        'g': '6',\n        'h': '7',\n        'i': '8',\n        'j': '9',\n        'k': 'a',\n        'l': 'b',\n        'm': 'c',\n        'n': 'd',\n        'o': 'e',\n        'p': 'f',\n        'q': 'g',\n        'r': 'h',\n        's': 'i',\n        't': 'j',\n        'u': 'k',\n        'v': 'l',\n        'w':'m',\n        'x': 'n',\n        'y': 'o',\n        'z': 'p'\n    }\n    if not strr:\n        return ''\n    elif not strr[0].isalpha():\n        return strr\n    elif not strr[0] in dictionary:\n        return ''\n    else:\n        return strr[0] + get_Char(strr[1:])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(strr,base=10)%26 + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    char_map = dict([(i, ascii[ord(i) % len(ascii)]) for i in strr])\n    return char_map[ord(strr[0]) % len(ascii)]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = []\n    for i in range(len(strr)):\n        result.append(chr(ord(strr[i]) % 26 + 65))\n    return ''.join(result)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chars = []\n    strr = strr.lower()\n    \n    for i in range(len(strr)):\n        chars.append(ord(strr[i]) % 65)\n        \n    return ''.join(chars)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for i in range(0, len(strr), 1):\n        char_list.append(ord(strr[i]))\n    return char_list\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # the function return True if the string is found else return False.\n    def is_char(strr):\n        if len(strr) == 1:\n            return True\n        if strr[0]!= strr[-1]:\n            return False\n        else:\n            for i in range(len(strr)):\n                if strr[i]!= chr(ord(strr[i]) % 26 + ord('A')):\n                    return False\n            return True\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ret = \"\"\n    for c in strr:\n        ret += chr(ord(c) % 26 + ord('A'))\n    return ret\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Pre-Process: \n    # print('n =',n)\n    # print('self.newman = ', self.newman)\n    # print('self.newman[', n, '] = ', self.newman[n])\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        return 180\n    if n == 181:\n        return 181\n    if n == 182:\n        return 182\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [0] * n\n    m = 2 * n - 2\n    \n    # getting the values from the newman sequence\n    for i in range(m):\n        a[i] = n % m\n        n //= m\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Base Cases\n    if n == 0 or n == 1:\n        return n\n    \n    # Base Case\n    if n > 1:\n        return (n * sequence(n-1))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n<=0: \n        return 0\n    if n==1: \n        return 1\n    if n==2: \n        return 1\n    \n    return sequence(n-1) + sequence(n-2) \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = []\n    b = []\n    c = []\n    d = []\n    for i in range(n):\n        a.append(int(input('Enter the first number: ')))\n        b.append(int(input('Enter the second number: ')))\n        c.append(int(input('Enter the third number: ')))\n        d.append(int(input('Enter the fourth number: ')))\n    return a, b, c, d\n    \n    \n    \n    \ndef compare(a, b, c, d):\n    '''\n    Write a function to test the equality of the numbers.\n    '''\n    if a == b and b == c and c == d:\n        return 'Equation satisfied'\n    else:\n        return 'Not the right number'\n        \n    \ndef main():\n    '''\n    Write a function that checks whether the newman conway sequence is\n    sufficient to solve the given equation.\n    '''\n    a, b, c, d = sequence(7)\n    print(compare(a, b, c, d))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Write your code here\n    return n*3+1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = 0\n    while n!= s:\n        if n == 0:\n            return n\n        else:\n            s = n - 1\n            n = n * 2\n    return n\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = '10'\n    if n == 1:\n        return a[-1]\n    for i in range(len(a)-n):\n        if a[i:i+n]==a[i+n-1:i+n+1]:\n            return a[i]\n    return a[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sequence(n-1)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # TODO: Complete this function by calculating the surface area\n    # of a sphere, given the radius\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3 * (r**3)) * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14*r*r*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Write your code here\n    return round(2 * math.pi * r ** 3, 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    return (4*math.pi*(r**3))\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    return (4*math.pi*(r**3)*math.pi)\n    \ndef surface_area_cone(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    \n    return (surfacearea_sphere(r1)*surfacearea_sphere(r2))/2\n    \ndef volume_cone(r1,r2):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    return volume_sphere(r1)*volume_sphere(r2)\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef volume_sphere_dipole(r):\n    '''\n    Write a function to find the volume of a sphere, with a dipole.\n    '''\n    \n    return volume_sphere(r)\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef surface_area_cone_dipole(r1,r2):\n    '''\n    Write a function to find the surface area of a cone, with a dipole.\n    '''\n    \n    return (surface_area_cone(r1,r2)*surface_area_cone(r2,r1))\n    \ndef volume_cone_dipole(r1,r2):\n    '''\n    Write a function to find the volume of a cone, with a dipole.\n    '''\n    \n    return volume_cone(r1,r2)*volume_cone(r2,r1)\n    \ndef surface_area_cone_dipole(r1,r2):\n    '''\n    Write a function to find the surface area of a cone, with a dipole.\n    '''\n    \n    return (surface_area_cone(r1,r2)*surface_area_cone(r2,r1))\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef volume_sphere_dipole(r):\n    '''\n    Write a function to find the volume of a sphere, with a dipole.\n    '''\n    \n    return volume_sphere(r)\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef surface_area_cone_dipole(r1,r2):\n    '''\n    Write a function to find the surface area of a cone, with a dipole.\n    '''\n    \n    return (surface_area_cone(r1,r2)*surface_area_cone(r2,r1))\n    \ndef volume_cone_dipole(r1,r2):\n    '''\n    Write a function to find the volume of a cone, with a dipole.\n    '''\n    \n    return volume_cone(r1,r2)*volume_cone(r2,r1)\n    \ndef surface_area_cone_dipole(r1,r2):\n    '''\n    Write a function to find the surface area of a cone, with a dipole.\n    '''\n    \n    return (surface_area_cone(r1,r2)*surface_area_cone(r2,r1))\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef volume_sphere_dipole(r):\n    '''\n    Write a function to find the volume of a sphere, with a dipole.\n    '''\n    \n    return volume_sphere(r)\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef surface_area_cone_dipole(r1,r2):\n    '''\n    Write a function to find the surface area of a cone, with a dipole.\n    '''\n    \n    return (surface_area_cone(r1,r2)*surface_area_cone(r2,r1))\n    \ndef volume_cone_dipole(r1,r2):\n    '''\n    Write a function to find the volume of a cone, with a dipole.\n    '''\n    \n    return volume_cone(r1,r2)*volume_cone(r2,r1)\n    \ndef surface_area_cone_dipole(r1,r2):\n    '''\n    Write a function to find the surface area of a cone, with a dipole.\n    '''\n    \n    return (surface_area_cone(r1,r2)*surface_area_cone(r2,r1))\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef volume_sphere_dipole(r):\n    '''\n    Write a function to find the volume of a sphere, with a dipole.\n    '''\n    \n    return volume_sphere(r)\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef surface_area_cone_dipole(r1,r2):\n    '''\n    Write a function to find the surface area of a cone, with a dipole.\n    '''\n    \n    return (surface_area_cone(r1,r2)*surface_area_cone(r2,r1))\n    \ndef volume_cone_dipole(r1,r2):\n    '''\n    Write a function to find the volume of a cone, with a dipole.\n    '''\n    \n    return volume_cone(r1,r2)*volume_cone(r2,r1)\n    \ndef surface_area_cone_dipole(r1,r2):\n    '''\n    Write a function to find the surface area of a cone, with a dipole.\n    '''\n    \n    return (surface_area_cone(r1,r2)*surface_area_cone(r2,r1))\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef volume_sphere_dipole(r):\n    '''\n    Write a function to find the volume of a sphere, with a dipole.\n    '''\n    \n    return volume_sphere(r)\n    \ndef surface_area_sphere_dipole(r):\n    '''\n    Write a function to find the surface area of a sphere, with a dipole.\n    '''\n    \n    return (4*math.pi*(r**3)*(r**2))\n    \ndef surface_are"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*(math.pi)*r*r\n    print(area)\n    return area\ndef area_of_circle(r):\n    '''\n    Write a function that finds the area of a circle.\n    '''\n    area = (4/3)*math.pi*(r*r)\n    print(area)\n    return area\ndef area_of_circle_or_square(r):\n    '''\n    Write a function that finds the area of a circle or a square.\n    '''\n    area = (4/3)*math.pi*(r*r)\n    print(area)\n    return area\ndef area_of_square(r):\n    '''\n    Write a function that finds the area of a square.\n    '''\n    area = (4/3)*(math.pi)*(r*r)\n    print(area)\n    return area\ndef perimeter_circle(r):\n    '''\n    Write a function that finds the perimeter of a circle.\n    '''\n    perimeter = 4/3*(math.pi)*r*r\n    print(perimeter)\n    return perimeter\ndef perimeter_of_square(r):\n    '''\n    Write a function that finds the perimeter of a square.\n    '''\n    perimeter = 4/3*math.pi*(r*r)\n    print(perimeter)\n    return perimeter\ndef perimeter_of_circle(r):\n    '''\n    Write a function that finds the perimeter of a circle.\n    '''\n    perimeter = 4/3*math.pi*r*r\n    print(perimeter)\n    return perimeter\ndef perimeter_of_circle_or_square(r):\n    '''\n    Write a function that finds the perimeter of a circle or a square.\n    '''\n    perimeter = 4/3*math.pi*(r*r)\n    print(perimeter)\n    return perimeter\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function that finds the area of a triangle.\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        print(area)\n    else:\n        print(\"Invalid Triangle\")\ndef area_of_triangle_or_square(a,b,c):\n    '''\n    Write a function that finds the area of a triangle or a square.\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (math.sqrt(s*(s-a)*(s-b)*(s-c)))\n        print(area)\n    else:\n        print(\"Invalid Triangle\")\ndef sum_of_numbers(n):\n    '''\n    Write a function that returns the sum of a given n number of digits.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum = sum + digit\n        n = n // 10\n    return sum\ndef sum_of_numbers_of_all_digits(n):\n    '''\n    Write a function that returns the sum of a given n number of digits.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum = sum + digit\n        n = n // 10\n    return sum\ndef square_root_of_a_number(n):\n    '''\n    Write a function that returns the square root of a given number.\n    '''\n    if n > 0:\n        result = (math.pow(n,0.5))\n        print(result)\n    else:\n        print(\"Invalid number\")\ndef square_root_of_a_number_of_all_digits(n):\n    '''\n    Write a function that returns the square root of a given number.\n    '''\n    result = (math.pow(n,0.5))\n    return result\ndef prime_factorize(n):\n    '''\n    Write a function that returns a tuple of prime factors for a given number.\n    '''\n    result = ()\n    while n > 0:\n        i = 0\n        while n % 10 > i:\n            i = i + 1\n            n = n // 10\n        result = result + (n, )\n        if n == 1:\n            break\n    return result\ndef is_prime(n):\n    '''\n    Write a function that returns True if a number is prime, False otherwise.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0:\n                return False\n        return True\ndef prime_factorize_of_all_numbers(n):\n    '''\n    Write a function that returns a tuple of prime factors for a given number.\n    '''\n    result = ()\n    for i in range(2, n):\n        if is_prime(i):\n            result = result + (i,)\n    return result\ndef count_digits(n):\n    '''\n    Write a function that returns the number of digits in a given number.\n    '''\n    if n < 10:\n        return 1\n    else:\n        return count_digits(n//10) + 1\ndef factorial_of_prime_factors(n):\n    '''\n    Write a function that returns the factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Please enter a positive number\")\n    else:\n        fact = 1\n        while n!= 1:\n            if n % 2 == 0:\n                fact *= 2\n                n = n//2\n            else:\n                fact = fact * n\n                n = n - 1\n        return fact\ndef factorial_of_prime_factors_of_all_numbers(n):\n    '''\n    Write a function that returns the factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Please enter a positive number\")\n    else:\n        fact = 1\n        while n!= 1:\n            if n % 2 == 0:\n                fact *= 2\n                n = n//2\n            else:\n                fact = fact * n\n                n = n - 1\n        return fact\ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of digits in a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return sum_of_digits(n//10) + n%10\ndef sum_of_digits_of_all_numbers(n):\n    '''\n    Write a function that returns the sum of digits in a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return sum_of_digits_of_all_numbers(n//10) + n%10\ndef sum_of_digits_of_prime_factors(n):\n    '''\n    Write a function that returns the sum of digits of a number\n    '''\n    if n < 0:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return sum_of_digits_of_prime_factors(n//10) + n%10\ndef sum_of_digits_of_prime_factors_of_all_numbers(n):\n    '''\n    Write a function that returns the sum of digits of a number\n    '''\n    if n < 10:\n        return n\n    else:\n        return sum_of_digits_of_prime_factors_of_all_numbers(n//10) + n%10\ndef is_prime_factors(n):\n    '''\n    Write a function that returns True if a number is prime factor, False otherwise.\n    '''\n    if n < 10:\n        return True\n    else:\n        for i in range(2, math.floor(math.sqrt(n)) + 1):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime_factors_of_al"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return pi * (r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return pi * (r**3)\ndef volume_cylinder(r,l):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    return l * math.pi * r**2\ndef volume_cone(r,h):\n    '''\n    Write a function that finds the volume of a cone.\n    '''\n    return (4 * math.pi * r**2) * (h**3)\ndef volume_cylinder2(r,l):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    return (4 * math.pi * r**2) * (l**3)\ndef volume_sphere2(r):\n    '''\n    Write a function that finds the volume of a sphere.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_cone2(r,h):\n    '''\n    Write a function that finds the volume of a cone.\n    '''\n    return (4 * math.pi * r**2) * (h**3)\ndef volume_cylinder3(r,l):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    return (4 * math.pi * r**2) * (l**3)\ndef volume_cone3(r,h):\n    '''\n    Write a function that finds the volume of a cone.\n    '''\n    return (4 * math.pi * r**2) * (h**3)\ndef volume_circle(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_square(r):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return r**2\ndef volume_rectangle(a,b):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return a*b\ndef volume_circle2(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_square2(r):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return r**2\ndef volume_rectangle2(a,b):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a * b)\ndef volume_circle3(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_circle4(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**3)\ndef volume_square3(r):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_square4(a):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return a**2\ndef volume_rectangle3(a,b):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return a*b\ndef volume_circle5(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_circle6(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**3)\ndef volume_square5(a):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a**2)\ndef volume_square6(a):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a**3)\ndef volume_rectangle4(a,b):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a * b)\ndef volume_circle7(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_circle8(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**3)\ndef volume_circle9(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**4)\ndef volume_square7(a):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a**2)\ndef volume_square8(a):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a**3)\ndef volume_rectangle5(a,b):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a * b)\ndef volume_circle10(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_circle11(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**3)\ndef volume_circle12(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**4)\ndef volume_square9(a):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a**2)\ndef volume_square10(a):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a**3)\ndef volume_rectangle6(a,b):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a * b)\ndef volume_circle12(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_circle13(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**3)\ndef volume_circle14(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**4)\ndef volume_square9(a):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a**2)\ndef volume_square10(a):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a**3)\ndef volume_rectangle7(a,b):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    return (4 * math.pi * a * b)\ndef volume_circle15(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**2)\ndef volume_circle16(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math.pi * r**3)\ndef volume_circle17(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    return (4 * math"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(n,sum):\n        if (sum == 0):\n            return 1\n        elif (sum % 2 == 0):\n            return centered_hexagonal_number_helper(n-1,sum/2) + centered_hexagonal_number_helper(n-1,sum/2+1)\n        else:\n            return centered_hexagonal_number_helper(n-1,sum/2+1) + centered_hexagonal_number_helper(n-1,sum/2)\n    return centered_hexagonal_number_helper(n,int(n**(1/2)))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n+1) * (n+2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #Your code here\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # I: 1, 2, 4, 6, 9, 12\n    # II: 1, 2, 4, 6, 8, 10\n    # III: 1, 2, 4, 6, 8, 9\n    # IV: 1, 2, 4, 6, 10, 12\n    # V: 1, 2, 4, 6, 10, 11\n    # VI: 1, 2, 4, 6, 12, 13\n    # VII: 1, 2, 4, 6, 12, 14\n    # VIII: 1, 2, 4, 6, 14, 15\n    # IX: 1, 2, 4, 6, 16, 17\n    # X: 1, 2, 4, 6, 18, 19\n    # XI: 1, 2, 4, 6, 20, 21\n    # IXI: 1, 2, 4, 6, 22, 23\n    # XIX: 1, 2, 4, 6, 24, 25\n    # XIXI: 1, 2, 4, 6, 26, 27\n    # XIXII: 1, 2, 4, 6, 28, 29\n    # XIXIII: 1, 2, 4, 6, 30, 31\n    # XIXIV: 1, 2, 4, 6, 32, 33\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    c = int(n/6)\n    return (c-n//6)*3-c\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = None\n    if n >= 9:\n        return result\n    if n < 9:\n        result = 0\n    for i in range(0,n,3):\n        result = result + i * 6\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return n * (n - 1) / 2\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict(dict1, **dict2, **dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # compare the keys of the dicts in order, if not then check if the key is in the first dict\n    # add the value if not then add the value\n    if len(dict1) == 0:\n        # if the dict1 is empty then add the keys in dict2 to the first dict\n        # check if the dict2 is not empty\n        if len(dict2) > 0:\n            # if dict2 is not empty then check if the keys in dict2 are not in dict1\n            if len(dict2.keys()) > 0:\n                # if the keys in dict2 are not in dict1 then add the value in dict2\n                # compare the values in dict2 with the value in dict1\n                for key, value in dict2.items():\n                    if key not in dict1:\n                        # if dict2 is not empty then add the value in dict2 to the first dict\n                        dict1[key] = value\n    elif len(dict2) == 0:\n        # if the dict2 is empty then add the keys in dict1 to the first dict\n        # check if the dict1 is not empty\n        if len(dict1.keys()) > 0:\n            # if dict1 is not empty then check if the keys in dict1 are not in dict2\n            if len(dict1.keys()) > 0:\n                # if the keys in dict1 are not in dict2 then add the value in dict1\n                # compare the values in dict1 with the value in dict2\n                for key, value in dict1.items():\n                    if key not in dict2:\n                        # if dict1 is not empty then add the value in dict1 to the first dict\n                        dict1[key] = value\n    elif len(dict1) == 0:\n        # if the dict1 is empty then add the keys in dict2 to the first dict\n        # check if the dict2 is not empty\n        if len(dict2.keys()) > 0:\n            # if dict2 is not empty then add the keys in dict2 to the first dict\n            # compare the values in dict2 with the value in dict1\n            for key, value in dict2.items():\n                if key not in dict1:\n                    # if dict2 is not empty then add the value in dict2 to the first dict\n                    dict1[key] = value\n    # now we have to merge the dicts\n    # if the dict1 is empty then add the keys in dict2 to the first dict\n    # compare the values in dict1 with the value in dict2\n    # add the value if not then add the value in dict2\n    # if dict1 and dict2 are not empty then add the keys in dict1 to the first dict\n    # compare the values in dict1 with the values in dict2\n    # add the value if not then add the value in dict2 to the first dict\n    # if dict1 and dict2 are empty then add the keys in dict1 to the first dict\n    # compare the values in dict1 with the value in dict2\n    # add the value if not then add the value in dict2 to the first dict\n    if len(dict1) == 0:\n        # if dict1 is not empty then add the keys in dict2 to the first dict\n        # check if the dict2 is not empty\n        if len(dict2) > 0:\n            # if dict2 is not empty then add the keys in dict2 to the first dict\n            # compare the values in dict2 with the values in dict1\n            for key, value in dict2.items():\n                if key not in dict1:\n                    # if dict2 is not empty then add the value in dict2 to the first dict\n                    dict1[key] = value\n    elif len(dict2) == 0:\n        # if dict2 is not empty then add the keys in dict1 to the first dict\n        # check if the dict1 is not empty\n        if len(dict1.keys()) > 0:\n            # if dict1 is not empty then add the keys in dict1 to the first dict\n            # compare the values in dict1 with the values in dict2\n            for key, value in dict1.items():\n                if key not in dict2:\n                    # if dict1 is not empty then add the value in dict1 to the first dict\n                    dict1[key] = value\n    elif len(dict1) == 0:\n        # if dict1 is not empty then add the keys in dict2 to the first dict\n        # check if the dict2 is not empty\n        if len(dict2.keys()) > 0:\n            # if dict2 is not empty then add the keys in dict2 to the first dict\n            # compare the values in dict2 with the values in dict1\n            for key, value in dict2.items():\n                if key not in dict1:\n                    # if dict2 is not empty then add the value in dict2 to the first dict\n                    dict1[key] = value\n    return dict1\ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    # compare the keys of the dicts in order, if not then check if the key is in the first dict\n    # add the value if not then add the value\n    if len(dict1) == 0:\n        # if the dict1 is empty then add the keys in dict2 to the first dict\n        # check if the dict2 is not empty\n        if len(dict2) > 0:\n            # if dict2 is not empty then add the keys in dict2 to the first dict\n            # compare the values in dict2 with the values in dict1\n            for key, value in dict2.items():\n                if key not in dict1:\n                    # if dict2 is not empty then add the value in dict2 to the first dict\n                    dict1[key] = value\n    elif len(dict2) == 0:\n        # if the dict2 is empty then add the keys in dict1 to the first dict\n        # check if the dict1 is not empty\n        if len(dict1.keys()) > 0:\n            # if dict1 is not empty then add the keys in dict1 to the first dict\n            # compare the values in dict1 with the values in dict2\n            for key, value in dict1.items():\n                if key not in dict2:\n                    # if dict1 is not empty then add the value in dict1 to the first dict\n                    dict1[key] = value\n    elif len(dict1) == 0:\n        # if the dict1 is empty then add the keys in dict2 to the first dict\n        # check if the dict2 is not empty\n        if len(dict2.keys()) > 0:\n            # if dict2 is not empty then add the keys in dict2 to the first dict\n            # compare the values in dict2 with the values in dict1\n            for key, value in dict2.items():\n                if key not in dict1:\n                    # if dict2 is not empty then add the value in dict2 to the first dict\n                    dict1[key] = value\n    elif len(dict1) == 0:\n        # if the dict1 is empty then add the keys in dict2 to the first dict\n        # check if the dict2 is not empty\n        if len(dict2.keys()) > 0:\n            # if dict2 is not empty then add the keys in dict2 to the first dict\n            # compare the values in dict2 with the values in dict1\n            for key, value in dict2.items():\n                if key not in dict1:\n                    # if dict2 is not empty then add the value in dict2 to the first dict\n                    dict1[key] = value\n    elif len(dict1) == 0:\n        # if the dict1 is empty then add the keys in dict2 to the first dict\n        # check if the dict2 is not empty\n        if len(dict2.keys()) > 0:\n            # if dict2 is not empty then add the keys in dict2 to the first dict\n            # compare the values in dict2 with the values in dict1\n            for key, value in dict2.items():\n                if key not in dict1:\n                    # if dict2 is not empty then add the value in dict2 to the first dict\n                    dict1[key] = value\n    # now we have to merge the dicts\n    # if the dict1 is empty then add the keys in dict2 to the first dict\n    # compare the values in dict1 with the values in dict2\n    # add the value if not then add the value in dict2 to the first dict\n    if len(dict1) == 0:\n        # if dict1 is not empty then add the key"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # dictionary 1\n    d1 = dict1\n    # dictionary 2\n    d2 = dict2\n    # dictionary 3\n    d3 = dict3\n    \n    # to be able to convert both dictionaries to a set\n    d1 = {k: v for k, v in d1.items() if v is not None}\n    d2 = {k: v for k, v in d2.items() if v is not None}\n    d3 = {k: v for k, v in d3.items() if v is not None}\n    \n    # merge dictionaries\n    d = d1.update(d2)\n    d.update(d3)\n    \n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result={}\n    #extracting keys from dictionary1\n    dict1_keys=list(dict1.keys())\n    dict1_values=list(dict1.values())\n    #extracting keys from dictionary2\n    dict2_keys=list(dict2.keys())\n    dict2_values=list(dict2.values())\n    #extracting keys from dictionary3\n    dict3_keys=list(dict3.keys())\n    dict3_values=list(dict3.values())\n    \n    #adding value to the final dictionary\n    for key in dict1_keys:\n        if key in dict2_keys:\n            value=dict1_values[dict1_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict2_values[dict2_keys.index(key)]\n    for key in dict2_keys:\n        if key in dict1_keys:\n            value=dict2_values[dict2_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict1_values[dict1_keys.index(key)]\n    for key in dict3_keys:\n        if key in dict1_keys:\n            value=dict3_values[dict3_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict1_values[dict1_keys.index(key)]\n    return result\ndef merge_dictionaries(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result={}\n    #extracting keys from dictionary1\n    dict1_keys=list(dict1.keys())\n    dict1_values=list(dict1.values())\n    #extracting keys from dictionary2\n    dict2_keys=list(dict2.keys())\n    dict2_values=list(dict2.values())\n    #extracting keys from dictionary3\n    dict3_keys=list(dict3.keys())\n    dict3_values=list(dict3.values())\n    \n    #adding value to the final dictionary\n    for key in dict1_keys:\n        if key in dict2_keys:\n            value=dict1_values[dict2_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict2_values[dict2_keys.index(key)]\n    for key in dict2_keys:\n        if key in dict1_keys:\n            value=dict2_values[dict2_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict1_values[dict1_keys.index(key)]\n    for key in dict3_keys:\n        if key in dict1_keys:\n            value=dict3_values[dict3_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict1_values[dict1_keys.index(key)]\n    return result\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result={}\n    #extracting keys from dictionary1\n    dict1_keys=list(dict1.keys())\n    dict1_values=list(dict1.values())\n    #extracting keys from dictionary2\n    dict2_keys=list(dict2.keys())\n    dict2_values=list(dict2.values())\n    \n    #adding value to the final dictionary\n    for key in dict1_keys:\n        if key in dict2_keys:\n            value=dict1_values[dict2_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict2_values[dict2_keys.index(key)]\n    return result\ndef merge_dictionaries_two_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result={}\n    #extracting keys from dictionary1\n    dict1_keys=list(dict1.keys())\n    dict1_values=list(dict1.values())\n    #extracting keys from dictionary2\n    dict2_keys=list(dict2.keys())\n    dict2_values=list(dict2.values())\n    \n    #adding value to the final dictionary\n    for key in dict1_keys:\n        if key in dict2_keys:\n            value=dict1_values[dict2_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict2_values[dict2_keys.index(key)]\n    return result\ndef merge_dictionaries_three_one(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result={}\n    #extracting keys from dictionary1\n    dict1_keys=list(dict1.keys())\n    dict1_values=list(dict1.values())\n    #extracting keys from dictionary2\n    dict2_keys=list(dict2.keys())\n    dict2_values=list(dict2.values())\n    #extracting keys from dictionary3\n    dict3_keys=list(dict3.keys())\n    dict3_values=list(dict3.values())\n    \n    #adding value to the final dictionary\n    for key in dict1_keys:\n        if key in dict2_keys:\n            value=dict1_values[dict2_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict2_values[dict2_keys.index(key)]\n    for key in dict2_keys:\n        if key in dict1_keys:\n            value=dict2_values[dict2_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict1_values[dict1_keys.index(key)]\n    for key in dict3_keys:\n        if key in dict1_keys:\n            value=dict3_values[dict3_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict1_values[dict1_keys.index(key)]\n    return result\ndef merge_dictionaries_three_two(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result={}\n    #extracting keys from dictionary1\n    dict1_keys=list(dict1.keys())\n    dict1_values=list(dict1.values())\n    #extracting keys from dictionary2\n    dict2_keys=list(dict2.keys())\n    dict2_values=list(dict2.values())\n    #extracting keys from dictionary3\n    dict3_keys=list(dict3.keys())\n    dict3_values=list(dict3.values())\n    \n    #adding value to the final dictionary\n    for key in dict1_keys:\n        if key in dict2_keys:\n            value=dict1_values[dict2_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict2_values[dict2_keys.index(key)]\n    for key in dict2_keys:\n        if key in dict1_keys:\n            value=dict2_values[dict2_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict1_values[dict1_keys.index(key)]\n    for key in dict3_keys:\n        if key in dict1_keys:\n            value=dict3_values[dict3_keys.index(key)]\n            result[key]=value\n        else:\n            result[key]=dict1_values[dict1_keys.index(key)]\n    return result\ndef merge_dictionaries_two_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    result={}\n    #extracting keys from dictionary1\n    dict1_keys=list(dict1.keys())\n    dict1_values=list(dict1.values())\n    #extracting keys from dictionary2\n    dict2"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    for k, v in dict1.items():\n        d[k] = v\n    for k, v in dict2.items():\n        d[k] = v\n    for k, v in dict3.items():\n        d[k] = v\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1 = dict1.copy()\n    d2 = dict2.copy()\n    d3 = dict3.copy()\n    d = {}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1:\n        return dict3\n    if not dict2:\n        return dict3\n    if not dict3:\n        return dict1\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Initialize the merged dictionary\n    merged_dict = {}\n    # Initialize the dict that holds the combined dictionaries\n    merged_dict = dict1\n    # Initialize the dict that holds the dicts that contain the merged dictionaries\n    merged_dict = dict2\n    # Initialize the dict that holds the dictionaries\n    merged_dict = dict3\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict={}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i]+=1\n        else:\n            freq_dict[i]=1\n    return freq_dict\n    \ndef dfs(graph, node, visited):\n    \"\"\"\n    This function does the following:\n    - populates a visited list\n    - calls the function to get the frequency of all the elements in the current node\n    - then it calls the function to get the frequency of all the elements in the parent node\n    \"\"\"\n    visited.append(node)\n    for child in graph[node]:\n        if child not in visited:\n            dfs(graph,child,visited)\n    return visited\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # to remove duplicates from the list\n    list1 = list(dict.fromkeys(list1))\n    \n    # use collections.Counter\n    freq_dictionary = collections.Counter(list1)\n    \n    return freq_dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = collections.Counter(list1)\n    return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # TODO: implement the function\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result=collections.Counter(list1)\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #str = str(list1)\n    #if len(str)>0:\n    str1 = str(list1)\n    #elif len(list1)<0:\n    #    return 'Invalid list'\n    if str1.count('['):\n        if str1.count(']')==2:\n            list1=str1.split('[')[1]\n            list2 = list1.split(']')[0]\n            list2=list2.split(' ')\n            dict1 = collections.Counter(list2)\n            return dict1\n        elif str1.count(']')!=2:\n            return 'Invalid list'\n    elif str1.count(']'):\n        if str1.count(']')==2:\n            list1=str1.split('[')[1]\n            list2 = list1.split(']')[0]\n            list2=list2.split(' ')\n            dict1 = collections.Counter(list2)\n            return dict1\n        elif str1.count(']')!=2:\n            return 'Invalid list'\n    else:\n        list1 = list1.split(',')\n        if len(list1)!=2:\n            return 'Invalid list'\n    dict1 = collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counter = collections.Counter(list1)\n    return counter\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    smallest_idx = 0\n    for i in range(1, N):\n        if N % i == 0:\n            if i > smallest:\n                smallest = i\n                smallest_idx = i\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    #initialize min variable\n    min = 10001\n    \n    #initialize min_number variable\n    min_number = 10001\n    \n    #loop through all numbers to find the smallest\n    for number in range(N + 1):\n        #check if the current number is smaller than\n        #the smallest number\n        if number < min:\n            #update smallest number and\n            #update min_number\n            min = number\n            min_number = min\n    \n    return min_number\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #declare nums as a list of integers\n    nums = [int(i) for i in range(1,N+1)]\n    #initialize lowest as max of all nums\n    lowest = max(nums)\n    #initialize count as 0\n    count = 0\n    #loop through nums and compare to each number, if their value is less than the lowest, update count\n    for i in range(1,N+1):\n        if nums[i-1] < lowest:\n            lowest = nums[i-1]\n            count = 0\n        else:\n            count = count + 1\n    #return count and lowest\n    return count, lowest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = max(N, 1)\n    def closest(n):\n        if (n == 1):\n            return n\n        return closest(n-1)\n    return closest(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Create a set of the numbers closest to n\n    closest_num = set()\n    for i in range(N + 1):\n        closest_num.add(i)\n    for i in range(1, N + 1):\n        if i in closest_num:\n            closest_num.remove(i)\n        if len(closest_num) == 0:\n            return i\n    # If we found a number in the set, then return that number\n    return closest_num.pop()\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    l = abs(n)\n    while l > 0:\n        if l % 10 == n%10:\n            break\n        l //= 10\n    return l\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    start, end = 0, N\n    while start + 1 <= end:\n        mid = (start + end) // 2\n        if is_smaller(mid, N):\n            end = mid\n        else:\n            start = mid + 1\n    return end\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    a = sorted(N)\n    return a[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    a = min(N)\n    return a if N.count(a) == 1 else a\n    #raise NotImplementedError\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N in m:\n        return m[N]\n    else:\n        index = m.index(min(m))\n        if index == N:\n            return N\n        m[index] = closest_num(N-1)\n        return closest_num(N)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Write your code here.\n    return len(list1[0])\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # TODO: Write your solution here\n    if len(list1) == 0:\n        return 0\n    else:\n        longest = max(list1, key=len)\n        return len(longest)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n        elif len(word) == max_length:\n            pass\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for item in list1:\n        if len(item) > max:\n            max = len(item)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1 == []:\n        return 0\n    elif len(list1) == 1:\n        return 1\n    else:\n        return 1 + len_log(list1[1:])"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a = []\n    for i in list1:\n        a.append(len(i))\n    return a\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if(len(list1)==0):\n        return 0\n    else:\n        max = len(max(list1,key=len))\n        return max\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    j = 0\n    for i in range(len(sub_str)):\n        if sub_str[i] in str1:\n            j = j + 1\n        else:\n            return(j)\n    return(j)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    s = set(str1)\n    for i in range(len(str1)):\n        if sub_str in s:\n            s.remove(sub_str)\n    return s == set()\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str_values = []\n    str_values.append(sub_str)\n    \n    if not str1.__contains__(sub_str):\n        return False\n    \n    while (str1.index(sub_str) < len(str1)):\n        if str1.__contains__(sub_str):\n            str_values.append(sub_str)\n            str1 = str1.replace(sub_str, '')\n            \n        else:\n            return False\n    return len(str_values) == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst=[]\n    i=0\n    while(i<len(str1)):\n        if(str1[i] in sub_str):\n            lst.append(str1[i])\n            i=i+1\n        else:\n            i=i+1\n    print(lst)\n    return len(lst)==len(sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # code here\n    start, end = 0, 0\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            if i-start > len(sub_str):\n                return True\n            start = i\n        end += 1\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = []\n    if str1 == None or sub_str == None:\n        return result\n    for i in range(len(sub_str)):\n        if sub_str[i] in str1:\n            result.append(sub_str[i])\n            \n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = {}\n    for i in range(len(str1)):\n        result[str1[i]] = str1[i:i+len(sub_str)]\n    for item in result:\n        if item in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    char_list = []\n    #Loop through the list.\n    for i in range(len(str1)):\n        #Add characters from string to list.\n        char_list.append(str1[i])\n    \n    #Create a new list with only the characters in list.\n    sub_list = []\n    for i in range(len(sub_str)):\n        sub_list.append(char_list[i])\n    \n    #For loop to check if substring in list.\n    for x in range(len(sub_list)):\n        if sub_list[x] == sub_str:\n            print(x)\n            \n            \n    \n    \n    \n    \nif __name__=='__main__':\n    print('Example 1:')\n    print('Input : ')\n    print('s = \"aaab\"')\n    print('Output :')\n    print(find_substring(s, \"aab\"))\n    print('Exception :')\n    print('2')\n    print('Example 2:')\n    print('Input : ')\n    print('s = \"aaab\"')\n    print('Output :')\n    print(find_substring(s, \"ab\"))\n    print('Exception :')\n    print('1')\n    print('Example 3:')\n    print('Input : ')\n    print('s = \"ab\"')\n    print('Output :')\n    print(find_substring(s, \"ab\"))\n    print('Exception :')\n    print('0')\n    print('Example 4:')\n    print('Input : ')\n    print('s = \"acbd\"')\n    print('Output :')\n    print(find_substring(s, \"acbd\"))\n    print('Exception :')\n    print('2')\n    print('Example 5:')\n    print('Input : ')\n    print('s = \"acb\"')\n    print('Output :')\n    print(find_substring(s, \"acb\"))\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str = str(sub_str)\n    return sub_str in str1\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return str(s) == str(s)[::-1]\n    \ndef make_palindrome(s):\n    '''\n    Write a function to construct a string from a given list of characters.\n    '''\n    return str(s) + str(s)[::-1]\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list1 = []\n    for i in range(len(str1)):\n        list1.append(str1[i])\n    for i in range(len(sub_str)):\n        if sub_str[i] in list1:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2!= 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    return True\ndef is_in_range(num):\n    '''\n    Write a function to check whether the given number is in the range of given values.\n    '''\n    if num >= 0 and num <= 100:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: return True\n    if n == 2: return False\n    if n == 3: return True\n    if n == 4: return False\n    if n == 5: return True\n    if n == 6: return False\n    if n == 7: return True\n    if n == 8: return False\n    if n == 9: return True\n    if n == 10: return False\n    if n == 11: return True\n    if n == 12: return False\n    if n == 13: return True\n    if n == 14: return False\n    if n == 15: return True\n    if n == 16: return False\n    if n == 17: return True\n    if n == 18: return False\n    if n == 19: return True\n    if n == 20: return False\n    if n == 21: return True\n    if n == 22: return False\n    if n == 23: return True\n    if n == 24: return False\n    if n == 25: return True\n    if n == 26: return False\n    if n == 27: return True\n    if n == 28: return False\n    if n == 29: return True\n    if n == 30: return False\n    if n == 31: return True\n    if n == 32: return False\n    if n == 33: return True\n    if n == 34: return False\n    if n == 35: return True\n    if n == 36: return False\n    if n == 37: return True\n    if n == 38: return False\n    if n == 39: return True\n    if n == 40: return False\n    if n == 41: return True\n    if n == 42: return False\n    if n == 43: return True\n    if n == 44: return False\n    if n == 45: return True\n    if n == 46: return False\n    if n == 47: return True\n    if n == 48: return False\n    if n == 49: return True\n    if n == 50: return False\n    if n == 51: return True\n    if n == 52: return False\n    if n == 53: return True\n    if n == 54: return False\n    if n == 55: return True\n    if n == 56: return False\n    if n == 57: return True\n    if n == 58: return False\n    if n == 59: return True\n    if n == 60: return False\n    if n == 61: return True\n    if n == 62: return False\n    if n == 63: return True\n    if n == 64: return False\n    if n == 65: return True\n    if n == 66: return False\n    if n == 67: return True\n    if n == 68: return False\n    if n == 69: return True\n    if n == 70: return False\n    if n == 71: return True\n    if n == 72: return False\n    if n == 73: return True\n    if n == 74: return False\n    if n == 75: return True\n    if n == 76: return False\n    if n == 77: return True\n    if n == 78: return False\n    if n == 79: return True\n    if n == 80: return False\n    if n == 81: return True\n    if n == 82: return False\n    if n == 83: return True\n    if n == 84: return False\n    if n == 85: return True\n    if n == 86: return False\n    if n == 87: return True\n    if n == 88: return False\n    if n == 89: return True\n    if n == 90: return False\n    if n == 91: return True\n    if n == 92: return False\n    if n == 93: return True\n    if n == 94: return False\n    if n == 95: return True\n    if n == 96: return False\n    if n == 97: return True\n    if n == 98: return False\n    if n == 99: return True\n    if n == 100: return False\n    if n == 101: return True\n    if n == 102: return False\n    if n == 103: return True\n    if n == 104: return False\n    if n == 105: return True\n    if n == 106: return False\n    if n == 107: return True\n    if n == 108: return False\n    if n == 109: return True\n    if n == 110: return False\n    if n == 111: return True\n    if n == 112: return False\n    if n == 113: return True\n    if n == 114: return False\n    if n == 115: return True\n    if n == 116: return False\n    if n == 117: return True\n    if n == 118: return False\n    if n == 119: return True\n    if n == 120: return False\n    if n == 121: return True\n    if n == 122: return False\n    if n == 123: return True\n    if n == 124: return False\n    if n == 125: return True\n    if n == 126: return False\n    if n == 127: return True\n    if n == 128: return False\n    if n == 129: return True\n    if n == 130: return False\n    if n == 131: return True\n    if n == 132: return False\n    if n == 133: return True\n    if n == 134: return False\n    if n == 135: return True\n    if n == 136: return False\n    if n == 137: return True\n    if n == 138: return False\n    if n == 139: return True\n    if n == 140: return False\n    if n == 141: return True\n    if n == 142: return False\n    if n == 143: return True\n    if n == 144: return False\n    if n == 145: return True\n    if n == 146: return False\n    if n == 147: return True\n    if n == 148: return False\n    if n == 149: return True\n    if n == 150: return False\n    if n == 151: return True\n    if n == 152: return False\n    if n == 153: return True\n    if n == 154: return False\n    if n == 155: return True\n    if n == 156: return False\n    if n == 157: return True\n    if n == 158: return False\n    if n == 159: return True\n    if n == 160: return False\n    if n == 161: return True\n    if n == 162: return False\n    if n == 163: return True\n    if n == 164: return False\n    if n == 165: return True\n    if n == 166: return False\n    if n == 167: return True\n    if n == 168: return False\n    if n == 169: return True\n    if n == 170: return False\n    if n == 171: return True\n    if n == 172: return False\n    if n == 173: return True\n    if n == 174: return False\n    if n == 175: return True\n    if n == 176: return False\n    if n == 177: return True\n    if n == 178: return False\n    if n == 179: return True\n    if n == 180: return False\n    if n == 181: return True\n    if n == 182: return False\n    if n == 183: return True\n    if n == 184: return False\n    if n == 185: return True\n    if n == 186: return False\n    if n == 187: return True\n    if n == 188: return False\n    if n == 189: return True\n    if n == 190: return False\n    if n == 191: return True\n    if n == 192: return False\n    if n == 193: return True\n    if n == 194: return False\n    if n == 195: return True\n    if n == 196: return False\n    if n == 197: return True\n    if n == 198: return False\n    if n == 199: return True\n    if n == 200: return False\n    if n == 201: return True\n    if n == 202: return False\n    if n == 203: return True\n    if n == 204: return False\n    if n == 205: return True\n    if n == 206: return False\n    if n == 207: return True\n    if n == 208: return False\n    if n == 209: return True\n    if n == 210: return False\n    if n == 211: return True\n    if n == 212: return False\n    if n == 213: return True\n    if n == 214: return False\n    if n == 215: return True\n    if n == 216: return False\n    if n == 217: return True\n    if n == 218: return False\n    if n == 219: return True\n    if n == 220: return False\n    if n == 221: return True\n    if n == 222: return False\n    if n == 223: return True\n    if n == 224"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_(n): \n        ''' \n        Check whether the given number is undulating or not.\n        '''\n        if n < 1: \n            return False\n        elif n % 3!= 0: \n            return False\n        else: \n            return True\n    return is_undulating_(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0: return False \n    elif n <= 4: return True \n    elif n == 5: return False \n    elif n == 6: return False \n    elif n == 7: return True \n    elif n == 8: return False \n    elif n == 9: return True \n    elif n == 10: return False \n    elif n == 11: return True \n    elif n == 12: return False \n    elif n == 13: return True \n    elif n == 14: return False \n    elif n == 15: return True \n    elif n == 16: return False \n    elif n == 17: return True \n    elif n == 18: return False \n    elif n == 19: return True \n    elif n == 20: return False \n    elif n == 21: return True \n    elif n == 22: return False \n    elif n == 23: return True \n    elif n == 24: return False \n    elif n == 25: return True \n    elif n == 26: return False \n    elif n == 27: return True \n    elif n == 28: return False \n    elif n == 29: return True \n    elif n == 30: return False \n    elif n == 31: return True \n    elif n == 32: return False \n    elif n == 33: return True \n    elif n == 34: return False \n    elif n == 35: return True \n    elif n == 36: return False \n    elif n == 37: return True \n    elif n == 38: return False \n    elif n == 39: return True \n    elif n == 40: return False \n    elif n == 41: return True \n    elif n == 42: return False \n    elif n == 43: return True \n    elif n == 44: return False \n    elif n == 45: return True \n    elif n == 46: return False \n    elif n == 47: return True \n    elif n == 48: return False \n    elif n == 49: return True \n    elif n == 50: return False \n    elif n == 51: return True \n    elif n == 52: return False \n    elif n == 53: return True \n    elif n == 54: return False \n    elif n == 55: return True \n    elif n == 56: return False \n    elif n == 57: return True \n    elif n == 58: return False \n    elif n == 59: return True \n    elif n == 60: return False \n    elif n == 61: return True \n    elif n == 62: return False \n    elif n == 63: return True \n    elif n == 64: return False \n    elif n == 65: return True \n    elif n == 66: return False \n    elif n == 67: return True \n    elif n == 68: return False \n    elif n == 69: return True \n    elif n == 70: return False \n    elif n == 71: return True \n    elif n == 72: return False \n    elif n == 73: return True \n    elif n == 74: return False \n    elif n == 75: return True \n    elif n == 76: return False \n    elif n == 77: return True \n    elif n == 78: return False \n    elif n == 79: return True \n    elif n == 80: return False \n    elif n == 81: return True \n    elif n == 82: return False \n    elif n == 83: return True \n    elif n == 84: return False \n    elif n == 85: return True \n    elif n == 86: return False \n    elif n == 87: return True \n    elif n == 88: return False \n    elif n == 89: return True \n    elif n == 90: return False \n    elif n == 91: return True \n    elif n == 92: return False \n    elif n == 93: return True \n    elif n == 94: return False \n    elif n == 95: return True \n    elif n == 96: return False \n    elif n == 97: return True \n    elif n == 98: return False \n    elif n == 99: return True \n    elif n == 100: return False \n    elif n == 101: return True \n    elif n == 102: return False \n    elif n == 103: return True \n    elif n == 104: return False \n    elif n == 105: return True \n    elif n == 106: return False \n    elif n == 107: return True \n    elif n == 108: return False \n    elif n == 109: return True \n    elif n == 110: return False \n    elif n == 111: return True \n    elif n == 112: return False \n    elif n == 113: return True \n    elif n == 114: return False \n    elif n == 115: return True \n    elif n == 116: return False \n    elif n == 117: return True \n    elif n == 118: return False \n    elif n == 119: return True \n    elif n == 120: return False \n    elif n == 121: return True \n    elif n == 122: return False \n    elif n == 123: return True \n    elif n == 124: return False \n    elif n == 125: return True \n    elif n == 126: return False \n    elif n == 127: return True \n    elif n == 128: return False \n    elif n == 129: return True \n    elif n == 130: return False \n    elif n == 131: return True \n    elif n == 132: return False \n    elif n == 133: return True \n    elif n == 134: return False \n    elif n == 135: return True \n    elif n == 136: return False \n    elif n == 137: return True \n    elif n == 138: return False \n    elif n == 139: return True \n    elif n == 140: return False \n    elif n == 141: return True \n    elif n == 142: return False \n    elif n == 143: return True \n    elif n == 144: return False \n    elif n == 145: return True \n    elif n == 146: return False \n    elif n == 147: return True \n    elif n == 148: return False \n    elif n == 149: return True \n    elif n == 150: return False \n    elif n == 151: return True \n    elif n == 152: return False \n    elif n == 153: return True \n    elif n == 154: return False \n    elif n == 155: return True \n    elif n == 156: return False \n    elif n == 157: return True \n    elif n == 158: return False \n    elif n == 159: return True \n    elif n == 160: return False \n    elif n == 161: return True \n    elif n == 162: return False \n    elif n == 163: return True \n    elif n == 164: return False \n    elif n == 165: return True \n    elif n == 166: return False \n    elif n == 167: return True \n    elif n == 168: return False \n    elif n == 169: return True \n    elif n == 170: return False \n    elif n == 171: return True \n    elif n == 172: return False \n    elif n == 173: return True \n    elif n == 174: return False \n    elif n == 175: return True \n    elif n == 176: return False \n    elif n == 177: return True \n    elif n == 178: return False \n    elif n == 179: return True \n    elif n == 180: return False \n    elif n == 181: return True \n    elif n == 182: return False \n    elif n == 183: return True \n    elif n == 184: return False \n    elif n == 185: return True \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 2 == 0 and n > 1) or n < 2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2==0: return True\n    else: return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # YOUR CODE HERE\n    return n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 10 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return a*power(a,b//2)\n    else:\n        return a*power(a,b//2)+1\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a < 0:\n        return a ** (-b)\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return 0\n    elif b == 0:\n        return a\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b == 0):\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]\n    \ntest_list = [(10,8), (4,1), (7,3), (9,11), (14,7), (10,7), (6,10), (6,11)]\nprint(index_minimum(test_list))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return (min(test_list, key = lambda x : x[1]))\n    \ndef index_minimum_descending(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(sorted(test_list, key = itemgetter(1,0)), key=itemgetter(1,0))\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    numbers = []\n    for value, group in test_list:\n        numbers.append(value)\n    if len(numbers) == 0:\n        return None\n    else:\n        numbers.sort()\n        if numbers[0] < numbers[1]:\n            return numbers[0]\n        else:\n            return numbers[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if not test_list: return None\n    if len(test_list) == 1: return test_list[0][0]\n    min_second = index_minimum(test_list[1:])\n    return test_list[0][0] if min_second!= None else None\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # for i in range(len(test_list)):\n    #     if test_list[i][1] < test_list[i+1][1]:\n    #         test_list[i], test_list[i+1] = test_list[i+1], test_list[i]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use a dictionary to store the results\n    results = {}\n    # Loop over all tuples and find the smallest number\n    for tup in test_list:\n        if tup[1] < tup[0]:\n            results[tup[1]] = tup[0]\n        elif tup[1] == tup[0]:\n            results[tup[1]] = tup[0]\n    # Return the smallest number \n    return min(results, key=results.get)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return max(tuple(test_list), key=lambda tup: tup[1])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    minimum_values = None\n    for value in test_list:\n        if minimum_values == None or value[1] < minimum_values[1]:\n            minimum_values = value\n    \n    return minimum_values\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_idx = 0\n    min_val = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_val:\n            min_idx = i\n            min_val = test_list[i][0]\n    return min_idx, min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list_length = len(test_list)\n    if test_list_length == 0:\n        return None\n    index = 0\n    for index, item in enumerate(test_list):\n        if index == 0:\n            min_val = item[1]\n        if item[1] < min_val:\n            min_val = item[1]\n            index = index\n    return test_list[index][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i] < lst[j]:\n                if lst[i] < min_len:\n                    min_len = lst[i]\n                elif lst[i] == min_len:\n                    if lst[j] < min_len:\n                        min_len = lst[j]\n                    elif lst[i] == lst[j]:\n                        if lst[i] < min_len:\n                            min_len = lst[i]\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest=float('inf')\n    for i in lst:\n        if i<smallest:\n            smallest=i\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Len = len(lst)\n    if Len == 1:\n        return Len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] > lst[i][length]:\n                length = j\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    for i in range(0,length):\n        length = min(length,len(lst[i]))\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return len(lst[0])\n    else:\n        return Find_Min_Length(lst[1:]) + lst[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = []\n    for i in range(0,len(lst)):\n        length.append(len(lst[i]))\n    return min(length)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    if length == 1:\n        return length\n    elif length == 2:\n        return lst[0] + lst[1]\n    else:\n        s = min(lst[0] + lst[1], Find_Min_Length(lst[2:]))\n        return s\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if(len(lst)==0):\n        return 0\n    elif(len(lst)==1):\n        return len(lst[0])\n    else:\n        return min(Find_Min_Length(lst[:-1]),Find_Min_Length(lst[:-2])+1)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return(min)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    # 0,1,2,3,4,5,6,7,8,9,10\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divs += 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return int(n**0.5)+1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 1\n    return 1 + divisor(n // 2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    div = 0\n    while i <= n:\n        if n % i == 0:\n            div += 1\n        i += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n < 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return divisor(n-1) + divisor(n-2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n//2 + 1 + divisor(n-2)\n    \n    \ndef main():\n    '''\n    write a python function to find the number of divisors of a given integer.\n    '''\n    number=int(input(\"enter a number:\"))\n    print(divisor(number))\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for list in list1:\n        for element in list:\n            if element in frequency:\n                frequency[element] += 1\n            else:\n                frequency[element] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    output = {}\n    for x in list1:\n        for y in x:\n            if y in output:\n                output[y] += 1\n            else:\n                output[y] = 1\n    return output\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #Code to find the frequency of each element in a flattened list of lists\n    #Top down approach\n    dic = {}\n    for item in list1:\n        if item in dic:\n            dic[item] += 1\n        else:\n            dic[item] = 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for num in list1:\n        if num in frequency_dictionary:\n            frequency_dictionary[num] += 1\n        else:\n            frequency_dictionary[num] = 1\n    return frequency_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict = {}\n    for l in list1:\n        for e in l:\n            if e in dict:\n                dict[e] = dict[e] + 1\n            else:\n                dict[e] = 1\n    return dict\n    \ndef select_parent_dict(parent_dict, t):\n    '''\n    Write a function to find all the tuples of keys with values that are equal to a given value t.\n    '''\n    dict = {}\n    for k, v in parent_dict.items():\n        if k == t:\n            dict[k] = v\n    return dict\n    \ndef find_uniq_values(list1, dict):\n    '''\n    Write a function to return the uniqe values of a dictionary.\n    '''\n    uniq_values = []\n    for k, v in dict.items():\n        if v not in uniq_values:\n            uniq_values.append(v)\n    return uniq_values\n    \ndef find_largest_dict_value(dict):\n    '''\n    Write a function to return the largest value of a dictionary.\n    '''\n    max_value = 0\n    for k, v in dict.items():\n        if v > max_value:\n            max_value = v\n    return max_value\n    \ndef find_all_keys_with_two_values(dict):\n    '''\n    Write a function to find all the keys of a dictionary with two values.\n    '''\n    keys = []\n    for k, v in dict.items():\n        if v == 2:\n            keys.append(k)\n    return keys\n    \ndef find_all_keys_with_three_values(dict):\n    '''\n    Write a function to find all the keys of a dictionary with three values.\n    '''\n    keys = []\n    for k, v in dict.items():\n        if v == 3:\n            keys.append(k)\n    return keys\n    \ndef smallest_values(dict):\n    '''\n    Write a function to find the smallest values of a dictionary.\n    '''\n    smallest_values = []\n    for k, v in dict.items():\n        if v < min(dict.values()):\n            smallest_values.append(v)\n    return smallest_values\n    \ndef most_unique_values(dict):\n    '''\n    Write a function to find the most unique values of a dictionary.\n    '''\n    uniq_values = find_uniq_values(dict.values(), dict)\n    max_uniq_value = max(uniq_values)\n    max_uniq_value_index = uniq_values.index(max_uniq_value)\n    max_uniq_value_value = dict[max_uniq_value_index]\n    return max_uniq_value_value\n    \ndef select_max_dict_value(dict):\n    '''\n    Write a function to find the maximum value of a dictionary.\n    '''\n    max_values = []\n    for k, v in dict.items():\n        if v not in max_values:\n            max_values.append(v)\n    return max_values\n    \ndef find_unique_keys(dict):\n    '''\n    Write a function to find all the keys that are not contained in another dictionary.\n    '''\n    uniq_keys = []\n    for k, v in dict.items():\n        if v not in uniq_keys:\n            uniq_keys.append(k)\n    return uniq_keys\n    \ndef select_max_value_in_dict(dict, value):\n    '''\n    Write a function to find the largest value of a dictionary, which is the value that is greater than a given value.\n    '''\n    max_value = value\n    for k, v in dict.items():\n        if v > max_value:\n            max_value = v\n    return max_value\n    \ndef main():\n    l = [2, 3, 2, 5, 5, 2, 7]\n    print(frequency_lists(l))\n    print(find_unique_values(l))\n    print(select_parent_dict(l, 5))\n    print(find_uniq_values(l, l))\n    print(select_max_dict_value(l))\n    print(find_unique_keys(l))\n    print(find_all_keys_with_two_values(l))\n    print(find_all_keys_with_three_values(l))\n    print(find_largest_dict_value(l))\n    print(find_all_keys_with_two_values(l))\n    print(find_all_keys_with_three_values(l))\n    print(smallest_values(l))\n    print(most_unique_values(l))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for x in list1:\n        for y in x:\n            if y in frequency:\n                frequency[y] = frequency[y] + 1\n            else:\n                frequency[y] = 1\n    return frequency\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    \n    freq = {}\n    for sublist in list1:\n        for el in sublist:\n            if el not in freq:\n                freq[el] = 1\n            else:\n                freq[el] += 1\n    return freq\n    \n    \ndef frequency_sets(list2):\n    '''\n    Write a function to create a dictionary of lists of the form: {element: count}\n    Use sets to create a dictionary of lists of the form: {element: count}\n    '''\n    \n    dict1 = {}\n    for el in list2:\n        if el not in dict1:\n            dict1[el] = 1\n        else:\n            dict1[el] += 1\n    return dict1\n    \n    \ndef find_frequency(arr, item, dict1):\n    '''\n    Write a function to find the frequency of a particular item in a list of lists.\n    '''\n    dict2 = {}\n    for el in arr:\n        if el in dict2:\n            dict2[el] += 1\n        else:\n            dict2[el] = 1\n    for el in dict2:\n        if dict2[el] == dict1[item]:\n            print(\"Found\", el)\n    \ndef combination(arr, n, dict1):\n    '''\n    Write a function that returns the combinations of arr of size n\n    using a dictionary to store the frequency of all combinations.\n    '''\n    \n    dict3 = {}\n    for el in arr:\n        if el in dict3:\n            dict3[el] += 1\n        else:\n            dict3[el] = 1\n    for el in dict3:\n        if dict3[el] == dict1[el]:\n            print(\"Found\", el)\n    \ndef find_combinations(arr, n, dict1):\n    '''\n    Write a function that returns the combinations of arr of size n\n    using a dictionary to store the frequency of all combinations.\n    '''\n    \n    dict2 = {}\n    for el in arr:\n        if el in dict2:\n            dict2[el] += 1\n        else:\n            dict2[el] = 1\n    for el in dict2:\n        if dict2[el] == dict1[el]:\n            print(\"Found\", el)\n    \ndef find_combinations2(arr, n):\n    '''\n    Write a function that returns the combinations of arr of size n\n    using a dictionary to store the frequency of all combinations.\n    '''\n    \n    dict1 = {}\n    for el in arr:\n        if el in dict1:\n            dict1[el] += 1\n        else:\n            dict1[el] = 1\n    for el in dict1:\n        if dict1[el] == n:\n            print(\"Found\", el)\n    \n    \nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 9, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n    #print(frequency_lists(arr))\n    #print(frequency_sets(arr))\n    #print(find_frequency(arr, 24, frequency_lists(arr)))\n    #print(find_frequency(arr, 12, frequency_sets(arr)))\n    #print(find_combinations(arr, 20, frequency_lists(arr)))\n    #print(find_combinations(arr, 12, frequency_sets(arr)))\n    #print(find_combinations2(arr, 24))\n    print()\n    print(frequency_sets(arr))\n    print(frequency_lists(arr)"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for element in list1:\n        for key in element:\n            if key in frequency_dictionary:\n                frequency_dictionary[key] += 1\n            else:\n                frequency_dictionary[key] = 1\n    return frequency_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    \n    for item in list1:\n        if item in freq_dict.keys():\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 0\n    for number in numbers:\n        result += number\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num_list = []\n    for number in numbers:\n        num_list.append(number*len(numbers))\n    print(num_list)\n    print(num_list[len(num_list)-1])\n    print(\"---------\")\n    print(\"---------\")\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    list_of_numbers = list(map(int, numbers.split()))\n    return list_of_numbers[0] * list_of_numbers[1]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = list(map(int, numbers))\n    count = 1\n    while count < len(numbers):\n        numbers[count] = numbers[count]*count\n        count += 1\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied_numbers = []\n    for i in range(len(numbers)):\n        multiplied_numbers.append(numbers[i] * i)\n    return multiplied_numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # The recursive function \n    def recursive(numbers, current_num):\n        if len(numbers) == 1:\n            return numbers[0]\n        elif current_num is None:\n            return numbers[0]\n        elif current_num > numbers[0]:\n            current_num = recursive(numbers, current_num)\n            return current_num + numbers[0]\n        elif current_num > numbers[0] and current_num > numbers[0] + numbers[0]:\n            return current_num\n        else:\n            return recursive(numbers, current_num)\n        \n    # The function calling\n    return recursive(numbers, None)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # X = int(input(\"Enter a number: \"))\n    # for i in numbers:\n    #     X = X * int(i)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [x * y for (x, y) in zip(numbers, range(len(numbers)))]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # @TODO: Multiply all the numbers in a list and divide with the length of the list.\n    \n    # @TODO: Multiply all the numbers in a list and divide with the length of the list.\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = str(n)\n    if n[0] == '-':\n        n = n[1:]\n    return n[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = []\n    while n > 0: \n        res.append(str(n % 2)) \n        n = n // 2\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # The number is passed to the function as a parameter.\n    # If the number is negative, it must be converted to positive\n    # so that it is written as 0b10.\n    # If the number is 0, it must be converted to 0b00.\n    # If the number is positive, it must be converted to 0b01.\n    # Let the number be 0 if it is already 0b10, if it is 0b01.\n    # Then it is converted to 0b111.\n    # After conversion, the numbers are padded with 0s.\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        rem = n % 2\n        binary += str(rem)\n        n = n//2\n    if len(binary) > 1:\n        return binary\n    else:\n        return '0'\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 0: \n        m = n \n        while m % 2 == 0: \n            m /= 2 \n        f = 1\n        for i in range(m): \n            f = f * 2 \n        f = str(f) \n        f = f.zfill(m) \n        return f \n    else: \n        m = -1 * n \n        for i in range(m): \n            f = f * 2 \n        f = str(f) \n        f = f.zfill(m) \n        return f \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # find the number of leading zeros.\n    leading_zeros = n//2\n    # convert the number to its binary equivalent.\n    binary_n = bin(n).replace('0b', '')\n    # remove the leading zeros.\n    binary_n = binary_n[2:]\n    # add the leading zeros to the end of the binary string.\n    binary_n = '0'*leading_zeros + binary_n\n    return binary_n\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_str = '' \n    while n > 0: \n        r = n % 2 \n        n = n // 2 \n        bin_str = str(r) + bin_str \n    return bin_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).lstrip(\"0b\")\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return '{0:b}'.format(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return \"\"\n    elif n < 0: \n        sign = \"-\"\n        n = abs(n)\n    else:\n        sign = \"+\"\n    binary = format(n, \"b\")\n    return f\"{sign}{binary}\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def check_palindrome(num):\n        for i in range(1,int(num**0.5)+1):\n            if num%i==0:\n                return False\n        return True\n    def palindrome(num):\n        if check_palindrome(num):\n            return num\n        for i in range(1,int(num**0.5)+1):\n            if num%i==0:\n                num=num//i\n                palindrome(num)\n        return num\n    return palindrome(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while num < 10**5:\n        num += 1\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    if num == 0:\n        return 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    res = None\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 0\n    while True:\n        i += 1\n        if not i%2:\n            p = int(str(i)[-1])\n            break\n    \n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def palindrome_calculation(num):\n        if num == 0:\n            return 0\n        else:\n            return num * palindrome_calculation(num-1)\n    \n    if num == 1:\n        return 0\n    if num == 2:\n        return 1\n    if num % 2 == 0:\n        smallest = palindrome_calculation(num//2)\n        return smallest * smallest\n    else:\n        palindrome = palindrome_calculation(num//2)\n        return palindrome * palindrome + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest_palindrome = None\n    for i in range(1, len(num)):\n        current_palindrome = num[i]\n        palindrome = current_palindrome * num[i]\n        if palindrome == num[i] * num[i]:\n            continue\n        else:\n            if smallest_palindrome == None or palindrome < smallest_palindrome:\n                smallest_palindrome = palindrome\n    return smallest_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pal = 1\n    while True:\n        if check_palindrome(pal, num):\n            return pal\n        pal += 1\n        if pal > num:\n            return pal\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    temp = num\n    next_smallest_palindrome = [0 for _ in range(num)]\n    next_smallest_palindrome[1] = 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    pass\ndef prev_smallest_palindrome(num):\n    '''\n    Write a function to find the previous smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef next_smallest_palindrome_with_next(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\ndef prev_smallest_palindrome_with_next(num):\n    '''\n    Write a function to find the previous smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    assert 0 <= k <= len(arr), 'The parameter k is out of bounds'\n    l, h = 0, len(arr)-1\n    while l < h:\n        mid = (l+h)//2\n        if arr[mid] < k:\n            l = mid + 1\n        else:\n            h = mid\n    return arr[l"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    return arr[k - 1"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # in the array\n    count = 1\n    for i in range(len(arr)):\n        if count == k:\n            return arr[i]\n        count += 1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    size = len(arr)\n    if size <= 1:\n        return None\n    mid = size // 2\n    if k == size:\n        return arr[mid]\n    elif k < size:\n        return kth_element(arr[:mid], k)\n    elif k > size:\n        return kth_element(arr[mid + 1:], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k >= len(arr):\n        return -1\n    elif k == 0:\n        return arr[0]\n    elif k == 1:\n        return arr[-1]\n    else:\n        return kth_element(arr[1:], k-1)\n    \ndef test_kth_element(arr, k):\n    '''\n    Write a function that accepts an array and a number. The function will return the kth element in the array.\n    '''\n    if k >= len(arr):\n        return -1\n    elif k == 0:\n        return arr[0]\n    elif k == 1:\n        return arr[-1]\n    else:\n        return kth_element(arr[1:], k-1)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #print(arr)\n    #print(arr[k])\n    return arr[k]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for letter in word.split('_'):\n        result += letter.title()\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split(\"_\")[0]\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == 'None':\n        return None\n    elif word == 'False':\n        return 'False'\n    elif word == 'True':\n        return 'True'\n    elif word == 'and':\n        return 'and'\n    elif word == 'as':\n        return 'as'\n    elif word == 'assert':\n        return 'assert'\n    elif word == 'be':\n        return 'be'\n    elif word == 'break':\n        return 'break'\n    elif word == 'breakIf':\n        return 'breakIf'\n    elif word == 'case':\n        return 'case'\n    elif word == 'catch':\n        return 'catch'\n    elif word == 'class':\n        return 'class'\n    elif word == 'continue':\n        return 'continue'\n    elif word == 'def':\n        return 'def'\n    elif word == 'delete':\n        return 'delete'\n    elif word == 'do':\n        return 'do'\n    elif word == 'else':\n        return 'else'\n    elif word == 'elsif':\n        return 'elsif'\n    elif word == 'end':\n        return 'end'\n    elif word == 'endIf':\n        return 'endIf'\n    elif word == 'else':\n        return 'else'\n    elif word == 'endWhile':\n        return 'endWhile'\n    elif word == 'endDo':\n        return 'endDo'\n    elif word == 'endSwitch':\n        return 'endSwitch'\n    elif word == 'endTry':\n        return 'endTry'\n    elif word == 'endWhile':\n        return 'endWhile'\n    elif word == 'endWith':\n        return 'endWith'\n    elif word == 'endDoWhile':\n        return 'endDoWhile'\n    elif word == 'endWithDo':\n        return 'endWithDo'\n    elif word == 'endWithSwitch':\n        return 'endWithSwitch'\n    elif word == 'endWithTry':\n        return 'endWithTry'\n    elif word == 'endDoWhile':\n        return 'endDoWhile'\n    elif word == 'endTernary':\n        return 'endTernary'\n    elif word == 'endWithDoWhile':\n        return 'endWithDoWhile'\n    elif word == 'endDoDo':\n        return 'endDoDo'\n    elif word == 'endDoWhileDo':\n        return 'endDoWhileDo'\n    elif word == 'endDoWhileIf':\n        return 'endDoWhileIf'\n    elif word == 'endDoWhileIfElse':\n        return 'endDoWhileIfElse'\n    elif word == 'endDoWhileIfElse':\n        return 'endDoWhileIfElse'\n    elif word == 'endDoWhileIfElseIf':\n        return 'endDoWhileIfElseIf'\n    elif word == 'endDoWhileIfElseIfElse':\n        return 'endDoWhileIfElseIfElse'\n    elif word == 'endDoWhileIfElseIfElse':\n        return 'endDoWhileIfElseIfElse'\n    elif word == 'endDoWhileIfElseIfElseIf':\n        return 'endDoWhileIfElseIfElseIf'\n    elif word == 'endDoWhileIfElseIfElseIf':\n        return 'endDoWhileIfElseIfElseIf'\n    elif word == 'endDoWhileIfElseIfElseIfElse':\n        return 'endDoWhileIfElseIfElseIfElse'\n    elif word == 'endDoWhileIfElseIfElseIfElse':\n        return 'endDoWhileIfElseIfElseIfElse'\n    elif word == 'endDoWhileIfElseIfElseIfElseIf':\n        return 'endDoWhileIfElseIfElseIfElseIfElseIf'\n    elif word == 'endDoWhileIfElseIfElseIfElseIfElse':\n        return 'endDoWhileIfElseIfElseIfElseIfElseIfElse'\n    elif word == 'endDoWhileIfElseIfElseIfElseIfElse':\n        return 'endDoWhileIfElseIfElseIfElseIfElseIfElse'\n    elif word == 'endDoWhileIfElseIfElseIfElseIfElseIfElse':\n        return 'endDoWhileIfElseIfElseIfElseIfElseIfElseIfElse'\n    elif word == 'endDoWhileIfElseIfElseIfElseIfElseIfElseIf':\n        return 'endDoWhileIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElse'\n    elif word == 'endDoWhileIfElseIfElseIfElseIfElseIfElseIfElseIfElse':\n        return 'endDoWhileIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElse'\n    elif word == 'endDoWhileIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfElseIfEls"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    #convert spaces to underscores\n    word = word.replace(' ','_')\n    \n    #convert first letter to uppercase\n    word = word.lower()\n    \n    #remove the first letter of each word and swap the first letter with the second one\n    word = word[1:].upper() + word[0]\n    \n    #convert the uppercase letters to lowercase\n    word = word.lower()\n    \n    #return the camel case word\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_words = { 'SnakeCase':'snake_case', 'camelCase': 'camel_case' }\n    return camel_words[word[0].lower() + word[1:].lower()]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    return word.replace(' ','_')\n    \ndef snake_to_upper(word):\n    '''\n    Write a function to convert a snake case string to upper case string.\n    '''\n    return word.upper()\n    \ndef capitalize_word(word):\n    '''\n    Write a function to capitalize a single word or list of words.\n    '''\n    return word.title()\n    \ndef lower_word(word):\n    '''\n    Write a function to capitalize a single word or list of words.\n    '''\n    return word.lower()\n    \ndef remove_punctuation(word):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return word.translate(str.maketrans('', '', string.punctuation))\n    \ndef capitalize_word_list(list):\n    '''\n    Write a function to capitalize a list of words.\n    '''\n    return [word.title() for word in list]\n    \ndef lower_word_list(list):\n    '''\n    Write a function to capitalize a list of words.\n    '''\n    return [word.lower() for word in list]\n    \ndef upper_word_list(list):\n    '''\n    Write a function to capitalize a list of words.\n    '''\n    return [word.upper() for word in list]\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of words to a string.\n    '''\n    return''.join(list)\n    \ndef string_to_list(string):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    return string.split()\n    \ndef remove_duplicates(list):\n    '''\n    Write a function to remove all duplicate elements from a list.\n    '''\n    return list(set(list))\n    \ndef remove_blank_line(string):\n    '''\n    Write a function to remove any blank lines in a string.\n    '''\n    return string.replace('\\n','').replace('\\r','').replace('\\t','').replace(' ','')\n    \ndef remove_double_char(word):\n    '''\n    Write a function to remove all double characters from a word.\n    '''\n    return word.replace(' ','')\n    \ndef upper_word_list_capitalized(list):\n    '''\n    Write a function to convert a list of words to a list of capitalized words.\n    '''\n    return [upper_word(word) for word in list]\n    \ndef lower_word_list_capitalized(list):\n    '''\n    Write a function to convert a list of words to a list of capitalized words.\n    '''\n    return [lower_word(word) for word in list]\n    \ndef remove_words(string,list):\n    '''\n    Write a function to remove a set of words from a string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_spaces(string):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_space_and_unwanted_chars(string):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_not_alpha_only_chars(string):\n    '''\n    Write a function to remove all non-alpha characters from a string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_alpha_only_chars(string):\n    '''\n    Write a function to remove all alpha characters from a string.\n    '''\n    return string.replace('A','')\n    \ndef remove_space_only_chars(string):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_double_space(string):\n    '''\n    Write a function to remove all double spaces from a string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_single_space(string):\n    '''\n    Write a function to remove all single spaces from a string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_capitals(string):\n    '''\n    Write a function to remove all capital letters from a string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_special_characters(string):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return string.replace('!','!')\n    \ndef capitalize_word_and_remove_special_characters(word):\n    '''\n    Write a function to convert a word to a capitalized word and remove the special characters.\n    '''\n    return word.replace('!','!').replace('?','?').replace('.','.').replace('!','').replace('?','').replace('.','')\n    \ndef remove_special_characters_and_capitalize_word(word):\n    '''\n    Write a function to convert a word to a capitalized word and remove the special characters.\n    '''\n    return word.replace('!','!').replace('?','?').replace('.','.').replace('!','').replace('?','').replace('.','').upper()\n    \ndef remove_special_characters_and_capitalize_word_list(list):\n    '''\n    Write a function to convert a list of words to a capitalized word and remove the special characters.\n    '''\n    return [word.replace('!','!').replace('?','?').replace('.','.').replace('!','').replace('?','').replace('.','') for word in list]\n    \ndef remove_special_characters_and_capitalize_word_list_capitalized(list):\n    '''\n    Write a function to convert a list of words to a capitalized word and remove the special characters.\n    '''\n    return [word.replace('!','!').replace('?','?').replace('.','.').replace('!','').replace('?','').replace('.','') for word in list]\n    \ndef capitalize_word_and_remove_special_characters_and_capitalize_word_list(list):\n    '''\n    Write a function to convert a list of words to a capitalized word and remove the special characters.\n    '''\n    return [word.replace('!','!').replace('?','?').replace('.','.').replace('!','').replace('?','').replace('.','') for word in list]\n    \ndef remove_special_characters_and_capitalize_word_and_remove_special_characters(word):\n    '''\n    Write a function to convert a word to a capitalized word and remove the special characters.\n    '''\n    return word.replace('!','!').replace('?','?').replace('.','.').replace('!','').replace('?','').replace('.','')\n    \ndef string_is_alpha(string):\n    '''\n    Write a function to determine if a string contains only alphanumeric characters.\n    '''\n    return ''.join(char for char in string if char.isalnum()) == string\n    \ndef string_is_alpha_only(string):\n    '''\n    Write a function to determine if a string contains only alphanumeric characters.\n    '''\n    return ''.join(char for char in string if char.isalnum()) == string.replace(' ','')\n    \ndef string_is_ascii(string):\n    '''\n    Write a function to determine if a string contains only ascii characters.\n    '''\n    return all(ord(char) in range(0x20,ord('z')+1) for char in string)\n    \ndef string_is_digit(string):\n    '''\n    Write a function to determine if a string contains only digits.\n    '''\n    return ''.join(char for char in string if char.isdigit()) == string\n    \ndef string_is_alpha_only_an"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = word.replace(\"-\",\"_\")\n    return s[0].upper()+s[1:].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    sw_camel = ''\n    sw_camel += word[0]\n    for i in range(1, len(word)):\n        sw_camel += word[i][0].upper() + word[i][1:]\n    return sw_camel\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for i in range(2, n + 1):\n        if sieve[i]:\n            for j in range(i * 2, n + 1, i):\n                sieve[j] = False\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    g = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(m+1):\n        g[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            if g[i][j] == 1:\n                g[i][j+1] = 1\n            else:\n                g[i][j+1] = 0\n    for i in range(m, 0, -1):\n        if g[i][i] == 1:\n            print(i)\n            return i\n    return "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return n \n    if n % m == 0:\n        return eulerian_num(n//m, m)\n    else:\n        return eulerian_num(n//m, m-1)\n        \n    \n    "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def transpose(mat):\n        '''\n        Input: two matrices\n        Output: two matrices\n        '''\n        return mat[1], mat[0]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return 0\n    elif m == 0: \n        return 1\n    else: \n        # Find the parity of the modulus of m, \n        #  because m^-1 mod m = 0, \n        #  and since m^-1 = 1, \n        #  a is the inverse of itself. \n        #  if we use pow(m, 1/2, n)\n        #  and pow(m, 1/2, n)\n        #  is 0, then it is a prime number. \n        #\n        # At this point, m has been found to be prime. \n        #  Since n has been divided by 2, \n        #  the number is not a Eulerian number. \n        #  So m = 1 = n = 1, m = 0 = 1. \n        if n % 2 == 0: \n            # In this case, m is an even number. \n            return eulerian_num(n, m//2) \n        else: \n            # In this case, m is an odd number. \n            return eulerian_num(n, m*3)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    t = {}\n    d = {}\n    t[0] = 1\n    d[0] = 0\n    t[n] = 1\n    d[n] = 0\n    for i in range(1, m):\n        t[i] = (1 + t[i - 1]) * (n - i)\n        d[i] = (1 + d[i - 1]) * (i - n)\n    return t[n], d[n]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_valid_eulerian(n, m): \n        '''\n        Check if an eulerian number of n and m is valid.\n        '''\n        return 1 <= n <= m <= n*(n-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # loop through m\n    for i in range(m): \n        # if a(n, i) is present\n        if (n - i) % m == 0: \n            # find the next divisor \n            for j in range(i, m): \n                # if a(n, i) is divisible by j \n                if (n - i) % j == 0: \n                    return n - i\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    q = [i for i in range(n)]\n    stack = [q[0]]\n    for i in range(1, n):\n        # find all the ancestors of this node in the queue\n        while stack and q[stack[-1]]!= i:\n            stack.pop()\n        # if this node is not the parent of the node in the queue\n        if stack and stack[-1]!= i:\n            # add it to the stack\n            stack.append(i)\n        # if this node is the parent of the node in the queue,\n        # append it to the queue\n        else:\n            # pop it from the queue and append it to the stack\n            q[stack[-1]] = i\n            stack.pop()\n    # iterate over the stack and find the minimum and maximum node\n    result = 0\n    for i in range(len(stack)):\n        if i == 0:\n            result = stack[i]\n        elif stack[i] < result:\n            result = stack[i]\n    return result\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        print(\"Invalid Triangle\")\n    elif n == m:\n        print(\"Eulerian number:\", n)\n    else:\n        p = []\n        q = []\n        u = []\n        for i in range(m-1):\n            if i == 0 or i == m-1:\n                u.append(n-i)\n                p.append(n-i)\n            else:\n                u.append(n-i-p[i])\n                p.append(n-i-p[i])\n        for i in u:\n            for j in range(n):\n                if n - i!= j:\n                    print(i, end=\" \")\n            print()\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            for k in range(len(input_list[i][j])):\n                if input_list[i][j][k] =='':\n                    input_list[i][j][k] = input_list[i][j][k].strip()\n                elif input_list[i][j][k] == ',':\n                    input_list[i][j][k] = input_list[i][j][k].strip()\n                elif input_list[i][j][k] == '.':\n                    input_list[i][j][k] = input_list[i][j][k].strip()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) <= 1:\n        return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if input_list==None:\n        raise Exception('Please enter valid list of lists')\n    else:\n        for index in range(len(input_list[0])):\n            for sub_list in input_list:\n                sub_list[index].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for i in input_list:\n        new_list = []\n        for j in i:\n            new_list.append(j)\n        sublists.append(new_list)\n    return sublists\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort by the second element\n    def sort_second_element(sublist):\n        return sublist[1]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_input_list = []\n    for index in range(0, len(input_list)):\n        temp_list = []\n        for el in input_list[index]:\n            if type(el) == str:\n                temp_list.append(el)\n            else:\n                temp_list.append(el.lower())\n        sorted_input_list.append(temp_list)\n    return sorted_input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if input_list is None or len(input_list) == 0:\n        return None\n    else:\n        new_list = []\n        for index in range(0, len(input_list[0])):\n            for sublist in input_list:\n                new_list.append([item[index] for item in sublist])\n        new_list.sort(key=len)\n        return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Step 1: sort the list of lists\n    input_list.sort(key=str.casefold)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter=0\n    for i in lst:\n        if i:\n            counter+=1\n    return counter\n    \n    \n    \ndef frequency(lst,w):\n    '''\n    Write a python function to count the number of times a word appears in the given list.\n    '''\n    counter=0\n    for i in lst:\n        if i==w:\n            counter+=1\n    return counter\n    \ndef average(lst):\n    '''\n    Write a python function to calculate the average of the numbers in the given list.\n    '''\n    sum=0\n    counter=0\n    for i in lst:\n        sum+=i\n        counter+=1\n    return sum/counter\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # number of times a boolean is True\n    return len([i for i in lst if i])"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # to see the type of the object you can use type()\n    print(\"The type of the object:\", type(lst))\n    # it will return the type of the object, if you want to see the type, you can use type()\n    # if you want to see the type of a number, you can use type()\n    print(\"The type of the object is:\", type(lst))\n    # print the length of the list\n    print(\"The length of the list:\", len(lst))\n    # print the number of true values\n    print(\"The number of true values:\", len(lst))\n    # printing the index of the true value\n    print(\"The index of the true value:\", lst.index(True))\n    # printing the index of the false value\n    print(\"The index of the false value:\", lst.index(False))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The index of the True value:\", lst.index(True, 0, len(lst)))\n    # printing the index of the False value\n    print(\"The index of the False value:\", lst.index(False, 0, len(lst)))\n    # printing the index of the True value\n    print(\"The inde"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Initialize the counter\n    counter = 0\n    for element in lst:\n        if element:\n            counter += 1\n    \n    # Return the counter\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res = 0\n    for i in lst:\n        if i == True:\n            res += 1\n    return res\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count=count+1\n    print(count)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if(element):\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    if len(lst) == 1:\n        return 1\n    else:\n        return count(lst[1:]) + count(lst[:1])\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_tup!= None:\n        test_tup = test_tup[0], test_tup[1], test_tup[2], test_tup[3]\n        test_list.append(test_tup)\n        test_list.sort()\n        return test_list\n    else:\n        return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for el in test_list:\n        test_tup.append(el)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_list) is not list:\n        raise TypeError('test_list must be a list.')\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_tup) == 1:\n        list1 = test_list[0]\n        list2 = test_tup[0]\n        test_list[0] = list1 + list2\n        del test_tup[0]\n    else:\n        temp = []\n        for j in range(len(test_tup)):\n            temp.append(test_list[j] + test_tup[j])\n        test_list[:] = temp\n        del temp\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i, v in enumerate(test_tup):\n        test_list.append((v[0], v[1]))\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    def append_lists(list1, list2):\n        '''\n        Append the given lists to the given tuples.\n        '''\n        \n        #concatenate the lists to form a tuple\n        list_tuple = list(list1) + list(list2)\n        \n        #concatenate the list into a string\n        string_tuple = ''.join(list_tuple)\n        \n        #append the string to the list\n        test_tup.append(string_tuple)\n        \n    \n    #convert the lists into tuples\n    list1, list2 = zip(*test_list)\n    \n    #append the tuples\n    append_lists(list1, list2)\n    \n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_list = []\n    for i in range(len(test_tup)):\n        temp_list.append(test_tup[i][0])\n    test_list.append(temp_list)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list=list()\n    i=0\n    while i<len(num1):\n        if num1[i]<num2[i]:\n            new_list.append(num1[i])\n        else:\n            new_list.append(num2[i])\n        i+=1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    i = 0\n    while i<len(num1):\n        j = 0\n        while j<len(num2):\n            if num1[i]<=num2[j] and num2[j]<=num3[i]:\n                merged.append(num1[i])\n                i+=1\n            j+=1\n        i+=1\n    return merged\n    \ndef merge_sorted_list_2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    i = 0\n    while i<len(num1):\n        j = 0\n        while j<len(num2):\n            if num1[i]<=num2[j] and num2[j]<=num3[i]:\n                merged.append(num1[i])\n                i+=1\n            j+=1\n        i+=1\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    for i in range(len(num1)+len(num2)+len(num3)):\n        if i>0:\n            if num1[i-1] > num2[i-1] and num2[i-1] > num3[i-1]:\n                merged.append(num1[i-1])\n                num1.pop(i-1)\n                num2.pop(i-1)\n                num3.pop(i-1)\n            else:\n                merged.append(num2[i-1])\n                num2.pop(i-1)\n                num1.pop(i-1)\n    print(\"merged list: \", merged)\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge_lists(list1,list2):\n        merged_list = []\n        index_list1 = 0\n        index_list2 = 0\n        index_list3 = 0\n        index = 0\n        while index_list1 < len(list1) and index_list2 < len(list2) and index_list3 < len(list3):\n            if index_list1 < len(list1) and index_list2 < len(list2) and index_list3 < len(list3):\n                if list1[index_list1] < list2[index_list2] < list3[index_list3]:\n                    merged_list.append(list1[index_list1])\n                    index_list1 += 1\n                    index_list2 += 1\n                    index_list3 += 1\n                else:\n                    merged_list.append(list2[index_list2])\n                    index_list2 += 1\n                    index_list3 += 1\n            elif index_list1 < len(list1) and index_list2 < len(list2):\n                merged_list.append(list1[index_list1])\n                index_list1 += 1\n                index_list1 += 1\n            else:\n                merged_list.append(list2[index_list2])\n                index_list2 += 1\n                index_list2 += 1\n                index_list2 += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(merged_list)\n    i=0\n    while(i<len(num1) and i<len(num2) and i<len(num3)):\n        if num1[i]<num2[i] and num1[i]<num3[i]:\n            merged_list.append(num1[i])\n            i+=1\n        elif num2[i]<num1[i] and num2[i]<num3[i]:\n            merged_list.append(num2[i])\n            i+=1\n        else:\n            merged_list.append(num3[i])\n            i+=1\n    if i<len(num1):\n        merged_list+=num1[i:]\n    if i<len(num2):\n        merged_list+=num2[i:]\n    if i<len(num3):\n        merged_list+=num3[i:]\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = [None]*(len(num1)+len(num2)+len(num3))\n    for i in range(len(num1)):\n        result[i] = num1[i]\n    for i in range(len(num2)):\n        result[i+len(num1)] = num2[i]\n    for i in range(len(num3)):\n        result[i+len(num1)+len(num2)] = num3[i]\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a heap to sort the elements.\n    heap = []\n    # Populate the heap with elements\n    heapq.heapify(heap)\n    # Merge the elements of num1 and num2 into the heap.\n    heapq.heappush(heap,[num1,num2])\n    # Merge the elements of num3 into the heap.\n    heapq.heappush(heap,[num3,num3])\n    # Return the two merged lists.\n    return heapq.heappop(heap) + heapq.heappop(heap) + heapq.heappop(heap)\ndef merge_sorted_list_2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a heap to sort the elements.\n    heap = []\n    # Populate the heap with elements\n    heapq.heapify(heap)\n    # Merge the elements of num1 and num2 into the heap.\n    heapq.heappush(heap,[num1,num2])\n    # Merge the elements of num3 into the heap.\n    heapq.heappush(heap,[num3,num3])\n    # Return the two merged lists.\n    return heapq.heappop(heap) + heapq.heappop(heap) + heapq.heappop(heap)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    heapq.heapify(result)\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] or num2[0] < num3[0]:\n            heapq.heappush(result, (num1[0] + num2[0]))\n            num1 = heapq.heappop(num1)\n            num2 = heapq.heappop(num2)\n            num3 = heapq.heappop(num3)\n            print(result,num1,num2,num3)\n        elif num1[0] < num3[0]:\n            heapq.heappush(result, (num1[0] + num3[0]))\n            num1 = heapq.heappop(num1)\n            num3 = heapq.heappop(num3)\n            print(result,num1,num3)\n        else:\n            heapq.heappush(result, (num1[0] + num3[0]))\n            num1 = heapq.heappop(num1)\n            num3 = heapq.heappop(num3)\n            print(result,num1,num3)\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a=num1+num2+num3\n    a.sort()\n    return a\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n): \n        if (s[i] & 0x1) == 0: \n            count += 1\n    return count\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (s[:n] + s[n-1:n-1:2] + s[n-2:n-2:2] + s[n-3:n-3:2])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    even = 0\n    odd = 0\n    string = list(s)\n    for i in range(len(string)):\n        if (string[i] == '0'):\n            even = even + 1\n        else:\n            odd = odd + 1\n    if (even % 2 == 1):\n        return odd\n    else:\n        return even\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i = n//2\n    while i >= 0:\n        if s[i] == '1':\n            if s[i-1] == '1':\n                s = s[:i] + '0' + s[i+1:]\n            else:\n                s = s[:i] + '1' + s[i+1:]\n        else:\n            if s[i-1] == '0':\n                s = s[:i] + '1' + s[i+1:]\n            else:\n                s = s[:i] + '0' + s[i+1:]\n        i -= 1\n    return s\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    t=0\n    i=0\n    while i<n:\n        t+=1\n        if s[i]%2==1:\n            i+=1\n        else:\n            i+=1\n            t-=1\n    return t\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # write your code here\n    a=0\n    b=0\n    for i in range(n-1,-1,-1):\n        b=int(s[i])\n        for j in range(2):\n            a=a+b\n    return a\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n=int(n)\n    odd_string=''\n    for i in range(n):\n        odd_string+=str(s[i])\n    return odd_string\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    n=int(n)\n    even_string=''\n    for i in range(n):\n        even_string+=str(s[i])\n    return even_string\n    \ndef odd_Even(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n=int(n)\n    odd_string=''\n    for i in range(n):\n        odd_string+=str(s[i])\n    return odd_string\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum([x for x in s])%n\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(0,n,2):\n        for j in range(i,n,2):\n            if(s[j]!=s[j+1]):\n                break\n        else:\n            if(s[i]=='0'):\n                count+=1\n            else:\n                count+=2\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a = len(s)\n    b = n\n    for i in range(a-1):\n        if s[i] == '1' and s[i+1] == '1':\n            b += 1\n        elif s[i] == '0' and s[i+1] == '1':\n            b -= 1\n        elif s[i] == '1' and s[i+1] == '0':\n            b += 1\n        elif s[i] == '0' and s[i+1] == '0':\n            b -= 1\n        if b < 0:\n            return 'NO'\n    return str(b)\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested_list in nestedlist:\n        if len(nested_list) > 0:\n            for x in nested_list:\n                if x not in common_elements:\n                    common_elements.append(x)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here\n    common = []\n    for i in range(len(nestedlist[0])):\n        for j in range(len(nestedlist)):\n            if nestedlist[j][i] == 1:\n                common.append(nestedlist[j][i])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [x for x in nestedlist if len(x) == len(nestedlist[0])]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    if len(nestedlist) == 0:\n        return common\n    for i in range(len(nestedlist)):\n        if len(set(nestedlist[i])) == 1:\n            common.append(nestedlist[i][0])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for item in nestedlist:\n        if len(set(item)) > 1:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for nested in nestedlist:\n        if type(nested) == list:\n            print(f'Common elements in nested list: {common_in_nested_lists(nested)}')\n        else:\n            print(f'Common elements in nested list: {nested}')\n    return\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        return list(set(nestedlist[0]) & set(nestedlist[1]))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here\n    common = []\n    for index, item in enumerate(nestedlist):\n        if index % 2 == 0:\n            common.extend(item)\n        else:\n            common.append(item)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common=[]\n    if nestedlist == None:\n        return None\n    for elem in nestedlist:\n        if isinstance(elem,list):\n            common.extend(common_in_nested_lists(elem))\n        else:\n            common.append(elem)\n    return common\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if int(text) in range(0,10):\n            return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        raise ValueError('Value must be an integer.')\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return type(text) == int\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if list1[i] == {}:\n            return False\n    return True\n    \ndef main():\n    dit1 = {'name': 'vinko', 'content': ['funny','cool','haphazard','good','what','question'],\n            'is_dictionary': True}\n    dit2 = {'name': 'julio', 'content': ['funny','cool','haphazard','good','what','question'],\n            'is_dictionary': False}\n    dit3 = {'name': 'julio', 'content': ['funny','cool','haphazard','good','what','question'],\n            'is_dictionary': False}\n    dit4 = {'name': 'julio', 'content': ['funny','cool','haphazard','good','what','question'],\n            'is_dictionary': False}\n    dit5 = {'name': 'julio', 'content': ['funny','cool','haphazard','good','what','question'],\n            'is_dictionary': True}\n    \n    print(dit1['name'])\n    print(dit1['content'])\n    print(dit1['is_dictionary'])\n    print(dit2['name'])\n    print(dit2['content'])\n    print(dit2['is_dictionary'])\n    print(dit3['name'])\n    print(dit3['content'])\n    print(dit3['is_dictionary'])\n    print(dit4['name'])\n    print(dit4['content'])\n    print(dit4['is_dictionary'])\n    print(dit5['name'])\n    print(dit5['content'])\n    print(dit5['is_dictionary'])\n    if empty_dit(dit1):\n        print('dit1 is empty')\n    if empty_dit(dit2):\n        print('dit2 is empty')\n    if empty_dit(dit3):\n        print('dit3 is empty')\n    if empty_dit(dit4):\n        print('dit4 is empty')\n    if empty_dit(dit5):\n        print('dit5 is empty')\n    print(dit1)\n    print(dit2)\n    print(dit3)\n    print(dit4)\n    print(dit5)\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return not any(type(d)==dict for d in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if list1[i] == {}:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j =='' or j == '':\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if element:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        for key, value in dictionary.items():\n            if key!= value:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for elem in list1:\n        if len(elem) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # define the function\n    def int_to_tuple(int_nums):\n        '''\n        Given a tuple of positive integers, return a tuple of integers.\n        '''\n        # define a temp list\n        temp_nums = []\n        # for loop to find all the positive numbers\n        for n in int_nums:\n            # if the number is greater than the temp list\n            if n > temp_nums:\n                # add it to the temp list\n                temp_nums.append(n)\n            # if it is less than the temp list\n            elif n < temp_nums:\n                # add it to the temp list\n                temp_nums.append(n)\n        # return the new temp list\n        return tuple(temp_nums)\n    # return the new tuple\n    return int_to_tuple(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result += i\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10+y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    while i < len(nums):\n        nums[i] = int(nums[i])\n        i += 1\n    return nums\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0 if nums == [] else sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    ans = 0\n    for i in range(len(nums)):\n        ans += nums[i]*(10**(len(nums)-i-1))\n    return ans\n    \ndef print_2D_array(a):\n    \"\"\"Prints a matrix in 2D\"\"\"\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            print(a[i][j], end=\" \")\n        print()\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + num\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0\n    \ndef main():\n    '''\n    This main function will start executing as a script.\n    '''\n    \n    print(\"1. Add a tuple\")\n    print(\"2. Delete a tuple\")\n    print(\"3. Delete a tuple with index\")\n    print(\"4. Add a tuple with index\")\n    print(\"5. Add a tuple with value\")\n    print(\"6. Delete a tuple with index\")\n    print(\"7. Delete a tuple with value\")\n    print(\"8. Sort a tuple\")\n    print(\"9. Reorder a tuple\")\n    print(\"10. Reverse a tuple\")\n    print(\"11. Make a copy of a tuple\")\n    print(\"12. Check if an element is in a tuple\")\n    print(\"13. Print a tuple of all the values in a list\")\n    print(\"14. Print the number of elements in a tuple\")\n    print(\"15. Print the number of elements in a tuple with index\")\n    print(\"16. Print the number of elements in a tuple with value\")\n    print(\"17. Print a tuple with all the values in a list\")\n    print(\"18. Print the number of elements in a tuple with index\")\n    print(\"19. Print a tuple with all the values in a list\")\n    print(\"20. Print the number of elements in a tuple with value\")\n    print(\"21. Print all the elements of a tuple with the given index\")\n    print(\"22. Print the number of elements in a tuple with value\")\n    print(\"23. Print all the elements of a tuple with index\")\n    print(\"24. Print all the values in a tuple with value\")\n    print(\"25. Print all the values in a tuple with index\")\n    print(\"26. Print the number of elements in a tuple with index\")\n    print(\"27. Print the number of elements in a tuple with value\")\n    print(\"28. Print all the values in a tuple with index\")\n    print(\"29. Print the number of elements in a tuple with value\")\n    print(\"30. Print all the values in a tuple with index\")\n    print(\"31. Print all the values in a tuple with value\")\n    print(\"32. Print the number of elements in a tuple with index\")\n    print(\"33. Print all the values in a tuple with index\")\n    print(\"34. Print the number of elements in a tuple with value\")\n    print(\"35. Print all the values in a tuple with index\")\n    print(\"36. Print the number of elements in a tuple with index\")\n    print(\"37. Print all the values in a tuple with value\")\n    print(\"38. Print all the values in a tuple with index\")\n    print(\"39. Print all the values in a tuple with value\")\n    print(\"40. Print all the values in a tuple with index\")\n    print(\"41. Print all the values in a tuple with value\")\n    print(\"42. Print all the values in a tuple with index\")\n    print(\"43. Print all the values in a tuple with value\")\n    print(\"44. Print all the values in a tuple with index\")\n    print(\"45. Print all the values in a tuple with value\")\n    print(\"46. Print all the values in a tuple with index\")\n    print(\"47. Print all the values in a tuple with value\")\n    print(\"48. Print all the values in a tuple with index\")\n    print(\"49. Print all the values in a tuple with value\")\n    print(\"50. Print all the values in a tuple with index\")\n    print(\"51. Print all the values in a tuple with value\")\n    print(\"52. Print all the values in a tuple with index\")\n    print(\"53. Print all the values in a tuple with value\")\n    print(\"54. Print all the values in a tuple with index\")\n    print(\"55. Print all the values in a tuple with value\")\n    print(\"56. Print all the values in a tuple with index\")\n    print(\"57. Print all the values in a tuple with value\")\n    print(\"58. Print all the values in a tuple with index\")\n    print(\"59. Print all the values in a tuple with value\")\n    print(\"60. Print all the values in a tuple with index\")\n    print(\"61. Print all the values in a tuple with value\")\n    print(\"62. Print all the values in a tuple with index\")\n    print(\"63. Print all the values in a tuple with value\")\n    print(\"64. Print all the values in a tuple with index\")\n    print(\"65. Print all the values in a tuple with value\")\n    print(\"66. Print all the values in a tuple with index\")\n    print(\"67. Print all the values in a tuple with value\")\n    print(\"68. Print all the values in a tuple with index\")\n    print(\"69. Print all the values in a tuple with value\")\n    print(\"70. Print all the values in a tuple with index\")\n    print(\"71. Print all the values in a tuple with value\")\n    print(\"72. Print all the values in a tuple with index\")\n    print(\"73. Print all the values in a tuple with value\")\n    print(\"74. Print all the values in a tuple with index\")\n    print(\"75. Print all the values in a tuple with value\")\n    print(\"76. Print all the values in a tuple with index\")\n    print(\"77. Print all the values in a tuple with value\")\n    print(\"78. Print all the values in a tuple with index\")\n    print(\"79. Print all the values in a tuple with value\")\n    print(\"80. Print all the values in a tuple with index\")\n    print(\"81. Print all the values in a tuple with value\")\n    print(\"82. Print all the values in a tuple with index\")\n    print(\"83. Print all the values in a tuple with value\")\n    print(\"84. Print all the values in a tuple with index\")\n    print(\"85. Print all the values in a tuple with value\")\n    print(\"86. Print all the values in a tuple with index\")\n    print(\"87. Print all the values in a tuple with value\")\n    print(\"88. Print all the values in a tuple with index\")\n    print(\"89. Print all the values in a tuple with value\")\n    print(\"90. Print all the values in a tuple with index\")\n    print(\"91. Print all the values in a tuple with value\")\n    print(\"92. Print all the values in a tuple with index\")\n    print(\"93. Print all the values in a tuple with value\")\n    print(\"94. Print all the values in a tuple with index\")\n    print(\"95. Print all the values in a tuple with value\")\n    print(\"96. Print all the values in a tuple with index\")\n    print(\"97. Print all the values in a tuple with value\")\n    print(\"98. Print all the values in a tuple with index\")\n    print(\"99. Print all the values in a tuple with value\")\n    print(\"100. Print all the values in a tuple with index\")\n    print(\"101. Print all the values in a tuple with value\")\n    print(\"102. Print all the values in a tuple with index\")\n    print(\"103. Print all the values in a tuple with value\")\n    print(\"104. Print all the values in a tuple with index\")\n    print(\"105. Print all the values in a tuple with value\")\n    print(\"106. Print all the values in a tuple with index\")\n    print(\"107. Print all the values in a tuple with value\")\n    print(\"108. Print all the values in a tuple with index\")\n    print(\"109. Print all the values in a tuple with value\")\n    print(\"110. Print all the values in a tuple with index\")\n    print(\"111. Print all the values in a tuple with value\")\n    print(\"112. Print all the values in a tuple with index\")\n    print(\"113. Print all the values in a tuple with value\")\n    print(\"114. Print all the values in a tuple with index\")\n    print(\"115. Print all the values in a tuple with value\")\n    print(\"116. Print all the values in a tuple with index\")\n    print(\"117. Print all the values in a tuple with value\")\n    print(\"118. Print all the values in a tuple with index\")\n    print(\"119. Print all the values in a tuple with value\")\n    print(\"120. Print all the values in a tuple with index\")\n    print(\"121. Print all the values in a tuple with value\")\n    print(\"122. Print all the values in a tuple with index\")\n    print(\"123. Print all the values in a tuple with value\")\n    print(\"124. Print all the values in a tuple with index\")\n    print(\"125. Print all the values in a tuple with value\")\n    print(\"126. Print all the values in a tuple with index\")\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # We create a dict to store the int.\n    int_dict = {}\n    # We create a counter to store the int.\n    int_counter = 0\n    \n    for num in nums:\n        # We insert the num into the dict.\n        int_dict[num] = int_counter\n        # We increment the counter by one.\n        int_counter += 1\n    # We return the dict.\n    return int_dict\n    "
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_copy = copy.deepcopy(test_list)\n    result_list = []\n    for row in test_list_copy:\n        for column in row:\n            if isinstance(column, int) or isinstance(column, float):\n                result_list.append(float(column))\n    return result_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for l in test_list:\n        for item in l:\n            if type(item) == list:\n                item = list_to_float(item)\n            if type(item) == float:\n                test_list.remove(item)\n    test_list = list(map(lambda x: float(x), test_list))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    temp = []\n    #Iterating through each possible convertible element\n    for element in test_list:\n        #If element is a string, convert it to a list\n        if type(element) is str:\n            element = [element]\n        #If element is a list, convert it to a tuple\n        if type(element) is list:\n            element = tuple(element)\n        #If element is a tuple, convert it to a list\n        if type(element) is tuple:\n            element = [element]\n        #If element is a set, convert it to a list\n        if type(element) is set:\n            element = list(element)\n        temp.append(element)\n    #Return a list of all float values\n    return [float(elem) for elem in temp]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(s) for s in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Check input type\n    assert type(test_list) is list, 'test_list must be a list'\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, float):\n            result.append(item)\n        elif isinstance(item, list):\n            result.append(list_to_float(item))\n    return result\n    \ndef list_to_dict(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to dictionaries.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, dict):\n            result.append(item)\n        elif isinstance(item, list):\n            result.append(list_to_dict(item))\n    return result\n    \ndef dict_to_list(test_dict):\n    '''\n    Write a function to convert all possible convertible elements in a dictionary to a list of lists.\n    '''\n    result = []\n    for item in test_dict:\n        if isinstance(item, list):\n            result.append(item)\n        elif isinstance(item, dict):\n            result.append(dict_to_list(item))\n    return result\n    \ndef list_to_list(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to a list of lists.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(item)\n        elif isinstance(item, list):\n            result.append(list_to_list(item))\n    return result\n    \ndef list_to_list_of_lists(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to a list of lists.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(item)\n        elif isinstance(item, list):\n            result.append(list_to_list_of_lists(item))\n    return result\n    \ndef is_list(item):\n    '''\n    Write a function to check if an item is a list or not.\n    '''\n    return isinstance(item, list)\n    \ndef list_to_str(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to a string.\n    '''\n    result = []\n    for item in test_list:\n        if is_list(item):\n            result.append(str(item))\n        else:\n            result.append(item)\n    return result\n    \ndef str_to_list(test_str):\n    '''\n    Write a function to convert all possible convertible elements in a string to a list of lists.\n    '''\n    result = []\n    for item in test_str:\n        if is_list(item):\n            result.append(item)\n        else:\n            result.append(item)\n    return result\n    \ndef string_to_dict(test_str):\n    '''\n    Write a function to convert all possible convertible elements in a string to a dictionary of lists.\n    '''\n    result = []\n    for item in test_str:\n        if is_list(item):\n            result.append(item)\n        else:\n            result.append(item.split())\n    return result\n    \ndef dict_to_str(test_dict):\n    '''\n    Write a function to convert all possible convertible elements in a dictionary to a string.\n    '''\n    result = []\n    for item in test_dict:\n        if is_list(item):\n            result.append(item)\n        else:\n            result.append(item.split())\n    return result\n    \ndef string_to_dict_of_lists(test_str):\n    '''\n    Write a function to convert all possible convertible elements in a string to a dictionary of lists.\n    '''\n    result = []\n    for item in test_str:\n        if is_list(item):\n            result.append(item)\n        else:\n            result.append(item.split())\n    return result\n    \ndef dict_to_list(test_dict):\n    '''\n    Write a function to convert all possible convertible elements in a dictionary to a list of lists.\n    '''\n    result = []\n    for item in test_dict:\n        if is_list(item):\n            result.append(item)\n        else:\n            result.append(item.split())\n    return result\n    \ndef list_to_str_of_lists(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to a string.\n    '''\n    result = []\n    for item in test_list:\n        if is_list(item):\n            result.append(str(item))\n        else:\n            result.append(item)\n    return result\n    \ndef str_to_list_of_lists(test_str):\n    '''\n    Write a function to convert all possible convertible elements in a string to a list of lists.\n    '''\n    result = []\n    for item in test_str:\n        if is_list(item):\n            result.append(item)\n        else:\n            result.append(item.split())\n    return result\n    \ndef dict_to_str_of_lists(test_dict):\n    '''\n    Write a function to convert all possible convertible elements in a dictionary to a string.\n    '''\n    result = []\n    for item in test_dict:\n        if is_list(item):\n            result.append(item)\n        else:\n            result.append(item.split())\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    import math\n    import copy\n    test_list_float = []\n    for item in test_list:\n        #print(\"\\n{}\".format(item))\n        if isinstance(item, list):\n            for subitem in item:\n                #print(\"\\n{}\".format(subitem))\n                subitem_float = []\n                for subsubitem in subitem:\n                    #print(\"\\n{}\".format(subsubitem))\n                    subsubitem_float = float(subsubitem)\n                    #print(\"\\n{}\".format(subsubitem_float))\n                    subitem_float.append(subsubitem_float)\n                #print(\"\\n{}\".format(subitem_float))\n                test_list_float.append(copy.deepcopy(subitem_float))\n            #print(\"\\n{}\".format(test_list_float))\n        else:\n            #print(\"\\n{}\".format(item))\n            test_list_float.append(float(item))\n    #print(\"\\n{}\".format(test_list_float))\n    return test_list_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    while len(test_list) > 0:\n        test_list = [list(item) for item in test_list]\n        for item in test_list:\n            item = [float(item[i]) for i in range(len(item))]\n            test_list.remove(item)\n            break\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [elem.split(' ') for elem in test_list]\n    for elem in test_list:\n        if len(elem)!= 1:\n            raise ValueError(\"List contains non-conventional elements.\")\n    return [float(elem[0]) for elem in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.lower()\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == \"\":\n        return []\n    else:\n        return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = []\n    for s in string.split():\n        string_list.append(s)\n    return string_list\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split()\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # pass\n    string = string.replace(\" \", \"\").replace(\"\\n\", \"\")\n    lst = string.split(\" \")\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == \"\": \n        return []\n    \n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(\" \")\n    return string\n    \ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a string.\n    '''\n    string = \"\"\n    for element in list:\n        string = string + str(element)\n    return string\n    \ndef count_vowels(string):\n    '''\n    Write a function to count how many times a vowel occurs in a string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for element in string:\n        if element in vowels:\n            count = count + 1\n    return count\n    \ndef count_consonants(string):\n    '''\n    Write a function to count how many times a consonant occurs in a string.\n    '''\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for element in string:\n        if element not in consonants:\n            count = count + 1\n    return count\n    \ndef count_all_same(string):\n    '''\n    Write a function that returns the number of times a character appears in a string.\n    '''\n    count = 0\n    for element in string:\n        if element == element:\n            count = count + 1\n    return count\n    \ndef count_double_letters(string):\n    '''\n    Write a function that returns the number of times a letter appears in a string.\n    '''\n    count = 0\n    for element in string:\n        if element == element.upper():\n            count = count + 1\n    return count\n    \ndef count_double_letters(string):\n    '''\n    Write a function that returns the number of times a letter appears in a string.\n    '''\n    count = 0\n    for element in string:\n        if element == element.lower():\n            count = count + 1\n    return count\n    \ndef count_all_same_in_string(string):\n    '''\n    Write a function that returns the number of times a character appears in a string.\n    '''\n    count = 0\n    for element in string:\n        if element == element.lower():\n            count = count + 1\n    return count\n    \ndef count_double_letters_in_string(string):\n    '''\n    Write a function that returns the number of times a letter appears in a string.\n    '''\n    count = 0\n    for element in string:\n        if element == element.lower():\n            count = count + 1\n    return count\n    \ndef count_longest_word(string):\n    '''\n    Write a function that returns the length of the longest word in a string.\n    '''\n    count = 0\n    for element in string:\n        for letter in element:\n            if letter not in string.lower():\n                count = count + 1\n    return count\n    \ndef count_longest_word_in_string(string):\n    '''\n    Write a function that returns the length of the longest word in a string.\n    '''\n    count = 0\n    for element in string:\n        for letter in element:\n            if letter not in string.lower():\n                count = count + 1\n    return count\n    \ndef first_letter_count_in_string(string):\n    '''\n    Write a function that returns the number of times a letter appears in a string.\n    '''\n    count = 0\n    for element in string:\n        for letter in element:\n            if letter not in string.lower():\n                count = count + 1\n    return count\n    \ndef last_letter_count_in_string(string):\n    '''\n    Write a function that returns the number of times a letter appears in a string.\n    '''\n    count = 0\n    for element in string:\n        for letter in element:\n            if letter not in string.lower():\n                count = count + 1\n    return count\n    \ndef number_of_substrings(string):\n    '''\n    Write a function that returns the number of different characters of a string.\n    '''\n    count = 0\n    for element in string:\n        for i in range(len(string) - 1):\n            if string[i] == string[i + 1]:\n                count = count + 1\n    return count\n    \ndef main():\n    print(\"Hello, World!\")\n    print(\"Test of numbers in string:\")\n    print(string_to_list(input(\"Enter a string: \")))\n    print(list_to_string(string_to_list(input(\"Enter a string: \"))))\n    print(count_vowels(input(\"Enter a string: \")))\n    print(count_consonants(input(\"Enter a string: \")))\n    print(count_all_same(input(\"Enter a string: \")))\n    print(count_double_letters(input(\"Enter a string: \")))\n    print(count_double_letters_in_string(input(\"Enter a string: \")))\n    print(count_all_same_in_string(input(\"Enter a string: \")))\n    print(count_double_letters_in_string(input(\"Enter a string: \")))\n    print(first_letter_count_in_string(input(\"Enter a string: \")))\n    print(last_letter_count_in_string(input(\"Enter a string: \")))\n    print(number_of_substrings(input(\"Enter a string: \")))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split(' ')\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = []\n    a = string.split(' ')\n    for i in a:\n        result.append(i.split(' '))\n    return result\n    \ndef build_target_pair(dataset, method):\n    '''\n    Write a function to get the target pairs for a given dataset and method.\n    '''\n    target_pairs = []\n    for i in dataset:\n        for j in i[0]:\n            target_pairs.append((i[1], j))\n    return target_pairs\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_words = string.split() \n    return list_of_words\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # your code here\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    idx = 0\n    # Sort the array in O(n) time\n    arr.sort()\n    \n    # Use the index to find the position of the element\n    # and the element of the searched element\n    for i in range(len(arr)):\n        if arr[i] == arr[idx]:\n            idx += 1\n    \n    # Return the element found\n    return arr[idx]\n    \n    \nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    \n    print(\"Sorted array is: \")\n    print(arr)\n    print(\"The element that appears only once in array is: \")\n    print(search(arr))\n    print()\n    \n    print(\"Sorted array is: \")\n    print(arr)\n    print(\"The element that appears only once in array is: \")\n    print(search(arr))\n    print("
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # find the length of array\n    length = len(arr)\n    # create counter\n    counter = 0\n    # loop through each number\n    for i in range(length):\n        # if counter == length - 1, return element\n        if arr[i] == arr[counter] and counter!= length - 1:\n            return arr[i]\n        # if first value is true, add it to counter\n        if arr[i] == arr[counter] and arr[i]!= arr[counter + 1]:\n            counter = counter + 1\n    # return -1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Write your code here.\n    # if not arr:\n    #     return None\n    # else:\n    #     start = 0\n    #     end = len(arr) - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    assert sorted(arr) == arr\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            if arr[j] == arr[j+1]:\n                return arr[j]\n        else:\n            return arr[-1]\n    \n    # write a python function to find the middle element of the array\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # # O(n) if we make one pass through the array, O(n) for the rest of the time\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    l = len(arr) - 1\n    mid = (l - 1) // 2\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # if the array is empty, return False\n    # if the array is only one element, return that element\n    if len(arr) == 0:\n        return False\n    # if the element is found, return that element\n    if arr[0] == arr[1]:\n        return arr[0]\n    # return the first element that is not the first element\n    elif arr[0] > arr[1]:\n        return arr[0]\n    # return the first element that is not the last element\n    elif arr[-1] > arr[-2]:\n        return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # For storing values in hashmap\n    d = {}\n    \n    # For iterating over the array\n    for n in arr:\n        # For each element in the array\n        for x in d:\n            # If the element is the same, update the count with 1\n            if n == x:\n                d[x] += 1\n    \n    # For each key in the dictionary, increment the count by 1\n    for key in d:\n        if d[key] == 1:\n            return key\n    \n    return None"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) > 0:\n        max1 = max(list1)\n        min1 = min(list1)\n        if min1 < max1:\n            for i in range(len(list1)):\n                if max1 > list1[i][1]:\n                    list1[i] = [max1, list1[i][1]]\n                if list1[i][0] < min1:\n                    list1[i] = [min1, list1[i][0]]\n        if len(list1) < 5:\n            list1.append([min1, list1[len(list1) - 1][0]])\n        list1.sort()\n        return list1\n    else:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return \"Error: list must have at least two elements\"\n    else:\n        list1 = sorted(list1)\n        # print(list1)\n        for i in range(len(list1)-1):\n            # print(list1[i])\n            # print(list1[i+1])\n            if (list1[i] > list1[i+1]):\n                list1[i], list1[i+1] = list1[i+1], list1[i]\n        # print(list1)\n        return list1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = list1[0]\n    max_product_1 = 0\n    max_product_2 = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                if list1[i][0] < list1[j][0] and list1[i][1] < list1[j][1]:\n                    if max_product > list1[i][0] * list1[j][0] and max_product > list1[i][1] * list1[j][1]:\n                        max_product = list1[i][0] * list1[j][0]\n                    elif max_product > list1[i][0] * list1[j][1] and max_product > list1[i][1] * list1[j][1]:\n                        max_product = list1[i][1] * list1[j][0]\n                    elif max_product > list1[i][1] * list1[j][0] and max_product > list1[i][0] * list1[j][1]:\n                        max_product = list1[i][1] * list1[j][0]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i] * list1[j]\n            max_prod = prod\n            if prod > max_prod:\n                max_prod = prod\n            else:\n                pass\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    summ = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            summ = max(summ, list1[i][j])\n    return summ\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Your code here\n    print(list1)\n    list1 = sorted(list1)\n    print(list1)\n    if list1:\n        max_product = list1[0][0] * list1[0][1]\n        for i in range(1, len(list1)):\n            if list1[i][0] > max_product:\n                max_product = list1[i][0] * list1[i][1]\n    else:\n        max_product = 0\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = []\n    for i in range(len(list1) - 1):\n        for j in range(len(list1) - 1):\n            if list1[i][0] == list1[j][0] and list1[i][1] < list1[j][1]:\n                list1[i], list1[j] = list1[j], list1[i]\n            elif list1[i][0] < list1[j][0] and list1[i][1] == list1[j][1]:\n                list1[i], list1[j] = list1[j], list1[i]\n    max_product.append(list1[0])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = 0\n    for i in list1:\n        for j in list1:\n            maximum = max(i,j)\n    return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(map(max,zip(list1)))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max = list1[0][0]*list1[1][0]\n    for i in range(len(list1)):\n        if list1[i][0] > max:\n            max = list1[i][0]\n    return max\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_numbers = [i for i in range(1, limit+1) if not(i%2 and i%3 and i%5 and i%7) and not(i%3 and i%5 and i%7 and i%11)]\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    i = 1\n    while i <= limit:\n        if is_amicable(i):\n            amicable_numbers.append(i)\n            # add i to the total\n        i += 1\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    limit = int(limit)\n    for i in range(1, limit):\n        if is_amicable(i) == True:\n            amicable.append(i)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    for number in range(1, limit + 1):\n        is_amicable = True\n        num_string = str(number)\n        for i in range(len(num_string)):\n            if int(num_string[i]) + 1!= num_string[i] and int(num_string[i]) - 1!= num_string[i]:\n                is_amicable = False\n        if is_amicable == True:\n            numbers.append(number)\n    print(sum(numbers))\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    for n in range(1,limit+1):\n        # if n is not divisible by 2 or 3\n        if n%2 == 0 and n%3 == 0:\n            sum += n\n            amicable_numbers.append(n)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for i in range(1, limit):\n        num = i\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num *= 3\n        while num!= 1 and num % 2 == 0:\n            num //= 2\n        if num == 1:\n            continue\n        while num % 2 == 0:\n            num = num // 2\n        if num == num:\n            continue\n        if num % 10 == 0:\n            continue\n        if num % 10 == 1:\n            continue\n        if num % 10 == 2:\n            continue\n        if num % 10 == 3:\n            continue\n        if num % 10 == 4:\n            continue\n        if num % 10 == 5:\n            continue\n        if num % 10 == 6:\n            continue\n        if num % 10 == 7:\n            continue\n        if num % 10 == 8:\n            continue\n        if num % 10 == 9:\n            continue\n        if num % 10 == 10:\n            continue\n        if num % 10 == 11:\n            continue\n        if num % 10 == 12:\n            continue\n        if num % 10 == 13:\n            continue\n        if num % 10 == 14:\n            continue\n        if num % 10 == 15:\n            continue\n        if num % 10 == 16:\n            continue\n        if num % 10 == 17:\n            continue\n        if num % 10 == 18:\n            continue\n        if num % 10 == 19:\n            continue\n        if num % 10 == 20:\n            continue\n        if num % 10 == 21:\n            continue\n        if num % 10 == 22:\n            continue\n        if num % 10 == 23:\n            continue\n        if num % 10 == 24:\n            continue\n        if num % 10 == 25:\n            continue\n        if num % 10 == 26:\n            continue\n        if num % 10 == 27:\n            continue\n        if num % 10 == 28:\n            continue\n        if num % 10 == 29:\n            continue\n        if num % 10 == 30:\n            continue\n        if num % 10 == 31:\n            continue\n        if num % 10 == 32:\n            continue\n        if num % 10 == 33:\n            continue\n        if num % 10 == 34:\n            continue\n        if num % 10 == 35:\n            continue\n        if num % 10 == 36:\n            continue\n        if num % 10 == 37:\n            continue\n        if num % 10 == 38:\n            continue\n        if num % 10 == 39:\n            continue\n        if num % 10 == 40:\n            continue\n        if num % 10 == 41:\n            continue\n        if num % 10 == 42:\n            continue\n        if num % 10 == 43:\n            continue\n        if num % 10 == 44:\n            continue\n        if num % 10 == 45:\n            continue\n        if num % 10 == 46:\n            continue\n        if num % 10 == 47:\n            continue\n        if num % 10 == 48:\n            continue\n        if num % 10 == 49:\n            continue\n        if num % 10 == 50:\n            continue\n        if num % 10 == 51:\n            continue\n        if num % 10 == 52:\n            continue\n        if num % 10 == 53:\n            continue\n        if num % 10 == 54:\n            continue\n        if num % 10 == 55:\n            continue\n        if num % 10 == 56:\n            continue\n        if num % 10 == 57:\n            continue\n        if num % 10 == 58:\n            continue\n        if num % 10 == 59:\n            continue\n        if num % 10 == 60:\n            continue\n        if num % 10 == 61:\n            continue\n        if num % 10 == 62:\n            continue\n        if num % 10 == 63:\n            continue\n        if num % 10 == 64:\n            continue\n        if num % 10 == 65:\n            continue\n        if num % 10 == 66:\n            continue\n        if num % 10 == 67:\n            continue\n        if num % 10 == 68:\n            continue\n        if num % 10 == 69:\n            continue\n        if num % 10 == 70:\n            continue\n        if num % 10 == 71:\n            continue\n        if num % 10 == 72:\n            continue\n        if num % 10 == 73:\n            continue\n        if num % 10 == 74:\n            continue\n        if num % 10 == 75:\n            continue\n        if num % 10 == 76:\n            continue\n        if num % 10 == 77:\n            continue\n        if num % 10 == 78:\n            continue\n        if num % 10 == 79:\n            continue\n        if num % 10 == 80:\n            continue\n        if num % 10 == 81:\n            continue\n        if num % 10 == 82:\n            continue\n        if num % 10 == 83:\n            continue\n        if num % 10 == 84:\n            continue\n        if num % 10 == 85:\n            continue\n        if num % 10 == 86:\n            continue\n        if num % 10 == 87:\n            continue\n        if num % 10 == 88:\n            continue\n        if num % 10 == 89:\n            continue\n        if num % 10 == 90:\n            continue\n        if num % 10 == 91:\n            continue\n        if num % 10 == 92:\n            continue\n        if num % 10 == 93:\n            continue\n        if num % 10 == 94:\n            continue\n        if num % 10 == 95:\n            continue\n        if num % 10 == 96:\n            continue\n        if num % 10 == 97:\n            continue\n        if num % 10 == 98:\n            continue\n        if num % 10 == 99:\n            continue\n        if num % 10 == 100:\n            continue\n        if num % 10 == 101:\n            continue\n        if num % 10 == 102:\n            continue\n        if num % 10 == 103:\n            continue\n        if num % 10 == 104:\n            continue\n        if num % 10 == 105:\n            continue\n        if num % 10 == 106:\n            continue\n        if num % 10 == 107:\n            continue\n        if num % 10 == 108:\n            continue\n        if num % 10 == 109:\n            continue\n        if num % 10 == 110:\n            continue\n        if num % 10 == 111:\n            continue\n        if num % 10 == 112:\n            continue\n        if num % 10 == 113:\n            continue\n        if num % 10 == 114:\n            continue\n        if num % 10 == 115:\n            continue\n        if num % 10 == 116:\n            continue\n        if num % 10 == 117:\n            continue\n        if num % 10 == 118:\n            continue\n        if num % 10 == 119:\n            continue\n        if num % 10 == 120:\n            continue\n        if num % 10 == 121:\n            continue\n        if num % 10 == 122:\n            continue\n        if num % 10 == 123:\n            continue\n        if num % 10 == 124:\n            continue\n        if num % 10 == 125:\n            continue\n        if num % 10 == 126:\n            continue\n        if num % 10 == 127:\n            continue\n        if num % 10 == 128:\n            continue\n        if num % 10 == 129:\n            continue\n        if num % 10 == 130:\n            continue\n        if num % 10 == 131:\n            continue\n        if num % 10 == 132:\n            continue\n        if num % 10 == 133:\n            continue\n        if num % 10 == 134:\n            continue\n        if num % 10 == 135:\n            continue\n        if num % 10 == 136:\n            continue\n        if num % 10 == 137:\n            continue\n        if num % 10 == 138:\n            continue\n        if num % 10 == 139:\n            continue\n        if num % 10 == 140:\n            continue\n        if num % 10 == 141:\n            continue\n        if num % 10 == 142:\n            continue\n        if num % 10 == 143:\n            continue\n        if num % 10 == 144:\n            continue\n        if num % 10 == 145:\n            continue\n        if num % 10 == 146:\n            continue\n        if num % 10 == 147:\n            continue\n        if num % 10 == 148:\n            continue\n        if num % 10 == 149:\n            continue\n        if num % 10 == 150:\n            continue\n        if num % 10 == 151:\n            continue\n        if num % 10 == 152:\n            continue\n        if num % 10 == 153:\n            continue\n        if num % 10 == 154:\n            continue\n        if num % 10 == 155:\n            continue\n        if num % 10 == 156:\n            continue\n        if num % 10 == 157:\n            continue\n        if num % 10 == 158:\n            continue"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = []\n    for i in range(1, limit):\n        if sum(amicable_numbers) == i:\n            amicable_numbers_sum.append(i)\n            amicable_numbers.clear()\n        if sum(amicable_numbers) % i == 0:\n            amicable_numbers.append(i)\n    \n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    # loop through all the numbers\n    for num in range(1, limit):\n        # if the sum of the number and the sum of the squares is the same as the target number, \n        # then add it to the total\n        if num % 2 == 0:\n            if num**2 == (num+1)**2:\n                amicable_numbers_sum += num\n        # if the sum of the numbers is equal to the target number, then the sum of the squares is 0\n        # and the sum of the squares is the target number\n        else:\n            if num**2 == (num+1)**2:\n                amicable_numbers_sum += num\n            else:\n                amicable_numbers_sum += num**2\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Global\n    summ = 0\n    \n    # Loop\n    for i in range(1, limit):\n        \n        # If number is amicable\n        if is_amicable(i):\n            \n            # Sum up amicable numbers\n            for j in range(i, limit):\n                if is_amicable(j) and is_amicable(j-i):\n                    summ += j\n    \n    # Return sum\n    return summ\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1,limit+1):\n        divisors = i\n        for j in range(1,i):\n            if i % j == 0:\n                divisors += j\n        if i % divisors == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return float('inf')\n    else:\n        return 2*cmath.asin(b/float(a))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_imag(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex_real(a,b):\n    '''\n    Write a function to get the angle of a complex number in real and imaginary parts.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex_real_mag(a,b):\n    '''\n    Write a function to get the angle of a complex number in real and imaginary parts in magnitude.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_complex_mag(a,b):\n    '''\n    Write a function to get the angle of a real number in complex and imaginary parts in magnitude.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_complex(a,b):\n    '''\n    Write a function to get the angle of a real number in real and imaginary parts.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex_imag_mag(a,b):\n    '''\n    Write a function to get the angle of a complex number in imaginary and magnitude parts.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex_imag(a,b):\n    '''\n    Write a function to get the angle of a complex number in imaginary parts.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_imag_mag(a,b):\n    '''\n    Write a function to get the angle of a real number in imaginary parts and magnitude parts.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_imag_mag_complex(a,b):\n    '''\n    Write a function to get the angle of a real number in imaginary parts and magnitude parts in complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex_real_imag_mag(a,b):\n    '''\n    Write a function to get the angle of a complex number in imaginary parts and magnitude parts in real and imaginary parts.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_imag(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex_real_imag(a,b):\n    '''\n    Write a function to get the angle of a complex number in real and imaginary parts in imaginary parts and magnitude parts.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_complex_imag(a,b):\n    '''\n    Write a function to get the angle of a real number in imaginary parts and magnitude parts in imaginary parts and magnitude parts in complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_imag_mag_complex(a,b):\n    '''\n    Write a function to get the angle of a real number in imaginary parts and magnitude parts in imaginary parts and magnitude parts in complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_imag_mag_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a real number in imaginary parts and magnitude parts in imaginary parts and magnitude parts in complex and complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_imag_mag_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a real number in imaginary parts and magnitude parts in imaginary parts and magnitude parts in complex and complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_imag_mag_complex_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a real number in imaginary parts and magnitude parts in imaginary parts and magnitude parts in complex and complex and complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_imag_mag_complex_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a real number in imaginary parts and magnitude parts in imaginary parts and magnitude parts in complex and complex and complex and complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex_real_imag_mag_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number in imaginary parts and magnitude parts in imaginary parts and magnitude parts in complex and complex and complex and complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_imag(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex_real(a,b):\n    '''\n    Write a function to get the angle of a complex number in real and imaginary parts.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_complex(a,b):\n    '''\n    Write a function to get the angle of a real number in complex and imaginary parts.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_complex_real_imag(a,b):\n    '''\n    Write a function to get the angle of a complex number in imaginary parts and magnitude parts in imaginary parts and magnitude parts in complex and complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angle_real_imag_mag(a,b):\n    '''\n    Write a function to get the angle of a real number in imaginary parts and magnitude parts in imaginary parts and magnitude parts in complex.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\ndef angl"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #d1 = b**2 - 4*a*cmath.cos(b)\n    #d2 = 2*a*cmath.sin(b)\n    #d = math.sqrt(d1**2 + d2**2)\n    d = b*b - 4*a*cmath.cos(b)\n    if d<0:\n        return (math.acos(-d)/2)\n    else:\n        return (math.acos(d/2))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # if a and b are of complex numbers\n    if isinstance(a, complex) and isinstance(b, complex):\n        # get real part of complex number\n        r = a.real\n        # get imaginary part of complex number\n        i = a.imag\n        # get the absolute value of imaginary part\n        a_abs = abs(i)\n        # get the absolute value of real part\n        b_abs = abs(r)\n        # get the complex angle from complex numbers\n        angle = cmath.phase(complex(b_abs,a_abs))\n        # return the angle\n        return angle\n    # if they are of real numbers\n    elif isinstance(a, float) or isinstance(b, float):\n        # check if it is a number and its real and imaginary parts\n        if isinstance(a, float) and isinstance(b, float):\n            # check if it is a number\n            if a == b:\n                # return a (complex)\n                return cmath.phase(complex(a,b))\n            # otherwise\n            else:\n                # return a (complex)\n                return cmath.phase(complex(a,b))\n        # if it is a number or it is a complex number\n        else:\n            # return a (complex)\n            return complex(a,b)\n    # if it is not a number or a complex number\n    else:\n        raise ValueError(\"[ERROR] angle_complex() is only defined for complex numbers.\")\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(a.real + b.real + cmath.pi/2)\n    print(a.imag + b.imag + cmath.pi/2)\n    \n    \ndef angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # print(a.real + b.real + cmath.pi/2)\n    # print(a.imag + b.imag + cmath.pi/2)\n    \n    c = a*b\n    d = b*a\n    \n    # print(c.real + d.real + cmath.pi/2)\n    # print(c.imag + d.imag + cmath.pi/2)\n    \n    return (c.real + d.real + cmath.pi/2)\n    \n    \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    \n    return fact\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #check for a and b are complex\n    if cmath.iscomplex(a) and cmath.iscomplex(b):\n        #check if the complex numbers are positive, negative or zero\n        #if they are positive, it returns the angle in radians\n        #else it returns the angle in degrees\n        if a.imag == 0 and b.imag == 0:\n            if a.real == b.real:\n                angle = cmath.degrees(a.real)\n            else:\n                angle = cmath.degrees(a.real) + cmath.degrees(b.imag)\n        #if the complex numbers are negative, negative or zero\n        #then it returns the angle in radians\n        #else it returns the angle in degrees\n        elif a.imag!= 0 and b.imag!= 0:\n            angle = cmath.degrees(a.imag) + cmath.degrees(b.imag)\n        elif a.imag == 0 and b.imag == 0:\n            if a.real == b.real:\n                angle = cmath.degrees(a.real)\n            else:\n                angle = cmath.degrees(a.real) + cmath.degrees(b.imag)\n        elif a.imag!= 0 and b.imag!= 0:\n            angle = cmath.degrees(a.imag) + cmath.degrees(b.imag)\n        elif a.imag == 0 and b.imag == 0:\n            angle = cmath.degrees(a.real)\n        else:\n            angle = cmath.degrees(cmath.acos(a.imag/(a.real*b.real)))\n    elif cmath.isreal(a) and cmath.isreal(b):\n        angle = cmath.degrees(a)\n    elif cmath.isreal(a) and cmath.iscomplex(b):\n        angle = cmath.degrees(b)\n    elif cmath.iscomplex(a) and cmath.iscomplex(b):\n        angle = cmath.degrees(cmath.acos(a.imag/b.imag))\n    elif cmath.isreal(a) and cmath.iscomplex(b):\n        angle = cmath.degrees(a)\n    elif cmath.isreal(a) and cmath.iscomplex(b):\n        angle = cmath.degrees(a) + cmath.degrees(b.imag)\n    elif cmath.isreal(a) and cmath.iscomplex(b):\n        angle = cmath.degrees(a) + cmath.degrees(b.imag) + 180\n    elif cmath.isreal(a) and cmath.iscomplex(b):\n        angle = cmath.degrees(a) + cmath.degrees(b.imag)\n    else:\n        angle = -1\n    #convert degrees to radians\n    if angle >= 0:\n        angle = angle*180/3.14159265358979323846\n    else:\n        angle = angle*-1\n    #return the angle in radians\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (b == 0):\n        return cmath.phase(a)\n    elif (a < 0):\n        a = a + pi\n    elif (a > 0):\n        a = a - pi\n    return cmath.phase(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.complex.conjugate(a)\n    cmath.complex.conjugate(b)\n    cmath.asin(a)\n    cmath.acos(b)\n    cmath.atan2(b,a)\n    cmath.asinh(b)\n    cmath.acosh(b)\n    cmath.atanh(a)\n    cmath.asin2(b,a)\n    cmath.atan2(b,a)\n    cmath.atanh(a)\n    cmath.hypot(b,a)\n    cmath.asinh(b)\n    cmath.atan2(b,a)\n    cmath.atan2(b,a)\n    cmath.hypot(b,a)\n    cmath.log(b,cmath.e)\n    cmath.log10(b,cmath.e)\n    cmath.log1p(b,cmath.e)\n    cmath.log2(b,cmath.e)\n    cmath.ln(b,cmath.e)\n    cmath.log(b,cmath.e)\n    cmath.log1p(b,cmath.e)\n    cmath.log2(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.cbrt(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.cbrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.cbrt(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.cbrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.cbrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.cbrt(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.cbrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.cbrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.cbrt(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.sqrt(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e)\n    cmath.reciprocal(b,cmath.e"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # a = a[0]\n    # b = b[0]\n    c = b[0]\n    # real part\n    # a = math.sqrt(abs(a))\n    # imag part\n    # c = math.sqrt(abs(c))\n    # output = math.acos(a/c)\n    output = cmath.acos(a/c)\n    print(output)\n    return output\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    count_0 = 0 \n    count_1 = 0 \n    \n    for i in string: \n        \n        if i == '0': \n            count_0 += 1 \n        elif i == '1': \n            count_1 += 1 \n    \n    return max(count_0 - count_1, count_0, count_1)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    min_length = max_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            min_length += 1\n        elif string[i] == '1':\n            max_length += 1\n    return max(max_length-min_length, 0)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = 0\n    r = 0\n    for i in range(len(string)):\n        if string[i] == 0:\n            l += 1\n        else:\n            r += 1\n    return max(r - l, l)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    d = 0\n    c = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            c += 1\n        if string[i] == '1':\n            d += 1\n    return max(c - d, 0)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            n = n + 1\n        else:\n            n = n - 1\n    return n\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    return max(count_0,count_1)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            ans += 1\n        else:\n            ans -= 1\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string =='':\n        return 0\n    length = 0\n    i = 0\n    while i < len(string):\n        if string[i] == '0':\n            length += 1\n        else:\n            length -= 1\n        i += 1\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) <= 1:\n        return 0\n    else:\n        max_diff = 0\n        for i in range(len(string)):\n            if string[i] == '0':\n                max_diff += 1\n            if string[i] == '1':\n                max_diff -= 1\n        return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == '': return 0\n    s = list(string)\n    s.sort()\n    l = 0\n    r = 1\n    for i in range(len(s)):\n        if s[i] == '0':\n            l = l + 1\n        else:\n            r = r + 1\n    return r-l\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0: \n        return a\n    else: \n        return a + sum(a,b - 1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a,b = int(a),int(b)\n    if a==0 or b==0:\n        return a\n    elif a==b:\n        return a\n    return a//b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if not a and not b: \n        return 0\n    elif a and not b: \n        return 1\n    elif a and b: \n        return a + b\n    elif a!= b: \n        return abs(a)//abs(b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a,b=int(a),int(b)\n    if a==b:\n        return a\n    elif a%b==0:\n        return a//b\n    else:\n        return b//a\n    \nn, m=map(int,input().split())\nprint(sum(n,m)"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = abs(a)\n    b = abs(b)\n    if a<b:\n        a,b = b,a\n    a_div = [a//i for i in range(1,b+1)]\n    b_div = [b//i for i in range(1,a+1)]\n    return a + sum(a_div) + sum(b_div)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b == 0): \n        return 1\n    return a + sum(b,a%b) \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    for i in range(1,max(a,b)+1):\n        if (a%i==0) and (b%i==0):\n            s+=i\n    return s\n    \n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def common(a,b):\n        '''\n        Given two numbers, find all their common divisors.\n        '''\n        a,b = sorted([a,b])\n        if a % b == 0:\n            return [a//b]\n        else:\n            return [b//a] + common(a//b, b)\n    return sum(a,b) - common(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # a and b are numbers \n    # you need to find the common divisors of them \n    # e.g. if a = 2 and b = 7 then 2 and 3 are common \n    # common divisors = 3, 7 \n    # so return 3 \n    \n    # 1. Initialize variables \n    common_divisors = 0\n    \n    # 2. Iterate through nums and find common divisors \n    for i in range(1,min(a,b)+1): \n        if a % i == 0 and b % i == 0: \n            common_divisors += i \n    \n    # 3. Return the common divisors \n    return common_divisors \n    \n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        a = a//b\n        return sum(a,b)\n    else:\n        b = b//a\n        return sum(a,b)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # define the result\n    result = 1\n    # loop over the two input values\n    for num in range(0, x):\n        # find the sum of the input values\n        sum = result\n        # iterate over the remaining values\n        for num in range(x, y):\n            # calculate the result\n            result = result * num\n        # return the result\n        return result\n    # return the two inputs\n    return x, y"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = 1\n    for i in range(len(str(y))):\n        z *= int(str(x)[i])\n    return z\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    if y > 0:\n        return x * y\n    else:\n        return -(x * y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Convert the inputs to integer\n    x = int(x)\n    y = int(y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(len(str(y))):\n        result += int(x) * int(str(y)[i])\n    print(result)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = str(x)\n    y = str(y)\n    m = len(x)\n    n = len(y)\n    ans = 0\n    for i in range(m):\n        ans += int(x[i])*int(y[i])\n    return ans\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str.split() if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # TODO: Write your code here\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    def get_long_words(text):\n        word_dict = {}\n        for word in text:\n            if word_dict.get(word, 0) == 0:\n                word_dict[word] = 1\n            else:\n                word_dict[word] = word_dict[word] + 1\n        return word_dict\n    \n    long_words = get_long_words(str)\n    if len(long_words) > n:\n        long_words = sorted(long_words, key=long_words.get, reverse=True)\n        print(''.join(long_words[:n]))\n    else:\n        print(''.join(long_words))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Largest word\n    words = []\n    for word in str:\n        # If word is longer than n\n        if len(word) > n:\n            # Add word to list\n            words.append(word)\n    # Return result\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    return len(words) > n\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = [word for word in str.split() if len(word) > n]\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words_long = []\n    for word in str:\n        if len(word) > n:\n            words_long.append(word)\n    return words_long\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    max_length = 0\n    counts = {}\n    for word in str.split():\n        counts[word] = counts.get(word, 0) + 1\n    \n    for word, count in counts.items():\n        if count > n:\n            max_length = max(count, max_length)\n    \n    return(max_length)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n <= 0:\n        return\n    s = str.lower()\n    return [s[i:i+n] for i in range(len(s)) if len(s[i:i+n])>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest = []\n    for word in str:\n        if len(word) > n:\n            longest.append(word)\n    return longest\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    check = True\n    for row in my_matrix:\n        for element in row:\n            if element == 0:\n                check = False\n                break\n    if check:\n        print('The matrix is a magic square.')\n    else:\n        print('The matrix is not a magic square.')\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #First check if its a square\n    if len(my_matrix) == len(my_matrix[0]) == 2:\n        return True\n    else:\n        #Then check if its magic\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix[i])):\n                if my_matrix[i][j]!= 0:\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(my_matrix.shape[0]):\n        for j in range(my_matrix.shape[1]):\n            if my_matrix[i][j]!= 0:\n                if my_matrix[i][j]!= my_matrix[i][j - 1] or my_matrix[i][j]!= my_matrix[i - 1][j] or my_matrix[i][j]!= my_matrix[i + 1][j]:\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix)):\n            if my_matrix[i][j]!= 0:\n                my_matrix[i][j] += 1\n                break\n    # Write your code here\n    square_checker = [\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False]\n    ]\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix)):\n            square_checker[i][j] = my_matrix[i][j] == my_matrix[i][j]\n    if square_checker[0][0] and square_checker[0][1] and square_checker[0][2] and square_checker[0][3] and square_checker[0][4] and square_checker[1][0] and square_checker[1][1] and square_checker[1][2] and square_checker[1][3] and square_checker[1][4] and square_checker[2][0] and square_checker[2][1] and square_checker[2][2] and square_checker[2][3] and square_checker[2][4]:\n        return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    is_magic_square = True\n    if len(my_matrix)!= len(my_matrix[0]):\n        is_magic_square = False\n    if len(my_matrix[0]) == len(my_matrix):\n        for line in range(len(my_matrix)):\n            # check each column\n            for column in range(len(my_matrix[0])):\n                # check each entry\n                if my_matrix[line][column]!= my_matrix[line][column+1]:\n                    is_magic_square = False\n        return is_magic_square\n    else:\n        return is_magic_square\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # write your code here\n    if len(my_matrix) == len(my_matrix[0]):\n        for i in range(len(my_matrix)):\n            if my_matrix[i][i]!= 0:\n                return False\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i == j:\n                print(\"Row {} and Column {} has a magic square.\".format(i,j))\n                return True\n    print(\"The matrix does not have a magic square.\")\n    return False\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # if not nums:\n    #     return None\n    # if nums.count(max(nums))==1:\n    #     return nums[0]\n    # return max(nums)\n    return max(set(nums), key=nums.count)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    maximum = None\n    n = len(nums)\n    for i in range(n):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d=defaultdict(int)\n    for i in nums:\n        d[i]+=1\n    return max(d,key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #Assume the input is sorted\n    #O(n)\n    #O(n)\n    #O(n)\n    #O(n)\n    max_freq = max(nums)\n    #If there is a number that is not in the list of numbers,\n    #find its maximum frequency in the list.\n    for number in nums:\n        if number not in nums:\n            max_freq = max(max_freq, number)\n    #If there is a number that is in the list of numbers,\n    #return its maximum frequency in the list.\n    #O(n)\n    return max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    for key,val in count.items():\n        if val == 1:\n            return key\n    \ndef count_nums(nums, count):\n    '''\n    Write a function to count all the occurrences of a given number in the given list.\n    '''\n    count[nums[0]] -= 1\n    for num in nums[1:]:\n        count[num] -= 1\n        if count[num] == 0:\n            count[num] = 1\n    return count\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for num in nums:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] = d[num] + 1\n    \n    for k, v in d.items():\n        if v == 1:\n            return k\n    \n    return None\n    \ndef create_dict(l):\n    '''\n    Create a dictionary from a list.\n    '''\n    d = defaultdict(list)\n    for i in l:\n        d[i].append(i)\n    return d\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash_map = defaultdict(int)\n    for n in nums:\n        hash_map[n] += 1\n    \n    maximum = max(hash_map.values())\n    max_item = None\n    for key,value in hash_map.items():\n        if value == maximum:\n            max_item = key\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    return max(freq.items(), key = lambda item:item[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_idx = -1\n    for idx, num in enumerate(nums):\n        if num > max_freq:\n            max_freq = num\n            max_idx = idx\n    return max_idx\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    from heapq import *\n    heap = []\n    for num in nums:\n        heappush(heap, num)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1.replace('y', '').replace('i', '').replace('u', '').replace('e', '').replace('o', '').replace('a', '').upper()\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    print(str1)\n    rev_str=''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in ['a', 'e', 'i', 'o', 'u']:\n            print(str1[i])\n        else:\n            rev_str = str1[i] + rev_str\n    return rev_str\n    \n    \nif __name__ == \"__main__\":\n    str1 = input(\"Enter the string you want to reverse\")\n    print(reverse_vowels(str1)"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    rev_str = ''\n    for i in str1:\n        if i in vowels:\n            rev_str += i\n        else:\n            pass\n    return rev_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #Remove characters that occur more than once\n    vowels = \"aeiouAEIOU\"\n    str1 = str1.lower()\n    \n    #create an empty list to store vowels\n    vowels_list = []\n    \n    #append each character in str1 to vowels_list\n    for letter in str1:\n        if letter not in vowels:\n            vowels_list.append(letter)\n    \n    #reverse vowels_list\n    reverse = \"\".join(vowels_list)\n    return reverse\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = []\n    for char in str1:\n        if char in ('a','e','i','o','u','A','E','I','O','U'):\n            l.append(char)\n    str2 = ''.join(l)\n    print('Reversed: {}'.format(str2))\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # if input is empty or not a string\n    if not str1:\n        return\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels_str = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels_str:\n            result_str += str1[i].upper()\n        else:\n            result_str += str1[i]\n    return result_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    res = ''\n    for c in str1:\n        if c in vowels:\n            res = res + c\n        else:\n            res = res + c.upper()\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    rev_str = ''\n    if str1.isupper():\n        return str1\n    else:\n        for char in str1:\n            if char in vowels:\n                rev_str += char\n            else:\n                rev_str +=''\n        return rev_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #pass # replace this code\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    new = []\n    for char in str1:\n        if char in vowels:\n            new.append(char)\n    new = ''.join(new)\n    return new\n    # pass # replace this code\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = str(tup1)\n    tup1 = tup1.replace(\"(\",\"\")\n    tup1 = tup1.replace(\")\",\"\")\n    tup1 = tup1.replace(\",\",\"\")\n    return tup1\n    \ndef print_tuple(tup1):\n    '''\n    Write a function to print the tuple in a nice manner\n    '''\n    print(tup1)\n    \ndef get_min_max(tup1):\n    '''\n    Write a function to get the minimum and maximum of a tuple.\n    '''\n    min = tup1[0]\n    max = tup1[0]\n    for i in range(1, len(tup1)):\n        if tup1[i] < min:\n            min = tup1[i]\n        if tup1[i] > max:\n            max = tup1[i]\n    print(min, max)\n    return min, max\n    \ndef get_mean(tup1):\n    '''\n    Write a function to get the mean of a tuple.\n    '''\n    tup1 = tup_string(tup1)\n    tup1 = tup1.split(\",\")\n    tup1 = [int(i) for i in tup1]\n    total = tup1[0]\n    for i in range(1, len(tup1)):\n        total += tup1[i]\n    mean = total / len(tup1)\n    print(mean)\n    return mean\n    \ndef get_median(tup1):\n    '''\n    Write a function to get the median of a tuple.\n    '''\n    tup1 = tup_string(tup1)\n    tup1 = tup_string(tup1).split(\",\")\n    tup1 = [int(i) for i in tup1]\n    tup1 = tup1[:-1]\n    tup1.sort()\n    if len(tup1) % 2!= 0:\n        median = tup1[(len(tup1) // 2) - 1] + tup1[(len(tup1) // 2) + 1]\n    else:\n        median = tup1[(len(tup1) // 2) - 1]\n    print(median)\n    return median\n    \ndef get_mode(tup1):\n    '''\n    Write a function to get the mode of a tuple.\n    '''\n    tup1 = tup_string(tup1)\n    tup1 = tup_string(tup1).split(\",\")\n    tup1 = [int(i) for i in tup1]\n    tup1 = tup1[:-1]\n    tup1.sort()\n    if len(tup1) % 2!= 0:\n        mode = tup1[tup1.index(max(tup1))]\n    else:\n        mode = tup1[tup1.index(max(tup1)) - 1]\n    print(mode)\n    return mode\n    \ndef get_standard_deviation(tup1):\n    '''\n    Write a function to get the standard deviation of a tuple.\n    '''\n    tup1 = tup_string(tup1)\n    tup1 = tup_string(tup1).split(\",\")\n    tup1 = [int(i) for i in tup1]\n    tup1 = tup1[:-1]\n    tup1.sort()\n    mean = tup1[0]\n    total = 0\n    for i in range(1, len(tup1)):\n        total += tup1[i]\n    std = total / len(tup1)\n    print(std)\n    return std\n    \ndef get_variance(tup1):\n    '''\n    Write a function to get the variance of a tuple.\n    '''\n    tup1 = tup_string(tup1)\n    tup1 = tup_string(tup1).split(\",\")\n    tup1 = [int(i) for i in tup1]\n    tup1 = tup1[:-1]\n    tup1.sort()\n    mean = tup1[0]\n    total = 0\n    for i in range(1, len(tup1)):\n        total += tup1[i]\n    vartotal = total / len(tup1)\n    sum1 = 0\n    for i in range(1, len(tup1)):\n        sum1 += tup1[i] * (tup1[i] - mean)\n    var = sum1 / len(tup1) - var\n    print(var)\n    return var\n    \ndef print_stats(tup1):\n    '''\n    Write a function to print the tuple stats.\n    '''\n    print(f\"Mean: {get_mean(tup1)}\")\n    print(f\"Median: {get_median(tup1)}\")\n    print(f\"Mode: {get_mode(tup1)}\")\n    print(f\"Standard deviation: {get_standard_deviation(tup1)}\")\n    print(f\"Variance: {get_variance(tup1)}\")\n    \ndef print_stats_tuple(tup1):\n    '''\n    Write a function to print the tuple stats.\n    '''\n    print_stats(tup1)\n    print(\"\\n\")\n    \ndef main():\n    '''\n    This function prints the stats for a tuple.\n    '''\n    tup1 = (20, 30, 10, 30, 20, 10, 20, 30)\n    tup2 = (2, 4, 6, 8, 4, 2, 4, 4, 6, 8, 4)\n    \n    print(\"\\n********* TUPLE STATISTICS *********\\n\")\n    print(\"Mean: \" + str(get_mean(tup1)) + \" \\n\")\n    print(\"Median: \" + str(get_median(tup1)) + \" \\n\")\n    print(\"Mode: \" + str(get_mode(tup1)) + \" \\n\")\n    print(\"Standard deviation: \" + str(get_standard_deviation(tup1)) + \" \\n\")\n    print(\"Variance: \" + str(get_variance(tup1)) + \" \\n\")\n    print(\"\\n********* TUPLE STATISTICS *********\")\n    print(\"\\n\")\n    \n    print_stats_tuple(tup1)\n    \n    print(\"\\n********* TUPLE STATISTICS 2 *********\\n\")\n    print(\"Mean: \" + str(get_mean(tup2)) + \" \\n\")\n    print(\"Median: \" + str(get_median(tup2)) + \" \\n\")\n    print(\"Mode: \" + str(get_mode(tup2)) + \" \\n\")\n    print(\"Standard deviation: \" + str(get_standard_deviation(tup2)) + \" \\n\")\n    print(\"Variance: \" + str(get_variance(tup2)) + \" \\n\")\n    print(\"\\n********* TUPLE STATISTICS 2 *********\\n\")\n    print(\"\\n\")\n    \n    print_stats_tuple(tup2)\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ','.join([str(i) for i in tup1]) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_tup = \"(\"\n    for x in tup1:\n        string_tup += str(x) + \",\"\n    string_tup = string_tup[0:-1] + \")\"\n    return string_tup\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \n    \n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = str()\n    for element in tup1:\n        string = string + str(element)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = str(tup1[0]) + \" \" + str(tup1[1])\n    return tup2"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \",\".join([str(elem) for elem in tup1])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    lst = [str(i) for i in tup1]\n    return \"(\" + \", \".join(lst) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s1 = ''\n    for el in tup1:\n        s1 += f'{el}, '\n    return s1[:-2]\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in nums:\n        if i < 0:\n            s += i\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    res = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            res += nums[i]\n    return res\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum = 0\n    for num in nums:\n        if num < 0:\n            negativenum += abs(num)\n    return negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_of_negativenum = 0\n    for num in nums:\n        if num < 0:\n            sum_of_negativenum += num\n    return sum_of_negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for number in nums:\n        if number < 0:\n            total -= number\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            s += nums[i]\n    return s\n    \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    start = 1\n    end = n\n    if n == 1:\n        return 1\n    while start <= end:\n        mid = int((start + end) / 2)\n        if (mid == 1) or (mid == n) or (mid == (n * n - 1)):\n            return mid\n        if mid < start or mid > end:\n            return None\n        start = mid + 1\n    return None\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = 0\n    while x <= n:\n        y = 0\n        while y <= x:\n            z = (x + y) // 2\n            if z == x or z == x + 1 or z == x - 1:\n                return z\n            y = z + 1\n        x += 1\n    raise ValueError(\"n is too low\")\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    while n > 0:\n        n //= 6\n    return n\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return n\n    else:\n        return (n**2 + (n+1)**2)**0.5\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return n \n    elif n == 1: \n        return 1\n    else: \n        return hexagonal_num(n-1) + hexagonal_num(n-1) \n \nprint(hexagonal_num(4)) \nprint(hexagonal_num(5)) \nprint(hexagonal_num(6)) \nprint(hexagonal_num(7)) \nprint(hexagonal_num(8)) \nprint(hexagonal_num(9)) \nprint(hexagonal_num(10)) \nprint(hexagonal_num(11)) \nprint(hexagonal_num(12)) \nprint(hexagonal_num(13)) \nprint(hexagonal_num(14)) \nprint(hexagonal_num(15)) \nprint(hexagonal_num(16)) \nprint(hexagonal_num(17)) \nprint(hexagonal_num(18)) \nprint(hexagonal_num(19)) \nprint(hexagonal_num(20)) \nprint(hexagonal_num(21)) \nprint(hexagonal_num(22)) \nprint(hexagonal_num(23)) \nprint(hexagonal_num(24)) \nprint(hexagonal_num(25)) \nprint(hexagonal_num(26)) \nprint(hexagonal_num(27)) \nprint(hexagonal_num(28)) \nprint(hexagonal_num(29)) \nprint(hexagonal_num(30)) \nprint(hexagonal_num(31)) \nprint(hexagonal_num(32)) \nprint(hexagonal_num(33)) \nprint(hexagonal_num(34)) \nprint(hexagonal_num(35)) \nprint(hexagonal_num(36)) \nprint(hexagonal_num(37)) \nprint(hexagonal_num(38)) \nprint(hexagonal_num(39)) \nprint(hexagonal_num(40)) \nprint(hexagonal_num(41)) \nprint(hexagonal_num(42)) \nprint(hexagonal_num(43)) \nprint(hexagonal_num(44)) \nprint(hexagonal_num(45)) \nprint(hexagonal_num(46)) \nprint(hexagonal_num(47)) \nprint(hexagonal_num(48)) \nprint(hexagonal_num(49)) \nprint(hexagonal_num(50)) \nprint(hexagonal_num(51)) \nprint(hexagonal_num(52)) \nprint(hexagonal_num(53)) \nprint(hexagonal_num(54)) \nprint(hexagonal_num(55)) \nprint(hexagonal_num(56)) \nprint(hexagonal_num(57)) \nprint(hexagonal_num(58)) \nprint(hexagonal_num(59)) \nprint(hexagonal_num(60)) \nprint(hexagonal_num(61)) \nprint(hexagonal_num(62)) \nprint(hexagonal_num(63)) \nprint(hexagonal_num(64)) \nprint(hexagonal_num(65)) \nprint(hexagonal_num(66)) \nprint(hexagonal_num(67)) \nprint(hexagonal_num(68)) \nprint(hexagonal_num(69)) \nprint(hexagonal_num(70)) \nprint(hexagonal_num(71)) \nprint(hexagonal_num(72)) \nprint(hexagonal_num(73)) \nprint(hexagonal_num(74)) \nprint(hexagonal_num(75)) \nprint(hexagonal_num(76)) \nprint(hexagonal_num(77)) \nprint(hexagonal_num(78)) \nprint(hexagonal_num(79)) \nprint(hexagonal_num(80)) \nprint(hexagonal_num(81)) \nprint(hexagonal_num(82)) \nprint(hexagonal_num(83)) \nprint(hexagonal_num(84)) \nprint(hexagonal_num(85)) \nprint(hexagonal_num(86)) \nprint(hexagonal_num(87)) \nprint(hexagonal_num(88)) \nprint(hexagonal_num(89)) \nprint(hexagonal_num(90)) \nprint(hexagonal_num(91)) \nprint(hexagonal_num(92)) \nprint(hexagonal_num(93)) \nprint(hexagonal_num(94)) \nprint(hexagonal_num(95)) \nprint(hexagonal_num(96)) \nprint(hexagonal_num(97)) \nprint(hexagonal_num(98)) \nprint(hexagonal_num(99)) \nprint(hexagonal_num(100)) \nprint(hexagonal_num(101)) \nprint(hexagonal_num(102)) \nprint(hexagonal_num(103)) \nprint(hexagonal_num(104)) \nprint(hexagonal_num(105)) \nprint(hexagonal_num(106)) \nprint(hexagonal_num(107)) \nprint(hexagonal_num(108)) \nprint(hexagonal_num(109)) \nprint(hexagonal_num(110)) \nprint(hexagonal_num(111)) \nprint(hexagonal_num(112)) \nprint(hexagonal_num(113)) \nprint(hexagonal_num(114)) \nprint(hexagonal_num(115)) \nprint(hexagonal_num(116)) \nprint(hexagonal_num(117)) \nprint(hexagonal_num(118)) \nprint(hexagonal_num(119)) \nprint(hexagonal_num(120)) \nprint(hexagonal_num(121)) \nprint(hexagonal_num(122)) \nprint(hexagonal_num(123)) \nprint(hexagonal_num(124)) \nprint(hexagonal_num(125)) \nprint(hexagonal_num(126)) \nprint(hexagonal_num(127)) \nprint(hexagonal_num(128)) \nprint(hexagonal_num(129)) \nprint(hexagonal_num(130)) \nprint(hexagonal_num(131)) \nprint(hexagonal_num(132)) \nprint(hexagonal_num(133)) \nprint(hexagonal_num(134)) \nprint(hexagonal_num(135)) \nprint(hexagonal_num(136)) \nprint(hexagonal_num(137)) \nprint(hexagonal_num(138)) \nprint(hexagonal_num(139)) \nprint(hexagonal_num(140)) \nprint(hexagonal_num(141)) \nprint(hexagonal_num(142)) \nprint(hexagonal_num(143)) \nprint(hexagonal_num(144)) \nprint(hexagonal_num(145)) \nprint(hexagonal_num(146)) \nprint(hexagonal_num(147)) \nprint(hexagonal_num(148)) \nprint(hexagonal_num(149)) \nprint(hexagonal_num(150)) \nprint(hexagonal_num(151)) \nprint(hexagonal_num(152)) \nprint(hexagonal_num(153)) \nprint(hexagonal_num(154)) \nprint(hexagonal_num(155)) \nprint(hexagonal_num(156)) \nprint(hexagonal_num(157)) \nprint(hexagonal_num(158)) \nprint(hexagonal_num(159)) \nprint(hexagonal_num(160)) \nprint(hexagonal_num(161)) \nprint(hexagonal_num(162)) \nprint(hexagonal_num(163)) \nprint(hexagonal_num(164)) \nprint(hexagonal_num(165)) \nprint(hexagonal_num(166)) \nprint(hexagonal_num(167)) \nprint(hexagonal_num(168)) \nprint(hexagonal_num(169)) \nprint(hexagonal_num(170)) \nprint(hexagonal_num(171)) \nprint(hexagonal_num(172)) \nprint(hexagonal_num(173)) \nprint(hexagonal_num(174)) \nprint(hexagonal_num(175)) \nprint(hexagonal_num(176)) \nprint(hexagonal_num(177)) \nprint(hexagonal_num(178)) \nprint(hexagonal_num(179)) \nprint(hexagonal_num(180)) \nprint(hexagonal_num(181)) \nprint"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    print('Hexagonal number: ', n)\n    \n    if n % 2 == 0:\n        n += 1\n    \n    if n % 4 == 0:\n        n += 1\n    \n    print('Hexagonal number is: ', n)\n    \n    return n\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 7\n    elif n == 5: \n        return 9\n    elif n == 6: \n        return 11\n    elif n == 7: \n        return 13\n    elif n == 8: \n        return 15\n    elif n == 9: \n        return 17\n    elif n == 10: \n        return 19\n    elif n == 11: \n        return 21\n    elif n == 12: \n        return 23\n    elif n == 13: \n        return 25\n    elif n == 14: \n        return 27\n    elif n == 15: \n        return 29\n    elif n == 16: \n        return 31\n    elif n == 17: \n        return 33\n    elif n == 18: \n        return 35\n    elif n == 19: \n        return 37\n    elif n == 20: \n        return 39\n    elif n == 21: \n        return 41\n    elif n == 22: \n        return 43\n    elif n == 23: \n        return 45\n    elif n == 24: \n        return 47\n    elif n == 25: \n        return 49\n    elif n == 26: \n        return 51\n    elif n == 27: \n        return 53\n    elif n == 28: \n        return 55\n    elif n == 29: \n        return 57\n    elif n == 30: \n        return 59\n    elif n == 31: \n        return 61\n    elif n == 32: \n        return 63\n    elif n == 33: \n        return 65\n    elif n == 34: \n        return 67\n    elif n == 35: \n        return 69\n    elif n == 36: \n        return 71\n    elif n == 37: \n        return 73\n    elif n == 38: \n        return 75\n    elif n == 39: \n        return 77\n    elif n == 40: \n        return 79\n    elif n == 41: \n        return 81\n    elif n == 42: \n        return 83\n    elif n == 43: \n        return 85\n    elif n == 44: \n        return 87\n    elif n == 45: \n        return 89\n    elif n == 46: \n        return 91\n    elif n == 47: \n        return 93\n    elif n == 48: \n        return 95\n    elif n == 49: \n        return 97\n    elif n == 50: \n        return 99\n    elif n == 51: \n        return 101\n    elif n == 52: \n        return 103\n    elif n == 53: \n        return 105\n    elif n == 54: \n        return 107\n    elif n == 55: \n        return 109\n    elif n == 56: \n        return 111\n    elif n == 57: \n        return 113\n    elif n == 58: \n        return 115\n    elif n == 59: \n        return 117\n    elif n == 60: \n        return 119\n    elif n == 61: \n        return 121\n    elif n == 62: \n        return 123\n    elif n == 63: \n        return 125\n    elif n == 64: \n        return 127\n    elif n == 65: \n        return 129\n    elif n == 66: \n        return 131\n    elif n == 67: \n        return 133\n    elif n == 68: \n        return 135\n    elif n == 69: \n        return 137\n    elif n == 70: \n        return 139\n    elif n == 71: \n        return 151\n    elif n == 72: \n        return 153\n    elif n == 73: \n        return 155\n    elif n == 74: \n        return 157\n    elif n == 75: \n        return 159\n    elif n == 76: \n        return 161\n    elif n == 77: \n        return 163\n    elif n == 78: \n        return 165\n    elif n == 79: \n        return 167\n    elif n == 80: \n        return 169\n    elif n == 81: \n        return 171\n    elif n == 82: \n        return 173\n    elif n == 83: \n        return 175\n    elif n == 84: \n        return 177\n    elif n == 85: \n        return 179\n    elif n == 86: \n        return 181\n    elif n == 87: \n        return 183\n    elif n == 88: \n        return 185\n    elif n == 89: \n        return 187\n    elif n == 90: \n        return 189\n    elif n == 91: \n        return 191\n    elif n == 92: \n        return 193\n    elif n == 93: \n        return 195\n    elif n == 94: \n        return 197\n    elif n == 95: \n        return 199\n    elif n == 96: \n        return 201\n    elif n == 97: \n        return 203\n    elif n == 98: \n        return 205\n    elif n == 99: \n        return 207\n    elif n == 100: \n        return 209\n    elif n == 101: \n        return 211\n    elif n == 102: \n        return 213\n    elif n == 103: \n        return 215\n    elif n == 104: \n        return 217\n    elif n == 105: \n        return 219\n    elif n == 106: \n        return 221\n    elif n == 107: \n        return 223\n    elif n == 108: \n        return 225\n    elif n == 109: \n        return 227\n    elif n == 110: \n        return 229\n    elif n == 111: \n        return 231\n    elif n == 112: \n        return 233\n    elif n == 113: \n        return 235\n    elif n == 114: \n        return 237\n    elif n == 115: \n        return 239\n    elif n == 116: \n        return 241\n    elif n == 117: \n        return 243\n    elif n == 118: \n        return 245\n    elif n == 119: \n        return 247\n    elif n == 120: \n        return 249\n    elif n == 121: \n        return 251\n    elif n == 122: \n        return 253\n    elif n == 123: \n        return 255\n    elif n == 124: \n        return 257\n    elif n == 125: \n        return 259\n    elif n == 126: \n        return 261\n    elif n == 127: \n        return 263\n    elif n == 128: \n        return 265\n    elif n == 129: \n        return 267\n    elif n == 130: \n        return 269\n    elif n == 131: \n        return 271\n    elif n == 132: \n        return 273\n    elif n == 133: \n        return 275\n    elif n == 134: \n        return 277\n    elif n == 135: \n        return 279\n    elif n == 136: \n        return 281\n    elif n == 137: \n        return 283\n    elif n == 138: \n        return 285\n    elif n == 139: \n        return 287\n    elif n == 140: \n        return 288\n    elif n == 141: \n        return 289\n    elif n == 142: \n        return 291\n    elif n == 143: \n        return 293\n    elif n == 144: \n        return 295\n    elif n == 145: \n        return 297\n    elif n == 146: \n        return 299\n    elif n == 147: \n        return 301\n    elif n == 148: \n        return 302\n    elif n == 149: \n        return 303\n    elif n == 150: \n        return 305\n    elif n == 151: \n        return 307\n    elif n == 152: \n        return 309\n    elif n == 153: \n        return 311\n    elif n == 154: \n        return 313\n    e"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a=0\n    b=1\n    c=n\n    while True:\n        if (a+b+c)%2==0:\n            break\n        else:\n            a=a+1\n            b=b+1\n            c=c+2\n    return(b*b+c*c"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    for i in range(n):\n        if (i%2 == 0):\n            print('{:=^9}'.format('hexagonal number'))\n        else:\n            print('{:=^9}'.format('triangle number'))\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 0\n    j = 1\n    while (i <= n):\n        if (j + j <= n):\n            print(j, end = \" \")\n            print(j + j)\n            i += 1\n            j += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros_count = 0\n    non_zeros_count = 0\n    for i in nums:\n        if i == 0:\n            zeros_count += 1\n        else:\n            non_zeros_count += 1\n    return (zeros_count/non_zeros_count)*100\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    # Calculate the zero counts for each number\n    zero_count = 0\n    nonzero_count = 0\n    # Create an empty array to store the nonzero numbers\n    res = []\n    # Create an empty array to store the zero counts\n    res_zeroes = []\n    # Loop through the array\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    \n    # Create an array of all zeros, then loop through\n    for z in range(0, len(nums)):\n        # Zero count\n        if nums[z] == 0:\n            zero_count += 1\n        # Nonzero count\n        if nums[z]!= 0:\n            nonzero_count += 1\n    # Calculate the total counts\n    total = zero_count * nonzero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    if len(nums) == 0:\n        return 0\n    for num in nums:\n        if num == 0:\n            zero_count = zero_count + 1\n        else:\n            nonzero_count = nonzero_count + 1\n    return (zero_count/len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    non_zero = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = []\n    if nums[0] == 0:\n        zero_count.append(1)\n        for num in nums[1:]:\n            zero_count.append(0)\n    else:\n        zero_count = 0\n    return zero_count / (len(nums) - zero_count)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for item in nums:\n        if item == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_nums = 0\n    count = 0\n    for n in nums:\n        if n == 0:\n            zero_nums += 1\n        else:\n            count += 1\n    return zero_nums / count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return int(zero_count/len(nums))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 2\n    sum = 0\n    while power < n:\n        sum += power\n        power *= 2\n    if sum == n:\n        print(1)\n    else:\n        print(0)\nn = int(input())\nis_Sum_Of_Powers_Of_Two(n)"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # initialize the variable\n    count = 0\n    # get the number\n    num = n\n    # iterate through the whole range\n    for i in range(1,num + 1):\n        # if i is a power of two, add one to count\n        if (i == 2):\n            count = count + 1\n        # if i is a power of two, add one to count\n        if (i % 2 == 0):\n            count = count + 1\n    # if the count is greater than 0 then return false\n    if (count > 0):\n        return False\n    # if the count is 0 then return true\n    elif (count == 0):\n        return True\n    # if the count is 1 then return false\n    elif (count == 1):\n        return False\n    # if count is 2 then return false\n    elif (count == 2):\n        return True\n    # if count is 3 then return false\n    elif (count == 3):\n        return True\n    # if count is 4 then return false\n    elif (count == 4):\n        return True\n    # if count is 5 then return false\n    elif (count == 5):\n        return True\n    # if count is 6 then return false\n    elif (count == 6):\n        return True\n    # if count is 7 then return false\n    elif (count == 7):\n        return True\n    # if count is 8 then return false\n    elif (count == 8):\n        return True\n    # if count is 9 then return false\n    elif (count == 9):\n        return True\n    # if count is 10 then return false\n    elif (count == 10):\n        return True\n    # if count is 11 then return false\n    elif (count == 11):\n        return True\n    # if count is 12 then return false\n    elif (count == 12):\n        return True\n    # if count is 13 then return false\n    elif (count == 13):\n        return True\n    # if count is 14 then return false\n    elif (count == 14):\n        return True\n    # if count is 15 then return false\n    elif (count == 15):\n        return True\n    # if count is 16 then return false\n    elif (count == 16):\n        return True\n    # if count is 17 then return false\n    elif (count == 17):\n        return True\n    # if count is 18 then return false\n    elif (count == 18):\n        return True\n    # if count is 19 then return false\n    elif (count == 19):\n        return True\n    # if count is 20 then return false\n    elif (count == 20):\n        return True\n    # if count is 21 then return false\n    elif (count == 21):\n        return True\n    # if count is 22 then return false\n    elif (count == 22):\n        return True\n    # if count is 23 then return false\n    elif (count == 23):\n        return True\n    # if count is 24 then return false\n    elif (count == 24):\n        return True\n    # if count is 25 then return false\n    elif (count == 25):\n        return True\n    # if count is 26 then return false\n    elif (count == 26):\n        return True\n    # if count is 27 then return false\n    elif (count == 27):\n        return True\n    # if count is 28 then return false\n    elif (count == 28):\n        return True\n    # if count is 29 then return false\n    elif (count == 29):\n        return True\n    # if count is 30 then return false\n    elif (count == 30):\n        return True\n    # if count is 31 then return false\n    elif (count == 31):\n        return True\n    # if count is 32 then return false\n    elif (count == 32):\n        return True\n    # if count is 33 then return false\n    elif (count == 33):\n        return True\n    # if count is 34 then return false\n    elif (count == 34):\n        return True\n    # if count is 35 then return false\n    elif (count == 35):\n        return True\n    # if count is 36 then return false\n    elif (count == 36):\n        return True\n    # if count is 37 then return false\n    elif (count == 37):\n        return True\n    # if count is 38 then return false\n    elif (count == 38):\n        return True\n    # if count is 39 then return false\n    elif (count == 39):\n        return True\n    # if count is 40 then return false\n    elif (count == 40):\n        return True\n    # if count is 41 then return false\n    elif (count == 41):\n        return True\n    # if count is 42 then return false\n    elif (count == 42):\n        return True\n    # if count is 43 then return false\n    elif (count == 43):\n        return True\n    # if count is 44 then return false\n    elif (count == 44):\n        return True\n    # if count is 45 then return false\n    elif (count == 45):\n        return True\n    # if count is 46 then return false\n    elif (count == 46):\n        return True\n    # if count is 47 then return false\n    elif (count == 47):\n        return True\n    # if count is 48 then return false\n    elif (count == 48):\n        return True\n    # if count is 49 then return false\n    elif (count == 49):\n        return True\n    # if count is 50 then return false\n    elif (count == 50):\n        return True\n    # if count is 51 then return false\n    elif (count == 51):\n        return True\n    # if count is 52 then return false\n    elif (count == 52):\n        return True\n    # if count is 53 then return false\n    elif (count == 53):\n        return True\n    # if count is 54 then return false\n    elif (count == 54):\n        return True\n    # if count is 55 then return false\n    elif (count == 55):\n        return True\n    # if count is 56 then return false\n    elif (count == 56):\n        return True\n    # if count is 57 then return false\n    elif (count == 57):\n        return True\n    # if count is 58 then return false\n    elif (count == 58):\n        return True\n    # if count is 59 then return false\n    elif (count == 59):\n        return True\n    # if count is 60 then return false\n    elif (count == 60):\n        return True\n    # if count is 61 then return false\n    elif (count == 61):\n        return True\n    # if count is 62 then return false\n    elif (count == 62):\n        return True\n    # if count is 63 then return false\n    elif (count == 63):\n        return True\n    # if count is 64 then return false\n    elif (count == 64):\n        return True\n    # if count is 65 then return false\n    elif (count == 65):\n        return True\n    # if count is 66 then return false\n    elif (count == 66):\n        return True\n    # if count is 67 then return false\n    elif (count == 67):\n        return True\n    # if count is 68 then return false\n    elif (count == 68):\n        return True\n    # if count is 69 then return false\n    elif (count == 69):\n        return True\n    # if count is 70 then return false\n    elif (count == 70):\n        return True\n    # if count is 71 then return false\n    elif (count == 71):\n        return True\n    # if count is 72 then return false\n    elif (count == 72):\n        return True\n    # if count is 73 then return false\n    elif (count == 73):\n        return True\n    # if count is 74 then return false\n    elif (count == 74):\n        return True\n    # if count is 75 then return false\n    elif (count == 75):\n        return True\n    # if count is 76 then return false\n    elif (count == 76):\n        return True\n    # if count is 77 then return false\n    elif (count == 77):\n        return True\n    # if count is 78 then return false\n    elif (count == 78):\n        return True\n    # if count is 79 then return false\n    elif (count == 79):\n        return True\n    # if count is 80 then return false\n    elif (count == 80):\n        return Tru"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if (n == 0):\n        return False\n    elif (n < 0):\n        return False\n    \n    # Write your code here.\n    \n    if (n == 1):\n        return True\n    elif (n == 2):\n        return True\n    \n    return (n % 2!= 0) and is_Sum_Of_Powers_Of_Two(n // 2)\n    \n    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False\n    for i in range(1,n+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Write your code here.\n    \n    sum = 0\n    for num in str(n):\n        if num!= '0':\n            sum += int(num)**2\n        else:\n            return False\n    if sum == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        if n % 2 == 0:\n            return False\n        n //= 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    \n    if n==1:\n        return True\n    \n    a=n\n    b=n\n    while(b>0):\n        c=a//2\n        if(b==0):\n            break\n        if(b%2==0):\n            a=a-c\n        else:\n            a=a+c\n        b=b//2\n    if(a==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    \n    return is_Sum_Of_Powers_Of_Two(n//2) and is_Sum_Of_Powers_Of_Two(3*n + 1)\n    \ndef is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    if n%2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2) and is_Sum_Of_Powers_Of_Two(3*n + 1)\n    if n%2 == 1:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    \n    return False\n    \ndef is_Sum_Of_Powers_Of_Three(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 3 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    if n%3 == 0:\n        return is_Sum_Of_Powers_Of_Three(n//3) and is_Sum_Of_Powers_Of_Three(3*n + 1)\n    if n%3 == 1:\n        return is_Sum_Of_Powers_Of_Three(n//3)\n    if n%3 == 2:\n        return is_Sum_Of_Powers_Of_Three(3*n + 1)\n    \n    return False\n    \ndef is_Sum_Of_Powers_Of_Three(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 3 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    if n%3 == 0:\n        return is_Sum_Of_Powers_Of_Three(n//3) and is_Sum_Of_Powers_Of_Three(3*n + 1)\n    if n%3 == 1:\n        return is_Sum_Of_Powers_Of_Three(n//3)\n    if n%3 == 2:\n        return is_Sum_Of_Powers_Of_Three(3*n + 1)\n    \n    return False\n    \ndef is_Sum_Of_Powers_Of_Four(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 4 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    if n%4 == 0:\n        return is_Sum_Of_Powers_Of_Four(n//4) and is_Sum_Of_Powers_Of_Four(3*n + 1)\n    if n%4 == 1:\n        return is_Sum_Of_Powers_Of_Four(n//4)\n    if n%4 == 2:\n        return is_Sum_Of_Powers_Of_Four(3*n + 1)\n    if n%4 == 3:\n        return is_Sum_Of_Powers_Of_Four(4*n + 1)\n    \n    return False\n    \ndef is_Sum_Of_Powers_Of_Four(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 4 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    if n%4 == 0:\n        return is_Sum_Of_Powers_Of_Four(n//4) and is_Sum_Of_Powers_Of_Four(3*n + 1)\n    if n%4 == 1:\n        return is_Sum_Of_Powers_Of_Four(n//4)\n    if n%4 == 2:\n        return is_Sum_Of_Powers_Of_Four(3*n + 1)\n    if n%4 == 3:\n        return is_Sum_Of_Powers_Of_Four(4*n + 1)\n    \n    return False\n    \ndef is_Sum_Of_Powers_Of_Five(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 5 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    if n%5 == 0:\n        return is_Sum_Of_Powers_Of_Five(n//5) and is_Sum_Of_Powers_Of_Five(3*n + 1)\n    if n%5 == 1:\n        return is_Sum_Of_Powers_Of_Five(n//5)\n    if n%5 == 2:\n        return is_Sum_Of_Powers_Of_Five(3*n + 1)\n    if n%5 == 3:\n        return is_Sum_Of_Powers_Of_Five(4*n + 1)\n    if n%5 == 4:\n        return is_Sum_Of_Powers_Of_Five(5*n + 1)\n    \n    return False\n    \ndef is_Sum_Of_Powers_Of_Five(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 5 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    if n%5 == 0:\n        return is_Sum_Of_Powers_Of_Five(n//5) and is_Sum_Of_Powers_Of_Five(3*n + 1)\n    if n%5 == 1:\n        return is_Sum_Of_Powers_Of_Five(n//5)\n    if n%5 == 2:\n        return is_Sum_Of_Powers_Of_Five(3*n + 1)\n    if n%5 == 3:\n        return is_Sum_Of_Powers_Of_Five(4*n + 1)\n    if n%5 == 4:\n        return is_Sum_Of_Powers_Of_Five(5*n + 1)\n    \n    return False\n    \ndef is_Sum_Of_Powers_Of_Six(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 6 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    if n%6 == 0:\n        return is_Sum_Of_Powers_Of_Six(n//6) and is_Sum_Of_Powers_Of_Six(3*n + 1)\n    if n%6 == 1:\n        return is_Sum_Of_Powers_Of_Six(n//6)\n    if n%6 == 2:\n        return is_Sum_Of_Powers_Of_Six(3*n + 1)\n    if n%6 == 3:\n        return is_Sum_Of_Powers_Of_Six(4*n + 1)\n    if n%6 == 4:\n        return is_Sum_Of_Powers_Of_Six(5*n + 1)\n    if n%6 == 5:\n        return is_Sum_Of_Powers_Of_Six(6*n + 1)\n    \n    return False\n    \ndef is_Sum_Of_Powers_Of_Six(n):"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    if n % 2 == 0: \n        return True\n    else: \n        if n%10 == 0: \n            return False\n        else: \n            return is_Sum_Of_Powers_Of_Two(n/10)\n    #return True\n    #if n%10 == 0: \n    #    return False\n    #else: \n    #    return is_Sum_Of_Powers_Of_Two(n/10)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n == 2 or n == 3\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(f'Circumference of the circle is: {circumference}')\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # '''\n    # # circumference formula \n    # def circumference(radius):\n    #     return (2*3.14*radius)\n    # # get the circumference\n    # circumference(r)\n    # '''\n    # # circumference formula\n    # def circumference(radius):\n    #     return (2*3.14*radius)\n    # # get the circumference\n    # circumference(r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1416\n    c = 2 * pi * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Formula (2x\u03c0) = 2\u03c0\n    circumference = 2*math.pi*r\n    print(circumference)\n    # Circumference for circle\n    print('Circumference: ', circumference)\n    # Formula (\u03c0x) = (2\u03c0x)\n    pi = (2*math.pi)\n    # Total circumference\n    total_circumference = circumference + pi\n    print('Total circumference: ', total_circumference)\n    # Final result\n    print('Circumference: ', circumference)\n    print('Total circumference: ', total_circumference)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * (r ** 2)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #Your code here\n    return int(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    # your code goes here\n    output_list = []\n    \n    for num_list in test_list:\n        for num in num_list:\n            output_list.append(num)\n    \n    return output_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    n = 1\n    for item in test_list:\n        n = n * item\n    return n\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    lst = []\n    for i in test_list:\n        if type(i) == list:\n            for j in i:\n                lst.append(j)\n        else:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = test_list\n    flatten = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            flatten.append(test_list[i][j])\n    return flatten\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # write your code here\n    flattened = set()\n    \n    def get_nums(nums):\n        for i in nums:\n            if type(i) == list:\n                get_nums(i)\n            else:\n                flattened.add(i)\n    get_nums(test_list)\n    return flattened\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Write your code here\n    newlist = []\n    for i in range(len(test_list)):\n        newlist = newlist + test_list[i]\n    return newlist\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def create_list(lst):\n        '''\n        Receives a list of integers and returns a list of integers as a single\n        number.\n        '''\n        return [int(i) for i in lst]\n    \n    lst = []\n    for i in test_list:\n        if isinstance(i, list):\n            lst.extend(i)\n        elif i.isdigit():\n            lst.append(i)\n    return list(set(create_list(lst)))\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialise empty list\n    result_list = []\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    swap = False\n    \n    mid = len(nums) // 2\n    \n    # if list has only one element, we can swap it\n    if len(nums) % 2 == 0:\n        nums[mid] = nums[mid - 1]\n        nums[mid] = nums[mid + 1]\n        swap = True\n        \n    # if list has two elements, we can swap it\n    else:\n        nums[mid] = nums[mid - 1]\n        nums[mid] = nums[mid + 1]\n        swap = True\n        \n    # now we go back to the sorted part\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] < nums[i + 1]:\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n            i += 1\n        i += 1\n    \n    # if there is only one element left, we can remove it\n    if i == len(nums) - 1:\n        nums.pop()\n        \n    # now we need to sort the remaining elements\n    if swap:\n        nums = nums[:mid + 1] + nums[mid + 1:][::-1]\n    else:\n        nums = nums[:mid] + nums[mid + 1:][::-1]\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pos = [0] * len(nums)\n    pos = [-1] * len(nums)\n    for i in range(len(nums) - 1, -1, -1):\n        pos[i] = nums[i]\n        # print(pos[i])\n    # print(pos)\n    while True:\n        # print(pos)\n        for i in range(len(nums)):\n            if pos[i]!= -1:\n                # print('------')\n                # print(pos[i])\n                # print('------')\n                # print(nums[i])\n                # print(pos[i])\n                # print(nums[i])\n                if nums[i] > nums[pos[i]]:\n                    pos[i] = pos[i]\n                    # print(pos[i])\n                    # print(nums[i])\n                    # print(pos[i])\n                    # print(nums[i])\n                elif nums[i] < nums[pos[i]]:\n                    pos[i] = pos[i]\n                    # print(pos[i])\n                    # print(nums[i])\n                    # print(pos[i])\n                    # print(nums[i])\n                # print(pos)\n                # print(nums[i])\n                # print(pos)\n                # print(nums[i])\n            else:\n                # print('------')\n                # print(nums[i])\n                # print('------')\n                # print(pos[i])\n                # print('------')\n                pos[i] = nums[i]\n                # print(pos[i])\n                # print(nums[i])\n                # print(pos[i])\n                # print(nums[i])\n        # print(pos)\n        if pos[0] == -1:\n            break\n        else:\n            nums[pos[0]], nums[pos[-1]] = nums[pos[-1]], nums[pos[0]]\n            # print(nums)\n            # print(pos)\n            # print('------')\n            # print(nums[pos[0]])\n            # print(nums[pos[-1]])\n            # print(pos)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    i = 0\n    j = n-1\n    while i < n:\n        while j >= 0 and nums[j] > nums[i]:\n            j -= 1\n        if j == -1:\n            break\n        nums[i], nums[j] = nums[j], nums[i]\n        i += 1\n        j -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(arr, m, n):\n        arr = [None for _ in range(m)]\n        i = 0\n        for num in arr:\n            if num!= None:\n                arr[i] = num\n                i += 1\n        i = 0\n        for num in arr:\n            if num == None:\n                arr[i] = num\n                i += 1\n        for i in range(n, m-1, -1):\n            temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n    m = len(nums)\n    sort(nums, m, m)\n    print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # sort the array\n    nums.sort(reverse=True)\n    # replace the first num with the last num\n    for i in range(len(nums)):\n        nums[i] = nums[-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # put the lowest elements in the correct positions\n    for i in range(len(nums)-1, -1, -1):\n        index = nums[i]\n        lowest_index = i\n        for j in range(i, len(nums)):\n            if nums[j] < index:\n                lowest_index = j\n        nums[i], nums[lowest_index] = nums[lowest_index], nums[i]\n        nums[lowest_index] = index\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums)==1:\n        return nums\n    \n    # find midpoint\n    mid = len(nums)//2\n    \n    # left half\n    left_half = nums[:mid]\n    \n    # right half\n    right_half = nums[mid:]\n    \n    # sort\n    left_half = sorted(left_half)\n    right_half = sorted(right_half)\n    \n    # merge\n    result = []\n    \n    while left_half and right_half:\n        if left_half[-1] > right_half[0]:\n            result.append(left_half.pop())\n        else:\n            result.append(right_half.pop())\n            \n    while left_half:\n        result.append(left_half.pop())\n    while right_half:\n        result.append(right_half.pop())\n    \n    return result\n    \n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def helper(elements, start, end):\n        if start < end:\n            i, j = start, end\n            while i < j:\n                if nums[i] < nums[j]:\n                    i += 1\n                elif nums[j] < nums[i]:\n                    j -= 1\n                else:\n                    j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            return helper(elements, i+1, end)\n        else:\n            return\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # def sort_list(num_list):\n    #     for i in range(len(num_list)):\n    #         min_index = i\n    #         for j in range(i + 1, len(num_list)):\n    #             if num_list[min_index] > num_list[j]:\n    #                 min_index = j\n    #         temp = num_list[i]\n    #         num_list[i] = num_list[min_index]\n    #         num_list[min_index] = temp\n    #     return num_list\n    # def sort(nums):\n    #     for i in range(len(nums)):\n    #         for j in range(i + 1, len(nums)):\n    #             if nums[i] > nums[j]:\n    #                 nums[i], nums[j] = nums[j], nums[i]\n    #     return nums\n    \n    # for i in range(len(nums)):\n    #     for j in range(i + 1, len(nums)):\n    #         if nums[i] > nums[j]:\n    #             nums[i], nums[j] = nums[j], nums[i]\n    # return nums\n    # for i in range(len(nums) - 1):\n    #     for j in range(i + 1, len(nums)):\n    #         if nums[i] > nums[j]:\n    #             nums[i], nums[j] = nums[j], nums[i]\n    # return nums\n    \n    def bubble_sort(nums):\n        for i in range(len(nums) - 1):\n            for j in range(len(nums) - 1 - i):\n                if nums[j] > nums[j + 1]:\n                    nums[j], nums[j + 1] = nums[j + 1], nums[j]\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Insert a 'z' to the front\n    for i in range(len(nums)):\n        nums[i] = 'z'\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    def count_same(list1,list2,list3):\n        '''\n        Write a function to count number items that are identical in the same position of three given lists.\n        '''\n        count = 0\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i] == list2[j] and i!= j:\n                    count += 1\n        return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i][0]==list2[j][0] and list1[i][1]==list2[j][1] and list1[i][2]==list2[j][2]:\n                count_same+=1\n    return count_same\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count +=1\n    return count\n    \ndef count_dif_list(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists,\n    but they are different.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]!= list2[i] and list1[i]!= list3[i]:\n            count +=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1) == 1 and len(list2) == 1 and len(list3) == 1:\n        return 1\n    elif len(list1) == 1 and len(list2)!= 1:\n        return 2\n    elif len(list1)!= 1 and len(list2) == 1:\n        return 2\n    elif len(list1)!= 1 and len(list2)!= 1:\n        return 3\n    elif len(list1)!= 1 and len(list2)!= 1 and len(list3)!= 1:\n        return 3\n    else:\n        return 0\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    x=0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i==j and j==k and i!=k:\n                    x+=1\n    return x\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_diff_1 = list1[:3]\n    list_diff_2 = list2[:3]\n    list_diff_3 = list3[:3]\n    count = 0\n    for i in range(3):\n        if list_diff_1[i] == list_diff_2[i] == list_diff_3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = []\n    for item in list1:\n        if item in list2 and item in list3:\n            result.append(1)\n        elif item in list2:\n            result.append(2)\n        elif item in list3:\n            result.append(3)\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same_items = 0\n    for i in range(0,3):\n        if list1[i] == list2[i]:\n            if list3[i] == list1[i]:\n                count_same_items += 1\n    return count_same_items\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list2[j]==list3[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    i = 0\n    for i in range(0, len(Input)):\n        if is_list(Input[i]):\n            i = i + 1\n    return i\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Output = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if j == 0:\n                Output += 1\n            if j > 0 and j < len(Input[i])-1:\n                Output += Input[i][j] + Input[i][j+1]\n    return Output\ndef find_sets(Input): \n    '''\n    Write a function to find number of sets present in the given tuple.\n    '''\n    Output = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if i == 0:\n                Output += 1\n            if j == 0:\n                Output += 1\n            if j > 0 and j < len(Input[i])-1:\n                Output += Input[i][j] + Input[i][j+1] + Input[i][j+2] + Input[i][j-1]\n    return Output\ndef find_element(Input): \n    '''\n    Write a function to find the minimum and maximum element present in the given list.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if j == 0:\n                Output.append(Input[i][j])\n            if j == 0 and i > 0:\n                Output.append(Input[i][j])\n    return Output\ndef find_product(Input): \n    '''\n    Write a function to find the product of all numbers in the given tuple.\n    '''\n    Output = 1\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            Output *= Input[i][j]\n    return Output\ndef find_sum(Input): \n    '''\n    Write a function to find the sum of all numbers in the given tuple.\n    '''\n    Output = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            Output += Input[i][j]\n    return Output\ndef find_average(Input): \n    '''\n    Write a function to find the average of all numbers in the given tuple.\n    '''\n    Output = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            Output += Input[i][j]\n    Output /= len(Input)\n    return Output\ndef find_odd(Input): \n    '''\n    Write a function to find the odd numbers present in the given tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if j == 0:\n                Output.append(Input[i][j])\n            if j > 0 and j < len(Input[i])-1:\n                Output.append(Input[i][j] + Input[i][j+1])\n    return Output\ndef find_even(Input): \n    '''\n    Write a function to find the even numbers present in the given tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if j == 0:\n                Output.append(Input[i][j])\n            if j > 0 and j < len(Input[i])-1:\n                Output.append(Input[i][j])\n    return Output\ndef find_transpose(Input): \n    '''\n    Write a function to find the transpose of a given tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            Output.append(Input[i][j])\n    return Output\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not Input:\n        return 0\n    else:\n        return len(list(map(lambda x: list(x), Input)))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Hashmap for storing our count of how many lists there are in a given tuple\n    # Map_count is a tuple of lists we are checking for\n    HashMap = {}\n    # initializing our list of lists \n    list_of_lists = []\n    for i in range(0,len(Input)):\n        # check if there is a key with that name in hashmap.\n        if HashMap.get(Input[i][0]):\n            HashMap[Input[i][0]].append(Input[i])\n        # if not, add a key and its value and map it to the list.\n        else:\n            HashMap[Input[i][0]] = [Input[i]]\n    # check each key, if there are still lists in our hashmap, append them to the list\n    for i in HashMap:\n        if len(HashMap[i]) > 0:\n            list_of_lists.extend(HashMap[i])\n    return list_of_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        if Input[i] not in lst:\n            lst.append(Input[i])\n    return len(lst)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    #1. Initialize variable \n    numbers = 0\n    \n    #2. For loop \n    for i in range(len(Input)):\n        #3. Check each letter in the Input\n        for j in range(len(Input[i])):\n            if Input[i][j] == \"#\":\n                numbers = numbers + 1\n    return numbers\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list1 = []\n    i = 0\n    while i < len(Input): \n        # make tuple and add to list\n        tuple = tuple(Input[i])\n        list1.append(tuple) \n        i += 1\n    # for loop\n    for lst in list1: \n        if type(lst[0]) == int:\n            return lst[0] + 1\n    else:\n        return 0"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if (len(Input)<=0):\n        return 0\n    else:\n        return 1 + find_lists(Input[1:])\n        \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not Input:\n        raise TypeError\n    if len(Input) == 0:\n        raise TypeError\n    temp = input('Enter the elements of the list: ').split()\n    return len(temp)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) < 2:\n        return 1\n    \n    count = 0\n    for i in range(0, len(Input)):\n        if Input[i] == '<':\n            count = count + 1\n    \n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Get the length of the array\n    length = len(arr)\n    \n    # For each element\n    for i in range(length):\n        \n        # For each element\n        for j in range(length-1):\n            \n            # If array is greater than element\n            if arr[j] > arr[j+1]:\n                \n                # update array\n                arr[j] = arr[j+1]\n                \n            # If array is less than element\n            else:\n                \n                # update array\n                arr[j] = arr[j+1]\n    \n    # Return the maximum difference\n    return arr[-1] - arr[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # your code here\n    return arr[0] - arr[1]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # The minimum element is always the second to last element.\n    min_ = arr[0]\n    max_ = arr[-1]\n    # The second minimum element is always the first element.\n    for i in range(1, len(arr)):\n        if min_ > arr[i]:\n            min_ = arr[i]\n    # The maximum difference is always the second to last element.\n    for i in range(0, len(arr)-2):\n        if max_ < arr[i+2]:\n            max_ = arr[i+2]\n    return (max_-min_)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        if arr[i] - arr[i+1] > max_diff:\n            max_diff = arr[i] - arr[i+1]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    l = len(arr)\n    if(l == 0):\n        return 0\n    \n    maximum_diff = 0\n    maximum_i = 0\n    for i in range(0,l-1):\n        for j in range(i+1,l):\n            if(arr[i] > arr[j]):\n                maximum_diff = maximum_diff + abs(arr[i]-arr[j])\n                maximum_i = i\n            else:\n                maximum_diff = maximum_diff + abs(arr[j]-arr[i])\n                maximum_i = j\n    return maximum_diff, maximum_i\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(x[0]-x[1]) for x in zip(arr, arr[1:]))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_abs = abs(arr[0]-arr[1])\n    min_abs = abs(arr[0]-arr[1])\n    \n    for i in range(1,n):\n        max_abs = max(max_abs, abs(arr[i]-arr[i-1]))\n        min_abs = min(min_abs, abs(arr[i]-arr[i-1]))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        max_diff = max(arr[i] - arr[i-1], max_diff)\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    print(\"Function to find the maximum difference between any two elements in a given array : \")\n    print(\" - Maximum absolute difference between any two elements in a given array = \", end=\"\")\n    print(arr[0]+arr[1], end=\" \")\n    print(\" and \", end=\"\")\n    print(arr[-1]+arr[-2], end=\" \")\n    print(\"\\n\")\n    for i in range(len(arr)-2): \n        print(abs(arr[i] - arr[i+1]), end=\" \")\n    print(\"\\n\")\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # get the length of the array\n    # find the max value\n    # subtract max value from min value and add to the max value\n    # return max value\n    length = len(arr)\n    max_diff = arr[0]\n    min_diff = arr[0]\n    for i in range(1,length):\n        max_diff = max(max_diff,arr[i])\n        min_diff = min(min_diff,arr[i])\n    return max_diff - min_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    sol = None\n    if b == 0:\n        return\n    \n    if a == 0:\n        sol = b, 0\n    elif a == 1:\n        sol = 0, b\n    else:\n        for i in range(n):\n            sol = find_solution(a-1, b, i+1)\n        \n    return sol\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    global status\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    elif a == b:\n        return (a, b)\n    else:\n        x = find_solution(a + n, b, n // 2)\n        y = find_solution(a, b + n, n // 2)\n        if x == None:\n            return y\n        else:\n            return x\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # If a == 1, then return x\n    if a == 1:\n        return b\n    \n    # Base case\n    if a == 2:\n        return b\n    \n    # Find base case\n    if n == 0:\n        return None\n    \n    # Recursive case\n    # Calculate square root\n    # Check if square root is negative\n    if n % 2 == 0:\n        x = find_solution(a, b, n // 2)\n        y = find_solution(a, b, (n + 1) // 2)\n        return x * x, y * y\n    \n    # If negative, then return root\n    if n % 2!= 0:\n        x = find_solution(a, b, n // 2)\n        y = find_solution(a, b, (n + 1) // 2)\n        return x * x, y\n    \n    # If both of them are positive, then return root\n    x = find_solution(a, b, n // 2)\n    y = find_solution(a, b, n - x)\n    return x * x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(a, b + 1):\n        for j in range(n, b - a + 1):\n            x = i * i + j\n            if x == n:\n                return i, j\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    if a == b == 0:\n        return None\n    x = []\n    y = []\n    \n    if a > 0:\n        x = n*[a]\n    if b > 0:\n        y = n*[b]\n    \n    if len(x) > 0:\n        for i in x:\n            if (i < 0) or (i > n):\n                return None\n            x.remove(i)\n            y.remove(i)\n        return tuple(x), tuple(y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    try:\n        x = (int(a), int(b))\n        y = (n, x[1])\n        return x, y\n    except ValueError:\n        pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    n = int(n)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(n):\n        if a[i]*b[i] == n:\n            x = i\n            y = n-a[i]*b[i]\n            if y == 0:\n                return None\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = []\n    y = []\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for x in list1:\n        if x not in list2:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_length = len(list1)\n    list2_length = len(list2)\n    for i in range(list1_length):\n        for j in range(list2_length):\n            if list1[i] == list2[j]:\n                list1.pop(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print(\"\\n-- Removing Elements from List 1\")\n    if list1 == list2:\n        return\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 2\")\n    if list2 == list1:\n        return\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 3\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 4\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 5\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 6\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 7\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 8\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 9\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 10\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 11\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 12\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 13\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 14\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 15\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 16\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 17\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 18\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 19\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 20\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 21\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 22\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 23\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 24\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 25\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 26\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 27\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 28\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 29\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 30\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 31\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 32\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 33\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 34\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 35\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 36\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 37\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 38\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 39\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 40\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 41\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 42\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 43\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 44\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 45\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 46\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 47\")\n    for ele in list1:\n        list1.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 48\")\n    for ele in list2:\n        list2.remove(ele)\n        print(ele, end=\" \")\n    print(\"\\n-- Removing Elements from List 49\")\n    for el"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        list1.pop(i)\n    for j in range(len(list2)):\n        list2.pop(j)\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        if list1[i] not in lst:\n            lst.append(list1[i])\n    return lst\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(0, len(list2)):\n        for j in range(0, len(list1)):\n            if list1[j] == list2[i]:\n                list1.remove(list1[j])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1)==0:\n        return \n    if len(list2)==0:\n        return list1\n    for index in range(0,len(list1)):\n        if list1[index] in list2:\n            list1[index] = list1[index]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                result.append(list2[j])\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_to_remove = []\n    for i in list1:\n        if i not in list2:\n            list_to_remove.append(i)\n    return list_to_remove\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #find the length of list1\n    length = len(list1)\n    #if the length of list2 is less than or equal to the length of list1\n    if len(list2) < length:\n        #loop through the given list\n        for index in range(0, length):\n            #check if the element present in the list2 is present in list1\n            if list2[index] in list1:\n                #remove the element present in list2 from the list1\n                list1.remove(list2[index])\n        return list1\n    #if the length of list2 is greater than or equal to the length of list1\n    elif len(list2) >= length:\n        #loop through the given list\n        for index in range(0, length):\n            #check if the element present in the list2 is present in list1\n            if list2[index] in list1:\n                #remove the element present in the list2 from the list1\n                list1.remove(list2[index])\n        return list1\n    else:\n        return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 5\n    else:\n        return sum_series(n - 1) + sum_series(n - 2) + sum_series(n - 3) + sum_series(n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0,n+1,2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    if n < 1:\n        return 0\n    else:\n        if n % 2 == 0:\n            return n + (n-2) + (n-4)\n        else:\n            return n + (n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Your code here\n    return sum(range(n - 2, n // 2)) + (n - 2) + (n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n // 2):\n        sum = sum + (i+1)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    x = n // 2\n    while x >= 0:\n        sum += x\n        x -= 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    s = 0\n    for i in range(n//2+1):\n        s = s + i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(1, n // 2 + 1):\n        s += i + (n-i) + (n-i-2) + (n-i-4)\n    return "
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n - 2*(n-1)) + (n-4) if n > 0 else 0\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n        sum += i\n        sum += i\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s * 2\n    s = s * pi\n    l = l * 2\n    area = pi * (l * l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s.strip()\n    l = l.strip()\n    if len(s)!= 3 or len(l)!= 3:\n        return \"The length and sides of the polygon must be three numbers.\"\n    try:\n        float(l)\n        float(s)\n    except:\n        return \"The sides of the polygon must be three numbers.\"\n    if float(s) < float(l):\n        return \"The sides of the polygon must be greater than the length.\"\n    if float(s) > float(l):\n        return \"The sides of the polygon must be less than the length.\"\n    if float(l) <= 0:\n        return \"The sides of the polygon must be greater than 0.\"\n    if float(l) == 0:\n        return \"The sides of the polygon must be greater than 0.\"\n    try:\n        a = (float(l)/2) * tan(pi/l * (1 - s/l))\n    except ZeroDivisionError:\n        return \"The sides of the polygon must be greater than 0.\"\n    if float(a) < 0:\n        return \"The length of the sides must be greater than 0.\"\n    if float(a) == 0:\n        return \"The length of the sides must be greater than 0.\"\n    return \"The area of the polygon is: \" + str(a) + \" \"\n    \n    \n    \ndef areas_polygon(polygon):\n    '''\n    write a function to calculate the area of a regular polygon given the polygon.\n    '''\n    l = polygon.split()\n    try:\n        float(l[0])\n        float(l[1])\n    except:\n        return \"The sides of the polygon must be three numbers.\"\n    if float(l[0]) < float(l[1]):\n        return \"The sides of the polygon must be greater than the length.\"\n    if float(l[0]) > float(l[1]):\n        return \"The sides of the polygon must be less than the length.\"\n    if float(l[0]) <= 0:\n        return \"The sides of the polygon must be greater than 0.\"\n    if float(l[1]) <= 0:\n        return \"The sides of the polygon must be greater than 0.\"\n    try:\n        a = (float(l[0]) / 2) * tan(pi / l[0] * (1 - l[1] / l[0]))\n    except ZeroDivisionError:\n        return \"The sides of the polygon must be greater than 0.\"\n    if float(a) < 0:\n        return \"The length of the sides must be greater than 0.\"\n    if float(a) == 0:\n        return \"The length of the sides must be greater than 0.\"\n    return \"The area of the polygon is: \" + str(a) + \" \"\n    \n    \n    \ndef save_to_file(polygon):\n    '''\n    write a function to calculate the area of a regular polygon given the polygon.\n    '''\n    with open('polygon.txt', 'w') as f:\n        f.write(polygon)\n    f.close()\n    \n    \n    \ndef load_from_file():\n    '''\n    write a function to calculate the area of a regular polygon given the polygon.\n    '''\n    with open('polygon.txt', 'r') as f:\n        polygon = f.read()\n        f.close()\n    if polygon == \"\":\n        return \"There is no polygon in this file.\"\n    return \"The area of the polygon is: \" + area_polygon(polygon, 1) + \" \"\n    \ndef are_polygon_equal(polygon, polygon2):\n    '''\n    write a function to calculate the area of a regular polygon given the polygon.\n    '''\n    if polygon == \"\":\n        return \"There is no polygon in this file.\"\n    if polygon2 == \"\":\n        return \"There is no polygon in this file.\"\n    if polygon2 == polygon:\n        return \"The two polygons are equal.\"\n    return \"The areas of the two polygons are: \" + areas_polygon(polygon) + \" \"\n    \n    \ndef areas_compare(polygon, polygon2):\n    '''\n    write a function to calculate the area of a regular polygon given the polygon.\n    '''\n    l = polygon.split()\n    try:\n        float(l[0])\n        float(l[1])\n    except:\n        return \"The sides of the polygon must be three numbers.\"\n    if float(l[0]) < float(l[1]):\n        return \"The sides of the polygon must be greater than the length.\"\n    if float(l[0]) > float(l[1]):\n        return \"The sides of the polygon must be less than the length.\"\n    if float(l[0]) <= 0:\n        return \"The sides of the polygon must be greater than 0.\"\n    if float(l[1]) <= 0:\n        return \"The sides of the polygon must be greater than 0.\"\n    try:\n        a = (float(l[0]) / 2) * tan(pi / l[0] * (1 - l[1] / l[0]))\n    except ZeroDivisionError:\n        return \"The sides of the polygon must be greater than 0.\"\n    if float(a) < 0:\n        return \"The length of the sides must be greater than 0.\"\n    if float(a) == 0:\n        return \"The length of the sides must be greater than 0.\"\n    return \"The areas of the two polygons are: \" + str(a) + \" \"\n    \n    \n    \ndef load_from_file_2(polygon):\n    '''\n    write a function to calculate the area of a regular polygon given the polygon.\n    '''\n    with open('polygon.txt', 'r') as f:\n        polygon = f.read()\n        f.close()\n    if polygon == \"\":\n        return \"There is no polygon in this file.\"\n    with open('polygon.txt', 'w') as f:\n        f.write(polygon)\n    f.close()\n    \n    \n    \n    \ndef load_from_file_3():\n    '''\n    write a function to calculate the area of a regular polygon given the polygon.\n    '''\n    with open('polygon.txt', 'r') as f:\n        polygon = f.read()\n        f.close()\n    if polygon == \"\":\n        return \"There is no polygon in this file.\"\n    l = polygon.split()\n    try:\n        float(l[0])\n        float(l[1])\n    except:\n        return \"The sides of the polygon must be three numbers.\"\n    if float(l[0]) < float(l[1]):\n        return \"The sides of the polygon must be greater than the length.\"\n    if float(l[0]) > float(l[1]):\n        return \"The sides of the polygon must be less than the length.\"\n    if float(l[0]) <= 0:\n        return \"The sides of the polygon must be greater than 0.\"\n    if float(l[1]) <= 0:\n        return \"The sides of the polygon must be greater than 0.\"\n    try:\n        a = (float(l[0]) / 2) * tan(pi / l[0] * (1 - l[1] / l[0]))\n    except ZeroDivisionError:\n        return \"The sides of the polygon must be greater than 0.\"\n    if float(a) < 0:\n        return \"The length of the sides must be greater than 0.\"\n    if float(a) == 0:\n        return \"The length of the sides must be greater than 0.\"\n    return \"The areas of the two polygons are: \" + str(a) + \" \"\n    \n    \n    \ndef load_from_file_4(polygon):\n    '''\n    write a function to calculate the area of a regular polygon given the polygon.\n    '''\n    with open('polygon.txt', 'r') as f:\n        polygon = f.read()\n        f.close()\n    if polygon == \"\":\n        return \"There is no polygon in this file.\"\n    with open('polygon.txt', 'w'"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    result = l*s\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s*(s-1)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    x = (s**2 - l**2)/(2 * s)\n    return round(pi * x, 1)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    i = 0\n    for n in range(l):\n        s[i] = s[i]/2\n        i = i + 1\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #count the number of sides of the polygon\n    sides=l/2\n    area=sides*sides\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for i in range(s):\n        a += 1\n        a = a / l\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    try:\n        for i in s:\n            l.append(float(input(\"Enter the length of side %s: \" %i)))\n        l.append(l[-1]/2)\n        return area_polygon(s, l)\n    except:\n        print(\"Incorrect input, please try again.\")\n        return area_polygon(s, l)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (2*l)/3\n    return s*tan(pi/l) * a\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Write your code here\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n            if i == n/i:\n                return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    x = n\n    sum = 0\n    while x!= 0: \n        r = x % i \n        sum += r \n        x = x // i \n        i += 1 \n    if sum == n:\n        return True\n    else: \n        return False \ndef quicksort(data, start, end):\n    if start >= end: \n        return \n    p = start \n    q = end \n    pivot = data[start] \n    while p < q: \n        while pivot < data[q] and q < end: \n            q += 1 \n        while data[p] > pivot and q < end: \n            p += 1 \n        if data[p] < pivot: \n            data[p], data[q] = data[q], data[p] \n        data[p], data[q] = data[q], data[p] \n    data[start], data[q] = data[q], data[start] \n    quicksort(data, start, q) \n    quicksort(data, q, end) \ndef f(n): \n    ''' \n    This function returns the root of the given function. \n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1/2\n    elif div_sum(n): \n        return f(n-1) + f(n-2) \n    else: \n        return f(n-1) + f(n-2) + f(n-3) \ndef fprime(n): \n    ''' \n    This function returns the root of the derivative of the given function. \n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1/2\n    elif div_sum(n): \n        return fprime(n-1) + fprime(n-2) \n    else: \n        return fprime(n-1) + fprime(n-2) + fprime(n-3) \ndef sec(n): \n    ''' \n    This function returns the root of the secant method of the given function. \n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1/2\n    elif div_sum(n): \n        return fprime(n-1) + fprime(n-2) + fprime(n-3) \n    else: \n        return fprime(n-1) + fprime(n-2) + fprime(n-3) + fprime(n-4) \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return False\n    elif n < 0: \n        return False\n    if n % 2 == 0: \n        return True\n    divs = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divs.append(i) \n            if n//i == i: \n                return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # The divisors of n \n    divisors = []\n    for x in range(1, int(math.sqrt(n)) + 1):\n        if n % x == 0: \n            divisors.append(x) \n            if x == n // x: \n                divisors.append(n // x) \n                divisors.append(n % x) \n    # Return the list of divisors \n    return divisors \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # get sum of divisors\n    n_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            n_divisors += i\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            div.append(i)\n    if len(div) == 2:\n        return div\n    else:\n        return 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return True\n    else: \n        for i in range(2, int(math.sqrt(n))+1): \n            if n % i == 0: \n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        return False\n    elif n < 2:\n        return True\n    else:\n        s = int(math.sqrt(n))\n        for i in range(1,s+1):\n            if n%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, n):\n        if n%i == 0:\n            s += i\n    return s==n\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #Input a string.\n    print (\"Enter a string: \", end=\"\")\n    str1 = str(input())\n    #Code to check if str1 is a string.\n    if (type(str1) == str):\n        if(str1.islower()):\n            return(str(len(str(str1).lower())))\n        elif(str1.isupper()):\n            return(str(len(str(str1).upper())))\n        else:\n            return(str(len(str(str1))))\n    else:\n        return(str(len(str(str1))))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = 0\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            result += 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if str1.find(i)!= -1:\n            count += 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    i = 0\n    count = 0\n    for j in range(len(str1)):\n        if str1[j] == str1[i]:\n            count = count + 1\n        i = i + 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    def count_char(str1, char):\n        #keep track of where char is\n        ind = 0\n        #keep track of how many times it appears in str1\n        count = 0\n        #check for string/alphabet\n        for i in range(0, len(str1)):\n            #if char is in the string\n            if char in str1[i]:\n                #increment count\n                count += 1\n        return count\n    #initialize the count of the character\n    char_count = 0\n    #loop through each letter and add to char_count\n    for i in str1:\n        char_count += count_char(i, str1[ind])\n        ind += 1\n    #return the character count\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            if char.lower() == char.lower():\n                count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for char in str1:\n        if char in alphabet:\n            if alphabet.index(char)==alphabet.index(str1[0]):\n                count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_pos = {}\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            char_pos[str1[i]] = char_pos.get(str1[i],0) + 1\n    return sum(char_pos.values())\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    a=0\n    for x in range(len(str1)-1):\n        if str1[x]==str1[x+1]:\n            a+=1\n        else:\n            a=0\n    return a\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letter_dic = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for i in range(len(str1)):\n        letter_dic[str1[i]] += 1\n    return letter_dic\n    \n    \n    \ndef find_frequency(str1):\n    '''\n    Write a function to find the number of times a substring is used in a string. \n    '''\n    letter_dic = count_char_position(str1)\n    return letter_dic[str1]\n    \n    \n    \ndef check_if_frequency_correct(str1,str2):\n    '''\n    Write a function to check if two strings have the same number of times a substring is used.\n    '''\n    letter_dic = count_char_position(str1)\n    if letter_dic == count_char_position(str2):\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_for_frequency_of_more_than_two_substrings(str1,str2):\n    '''\n    Write a function to check if a substring of length 2 is a substring of length 2 in the string str1.\n    '''\n    letter_dic = count_char_position(str1)\n    if letter_dic == count_char_position(str2):\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_for_frequency_of_two_substrings(str1,str2):\n    '''\n    Write a function to check if two strings have the same number of times a substring is used.\n    '''\n    letter_dic = count_char_position(str1)\n    if letter_dic == count_char_position(str2):\n        return True\n    else:\n        return False\n    \n    \ndef check_for_frequency_of_two_substrings_count(str1,str2):\n    '''\n    Write a function to check if two strings have the same number of times a substring is used.\n    '''\n    letter_dic = count_char_position(str1)\n    if letter_dic == count_char_position(str2):\n        return letter_dic\n    else:\n        return False\n    \n    \ndef check_for_frequency_of_four_substrings(str1,str2):\n    '''\n    Write a function to check if a string contains four substrings.\n    '''\n    letter_dic = count_char_position(str1)\n    if letter_dic == count_char_position(str2):\n        return True\n    else:\n        return False\n    \n    \n    \ndef find_length(str1,str2):\n    '''\n    Write a function to find the length of a substring.\n    '''\n    letter_dic = count_char_position(str1)\n    return letter_dic[str1]\n    \n    \n    \ndef find_length_of_two_substrings(str1,str2):\n    '''\n    Write a function to find the length of two strings.\n    '''\n    letter_dic = count_char_position(str1)\n    return letter_dic[str1]\n    \n    \n    \ndef find_length_of_three_substrings(str1,str2):\n    '''\n    Write a function to find the length of three strings.\n    '''\n    letter_dic = count_char_position(str1)\n    if letter_dic == count_char_position(str2):\n        return letter_dic\n    else:\n        return False\n    \n    \n    \ndef find_length_of_four_substrings(str1,str2):\n    '''\n    Write a function to find the length of four strings.\n    '''\n    letter_dic = count_char_position(str1)\n    if letter_dic == count_char_position(str2):\n        return letter_dic\n    else:\n        return False\n    \n    \n    \ndef is_palindrome(str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if str == str[::-1]:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_palindrome_2(str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if str[::-1] == str:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_palindrome_3(str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return str == str[::-1]\n    \n    \ndef check_for_palindrome_in_string(str1,str2):\n    '''\n    Write a function to check if a string contains a palindrome.\n    '''\n    return is_palindrome(str1) and is_palindrome(str2)\n    \n    \ndef is_palindrome_4(str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return str == str[::-1]\n    \n    \ndef count_substring_count(str1,str2):\n    '''\n    Write a function to find the number of occurrences of a substring in a string.\n    '''\n    letter_dic = count_char_position(str1)\n    return letter_dic[str1]\n    \n    \n    \ndef count_substring_count_count(str1,str2):\n    '''\n    Write a function to find the number of occurrences of a substring in a string.\n    '''\n    letter_dic = count_char_position(str1)\n    return letter_dic[str1]\n    \n    \n    \ndef substrings_in_string(str1):\n    '''\n    Write a function to find all substrings in a string.\n    '''\n    str_dict = {}\n    str_dict[str1] = 0\n    \n    for i in str1:\n        if str_dict[i] == 0:\n            str_dict[i] += 1\n        else:\n            str_dict[i] = 0\n    return str_dict\n    \n    \ndef substrings_in_string_2(str1):\n    '''\n    Write a function to find all substrings in a string.\n    '''\n    str_dict = {}\n    str_dict[str1] = 0\n    \n    for i in str1:\n        if str_dict[i] == 0:\n            str_dict[i] += 1\n        else:\n            str_dict[i] = 0\n    return str_dict\n    \n    \ndef substrings_in_string_3(str1):\n    '''\n    Write a function to find all substrings in a string.\n    '''\n    str_dict = {}\n    str_dict[str1] = 0\n    \n    for i in str1:\n        if str_dict[i] == 0:\n            str_dict[i] += 1\n        else:\n            str_dict[i] = 0\n    return str_dict\n    \n    \ndef substrings_in_string_4(str1):\n    '''\n    Write a function to find all substrings in a string.\n    '''\n    str_dict = {}\n    str_dict[str1] = 0\n    \n    for i in str1:\n        if str_dict[i] == 0:\n            str_dict[i] += 1\n        else:\n            str_dict[i] = 0\n    return str_dict\n    \n    \ndef substrings_in_string_5(str1):\n    '''\n    Write a function to find all substrings in a string.\n    '''\n    str_dict = {}\n    st"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for x in A:\n        if (x&1)==0:\n            return 2\n        else:\n            return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n            else:\n                pass\n    return count\n    \ndef find_odd_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 1:\n                count += 1\n            else:\n                pass\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n        \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # check if list is of length 2 or more\n    if len(A) <= 2:\n        # if length of list is <=2 return 0\n        return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    L = []\n    for i in A:\n        if i & 1 == 0:\n            L.append(i)\n    return len(L)\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if A[i] & A[j] == 0:\n                even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Initialize counts\n    even_counts = 0\n    odd_counts = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if (A[i] & A[j]) == 0:\n                xor_count += 1\n    return xor_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    # Loop through the elements of the list A\n    for i in range(len(A)):\n        # Check if the element is even\n        if A[i] % 2 == 0:\n            # Add 1 to the count\n            count += 1\n    # Return the count\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] and A[j] and A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #initialize the variable\n    num = n\n    #check the condition if the number is a power of 2\n    while num%2==0:\n        num = num//2\n    #if the number is greater than 1\n    if num > 1:\n        #loop through to find the largest power of 2\n        for i in range(2,num):\n            if num%i==0:\n                break\n        else:\n            return num\n    #if the number is less than 1\n    else:\n        return n\n    #recursion to find the power of 2 of the number\n    return (2**((n-1)))-"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0: \n        n = n / 2\n    return n \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while i <= n:\n        if n & i:\n            return i\n        i += 1\n    return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n > 0:\n        if n & 1 == 1:\n            return 1\n        else:\n            return next_power_of_2(n >> 1) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 2**0\n    else:\n        return next_power_of_2(n-1) + 1"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p=2\n    while n >= p:\n        if n%p == 0:\n            return p\n        p+=1\n    return None\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 0\n    while x**2 <= n:\n        x = x + 1\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return n\n    else:\n        return next_power_of_2(n - 2) \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    counts = dict() #builds empty dict\n    \n    for item in a: #for looping through a list\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n            \n    for i in sorted(counts.keys()): #sort the dict keys\n        if counts[i] == x:\n            return counts[i]\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a=[]\n    d=dict()\n    i=0\n    x=x.upper()\n    for i in range(0,len(x)):\n        d[x[i]]=i\n    for j in range(0,len(a)):\n        a[j].count(a[j])\n        if a[j] in d:\n            i=d[a[j]]\n            a[j]=i+1\n    return a\na=[1,2,3,4,5,6]\nprint(frequency(a,5)"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            num += 1\n    return num"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = dict()\n    for i in range(len(a)):\n        c[a[i]] = c.get(a[i],0) + 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d = dict(Counter(a))\n    return(d[x])\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # create an empty list\n    z = []\n    # iterate through the list\n    for i in range(len(a)):\n        # if the number in a is the same as the number in a in z, add 1 to z\n        if a[i] == a[x]:\n            z.append(a[i])\n    # iterate through the list to get the frequency\n    for i in z:\n        print(a.count(i))\na = [\"hello\", \"hi\", \"hey\", \"hi\", \"hello\"]\nfrequency(a, \"hey\""
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    res = 0\n    for i in range(len(a)):\n        if x==a[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # your code goes here\n    s = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            s += 1\n    return s\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i]==x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = {}\n    for i in a:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    return counter.values()\n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n < 0:\n        print('Indices out of range.')\n        return None\n    if m >= len(list1):\n        print('Invalid list.')\n        return None\n    if n >= len(list1):\n        print('Invalid list.')\n        return None\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    c = 0\n    for i in range(m, n):\n        c += list1[i]\n    return c\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i+n] for i in range(m,m+n))\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # your code goes here\n    print(\"please enter a list with numbers\")\n    list2 = []\n    for i in range(m, n):\n        list2.append(int(input(\"please enter a number: \")))\n        print(list2)\n    print(list2)\n    print(\"sum of the list is: \", sum(list2))\n    print(list2)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list = []\n    for i in range(m, n):\n        sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                sum += j\n        list.append(sum)\n    return list[0]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pas"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0                                                                                                                                                                                                \n    if (m > 0 and n > 0):                                                                                                                                                                                            \n        for i in range(m):                                                                                                                                                                                                \n            sum += list1[i]                                                                                                                                                                                            \n    return sum                                                                                                                                                                                            \n    \ndef first_last_occurrence_of_an_element_in_a_list(list1, element):                                                                                                                                                                                                \n    '''\n    Write a function to find the index of first occurrence of an element in a list.\n    '''\n    try:\n        i = list1.index(element)                                                                                                                                                                                                \n        return i                                                                                                                                                                                        \n    except ValueError:\n        return -1                                                                                                                                                    \n    \ndef first_last_occurrence_of_an_element_in_a_list_new(list1, element):                                                                                                                                                                                                \n    '''\n    Write a function to find the index of first occurrence of an element in a list.\n    '''\n    try:\n        i = list1.index(element,list1.index(element)+1)                                                                                                                                                                                                \n        return i                                                                                                                                                                                        \n    except ValueError:\n        return -1                                                                                                                                                    \n    \ndef find_nth_occurrence_of_an_element_in_a_list(list1, element, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the index of first occurrence of an element in a list.\n    '''\n    try:                                                                                                                                                                                                                                \n        i = list1.index(element, list1.index(element) + 1, list1.index(element, list1.index(element)+1) + 1)                                                                                                                                                                                            \n        return i                                                                                                                                                                                        \n    except ValueError:\n        return -1                                                                                                                                                    \n        \ndef contains_string_in_list(list1, element):                                                                                                                                                                                                                            \n    '''\n    Write a function to check if a list contains a specific string.\n    '''\n    if (list1 == \"\"):                                                                                                                                                                                                                                    \n        return False                                                                                                                                                                                            \n    else:                                                                                                                                                                                                                                \n        for i in range(len(list1)):                                                                                                                                                                                                                                        \n            if (list1[i] == element):                                                                                                                                                                                                                                                                \n                return True\n                \n                \ndef update_list(list1, element, element_in_list):                                                                                                                                                                                                                            \n    '''\n    Write a function to update a specific element in a list.\n    '''\n    i = list1.index(element)                                                                                                                                                                                                                                    \n    list1[i] = element_in_list                                                                                                                                                                                                                        \n    return list1\n    \ndef reverse_list(list1):                                                                                                                                                                                                                                                                \n    '''\n    Write a function to reverse a list.\n    '''\n    list1.reverse()\n    return list1\n    \ndef remove_duplicates(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to remove duplicates in a list.\n    '''\n    list1.sort()\n    new_list = []\n    if(list1 == []):\n        return new_list\n    else:\n        for i in range(len(list1)):\n            if(list1[i] not in new_list):\n                new_list.append(list1[i])\n        return new_list\n    \ndef select_random_value(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to select a random element from a list.\n    '''\n    return list1[random.randrange(len(list1))]\n    \ndef convert_to_lowercase(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to convert all alphabetic characters to lowercase.\n    '''\n    list1.sort()\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i].lower())\n    return new_list\n    \ndef check_two_digit_number(n):                                                                                                                                                                                                                            \n    '''\n    Write a function to check if a number is two digits.\n    '''\n    if(len(str(n)) == 2):\n        return True\n    else:\n        return False\n    \ndef get_maximum(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to get the maximum number in a list.\n    '''\n    return max(list1)\n    \ndef get_minimum(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to get the minimum number in a list.\n    '''\n    return min(list1)\n    \ndef is_even_list(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to check if a list is even.\n    '''\n    if(len(list1) % 2 == 0):                                                                                                                                                                                                                            \n        return True\n    else:                                                                                                                                                                                                                            \n        return False\n    \ndef get_even_odd(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to get the even and odd numbers from a list.\n    '''\n    odd_numbers = []\n    even_numbers = []\n    for i in range(len(list1)):                                                                                                                                                                                                                            \n        if(list1[i] % 2!= 0):                                                                                                                                                                                                                            \n            even_numbers.append(list1[i])\n        else:\n            odd_numbers.append(list1[i])\n    return even_numbers, odd_numbers\n    \ndef remove_duplicates_from_a_list(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    list1.sort()\n    new_list = []\n    for i in range(len(list1)):\n        if(list1[i] not in new_list):\n            new_list.append(list1[i])\n    return new_list\n    \ndef sort_list(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to sort a list.\n    '''\n    list1.sort()\n    return list1\n    \ndef get_digit_sum(number):                                                                                                                                                                                                                            \n    '''\n    Write a function to get the sum of digits in a number.\n    '''\n    sum = 0\n    for i in range(len(str(number))):\n        sum += int(str(number)[i])\n    return sum\n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                                                    \n    '''\n    Write a function to sum the numbers in a range of numbers.\n    '''\n    sum = 0\n    if (m > 0 and n > 0):                                                                                                                                                                                                                                \n        for i in range(m):                                                                                                                                                                                                                            \n            sum += list1[i]                                                                                                                                                                                                                            \n    return sum\n    \ndef calculate_sum(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to calculate the sum of a list of numbers.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    return sum\n    \ndef calculate_average(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to calculate the average of a list of numbers.\n    '''\n    return sum(list1) / len(list1)\n    \ndef is_bigger_than_x(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to check if a list contains a specific element.\n    '''\n    return list1.count(max(list1))!= len(list1)\n    \ndef is_smaller_than_x(list1):                                                                                                                                                                                                                            \n    '''\n    Write a function to check if a list contains a specific element.\n    '''\n    return list1.count(min(list1))!= len(list1)\n    \ndef sort_list_b"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + list1[i]\n    print(sum)\n    return(sum)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    return sum(range(m, n + 1))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4*a*(math.sqrt(3)*a)\ndef perimeter_diamond(a):\n    '''\n    Write a function that finds the perimeter of a diamond from its sides.\n    '''\n    return 4*a*a\ndef area_diamond(a):\n    '''\n    Write a function that finds the area of a diamond from its sides.\n    '''\n    return 3*(a*(a+1))\ndef area_pentagon(a):\n    '''\n    Write a function that finds the area of a regular pentagon from its sides.\n    '''\n    return 4*(math.sqrt(3)*a)\ndef area_pentagon_metric(a):\n    '''\n    Write a function that finds the area of a regular pentagon from its sides.\n    '''\n    return 4*(math.sqrt(3)*a/math.sqrt(2))\ndef area_diamond_metric(a):\n    '''\n    Write a function that finds the area of a diamond from its sides.\n    '''\n    return math.sqrt(3)*a\ndef volume_diamond(a):\n    '''\n    Write a function that finds the volume of a diamond from its sides.\n    '''\n    return 4*(math.sqrt(3)*a)\ndef volume_pentagon(a):\n    '''\n    Write a function that finds the volume of a regular pentagon from its sides.\n    '''\n    return 4*(a*(a+1))\ndef volume_pentagon_metric(a):\n    '''\n    Write a function that finds the volume of a regular pentagon from its sides.\n    '''\n    return 4*(a*(a/2))\ndef volume_diamond_metric(a):\n    '''\n    Write a function that finds the volume of a diamond from its sides.\n    '''\n    return math.sqrt(3)*a\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4*a) + (2*a) - (4*(a**2))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # We want the area of the pentagon\n    A = (a * 5) / 2\n    # perimeter of the parallelepiped is\n    # perpendicular to the parallelepiped\n    b = (A * 3) / 2\n    # perimeter of parallelepiped is\n    # perpendicular to parallelepiped\n    c = math.sqrt(b ** 2 - 4 * a * math.cos(math.radians(90)))\n    # a is a value of the centre of parallelepiped\n    # we want to find the perimeter of the parallelepiped\n    # with area of b\n    # but we want to find the perimeter of the parallelepiped\n    # with area of c\n    # so we can use b and c\n    # here we are doing the equation\n    # the area of the parallelepiped is\n    # perpendicular to the parallelepiped\n    # we want to find the perimeter of the parallelepiped\n    # with area of b\n    # then we can calculate the perimeter\n    # of parallelepiped with area of b\n    # with area of c\n    # the perimeter is\n    # perpendicular to parallelepiped\n    # so we can calculate the perimeter\n    # of parallelepiped with area of b\n    # with area of c\n    # the perimeter is\n    # perpendicular to parallelepiped\n    # we calculate the perimeter\n    # of parallelepiped with area of b\n    # with area of c\n    # the perimeter is\n    # perpendicular to parallelepiped\n    # we return the perimeter\n    return math.sqrt(b ** 2 - 4 * a * math.cos(math.radians(90))) + math.sqrt(c ** 2 - b ** 2 - 4 * a * math.cos(math.radians(90)))\n    # the method of the area of the parallelepiped is\n    # perpendicular to the parallelepiped\n    # we want to find the perimeter of the parallelepiped\n    # with area of b\n    # but we want to find the perimeter of the parallelepiped\n    # with area of c\n    # so we can use b and c\n    # here we are doing the equation\n    # the area of the parallelepiped is\n    # perpendicular to the parallelepiped\n    # we want to find the perimeter of the parallelepiped\n    # with area of b\n    # then we can calculate the perimeter\n    # of parallelepiped with area of b\n    # with area of c\n    # the perimeter is\n    # perpendicular to parallelepiped\n    # so we can calculate the perimeter\n    # of parallelepiped with area of b\n    # with area of c\n    # the perimeter is\n    # perpendicular to parallelepiped\n    # we calculate the perimeter\n    # of parallelepiped with area of b\n    # with area of c\n    # the perimeter is\n    # perpendicular to parallelepiped\n    # we return the perimeter\n    #\n    # we must return None if there is no such triangle\n    # as this is not a valid triangle\n    #\n    # we must return a float if there is no such triangle\n    # as this is not a valid triangle\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here\n    return 4 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #find the length of sides of a regular pentagon\n    l = math.sqrt(a**3 + 3 * a**2)\n    #find the area of the parallelogram\n    area = math.pi * (l/2)**2\n    #find the perimeter\n    perimeter = 4 * math.pi * l\n    return perimeter, area\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(3*a*3 + 6*a*2 + 5*a*a + 3*a)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*(3*a*4 + 6*a*3 + 5*a*a + 3*a)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*(3*a*5 + 6*a*4 + 5*a*a + 3*a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*(3*a*6 + 6*a*5 + 5*a*a + 3*a)\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a*(3*a*7 + 6*a*6 + 5*a*a + 3*a)\ndef perimeter_quarto(a):\n    '''\n    Write a function to find the perimeter of a regular quarto from the length of its sides.\n    '''\n    return a*(3*a*8 + 6*a*7 + 5*a*a + 3*a)\ndef perimeter_quinto(a):\n    '''\n    Write a function to find the perimeter of a regular quinto from the length of its sides.\n    '''\n    return a*(3*a*9 + 6*a*8 + 5*a*a + 3*a)\ndef perimeter_quinox(a):\n    '''\n    Write a function to find the perimeter of a regular quinox from the length of its sides.\n    '''\n    return a*(3*a*10 + 6*a*9 + 5*a*a + 3*a)\ndef perimeter_sexo(a):\n    '''\n    Write a function to find the perimeter of a regular sexo from the length of its sides.\n    '''\n    return a*(3*a*11 + 6*a*10 + 5*a*a + 3*a)\ndef perimeter_sabado(a):\n    '''\n    Write a function to find the perimeter of a regular sabado from the length of its sides.\n    '''\n    return a*(3*a*12 + 6*a*11 + 5*a*a + 3*a)\ndef perimeter_zapato(a):\n    '''\n    Write a function to find the perimeter of a regular zapato from the length of its sides.\n    '''\n    return a*(3*a*13 + 6*a*12 + 5*a*a + 3*a)\ndef perimeter_hepta(a):\n    '''\n    Write a function to find the perimeter of a regular hepta from the length of its sides.\n    '''\n    return a*(3*a*14 + 6*a*13 + 5*a*a + 3*a)\ndef perimeter_origano(a):\n    '''\n    Write a function to find the perimeter of a regular origano from the length of its sides.\n    '''\n    return a*(3*a*15 + 6*a*14 + 5*a*a + 3*a)\ndef perimeter_cauciato(a):\n    '''\n    Write a function to find the perimeter of a regular cauciato from the length of its sides.\n    '''\n    return a*(3*a*16 + 6*a*15 + 5*a*a + 3*a)\ndef area_perimetro_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the perimeter of its sides.\n    '''\n    return 4*math.pi*a\ndef area_perimetro_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the perimeter of its sides.\n    '''\n    return a*(3*a*6 + 6*a*5 + 5*a*a + 3*a)\ndef area_perimetro_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the perimeter of its sides.\n    '''\n    return a*(3*a*7 + 6*a*6 + 5*a*a + 3*a)\ndef area_perimetro_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the perimeter of its sides.\n    '''\n    return a*(3*a*8 + 6*a*7 + 5*a*a + 3*a)\ndef area_perimetro_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the perimeter of its sides.\n    '''\n    return a*(3*a*9 + 6*a*8 + 5*a*a + 3*a)\ndef area_perimetro_quarto(a):\n    '''\n    Write a function to find the area of a regular quarto from the perimeter of its sides.\n    '''\n    return a*(3*a*9 + 6*a*10 + 5*a*a + 3*a)\ndef area_perimetro_quinto(a):\n    '''\n    Write a function to find the area of a regular quinto from the perimeter of its sides.\n    '''\n    return a*(3*a*10 + 6*a*9 + 5*a*a + 3*a)\ndef area_perimetro_quinox(a):\n    '''\n    Write a function to find the area of a regular quinox from the perimeter of its sides.\n    '''\n    return a*(3*a*11 + 6*a*10 + 5*a*a + 3*a)\ndef area_perimetro_sexo(a):\n    '''\n    Write a function to find the area of a regular sexo from the perimeter of its sides.\n    '''\n    return a*(3*a*12 + 6*a*11 + 5*a*a + 3*a)\ndef area_perimetro_sabado(a):\n    '''\n    Write a function to find the area of a regular sabado from the perimeter of its sides.\n    '''\n    return a*(3*a*13 + 6*a*12 + 5*a*a + 3*a)\ndef area_perimetro_zapato(a):\n    '''\n    Write a function to find the area of a regular zapato from the perimeter of its sides.\n    '''\n    return a*(3*a*14 + 6*a*13 + 5*a*a + 3*a)\ndef area_perimetro_hepta(a):\n    '''\n    Write a function to find the area of a regular hepta from the perimeter of its sides.\n    '''\n    return a*(3*a*15 + 6*a*14 + 5*a*a + 3*a)\ndef area_perimetro_origano(a):\n    '''\n    Write a function to find the area of a regular origano from the perimeter of its sides.\n    '''\n    return a*(3*a*16 + 6*a*15 + 5*a*a + 3*a)\ndef area_perimetro_cauciato(a):\n    '''\n    Write a function to find the area of a regular cauciato from the perimeter of its sides.\n    '''\n    return a*(3*a*17 + 6*a*16 + 5*a*a + 3*a)\ndef area_perimetro_quinto(a):\n    '''\n    Write a function to find the area of a regular quinto from the perimeter of its sides.\n    '''\n    return a*(3*a*17 + 6*a*16 + 5*a*a + 3*a)\ndef area_perimetro_quinto(a):\n    '''\n    Write a function to find the area of a regular quinto from the perimeter of its sides.\n    '''\n    return a*(3*a*18 + 6*a*17 "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a=a\n    side=2*math.sqrt(a)\n    perimeter=3*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = a**(3/2)\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(3/5)*math.pi)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = 4\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_pentagon_2(a):\n    '''\n    Write a function that calculates the perimeter of a regular pentagon from a given side.\n    '''\n    l = 4\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_elliptic_pentagon(a):\n    '''\n    Write a function that calculates the perimeter of an elliptic pentagon from the length of its sides.\n    '''\n    l = 4\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_elliptic_pentagon_2(a):\n    '''\n    Write a function that calculates the perimeter of an elliptic pentagon from a given side.\n    '''\n    l = 4\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_hexagon(a):\n    '''\n    Write a function that calculates the perimeter of a hexagon from the length of its sides.\n    '''\n    l = 6\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_hexagon_2(a):\n    '''\n    Write a function that calculates the perimeter of a hexagon from a given side.\n    '''\n    l = 6\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_octagon(a):\n    '''\n    Write a function that calculates the perimeter of an octagon from the length of its sides.\n    '''\n    l = 8\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_octagon_2(a):\n    '''\n    Write a function that calculates the perimeter of a octagon from a given side.\n    '''\n    l = 8\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_hexagon_small(a):\n    '''\n    Write a function that calculates the perimeter of a small hexagon from the length of its sides.\n    '''\n    l = 8\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_hexagon_small_2(a):\n    '''\n    Write a function that calculates the perimeter of a small hexagon from a given side.\n    '''\n    l = 8\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_square(a):\n    '''\n    Write a function that calculates the perimeter of a square from the length of its sides.\n    '''\n    l = 9\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_square_2(a):\n    '''\n    Write a function that calculates the perimeter of a square from a given side.\n    '''\n    l = 9\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_triangle(a):\n    '''\n    Write a function that calculates the perimeter of a triangle from the length of its sides.\n    '''\n    l = 6\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_triangle_2(a):\n    '''\n    Write a function that calculates the perimeter of a triangle from a given side.\n    '''\n    l = 6\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_square_small(a):\n    '''\n    Write a function that calculates the perimeter of a small square from the length of its sides.\n    '''\n    l = 7\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_square_small_2(a):\n    '''\n    Write a function that calculates the perimeter of a small square from a given side.\n    '''\n    l = 7\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_triangle_small(a):\n    '''\n    Write a function that calculates the perimeter of a triangle from the length of its sides.\n    '''\n    l = 7\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_triangle_small_2(a):\n    '''\n    Write a function that calculates the perimeter of a triangle from a given side.\n    '''\n    l = 7\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_pentagon_small(a):\n    '''\n    Write a function that calculates the perimeter of a pentagon from the length of its sides.\n    '''\n    l = 7\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_pentagon_small_2(a):\n    '''\n    Write a function that calculates the perimeter of a pentagon from a given side.\n    '''\n    l = 7\n    l_ = a/2\n    p = 5*l*(2*l-1)*(2*l-1)+5*l*l_*(2*l_-1)*(2*l_-1)\n    return p\ndef perimeter_elliptic_pentagon(a):\n    '''\n    Write a function that calculates the perimeter of an elliptic pentagon from the length of its sides.\n    '''"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import collections\n    count = collections.Counter(s)\n    return count\n    \nprint(count_occurance('std')"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = 0\n    for i in s:\n        if i =='s':\n            occurance += 1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    dict = {}\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n        elif i == 'd':\n            count += 1\n        elif i == 't':\n            count += 1\n        elif i == 'r':\n            count += 1\n        elif i == 'h':\n            count += 1\n        elif i == 'u':\n            count += 1\n        elif i == 'v':\n            count += 1\n        elif i == 'w':\n            count += 1\n        elif i == 'x':\n            count += 1\n        elif i == 'y':\n            count += 1\n        elif i == 'z':\n            count += 1\n        elif i =='':\n            count += 1\n        elif i == '!':\n            count += 1\n        elif i == '#':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == ',':\n            count += 1\n        elif i == ';':\n            count += 1\n        elif i == ':':\n            count += 1\n        elif i == '?':\n            count += 1\n        elif i == '@':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '!':\n            count += 1\n        elif i == '#':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == ',':\n            count += 1\n        elif i == ';':\n            count += 1\n        elif i == ':':\n            count += 1\n        elif i == '?':\n            count += 1\n        elif i == '@':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == ',':\n            count += 1\n        elif i == ';':\n            count += 1\n        elif i == ':':\n            count += 1\n        elif i == '?':\n            count += 1\n        elif i == '@':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == ',':\n            count += 1\n        elif i == ';':\n            count += 1\n        elif i == ':':\n            count += 1\n        elif i == '?':\n            count += 1\n        elif i == '@':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == ',':\n            count += 1\n        elif i == ';':\n            count += 1\n        elif i == ':':\n            count += 1\n        elif i == '?':\n            count += 1\n        elif i == '@':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == ',':\n            count += 1\n        elif i == ';':\n            count += 1\n        elif i == ':':\n            count += 1\n        elif i == '?':\n            count += 1\n        elif i == '@':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == ',':\n            count += 1\n        elif i == ';':\n            count += 1\n        elif i == ':':\n            count += 1\n        elif i == '?':\n            count += 1\n        elif i == '@':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == ',':\n            count += 1\n        elif i == ';':\n            count += 1\n        elif i == ':':\n            count += 1\n        elif i == '?':\n            count += 1\n        elif i == '@':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        elif i == ',':\n            count += 1\n        elif i == ';':\n            count += 1\n        elif i == ':':\n            count += 1\n        elif i == '?':\n            count += 1\n        elif i == '@':\n            count += 1\n        elif i == '$':\n            count += 1\n        elif i == '%':\n            count += 1\n        elif i == '&':\n            count += 1\n        elif i == '*':\n            count += 1\n        elif i == '+':\n            count += 1\n        elif i == '-':\n            count += 1\n        elif i == '=':\n            count += 1\n        elif i == '.':\n            count += 1\n        eli"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = {}\n    for char in s:\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n    return counter"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s_count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            s_count += 1\n    return s_count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = [0] * 26\n    for i in range(len(s)):\n        if s[i] =='s':\n            occurance[ord(s[i]) - 65] += 1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    str_len = len(s)\n    occ = [0] * str_len\n    for i in range(str_len):\n        occ[i] = s.count(s[i])\n    return occ\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(len(s)):\n            if s[i] =='s':\n                count += 1\n            elif s[i] == 'd':\n                count -= 1\n            else:\n                continue\n        return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    res = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            res += 1\n        elif s[i] == 'b':\n            res += 1\n        elif s[i] == 'c':\n            res += 1\n        else:\n            res -= 1\n    return res\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    elif all(type(x) == type(test_tuple[0]) for x in test_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    list_of_tuples = []\n    for tup in test_tuple:\n        if type(tup[0]) == int or type(tup[0]) == float:\n            list_of_tuples.append(tup)\n    if len(list_of_tuples) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # find out the first element of list\n    lst = test_tuple[0]\n    # check the type of element\n    if type(lst[0]) is not list:\n        return False\n    if type(lst[1]) is not list:\n        return False\n    if type(lst[2]) is not list:\n        return False\n    if type(lst[3]) is not list:\n        return False\n    if type(lst[4]) is not list:\n        return False\n    if type(lst[5]) is not list:\n        return False\n    if type(lst[6]) is not list:\n        return False\n    if type(lst[7]) is not list:\n        return False\n    if type(lst[8]) is not list:\n        return False\n    if type(lst[9]) is not list:\n        return False\n    if type(lst[10]) is not list:\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i].dtype.name!= test_tuple[i].dtype.type:\n            print('Data type of the element: ', test_tuple[i].dtype.name)\n            raise TypeError('Data type of the element must be same as that of the original tuple')\n    \n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for element in test_tuple:\n        if isinstance(element, int) or isinstance(element, float):\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple_data = (10, 20, 30, 40, 50)\n    for i in test_tuple:\n        if type(i)!= int and type(i)!= float and type(i)!= complex:\n            raise TypeError('Input data type is not correct.')\n    if max(test_tuple_data) > 60:\n        raise TypeError('Input data type is not correct.')\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_type = str(type(test_tuple[0]))\n    if tuple_type == \"str\":\n        test_tuple = list(map(str, test_tuple))\n    elif tuple_type == \"tuple\":\n        test_tuple = list(tuple(test_tuple))\n    return test_tuple\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # A tuple is a collection which is ordered and unchangeable.\n    # Both integers and strings are allowed as input.\n    for i in test_tuple:\n        if not isinstance(i, (int, str)):\n            return \"Tuple is not a collection\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    n = len(test_tuple)\n    for i in range(n):\n        type = type(test_tuple[i])\n        if type!= object:\n            raise TypeError(\"tuple type should be an object\")\n    for i in range(n):\n        for j in range(n):\n            if test_tuple[i]!= test_tuple[j]:\n                raise TypeError(\"tuple type should be an object\")\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for element in test_tuple:\n        type_list.append(type(element))\n    if(type_list == list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # declaring a counter variable\n    count = 0\n    # declaring a counter variable\n    for i in range(n):\n        # if the value at position i is less than or equal to x then add 1 to the counter\n        if arr[i] <= x:\n            count += 1\n            # if the counter is equal to the length of the array then return the first element of the array\n        if count >= n/2:\n            return arr[i]\n    # otherwise return the x value\n    return x\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Base case\n    if n == 0:\n        return True\n    # Find the index of the first element greater than the x\n    l = n - 1\n    if arr[l] == x:\n        return True\n    # If x is a lower bound, then all the elements in the array must be above the x\n    if x < arr[l]:\n        return is_majority(arr[l + 1:], n, x)\n    # If x is greater than the last element, then all the elements in the array must be below the x\n    if x > arr[l]:\n        return is_majority(arr[:l], n, x)\n    # If x is between the first and last element, then all the elements in the array must be in the same position\n    if x == arr[l]:\n        return True\n    # If x is between the first and last element, then all the elements in the array must be in the same position\n    if x == arr[l + 1]:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return arr[0] == x\n    i = 0\n    for j in range(n):\n        if arr[j] == x:\n            i = j\n            break\n    if i == n - 1:\n        return False\n    for j in range(n - 1):\n        if arr[j]!= arr[i] and arr[j]!= x:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Find the majority element in the given sorted array.\n    # Return true if the array is sorted in ascending order and the majority element is in the sorted order, or false otherwise.\n    # Hint: you can use the built in helper function is_sorted in your solution.\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr.sort()\n    count = 0\n    if len(arr)%2==1:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        else:\n            count = 0\n        if count == n / 2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Write your code here\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[j] == x:\n                count += 1\n        if count/n >= x/n:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TO DO\n    count = 0\n    for i in arr:\n        if x == i:\n            count += 1\n        if count > n/2:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    while left < right:\n        if arr[left] == x and arr[right] == x:\n            return True\n        elif arr[left] > x:\n            right -= 1\n        elif arr[right] < x:\n            left += 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(n):\n        if arr[i] == x:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    #Code goes here\n    count = 0\n    for bit in str(n):\n        if int(bit) == 1:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Set = 0\n    while n > 0:\n        n &= n - 1\n        n &= 2\n        Set += 1\n    return Set\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # TODO: Write your code here\n    counter=0\n    for i in str(n):\n        if i==\"1\":\n            counter+=1\n    return counter\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return count_Set_Bits(n >> 1) + count_Set_Bits(n & 1)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return sum(1 for i in str(bin(n)[2:]))\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Your code here\n    s = 0\n    for i in range(1, n+1):\n        s += i & 1\n    return s\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    for i in str(n):\n        if int(i) == 1:\n            c += 1\n    print(c)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits=0\n    while n>0:\n        if n&1:\n            bits+=1\n        n>>=1\n    return bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # write your code here\n    bin_num = ''\n    for i in range(0, n):\n        if n % 2 == 1:\n            bin_num += '1'\n        else:\n            bin_num += '0'\n    num = int(bin_num, 2)\n    return num\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % 2 == 0:\n            if int(str(i)[0])==1:\n                count +=1\n        else:\n            if int(str(i)[1])==1:\n                count +=1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    '''\n    example 1:\n    Input : \"aabbaccc\"\n    Output : \"abac\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" have odd indices so they should be removed from the string.\n    '''\n    '''\n    example 2:\n    Input : \"ababcdcdababcdcd\"\n    Output : \"abcdcd\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" have odd indices so they should be removed from the string.\n    '''\n    \n    '''\n    example 3:\n    Input : \"aabbacccdddddeeeeaabbacccddddddddeeeeedcbaaaaaaaa\"\n    Output : \"aaaaaa\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" have even indices so they should be removed from the string.\n    '''\n    \n    '''\n    example 4:\n    Input : \"ecebaa\"\n    Output : \"\"\n    Explanation : \"e\" and \"a\" should be removed from the string.\n    '''\n    '''\n    example 5:\n    Input : \"ecebaa\"\n    Output : \"eca\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" should be removed from the string.\n    '''\n    '''\n    example 6:\n    Input : \"0123456789\"\n    Output : \"123456789\"\n    Explanation : \"1\", \"2\", \"3\" and \"3\" should be removed from the string.\n    '''\n    '''\n    example 7:\n    Input : \"abcde\"\n    Output : \"ab\"\n    Explanation : \"b\", \"c\", \"d\" and \"d\" should be removed from the string.\n    '''\n    '''\n    example 8:\n    Input : \"bcdef\"\n    Output : \"bc\"\n    Explanation : \"b\", \"c\", \"d\" and \"d\" should be removed from the string.\n    '''\n    '''\n    example 9:\n    Input : \"1e10\"\n    Output : \"10\"\n    Explanation : \"1\" and \"e\" should be removed from the string.\n    '''\n    \n    \n    '''\n    example 10:\n    Input : \"aabbacccdddddeeeeaabbacccddddddddeeeeedcbaaaaaaaa\"\n    Output : \"aaaa\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" have odd indices so they should be removed from the string.\n    '''\n    \n    '''\n    example 11:\n    Input : \"aabbacccdddddeeeeaabbacccddddddddeeeeedcbaaaaaaaa\"\n    Output : \"edcbaa\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" have even indices so they should be removed from the string.\n    '''\n    \n    \n    '''\n    example 12:\n    Input : \"aabbacccdddddeeeeaabbacccddddddddeeeeedcbaaaaaaaa\"\n    Output : \"aaaa\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" have odd indices so they should be removed from the string.\n    '''\n    \n    '''\n    example 13:\n    Input : \"aabbacccdddddeeeeaabbacccddddddddeeeeedcbaaaaaaaa\"\n    Output : \"\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" should be removed from the string.\n    '''\n    \n    '''\n    example 14:\n    Input : \"aabbacccdddddeeeeaabbacccddddddddeeeeedcbaaaaaaaa\"\n    Output : \"aaaa\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" should be removed from the string.\n    '''\n    \n    '''\n    example 15:\n    Input : \"aaabbccdddddeeeeaabbacccddddddddeeeeedcbaaaaaaaa\"\n    Output : \"aaaa\"\n    Explanation : \"a\", \"b\", \"c\" and \"c\" should be removed from the string.\n    '''\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l=[]\n    for i in str:\n        if (i % 2)!=0:\n            l.append(i)\n    return l\n    \nprint(odd_values_string(\"This is a string\"))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_string = []\n    odd_index_string.append(str[0])\n    for i in range(1, len(str)):\n        if str[i] % 2 == 0:\n            odd_index_string.append(str[i])\n    return(str)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #var = ['a','e','i','o','u','A','E','I','O','U']\n    #print(var)\n    \n    #var = 'b'\n    #print(var)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values_str = []\n    for index in range(len(str)):\n        if index % 2!= 0:\n            odd_values_str.append(str[index])\n    return \"\".join(odd_values_str)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in str:\n        if i % 2 == 1:\n            new_str = new_str + i\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = list(str)\n    str_list_2 = []\n    for i in range(len(str_list)):\n        if str_list[i] % 2!= 0:\n            str_list_2.append(str_list[i])\n    str_list = str_list_2\n    return ''.join(str_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    for i in range(0,len(str)):\n        if i%2!= 0:\n            odd_values.append(str[i])\n    return \"\".join(odd_values)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.replace(' ', '')\n    str = str.lower()\n    str = list(str)\n    for i in range(len(str)):\n        if str[i] % 2 == 1:\n            str[i] = ''\n    str = ''.join(str)\n    return str\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b and a==c:\n        return a\n    if a==b or a==c or b==c:\n        return a\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n    return min_of_three(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c:\n        return a\n    elif a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    elif c>a and c>b:\n        return c\n    else:\n        return a+b+c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b) and (a<c): \n        return a\n    if (b<c) and (b<a): \n        return b\n    if (c<a) and (c<b): \n        return c\n    return -1\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b) and (a < c):\n        return a\n    if (b < a) and (b < c):\n        return b\n    return c\ndef get_min_of_three(arr):\n    '''\n    Find minimum of three numbers.\n    '''\n    return min_of_three(arr[0],arr[1],arr[2])\ndef merge_three_list(a,b,c):\n    '''\n    Merge three lists into a single list.\n    '''\n    d = []\n    d.append(a)\n    d.append(b)\n    d.append(c)\n    return d\ndef merge_all_list(lst):\n    '''\n    Merge all the lists.\n    '''\n    return merge_three_list(lst[0],lst[1],lst[2])\ndef array_to_string(arr):\n    '''\n    Turn an array into a string.\n    '''\n    s = \"\"\n    for item in arr:\n        s += str(item) + \" \"\n    return s\ndef string_to_array(s):\n    '''\n    Turn string into an array.\n    '''\n    arr = []\n    for item in s.split():\n        arr.append(int(item))\n    return arr\ndef array_to_string_2(arr):\n    '''\n    Turn an array into a string.\n    '''\n    s = \"\"\n    for item in arr:\n        s += str(item) + \" \"\n    return s\ndef string_to_array_2(s):\n    '''\n    Turn string into an array.\n    '''\n    arr = []\n    for item in s.split():\n        arr.append(int(item))\n    return arr\ndef string_to_string_3(arr):\n    '''\n    Turn string into an array.\n    '''\n    s = \"\"\n    for item in arr:\n        s += str(item) + \" \"\n    return s\ndef array_to_string_3(s):\n    '''\n    Turn array into a string.\n    '''\n    arr = []\n    for item in s:\n        arr.append(str(item))\n    return arr\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b: \n        if a>c: \n            return a \n        else: \n            return c \n    else: \n        return b \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and b>c:\n        return a\n    elif a>c and c>b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n & (n-1) == 0):\n        return \"no bits in the given range\"\n    else:\n        return \"bits in the given range\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # verify inputs are positive and then check that in range of n\n    if n < 0:\n        raise ValueError('The input must be positive.')\n    elif n < l:\n        print('n must be greater than or equal to the range of l.')\n    elif n > r:\n        print('n must be less than the range of r.')\n    else:\n        # generate and use result from the function\n        # convert each bit to 0 and 1 and count to 0\n        result = 0\n        for i in range(l, r+1):\n            result = result ^ int(str(bin(i))[2:])\n        # return True if all bits are unset\n        return result == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(0,n):\n        if(n&(n-1)):\n            return False\n    for j in range(0,(r-l)):\n        if(l+(j)==r):\n            return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n):\n        if (n%2 == 0):\n            if (l <= n and n <= r):\n                if (n&(n-1)==0):\n                    print(i, end=\" \")\n                else:\n                    print(i, end=\" \")\n            else:\n                print(i, end=\" \")\n        else:\n            if (l <= n and n <= r):\n                if (n&(n-1)==0):\n                    print(i, end=\" \")\n                else:\n                    print(i, end=\" \")\n            else:\n                print(i, end=\" \")\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while l<r:\n        if (n & (1 << (l % 8)))!= 0:\n            return False\n        l+=1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(r<l):\n        print(\"Invalid range provided.\")\n    else:\n        m = r-l\n        for i in range(m):\n            j = l\n            while(j<n):\n                if(n&(1<<j)==0):\n                    print(n &(1<<j),end=\" \")\n                j=j+1\n        print()\n        return\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    temp = 0\n    for i in range(l,r+1):\n        temp = (temp + (2**i))%n\n    return (temp == 0)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (all(bit in range(n) for bit in range(l,r+1) if n & bit) == True)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n==0:\n        return True\n    if l==r:\n        return True\n    if n%2==0:\n        return all_Bits_Set_In_The_Given_Range(n//2,l,r)\n    if n%2==1:\n        return all_Bits_Set_In_The_Given_Range(n-1,l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n>=l and n<=r:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr[:n] = arr[:n] + sorted(arr[n:])\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # You can assume that arr is sorted.\n    return arr[:n] + sorted(arr[n:])\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    if (n == 0): return arr\n    elif (n > len(arr)): return arr\n    elif (arr[0] < 0): return arr\n    \n    # First, we first need to find a subarray of length n, and then swap the first and last elements of that subarray\n    # Subarray must be of the form (i, j)\n    # Do this in O(n) in time, and O(n^2) in space\n    \n    p = arr[0]\n    \n    for i in range(1, len(arr)):\n        \n        if arr[i] < 0:\n            p = arr[i]\n            arr[i] = -p\n            arr[i-1] = p\n    \n    # Now we have the subarray which needs to be re-ordered\n    \n    # The first element has an index of the index of the first negative\n    # The last element has an index of the index of the last positive\n    # The rest of the elements need to be re-ordered\n    \n    # Time = O(n^2)\n    # Space = O(n)\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n            arr[i-1], arr[i] = arr[i], arr[i-1]\n    \n    # Now we have the array updated so that all negative elements appear before positive ones\n    \n    # The first element has an index of the index of the first negative\n    # The last element has an index of the index of the last positive\n    # The rest of the elements need to be re-ordered\n    \n    # Time = O(n^2)\n    # Space = O(n)\n    \n    return arr\n    "
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    # First, find the length of the array\n    l = len(arr)\n    # For each element, determine if it is positive or negative\n    for i in range(l):\n        if arr[i] > 0:\n            new_arr.append(arr[i])\n            if i > 0:\n                new_arr[i] *= -1\n        elif arr[i] < 0:\n            new_arr.append(-arr[i])\n            if i > 0:\n                new_arr[i] *= -1\n    new_arr.reverse()\n    # Now, find the number of negatives and positives\n    n_neg = 0\n    n_pos = 0\n    for i in range(l):\n        if arr[i] < 0:\n            n_neg += 1\n        elif arr[i] > 0:\n            n_pos += 1\n    # Find the max number of negatives and positives\n    max_neg = max(n_neg, n_pos)\n    max_pos = n_pos - n_neg\n    # Use the min for the max, which is 1 for negative elements and -1 for positive ones\n    if max_neg > max_pos:\n        max_pos = -1 * max_neg\n    # Now, adjust the elements in the new array\n    for i in range(l):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n            if i > 0:\n                arr[i] = max_pos\n        elif arr[i] > 0:\n            arr[i] = max_neg\n    # Now, return the new array\n    return new_arr\n    "
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Use the function to re-arrange the array and return it\n    # Make sure that the negative elements are now put in the last position\n    # Re-arrange elements with negative order as positive and positive order as negative\n    # Re-arrange elements that are negative with respect to their absolute position in the positive order\n    # Re-arrange elements that are negative with respect to their relative position as negative\n    arr = [x for x in arr if x < 0 and x >= -1]\n    arr = [x for x in arr if x >= 0]\n    arr = [x for x in arr if x > -1]\n    if n == 0:\n        return arr\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -1 * arr[i]\n        elif arr[i] < 0:\n            arr[i] = -arr[i]\n    arr[n-1] = -arr[n-1]\n    arr[n-1] = -arr[n-1]\n    return arr\n    \ndef test_re_arrange_array():\n    arr = [-2, -5, 0, -3, -4, 1, 3, -3, 0, -1, -2]\n    n = 3\n    assert re_arrange_array(arr, n) == [-2, -3, 0, 3, -1, 2, -3, -2, -4, 1, -1]\n    arr = [-2, -5, 0, -3, -4, 1, 3, -3, 0, -1, -2, -1]\n    n = 4\n    assert re_arrange_array(arr, n) == [-2, -3, 0, 3, -1, 2, -3, -2, -4, 1, -1, -1]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not isinstance(arr, list):\n        raise TypeError(\"Re-arrange Array must be called with a list.\")\n    if len(arr) < n:\n        raise ValueError(\"Re-arrange Array must have at least n elements.\")\n    if len(arr) <= n:\n        return arr\n    arr_new = []\n    arr_old = arr[:n]\n    for i in range(n):\n        if arr_old[i] < 0:\n            arr_new.append(arr_old[i])\n        else:\n            arr_new.append(arr_old[i])\n            arr_old[i] *= -1\n    arr_old.extend(arr_new)\n    return arr_new\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # case 1: \n    if n == 0:\n        return arr\n    \n    # case 2: \n    if n == 1:\n        return arr[:1] + [arr[-1] * (-1) ** n]\n    \n    # case 3: \n    arr[0] = arr[-1]\n    arr = arr[:-1] + [arr[-1] * (-1) ** n]\n    return arr\n    \n    "
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = sorted(arr)\n    arr.reverse()\n    new_arr = arr\n    for i in range(n):\n        if new_arr[i] < 0:\n            new_arr[i] *= -1\n    return new_arr\n    # arr = sorted(arr)\n    # arr = re_arrange_array(arr, n)\n    # return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return\n    arr[:n] = [x for x in arr[:n] if x >= 0]\n    arr[:n] += [-x for x in arr[:n]]\n    arr[:n] += [x for x in arr[:n] if x < 0]\n    arr[n:] = [x for x in arr[n:] if x >= 0]\n    arr[n:] += [-x for x in arr[n:]]\n    arr[n:] += [x for x in arr[n:] if x < 0]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n        else:\n            arr[i] = -1 * arr[i]\n        i += 1\n    while j < len(arr):\n        if arr[j] < 0:\n            arr[j] = -arr[j]\n        else:\n            arr[j] = -1 * arr[j]\n        j += 1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n    "
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if(char=='\\n'):\n        str1=str1.replace('\\n','')\n    elif(char==' '):\n        str1=str1.replace(' ','')\n    elif(char=='\\t'):\n        str1=str1.replace('\\t','')\n    elif(char=='\\r'):\n        str1=str1.replace('\\r','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # create a blank string\n    blank_str = ''\n    # iterate over each character in string\n    for i in str1:\n        # if the character is blank, add the character to blank_str\n        if i =='':\n            blank_str += char\n        # else\n        else:\n            blank_str += i\n    # return blank_str\n    return blank_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\n',' ')\n    str1 = str1.replace('\\t',' ')\n    str1 = str1.replace('\\r',' ')\n    str1 = str1.replace('\\xa0',' ')\n    str1 = str1.replace('-',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(\" \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\" \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new_string.replace(\"  \",\"\")\n    new_string = new"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"<\",\"\")\n    str1 = str1.replace(\">\",\"\")\n    str1 = str1.replace(\"[\",\"\")\n    str1 = str1.replace(\"]\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"<\",\"\")\n    str1 = str1.replace(\">\",\"\")\n    str1 = str1.replace(\"[\",\"\")\n    str1 = str1.replace(\"]\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"<\",\"\")\n    str1 = str1.replace(\">\",\"\")\n    str1 = str1.replace(\"[\",\"\")\n    str1 = str1.replace(\"]\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"<\",\"\")\n    str1 = str1.replace(\">\",\"\")\n    str1 = str1.replace(\"[\",\"\")\n    str1 = str1.replace(\"]\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"<\",\"\")\n    str1 = str1.replace(\">\",\"\")\n    str1 = str1.replace(\"[\",\"\")\n    str1 = str1.replace(\"]\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"<\",\"\")\n    str1 = str1.replace(\">\",\"\")\n    str1 = str1.replace(\"[\",\"\")\n    str1 = str1.replace(\"]\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"<\",\"\")\n    str1 = str1.replace(\">\",\"\")\n    str1 = str1.replace(\"[\",\"\")\n    str1 = str1.replace(\"]\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"=\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"!\",\"\")\n    str1 = str1.replace(\"<\",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    temp_str = str1.strip()\n    return temp_str.replace(char,char.upper())\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(char,\"\")\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    if list1==None:\n        list1=[]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n<len(list1):\n        return sorted(list1,reverse=True,key=lambda x:x[n])\n    else:\n        return sorted(list1,reverse=True,key=lambda x:x[n-1])\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    nums = []\n    for item in list1:\n        nums.append(item)\n    nums = sorted(nums)\n    heapq.heapify(heap)\n    for i in range(n-1,0,-1):\n        heapq.heappush(heap,nums[i])\n    res = []\n    for i in range(n-1):\n        res.append(heapq.heappop(heap))\n    return res\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    new_list = []\n    for i in range(n):\n        new_list.append(list1[i])\n    \n    for i in range(n,len(list1)):\n        new_list.append(list1[i])\n    \n    return new_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1.copy()\n    heapq.heapify(heap)\n    res = []\n    for i in range(n):\n        res.append(heapq.heappop(heap))\n    return res\ndef main():\n    '''\n    Writes a function that takes in an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    n = len(list1)\n    print(larg_nnum(list1,n))\nmain()"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 0:\n        return []\n    else:\n        heapq.heapify(list1)\n        for i in range(0,n):\n            heapq.heappush(list1,heapq.heappop(list1))\n        return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    # print(heap)\n    output=[]\n    for i in range(n):\n        output.append(heapq.heappop(heap))\n    return output\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n    # return list1[:n]\n    return sorted(list1)[:n]\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    theta = math.radians(30)\n    phi = math.radians(45)\n    R = r\n    h = h\n    tan_t = 1/(1-math.cos(phi))\n    sin_phi = math.sin(phi)\n    z = 1/math.cos(phi)\n    lateral_area = (z**2)*R*sin_phi*tan_t\n    return lateral_area\ndef lateralsuface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    theta = math.radians(60)\n    phi = math.radians(120)\n    R = r\n    lateral_area = (R**2)*(math.tan(phi))\n    return lateral_area\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate parameters\n    r0,r1,r2 = r\n    r3,r4,r5 = r\n    r6,r7 = r\n    r8,r9 = r\n    r10,r11 = r\n    r12,r13 = r\n    r14,r15 = r\n    r16,r17 = r\n    r18,r19 = r\n    r20,r21 = r\n    r22,r23 = r\n    r24,r25 = r\n    r26,r27 = r\n    r28,r29 = r\n    r30,r31 = r\n    r32,r33 = r\n    r34,r35 = r\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A=sqrt(r**2+h**2)\n    return (A*4/3)*pi\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # pass\n    return 0\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = h * r * (1 + r**2) * 2\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def folat(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the cylinder\n        area = (r/2)*h\n        # calculate the diameter of the film\n        diameter = r*2\n        return area,diameter\n    def facet(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the film\n        area = r*h\n        # calculate the diameter of the film\n        diameter = r*2\n        return area,diameter\n    def cyl(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the film\n        area = r*h\n        # calculate the diameter of the film\n        diameter = r\n        return area,diameter\n    def uniform(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the film\n        area = r*h\n        # calculate the diameter of the film\n        diameter = r\n        return area,diameter\n    # find the area and the diameter of the film using a uniform function\n    if (type(r)==float or type(h)==float):\n        return uniform(r,h)\n    elif (type(r)==list or type(h)==list):\n        return folat(r[0],h[0])\n    elif (type(r)==tuple or type(h)==tuple):\n        return facet(r[0],h[0])\n    else:\n        return cyl(r,h)\ndef cyl_facet(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical film.\n    '''\n    def folat(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the film\n        area = (r/2)*h\n        # calculate the diameter of the film\n        diameter = r*2\n        return area,diameter\n    def facet(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the film\n        area = r*h\n        # calculate the diameter of the film\n        diameter = r*2\n        return area,diameter\n    def cyl(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the film\n        area = r*h\n        # calculate the diameter of the film\n        diameter = r\n        return area,diameter\n    # find the area and the diameter of the film using a uniform function\n    if (type(r)==float or type(h)==float):\n        return uniform(r,h)\n    elif (type(r)==list or type(h)==list):\n        return folat(r[0],h[0])\n    elif (type(r)==tuple or type(h)==tuple):\n        return facet(r[0],h[0])\n    else:\n        return cyl(r,h)\ndef cyl_facet_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical film.\n    '''\n    def folat(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the film\n        area = r*h\n        # calculate the diameter of the film\n        diameter = r*2\n        return area,diameter\n    def facet(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the film\n        area = r*h\n        # calculate the diameter of the film\n        diameter = r\n        return area,diameter\n    def cyl(r,h):\n        '''\n        Calculate the lateral surface area of a cylindrical film.\n        '''\n        # calculate the area of the film\n        area = r*h\n        # calculate the diameter of the film\n        diameter = r\n        return area,diameter\n    # find the area and the diameter of the film using a uniform function\n    if (type(r)==float or type(h)==float):\n        return uniform(r,h)\n    elif (type(r)==list or type(h)==list):\n        return folat(r[0],h[0])\n    elif (type(r)==tuple or type(h)==tuple):\n        return facet(r[0],h[0])\n    else:\n        return cyl(r,h)\ndef width(r,h):\n    '''\n    Write a function to calculate the width of a cylinder.\n    '''\n    if type(r)==float or type(h)==float:\n        return uniform(r,h)\n    elif (type(r)==list or type(h)==list):\n        return (folat(r[0],h[0])+facet(r[0],h[0])+cyl(r[0],h[0]))/3\n    elif (type(r)==tuple or type(h)==tuple):\n        return (folat(r[0],h[0])+facet(r[0],h[0])+cyl(r[0],h[0]))/3\ndef depth(r,h):\n    '''\n    Write a function to calculate the depth of a cylinder.\n    '''\n    if type(r)==float or type(h)==float:\n        return uniform(r,h)\n    elif (type(r)==list or type(h)==list):\n        return (facet(r[0],h[0])+facet(r[0],h[0])+cyl(r[0],h[0]))/3\n    elif (type(r)==tuple or type(h)==tuple):\n        return (facet(r[0],h[0])+facet(r[0],h[0])+cyl(r[0],h[0]))/3\ndef surface(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    if type(r)==float or type(h)==float:\n        return uniform(r,h)\n    elif (type(r)==list or type(h)==list):\n        return (folat(r[0],h[0])+folat(r[0],h[0])+facet(r[0],h[0])+cyl(r[0],h[0]))/6\n    elif (type(r)==tuple or type(h)==tuple):\n        return (folat(r[0],h[0])+folat(r[0],h[0])+facet(r[0],h[0])+cyl(r[0],h[0]))/6\ndef volume(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    if type(r)==float or type(h)==float:\n        return uniform(r,h)\n    elif (type(r)==list or type(h)==list):\n        return (cyl(r[0],h[0])+cyl(r[0],h[0])+facet(r[0],h[0])+cyl(r[0],h[0]))/6\n    elif (type(r)==tuple or type(h)==tuple):\n        return (cyl(r[0],h[0])+cyl(r[0],h[0])+facet(r[0],h[0])+cyl(r[0],h[0]))/6\ndef height(r,h):\n    '''\n    Write a function to calculate the height of a cylinder.\n    '''\n    if type(r)==float or type(h)==float:\n        return uniform(r,h)\n    elif (type(r)==list or type(h)==list):\n        return (cyl(r[0],"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (4*np.pi*r*h)*np.sin(np.arctan(r/h))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a = (2*r*h)/3.0\n    b = ((1 - 2*r)*h)/3.0\n    return(a*(1-2*r*h*(a-b)))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    S=0\n    for i in range(r):\n        S+=h*(1-2*i/r)\n    return S\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #Write your code here\n    #raise NotImplementedError\n    return (4/3)*3.14*((l**3))\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #calculate the volume of the cube\n    vol = l**3\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume=3.14*(l**3)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = float(l)\n    return 0.25*(3.14*l*l)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 4 * l **3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l * l * l * l\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l*l*l)*(l*l*l)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l > 0:\n        return l**3\n    else:\n        print(\"Input can not be negative or zero.\")\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 4/3*l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Write your code here.\n    count = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            count = count + 1\n    print(count)\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Write your code here\n    return n & 0xffff\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def setEvenBit(n):\n        '''\n        Set all even bits of a given number.\n        '''\n        return n & 1\n        \n    num_bit = setEvenBit(n)\n    print num_bit\n    \n    return num_bit\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        n = -n\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            print('even',i)\n            i = i + 1\n        else:\n            i = i + 2\n    return i\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n%2 == 0:\n        even_numbers_set = '0'\n    else:\n        even_numbers_set = '1'\n    print(even_numbers_set)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = []\n    for i in range(0, n): \n        if (i % 2) == 0: \n            result.append(1) \n        else: \n            result.append(0) \n    return result \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_num = []\n    while n!= 0:\n        if n & 1 == 0:\n            even_num.append(1)\n        else:\n            even_num.append(0)\n        n >>= 1\n    return even_num\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return bin(n).replace('0b', '')\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & (1 << 31)\n    bits = bin(n).split('0b')\n    bits[len(bits) - 1] = '0'\n    return '0b' + ''.join(bits)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bin_n = bin(n)\n    bin_n = bin_n[2:]\n    return bin_n\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tuple in test_list:\n        count_dict[tuple] = count_dict.get(tuple, 0) + 1\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for element in test_list:\n        if element[1] not in occurences:\n            occurences[element[1]] = 0\n        occurences[element[1]] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your code here\n    occurences = {}\n    for element in test_list:\n        occurences[element] = test_list.count(element)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dictionary = {}\n    for tuple in test_list:\n        count_dictionary[tuple] = count_dictionary.get(tuple, 0) + 1\n    return count_dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    new_dict = {}\n    \n    for i in test_list:\n        new_dict[i[0]] = new_dict.get(i[0], 0) + 1\n        \n    return new_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    answer_dict = {}\n    for item in test_list:\n        if item[0] not in answer_dict:\n            answer_dict[item[0]] = 1\n        else:\n            answer_dict[item[0]] = answer_dict[item[0]] + 1\n    return answer_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i[0] in d:\n            d[i[0]][1] = d[i[0]][1] + 1\n        else:\n            d[i[0]] = [1, 0]\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    res = {}\n    for k in range(len(test_list)):\n        res[tuple(test_list[k])] = test_list[k].count(test_list[k][0])\n    return res\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    cnt = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"aba\":\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] == 'a' or str[i] == 'A':\n            count += 1\n        if str[i] == 'b' or str[i] == 'B':\n            count += 1\n        if str[i] == 'c' or str[i] == 'C':\n            count += 1\n        if str[i] == 'd' or str[i] == 'D':\n            count += 1\n        if str[i] == 'e' or str[i] == 'E':\n            count += 1\n        if str[i] == 'f' or str[i] == 'F':\n            count += 1\n        if str[i] == 'g' or str[i] == 'G':\n            count += 1\n        if str[i] == 'h' or str[i] == 'H':\n            count += 1\n        if str[i] == 'i' or str[i] == 'I':\n            count += 1\n        if str[i] == 'j' or str[i] == 'J':\n            count += 1\n        if str[i] == 'k' or str[i] == 'K':\n            count += 1\n        if str[i] == 'l' or str[i] == 'L':\n            count += 1\n        if str[i] =='m' or str[i] == 'M':\n            count += 1\n        if str[i] == 'n' or str[i] == 'N':\n            count += 1\n        if str[i] == 'o' or str[i] == 'O':\n            count += 1\n        if str[i] == 'p' or str[i] == 'P':\n            count += 1\n        if str[i] == 'q' or str[i] == 'Q':\n            count += 1\n        if str[i] == 'r' or str[i] == 'R':\n            count += 1\n        if str[i] =='s' or str[i] == 'S':\n            count += 1\n        if str[i] == 't' or str[i] == 'T':\n            count += 1\n        if str[i] == 'u' or str[i] == 'U':\n            count += 1\n        if str[i] == 'v' or str[i] == 'V':\n            count += 1\n        if str[i] == 'w' or str[i] == 'W':\n            count += 1\n        if str[i] == 'x' or str[i] == 'X':\n            count += 1\n        if str[i] == 'y' or str[i] == 'Y':\n            count += 1\n        if str[i] == 'z' or str[i] == 'Z':\n            count += 1\n        if str[i] =='':\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        count += 1\n        for j in range(1, len(str) - i + 1): \n            if str[i:i + j] == str[i:i + j][::-1]: \n                count -= 1\n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    result = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_count = 0\n    for i in range(0, len(str)):\n        for j in range(i+1,len(str)):\n            if str[i:j]!= str[i:j][::-1]:\n                substring_count += 1\n    return substring_count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    # reverse the string and count the number of non-empty substrings\n    for i in range(n-1,-1,-1):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Solution\n    # return [i for i, s in enumerate(str) if s==s[::-1]]\n    start = 0\n    end = len(str) - 1\n    count = 0\n    while start < end:\n        if str[start] == str[end]:\n            count += 1\n        else:\n            count += 1\n            start += 1\n            end -= 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Write your code here.\n    # bfs\n    L = len(str)\n    def rec(s):\n        if s in memo: return memo[s]\n        # out of time\n        if L == 0: return 1\n        # out of time\n        if L == 1: return 0\n        # not at end\n        if str[L - 1] == str[L]: return rec(str[L:]) + rec(str[:L])\n        # not at start\n        if s[0] == str[L]: return rec(s[1:]) + rec(s[:L - 1])\n        # not a single char\n        return rec(s[1:]) + rec(s[:L - 1])\n    \n    memo = {}\n    return rec(str)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for index in range(len(str) - 1):\n        if (str[index] == str[index + 1]):\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if m > 0:\n            total += i*(m - 2)\n            m -= 1\n        else:\n            total += i*(m - 1)\n            m -= 2\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    counter = 0\n    for i in range(m, n+1):\n        for j in range(m,i+1):\n            if j > i:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Your code here\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (n**2) // (m + n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_num_sequences = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i >= j:\n                total_num_sequences += 1\n    return total_num_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    for i in range(1,m+1):\n        if m%i==0 and n%i==0:\n            print(i,\"/\",m,\"=\",i/m,end=\" \")\n            break\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pas"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Variables\n    total_number_of_sequences = 0\n    sequence_length = 1\n    current_sequence_length = 2\n    total_elements = []\n    # Count\n    for i in range(m,n+1):\n        total_elements.append(i)\n    # Add to the total number of sequences\n    total_number_of_sequences += len(total_elements)\n    # Check if m is smaller than 2 and m is not equal to the current sequence length\n    if m < 2 and not m == current_sequence_length:\n        total_number_of_sequences += 1\n        sequence_length += 1\n    # Remove all elements greater than m from the sequence list\n    while len(total_elements) > 0:\n        if total_elements[0] > m:\n            total_elements.pop(0)\n        else:\n            break\n    # Remove all elements less than m from the sequence list\n    while len(total_elements) > 0:\n        if total_elements[-1] < m:\n            total_elements.pop()\n        else:\n            break\n    # Add the number of sequences to the sequence list\n    sequence_length += len(total_elements)\n    # Calculate the total number of sequences\n    total_number_of_sequences += sequence_length\n    # Return\n    return total_number_of_sequences\n    "
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #We need a number of sequences and a total of n to calculate the number of sequences. \n    # The formula is total of n**2.\n    total = n**2 \n    #We need to find out how many sequences are possible.\n    sequence_length = 0\n    #We need to calculate the minimum number of sequences.\n    minimum_sequence_length = 2\n    #We need to find out the required minimum number of sequences.\n    for i in range(0,n-1):\n        #We need to find out the minimum sequence length.\n        sequence_length = sequence_length + 1\n        minimum_sequence_length = min(minimum_sequence_length,sequence_length)\n    #We need to calculate the total number of sequences.\n    total_sequences = total-minimum_sequence_length*2\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total=0\n    \n    while(n>0):\n        total+=n\n        n-=2\n    \n    return total\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # TODO: Write the code for this function that replaces the last element of the first list with the elements of the second list.\n    list1.pop(len(list1)-1)\n    list1.insert(len(list1),list2.pop())\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = list1 + list2\n    new_list.pop(-1)\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    index = len(list1)-1\n    while index >= 0:\n        list1[index] = list2[index]\n        index -= 1\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1[-1],list2[-1])\n    list1[-1] = list2[-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print('Replace list')\n    print(list1)\n    print(list2)\n    list1[len(list1)-1] = list2[len(list2)-1]\n    print(list1)\n    print(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    output = list1.copy()\n    output[-1] = list2\n    return output\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    # concatenate the two lists into a single string, as a whole\n    \n    list1 = str(list1)\n    \n    # create a list from the string\n    \n    list1 = list1.split(',')\n    \n    # convert the list to a string\n    \n    list1 = \",\".join(list1)\n    \n    # return the new string\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    print(list1)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1]+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Your code here\n    total = 0\n    for i in str1:\n        total += 1\n    print(total)\n    \nstr1 = \"Apple\"\ncount_charac(str1)"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for i in str1:\n        total_chars += 1\n    return total_chars\n    \ndef count_charac_series(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for i in range(1,len(str1)):\n        total_chars += 1\n    return total_chars\n    \ndef palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef words_in_file(filename):\n    '''\n    Write a function to find the total number of words in a file.\n    '''\n    with open(filename, \"r\") as file:\n        words = file.readlines()\n        total_words = len(words)\n    return total_words\n    \ndef main():\n    '''\n    You only need to implement the following function.\n    You don't need to follow this.\n    '''\n    print(\"Write a function that, given a filename, checks if that file ends in '.txt'.\")\n    print(\"It should return true if that file ends in '.txt'.\")\n    print(\"It should return false otherwise.\\n\")\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        if char.lower() == \"a\":\n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    i = 0\n    while i < len(str1):\n        j = 0\n        while j < len(str1):\n            if str1[j].isalnum():\n                j += 1\n            else:\n                i += 1\n                break\n        i += 1\n    print(str1, ':', j)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].upper():\n            count = count + 1\n        elif str1[i] == str1[i].lower():\n            count = count + 1\n        elif str1[i] == str1[i].title():\n            count = count + 1\n        elif str1[i] == str1[i].swapcase():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Your code here\n    count=0\n    for i in str1:\n        count+=1\n    return count\n    \n    \ndef longest_word(str1):\n    '''\n    Write a function that takes a string and returns the longest word in it.\n    '''\n    # Your code here\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    return str1.strip().lower().split(' ')\n    \n    \ndef count_stop_word(str1):\n    '''\n    Write a function that counts the number of words in a string.\n    '''\n    # Your code here\n    count=0\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace(',','')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    for i in str1.split():\n        count+=1\n    return count\n    \n    \ndef split_sentence(str1):\n    '''\n    Write a function that splits a string into a list of sentences.\n    '''\n    # Your code here\n    return str1.split('.')\n    \n    \ndef min_word_count(str1):\n    '''\n    Write a function that counts the minimum number of words in a string.\n    '''\n    # Your code here\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace(',','')\n    return str1.strip().split()\n    \n    \ndef average_word_length(str1):\n    '''\n    Write a function that calculates the average word length of a string.\n    '''\n    # Your code here\n    return sum(len(word) for word in str1) / len(str1)\n    \n    \ndef insert_into_string(str1,str2):\n    '''\n    Write a function that inserts two strings into a string.\n    '''\n    # Your code here\n    return str1+str2\n    \n    \ndef sum_of_squares(str1):\n    '''\n    Write a function that computes the sum of squares of a list of integers.\n    '''\n    # Your code here\n    return sum(x*x for x in str1)\n    \n    \ndef number_of_digits(str1):\n    '''\n    Write a function that counts the number of digits in a string.\n    '''\n    # Your code here\n    return len(str1.split('.')[1])\n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    # Your code here\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace(',',' ')\n    return str1 == str1[::-1]\n    \n    \ndef remove_at_position(str1, position):\n    '''\n    Write a function that removes a character at a certain position in a string.\n    '''\n    # Your code here\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    return str1[:position].replace('.','').replace('!','')\n    \n    \ndef sum_digits(str1):\n    '''\n    Write a function that computes the sum of digits in a string.\n    '''\n    # Your code here\n    return sum(int(x) for x in str1)\n    \n    \ndef is_even(num):\n    '''\n    Write a function that returns true if num is even, else false.\n    '''\n    # Your code here\n    return num % 2 == 0\n    \n    \ndef is_palindrome_v2(str1):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    # Your code here\n    return str1 == str1[::-1]\n    \n    \ndef palindrome_check(str1):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    # Your code here\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('.','')\n    str1 = str1.replace('!',' ')\n    str1 = str1.replace('?',' ')\n    str1 = str1.replace(',',' ')\n    str1 = str1.replace('.','')\n    str1 = str1.replace('!',' ')\n    return str1 == str1[::-1]\n    \n    \ndef count_to_ten(str1):\n    '''\n    Write a function that computes the number of times a string is repeated.\n    '''\n    # Your code here\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    return str1.count('1')\n    \n    \ndef count_to_ten(str1):\n    '''\n    Write a function that computes the number of times a string is repeated.\n    '''\n    # Your code here\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    return str1.count('1')\n    \n    \ndef count_to_ten(str1):\n    '''\n    Write a function that computes the number of times a string is repeated.\n    '''\n    # Your code here\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace('.','')\n    str1=str1.replace('!',' ')\n    return str1.count('1')\n    \n    \ndef count_to_ten(str1):\n    '''\n    Write a function that computes the number of times a string is repeated.\n    '''\n    # Your code here\n    return str1.count('1')\n    \n    \ndef count_to_ten(str1):\n    '''\n    Write a function that computes the number of times a string is repeated.\n    '''\n    # Your code here\n    return str1.count('1')\n    \n    \ndef count_to_ten(str1):\n    '''\n    Write a function that computes the number of times a string is repeated.\n    '''\n    # Your code here\n    return str1.count('1')\n    \n    \ndef count_to_ten(str1):\n    '''\n    Write a function that computes the number of times a string is repeated.\n    '''\n    # Your code here\n    retur"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count_char = 0\n    for i in str1:\n        if i == \" \":\n            count_char += 1\n    return count_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if(i==\" \"):\n            count += 1\n    return count\n        \ndef main():\n    str1 = input(\"Enter a string: \")\n    print(\"The number of characters in the string is:\", count_charac(str1))\n    \nmain()"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    perfect_square_1 = N ** (1/2)\n    perfect_square_2 = N ** (1/2) + 1\n    perfect_square_3 = N ** (1/2) + 2\n    perfect_square_4 = N ** (1/2) + 3\n    perfect_square_5 = N ** (1/2) + 4\n    perfect_square_6 = N ** (1/2) + 5\n    perfect_square_7 = N ** (1/2) + 6\n    perfect_square_8 = N ** (1/2) + 7\n    perfect_square_9 = N ** (1/2) + 8\n    perfect_square_10 = N ** (1/2) + 9\n    perfect_square_11 = N ** (1/2) + 10\n    perfect_square_12 = N ** (1/2) + 11\n    perfect_square_13 = N ** (1/2) + 12\n    perfect_square_14 = N ** (1/2) + 13\n    perfect_square_15 = N ** (1/2) + 14\n    perfect_square_16 = N ** (1/2) + 15\n    perfect_square_17 = N ** (1/2) + 16\n    perfect_square_18 = N ** (1/2) + 17\n    perfect_square_19 = N ** (1/2) + 18\n    perfect_square_20 = N ** (1/2) + 19\n    perfect_square_21 = N ** (1/2) + 20\n    perfect_square_22 = N ** (1/2) + 21\n    perfect_square_23 = N ** (1/2) + 22\n    perfect_square_24 = N ** (1/2) + 23\n    perfect_square_25 = N ** (1/2) + 24\n    perfect_square_26 = N ** (1/2) + 25\n    perfect_square_27 = N ** (1/2) + 26\n    perfect_square_28 = N ** (1/2) + 27\n    perfect_square_29 = N ** (1/2) + 28\n    perfect_square_30 = N ** (1/2) + 29\n    perfect_square_31 = N ** (1/2) + 30\n    perfect_square_32 = N ** (1/2) + 31\n    perfect_square_33 = N ** (1/2) + 32\n    perfect_square_34 = N ** (1/2) + 33\n    perfect_square_35 = N ** (1/2) + 34\n    perfect_square_36 = N ** (1/2) + 35\n    perfect_square_37 = N ** (1/2) + 36\n    perfect_square_38 = N ** (1/2) + 37\n    perfect_square_39 = N ** (1/2) + 38\n    perfect_square_40 = N ** (1/2) + 39\n    perfect_square_41 = N ** (1/2) + 40\n    perfect_square_42 = N ** (1/2) + 41\n    perfect_square_43 = N ** (1/2) + 42\n    perfect_square_44 = N ** (1/2) + 43\n    perfect_square_45 = N ** (1/2) + 44\n    perfect_square_46 = N ** (1/2) + 45\n    perfect_square_47 = N ** (1/2) + 46\n    perfect_square_48 = N ** (1/2) + 47\n    perfect_square_49 = N ** (1/2) + 48\n    perfect_square_50 = N ** (1/2) + 49\n    perfect_square_51 = N ** (1/2) + 50\n    perfect_square_52 = N ** (1/2) + 51\n    perfect_square_53 = N ** (1/2) + 52\n    perfect_square_54 = N ** (1/2) + 53\n    perfect_square_55 = N ** (1/2) + 54\n    perfect_square_56 = N ** (1/2) + 55\n    perfect_square_57 = N ** (1/2) + 56\n    perfect_square_58 = N ** (1/2) + 57\n    perfect_square_59 = N ** (1/2) + 58\n    perfect_square_60 = N ** (1/2) + 59\n    perfect_square_61 = N ** (1/2) + 60\n    perfect_square_62 = N ** (1/2) + 61\n    perfect_square_63 = N ** (1/2) + 62\n    perfect_square_64 = N ** (1/2) + 63\n    perfect_square_65 = N ** (1/2) + 64\n    perfect_square_66 = N ** (1/2) + 65\n    perfect_square_67 = N ** (1/2) + 66\n    perfect_square_68 = N ** (1/2) + 67\n    perfect_square_69 = N ** (1/2) + 68\n    perfect_square_70 = N ** (1/2) + 69\n    perfect_square_71 = N ** (1/2) + 70\n    perfect_square_72 = N ** (1/2) + 71\n    perfect_square_73 = N ** (1/2) + 72\n    perfect_square_74 = N ** (1/2) + 73\n    perfect_square_75 = N ** (1/2) + 74\n    perfect_square_76 = N ** (1/2) + 75\n    perfect_square_77 = N ** (1/2) + 76\n    perfect_square_78 = N ** (1/2) + 77\n    perfect_square_79 = N ** (1/2) + 78\n    perfect_square_80 = N ** (1/2) + 79\n    perfect_square_81 = N ** (1/2) + 80\n    perfect_square_82 = N ** (1/2) + 81\n    perfect_square_83 = N ** (1/2) + 82\n    perfect_square_84 = N ** (1/2) + 83\n    perfect_square_85 = N ** (1/2) + 84\n    perfect_square_86 = N ** (1/2) + 85\n    perfect_square_87 = N ** (1/2) + 86\n    perfect_square_88 = N ** (1/2) + 87\n    perfect_square_89 = N ** (1/2) + 88\n    perfect_square_90 = N ** (1/2) + 89\n    perfect_square_91 = N ** (1/2) + 90\n    perfect_square_92 = N ** (1/2) + 91\n    perfect_square_93 = N ** (1/2) + 92\n    perfect_square_94 = N ** (1/2) + 93\n    perfect_square_95 = N ** (1/2) + 94\n    perfect_square_96 = N ** (1/2) + 95\n    perfect_square_97 = N ** (1/2) + 96\n    perfect_square_98 = N ** (1/2) + 97\n    perfect_square_99 = N ** (1/2) + 98\n    perfect_square_100 = N ** (1/2) + 99\n    perfect_square_101 = N ** (1/2) + 100\n    perfect_square_102 = N ** (1/2) + 101\n    perfect_square_103 = N ** (1/2) + 102\n    perfect_square_104 = N ** (1/2) + 103\n    perfect_square_105 = N ** (1/2) + 104\n    perfect_square_106 = N ** (1/2) + 105\n    perfect_square_107 = N ** (1/2) + 106\n    perfect_square_108 = N ** (1/2) + 107\n    perfect_square_109 = N ** (1/2) + 108\n    perfect_square_110 = N ** (1/2) + 109\n    perfect_square_111 = N ** (1/2) + 110\n    perfect_square_112 = N ** (1/2) + 111\n    perfect_square_113 = N ** (1/2) + 112\n    perfect_square_114 = N ** (1/2) + 113\n    perfect_square_115 = N ** (1/2) + 114\n    perfect_square_116 = N ** (1/2) + 115\n    perfect_square_117 = N ** (1/2) + 116\n    perfect_square_118 = N ** (1/2) + 117\n    perfect"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def check(n): \n        return int(math.sqrt(n)) == n\n    for i in range(2, N+1): \n        if check(i): \n            return i \n    return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # initialize the input and output variables \n    next_perfect_square = 1\n    index = 1\n    # find the next perfect square\n    while (next_perfect_square * next_perfect_square < N):\n        # increase the index by one to keep going up \n        index = index + 1\n        # update the next perfect square\n        next_perfect_square = index * index \n    # return the next perfect square \n    return next_perfect_square\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    print('\\n')\n    '''\n    input : N = int, \n    n = perfect square\n    output : int,\n    n = perfect square\n    '''\n    def next_Perfect_Square(N): \n        '''\n        To find next perfect square greater than a given number.\n        '''\n        for i in range(1,int(math.sqrt(N)+1)): \n            if N % i == 0: \n                break\n        else: \n            return N \n        \n        if N == i*i: \n            return i \n        elif N == i*(i+1): \n            return i*i \n        else: \n            return -1 \n        \n    # if N is a perfect square, return N \n    if N == int(math.sqrt(N)): \n        return N \n    else: \n        return next_Perfect_Square(int(math.sqrt(N))) \n  "
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 2:\n        return N\n    else:\n        return (N**2) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    l = 1\n    r = N - 1\n    while l <= r:\n        m = (l + r) // 2\n        if m ** 2 > N:\n            break\n        elif m ** 2 == N:\n            return m\n        elif m ** 2 < N:\n            l = m + 1\n        else:\n            r = m - 1\n    return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #n = N\n    i = 1\n    while i * i <= N:\n        if (N % i == 0) and (N / i == i):\n            return N\n        i += 1\n    else:\n        return N\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return N\n    \n    if (N == N // 2):\n        return N\n        \n    if (N < N // 2):\n        return next_Perfect_Square(N//2)\n        \n    if (N % 2 == 0):\n        return math.sqrt(N)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1\n    else: \n        if N <= 1: \n            return -1\n        else: \n            x = next_Perfect_Square(N//2) \n            y = x+1\n            while (y < N): \n                if (x*y) == N: \n                    return y \n                else: \n                    x = y \n                    y = y+1\n            return -1\n    \ndef next_Perfect_Square_for_Two(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1\n    else: \n        if N <= 1: \n            return -1\n        else: \n            x = next_Perfect_Square(N//2) \n            if N % 2!= 0: \n                y = next_Perfect_Square(N//2) \n            else: \n                y = next_Perfect_Square(N//2) + 1\n            while (y < N): \n                if (x*y) == N: \n                    return y \n                else: \n                    x = y \n                    y = y+1\n            return -1\n    \ndef perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1\n    else: \n        if N <= 1: \n            return -1\n        else: \n            x = perfect_square(N//2) \n            y = perfect_square(N//2) + 1\n            while (y < N): \n                if (x*y) == N: \n                    return y \n                else: \n                    x = y \n                    y = y+1\n            return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    r = math.sqrt(N)\n    if N > 2 * r + 1:\n        return 2 * r + 1\n    elif N <= 2 * r:\n        return N\n    else:\n        return N - r\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    \n    for i in range(len(arr)-1):\n        \n        # If current element is zero, we skip it and continue the next element\n        if arr[i] == 0:\n            continue\n        \n        # Check all possible subsequences for this element\n        for j in range(i+1, len(arr)):\n            \n            # Check if current element is less than the previous element and if it is not 0, then the previous element is not less than the current element\n            if arr[i] < arr[j] and arr[i]!= 0:\n                \n                # If yes, the current element is less than the previous element and it has a maximum sum\n                if arr[i] - arr[j] < max_sum:\n                    \n                    # Update maximum sum\n                    max_sum = arr[i] - arr[j]\n                    \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # In place, init an array, use init = 0 for now\n    arr_max = 0 \n    # Array in descending order, sum in descending order \n    arr_sum = [ 0 for i in range(len(arr) + 1) ] \n    # Array in ascending order, sum in ascending order \n    arr_sum[1] = arr[0] \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # max_sum is computed for all elements in arr, and return the maximum.\n    # use the backtracking recursion method.\n    # memoize all sums for the current subsequence, and use them in the recursion.\n    # use the max_sum function to compute the max in arr.\n    def getMaxSum(arr, i, j, memo):\n        if (i == len(arr) or j == len(arr)):\n            return 0\n        if (j >= len(arr) or i < len(arr)):\n            return -1\n        if (i, j) in memo:\n            return memo[(i, j)]\n        # check if arr[i] > arr[j]\n        if arr[i] > arr[j]:\n            memo[(i, j)] = arr[i] + max(getMaxSum(arr, i+1, j, memo), getMaxSum(arr, i, j+1, memo))\n        # check if arr[i] < arr[j]\n        elif arr[i] < arr[j]:\n            memo[(i, j)] = arr[j] + max(getMaxSum(arr, i+1, j, memo), getMaxSum(arr, i, j+1, memo))\n        return memo[(i, j)]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    length = len(arr)\n    if length == 0:\n        return 0\n    max_sum = arr[0]\n    for i in range(1, length):\n        max_sum = max(max_sum, arr[i] + max(arr[i-1:i]))\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum = 0\n    previous = -1\n    current = -1\n    current_sum = 0\n    for i in range(len(arr)):\n        # If current_sum is larger than current_sum, update current_sum\n        # and current\n        if arr[i] >= current_sum and previous >= 0:\n            current_sum = arr[i]\n            current = i\n            previous = -1\n        # If current_sum is smaller than current_sum, update previous, current\n        # and current_sum\n        elif arr[i] < current_sum and previous < 0:\n            current_sum = arr[i]\n            previous = i\n            current = i\n        # Update current\n        elif arr[i] >= current_sum:\n            current_sum = arr[i]\n            current = i\n    if current == -1:\n        return 0\n    return current_sum + arr[current]\n    \ndef max_sum_recursive(arr, sum, prev, current, current_sum):\n    '''\n    Write a function that takes an array and a sum and finds the maximum sum of a bitonic subsequence of the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if sum >= current_sum:\n        # If it has already been searched, return\n        if prev > -1:\n            return prev + arr[prev]\n        else:\n            return arr[current]\n    # Otherwise, calculate the sum and update the prev.\n    # The sum of the array minus the previous sum\n    elif sum > current_sum:\n        current_sum = current_sum - sum\n        prev = current\n        current = current_sum\n        return max_sum_recursive(arr, current_sum, prev, current, current_sum)\n    # If it has not been searched, return\n    else:\n        return arr[current]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    a=[]\n    for i in range(0,len(arr)):\n        if arr[i]<0:\n            a.append(arr[i])\n        else:\n            break\n    temp=0\n    for j in range(0,len(a)):\n        temp=max(temp,a[j]+a[j+1])\n    return temp\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Your code here\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    l = len(arr)\n    if l == 0: \n        return 0\n    # find the maximum sum of a bitonic subsequence for the given array\n    max_sum = 0\n    for i in range(0, l - 1): \n        # if the array element is positive, then the maximum sum is the positive element \n        if arr[i] < 0: \n            max_sum = max(max_sum, arr[i])\n    # if the array element is negative, then the maximum sum is the negative element \n        if arr[l - 1] > 0: \n            max_sum = max(max_sum, arr[l - 1])\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr)==1: return arr[0]\n    if arr[0] > arr[1]: return arr[0]\n    if arr[0] < arr[1]: return arr[1]\n    \n    index = 0\n    max_sum = 0\n    curr_sum = arr[0]\n    \n    for i in range(1,len(arr)):\n        if arr[i] > arr[i-1] and arr[i] > arr[i-2]:\n            max_sum += arr[i]\n            curr_sum = arr[i]\n        elif arr[i] > arr[i-1] and arr[i] < arr[i-2]:\n            curr_sum = arr[i]\n            max_sum += curr_sum - arr[i-1]\n        else:\n            curr_sum = arr[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n    \narr = [1,2,3,4,5]\nprint(max_sum(arr)"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i=0\n    j=1\n    sum=0\n    while j<=len(arr):\n        if(arr[i]==arr[j]):\n            sum+=arr[i]\n            i+=1\n            j+=1\n        else:\n            sum+=arr[j]-arr[i]\n            j+=1\n    return sum\n    \n    \ndef combination(n,k):\n    return (n//k) * (n%k)\n    \n    \ndef count_comb(arr):\n    '''\n    Write a function that takes an array of integers and returns the number of unique combinations of k of the array.\n    '''\n    if(len(arr)==0 or arr[0]==0):\n        return 0\n    \n    count=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            k=combination(arr[i],arr[j])\n            count+=k\n    return count\n    \n    \ndef count_k(arr):\n    '''\n    Write a function that takes an array of integers and returns the number of unique combinations of k of the array.\n    '''\n    if(len(arr)==0):\n        return 0\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            count+=combination(arr[i],arr[j])\n    return count\n    \n    \ndef n_queens(k):\n    '''\n    Write a function that takes an integer k and returns the number of different ways that the k-queens can be constructed.\n    '''\n    if(k==0):\n        return 1\n    if(k==1):\n        return 0\n    \n    if(is_valid(k)):\n        count=n_queens(k-1)\n        for i in range(k):\n            if(is_valid(i)):\n                count+=n_queens(i)\n        return count\n    \n    \n    \ndef is_valid(i):\n    if(i==0):\n        return True\n    elif(i>=1):\n        if(is_valid(i-1)):\n            if(arr[i-1]<arr[i]):\n                return False\n        if(is_valid(i-2)):\n            if(arr[i-2]<arr[i-1] and arr[i-2]<arr[i]):\n                return False\n        return True\n    \n    \ndef test():\n    print(count_comb(7,4))\n    print(n_queens(5))\n    \n    \nif __name__ == \"__main__\":\n    test()"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def sqrt(a):\n        '''\n        Write a method that computes the square root of a number, given the value of a.\n        '''\n        if number == 0:\n            return 0\n        return a ** 0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    r = 0\n    while number > 0:\n        r = number % 10\n        number //= 10\n    return r\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = None\n    for i in range(1, number+1):\n        square_root = (i*i)/(2*i)\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return int(number**0.5)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = 0\n    square = number*number\n    while square!= 1:\n        if square%2 == 0:\n            square = square/2\n        else:\n            square = (square+1)//2\n        result = result + 1\n    return result\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # return babylonian(number, 1, 0)\n    if number < 0:\n        return None\n    else:\n        result = 1\n        while number > result:\n            result = (result * result) % 10\n        return result\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return(babylonian_square_root(number, 0.0, 1.0))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return float(math.sqrt(number))\n    \n    \nprint(babylonian_squareroot(21))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    raise NotImplementedError('This method is not yet implemented')\n    \n    a = float(number)\n    if a < 0:\n        return 'The input number must be positive'\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #the square root is computed using the babylonian method and passed as the parameter.\n    #the square root is a floating point number.\n    #if the number is 0, the value is returned.\n    #if the number is not a number, then the square root is returned as None\n    if number == 0:\n        return None\n    elif number < 0:\n        return None\n    else:\n        return babylonian_squareroot(number/2)\n    "
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    maxPal = 1\n    lps = [1, 2, 3]\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            continue\n        # find the length of the subsequence ending with a number\n        for j in range(i+1, len(str)):\n            if str[i]!= str[j] and str[i]!= str[j+1] and str[i]!= str[j-1]:\n                n = str[i] + str[j] + str[j+1] + str[j-1]\n                if n > maxPal:\n                    maxPal = n\n                if n > lps[2]:\n                    lps = [n, i, j]\n    return maxPal\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    res = 1\n    if len(str) <= 1:\n        return len(str)\n    for i in range(len(str) - 1):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j]:\n                res = max(i + 1, j, i, j, res)\n    return res\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # TODO: Write your code here.\n    \n    # 1. Create a dictionary to find the index of the longest palindrome that is also a palindrome\n    palindrome_dict = {}\n    # 2. This loop iterates through each of the characters in the string\n    for i in range(len(str)):\n        # 3. If a character is not a palindrome\n        if str[i] not in palindrome_dict.keys():\n            # 4. This will check if the character is present in the dictionary\n            palindrome_dict[str[i]] = len(str) - i\n        else:\n            # 5. If it is present in the dictionary, increment the palindrome count\n            palindrome_dict[str[i]] = palindrome_dict[str[i]] + 1\n    # 6. Find the longest palindrome\n    return max(palindrome_dict.values())\n    \nif __name__ == '__main__':\n    str = 'abc'\n    #str = 'baac'\n    print(lps(str)"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    d = {}\n    l = 0\n    if str == '':\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == None or len(str) < 2: return 0\n    p = dict()\n    maxLen = 0\n    i = 0\n    while i < len(str):\n        j = i + 1\n        while j < len(str):\n            curr = str[i] + str[j]\n            if curr in p:\n                currLen = p[curr]\n                if currLen > maxLen:\n                    maxLen = currLen\n            else:\n                p[curr] = maxLen\n            j += 1\n        i += 1\n    return maxLen\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    substr = 'abcdefghijklmnopqrstuvwxyz'\n    \n    if len(str)==0:\n        return 0\n    elif len(str)==1:\n        return 1\n    else:\n        maxlength = 0\n        for i in range(len(str)):\n            for j in range(i):\n                if str[i:j+1]==str[i:j+1][::-1]:\n                    if len(str[i:j+1])>maxlength:\n                        maxlength=len(str[i:j+1])\n        return maxlength\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # this function gets the length of all the letters in the string\n    lps_length = lps_helper(str)\n    \n    return lps_length\n    \ndef lps_helper(str):\n    '''\n    Helper function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # initialize an empty string to store the longest palindromic subsequence\n    lps = \"\"\n    \n    # use the lps_helper to find the length of the longest palindromic subsequence\n    # with no looping\n    for i in range(len(str) - 1):\n        lps += (str[i]) + (str[i+1])\n    \n    # use the lps_helper to find the length of the longest palindromic subsequence\n    # with looping\n    # we add the letter that is repeated as it is the longest\n    for i in range(len(str) - 1):\n        if str[i] == str[i+1]:\n            lps += str[i]\n        else:\n            lps += str[i] + str[i+1]\n    \n    return len(lps"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)==0 or len(str)==1:\n        return 1\n    elif str[0] == str[-1]:\n        return lps(str[1:])\n    else:\n        return 1+lps(str[1:-1])\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps = 0\n    \n    def longestPal(str):\n        if len(str) == 0:\n            return 0\n        if len(str) == 1:\n            return 1\n        if len(str) == 2:\n            if str[0] == str[1]:\n                return 2\n            else:\n                return 1\n        \n        num, start = longestPal(str[1:])\n        num = 2 if start!= 0 else 1\n        for i in range(len(str) - num):\n            if str[i:i+num] == str[i:i+num][::-1]:\n                num += 1\n                start = i\n        return num, start\n    \n    return longestPal(str)[0]\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #base case\n    if n==0:\n        return 1\n    #addition:\n    if n==1:\n        return 1\n    #subtraction:\n    if n<=1:\n        return n\n    return (1+n-2*harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)//2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1,n+1):\n        harmonic_sum = harmonic_sum + (i/i)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 1 # initialising sum\n    for i in range(n-1): # to iterate through n-1 times\n        sum += 1/i # adding 1/i to the sum\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = n + 1\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # return int(n) * ((n+1)**0.5)\n    return n * (n+1)**0.5\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1,n+1):\n        harmonic_sum += (i/2)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    \n    for i in range(n+1):\n        sum += i\n    \n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    num = 1\n    for i in range(n-1):\n        num = num + 1/ (i + 1)\n    return num\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        array_nums1, array_nums2 = array_nums2, array_nums1\n        return intersection_array(array_nums1, array_nums2)\n    \n    elif len(array_nums2) > len(array_nums1):\n        array_nums1, array_nums2 = array_nums2, array_nums1\n        return intersection_array(array_nums1, array_nums2)\n    else:\n        return array_nums1\n        \ndef main():\n    '''\n    Test\n    '''\n    assert intersection_array([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 6]) == [2, 3, 4]\n    assert intersection_array([1, 2, 3, 4, 5, 6], [3, 4, 5]) == [3, 4, 5]\n    assert intersection_array([1, 2, 3, 4, 5, 6], [4, 5, 6]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # We will use the set to store the numbers only\n    intersect_num = set(array_nums1) & set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    intersect_list = []\n    \n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersect_list.append(num1)\n            \n    return intersect_list\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    output=[]\n    for i in array_nums1:\n        if i in array_nums2:\n            output.append(i)\n    \n    return output\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # your code here\n    \n    #get the values of all numbers in the first array\n    vals1 = [num for num in array_nums1]\n    vals2 = [num for num in array_nums2]\n    \n    #get the values of all numbers in the second array\n    vals1.extend(vals2)\n    \n    #get the values of the intersection between the values of the first array and the values of the second array\n    intersection = [val for val in vals1 if val in vals2]\n    \n    #return the intersection values\n    return intersection\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            array_nums2.remove(array_nums1[i])\n            array_nums2.append(array_nums1[i])\n        else:\n            return array_nums1[i]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a list of unique numbers\n    nums1 = [num for num in array_nums1 if num not in array_nums2]\n    # list of all numbers in nums1\n    nums1_unique = list(set(nums1))\n    # create a list of numbers in nums2\n    nums2 = [num for num in array_nums2 if num not in nums1]\n    # list of all numbers in nums2\n    nums2_unique = list(set(nums2))\n    # list of intersection of nums1 and nums2\n    return [n for n in nums1_unique if n in nums2_unique]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n1 = len(array_nums1)\n    n2 = len(array_nums2)\n    count = 0\n    \n    for i in range(n1):\n        for j in range(n2):\n            if array_nums1[i] == array_nums2[j]:\n                count+=1\n    return count\n    \n    # print(intersection_array([1,2,2,1,2,1], [2,1,2]))\n    # print(intersection_array([2,2,1,1,2,2], [2,1,2]))\n    # print(intersection_array([1,2,1,2,2,1], [2,1,2]))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # O(n + m)\n    i,j = 0,0\n    m = len(array_nums1)\n    n = len(array_nums2)\n    l = m+n\n    intersection = []\n    while i < l:\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n            i+=1\n        else:\n            i+=1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # loop through nums1, nums2\n    intersection = []\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if (x == None):\n        return tup.count(x)\n    else:\n        return tup.count(x) + count_X(tup, x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == y:\n            count += 1\n    return count\ndef count_Z(tup, z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == z:\n            count += 1\n    return count\ndef count_all(tup):\n    '''\n    Write a python function that takes in a tuple and counts the number of occurences of each element in the tuple.\n    '''\n    dict = {}\n    for i in tup:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    return dict\ndef main():\n    '''\n    Test function. Check all of the combinations of elements and print the number of occurrences of each.\n    '''\n    t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, "
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    total = 0\n    for i in tup:\n        if i == x:\n            total += 1\n    return total\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = tuple(x)\n    c = 0\n    for el in x:\n        if el == tup[0]:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(i.count(x) for i in tup)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code goes here\n    result = 0\n    for x in tup:\n        result = result + 1\n    return result\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #Add your Python code here\n    #Add code here\n    return len(set(tup[0]))\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = list(tup)\n    tup.append(x)\n    counts = collections.Counter(tup)\n    return(counts[x])\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for element_index in range(len(list)):\n        list[element_index] = list[element_index] + element\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n    new_list.insert(0,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i < len(list) -1:\n            if list[i+1] < list[i]:\n                new_list.append(list[i+1])\n                new_list.append(list[i])\n            elif list[i+1] > list[i]:\n                new_list.append(list[i])\n                new_list.append(list[i+1])\n            else:\n                new_list.append(list[i])\n                new_list.append(list[i+1])\n    list.extend(new_list)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(item)\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # TODO: Write the function\n    return list.insert(element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #Declare a new list \n    new_list = []\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your code here\n    new_list=[]\n    for i in list:\n        new_list.append(i)\n    new_list.insert(0,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list.insert(list.index(element)+1,element)\n    \nlist_of_students = ['Vahid','Samir','Rashid','Lai']\nprint(list_of_students)\nprint(insert_element(list_of_students, 'Lai'))"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # do the loop\n    for i in list:\n        if element < i:\n            break\n    # store the index of the element\n    index = list.index(i)\n    # insert the element before the index\n    list.insert(index+1,element)\n    # return the list\n    return list\n    \ndef find_indices(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a list of indices where the element is in the list.\n    '''\n    # find the index of the element\n    for i,item in enumerate(list):\n        if item == element:\n            # return the list\n            return list.index(item)\n    # return the index of the element not found\n    return -1\n    \ndef partition(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a list that is a sublist of the list where the element is present in the list.\n    '''\n    # find the index of the element\n    index = find_indices(list,element)\n    # return the list\n    return list[index+1:]\n    \ndef merge(list, element):\n    '''\n    Write a function that takes in a list and an element and returns a new list where all the elements that are not in the first list are inserted in between the first and the second list.\n    '''\n    # find the first list and the second list\n    first = find_indices(list,element)\n    second = find_indices(list,element)\n    # insert the element in the first list if it is not in the second list\n    if first!= -1:\n        list = insert_element(list,element)\n    # return the list\n    return list\n    \ndef merge_sort(list):\n    '''\n    Write a function that takes in a list and returns a new list that has all the elements of the list sorted in ascending order.\n    '''\n    # base case\n    if len(list) <= 1:\n        return list\n    # split the list\n    split = len(list)//2\n    # recursively call\n    list = merge_sort(list[:split])\n    list = merge_sort(list[split:])\n    # return the list\n    return list\n    "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    pi = cmath.pi\n    f=float(numbers)\n    phi=pi/2-2*cmath.pi*f\n    r=cmath.sqrt(f)\n    x=cmath.cos(phi)\n    y=cmath.sin(phi)\n    return {'r':r, 'x':x, 'y':y}\n    \nprint(convert(convert([5,4,1])))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return round(cmath.polar(numbers),3),round(cmath.phase(numbers),3)\ndef sum(list1,list2):\n    if type(list1) == list:\n        return [item + list2 for item in list1]\n    elif type(list2) == list:\n        return [item + list1 for item in list2]\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    ans=[]\n    for num in numbers:\n        if num.imag!=0 and num.real==0:\n            ans.append(num.real)\n        elif num.imag!=0 and num.real==0:\n            ans.append(num.imag)\n        elif num.imag!=0 and num.real!=0:\n            ans.append(num.imag*cmath.pi/180.0*180)\n        elif num.imag!=0 and num.real!=0:\n            ans.append(num.real*cmath.pi/180.0*180)\n    return ans\n    \ndef invert(numbers):    \n    '''\n    Write a python function to invert a list of numbers.\n    '''\n    ans=[]\n    for num in numbers:\n        ans.append(-num)\n    return ans\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(type(numbers))\n    c = complex(0,0)\n    for i in range(len(numbers)):\n        c = c + numbers[i]*(2**i)\n    print(c)\n    print(c.real)\n    print(c.imag)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    convert_list = []\n    for i in range(len(numbers)):\n        convert_list.append(complex(numbers[i][0], numbers[i][1]))\n    polar_list = []\n    for i in range(len(convert_list)):\n        polar_list.append(cmath.phase(convert_list[i]))\n    return polar_list\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    m = len(numbers)\n    l = []\n    for i in range(m):\n        l.append(cmath.polar(numbers[i]))\n    return l\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers < 0:\n        real = -1*numbers\n        imag = -1\n    else:\n        real = numbers\n        imag = 0\n    PolarX = cmath.polar(real)\n    PolarY = cmath.polar(imag)\n    return PolarX, PolarY\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    answer = []\n    for numbers in numbers:\n        if type(numbers)!= complex:\n            raise TypeError(\"You must enter a complex number!\")\n        else:\n            answer.append(polar_conversion(numbers))\n    return answer\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return round(cmath.polar(numbers))    \n    \ndef permute(arr):\n    '''\n    Write a python function to return the permutation of the given array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    m = [arr[0]]\n    m = m + permute(arr[1:])\n    return m\n    \ndef modulo(x):\n    '''\n    Write a python function to return the modulus of the given number.\n    '''\n    return x % 10\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # We use cmath because it's a much more convenient way to do math.\n    # And we don't want to include any of the math module.\n    # Even if there is an error in the function, it will not work.\n    # But you can do this by commenting out the following line.\n    #except:\n    #   pass\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) is int:\n            count += 1\n    return count\n    \n    \ndef list_to_string(list1):\n    '''\n    Write a python function that returns a string version of a given list.\n    '''\n    return''.join(str(item) for item in list1)\n    \n    \ndef string_to_list(list1):\n    '''\n    Write a python function that returns a list version of a given string.\n    '''\n    return list(list1)\n    \n    \ndef remove_list(list1):\n    '''\n    Write a python function that returns a list version of a given string.\n    '''\n    return [list1.pop(i) for i in range(len(list1)) if list1[i] not in list1]\n    \n    \ndef remove_from_list(list1, item):\n    '''\n    Write a python function that returns a list version of a given string.\n    '''\n    return [list1.pop(i) for i in range(len(list1)) if list1[i] is item]\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_elements = len(list1)\n    return num_elements\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    int_count = 0\n    for el in list1:\n        if type(el) == int:\n            int_count += 1\n    return int_count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for item in list1:\n        if item.isnumeric():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for el in list1:\n        if el.isnumeric():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for i in list1:\n        if i.isdigit():\n            result += 1\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [''.join(tup) for tup in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    output = []\n    for i in range(len(l) - n):\n        output.append(tuple(l[i:i + n]))\n    return output\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n==1:\n        return [tuple(l)]\n    else:\n        for i in range(len(l)):\n            for j in combinations_with_replacement(l, n):\n                result.append((i,j))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    combinations = combinations_with_replacement(l, n)\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(l):\n        for j in range(l):\n            comb.append((i,j,l-1))\n    return comb\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                result.append((i, j, k))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # your code goes here\n    return [tuple(l[index:index+n]) for index in range(0, len(l), n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    assert n >= 2, \"Must use at least 2 colors to get combinations of colors.\"\n    return list(map(''.join, combinations_with_replacement(l, n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return l\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your code here\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n % 3 == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    sieve = [True] * 100000\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i+i, n, i):\n                sieve[j] = False\n    return sum(sieve)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    result = 0\n    for i in range(2,n+1):\n        prime_number = True\n        for j in range(2, i):\n            if (i%j) == 0:\n                prime_number = False\n                break\n        if prime_number == True:\n            result += 1\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n):\n        if (prime(i)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    prime_nums = 0\n    \n    if n <= 1:\n        return 0\n    for i in range(2, n):\n        if is_prime(i):\n            prime_nums += 1\n    return prime_nums\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #  Do this in O(n)\n    #  1\n    #  1\n    #  1\n    #  2\n    #  2\n    #  3\n    #  3\n    #  4\n    #  5\n    #  6\n    #  6\n    #  7\n    #  7\n    #  8\n    #  8\n    #  9\n    #  9\n    #  10\n    #  10\n    #  11\n    #  11\n    #  12\n    #  12\n    #  13\n    #  13\n    #  14\n    #  14\n    #  15\n    #  15\n    #  16\n    #  16\n    #  17\n    #  17\n    #  18\n    #  18\n    #  19\n    #  19\n    #  20\n    #  20\n    #  21\n    #  21\n    #  22\n    #  22\n    #  23\n    #  23\n    #  24\n    #  24\n    #  25\n    #  25\n    #  26\n    #  26\n    #  27\n    #  27\n    #  28\n    #  28\n    #  29\n    #  29\n    #  30\n    #  30\n    #  31\n    #  31\n    #  32\n    #  32\n    #  33\n    #  33\n    #  34\n    #  34\n    #  35\n    #  35\n    #  36\n    #  36\n    #  37\n    #  37\n    #  38\n    #  38\n    #  39\n    #  39\n    #  40\n    #  40\n    #  41\n    #  41\n    #  42\n    #  42\n    #  43\n    #  43\n    #  44\n    #  44\n    #  45\n    #  45\n    #  46\n    #  46\n    #  47\n    #  47\n    #  48\n    #  48\n    #  49\n    #  49\n    #  50\n    #  50\n    #  51\n    #  51\n    #  52\n    #  52\n    #  53\n    #  53\n    #  54\n    #  54\n    #  55\n    #  55\n    #  56\n    #  56\n    #  57\n    #  57\n    #  58\n    #  58\n    #  59\n    #  59\n    #  60\n    #  60\n    #  61\n    #  61\n    #  62\n    #  62\n    #  63\n    #  63\n    #  64\n    #  64\n    #  65\n    #  65\n    #  66\n    #  66\n    #  67\n    #  67\n    #  68\n    #  68\n    #  69\n    #  69\n    #  70\n    #  70\n    #  71\n    #  71\n    #  72\n    #  72\n    #  73\n    #  73\n    #  74\n    #  74\n    #  75\n    #  75\n    #  76\n    #  76\n    #  77\n    #  77\n    #  78\n    #  78\n    #  79\n    #  79\n    #  80\n    #  80\n    #  81\n    #  81\n    #  82\n    #  82\n    #  83\n    #  83\n    #  84\n    #  84\n    #  85\n    #  85\n    #  86\n    #  86\n    #  87\n    #  87\n    #  88\n    #  88\n    #  89\n    #  89\n    #  90\n    #  90\n    #  91\n    #  91\n    #  92\n    #  92\n    #  93\n    #  93\n    #  94\n    #  94\n    #  95\n    #  95\n    #  96\n    #  96\n    #  97\n    #  97\n    #  98\n    #  98\n    #  99\n    #  99\n    #  100\n    #  100\n    #  101\n    #  101\n    #  102\n    #  102\n    #  103\n    #  103\n    #  104\n    #  104\n    #  105\n    #  105\n    #  106\n    #  106\n    #  107\n    #  107\n    #  108\n    #  108\n    #  109\n    #  109\n    #  110\n    #  110\n    #  111\n    #  111\n    #  112\n    #  112\n    #  113\n    #  113\n    #  114\n    #  114\n    #  115\n    #  115\n    #  116\n    #  116\n    #  117\n    #  117\n    #  118\n    #  118\n    #  119\n    #  119\n    #  120\n    #  120\n    #  121\n    #  121\n    #  122\n    #  122\n    #  123\n    #  123\n    #  124\n    #  124\n    #  125\n    #  125\n    #  126\n    #  126\n    #  127\n    #  127\n    #  128\n    #  128\n    #  129\n    #  129\n    #  130\n    #  130\n    #  131\n    #  131\n    #  132\n    #  132\n    #  133\n    #  133\n    #  134\n    #  134\n    #  135\n    #  135\n    #  136\n    #  136\n    #  137\n    #  137\n    #  138\n    #  138\n    #  139\n    #  139\n    #  140\n    #  140\n    #  141\n    #  141\n    #  142\n    #  142\n    #  143\n    #  143\n    #  144\n    #  144\n    #  145\n    #  145\n    #  146\n    #  146\n    #  147\n    #  147\n    #  148\n    #  148\n    #  149\n    #  149\n    #  150\n    #  150\n    #  151\n    #  151\n    #  152\n    #  152\n    #  153\n    #  153\n    #  154\n    #  154\n    #  155\n    #  155\n    #  156\n    #  156\n    #  157\n    #  157\n    #  158\n    #  158\n    #  159\n    #  159\n    #  160\n    #  160\n    #  161\n    #  161\n    #  162\n    #  162\n    #  163\n    #  163\n    #  164\n    #  164\n    #  165\n    #  165\n    #  166\n    #  166\n    #  167\n    #  167\n    #  168\n    #  168\n    #  169\n    #  169\n    #  170\n    #  170\n    #  171\n    #  171\n    #  172\n    #  172\n    #  173\n    #  173\n    #  174\n    #  174\n    #  175\n    #  175\n    #  176\n    #  176\n    #  177\n    #  177\n    #  178\n    #  178\n    #  179\n    #  179\n    #  180\n    #  180\n    #  181\n    #  181\n    #  182\n    #  182\n    #  183\n    #  183\n    #  184\n    #  184\n    #  185\n    #  185\n    #  186\n    #  186\n    #  187\n    #  187\n    #  188\n    #  188\n    #  189\n    #  189\n    #  190\n    #  190\n    #  191\n    #  191\n    #  192\n    #  192\n    #  193\n    #  193\n    #  194\n    #  194\n    #  195\n    #  195\n    #  196\n    #  196\n    #  197\n    #  197\n    #  198\n    #  198\n    #  199\n    #  199\n    "
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n < 1:\n        return 0\n    for i in range(1, n):\n        if isprime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(1, n):\n        if(n % i == 0):\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [True for i in range(n+1)]\n    for i in range(2,n):\n        if primes[i] == True:\n            for j in range(i*i,n+1,i):\n                primes[j] = False\n    count = 0\n    for i in range(2,n):\n        if primes[i] == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = int(input(\"Enter a number to count the primes: \"))\n    count = 0\n    for i in range(1, num+1):\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # YOUR CODE HERE\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = a\n    y = b\n    return (y, x)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #pass # replace this for part 2\n    return (b, a)\n    #pass # replace this for part 3\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a%10\n    b = b%10\n    return b,a\n    \nprint(swap_numbers(42,34))\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here\n    max = test_tup1[0]\n    for i in test_tup1:\n        if i > max:\n            max = i\n    for i in test_tup2:\n        if i > max:\n            max = i\n    return (max,max)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    x = test_tup1[0]\n    y = test_tup2[0]\n    max_ = max(x,y)\n    min_ = min(x,y)\n    if max_ == x:\n        return test_tup2[0]\n    if min_ == y:\n        return test_tup1[0]\n    elif max_ > min_:\n        return test_tup1[0]\n    else:\n        return test_tup2[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tup = test_tup1 + test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n    \n    \ndef test_fibonacci():\n    '''\n    Write a function that returns the first fibonacci number that is less than 100.\n    '''\n    for i in range(101):\n        if i == 0 or i == 1:\n            print(i, end ='')\n        else:\n            a, b = fibonacci(i)\n            print(a, end ='')\n            if a < 100:\n                print(b, end ='')\n    print()\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function that returns the first two fibonacci numbers less than 100.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return a, b\n        \n    \ndef is_palindrome(n):\n    '''\n    Write a function that determines if a number is a palindrome number.\n    '''\n    for i in range(n):\n        if n % i == 0:\n            print(n, end ='')\n            return False\n        else:\n            print(n, end ='')\n    print()\n    return True\n    \n    \ndef remove_all(n, d):\n    '''\n    Write a function that returns the number of digits in the given number n and its digits.\n    '''\n    if n < 10:\n        return n\n    else:\n        return remove_all(n // 10, d) + (n % 10)\n    \n    \ndef find_longest_substring(s):\n    '''\n    Write a function that returns the longest substring in s that has at least 3 digits.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if s[i] == '0' or s[i] == '1' or s[i] == '2':\n            a = i\n            b = i\n        if b - a + 1 >= 3:\n            return s[a:b+1]\n            \n    \ndef palindrome_number(n):\n    '''\n    Write a function that returns the number of times a given digit appears in a given string.\n    '''\n    if n < 10:\n        return n\n    else:\n        for i in range(10):\n            if n % 10 == i:\n                return n // 10\n            else:\n                return palindrome_number(n // 10)\n    \n    \ndef test_palindrome():\n    '''\n    Write a function that returns the number of palindromes in the given string.\n    '''\n    for i in range(10):\n        for j in range(10):\n            if palindrome_number(i * j)!= 0:\n                print(i * j, palindrome_number(i * j), end ='')\n            else:\n                print(i * j, end ='')\n        print()\n    \n    \ndef palindrome_count(s):\n    '''\n    Write a function that returns the number of times a given substring appears in a given string.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            a = a + 1\n            b = b + 1\n        if a > b:\n            b = a\n            a = b\n    return a, b\n    \n    \ndef contains_all(s, t):\n    '''\n    Write a function that returns true if any given substring s has all the characters of t in it.\n    '''\n    if s < 10:\n        return False\n    elif t < 10:\n        return False\n    elif t % 10 == s % 10:\n        return True\n    else:\n        return contains_all(s // 10, t // 10) or contains_all(s // 10, t % 10)\n    \n    \ndef first_missing_number(n):\n    '''\n    Write a function that returns the first missing number in a given range.\n    '''\n    if n < 10:\n        return n\n    else:\n        return (n - 10) + 1\n    \n    \ndef count_palindromes(s):\n    '''\n    Write a function that returns the number of palindromes in a given string.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if s[i] == s[i + 1]:\n            a = a + 1\n            b = b + 1\n        if b > a:\n            a = b\n            b = a\n    return a, b\n    \n    \ndef reverse_string(s):\n    '''\n    Write a function that reverses a string.\n    '''\n    for i in range(len(s)):\n        t = s[i]\n        s[i] = s[len(s) - 1 - i]\n        s[len(s) - 1 - i] = t\n    return s\n    \n    \ndef find_longest_repeat(s):\n    '''\n    Write a function that returns the longest repeated substring.\n    '''\n    if s < 10:\n        return s\n    a, b = 0, 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            a = a + 1\n            b = b + 1\n        if b - a + 1 > a and b - a + 1 > b:\n            return s[i:b+1]\n            \n    \ndef palindrome_checker():\n    '''\n    Write a function that returns true if a given string is a palindrome.\n    '''\n    s = 'a'\n    t = 'A'\n    if s == t:\n        return True\n    else:\n        return False\n    \n    \ndef is_in_set(s):\n    '''\n    Write a function that returns true if a given string is an in set.\n    '''\n    if s < 10:\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i] == s[i+1]:\n                return True\n            else:\n                return False\n        return False\n    \n    \ndef str_to_int(s):\n    '''\n    Write a function that returns the integer value of the given string.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            a = a + 1\n            b = b + 1\n        if b - a + 1 >= 4:\n            return b - a + 1\n    return a\n    \n    \ndef run_tests():\n    '''\n    Write a function that returns true if the given string is a palindrome.\n    '''\n    test_tup1 = ('a', 'b')\n    test_tup2 = ('ab', 'c')\n    test_tup3 = ('a', 'x')\n    test_tup4 = ('aa', 'xx')\n    test_tup5 = ('a', 'a')\n    test_tup6 = ('ab', 'a')\n    test_tup7 = ('ab', 'b')\n    test_tup8 = ('ab', 'ba')\n    test_tup9 = ('a', 'a')\n    test_tup10 = ('a', 'b')\n    test_tup11 = ('aa', 'b')\n    test_tup12 = ('aaaa', 'b')\n    test_tup13 = ('a', 'a')\n    test_tup14 = ('aa', 'a')\n    test_tup15 = ('a', 'x')\n    test_tup16 = ('aaa', 'b')\n    test_tup17 = ('a', 'a')\n    test_tup18 = ('aa', 'a')\n    test_tup19 = ('aa', 'a')\n    test_tup20 = ('aa', 'b')\n    test_tup21 = ('aaa', 'ba')\n    test_tup22 = ('aaaa', 'a')\n    test_tup23 = ('aaa'"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # WRITE YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # write your code here\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # your code here\n    if len(test_tup1) > len(test_tup2):\n        return test_tup2, test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup1, test_tup2\n    else:\n        return test_tup1, test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(map(max, test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = 0\n    if (test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]):\n        result = test_tup1[0]\n    elif (test_tup1[0] > test_tup2[0] and test_tup1[1] < test_tup2[1]):\n        result = test_tup1[0]\n    elif (test_tup1[0] < test_tup2[0] and test_tup1[1] > test_tup2[1]):\n        result = test_tup1[0]\n    elif (test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]):\n        result = test_tup1[0]\n    elif (test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]):\n        result = test_tup1[0]\n    elif (test_tup1[0] > test_tup2[0] and test_tup1[1] < test_tup2[1]):\n        result = test_tup1[0]\n    elif (test_tup1[0] < test_tup2[0] and test_tup1[1] > test_tup2[1]):\n        result = test_tup1[0]\n    elif (test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]):\n        result = test_tup1[0]\n    return result\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    i = 5\n    while i < n:\n        if n % i == 0:\n            return 0\n        i += 6\n    return 1"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_number = 2\n    while prime_number <= n:\n        if prime_number == 3 or prime_number == 5:\n            return True\n        elif prime_number % 2 == 0:\n            return False\n        elif prime_number % 3 == 0:\n            return False\n        else:\n            prime_number += 2\n    return False\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_num = 2\n    for i in range(3,n+1,1):\n        while (prime_num * prime_num) % i == 0:\n            prime_num += 1\n    return prime_num\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Write your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n%2 == 0:\n        return 4\n    elif n%2 == 1:\n        return 5\n    else:\n        x = n-3\n        for i in range(1,x+1):\n            y = n-i\n            z = x\n            if y%2 == 1 or y%2 == 0:\n                while(y%2==0):\n                    y = y/2\n                    z = z+1\n                    if y%2 == 0:\n                        y = y/2\n                while(z%2==0):\n                    z = z-1\n                    if y%2==0:\n                        y = y/2\n                if z%2==1:\n                    if y%2==0:\n                        z = z-2\n                    else:\n                        z = z-1\n            if y%2 == 0:\n                y = y/2\n            if z%2 == 0:\n                z = z-2\n            if z%2 == 1:\n                z = z-1\n            if y<=z:\n                return int(y)\n            else:\n                return int(z)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    num = 1\n    prime = False\n    while prime == False:\n        if num == n:\n            prime = True\n        else:\n            if (num % 2) == 0:\n                num = num + 1\n            else:\n                num = num + 1\n                if (num % 2) == 0:\n                    prime = False\n                    continue\n    return num\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Write your code here.\n    \n    #    if n == 1:\n    #        return 1\n    #    elif n == 2:\n    #        return 2\n    #    elif n == 3:\n    #        return 5\n    #    elif n % 2 == 0:\n    #        return 1 + (newman_prime(n//2) + newman_prime(n//3))\n    #    else:\n    #        return 1 + newman_prime(n//2) + newman_prime(n//3)\n    #        \n    #    if n < 2:\n    #        return 0\n    #    elif n == 2:\n    #        return 3\n    #    elif n == 3:\n    #        return 5\n    #    elif n % 2 == 0:\n    #        return 1 + newman_prime(n//2) + newman_prime(n//3)\n    #    else:\n    #        return 1 + newman_prime(n//2) + newman_prime(n//3)\n    #        \n    #    \n    #    return newman_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2:\n        return 2\n    if n == 1:\n        return 3\n    if n % 2 == 0:\n        return newman_prime(n-1)\n    else:\n        return newman_prime(n-1) + newman_prime(n-3)\n    \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # create a counter to make sure the number of primes\n    # is already at least n+1\n    counter = 0\n    \n    # create a while loop to run throughn\n    # until the number is prime\n    while counter < n:\n        \n        # find all primes greater than n\n        primes = [x for x in range(2, n+1) if prime_factor(x, n)]\n        \n        # check if a prime is prime\n        # or if the number of primes is one\n        # or if the number of primes is more than n+1\n        if len(primes) == 0:\n            return False\n        elif len(primes) == 1:\n            return primes[0]\n        else:\n            # if the number of primes is not one\n            # then we need to change the prime factor\n            # to be the smallest of primes\n            # and the primes as we go\n            for prime in primes:\n                if prime_factor(prime, n) == primes[0]:\n                    # if the prime factor is already equal\n                    # to one then we have the one\n                    # we can return it\n                    return prime\n            counter += 1\n            \n    return False"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    for i in range(n + 1):\n        if is_prime(i):\n            prime.append(i)\n    for i in range(1, len(prime)):\n        if prime[i] % prime[i-1] == 0:\n            return False\n    return True\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]%test_tup2[i]==0:\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Add all the tuples together, then perform a series of operations using the \"operator\" function as the operand\n    sum = 0\n    for i in test_tup1:\n        sum = sum + i\n    for i in test_tup2:\n        sum = sum - i\n    return sum\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    test_list1 = test_tup1[1:]\n    test_list2 = test_tup2[1:]\n    \n    test_list_1 = list(test_list1)\n    test_list_2 = list(test_list2)\n    \n    test_result = []\n    \n    for element in range(len(test_list_1)):\n        test_result.append((test_list_1[element] / test_list_2[element]))\n        \n    return tuple(test_result)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result += test_tup1[i]/test_tup2[i]\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # create a tuple of tuples to pass to the division function\n    test_tuple = (test_tup1, test_tup2)\n    # convert tuple to a list\n    test_list = list(test_tuple)\n    # check if the number of elements in the list is the same as the number of elements in the tuple\n    if len(test_tuple[0])!= len(test_tuple[1]):\n        return \"Error: The tuples must be the same length\"\n    # initialize an empty dictionary\n    result_dictionary = {}\n    # loop through the tuple\n    for i in range(len(test_list)):\n        # check if the element of the list is equal to the element of the tuple\n        if test_list[i][0] == test_tuple[1][i]:\n            # if the element of the list is equal to the element of the tuple, then calculate the division by the tuple value\n            if test_list[i][1] == test_tuple[0][i]:\n                result_dictionary[i] = test_list[i][1] / test_list[i][0]\n            else:\n                return \"Error: Division by zero\"\n        else:\n            # if the element of the list is not equal to the element of the tuple, then return an error\n            return \"Error: The elements of the tuples must be equal to each other\"\n    return result_dictionary\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x: x / (x == 0), test_tup1))\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Write your code here\n    # TupleA\n    test_tuple = test_tup1\n    # TupleB\n    test_tuple2 = test_tup2\n    # Create empty list to store the resulting tuples\n    result = []\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div_tup = tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n    return div_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n    \n    \n    \ndef logistic_sigmoid(x):\n    '''\n    Write a function that calculates the logistic function, which is\n    equivalent to\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # (1) declare an empty list to store the x and y element of the tuple we will be performing division on.\n    x = []\n    y = []\n    # (2) create an iteratable object from the tuple we will be iterating through.\n    for i in range(len(test_tup1)):\n        x.append(test_tup1[i][0])\n        y.append(test_tup1[i][1])\n    # (3) add the elements of the two tuples to the empty list.\n    for j in range(len(test_tup2)):\n        x.append(test_tup2[j][0])\n        y.append(test_tup2[j][1])\n    # (4) print the output of the two tuples with the result of the division.\n    print(x, y)\n    # (5) return the result of the division.\n    return x, y"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_first = list1[:L]\n    split_second = list1[L:]\n    return split_first, split_second\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create a empty list called empty_list\n    empty_list = []\n    # Create an empty list called splitted_list\n    splitted_list = []\n    # create a loop to iterate through the given list\n    for i in list1:\n        # if this list is greater than or equal to L, then add it to empty_list\n        if len(i) >= L:\n            empty_list.append(i)\n    # if this is true, then get the first part from the list and add it to the splitted_list\n    if len(empty_list) >= L:\n        splitted_list.append(empty_list[0])\n        for i in empty_list[1:]:\n            splitted_list.append(i)\n    # Return the results\n    return splitted_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Check if list is empty\n    if list1 == []:\n        return (list1, 1)\n    # Check if list is at the end\n    elif len(list1) == 1:\n        return (list1, list1[0])\n    # Check if list is at the beginning\n    else:\n        # Check if list has L elements\n        if L > len(list1):\n            return (list1, 1)\n        # Check if list has L elements, and is a list\n        if L % 2 == 0:\n            return (list1[:L // 2], L)\n        # Check if list has L elements, and is a tuple\n        else:\n            return (list1[:L // 2], L - 1)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # \n    if len(list1) % L!= 0:\n        return 'Error: The number of elements in the given list is not divisible by the number of elements in the list.', 'Error: The number of elements in the given list is not divisible by the number of elements in the list.'\n    #\n    res = []\n    for i in range(0, len(list1), L):\n        res.append(list1[i:i+L])\n    return res\n    #\n    # if L % len(list1)!= 0:\n    #     return 'Error: The number of elements in the given list is not divisible by the number of elements in the list.', 'Error: The number of elements in the given list is not divisible by the number of elements in the list.'\n    # #\n    # res = []\n    # for i in range(0, len(list1), L):\n    #     res.append(list1[i:i+L])\n    # return res\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    splitted = []\n    length = len(list1)\n    for i in range(length):\n        splitted.append(list1[i])\n    return splitted[:L], splitted[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    new_list = []\n    for index in range(L):\n        new_list.append(list1[index])\n    return (new_list, list1)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    index = 0\n    while index < len(list1):\n        list1[index] = list1[index].split(\" \")\n        list1[index][0] = list1[index][0].lower()\n        list1[index][1] = list1[index][1].lower()\n        list1[index][0] = list1[index][0].capitalize()\n        list1[index][1] = list1[index][1].capitalize()\n        index += 1\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length_list = len(list1)\n    part1 = []\n    part2 = []\n    for i in range(0,length_list):\n        part1.append(list1[i])\n    for i in range(0,length_list,L):\n        part2.append(list1[i:i+L])\n    return part1, part2\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1.5:\n        print(\"You are a baby.\")\n    elif h_age <= 2:\n        print(\"You are a toddler.\")\n    elif h_age <= 10:\n        print(\"You are a kid.\")\n    elif h_age <= 13:\n        print(\"You are a teenager.\")\n    elif h_age <= 17:\n        print(\"You are an adult.\")\n    else:\n        print(\"You are an elder.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = int(h_age)\n    if dog_age < 3:\n        return 'no'\n    elif dog_age <= 6 and dog_age >=3:\n        return '1st'\n    elif dog_age <= 9 and dog_age >=6:\n        return '2nd'\n    elif dog_age <= 12:\n        return '3rd'\n    else:\n        return 'dog'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 18:\n        return h_age\n    elif h_age >= 12 and h_age <= 18:\n        return h_age - 1\n    else:\n        return h_age - 12\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 365\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return f\"{h_age} years, you are a baby.\"\n    elif h_age <= 4:\n        return f\"{h_age} years, you are a toddler.\"\n    elif h_age <= 13:\n        return f\"{h_age} years, you are a kid.\"\n    elif h_age <= 20:\n        return f\"{h_age} years, you are a teenager.\"\n    elif h_age <= 65:\n        return f\"{h_age} years, you are an adult.\"\n    else:\n        return f\"{h_age} years, you are an elder.\"\n        \n    "
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #raise NotImplementedError\n    return None\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return(str(h_age) + \" dogs' years\")\n    elif h_age <= 1:\n        return('less than 2 years')\n    else:\n        return('1 year')\n    \nprint(dog_age(6))\nprint(dog_age(5))\nprint(dog_age(4))\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 365\n    print(\"The dog's age in dog's years is {} years\".format(dog_years))\n    \ndef do_twice(func):\n    '''\n    Make a function do_twice, which other functions do in parallel.\n    '''\n    def do_twice():\n        func()\n        func()\n    return do_twice\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = h_age * 365\n    return dogs_years\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #result = []\n    #for i in range(0, len(S), step):\n    #    result.append(S[i:i + step])\n    #result = [[S[i:i+step]] for i in range(0, len(S), step)]\n    result = [[S[i:i + step] for i in range(0, len(S), step)] for i in range(0, len(S), step)]\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out=[]\n    #cannot use append() because it just takes a list and not a string\n    for x in range(0, len(S), step):\n        out.append(S[x:x+step])\n    return out\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def g(x):\n        return [x] + g(x-1)\n    return g(len(S)-step)\n    "
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    count = 0\n    \n    l = S\n    \n    l = list(l)\n    \n    if len(l) == 1:\n        return l\n    \n    while len(l) >= n:\n        count = count + 1\n        \n        if count == n:\n            return list(l[count:])\n        \n        l = list(l[count:])\n        l = l[:count] + list(l[count:])\n        \n    return list(l)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return []\n    \n    if len(S) <= step:\n        return [S]\n    \n    if step % 2 == 0:\n        return list_split(S[:step//2],step//2) + list_split(S[step//2:],step//2)\n    \n    return [S[:step//2], S[step//2:]]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def process(a, n):\n        if n == 1:\n            return a\n        return [a[x] for x in range(0, len(a), n)]\n    \n    return process(S, step)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # write your code here\n    a = []\n    for i in range(len(S)//step):\n        a.append(S[i*step:(i+1)*step])\n    return a\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #calculate the total surface area\n    s = (l**2 + 2*l*(l**2))**.5\n    #print(s)\n    #calculate the surface area\n    return s\n    \ndef main():\n    '''\n    Write a program that uses a higher order function to calculate the\n    lateral surface area of a cube based on its side length.\n    '''\n    #Get the length of the cube\n    l = float(input(\"Enter the length of the cube (m): \"))\n    #Calculate the lateral surface area of the cube\n    print(lateralsurface_cube(l))\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    \n    def surfacearea_cube(l):\n        '''\n        Calculate the surface area of a cube given its side length.\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # TODO: replace the pass with your code\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l==1:\n        return (4/3) * pi * (1.25 + 0.25 * l**2)\n    if l==2:\n        return (8/9) * pi * (1 + 0.5 * l**2)\n    if l==3:\n        return (12/15) * pi * (1 + 0.5 * l**2)\n    if l==4:\n        return (16/19) * pi * (1 + 0.5 * l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # These are the function arguments.\n    # l = side length of a cube\n    # H = height of the cube\n    # A = side area of the cube\n    # return the lateral surface area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l*(l+1)/2\n    a = (l-s)*(l-s+1)/4\n    b = (l+s-2*l)*(l+s-2*l+1)/6\n    c = (s-l)*(s-l+1)/4\n    return a+b+c\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    A = (l/2)**2\n    return A\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (2 * l) * (l**2 - l)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += i ** 2\n    return sum\nprint(square_Sum(10))"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1, n + 1):\n        sum_squares += i**2\n    return sum_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Write your code here\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0 \n    for i in range(1,n+1):\n        sum = sum + (i**2)\n    return sum \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n ** 2\n    else:\n        for i in range(n, 0, -2):\n            sum += i ** 2\n        return sum\n    \n    \n    "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i ** 2\n    return result\n    \nprint(square_Sum(7))\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if nums[i] == n:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 1\n    else:\n        star_number = n * (n + 1) // 2 \n        return find_star_num(star_number)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = int(input(\"Enter the number: \"))\n    if n < 2:\n        return print(\"There is no star.\")\n    elif n == 2:\n        return print(\"The number is 2.\")\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return print(\"The number is not star.\")\n    print(\"The number is star.\")\nfind_star_num(int(input(\"Enter a number: \")))\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    else: \n        return 6\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else: \n        return find_star_num(n-1) + 3 \n    \ndef find_star_num_rec(n, arr): \n    '''\n    Return the star number of then'th star number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == arr[n-1]: \n        return find_star_num_rec(n-1, arr) \n    else: \n        return find_star_num_rec(n-1, arr) + 3 \n    \ndef find_star_num_rec_iter(n, arr): \n    '''\n    Return the star number of then'th star number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else: \n        if arr[n-1] == n: \n            return find_star_num_rec_iter(n-1, arr) \n        else: \n            return find_star_num_rec_iter(n-1, arr) + 3 \n        \ndef find_min_star_num(arr): \n    '''\n    Return the minimum number of stars required to complete a given array.\n    '''\n    if len(arr) == 0: \n        return 0\n    if len(arr) == 1: \n        return 1\n    if len(arr) == 2: \n        return 3\n    star_num = find_star_num(len(arr)-2) \n    star_num = find_star_num_rec(len(arr)-2, arr) \n    return star_num + 1 \n    \ndef find_min_star_num_rec(arr): \n    '''\n    Return the minimum number of stars required to complete a given array.\n    '''\n    if len(arr) == 0: \n        return 0\n    if len(arr) == 1: \n        return 1\n    if len(arr) == 2: \n        return 3\n    star_num = find_star_num_rec(len(arr)-2, arr) \n    return star_num + 1 \n    \ndef find_min_star_num_rec_iter(arr): \n    '''\n    Return the minimum number of stars required to complete a given array.\n    '''\n    if len(arr) == 0: \n        return 0\n    if len(arr) == 1: \n        return 1\n    if len(arr) == 2: \n        return 3\n    star_num = find_star_num_rec_iter(len(arr)-2, arr) \n    return star_num + 1 \n    \ndef sort_n_star(n, arr): \n    '''\n    Sort the given array.\n    '''\n    if n == 0: \n        return arr\n    elif n == 1: \n        return sorted(arr)\n    elif n == 2: \n        return sorted(arr, reverse=True)\n    else: \n        return sort_n_star(n-1, arr) + [arr[-1]] + sort_n_star(n-2, arr) + [arr[-2]]\n    \ndef sort_n_star_rec(n, arr): \n    '''\n    Sort the given array.\n    '''\n    if n == 0: \n        return arr\n    elif n == 1: \n        return sorted(arr)\n    elif n == 2: \n        return sorted(arr, reverse=True)\n    else: \n        return sort_n_star_rec(n-1, arr) + [arr[-1]] + sort_n_star_rec(n-2, arr) + [arr[-2]]\n    \ndef count_valid_locations(l): \n    '''\n    Count the valid locations of the input array.\n    '''\n    if len(l) == 0: \n        return 0\n    elif len(l) == 1: \n        return 1\n    elif len(l) == 2: \n        return 2\n    else: \n        # n is the number of elements in the array\n        n = len(l)\n        # if both the numbers are even\n        if n % 2 == 0: \n            # n is the total number of numbers in the array\n            n = n//2\n            # the minimum number of elements required to complete the\n            # array is n/2\n            if n < len(l): \n                # if the array is not fully sorted, the minimum number\n                # of elements required to complete the array is \n                # (n-n/2)\n                n = len(l) - (n - n/2)\n            # if the array is already sorted\n            else: \n                # if the array is already sorted, the minimum number\n                # of elements required to complete the array is (n-1)\n                n = len(l) - (n - 1)\n            # if the array is partially sorted, the number of valid\n            # elements is the total number of elements in the array minus\n            # the number of partial elements\n            if n < len(l): \n                return count_valid_locations(l[:n//2]) + count_valid_locations(l[n//2:])\n            else: \n                return count_valid_locations(l[:n//2])\n        # if the array is not already sorted\n        else: \n            # if the array is already sorted, the number of valid elements\n            # is the total number of elements in the array minus the number\n            # of partial elements\n            if n < len(l): \n                return count_valid_locations(l[:n]) + count_valid_locations(l[n:])\n            else: \n                return count_valid_locations(l[:n])\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Your code here\n    return n+1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1 or n==0:\n        return n\n    else:\n        return find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_numbers = []\n    # loop to go through all numbers\n    for i in range(1,n+1):\n        #add the number to the list of numbers \n        if i < 10:\n            star_numbers.append(i)\n        else:\n            #find the first number bigger than 10\n            for j in range(n-i,n+1):\n                #find the number\n                if j<10:\n                    #add it to the list\n                    star_numbers.append(star_numbers[j])\n                else:\n                    break\n    #return the number \n    return star_numbers[n-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    assert n > 0, 'n must be positive'\n    s = 0\n    for i in range(n):\n        if (i + 1) * 5 >= n:\n            break\n        else:\n            if (i + 1) * 2 >= n:\n                break\n            else:\n                if (i + 1) * 3 >= n:\n                    break\n                else:\n                    s += 1\n    return s\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n): \n        if (n % i) == 0: \n            return i \n    else: \n        return 0\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        if k >= ord('a') and k < ord('z'):\n            return k\n        else:\n            return None\n    except TypeError:\n        return None\n    \n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Pass a string to lower_case() and pass to ord()\n    # character = string[0]\n    # ord_value = ord(character)\n    # return ord_value\n    # Return a character ascii value\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == type(\"\"):\n        k = k.encode('utf-8')\n    v = ord(k)\n    return v\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return k\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k is None:\n        raise TypeError(\"ascii_value() missing 1 required argument: 'k'\")\n    if not isinstance(k, str):\n        raise TypeError(\"ascii_value() argument 'k' must be str, not {0}\".format(type(k)))\n    try:\n        s = k.encode('ascii')\n    except UnicodeEncodeError:\n        raise UnicodeError(\"ascii value '{0}' is not printable.\".format(k))\n    return s.decode('ascii')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return chr(int(k))\n    except:\n        return 'Error'\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == type(\"\"):\n        return ord(k)\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is str:\n        return ord(k)\n    else:\n        return k\n    \n    \ndef create_album(name, artist):\n    '''\n    Create a new album.\n    '''\n    album = {}\n    album['name'] = name\n    album['artist'] = artist\n    return album\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    val = ord(k)\n    # Compute the ascii value for the character\n    return chr(val)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for num in arr:\n        if num % 2 == 0:\n            sum_even += num\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    index = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n            index += 1\n    return even_sum + index"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    if len(arr)==0:\n        raise ValueError(\"Invalid input\")\n    \n    even = []\n    even_count = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            even.append(arr[i])\n            if len(even)%2==0:\n                even_count+=1\n            else:\n                even_count+=2\n    return even_count\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for n in arr:\n        if (n%2) == 0:\n            even_sum += n\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    \n    for n in range(len(arr)):\n        if arr[n]%2==0:\n            even_sum = even_sum + arr[n]\n    \n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n    #return sum(arr[i:i+2:2])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum(set(arr[i:i+2:2] for i in range(0, len(arr), 2)))\n    #return sum(arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0)\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum(set(arr[i:i+2:2] for i in range(0, len(arr), 2)))\n    #return sum(set(arr[i:i+2:2] for i in range(0, len(arr), 2)))\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum(set(arr[i:i+2:2] for i in range(0, len(arr), 2)))\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum(set(arr[i:i+2:2] for i in range(0, len(arr), 2)))\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum(set(arr[i:i+2:2] for i in range(0, len(arr), 2)))\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum(set(arr[i:i+2:2] for i in range(0, len(arr), 2)))\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2] for i in range(0, len(arr), 2) if arr[i]%2==0])\n    #return sum([arr[i:i+2:2"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = 0\n    for num in arr:\n        if num % 2 == 0:\n            evens = evens + num\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    power = 5\n    while (power < n): \n        sum = sum + pow(n, power)\n        power = power + 1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    Sum = 0 \n    for i in range(1,n+1):\n        Sum += i**5\n    return Sum \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2==0:\n            sum = sum + (i **5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n > 5:\n        return even_Power_Sum(n-1) + even_Power_Sum(n-2) + even_Power_Sum(n-3) + even_Power_Sum(n-4) + even_Power_Sum(n-5)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n    if n == 2: \n        return 2 \n    if n == 3: \n        return 6\n    if n == 4: \n        return 24\n    if n == 5: \n        return 125\n    if n == 6: \n        return 216\n    if n == 7: \n        return 247\n    if n == 8: \n        return 763\n    if n == 9: \n        return 1009\n    if n == 10: \n        return 1081\n    if n == 11: \n        return 1659\n    if n == 12: \n        return 2153\n    if n == 13: \n        return 2671\n    if n == 14: \n        return 3231\n    if n == 15: \n        return 3449\n    if n == 16: \n        return 3659\n    if n == 17: \n        return 4231\n    if n == 18: \n        return 4741\n    if n == 19: \n        return 5349\n    if n == 20: \n        return 5801\n    if n == 21: \n        return 6169\n    if n == 22: \n        return 6941\n    if n == 23: \n        return 7221\n    if n == 24: \n        return 7753\n    if n == 25: \n        return 8229\n    if n == 26: \n        return 8789\n    if n == 27: \n        return 9221\n    if n == 28: \n        return 9753\n    if n == 29: \n        return 11021\n    if n == 30: \n        return 11381\n    if n == 31: \n        return 12089\n    if n == 32: \n        return 13073\n    if n == 33: \n        return 13361\n    if n == 34: \n        return 14181\n    if n == 35: \n        return 15301\n    if n == 36: \n        return 16319\n    if n == 37: \n        return 16633\n    if n == 38: \n        return 16741\n    if n == 39: \n        return 16959\n    if n == 40: \n        return 18143\n    if n == 41: \n        return 18661\n    if n == 42: \n        return 18803\n    if n == 43: \n        return 18811\n    if n == 44: \n        return 18979\n    if n == 45: \n        return 19001\n    if n == 46: \n        return 19911\n    if n == 47: \n        return 20037\n    if n == 48: \n        return 20479\n    if n == 49: \n        return 20703\n    if n == 50: \n        return 20701\n    if n == 51: \n        return 21991\n    if n == 52: \n        return 22031\n    if n == 53: \n        return 22291\n    if n == 54: \n        return 23377\n    if n == 55: \n        return 24181\n    if n == 56: \n        return 25313\n    if n == 57: \n        return 26399\n    if n == 58: \n        return 27371\n    if n == 59: \n        return 28381\n    if n == 60: \n        return 29333\n    if n == 61: \n        return 30407\n    if n == 62: \n        return 31301\n    if n == 63: \n        return 31451\n    if n == 64: \n        return 32779\n    if n == 65: \n        return 33151\n    if n == 66: \n        return 34369\n    if n == 67: \n        return 36531\n    if n == 68: \n        return 38211\n    if n == 69: \n        return 39339\n    if n == 70: \n        return 40491\n    if n == 71: \n        return 41981\n    if n == 72: \n        return 46321\n    if n == 73: \n        return 47941\n    if n == 74: \n        return 53323\n    if n == 75: \n        return 57281\n    if n == 76: \n        return 57571\n    if n == 77: \n        return 63321\n    if n == 78: \n        return 66513\n    if n == 79: \n        return 69243\n    if n == 80: \n        return 71271\n    if n == 81: \n        return 73043\n    if n == 82: \n        return 76921\n    if n == 83: \n        return 82441\n    if n == 84: \n        return 87761\n    if n == 85: \n        return 90909\n    if n == 86: \n        return 93841\n    if n == 87: \n        return 97311\n    if n == 88: \n        return 100331\n    if n == 89: \n        return 102721\n    if n == 90: \n        return 104293\n    if n == 91: \n        return 105531\n    if n == 92: \n        return 106181\n    if n == 93: \n        return 112141\n    if n == 94: \n        return 115217\n    if n == 95: \n        return 117341\n    if n == 96: \n        return 118111\n    if n == 97: \n        return 119383\n    if n == 98: \n        return 121941\n    if n == 99: \n        return 125091\n    if n == 100: \n        return 130727\n    if n == 101: \n        return 131211\n    if n == 102: \n        return 133911\n    if n == 103: \n        return 136511\n    if n == 104: \n        return 138331\n    if n == 105: \n        return 141741\n    if n == 106: \n        return 143911\n    if n == 107: \n        return 146511\n    if n == 108: \n        return 150331\n    if n == 109: \n        return 156111\n    if n == 110: \n        return 154911\n    if n == 111: \n        return 162711\n    if n == 112: \n        return 167111\n    if n == 113: \n        return 173911\n    if n == 114: \n        return 176511\n    if n == 115: \n        return 181111\n    if n == 116: \n        return 184911\n    if n == 117: \n        return 187511\n    if n == 118: \n        return 191311\n    if n == 119: \n        return 194911\n    if n == 120: \n        return 197411\n    if n == 121: \n        return 204911\n    if n == 122: \n        return 207911\n    if n == 123: \n        return 219011\n    if n == 124: \n        return 221411\n    if n == 125: \n        return 226051\n    if n == 126: \n        return 231711\n    if n == 127: \n        return 235051\n    if n == 128: \n        return 241811\n    if n == 129: \n        return 245051\n    if n == 130: \n        return 251811\n    if n == 131: \n        return 255051\n    if n == 132: \n        return 261811\n    if n == 133: \n        return 265051\n    if n == 134: \n        return 271811\n    if n == 135: \n        return 275051\n    if n == 136: \n        return 281811\n    if n == 137: \n        return 285051\n    if n == 138: \n        return 291811\n    if n == 139: \n        return 295051\n    if n == 140: \n        return 301811\n    if n == 141: \n        return 305051\n    if n == 142: \n        return 319011\n    if n == 143: \n        return 350051\n    if n == 144: \n        return 361811\n    if n == 145: \n        return 365051\n    if n == 146: \n        return 371811\n    if n == 147: \n        return 375051\n    if n == 148: \n        return 381811\n    if n ="
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # code here\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    x = 0\n    for i in range(n,0,-1):\n        x += (i**3)\n    return x\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    while n!= 0:\n        result = result + n\n        n = n-1\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        power = 5\n        while (power < n):\n            sum = sum + (power ** 4)\n            power = power + 1\n        return sum\nn = int(input())\nprint(even_Power_Sum(n))\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO: Complete the function\n    return test_list[0][1]\n    \nprint(rear_extract([(1, \"a\"), (2, \"b\")]))\nprint(rear_extract([(1, \"a\"), (2, \"b\"), (3, \"c\")]))\nprint(rear_extract([(1, \"a\"), (2, \"b\"), (3, \"c\"), (4, \"d\")])"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extract = []\n    for element in test_list:\n        rear_extract.append(element[0])\n    return rear_extract\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for i in test_list:\n        rear_extracted.append(i[1])\n    return rear_extracted\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list.sort(key=lambda x: (x[1], x[0]))\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[0])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for elem in test_list:\n        rear_list.append(elem[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    temp_list = []\n    for element in test_list:\n        temp_list.append(element[-1])\n    return temp_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[0] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #example: [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]\n    #return [2, 4, 6, 8, 10, 12, 14, 16]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO: Write your solution here\n    rear_extracted = []\n    for i in test_list:\n        rear_extracted.append(i[-1])\n    return rear_extracted\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #variables\n    elements1 = test_tup1[0]\n    elements2 = test_tup2[0]\n    sub_tuple = (elements1,elements2)\n    print(f\"This is the subtraction operation: {sub_tuple}\")\n    sub_tuple_index = elements2.index(sub_tuple[0])\n    print(f\"This is the sub_tuple_index: {sub_tuple_index}\")\n    print(f\"This is the subtraction index: {sub_tuple_index}\")\n    #addition of subtraction\n    tuple_len = len(test_tup1)\n    print(f\"The length of test_tup1 is {tuple_len}\")\n    for i in range(0,tuple_len):\n        print(f\"i is {i}\")\n        if i == sub_tuple_index:\n            print(\"The element is subtracted\")\n            test_tup1[i] = elements1 - elements2\n        else:\n            print(\"The element is not subtracted\")\n            test_tup1[i] = elements1 - elements2\n    print(f\"The final tuple is: {test_tup1}\")\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Define a function that can be used to return the tuple with the given index.\n    # (Note that this function should not return a new tuple, but return the original tuple)\n    \n    # TODO: Return a tuple with the element of the two tuples at that index.\n    \n    # TODO: Create two variables that are equal to the length of the first tuple.\n    # Then write code that compares the elements at that index and the elements at the other index.\n    # Remember that you can use the in operator to see if two values are equal.\n    # Remember that tuples must be immutable (i.e. they cannot be changed after creation).\n    # If they are identical, you should return them as is.\n    # If they are unequal, you should return a different tuple.\n    # If they are identical, you should return that tuple as is.\n    # Else, you should return a new tuple with the elements at that index.\n    \n    test_tuple1 = tuple(test_tup1[i] for i in range(len(test_tup1)))\n    test_tuple2 = tuple(test_tup2[i] for i in range(len(test_tup2)))\n    \n    return test_tuple1, test_tuple2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #TODO\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    #print(test_tup1[1][2])\n    #print(test_tup1[2])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    index = 0\n    \n    while index < len(tuple1):\n        tuple2[index] -= tuple1[index]\n        index += 1\n    return tuple2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    for i in range(len(test_tup1)):\n        test_tup1[i] = int(test_tup1[i])\n    for i in range(len(test_tup2)):\n        test_tup2[i] = int(test_tup2[i])\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            test_tup1[i] = -test_tup2[i]\n    for i in range(len(test_tup1)):\n        test_tup1[i] = int(test_tup1[i])\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # pass the test tuple to the function\n    sub_tup = (test_tup1[1], test_tup1[0])\n    # pass the second tuple to the function\n    # pass the result of the function to the second tuple as the second variable\n    # pass the result of the function to the first tuple as the first variable\n    sub_tup = test_tup1[0]\n    # return the modified test tuple\n    return(sub_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[1][0] - test_tup2[1][0],test_tup1[1][1] - test_tup2[1][1])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n    \nprint(substract_elements([1, 3, 2, 5, 6, 7], [2, 3, 4]))\nprint(substract_elements([1, 3, 2, 5, 6, 7], [2, 3, 4, 5]))"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n==0 or n==1):\n        return 1\n    return even_binomial_Coeff_Sum(n//2) + even_binomial_Coeff_Sum(n//2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0.0\n    for i in range(n+1):\n        sum += i*(math.pow(10,i))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += pow(i,2)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0 \n    m = 0 \n    for i in range(n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    c = 0 \n    m = 0 \n    for i in range(n+1): \n        if (i % 2!= 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef rec_func(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of recurrence coefficients.\n    '''\n    c = 0 \n    m = 0 \n    for i in range(n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef factorial_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that integer.\n    '''\n    c = 1 \n    for i in range(1,n+1): \n        c = c * i \n    return c \n \ndef factorial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that integer.\n    '''\n    c = 1 \n    m = 0 \n    for i in range(n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef prime_factorization(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the prime factors.\n    '''\n    f = math.sqrt(n) \n    if (f % 1 == 0): \n        return 1 \n    else: \n        for i in range(2, f + 1): \n            if (n % i == 0): \n                return i \n \ndef factorial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that integer.\n    '''\n    c = 1 \n    m = 0 \n    for i in range(1,n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef rec_func(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of that integer.\n    '''\n    c = 1 \n    m = 1 \n    for i in range(1,n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef n_divisors_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the n-th divisors.\n    '''\n    c = 0 \n    m = 0 \n    for i in range(1,n+1): \n        if (n % i == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef prime_factorization(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the prime factors.\n    '''\n    f = math.sqrt(n) \n    if (f % 1 == 0): \n        return 1 \n    else: \n        for i in range(2, f + 1): \n            if (n % i == 0): \n                return i \n \ndef prime_factorization_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the prime factors.\n    '''\n    c = 1 \n    m = 1 \n    for i in range(1,n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef super_prime_factorization_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the super prime factors.\n    '''\n    c = 1 \n    m = 1 \n    for i in range(1,n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef mod_factorization(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the modulo factorization.\n    '''\n    f = math.sqrt(n) \n    if (f % 1 == 0): \n        return 1 \n    else: \n        for i in range(2, f + 1): \n            if (n % i == 0): \n                return i \n \ndef mod_factorization_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the modulo factorization.\n    '''\n    c = 1 \n    m = 1 \n    for i in range(1,n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef inv_mod_Sum(n,x): \n    '''\n    Write a python function that takes in a positive integer n and finds the inverse of x mod n.\n    '''\n    f = math.sqrt(n) \n    c = 1 \n    m = 1 \n    for i in range(1,n+1): \n        if (n % i == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef inv_mod_Coeff_Sum(x,n): \n    '''\n    Write a python function that takes in a positive integer x and finds the inverse of x mod n.\n    '''\n    c = 1 \n    m = 0 \n    for i in range(1,n+1): \n        if (n % i == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef nth_prim_coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the nth primitive coefficient.\n    '''\n    c = 0 \n    m = 0 \n    for i in range(1,n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef nth_prim_coeff_Sum_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the nth primitive coefficient.\n    '''\n    c = 0 \n    m = 1 \n    for i in range(1,n+1): \n        if (i % 2 == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef nth_prim_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the nth primitive coefficient.\n    '''\n    c = 0 \n    m = 1 \n    for i in range(1,n+1): \n        if (n % i == 0): \n            c = c + i \n            m = m + (i/2) \n    return c,m \n \ndef primes(n): \n    ''"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return None\n    \n    total = 0\n    #Step 1: get total of odd-binomial coefficients \n    for i in range(1, n+1):\n        total += math.pow(i, 2)\n    #Step 2: get sum of even-binomial coefficients \n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1: \n        return n \n    elif n % 2 == 0: \n        return even_binomial_Coeff_Sum(n//2) \n    else: \n        return (n*even_binomial_Coeff_Sum(n//2)) \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else: \n        # n = 4 \n        # a = 1, b = 3, c = 2, d = 5, e = 0\n        # a^2 + b^2 + c^2 + d^2 = n \n        #\n        a = 2\n        b = 3\n        c = 0\n        d = 1\n        sum = 0\n        while (n!= 0): \n            sum = (a * d) + (b * c) + (d * e) + (b * e) + (c * f) + (d * f) \n            a = a + 2\n            b = b + 3\n            c = c + 0\n            d = d + 1\n            n = n - 1\n        return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(n * (math.pow(2,n)-1))"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1: \n        return n\n    else: \n        a = int(math.pow(n,0.5)) \n        return int(math.factorial(n - a)) / (math.factorial(a)) \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n <= 1: \n        return n\n    else: \n        a = int(math.pow(n,0.5)) \n        return int(math.factorial(n - a)) / (math.factorial(a)) \ndef odd_binomial_Coeff_Sum_Symmetric( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n <= 1: \n        return n\n    else: \n        a = int(math.pow(n,0.5)) \n        return int(math.factorial(n - a)) / (math.factorial(a)) \ndef symmetric_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of symmetric index binomial coefficients.\n    '''\n    if n <= 1: \n        return n\n    else: \n        a = int(math.pow(n,0.5)) \n        return int(math.factorial(n - a)) / (math.factorial(a)) \ndef sum_of_odd_numbers(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the odd numbers.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        return int(math.factorial(n - a)) \ndef summation_of_even_numbers(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the even numbers.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        return int(math.factorial(n - a)) \ndef sum_of_odd_numbers_Symmetric(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the odd numbers.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        return int(math.factorial(n - a)) \ndef summation_of_even_numbers_Symmetric(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the even numbers.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        return int(math.factorial(n - a)) \ndef fibonacci_series(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        if a == 0: \n            return n \n        elif a == 1: \n            return 0 \n        else: \n            return fibonacci_series(a-1) + fibonacci_series(a-2)\ndef fibonacci_series_Symmetric(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        if a == 0: \n            return n \n        elif a == 1: \n            return 0 \n        else: \n            return fibonacci_series_Symmetric(a-1) + fibonacci_series_Symmetric(a-2)\ndef fibonacci_series_Symmetric2(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        if a == 0: \n            return n \n        elif a == 1: \n            return 0 \n        else: \n            return fibonacci_series_Symmetric2(a-1) + fibonacci_series_Symmetric2(a-2)\ndef fibonacci_series_Symmetric3(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        if a == 0: \n            return n \n        elif a == 1: \n            return 0 \n        else: \n            return fibonacci_series_Symmetric3(a-1) + fibonacci_series_Symmetric3(a-2)\ndef fibonacci_series_Symmetric4(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        if a == 0: \n            return n \n        elif a == 1: \n            return 0 \n        else: \n            return fibonacci_series_Symmetric4(a-1) + fibonacci_series_Symmetric4(a-2)\ndef fibonacci_series_Symmetric5(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        if a == 0: \n            return n \n        elif a == 1: \n            return 0 \n        else: \n            return fibonacci_series_Symmetric5(a-1) + fibonacci_series_Symmetric5(a-2)\ndef fibonacci_series_Symmetric6(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        if a == 0: \n            return n \n        elif a == 1: \n            return 0 \n        else: \n            return fibonacci_series_Symmetric6(a-1) + fibonacci_series_Symmetric6(a-2)\ndef fibonacci_series_Symmetric7(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        a = int(math.pow(n,0.5)) \n        if a == 0: \n            return n \n        elif a == 1: \n            return 0 \n        else: \n            return fibonacci_series_Symmetric7(a-1) + fibonacci_series_Symmetric7(a-2)\ndef fibonacci_series_Symmetric8(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth fibonacci number.\n    ''"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3*(3*(r**3))*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*r**3*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #define variables\n    volume = 3.14*(r**2)\n    volume_square = 4*np.pi*(r**2)\n    volume_cylinder = (volume_square + volume)**2\n    return volume_cylinder\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3 * pi * r**3\n    print(volume)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (4*math.pi*r*r*h)\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 0.5*r*h\n    # TODO: Write your function here...\n    # If you're stuck on the TODO comment block, remove this comment.\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3 * np.pi * r**3\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = h*r**2\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict(filter(lambda (k,v): v >= n, dict.items()))\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key, value in dict.items():\n        if value >= n:\n            dict.pop(key)\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict = dict.copy()\n    for i in range(len(dict)):\n        if dict[i] >= n:\n            dict[i] = n\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_copy = dict.copy()\n    for i in dict_copy:\n        if dict_copy[i] >= n:\n            dict_copy[i] = n\n    return dict_copy\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if type(dict)==dict:\n        return {k:v for k,v in dict.items() if v>n}\n    else:\n        return {k:v for k,v in dict.items() if v>n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list_to_return = []\n    for key, value in dict.items():\n        if value >= n:\n            list_to_return.append(key)\n    return dict_filter(dict,n)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            n += 1\n    return n\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    ele_count = 0\n    for ele in test_tup:\n        if ele!= test_tup[0]:\n            ele_count += 1\n    return ele_count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #raise NotImplementedError\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    tup_len = len(test_tup)\n    for i in range(tup_len):\n        if test_tup[i] < test_tup[i+1]:\n            result += 1\n    return result\n    \ndef count_second_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    result = 0\n    tup_len = len(test_tup)\n    for i in range(tup_len - 1):\n        if test_tup[i] > test_tup[i+1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup_elements = 0\n    for tup_elements in range(len(test_tup)):\n        if test_tup[tup_elements] == test_tup[tup_elements + 1]:\n            tup_elements += 1\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i > test_tup[0]:\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    x,y= test_tup\n    if y[0]==x[0]:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    from math import sqrt\n    def rec(n):\n        if n < 0:\n            return None\n        elif n == 0:\n            return 0\n        elif n % 2 == 0:\n            return (rec(n // 2) + rec(n//2 + 1)) % 10\n        else:\n            return (rec(n//2) + rec(n//2 - 1)) % 10\n    if n == 1:\n        return 1\n    else:\n        return rec(n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    s=[]\n    for i in range(1, n+1):\n        s.append(i*(i+1))\n    s.append(n)\n    for i in range(n):\n        s.append(i)\n    return s[n]\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base case\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    \n    # recursive case\n    if n % 2 == 0: \n        n /= 2\n        return is_num_decagonal(n) + is_num_decagonal(n + 1)\n    else:\n        n -= 1\n        n /= 2\n        return is_num_decagonal(n) + is_num_decagonal(n + 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return n\n    if n % 2 == 0:\n        return n**2 - 1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n >= 0:\n        n=int(n)\n        if n == 0: \n            return 1\n        if n == 1: \n            return 2\n        if n == 2: \n            return 3\n        if n == 3: \n            return 4\n        if n == 4: \n            return 5\n        if n == 5: \n            return 6\n        if n == 6: \n            return 7\n        if n == 7: \n            return 8\n        if n == 8: \n            return 9\n        if n == 9: \n            return 10\n        if n == 10: \n            return 11\n        if n == 11: \n            return 12\n    else: \n        n = abs(n)\n        if n == 0: \n            return 1\n        if n == 1: \n            return 2\n        if n == 2: \n            return 3\n        if n == 3: \n            return 4\n        if n == 4: \n            return 5\n        if n == 5: \n            return 6\n        if n == 6: \n            return 7\n        if n == 7: \n            return 8\n        if n == 8: \n            return 9\n        if n == 9: \n            return 10\n        if n == 10: \n            return 11\n        if n == 11: \n            return 12\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    elif n>1:\n        d=int(n**0.5)\n        if n%d==0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    c = n\n    # Replace the loop with a more general recursive function that uses math.ceil\n    def is_nth_decagonal(n):\n        if n==1:\n            return False\n        if c%2==0:\n            if n==2:\n                return True\n            if n==3:\n                return False\n            n = n - 1\n            return is_nth_decagonal(n)\n        else:\n            n = n - 2\n            return is_nth_decagonal(n)\n    return is_nth_decagonal(n)\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    for element in dlist:\n        if element == item:\n            return True, i\n        i += 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            index = i\n            break\n    return (index!= -1, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i,dlist.index(item)\n    return (-1,-1)\n    \nprint(sequential_search([1,5,7,4,6,3,2,8,9,10],5)"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    while i < len(dlist):\n        if dlist[i] == item:\n            return (True,i)\n        i += 1\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #loop through the list to find where the element is\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for item in test_list:\n        if item not in unique:\n            unique.append(item)\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Validation\n    if not isinstance(test_list,list):\n        raise TypeError('The test list should be list type')\n    if not len(test_list) > 0:\n        raise ValueError('The list of elements should not be empty')\n    # Creating a set to find the unique elements\n    seen = set()\n    for el in test_list:\n        if el in seen:\n            return False\n        seen.add(el)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #create an empty dictionary\n    #create an empty list to store unique elements\n    unique_list=[]\n    #for each element in the list\n    for element in test_list:\n        #if element not in unique_list\n        if element not in unique_list:\n            #add element to unique_list\n            unique_list.append(element)\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # check if all elements are unique or not\n    dic = {}\n    for value in test_list:\n        if value in dic:\n            return False\n        else:\n            dic[value] = 1\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # we will create an empty list\n    uniq_list = []\n    # we iterate over the list to add all the values\n    for i in test_list:\n        # if the value is not already in the list\n        if i not in uniq_list:\n            # add it\n            uniq_list.append(i)\n    # return the list\n    return uniq_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # NOTE: You can assume that elements will always be in ascending order.\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = True\n    \n    if len(test_list) < 2:\n        result = False\n    else:\n        temp_set = set(test_list)\n        result = len(temp_set) == len(test_list)\n    \n    return result\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for value in test_list:\n        if value not in unique:\n            unique.append(value)\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for item in test_list:\n        if item not in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise TypeError(\"Subtraction can only be applied to equal sized lists.\")\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [[x-y for x,y in zip(nums1,nums2)] for y in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    if len(nums1)!= len(nums2):\n        return None\n    else:\n        return nums1[0:len(nums1)] - nums2[0:len(nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert nums1[0] > nums2[0], \"First list must be greater than the second\"\n    assert len(nums1) == len(nums2), \"Lists must have the same size\"\n    assert nums1[-1] < nums2[-1], \"Second list must be less than the first\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        temp = [j-i for j in nums2]\n        res.append(temp)\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # sum = 0\n    # for i in range(len(nums1)):\n    #     sum += nums1[i]\n    #     sum -= nums2[i]\n    # return sum\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    num_list = nums1 + nums2\n    index = 0\n    result = []\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            result.append(num_list[index])\n            index += 1\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!=len(nums2):\n        print(\"Please enter two lists with the same size\")\n    else:\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                nums1[i]-=nums2[j]\n                print(nums1[i],\"-\",nums2[j])\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a = []\n    b = []\n    \n    for i in range(len(nums1)):\n        a.append(nums1[i]-nums2[i])\n    \n    for i in range(len(nums2)):\n        b.append(nums2[i]-nums1[i])\n    \n    return a, b\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    arr1 = []\n    for i in range(n):\n        arr1.append(nums1[i]-nums2[i])\n    arr2 = []\n    for j in range(m):\n        arr2.append(nums2[j]-nums1[j])\n    return arr1,arr2\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def check(x):\n        if x < 10:\n            return str(x) + '0'\n        elif x < 100:\n            return str(x) + '0' + '1'\n        else:\n            return str(x) + '0' + '1' + '2'\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #n=input(\"Enter an integer\")\n    if type(n) is not int:\n        return \"Error: enter an integer\"\n    if len(str(n))!= len(str(n-1)):\n        return \"Error: enter an integer greater than 1\"\n    if not n.isdigit():\n        return \"Error: enter an integer\"\n    else:\n        if int(n) < 0 or int(n) > 9:\n            return \"Error: enter an integer greater than 0 and less than or equal to 9\"\n    if n < 0:\n        return \"Error: enter an integer greater than 0 and less than or equal to 9\"\n    if n > 9:\n        return \"Error: enter an integer greater than 0 and less than or equal to 9\"\n    else:\n        return \"\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n==0:\n        return True\n    for digit in str(n):\n        if (digit not in nums):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(i) for i in str(n)] \n    freq = {} \n    for i in digits:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in digits:\n        if freq[i] <= i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for num in range(10): \n        if n == num: \n            break\n        if n%10==num: \n            print(num) \n            break\n    else: \n        print(\"number not found\") \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        raise ValueError('Input must be non negative')\n    for i in range(10):\n        if n % 10!= i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 1 or n > 9:\n        raise ValueError(\"Please enter a number between 1 and 9.\")\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # to make sure the function is valid\n    if n < 10 or n > 36:\n        return False\n    # to make sure the integer can be converted to a list\n    else:\n        # to make sure the list is not empty and the number can be converted to a list\n        if n in nlist:\n            return nlist[n]\n        else:\n            return False\nnlist = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp=set()\n    for i in range(10):\n        for j in range(len(n)-i):\n            #print(i,j)\n            if(int(n[j:j+i])<=int(n[j+i])):\n                temp.add(int(n[j:j+i]))\n    return temp\nprint(validate('0'))"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    '''\n    Some test cases:\n    Input : 4\n    Output : 4\n    '''\n    # pass\n    # pass\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n        else:\n            return False\n    \n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        print('The element'+ str(element) +'does not exist in the list')\n    else:\n        for i in range(0,len(list)):\n            if list[i] == element:\n                print('The element'+ str(element) +'is equal to'+ str(list[i]))\n            else:\n                print('The element'+ str(element) +'is not equal to'+ str(list[i]))\n                \n    return\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for el in list:\n        if el!= element:\n            return False\n    return True\n    \ndef check_permutation(string,string_permutation):\n    '''\n    Write a function that takes in a string and a string_permutation list and checks if all the characters in the string are in the string_permutation list. \n    '''\n    for el in string:\n        if el not in string_permutation:\n            return False\n    return True\n    \ndef get_possible_permutations(string, string_permutation):\n    '''\n    Write a function that takes in a string and a string_permutation list and returns all the possible permutations of the given string. \n    '''\n    permutations = []\n    for i in range(0,len(string)):\n        permutations.append(''.join(string[:i]+string[i+1:]))\n    for i in range(0,len(string)):\n        if string[i] in string_permutation:\n            permutations.append(''.join(string[:i]+string[i+1:]))\n    return permutations\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        print(f'{element} is in the list.')\n    else:\n        print(f'{element} is not in the list.')\n    \ndef main():\n    '''\n    Write a program that takes in a list of numbers as input and checks whether the list is empty or not.\n    '''\n    print('Enter the elements of the list in the following format: \"a b c d\".')\n    element_list = []\n    for i in range(3):\n        element_list.append(input())\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(\\w|a|b|[ab])')\n    print(pattern.findall(text))\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(r'a[b]?[c]?', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if(text.find('a')!=-1 and text.find('b')!=-1):\n        return True\n    else:\n        return False\ndef text_match_one_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by one 'b' character.\n    '''\n    if(text.find('a')!=-1 and text.find('b')!=-1):\n        return True\n    else:\n        return False\ndef text_match_one_two_two(text):\n    '''\n    Write a function that checks whether a string contains 'a' character followed by one 'b' character followed by two 'r' characters.\n    '''\n    if(text.find('a')!=-1 and text.find('b')!=-1 and text.find('r')!=-1):\n        return True\n    else:\n        return False\ndef text_match_two_three_four(text):\n    '''\n    Write a function that checks whether a string contains three 'a' characters followed by two or three 'b' characters followed by one or two 'r' characters.\n    '''\n    if(text.find('a')!=-1 and text.find('b')!=-1 and text.find('r')!=-1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    for a in range(len(text)):\n        for b in range(a,len(text)):\n            if text[b] == \"a\":\n                if text[a] == \"b\":\n                    return True\n            else:\n                return False\n    return False\ndef text_match_one_two(text):\n    '''\n    Write a function that checks whether a string contains 'a' and 'b' characters followed by two or three characters.\n    '''\n    for a in range(len(text)):\n        for b in range(a,len(text)):\n            if text[b] == \"a\":\n                if text[a] == \"b\":\n                    return True\n            elif text[a] == \"b\":\n                return True\n            elif text[b] == \"a\":\n                return True\n    return False\ndef text_match_one_three(text):\n    '''\n    Write a function that checks whether a string contains 'a', 'b', and 'c' characters followed by three characters.\n    '''\n    for a in range(len(text)):\n        for b in range(a,len(text)):\n            for c in range(b,len(text)):\n                if text[b] == \"a\":\n                    if text[a] == \"b\":\n                        if text[b] == \"c\":\n                            return True\n                elif text[a] == \"b\":\n                    if text[a] == \"c\":\n                        if text[b] == \"a\":\n                            return True\n                elif text[a] == \"c\":\n                    if text[b] == \"a\":\n                        if text[a] == \"b\":\n                            return True\n                elif text[a] == \"b\":\n                    if text[a] == \"c\":\n                        if text[b] == \"a\":\n                            return True\n                elif text[a] == \"c\":\n                    if text[a] == \"b\":\n                        return True\n                elif text[b] == \"b\":\n                    return True\n    return False\ndef text_match_one_four(text):\n    '''\n    Write a function that checks whether a string contains 'a', 'b', 'c' and 'd' characters followed by four characters.\n    '''\n    for a in range(len(text)):\n        for b in range(a,len(text)):\n            for c in range(b,len(text)):\n                for d in range(c,len(text)):\n                    if text[b] == \"a\":\n                        if text[a] == \"b\":\n                            if text[c] == \"d\":\n                                return True\n                        elif text[b] == \"c\":\n                            if text[d] == \"d\":\n                                return True\n                    elif text[a] == \"b\":\n                        if text[a] == \"c\":\n                            if text[c] == \"d\":\n                                return True\n                    elif text[a] == \"c\":\n                        if text[a] == \"d\":\n                            if text[b] == \"d\":\n                                return True\n                    elif text[a] == \"c\":\n                        if text[a] == \"d\":\n                            if text[c] == \"d\":\n                                return True\n    return False\ndef text_match_one_five(text):\n    '''\n    Write a function that checks whether a string contains 'a', 'b', 'c', 'd', 'e' and 'f' characters followed by five characters.\n    '''\n    for a in range(len(text)):\n        for b in range(a,len(text)):\n            for c in range(b,len(text)):\n                for d in range(c,len(text)):\n                    for e in range(d,len(text)):\n                        if text[b] == \"a\":\n                            if text[a] == \"b\":\n                                if text[c] == \"d\":\n                                    if text[d] == \"e\":\n                                        if text[e] == \"f\":\n                                            return True\n                        elif text[a] == \"b\":\n                            if text[a] == \"c\":\n                                if text[c] == \"d\":\n                                    if text[d] == \"e\":\n                                        if text[e] == \"f\":\n                                            return True\n                        elif text[a] == \"c\":\n                            if text[a] == \"d\":\n                                if text[d] == \"e\":\n                                    if text[e] == \"f\":\n                                        if text[e] == \"e\":\n                                            return True\n                        elif text[a] == \"c\":\n                            if text[a] == \"d\":\n                                if text[d] == \"e\":\n                                    if text[e] == \"f\":\n                                        if text[e] == \"d\":\n                                            return True\n                        elif text[a] == \"c\":\n                            if text[a] == \"d\":\n                                if text[d] == \"e\":\n                                    if text[e] == \"d\":\n                                        if text[e] == \"e\":\n                                            return True\n                        elif text[a] == \"d\":\n                            if text[a] == \"e\":\n                                if text[e] == \"f\":\n                                    if text[e] == \"e\":\n                                        if text[e] == \"e\":\n                                            return True\n                        elif text[a] == \"d\":\n                            if text[a] == \"e\":\n                                if text[e] == \"f\":\n                                    if text[e] == \"e\":\n                                        if text[e] == \"f\":\n                                            return True\n                        elif text[a] == \"d\":\n                            if text[a] == \"e\":\n                                if text[e] == \"e\":\n                                    if text[e] == \"e\":\n                                        if text[e] == \"d\":\n                                            return True\n                        elif text[a] == \"d\":\n                            if text[a] == \"e\":\n                                if text[e] == \"f\":\n                                    if text[e] == \"d\":\n                                        if text[e] == \"d\":\n                                            return True\n                        elif text[a] == \"e\":\n                            if text[a] == \"d\":\n                                if text[d] == \"e\":\n                                    if text[d] == \"d\":\n                                        if text[d] == \"d\":\n                                            return True\n                        elif text[a] == \"e\":\n                            if text[a] == \"d\":\n                                if text[d] == \"e\":\n                                    if text[d] == \"e\":\n                                        if text[d] == \"d\":\n                                            return True\n                        elif text[a] == \"e\":\n                            if text[a] == \"d\":\n                                if text[d] == \"e\":\n                                    if text[d] == \"e\":\n                                        if text[d] == \"d\":\n                                            return True\n                        elif text[a] == \"e\":\n                            if text[a] == \"d\":\n                                if text[d] == \"e\":\n                                    if text[d] == \"e\":\n                                        if text[d] == \"d\":\n                                            return True\n                        elif text[a] == \"e\":\n                            if text[a] == \"d\":\n                                if text[d] == \"d\":\n                                    if text[d] == \"e\":\n                                        if text[d] == \"d\":\n                                            return True\n                        elif text[a] == \"e\":\n                            if text[a] == \"d\":\n                                if text[d] == \"e\":\n                                    if text[d] == \"d\":\n                                        if text[d] == \"e\":\n                                            return True\n                        elif text[a] == \"e\":\n                            if text[a] == \"d\":\n                                if text[d] == \"e\":\n                                    if text[d] == \"e\":\n                                        if text[d] == \"d\":\n                                            return True\n                        elif text[a] == \"f\":\n                            if text[a] == \"d\":\n                                if text[d] == \"f\":\n                                    if text[d] == \"d\":\n                                        if text[d] == \"d\":\n                                            return True\n                        elif text[a] == \"f\":\n                            if text[a] == \"d\":\n                                if text[d] == \"f\":\n                                    i"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # string without spaces, single space character, all characters except a or b\n    # re.search(pattern,string)\n    # string\n    # pattern\n    # pattern = 'a' + 'b'\n    # search\n    # a = re.search('a',string)\n    # b = re.search('b',string)\n    # if a or b:\n    #     print('Found a b')\n    # else:\n    #     print('Not found')\n    # string\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found a b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = 'a' + 'b'\n    pattern = 'a' + 'b'\n    search = re.search(pattern,text)\n    if search:\n        print('Found b')\n    else:\n        print('Not found')\n    text = '"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    two_or_three = re.match(r'[ab]',text) # Two or three 'b' characters\n    if not two_or_three:\n        return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # (line 14)\n    #text = text.replace('a', 'b')\n    # (line 15)\n    text = text.lower()\n    # (line 16)\n    #text = text.replace('b', 'a')\n    text = text.replace('a', 'b')\n    # (line 17)\n    #text = text.replace('a', 'b')\n    text = text.replace('b', 'a')\n    # (line 18)\n    text = text.replace('a', 'b')\n    # (line 19)\n    text = text.replace('b', 'a')\n    # (line 20)\n    text = text.replace('a', 'b')\n    # (line 21)\n    text = text.replace('b', 'a')\n    # (line 22)\n    text = text.replace('b', 'a')\n    # (line 23)\n    text = text.replace('b', 'a')\n    # (line 24)\n    text = text.replace('b', 'a')\n    # (line 25)\n    text = text.replace('b', 'a')\n    # (line 26)\n    text = text.replace('b', 'a')\n    # (line 27)\n    text = text.replace('b', 'a')\n    # (line 28)\n    text = text.replace('b', 'a')\n    # (line 29)\n    text = text.replace('b', 'a')\n    # (line 30)\n    text = text.replace('b', 'a')\n    # (line 31)\n    text = text.replace('b', 'a')\n    # (line 32)\n    text = text.replace('b', 'a')\n    # (line 33)\n    text = text.replace('b', 'a')\n    # (line 34)\n    text = text.replace('b', 'a')\n    # (line 35)\n    text = text.replace('b', 'a')\n    # (line 36)\n    text = text.replace('b', 'a')\n    # (line 37)\n    text = text.replace('b', 'a')\n    # (line 38)\n    text = text.replace('b', 'a')\n    # (line 39)\n    text = text.replace('b', 'a')\n    # (line 40)\n    text = text.replace('b', 'a')\n    # (line 41)\n    text = text.replace('b', 'a')\n    # (line 42)\n    text = text.replace('b', 'a')\n    # (line 43)\n    text = text.replace('b', 'a')\n    # (line 44)\n    text = text.replace('b', 'a')\n    # (line 45)\n    text = text.replace('b', 'a')\n    # (line 46)\n    text = text.replace('b', 'a')\n    # (line 47)\n    text = text.replace('b', 'a')\n    # (line 48)\n    text = text.replace('b', 'a')\n    # (line 49)\n    text = text.replace('b', 'a')\n    # (line 50)\n    text = text.replace('b', 'a')\n    # (line 51)\n    text = text.replace('b', 'a')\n    # (line 52)\n    text = text.replace('b', 'a')\n    # (line 53)\n    text = text.replace('b', 'a')\n    # (line 54)\n    text = text.replace('b', 'a')\n    # (line 55)\n    text = text.replace('b', 'a')\n    # (line 56)\n    text = text.replace('b', 'a')\n    # (line 57)\n    text = text.replace('b', 'a')\n    # (line 58)\n    text = text.replace('b', 'a')\n    # (line 59)\n    text = text.replace('b', 'a')\n    # (line 60)\n    text = text.replace('b', 'a')\n    # (line 61)\n    text = text.replace('b', 'a')\n    # (line 62)\n    text = text.replace('b', 'a')\n    # (line 63)\n    text = text.replace('b', 'a')\n    # (line 64)\n    text = text.replace('b', 'a')\n    # (line 65)\n    text = text.replace('b', 'a')\n    # (line 66)\n    text = text.replace('b', 'a')\n    # (line 67)\n    text = text.replace('b', 'a')\n    # (line 68)\n    text = text.replace('b', 'a')\n    # (line 69)\n    text = text.replace('b', 'a')\n    # (line 70)\n    text = text.replace('b', 'a')\n    # (line 71)\n    text = text.replace('b', 'a')\n    # (line 72)\n    text = text.replace('b', 'a')\n    # (line 73)\n    text = text.replace('b', 'a')\n    # (line 74)\n    text = text.replace('b', 'a')\n    # (line 75)\n    text = text.replace('b', 'a')\n    # (line 76)\n    text = text.replace('b', 'a')\n    # (line 77)\n    text = text.replace('b', 'a')\n    # (line 78)\n    text = text.replace('b', 'a')\n    # (line 79)\n    text = text.replace('b', 'a')\n    # (line 80)\n    text = text.replace('b', 'a')\n    # (line 81)\n    text = text.replace('b', 'a')\n    # (line 82)\n    text = text.replace('b', 'a')\n    # (line 83)\n    text = text.replace('b', 'a')\n    # (line 84)\n    text = text.replace('b', 'a')\n    # (line 85)\n    text = text.replace('b', 'a')\n    # (line 86)\n    text = text.replace('b', 'a')\n    # (line 87)\n    text = text.replace('b', 'a')\n    # (line 88)\n    text = text.replace('b', 'a')\n    # (line 89)\n    text = text.replace('b', 'a')\n    # (line 90)\n    text = text.replace('b', 'a')\n    # (line 91)\n    text = text.replace('b', 'a')\n    # (line 92)\n    text = text.replace('b', 'a')\n    # (line 93)\n    text = text.replace('b', 'a')\n    # (line 94)\n    text = text.replace('b', 'a')\n    # (line 95)\n    text = text.replace('b', 'a')\n    # (line 96)\n    text = text.replace('b', 'a')\n    # (line 97)\n    text = text.replace('b', 'a')\n    # (line 98)\n    text = text.replace('b', 'a')\n    # (line 99)\n    text = text.replace('b', 'a')\n    # (line 100)\n    text = text.replace('b', 'a')\n    # (line 101)\n    text = text.replace('b', 'a')\n    # (line 102)\n    text = text.replace('b', 'a')\n    # (line 103)\n    text = text.replace('b', 'a')\n    # (line 104)\n    text = text.replace('b', 'a')\n    # (line 105)\n    text = text.replace('b', 'a')\n    # (line 106)\n    text = text.replace('b', 'a')\n    # (line 107)\n    text = text.replace('b', 'a')\n    # (line 108)\n    text = text.replace('b', 'a')\n    # (line 109)\n    text = text.replace('b', 'a')\n    # (line 110)\n    text = text.replace('b', 'a')\n    # (line 111)\n    text = text.replace('b', 'a')\n    # (line 112)\n    text = text.replace('"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #if text contains the 'a' character followed by two or three 'b' characters\n    text = re.findall('^.*a.*b$', text)\n    #return true if it contains the string 'a'\n    if text:\n        return 'a' in text[0]\n    else:\n        return False\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by four 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by four 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by five 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by five 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_five_six(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by six 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by six 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by seven 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by seven 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by eight 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by eight 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_eight_nine(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by eight 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by eight 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_nine_ten(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by nine 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by nine 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by ten 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by ten 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_eleven_eight(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by ten 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by ten 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_eleven_nine(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by ten 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by ten 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_nine_nineteen(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by nine 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by nine 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_nineteen_twenty(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by nine 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by nine 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_twenty_thirty(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by twenty 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by twenty 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_thirty_four(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by thirty 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by thirty 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by four 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by four 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_five_six(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by five 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by five 'cd' characters\n    text = re.findall('^.*ab.*cd$', text)\n    #return true if it contains the string 'ab'\n    if text:\n        return 'ab' in text[0]\n    else:\n        return False\ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains 'ab' characters followed by six 'cd' characters.\n    '''\n    #if text contains the 'ab' character followed by six 'cd"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a=re.search('[a-z]',text)\n    b=re.search('[a-zA-Z]',text)\n    if a!=None and b!=None:\n        if a.group(0)=='a' and b.group(0)=='b':\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or four 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_eight_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eight 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_nine_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by ten 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_twelve_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_twenty_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_thirty_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirty 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_four_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_five_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_eight_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eight 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_nine_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by ten 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_twelve_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve 'b' characters.\n    '''\n    test = re.search(r'a(b)?[a-zA-Z]', text)\n    if test is None:\n        return False\n    else:\n        return True\n    \ndef text_match_twenty_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    test = r"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_array = a[0]\n    for i in range(1, n): \n        max_sum_array = max(max_sum_array + a[i], a[i])\n    return max_sum_array \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -float('inf')\n    \n    # Step 1: initialisation\n    for i in range(n):\n        # Step 2: compute sum\n        # compute sum\n        sum = 0\n        for j in range(k):\n            sum += a[i]\n            \n        # Step 3: if sum is greater than max sum, update\n        # update to sum\n        if sum >= max_sum:\n            max_sum = sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    m = len(a)\n    if m == 0: \n        return 0\n    \n    if (k >= m): \n        return a[0] + max_sub_array_sum_repeated(a[1:], n, k - 1)\n    \n    if (m % k == 0): \n        return a[0] + max_sub_array_sum_repeated(a[1:], n, k)\n    \n    return a[0] + max_sub_array_sum_repeated(a[1:], n, k - 1)\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    i = 0\n    j = 0\n    while(i < n and j < k):\n        if a[i] + a[j] > max_sum:\n            max_sum = a[i] + a[j]\n        if a[i] + a[j] == max_sum:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    sum_l = 0\n    sum_r = 0\n    sub_array = []\n    max_sub_array = 0\n    \n    for i in range(n):\n        sub_array.append(a[i])\n    for i in range(k):\n        for j in range(n):\n            sub_array[j] = sub_array[j] + a[j]\n            if(sum_r < sub_array[j]):\n                sum_r = sub_array[j]\n        sub_array.pop(0)\n        \n        for j in range(n-1):\n            if(sum_l < sub_array[j]):\n                sum_l = sub_array[j]\n                \n        sub_array.append(a[-1])\n        for j in range(n-2, -1, -1):\n            if(sum_r < sub_array[j]):\n                sum_r = sub_array[j]\n        sub_array.pop(0)\n        \n        for j in range(n-1):\n            if(sum_l < sub_array[j]):\n                sum_l = sub_array[j]\n        sub_array.append(0)\n        for j in range(n-1):\n            if(sum_r < sub_array[j]):\n                sum_r = sub_array[j]\n        sub_array.pop(0)\n        \n        max_sub_array = max(max_sub_array, sum_r-sum_l)\n        sub_array.pop(0)\n    return max_sub_array\n    \n    \ndef test():\n    a = [8,1,7,3,1,5,4,2,9,5,6,3]\n    assert max_sub_array_sum_repeated(a, len(a), 4) == 42, \"Expected 42.\"\n    a = [8,1,7,3,1,5,4,2,9,5,6,3]\n    assert max_sub_array_sum_repeated(a, len(a), 4) == 44, \"Expected 44.\"\n    a = [2,1,3,4,2,6]\n    assert max_sub_array_sum_repeated(a, len(a), 2) == 6, \"Expected 6.\"\n    a = [2,3,2,5,4,6,2,7]\n    assert max_sub_array_sum_repeated(a, len(a), 2) == 20, \"Expected 20.\"\n    a = [2,3,2,5,4,6,2,7]\n    assert max_sub_array_sum_repeated(a, len(a), 2) == 17, \"Expected 17.\"\n    \nif __name__ == \"__main__\":\n    test("
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here\n    array = [0] * (n + 1)\n    return recur(a, 0, 0, k, array)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def largestSum(array, start, end, k):\n        if start == end:\n            return array[start]\n        \n        if start + k <= end:\n            return max(largestSum(array, start + k, end, k), largestSum(array, start, end, k) + array[start + k - 1])\n        \n        return -1\n    \n    return largestSum(a, 0, len(a), k)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find maximum sum of a contiguous array. \n    \n    ans = 0 \n    m = len(a) \n    \n    # Run the number of times until we hit the target sum \n    for i in range(0, k): \n        \n        # Add the target number \n        ans = ans + a[i] \n        \n        # If the answer is higher than the sum, then the answer is \n        # the sum \n        if ans > a[i] * k: \n            break \n        \n    return ans \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0:\n        return 0\n    \n    # Find sum of the elements of the array\n    sum_ = 0\n    for i in range(n):\n        sum_ += a[i]\n        \n    # Find the index of the largest sum\n    max_sum = 0\n    for i in range(n-k):\n        if sum_ > max_sum:\n            max_sum = sum_\n        sum_ -= a[i+k-1]\n    \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1: \n        return a[0]\n    elif n == 2: \n        return max(a[0], a[1])\n    else: \n        half_len = int(n/2) \n        half_sum = 0 \n        for i in range(1, half_len+1): \n            for j in range(i, n): \n                half_sum += a[j] \n        if half_len == 1: \n            return max(half_sum, a[half_len])\n        else: \n            return max(a[0:half_len]+a[half_len:n], half_sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for x in range(1,n+1):\n        sum += (x**2)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i * i\n        i += 1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i ** 2)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    square = 0\n    \n    for i in range(1,n+1):\n        square = square + i**2\n    \n    return square\n    \n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    '''\n    Initialize Sum = 0\n    Iterate through the first number\n    Add the first number to the sum\n    Repeat the loop until the sum exceeds 1\n    '''\n    Sum = 0\n    while Sum < n :\n        Sum = Sum + (Sum + 2)\n    return Sum\nprint(square_Sum(5))"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans = ans + i * i\n    return ans\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i%2 == 0:\n            sum = sum + i**2\n        else:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(n):\n        sum += num\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if(i % 2 == 0):\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2 = [ [], [], [], [], [], [], [] ]\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if j == 0:\n                list2[i].append(list1[i][j])\n            elif j == 1:\n                list2[i].append(list1[i][j] + max(list1[i][j+1], list1[i][j+2]))\n            elif j == 2:\n                list2[i].append(list1[i][j] + max(list1[i][j+1], list1[i][j+2] + list1[i][j+3]))\n            else:\n                list2[i].append(list1[i][j] + max(list1[i][j+1], list1[i][j+2] + list1[i][j+3] + list1[i][j+4]))\n    \n    return max(list2[0])\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #Create a function to get the maximum length of a list of lists\n    def max_length2(list1):\n        max_length = 0\n        for i in list1:\n            if len(i) > max_length:\n                max_length = len(i)\n        return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[0])):\n            if len(str(list1[i][j])) > maximum_length:\n                maximum_length = len(str(list1[i][j]))\n    return maximum_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for i in list1:\n        for j in range(len(i)):\n            result.append(i[j])\n    return max(result)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # find the max length of each element in the list\n    maxLength = 0\n    lengths = []\n    for ele in list1:\n        lengths.append(len(ele))\n    # find the max length\n    for i in range(len(lengths)):\n        if lengths[i] > maxLength:\n            maxLength = lengths[i]\n    return maxLength\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # check if empty list\n    if len(list1) == 0:\n        return 0\n    # check if only one list\n    elif len(list1) == 1:\n        return len(list1[0])\n    # check for all lists\n    else:\n        # return the length of the first list\n        return max(max_length(list1[0]), max_length(list1[1:]))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_adjacent_post(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n > 2: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) \n    else: \n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #A recursive algorithm. \n    #A total of k^2 ways is possible. \n    #The first way is to look for the smallest numbers. \n    #For example, there are two adjacent posts, and the second one has the same color. \n    #The smallest number is the middle value. \n    #The second smallest number has the same color. \n    #The count is made up of numbers of ways in the middle which are equal to the smallest number in the middle. \n    #A ways is made up of 1 way which is equal to k, 2 ways is made up of k way by the first number which is equal to k-1. \n    #So the fact is that the smaller number is not the answer. \n    #The last number is equal to the last number which is the largest number. \n    #For example, n = 2, k = 2, there are 4 ways. \n    #n = 5, k = 2, there are 4 ways. So the biggest number is k = 2.\n    #The biggest number is k = 4, so the biggest number in k = 4. \n    #So the last number is the last number. \n    #The last number is the last number. \n    #So, n = 5, k = 3, there are 2 ways, so the second way is the second number. \n    #The second way is the second number, so the last number is k = 1.\n    #So, n = 3, k = 3, there are 3 ways, so the first way is k = 3. \n    #So the first way is the 1. \n    #So, n = 3, k = 2, there are 2 ways, so the second way is k = 2. \n    #So, k = 2, there are 2 ways. So the last way is k = 1. \n    #So the last way is k = 1. \n    #So, n = 2, k = 1, there are 1 way. \n    #So, k = 1, there are 1 way. \n    #So, n = 1, k = 0, there are 0 ways. \n    #So, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0, k = 0, there are 0 ways. \n    #So, n = 0"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 2:\n        return 0\n    \n    dp = [0] * (n+k)\n    dp[1] = 1\n    dp[2] = 2\n    \n    for i in range(3, n+k):\n        dp[i] = dp[i-1] + dp[i-2]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    global_count = 0\n    \n    # if k <= 0 or n <= 0 or k <= (n*2 - 1): return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    '''\n    Expected Output:\n    4\n    3\n    2\n    1\n    \n    '''\n    \n    #return\n    if(k > n or k < 2):\n        return 0\n    \n    if n == 2:\n        return 1\n    \n    if n == 3:\n        return 2\n    \n    d = [0] * (n + 1)\n    d[0] = 1\n    d[1] = 1\n    d[2] = 2\n    for i in range(3, n + 1):\n        d[i] = (d[i - 1] + d[i - 2] + 2 * d[i - 3]) % 10007\n    return d[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base Case\n    if n == 0 or k == 0: \n        return 1\n    # Number of ways to paint fence for n posts and k colors\n    ways = int((k + 1) / 2) * count_no_of_ways(n - 1, k)\n    # Number of ways to paint fence for n posts and k colors \n    # which are odd\n    ways += 1 if k % 2 == 1 else 0\n    # Number of ways to paint fence for n posts and k colors\n    ways += count_no_of_ways(n - 1, k - 1)\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #case 1\n    # if n == 0 and k == 0: \n    #     return 1 \n    # if n == 0: \n    #     return 0 \n    # if k == 0: \n    #     return 1 \n    # if n == 1: \n    #     return k \n    # if k == 1: \n    #     return n \n    # if k == 2: \n    #     return 2 \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1:\n        return 1\n    elif n < 2 or k < 2:\n        return 0\n    else:\n        return count_no_of_ways(n-1, k)+count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1: \n        return 1\n    if k == 1: \n        return 0\n    if n == 2: \n        return 1\n    ways = 0\n    for i in range(1, n+1): \n        ways += count_no_of_ways(n-i, k-1)\n    return ways\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = 1\n    for i in range(m,n):\n        q = q * 2\n        if i < n:\n            q = q * 10\n    return q\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #dividing by 2 to give the exact quotient\n    n = (n//2)\n    #quotient\n    return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        return 0\n    return round(n / m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        quotient = n/m\n    except:\n        print('The input value is not a valid integer')\n    print(f\"The quotient is {quotient}\")\n    return quotient\ndef round_down_digits(x):\n    '''\n    The function takes the value of x as an input and returns a rounded down value to the nearest integer.\n    '''\n    return int(str(x).replace(\".\", \"\").replace(\",\", \"\").replace(\" \", \"\").replace(\"-\", \"\"))\ndef print_hi(name):\n    '''\n    Print hi to the user\n    '''\n    print(f\"Hi, {name}\")\n    print('welcome to the game')\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return 0\n    if n==1 or m==1:\n        return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n1=n+1\n    n2=n+2\n    n3=n+3\n    n4=n+4\n    n5=n+5\n    n6=n+6\n    n7=n+7\n    n8=n+8\n    n9=n+9\n    n10=n+10\n    n11=n+11\n    n12=n+12\n    n13=n+13\n    n14=n+14\n    n15=n+15\n    n16=n+16\n    n17=n+17\n    n18=n+18\n    n19=n+19\n    n20=n+20\n    n21=n+21\n    n22=n+22\n    n23=n+23\n    n24=n+24\n    n25=n+25\n    n26=n+26\n    n27=n+27\n    n28=n+28\n    n29=n+29\n    n30=n+30\n    n31=n+31\n    n32=n+32\n    n33=n+33\n    n34=n+34\n    n35=n+35\n    n36=n+36\n    n37=n+37\n    n38=n+38\n    n39=n+39\n    n40=n+40\n    n41=n+41\n    n42=n+42\n    n43=n+43\n    n44=n+44\n    n45=n+45\n    n46=n+46\n    n47=n+47\n    n48=n+48\n    n49=n+49\n    n50=n+50\n    n51=n+51\n    n52=n+52\n    n53=n+53\n    n54=n+54\n    n55=n+55\n    n56=n+56\n    n57=n+57\n    n58=n+58\n    n59=n+59\n    n60=n+60\n    n61=n+61\n    n62=n+62\n    n63=n+63\n    n64=n+64\n    n65=n+65\n    n66=n+66\n    n67=n+67\n    n68=n+68\n    n69=n+69\n    n70=n+70\n    n71=n+71\n    n72=n+72\n    n73=n+73\n    n74=n+74\n    n75=n+75\n    n76=n+76\n    n77=n+77\n    n78=n+78\n    n79=n+79\n    n80=n+80\n    n81=n+81\n    n82=n+82\n    n83=n+83\n    n84=n+84\n    n85=n+85\n    n86=n+86\n    n87=n+87\n    n88=n+88\n    n89=n+89\n    n90=n+90\n    n91=n+91\n    n92=n+92\n    n93=n+93\n    n94=n+94\n    n95=n+95\n    n96=n+96\n    n97=n+97\n    n98=n+98\n    n99=n+99\n    n100=n+100\n    n101=n+101\n    n102=n+102\n    n103=n+103\n    n104=n+104\n    n105=n+105\n    n106=n+106\n    n107=n+107\n    n108=n+108\n    n109=n+109\n    n110=n+110\n    n111=n+111\n    n112=n+112\n    n113=n+113\n    n114=n+114\n    n115=n+115\n    n116=n+116\n    n117=n+117\n    n118=n+118\n    n119=n+119\n    n120=n+120\n    n121=n+121\n    n122=n+122\n    n123=n+123\n    n124=n+124\n    n125=n+125\n    n126=n+126\n    n127=n+127\n    n128=n+128\n    n129=n+129\n    n130=n+130\n    n131=n+131\n    n132=n+132\n    n133=n+133\n    n134=n+134\n    n135=n+135\n    n136=n+136\n    n137=n+137\n    n138=n+138\n    n139=n+139\n    n140=n+140\n    n141=n+141\n    n142=n+142\n    n143=n+143\n    n144=n+144\n    n145=n+145\n    n146=n+146\n    n147=n+147\n    n148=n+148\n    n149=n+149\n    n150=n+150\n    n151=n+151\n    n152=n+152\n    n153=n+153\n    n154=n+154\n    n155=n+155\n    n156=n+156\n    n157=n+157\n    n158=n+158\n    n159=n+159\n    n160=n+160\n    n161=n+161\n    n162=n+162\n    n163=n+163\n    n164=n+164\n    n165=n+165\n    n166=n+166\n    n167=n+167\n    n168=n+168\n    n169=n+169\n    n170=n+170\n    n171=n+171\n    n172=n+172\n    n173=n+173\n    n174=n+174\n    n175=n+175\n    n176=n+176\n    n177=n+177\n    n178=n+178\n    n179=n+179\n    n180=n+180\n    n181=n+181\n    n182=n+182\n    n183=n+183\n    n184=n+184\n    n185=n+185\n    n186=n+186\n    n187=n+187\n    n188=n+188\n    n189=n+189\n    n190=n+190\n    n191=n+191\n    n192=n+192\n    n193=n+193\n    n194=n+194\n    n195=n+195\n    n196=n+196\n    n197=n+197\n    n198=n+198\n    n199=n+199\n    n200=n+200\n    n201=n+201\n    n202=n+202\n    n203=n+203\n    n204=n+204\n    n205=n+205\n    n206=n+206\n    n207=n+207\n    n208=n+208\n    n209=n+209\n    n210=n+210\n    n211=n+211\n    n212=n+212\n    n213=n+213\n    n214=n+214\n    n215=n+215\n    n216=n+216\n    n217=n+217\n    n218=n+218\n    n219=n+219\n    n220=n+220\n    n221=n+221\n    n222=n+222\n    n223=n+223\n    n224=n+224\n    n225=n+225\n    n226=n+226\n    n227=n+227\n    n228=n+228\n    n229=n+229\n    n230=n+230\n    n231=n+231\n    n232=n+232\n    n233=n+233\n    n234=n+234\n    n235=n+235\n    n236=n+236\n    n237=n+237\n    n238=n+238\n    n239=n+239\n    n240=n+240\n    n241=n+241\n    n242=n+242\n    n243=n+243\n    n244=n+244\n    n245=n+245\n    n246=n+246\n    n247=n+247\n    n248=n+248\n    n249=n+249\n    n250=n+250\n    n251=n+251\n    "
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    #Use floor division operator \n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Make a function that returns the modulo of n/m.\n    def mod_n_m(n,m):\n        if n<m:\n            return mod_n_m(m,n)\n        else:\n            return n%m\n    # Make a function that returns the quotient of n/m using the modular inverse.\n    def mod_quotient(n,m):\n        mod_n_m = mod_n_m(n,m)\n        return mod_n_m\n    # Make a function that returns the square root of the n/m.\n    def square_root(n,m):\n        mod_n_m = mod_n_m(n,m)\n        mod_n_m = mod_n_m * mod_n_m\n        return mod_n_m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n==m):\n        return n\n    else:\n        return find(n//m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return m\n    else:\n        return find(n, m//10)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return h/2.0\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    l,r,u = w,h,h\n    m,n,s = l+r+u,l+r,l+u+n\n    if m<n<s and m<u<s and m==s and n==u:\n        return l,r,u\n    else:\n        return \"end\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        return h/2\n    elif w < h:\n        return w/2\n    return w\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    if w > h:\n        return w/2\n    elif w < h:\n        return w/2\n    return w\ndef otherside_up(w,h):\n    '''\n    Write a function to find the third side of a up triangle.\n    '''\n    if w > h:\n        return (w-h) / 2\n    elif w < h:\n        return (w+h) / 2\n    return w\ndef otherside_down(w,h):\n    '''\n    Write a function to find the third side of a down triangle.\n    '''\n    if w > h:\n        return (w+h) / 2\n    elif w < h:\n        return (w-h) / 2\n    return w\ndef orientation(p1,p2,p3):\n    '''\n    Write a function to determine the orientation of a triangle.\n    '''\n    if p1[0] < p2[0]:\n        return 0\n    elif p1[0] > p2[0]:\n        return 1\n    elif p2[0] < p3[0]:\n        return 2\n    elif p2[0] > p3[0]:\n        return 3\n    return 4\ndef angle(p1,p2,p3,p4):\n    '''\n    Write a function to determine the angle of a triangle.\n    '''\n    if p1[0] > p4[0]:\n        return math.pi/2\n    elif p2[0] > p4[0]:\n        return math.pi - math.acos((p3[0] - p4[0])/2/(p2[0] - p4[0]))\n    elif p3[0] > p4[0]:\n        return math.acos((p1[0] - p4[0])/2/(p3[0] - p4[0]))\n    elif p1[0] > p3[0]:\n        return math.acos((p2[0] - p3[0])/2/(p1[0] - p3[0]))\n    elif p2[0] > p1[0]:\n        return math.acos((p3[0] - p1[0])/2/(p2[0] - p1[0]))\n    elif p3[0] > p2[0]:\n        return math.acos((p4[0] - p2[0])/2/(p3[0] - p2[0]))\n    elif p1[0] > p3[0]:\n        return math.acos((p1[0] - p3[0])/2/(p1[0] - p3[0]))\n    elif p2[0] > p1[0]:\n        return math.acos((p2[0] - p1[0])/2/(p2[0] - p1[0]))\n    elif p3[0] > p2[0]:\n        return math.acos((p3[0] - p2[0])/2/(p3[0] - p2[0]))\ndef left_side(triangle,side):\n    '''\n    Write a function to determine the triangle's side based on the third side.\n    '''\n    if triangle[0][0] < triangle[1][0]:\n        return triangle[0][0]\n    elif triangle[0][0] > triangle[1][0]:\n        return triangle[1][0]\n    elif triangle[0][0] == triangle[1][0]:\n        return triangle[0][0]\n    return triangle[1][0]\ndef right_side(triangle,side):\n    '''\n    Write a function to determine the triangle's side based on the third side.\n    '''\n    if triangle[0][0] > triangle[1][0]:\n        return triangle[0][0]\n    elif triangle[0][0] < triangle[1][0]:\n        return triangle[1][0]\n    elif triangle[0][0] == triangle[1][0]:\n        return triangle[0][0]\n    return triangle[1][0]\ndef left_side_up(triangle,side):\n    '''\n    Write a function to determine the triangle's side based on the third side.\n    '''\n    if triangle[0][0] < triangle[1][0]:\n        return triangle[0][0]\n    elif triangle[0][0] > triangle[1][0]:\n        return triangle[1][0]\n    return triangle[0][0]\ndef left_side_down(triangle,side):\n    '''\n    Write a function to determine the triangle's side based on the third side.\n    '''\n    if triangle[0][0] < triangle[1][0]:\n        return triangle[0][0]\n    elif triangle[0][0] > triangle[1][0]:\n        return triangle[1][0]\n    return triangle[0][0]\ndef up_side(triangle,side):\n    '''\n    Write a function to determine the triangle's side based on the third side.\n    '''\n    if triangle[0][0] > triangle[1][0]:\n        return triangle[0][0]\n    elif triangle[0][0] < triangle[1][0]:\n        return triangle[1][0]\n    return triangle[0][0]\ndef down_side(triangle,side):\n    '''\n    Write a function to determine the triangle's side based on the third side.\n    '''\n    if triangle[0][0] > triangle[1][0]:\n        return triangle[0][0]\n    elif triangle[0][0] < triangle[1][0]:\n        return triangle[1][0]\n    return triangle[0][0]\ndef distance(p1,p2):\n    '''\n    Write a function to determine the distance between two points.\n    '''\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\ndef perpendicular(triangle,side):\n    '''\n    Write a function to determine whether two triangles have the same side.\n    '''\n    if side == 0:\n        if triangle[0][0] < triangle[1][0]:\n            return False\n        elif triangle[0][0] > triangle[1][0]:\n            return True\n        elif triangle[0][0] == triangle[1][0]:\n            return False\n        return False\n    if side == 1:\n        if triangle[0][0] < triangle[1][0]:\n            return False\n        elif triangle[0][0] > triangle[1][0]:\n            return True\n        elif triangle[0][0] == triangle[1][0]:\n            return False\n        return False\n    return True\ndef triangle_is_rightangled(triangle):\n    '''\n    Write a function to determine if a triangle is right angled.\n    '''\n    if triangle[0][0] > triangle[1][0]:\n        return True\n    elif triangle[0][0] < triangle[1][0]:\n        return False\n    return False\ndef triangle_is_leftangled(triangle):\n    '''\n    Write a function to determine if a triangle is left angled.\n    '''\n    if triangle[0][0] < triangle[1][0]:\n        return True\n    elif triangle[0][0] > triangle[1][0]:\n        return False\n    return False\ndef triangle_is_up(triangle):\n    '''\n    Write a function to determine if a triangle is up.\n    '''\n    if triangle[0][0] < triangle[1][0]:\n        return True\n    elif triangle[0][0] > triangle[1][0]:\n        return False\n    return False\ndef triangle_is_down(triangle):\n    '''\n    Write a function to determine if a triangle is down.\n    '''\n    if triangle[0][0] < triangle[1][0]:\n        return True\n    elif triangle[0][0] > triangle[1][0]:\n        return False\n    return False\ndef triangle"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w/2;\n    b = h/2;\n    c = a*a + b*b\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # The convention of this function is that you\n    # define each side of the triangle as a 2d list\n    # here you'll use a list comprehension to create\n    # a list of tuples, then use the first tuple to\n    # extract the base value and the second tuple to\n    # extract the height.\n    # The second tuple is used to extract the\n    # third side of the triangle.\n    # So the third side of the triangle is\n    # calculated by:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # The dimensions of the triangle are given\n    # by the values in the third tuple\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # The first value of the third tuple is the\n    # base value of the triangle. So,\n    # the first value is the height of the\n    # triangle. So, the third value is the height\n    # of the triangle.\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h>=w/2:\n        return w/2\n    elif h==w/2:\n        return h/2\n    else:\n        return w-w/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = (w/2)**2 + (h/2)**2\n    b = (w/2)**2\n    c = (h/2)**2\n    x = (b**2 - 4*a*c)/(2*a)\n    if x < 0:\n        return None\n    y = (-b + math.sqrt(x))/2*a\n    z = (-b - math.sqrt(x))/2*a\n    t = math.sqrt(x)\n    return t,y,z\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        a=w\n        b=h\n        c=a\n    else:\n        a=h\n        b=w\n        c=a\n    ang = math.atan((b-a)/(2*c))\n    return ang\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # your code goes here\n    return 3\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #these are the indices for a triangle.\n    x1 = int(math.sqrt(h))\n    x2 = x1 + 1\n    x3 = int(math.sqrt(2 * h))\n    #print (x1,x2,x3)\n    \n    return x1 + x2 + x3\n    \ndef triangle_area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return w*h/2\n    \ndef print_message(message):\n    '''\n    A function to print a message\n    '''\n    print (message)\n    \ndef main():\n    '''\n    This is a starter code.\n    '''\n    #Find the number of sides of triangle.\n    h = float(input('Enter the length of a triangle: '))\n    w = float(input('Enter the width of a triangle: '))\n    #Find the area of a triangle.\n    area = triangle_area(w,h)\n    print ('The area of a triangle is '+str(area))\n    \n    #Ask the user for a side of a triangle.\n    side = float(input('Enter a side of a triangle: '))\n    #Check if the side is a valid value.\n    side = float(side)\n    if side > 0:\n        #Find the area of the triangle.\n        area = triangle_area(w,side)\n        #Print the area of the triangle.\n        print ('The area of a triangle is '+str(area))\n        #Find the third side of a right angled triangle.\n        x1 = otherside_rightangle(w,side)\n        x2 = otherside_rightangle(side,w)\n        x3 = otherside_rightangle(side,2*side)\n        #print (x1,x2,x3)\n        #Print the area of the triangle.\n        print ('The area of a right angled triangle is '+str(area))\n    else:\n        print ('The value for the side is not valid!')\n        \nif __name__ == '__main__':\n    main()\n    \n'''\n    1.\n    ---    ---    ---    ---\n    2    2    1    1    2    2\n    ---    ---    ---    ---\n    3    3    2    2    3    3\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    4    4    3    3    4    4\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    5    5    4    4    5    5\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    6    6    5    5    6    6\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    7    7    6    6    7    7\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n    ---    ---    ---    ---\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val=0\n    for i in listval:\n        if max_val<i:\n            max_val=i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        lowest_value = listval[0]\n        for el in listval:\n            if el < lowest_value:\n                lowest_value = el\n        return lowest_value\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    if len(listval) == 1:\n        return listval[0]\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if max_val<listval[i]:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in range(len(listval)):\n        if(listval[i] > max_val):\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for element in listval:\n        if element > max:\n            max = element\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    def helper(num):\n        if num == 1:\n            return 1\n        if num % 2 == 0:\n            return helper(3 * num + 1)\n        else:\n            return helper(num / 2) + helper(num / 2)\n    return helper(number"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_lst = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_lst.append(i)\n    return sum(div_lst)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return number+sum_div(number-1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Declare a dictionary of divisors\n    divisors = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}\n    \n    # Initialize result\n    sum = 0\n    \n    # Loop through all the divisors\n    for divisor in divisors.keys():\n        # If divisor is not divisible by the number, then skip it\n        if divisor < number:\n            continue\n        # If divisor is divisible by number, then add it to the sum\n        if number % divisor == 0:\n            sum += divisors[divisor]\n            \n    # Return the sum of all divisors\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for divisor in range(1,number + 1):\n        if number % divisor == 0:\n            total += divisor\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number % 2 == 0:\n        return number + sum_div(number // 2)\n    else:\n        return number * 2 + sum_div(number // 2)\n        \n    \n    \nif __name__ == '__main__':\n    print(\"Example 1:\")\n    print(sum_div(1))\n    print(sum_div(2))\n    print(sum_div(3))\n    print(sum_div(10))\n    print(\"Example 2:\")\n    print(sum_div(0))\n    print(sum_div(10000000000000000000000000000000))\n    print(sum_div(10000000000000000000000000000000*10))\n    print(sum_div(10000000000000000000000000000000*10**10))"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_total = 0\n    for num in range(1, number + 1):\n        if number % num == 0:\n            div_total += num\n    return div_total\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = []\n    for i in range(1,number + 1):\n        if number%i==0:\n            div.append(i)\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 1\n    sum = 0\n    while(i*i <= number):\n        if number%i == 0:\n            sum += i\n            number = number//i\n        else:\n            i+=1\n    return sum\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Python implementation for finding inversions using dictionaries\n    # Time Complexity = O(n^2)\n    # Space Complexity = O(n)\n    count = {}\n    for i in range(len(arr)):\n        count[arr[i]] = count.get(arr[i], 0) + 1\n    inv_count = 0\n    for i in count:\n        if i < (len(arr)-1) and count[i] > count[i+1]:\n            inv_count += count[i+1] - count[i]\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)-1): \n        for j in range(0, i+1): \n            if arr[i] > arr[j]: \n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    m = len(arr)\n    inv_count = 0\n    \n    for i in range(0, m):\n        for j in range(i, m):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    left, right = 0, len(arr) - 1\n    left_inversion_count = 0\n    right_inversion_count = 0\n    count = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    if len(arr) < 2: \n        return 0\n    \n    prev = arr[0] \n    inv = 0\n    \n    # For all the elements in the array. \n    for i in range(1, len(arr)): \n        \n        if arr[i] < prev: \n            inv += 1\n        \n        if arr[i] > prev: \n            inv -= 1\n        \n        if inv == 0: \n            prev = arr[i]\n        \n    return inv \n  "
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    first = arr[0]\n    last = arr[-1]\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inversions += 1\n    return inversions\n \ndef main(): \n    arr = [12, 11, 13, 5, 6, 7] \n    print(get_Inv_Count(arr)) \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1: \n        return len(arr) \n    else: \n        count = 0 \n        start = 0\n        end = 0\n        mid = (start + end) // 2\n        for i in range(len(arr)): \n            if arr[i] > arr[mid]: \n                end = mid \n                mid = (start + end) // 2\n            elif arr[i] < arr[mid]: \n                start = mid \n                mid = (start + end) // 2\n            else: \n                if arr[mid] > arr[i]: \n                    count += 1 \n                else: \n                    count = 0\n            count += len(arr) - count \n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    temp = 0\n    for i in range(len(arr)):\n        if(arr[i] > arr[temp]):\n            temp = i\n            inv += 1\n    return inv\n    \n    \ndef get_Median(arr):\n    '''\n    Return the median of the input array.\n    '''\n    if(len(arr) % 2 == 0):\n        return (arr[len(arr)//2] + arr[(len(arr)//2)-1]) / 2\n    else:\n        return arr[len(arr)//2]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 is None:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # base case\n    if len(list1) == 0:\n        return []\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    if not list1:\n        return output\n    for i in list1:\n        if type(i) == list:\n            for j in flatten_list(i):\n                output.append(j)\n        else:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n    return flatten_list(list1[0]) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1)!= list:\n        return list1\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain(*map(flatten_list,list1)))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    if len(list1) <= 0:\n        return new_list\n    else:\n        for i in range(len(list1)):\n            if type(list1[i]) is list:\n                new_list.append(flatten_list(list1[i]))\n            else:\n                new_list.append(list1[i])\n    return new_list\n    \n    \ndef flatten_dictionary(dict1):\n    '''\n    Write a function that flattens a given dictionary structure.\n    '''\n    new_list = {}\n    if dict1 == {}:\n        return new_list\n    else:\n        for i in dict1:\n            if type(dict1[i]) is dict:\n                new_list.update(flatten_dictionary(dict1[i]))\n            else:\n                new_list[i] = dict1[i]\n    return new_list\n    \n    "
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # write your code here\n    if not list1:\n        return []\n    if isinstance(list1, list):\n        list1 = list1[0]\n    if isinstance(list1, dict):\n        list1 = flatten_list(list1.values())\n        list1.append(list1)\n    else:\n        list1 = flatten_list([list1, list1])\n    return list1\n    \n    \n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 1:\n        return stdata[0][0]\n    max_agg = 0\n    for i in range(len(stdata)):\n        agg = stdata[i][0]\n        if agg > max_agg:\n            max_agg = agg\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_list = []\n    max_aggregate_list = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata:\n        aggregate_list.append(row[2])\n    for i in range(len(stdata)):\n        if i == len(stdata)-1:\n            aggregate_list.append(max(aggregate_list))\n            max_aggregate_list.append(max(aggregate_list))\n        else:\n            aggregate_list.append(aggregate_list[i+1] + stdata[i][2])\n            max_aggregate_list.append(max(aggregate_list))\n    return max(max_aggregate_list)\n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    aggregate_list = []\n    min_aggregate_list = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata:\n        aggregate_list.append(row[2])\n    for i in range(len(stdata)):\n        if i == len(stdata)-1:\n            aggregate_list.append(min(aggregate_list))\n            min_aggregate_list.append(min(aggregate_list))\n        else:\n            aggregate_list.append(aggregate_list[i+1] + stdata[i][2])\n            min_aggregate_list.append(min(aggregate_list))\n    return min(min_aggregate_list)\n    \ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    aggregate_list = []\n    mean_aggregate_list = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata:\n        aggregate_list.append(row[2])\n    for i in range(len(stdata)):\n        if i == len(stdata)-1:\n            aggregate_list.append(sum(aggregate_list)/len(aggregate_list))\n            mean_aggregate_list.append(sum(aggregate_list)/len(aggregate_list))\n        else:\n            aggregate_list.append(aggregate_list[i+1] + stdata[i][2])\n            mean_aggregate_list.append(sum(aggregate_list)/len(aggregate_list))\n    return sum(mean_aggregate_list)/len(mean_aggregate_list)\n    \ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    aggregate_list = []\n    avg_aggregate_list = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata:\n        aggregate_list.append(row[2])\n    for i in range(len(stdata)):\n        if i == len(stdata)-1:\n            aggregate_list.append(sum(aggregate_list)/len(aggregate_list))\n            avg_aggregate_list.append(sum(aggregate_list)/len(aggregate_list))\n        else:\n            aggregate_list.append(aggregate_list[i+1] + stdata[i][2])\n            avg_aggregate_list.append(sum(aggregate_list)/len(aggregate_list))\n    return sum(avg_aggregate_list)/len(avg_aggregate_list)\n    \ndef median_aggregate(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    aggregate_list = []\n    median_aggregate_list = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata:\n        aggregate_list.append(row[2])\n    for i in range(len(stdata)):\n        if i == len(stdata)-1:\n            aggregate_list.append(round(sum(aggregate_list)/len(aggregate_list),1))\n            median_aggregate_list.append(round(sum(aggregate_list)/len(aggregate_list),1))\n        else:\n            aggregate_list.append(aggregate_list[i+1] + stdata[i][2])\n            median_aggregate_list.append(round(sum(aggregate_list)/len(aggregate_list),1))\n    return round(sum(median_aggregate_list)/len(median_aggregate_list),1)\n    \ndef mode_aggregate(stdata):\n    '''\n    Write a function to calculate the mode aggregate from the list of tuples.\n    '''\n    aggregate_list = []\n    mode_aggregate_list = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata:\n        aggregate_list.append(row[2])\n    for i in range(len(stdata)):\n        if i == len(stdata)-1:\n            aggregate_list.append(max(aggregate_list))\n            mode_aggregate_list.append(max(aggregate_list))\n        else:\n            aggregate_list.append(aggregate_list[i+1] + stdata[i][2])\n            mode_aggregate_list.append(max(aggregate_list))\n    return max(mode_aggregate_list)\n    \ndef standard_deviation(stdata):\n    '''\n    Write a function to calculate the standard deviation from the list of tuples.\n    '''\n    std_deviation = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata:\n        std_deviation.append(row[2])\n    for i in range(len(stdata)):\n        if i == len(stdata)-1:\n            std_deviation.append(round(sum(std_deviation)/len(std_deviation),1))\n        else:\n            std_deviation.append(std_deviation[i+1] + stdata[i][2])\n    return round(sum(std_deviation)/len(std_deviation),1)\n    \ndef standard_deviation_plot(stdata):\n    '''\n    Write a function to plot the standard deviation of a list of tuples.\n    '''\n    std_deviation_list = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata:\n        std_deviation_list.append(row[2])\n    std_deviation = round(sum(std_deviation_list)/len(std_deviation_list),1)\n    plt.scatter(range(len(std_deviation_list)),std_deviation_list)\n    plt.title('Standard deviation of the data')\n    plt.xlabel('Data')\n    plt.ylabel('Standard deviation')\n    plt.show()\n    \ndef correlation(stdata):\n    '''\n    Write a function to calculate the correlation of the data.\n    '''\n    correlation_list = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata:\n        correlation_list.append(row[2])\n    for i in range(len(stdata)):\n        if i == len(stdata)-1:\n            correlation_list.append(round(correlation_list[i+1]/(stdata[i][2]-stdata[i][1]),1))\n        else:\n            correlation_list.append(correlation_list[i+1]+(stdata[i][2]-stdata[i][1])*(stdata[i][2]-stdata[i][1])/(stdata[i][2]-stdata[i][0]))\n    return round(correlation_list[0]/(correlation_list[1]+correlation_list[2]),1)\n    \ndef median_correlation(stdata):\n    '''\n    Write a function to calculate the median correlation of the data.\n    '''\n    median_correlation_list = []\n    if len(stdata) == 0:\n        return 0\n    for row in stdata"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_tuple = []\n    for entry in stdata:\n        if entry[1] not in max_aggregate_tuple:\n            max_aggregate_tuple.append(entry[1])\n    return max(max_aggregate_tuple)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_data = defaultdict(list)\n    for datum in stdata:\n        max_aggregate_data[datum[0]].append(datum[1])\n    return max(max_aggregate_data.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for tup in stdata:\n        aggregate += tup[1]\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return 0\n    max = 0\n    for (n,i) in stdata:\n        max = max + n * i\n    return max\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = stdata[0]\n    l = []\n    for k in data:\n        l.append(k[0])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggreg = 0\n    for s, t in stdata:\n        aggreg = max(aggreg, t)\n    return aggreg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #Write your code here\n    max_aggregate = 0\n    max_aggregate = max(max_aggregate, max(t[1] for t in stdata))\n    for t in stdata:\n        if t[1] == max_aggregate:\n            max_aggregate = t[0]\n    return max_aggregate\n    \ndef max_common_value(stdata):\n    '''\n    Write a function to calculate the maximum common value from the list of tuples.\n    '''\n    #Write your code here\n    max_common_value = 0\n    max_common_value = max(max_common_value, max(t[1] for t in stdata))\n    for t in stdata:\n        if t[1] == max_common_value:\n            max_common_value = t[0]\n    return max_common_value\n    \ndef min_common_value(stdata):\n    '''\n    Write a function to calculate the minimum common value from the list of tuples.\n    '''\n    #Write your code here\n    min_common_value = 0\n    min_common_value = min(min_common_value, min(t[1] for t in stdata))\n    for t in stdata:\n        if t[1] == min_common_value:\n            min_common_value = t[0]\n    return min_common_value\n    \ndef min_value_list(stdata):\n    '''\n    Write a function to calculate the minimum value list from the list of tuples.\n    '''\n    #Write your code here\n    min_value_list = []\n    for t in stdata:\n        if t[1] < min(t[1] for t in stdata):\n            min_value_list.append(t[1])\n    return min_value_list\n    \ndef min_index(stdata):\n    '''\n    Write a function to calculate the minimum index from the list of tuples.\n    '''\n    #Write your code here\n    min_index = 0\n    for i, t in enumerate(stdata):\n        if t[1] < min(t[1] for t in stdata):\n            min_index = i\n    return min_index\n    \ndef max_min_pair(stdata):\n    '''\n    Write a function to calculate the maximum and minimum pairs from the list of tuples.\n    '''\n    #Write your code here\n    max_min_pair = []\n    for t in stdata:\n        if t[1] < max(t[1] for t in stdata):\n            max_min_pair.append(t)\n    return max_min_pair\n    \ndef min_min_pair(stdata):\n    '''\n    Write a function to calculate the minimum and minimum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_min_pair = []\n    for t in stdata:\n        if t[1] > min(t[1] for t in stdata):\n            min_min_pair.append(t)\n    return min_min_pair\n    \ndef min_max_pair(stdata):\n    '''\n    Write a function to calculate the minimum and maximum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_max_pair = []\n    for t in stdata:\n        if t[1] > max(t[1] for t in stdata):\n            min_max_pair.append(t)\n    return min_max_pair\n    \ndef min_max_pair_non_duplicated(stdata):\n    '''\n    Write a function to calculate the minimum and maximum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_max_pair = []\n    for t in stdata:\n        if t not in stdata:\n            min_max_pair.append(t)\n    return min_max_pair\n    \ndef min_min_pair_non_duplicated(stdata):\n    '''\n    Write a function to calculate the minimum and minimum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_min_pair = []\n    for t in stdata:\n        if t not in stdata:\n            min_min_pair.append(t)\n    return min_min_pair\n    \ndef min_max_pair_non_duplicated_filter(stdata):\n    '''\n    Write a function to calculate the minimum and maximum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_max_pair = []\n    for t in stdata:\n        if t not in stdata and t[1] > min(t[1] for t in stdata):\n            min_max_pair.append(t)\n    return min_max_pair\n    \ndef min_min_pair_non_duplicated_filter(stdata):\n    '''\n    Write a function to calculate the minimum and minimum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_min_pair = []\n    for t in stdata:\n        if t not in stdata and t[1] < min(t[1] for t in stdata):\n            min_min_pair.append(t)\n    return min_min_pair\n    \ndef min_max_pair_non_duplicated_filter(stdata):\n    '''\n    Write a function to calculate the minimum and minimum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_max_pair = []\n    for t in stdata:\n        if t not in stdata and t[1] > max(t[1] for t in stdata):\n            min_max_pair.append(t)\n    return min_max_pair\n    \ndef min_min_pair_non_duplicated_filter(stdata):\n    '''\n    Write a function to calculate the minimum and minimum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_min_pair = []\n    for t in stdata:\n        if t not in stdata and t[1] < min(t[1] for t in stdata):\n            min_min_pair.append(t)\n    return min_min_pair\n    \ndef min_max_pair_non_duplicated_filter(stdata):\n    '''\n    Write a function to calculate the minimum and minimum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_max_pair = []\n    for t in stdata:\n        if t not in stdata and t[1] > max(t[1] for t in stdata):\n            min_max_pair.append(t)\n    return min_max_pair\n    \ndef min_min_pair_non_duplicated_filter(stdata):\n    '''\n    Write a function to calculate the minimum and minimum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_min_pair = []\n    for t in stdata:\n        if t not in stdata and t[1] < min(t[1] for t in stdata):\n            min_min_pair.append(t)\n    return min_min_pair\n    \ndef get_min_max_pair(stdata):\n    '''\n    Write a function to calculate the minimum and maximum pairs from the list of tuples.\n    '''\n    #Write your code here\n    max_min_pair = []\n    for t in stdata:\n        if t[1] > max(t[1] for t in stdata):\n            max_min_pair.append(t)\n    return max_min_pair\n    \ndef get_min_max_pair_non_duplicated(stdata):\n    '''\n    Write a function to calculate the minimum and maximum pairs from the list of tuples.\n    '''\n    #Write your code here\n    min_max_pair = []\n    for t in stdata:\n        if t[1] > min(t[1] for t in stdata):\n            min_max_pair.append(t)\n    return min_max_pair\n    \ndef get_min_min_pair(stdata):\n    '''\n    Write a function to calculate the minimum and minimum pairs from the list of tuples.\n    '"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_rec(n, r, count):\n        if n == 0 or r == 0:\n            return count\n        if n < r:\n            count += 1\n            return count_binary_seq_rec(n, r - 1, count)\n        if n % 2 == 1:\n            return count_binary_seq_rec(n // 2, r, count)\n        return count_binary_seq_rec(n - 1, r, count)\n    \n    return count_binary_seq_rec(n, n, 0)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    l = bin(n).count('1')\n    h = n - l\n    nh = n ^ l\n    l = bin(l).count('1')\n    h = n ^ l\n    l = bin(l).count('1')\n    h = n ^ l\n    return l, h, nh\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    N = n\n    def count(num):\n        count = 0\n        for i in range(N):\n            for j in range(i, N):\n                if num == bin(i)[2:]:\n                    count += 1\n                if num == bin(j)[2:]:\n                    count += 1\n        return count\n    return count(2**N)\n    # return count(num)\ndef count_binary_seq_1(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    N = n\n    # for i in range(N):\n        # for j in range(i, N):\n            # num = i+j\n            # if num == num:\n                # count += 1\n    return count_binary_seq(N)\n    # return count_binary_seq(N)\ndef count_binary_seq_2(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    N = n\n    count = 0\n    def count_from(n, start):\n        for i in range(start, n):\n            num = bin(i)[2:]\n            if num == num:\n                count += 1\n        return count\n    def count_to(n, end):\n        for i in range(end, n):\n            num = bin(i)[2:]\n            if num == num:\n                count += 1\n        return count\n    # for i in range(N):\n        # num = i+N\n        # for j in range(N):\n            # if num == bin(j)[2:]:\n                # count += 1\n    for i in range(N):\n        for j in range(N):\n            if bin(j)[2:] == bin(i)[2:] and (i < j):\n                count += count_from(N, i)\n            else:\n                count += count_to(N, i)\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def bin_seq(i,sum):\n        if i==0:\n            return (sum==0)\n        elif i==1:\n            return (sum==1)\n        else:\n            if sum==0:\n                return (bin_seq(i-1,sum+1) and bin_seq(i-2,sum-1))\n            else:\n                return (bin_seq(i-1,sum-1))\n    return bin_seq(n,0)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # set the mask to make the binary sequence of length n\n    mask = (2**n) - 1\n    # create a 2d array to store the sequence of binary sequence\n    bin_seq = np.empty((n, 2 ** n), int)\n    # store the bits from the first to the last of n in the binary sequence\n    for i in range(n):\n        bin_seq[i, :] = (2 ** (n - 1) - 1) * [0, 1][i]\n    # repeat the above for the last bit\n    for i in range(n - 1, -1, -1):\n        bin_seq[i, :] = (2 ** (n - 1) - 1) * [0, 1][i]\n    # create the mask to mask out the binary sequence of length 2^n-1\n    mask_2 = (2 ** n) - 1\n    # mask out the first n bits from the binary sequence\n    for i in range(n):\n        bin_seq[i, :] = (mask - 1) * [0, 1][i]\n    # mask out the last n bits from the binary sequence\n    for i in range(n - 1, -1, -1):\n        bin_seq[i, :] = (mask - 1) * [0, 1][i]\n    # return the count of binary sequences\n    return bin_seq.sum()\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # find the sum of the first n bits\n    first = 0\n    for i in range(0, n):\n        first = first + (2**i)\n    \n    # find the sum of the last n bits\n    last = n - 1\n    for i in range(0, n):\n        last = last + (2**i)\n    \n    # check if the sum of first n bits is equal to the sum of last n bits\n    return (first == last)\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = n // 2\n    count = 0\n    for i in range(2 ** n):\n        if (bin(i)[n - 1] == bin(i)[-n - 1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_k = n * 2\n    result = 1\n    k = 2\n    while k <= sum_k:\n        result = (result & (sum_k - k)) + (result >> k)\n        k = k + 2\n    return result\n    \ndef count_binary_seq_recursive(n): \n    '''\n    Write a function that returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_k = n * 2\n    result = 1\n    k = 2\n    while k <= sum_k:\n        result = (result & (sum_k - k)) + (result >> k)\n        k = k + 2\n    return result\n    \ndef gen_random_bits_array(n): \n    '''\n    Generate random bits array.\n    '''\n    return [i & 1 for i in range(2 ** n)]\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    if n <= 0: \n        return 0\n    for i in range(n): \n        if (bin(i)[2:] == bin(i)[:-2]): \n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    while n > 0: \n        for i in range(2**n): \n            if i % 2 == 1: \n                count += (1 if n & 1 == 0 else 0)\n                n = n >> 1\n        n = n >> 1\n        if n > 0: \n            count += n\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    depth = 0\n    for key in d:\n        if type(d[key]) is dict:\n            depth = depth + dict_depth(d[key]) + 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    print(\"\\n\" + \"*\" * 50)\n    print(\"Depth of a dictionary: \" + str(d.size()))\n    for k, v in d.items():\n        print(\"   \" + str(k) + \" - \" + str(v))\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 0\n    else:\n        return 1 + max(dict_depth(k) for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d = dict(d)\n    if len(d) == 0:\n        return 0\n    if len(d) == 1:\n        return 1\n    return max(dict_depth(d[k]) + 1 for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n    else:\n        return 1 + dict_depth(d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        depth += 1 + len(str(value))\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 0\n    depth = 1\n    for k, v in d.items():\n        depth = max(depth, dict_depth(v))\n    return depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d_depth = 0\n    for key in d.keys():\n        d_depth += 1\n    return d_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        if d.keys() == None:\n            return 0\n        else:\n            return 1 + dict_depth(d.values())\n    else:\n        return 0\n        \ndef str_depth(s):\n    '''\n    Write a function to find the depth of a string.\n    '''\n    if isinstance(s, str):\n        if s.isupper():\n            return 1 + str_depth(s.lower())\n        elif s.islower():\n            return 1 + str_depth(s.upper())\n        elif s.isnumeric():\n            return 1 + str_depth(s[0])\n        else:\n            return 1 + str_depth(s[0].upper() + s[1:])\n    else:\n        return 0\n    \ndef int_depth(i):\n    '''\n    Write a function to find the depth of an int.\n    '''\n    if isinstance(i, int):\n        return 1 + int_depth(i//10)\n    else:\n        return 0\n        \ndef max_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return max(dict_depth(d), int_depth(len(d)))\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations ==0 :\n        return arr[index]\n    elif rotations ==1 :\n        index_rot = index+1\n        index_rot = find_Element(arr,ranges,rotations-1,index_rot)\n        arr[index_rot] = arr[index]\n        arr[index] = arr[index_rot]\n        return arr[index]\n    elif rotations ==2 :\n        index_rot = index-1\n        index_rot = find_Element(arr,ranges,rotations-1,index_rot)\n        arr[index_rot] = arr[index]\n        arr[index] = arr[index_rot]\n        return arr[index]\n    elif rotations ==3 :\n        index_rot = index-1\n        index_rot = find_Element(arr,ranges,rotations-1,index_rot)\n        index_rot = find_Element(arr,ranges,rotations-2,index_rot)\n        arr[index_rot] = arr[index]\n        arr[index] = arr[index_rot]\n        return arr[index]\n    else :\n        index_rot = index+1\n        index_rot = find_Element(arr,ranges,rotations-1,index_rot)\n        index_rot = find_Element(arr,ranges,rotations-2,index_rot)\n        index_rot = find_Element(arr,ranges,rotations-3,index_rot)\n        arr[index_rot] = arr[index]\n        arr[index] = arr[index_rot]\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #declaring empty arrays\n    arr=[]\n    ranges=[]\n    rotations=[]\n    index=0\n    #get the range of elements to be searched\n    for i in range(len(ranges)) :\n        if i%2 == 0 :\n            ranges.append(ranges[i]+1)\n        else :\n            ranges.append(ranges[i])\n        #get the elements in the range of elements to be searched\n    for i in range(len(arr)) :\n        if i%2 == 0 :\n            arr.append(arr[i]+1)\n        else :\n            arr.append(arr[i])\n    #find the range of elements\n    for i in range(len(ranges)) :\n        if (rotations[i]==0) :\n            if ranges[i] <= index :\n                rotations[i] = 1\n                index = ranges[i]\n    #find the element at the range of elements\n    for i in range(len(arr)) :\n        if arr[i] == index :\n            return arr[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for r in ranges:\n        if rotations == r[0]:\n            return arr[r[1]]\n    \n    return -1\n    \ndef test():\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 2,3))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 2,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,3))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,3))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    \n    print(\"test\")\n    \n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,1))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,3))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,2))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,2))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,4))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,2))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,4))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,4))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,4))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,5))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,5))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,5))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,5))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,5))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 4,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,5))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 0,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,5))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,8,9,10], 3,0))\n    print(find_Element(arr, [2,3,4,5,6,7,"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if (arr[ranges[i][0]]-arr[ranges[i][1]]) > (ranges[i][1]-ranges[i][0]) :\n            rotations = i\n    return arr[rotations]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    if ranges == None or rotations == None :\n        print(\"[ERROR] Inputs are Null\")\n        return -1\n    else :\n        for i in range(ranges[0],ranges[1]+1) :\n            if index == i :\n                return arr[i]\n        return -1\n    \n    \ndef rotate(arr,ranges) :\n    '''\n    Write a python function to rotate a given array.\n    '''\n    \n    if ranges == None :\n        print(\"[ERROR] Inputs are Null\")\n        return -1\n    else :\n        i = 0\n        for j in range(ranges[0],ranges[1]+1) :\n            if arr[j] == -1 :\n                i = j\n                break\n        \n        arr[i],arr[ranges[1]] = arr[ranges[1]],arr[i]\n        \n        return arr\n    \n    \ndef rotate_3D(arr,ranges) :\n    '''\n    Write a python function to rotate a given array.\n    '''\n    if ranges == None :\n        print(\"[ERROR] Inputs are Null\")\n        return -1\n    else :\n        ranges = list(ranges)\n        for i in range(ranges[0],ranges[1]+1) :\n            if arr[i][0] == -1 :\n                ranges[0] = i\n                break\n            if arr[i][1] == -1 :\n                ranges[1] = i\n                break\n        \n        arr = [arr[i] for i in range(ranges[0],ranges[1]+1)]\n        arr.append([arr[i][2] for i in range(ranges[0],ranges[1]+1)])\n        \n        arr.append([arr[i][3] for i in range(ranges[0],ranges[1]+1)])\n        arr.append([arr[i][4] for i in range(ranges[0],ranges[1]+1)])\n        \n        arr.append([arr[i][5] for i in range(ranges[0],ranges[1]+1)])\n        arr.append([arr[i][6] for i in range(ranges[0],ranges[1]+1)])\n        \n        arr.append([arr[i][7] for i in range(ranges[0],ranges[1]+1)])\n        arr.append([arr[i][8] for i in range(ranges[0],ranges[1]+1)])\n        \n        arr = np.array(arr)\n        \n        arr = arr.reshape(arr.shape[0],3)\n        \n        arr = rotate(arr,ranges)\n        \n        for i in range(ranges[0],ranges[1]+1) :\n            arr[i] = np.transpose(arr[i])\n        \n        arr = np.transpose(arr)\n        \n        arr = np.array(arr)\n        \n        return arr\n        \n        \ndef rotate_2D(arr,ranges) :\n    '''\n    Write a python function to rotate a given array.\n    '''\n    if ranges == None :\n        print(\"[ERROR] Inputs are Null\")\n        return -1\n    else :\n        ranges = list(ranges)\n        i = 0\n        for j in range(ranges[0],ranges[1]+1) :\n            if arr[j][0] == -1 :\n                ranges[0] = j\n                break\n            if arr[j][1] == -1 :\n                ranges[1] = j\n                break\n        \n        arr = [arr[i][2] for i in range(ranges[0],ranges[1]+1)]\n        arr.append([arr[i][3] for i in range(ranges[0],ranges[1]+1)])\n        \n        arr.append([arr[i][4] for i in range(ranges[0],ranges[1]+1)])\n        arr.append([arr[i][5] for i in range(ranges[0],ranges[1]+1)])\n        \n        arr.append([arr[i][6] for i in range(ranges[0],ranges[1]+1)])\n        arr.append([arr[i][7] for i in range(ranges[0],ranges[1]+1)])\n        \n        arr = np.array(arr)\n        \n        arr = arr.reshape(arr.shape[0],3)\n        \n        arr = rotate(arr,ranges)\n        \n        for i in range(ranges[0],ranges[1]+1) :\n            arr[i] = np.transpose(arr[i])\n        \n        arr = np.transpose(arr)\n        \n        arr = np.array(arr)\n        \n        arr = arr.reshape(arr.shape[0],2)\n        \n        arr = rotate(arr,ranges)\n        \n        for i in range(ranges[0],ranges[1]+1) :\n            arr[i] = np.transpose(arr[i])\n        \n        arr = np.transpose(arr)\n        \n        arr = np.array(arr)\n        \n        return arr\n    \ndef rotate_1D(arr,ranges) :\n    '''\n    Write a python function to rotate a given array.\n    '''\n    if ranges == None :\n        print(\"[ERROR] Inputs are Null\")\n        return -1\n    else :\n        ranges = list(ranges)\n        i = 0\n        for j in range(ranges[0],ranges[1]+1) :\n            if arr[j] == -1 :\n                ranges[0] = j\n                break\n            if arr[j] == -1 :\n                ranges[1] = j\n                break\n        \n        arr = arr[ranges[0]:ranges[1]+1]\n        arr.append(arr[ranges[0]])\n        \n        arr = np.array(arr)\n        \n        arr = arr.reshape(arr.shape[0],1)\n        \n        arr = rotate(arr,ranges)\n        \n        for i in range(ranges[0],ranges[1]+1) :\n            arr[i] = arr[i]\n        \n        arr = np.array(arr)\n        \n        arr = arr.reshape(arr.shape[0],arr.shape[1])\n        \n        arr = rotate(arr,ranges)\n        \n        for i in range(ranges[0],ranges[1]+1) :\n            arr[i] = arr[i]\n        \n        arr = np.array(arr)\n        \n        arr = arr.reshape(arr.shape[0],3)\n        \n        arr = rotate(arr,ranges)\n        \n        for i in range(ranges[0],ranges[1]+1) :\n            arr[i] = np.transpose(arr[i])\n        \n        arr = np.transpose(arr)\n        \n        arr = np.array(arr)\n        \n        return arr\n        \n        \ndef main() :\n    '''\n    The main function.\n    '''\n    \n    #Test case for inputs\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    ranges = (1,2)\n    print(arr,ranges)\n    arr = rotate(arr,ranges)\n    print(arr,ranges)\n    arr = rotate_3D(arr,ranges)\n    print(arr,ranges)\n    arr = rotate_2D(arr,ranges)\n    print(arr,ranges)\n    arr = rotate_1D(arr,ranges)\n    print(arr,ranges)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)-1,1):\n        if(rotations > 0 and i+1 <= len(arr)-1):\n            rotations-=1\n            arr[i+1]=arr[i]\n            arr[i]=arr[i+1]\n    print(arr)\n    \n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Create a for-loop to iterate over a range of the input array\n    # Create a tuple with the ranges for the ranges\n    # Create a tuple with the rotations for the rotations\n    # Create an index that is a multiple of the range of the range of the range of the range of the rotations\n    # Return the element in the tuple.\n    for i in range(ranges[index]):\n        for j in range(rotations[index]):\n            arr[index] = arr[index] + arr[ranges[index]]\n            index = index + 1\n        ranges[index] = ranges[index] + ranges[index]\n        index = index + 1\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def rotate_element(arr,ranges,rotations) :\n        for rot in range(rotations) :\n            for i in range(ranges[0]):\n                arr[i+rot] = arr[i]\n            arr[ranges[0]] = arr[ranges[0]+rot]\n            arr[ranges[1]] = arr[ranges[1]-rot]\n            arr[ranges[0]] = arr[ranges[0]-rot]\n        rotations -= 1\n        return rotations\n    \n    rotations = 0\n    \n    for i in range(len(arr)) :\n        if arr[i] == index :\n            index = i\n    if index!= 0 :\n        rotations = rotate_element(arr,ranges,rotations)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index_index = index % (len(arr)-1)\n    if rotations == 1:\n        return arr[index_index]\n    if rotations == 2:\n        return arr[index_index+1]\n    if rotations == 3:\n        return arr[index_index+2]\n    if rotations == 4:\n        return arr[index_index+3]\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Initialize empty array\n    new_arr = []\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    elif len(words) == 2:\n        return words[1]\n    elif len(words) == 3:\n        return words[2]\n    else:\n        return words[2]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words.sort()\n    for word in words:\n        if word[:3].upper() == 'P':\n            return word[3:], word[:3]\n    raise ValueError(\"Start withp not found\")\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_with(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withi(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiiiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\ndef start_withiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    for i in range(0, len(words)-1):\n        if(words[i] == \"p\"):\n            break\n    \n    return words[i:len(words)-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0][0],words[0][1]\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    return words[0][0],words[0][1]\ndef start_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    return words[0][0],words[0][1]\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    return words[-1][-1],words[-1][-2]\ndef end_withq(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'q'.\n    '''\n    return words[-1][-1],words[-1][-2]\ndef end_withr(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'r'.\n    '''\n    return words[-1][-1],words[-1][-2]\ndef endingwithp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    return words[-1][-1]\ndef endingwithq(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'q'.\n    '''\n    return words[-1][-1]\ndef endingwithr(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'r'.\n    '''\n    return words[-1][-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = ''\n    second = ''\n    for word in words:\n        if word[0] == 'p':\n            first = word\n    for word in words:\n        if word[0]!= 'p':\n            second = word\n    return first,second\n    \ndef start_withp1(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = ''\n    second = ''\n    for word in words:\n        if word[0] == 'p':\n            first = word\n    for word in words:\n        if word[0]!= 'p':\n            second = word\n    return second,first\n    \ndef start_withp2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = ''\n    second = ''\n    for word in words:\n        if word[0] == 'p':\n            second = word\n    for word in words:\n        if word[0]!= 'p':\n            first = word\n    return first,second\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if len(words) < 2:\n        return words\n    else:\n        p = words[0]\n        two_words = words[1:]\n        return start_withp(two_words)\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    if len(words) < 2:\n        return words\n    else:\n        p = words[-1]\n        two_words = words[:-1]\n        return end_withp(two_words)\ndef get_next_letter(word):\n    '''\n    Write a function to return the next letter in a word.\n    '''\n    i = 0\n    if len(word) < 2:\n        return word\n    else:\n        for char in word:\n            i = i + 1\n            if i < len(word) - 1:\n                if char in 'aeiouAEIOU':\n                    return word[i:len(word)]\ndef reverse_word(word):\n    '''\n    Write a function to return the reverse of a word.\n    '''\n    #your code goes here\n    if len(word) < 2:\n        return word\n    else:\n        return word[-1] + word[1:-1] + word[0]\ndef get_next_word(word, words):\n    '''\n    Write a function to return the next word in a dictionary.\n    '''\n    #your code goes here\n    if len(word) < 2:\n        return words[0]\n    else:\n        for char in word:\n            if char in 'aeiouAEIOU':\n                return word[len(word)-1]\ndef start_with_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #your code goes here\n    if len(words) < 2:\n        return words\n    else:\n        p = words[0]\n        two_words = words[1:]\n        return start_with_p(two_words)\ndef end_with_p(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    if len(words) < 2:\n        return words\n    else:\n        p = words[-1]\n        two_words = words[:-1]\n        return end_with_p(two_words)\ndef get_next_p(word, words):\n    '''\n    Write a function to return the next letter in a word.\n    '''\n    #your code goes here\n    if len(word) < 2:\n        return word\n    else:\n        for char in word:\n            if char in 'AEIOUAEIOU':\n                return word[len(word)-1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_list = []\n    for word in words:\n        word = word.lower()\n        if word.startswith(\"p\"):\n            word = word.replace(\"p\", \"P\")\n            words_list.append(word)\n    return words_list\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # You can assume the list is always non-empty.\n    return words[0] and words[1:] or words[0] or words\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p=''\n    for i in words:\n        if i.startswith('p'):\n            p=i\n    return p\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index] + k <= n:\n        return a[index] + max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + a[index]))\n    return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if n < 1:\n        return 0\n    if index == k:\n        return a[n-1]\n    \n    # minimum element is the last element\n    # for a[i-1], we have a[i-1] + a[i-2], a[i-1] + a[i-1] + a[i-2]\n    # so, if a[i] >= a[i-1] + a[i-2], we can use a[i] as an index\n    if a[index] >= a[index-1] + a[index-2]:\n        return a[index]\n    \n    return max(a[index-1] + max_sum_increasing_subseq(a, n-1, index-1, k),\n            a[index] + min_sum_increasing_subseq(a, n-1, index, k))\n    \ndef min_sum_decreasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the minimum sum of decreasing subsequence from prefix until ith index and also including a given kth element which is before i, i.e., k < i.\n    '''\n    # base case\n    if n < 1:\n        return 0\n    if index == k:\n        return a[n-1]\n    \n    # minimum element is the last element\n    # for a[i-1], we have a[i-1] + a[i-2], a[i-1] + a[i-1] + a[i-2]\n    # so, if a[i] <= a[i-1] + a[i-2], we can use a[i] as an index\n    if a[index] <= a[index-1] + a[index-2]:\n        return a[index]\n    \n    return min(a[index-1] + max_sum_decreasing_subseq(a, n-1, index-1, k),\n                a[index] + min_sum_decreasing_subseq(a, n-1, index, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 1 or n == 1:\n        return a[index]\n    \n    if index == n:\n        return max(a[index-k+1:index+1])\n    \n    max_sum = 0\n    current_sum = 0\n    for i in range(index, n-k+1):\n        max_sum = max(a[i], max_sum)\n        current_sum = max(a[i], current_sum+a[i+k+1])\n        \n    return max(max_sum, current_sum)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[0]\n    \n    if index == n:\n        return a[index]\n    \n    i = index\n    curr_max = a[index]\n    for i in range(1, n):\n        curr_max = max(curr_max, a[i] + max_sum_increasing_subseq(a, n, i, k))\n    a[index] = curr_max\n    return curr_max\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index >= n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    temp = [0] * n\n    max_sum = 0\n    temp[index] = 1\n    if index == n:\n        if k == 0:\n            return temp[k:]\n        else:\n            return temp[k:] + temp[k:n]\n    else:\n        for i in range(index+1, n):\n            if temp[index] > 0 and a[i] > a[index]:\n                temp[i] = temp[index] + 1\n                max_sum = max(temp[:k], max_sum)\n            elif a[i] > a[index]:\n                temp[i] = 0\n                max_sum = max(temp[:k], max_sum)\n        if k > n-index-1:\n            max_sum = max(temp[:k], max_sum)\n        return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n < index:\n        return 0\n    if index == n:\n        return a[n]\n    if k == n:\n        return a[n]\n    \n    max_sum_increasing_subseq(a, n, index, k)\n    max_sum_increasing_subseq(a, n, index + 1, k)\n    \n    if index + 1 < n and a[index] < a[index + 1]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + a[index + 1])\n    else:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return a[index]\n    if k == 1:\n        return a[index] + max(a[index+1:])\n    mid = (index + n) // 2\n    if mid < n and a[mid] < k:\n        return max_sum_increasing_subseq(a, n, index, k - a[mid]) + a[mid]\n    else:\n        return max_sum_increasing_subseq(a, n, index, k)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst = []\n    for i in range(len(tuplex)):\n        lst.append(tuplex[i][m])\n    for i in range(n-len(tuplex)):\n        lst.append(tuplex[i+len(lst)][m])\n    return tuple(lst)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[m-1] + tuplex[m-2] + tuplex[m-3])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s = deepcopy(tuplex)\n    t = s[n-1]\n    for i in range(m-1):\n        s[i] = s[i+1]\n        s[i+1] = t\n    return s\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst = [m,n]\n    lst = tuple(lst)\n    return lst\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    out = []\n    for i in range(m):\n        if tuplex[i]!='':\n            out.append(tuplex[i])\n        else:\n            out.append(tuplex[i].replace(\".\",\"\"))\n    return out\ndef print_tuplex(tuplex):\n    '''\n    Write a function to print the tuple.\n    '''\n    print(\"(\",end='')\n    print(*tuplex,sep=',',end='')\n    print(\")\")\ndef make_colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to create a colon with m spaces.\n    '''\n    out = []\n    for i in range(m):\n        out.append(\"(\")\n        out.append(tuplex[i])\n        out.append(\")\")\n    return out\ndef get_partition(tuplex,m,n):\n    '''\n    Write a function to get a partition.\n    '''\n    out = []\n    for i in range(n):\n        out.append(tuplex[i])\n    return out\ndef print_partition(tuplex):\n    '''\n    Write a function to print the partition.\n    '''\n    print(\"(\",end='')\n    print(*tuplex,sep=',',end='')\n    print(\")\")\ndef get_multipartition(tuplex,m,n):\n    '''\n    Write a function to get a multiple partition.\n    '''\n    out = []\n    for i in range(m):\n        out.append(tuplex[i])\n    return out\ndef get_partition_n(tuplex,n):\n    '''\n    Write a function to get a partition of n-1 partitions.\n    '''\n    out = []\n    for i in range(n):\n        out.append(tuplex[i])\n    return out\ndef get_multipartition_n(tuplex,n):\n    '''\n    Write a function to get a multiple partition of n partitions.\n    '''\n    out = []\n    for i in range(n):\n        out.append(tuplex[i])\n    return out\ndef print_partition_n(tuplex,n):\n    '''\n    Write a function to print the partition.\n    '''\n    print(\"(\",end='')\n    print(*tuplex,sep=',',end='')\n    print(\")\")\ndef get_multipartition_n(tuplex,n):\n    '''\n    Write a function to get a multiple partition of n partitions.\n    '''\n    out = []\n    for i in range(n):\n        out.append(tuplex[i])\n    return out\ndef get_partition_m(tuplex,m):\n    '''\n    Write a function to get a partition of m-1 partitions.\n    '''\n    out = []\n    for i in range(m):\n        out.append(tuplex[i])\n    return out\ndef get_multipartition_m(tuplex,m):\n    '''\n    Write a function to get a multiple partition of m partitions.\n    '''\n    out = []\n    for i in range(m):\n        out.append(tuplex[i])\n    return out\ndef print_partition_m(tuplex,m):\n    '''\n    Write a function to print the partition.\n    '''\n    print(\"(\",end='')\n    print(*tuplex,sep=',',end='')\n    print(\")\")\ndef get_partition_m(tuplex,m):\n    '''\n    Write a function to get a partition of m-1 partitions.\n    '''\n    out = []\n    for i in range(m):\n        out.append(tuplex[i])\n    return out\ndef get_multipartition_m(tuplex,m):\n    '''\n    Write a function to get a multiple partition of m partitions.\n    '''\n    out = []\n    for i in range(m):\n        out.append(tuplex[i])\n    return out\ndef get_partition_r(tuplex,r):\n    '''\n    Write a function to get a partition of r-1 partitions.\n    '''\n    out = []\n    for i in range(r):\n        out.append(tuplex[i])\n    return out\ndef get_multipartition_r(tuplex,r):\n    '''\n    Write a function to get a multiple partition of r partitions.\n    '''\n    out = []\n    for i in range(r):\n        out.append(tuplex[i])\n    return out\ndef get_partition_u(tuplex,u):\n    '''\n    Write a function to get a partition of u-1 partitions.\n    '''\n    out = []\n    for i in range(u):\n        out.append(tuplex[i])\n    return out\ndef get_multipartition_u(tuplex,u):\n    '''\n    Write a function to get a multiple partition of u partitions.\n    '''\n    out = []\n    for i in range(u):\n        out.append(tuplex[i])\n    return out\ndef get_partition_o(tuplex,o):\n    '''\n    Write a function to get a partition of o-1 partitions.\n    '''\n    out = []\n    for i in range(o):\n        out.append(tuplex[i])\n    return out\ndef get_multipartition_o(tuplex,o):\n    '''\n    Write a function to get a multiple partition of o partitions.\n    '''\n    out = []\n    for i in range(o):\n        out.append(tuplex[i])\n    return out\ndef get_partition_m_o(tuplex,m,o):\n    '''\n    Write a function to get a partition of m-o partitions.\n    '''\n    out = []\n    for i in range(m):\n        out.append(tuplex[i])\n    for i in range(o):\n        out.append(tuplex[i])\n    return out\ndef get_multipartition_m_o(tuplex,m,o):\n    '''\n    Write a function to get a multiple partition of m-o partitions.\n    '''\n    out = []\n    for i in range(m):\n        out.append(tuplex[i])\n    for i in range(o):\n        out.append(tuplex[i])\n    return out\ndef get_partition_r_o(tuplex,r,o):\n    '''\n    Write a function to get a partition of r-o partitions.\n    '''\n    out = []\n    for i in range(r):\n        out.append(tuplex[i])\n    for i in range(o):\n        out.append(tuplex[i])\n    return out\ndef get_multipartition_r_o(tuplex,r,o):\n    '''\n    Write a function to get a multiple partition of r-o partitions.\n    '''\n    out = []\n    for i in range(r):\n        out.append(tuplex[i])\n    for i in range(o):\n        out.append(tuplex[i])\n    return out\ndef get_partition_u_o(tuplex,u,o):\n    '''\n    Write a function to get a partition of u-o partitions.\n    '''\n    out = []\n    for i in range(u):\n        out.append(tuplex[i])\n    for i in range(o):\n        out.append(tuplex[i])\n    return out\ndef get_multipartition_u_o(tuplex,u,o):\n    '''\n    Write a function to get a multiple partition of u-o partitions.\n    '''\n    out = []\n    for i in range(u):\n        out.append(tuplex[i])\n    for i in range(o):\n        out.append(tuplex[i])\n    return out\ndef get_partition_o_u(tu"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == m:\n        return tuple(tuplex[:n])\n    else:\n        return None\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_lst = list(tuplex)\n    for i in range(len(tuplex_lst)):\n        if tuplex_lst[i] == '+':\n            tuplex_lst[i] = '0'\n    tuplex_lst[m] = '0'\n    tuplex_lst[n] = '0'\n    return tuple(tuplex_lst)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l1=len(tuplex[0])\n    l2=len(tuplex)\n    if(n>l2):\n        return 0\n    if(l1==l2):\n        return tuplex[0]\n    elif(l1!=l2):\n        return 0\n    else:\n        return 1\n        \n    \ndef wrap_colon_tuplex(tuplex,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(tuplex[0])\n    l2=len(tuplex)\n    if(n>l2):\n        tuplex=tuplex[:l2]+[None]\n        \n    if(n==l1):\n        return tuplex\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef colon_list(list,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(list[0])\n    l2=len(list)\n    if(n>l2):\n        list=list[:l2]+[None]\n        \n    if(n==l1):\n        return list\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_list(list,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(list[0])\n    l2=len(list)\n    if(n>l2):\n        list=list[:l2]+[None]\n        \n    if(n==l1):\n        return list\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_dict(dict,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(dict[0])\n    l2=len(dict)\n    if(n>l2):\n        dict=dict[:l2]+[None]\n        \n    if(n==l1):\n        return dict\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_dict_dict(dict,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(dict[0])\n    l2=len(dict)\n    if(n>l2):\n        dict=dict[:l2]+[None]\n        \n    if(n==l1):\n        return dict\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_list_dict(list,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(list[0])\n    l2=len(list)\n    if(n>l2):\n        list=list[:l2]+[None]\n        \n    if(n==l1):\n        return list\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n    \ndef wrap_colon_list_list(list,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(list[0])\n    l2=len(list)\n    if(n>l2):\n        list=list[:l2]+[None]\n        \n    if(n==l1):\n        return list\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_list_list_dict(list,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(list[0])\n    l2=len(list)\n    if(n>l2):\n        list=list[:l2]+[None]\n        \n    if(n==l1):\n        return list\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_list_tuplex(list,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(list[0])\n    l2=len(list)\n    if(n>l2):\n        list=list[:l2]+[None]\n        \n    if(n==l1):\n        return list\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_tuplex(tuplex,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(tuplex[0])\n    l2=len(tuplex)\n    if(n>l2):\n        tuplex=tuplex[:l2]+[None]\n        \n    if(n==l1):\n        return tuplex\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_list_tuplex(list,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(list[0])\n    l2=len(list)\n    if(n>l2):\n        list=list[:l2]+[None]\n        \n    if(n==l1):\n        return list\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_tuplex_list(tuplex,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(tuplex[0])\n    l2=len(tuplex)\n    if(n>l2):\n        tuplex=tuplex[:l2]+[None]\n        \n    if(n==l1):\n        return tuplex\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_tuplex_dict(tuplex,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(tuplex[0])\n    l2=len(tuplex)\n    if(n>l2):\n        tuplex=tuplex[:l2]+[None]\n        \n    if(n==l1):\n        return tuplex\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_tuplex_dict_dict(tuplex,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(tuplex[0])\n    l2=len(tuplex)\n    if(n>l2):\n        tuplex=tuplex[:l2]+[None]\n        \n    if(n==l1):\n        return tuplex\n    elif(n!=l2):\n        return 0\n    else:\n        return 1\n        \n        \ndef wrap_colon_tuplex_list_dict(list,m,n):\n    '''\n    This function is a wrapper around the function colon_tuplex\n    '''\n    l1=len(list[0])\n    l2=len(list)\n    if(n>l2):\n        list=list[:l2]+[None]\n        \n    if(n==l1):\n        return list\n    elif(n!=l2):\n        return 0\n    else:"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # YOUR CODE HERE\n    return tuplex[:m] + tuplex[n:]\n    raise NotImplementedError\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m=m-1\n    if len(tuplex)==2:\n        return tuplex[0],tuplex[1]\n    else:\n        l=tuplex[m]\n        l=l[n]\n        for i in range(n+1):\n            if i==n:\n                return l,tuplex[1]\n            else:\n                l=l[0]\n                tuplex[i]=l\n        return l,tuplex[1]\n        \ndef colon_list(tuplex,m,n):\n    '''\n    Return a list of tupples from a tuple of list.\n    '''\n    l=[]\n    for i in range(m+1):\n        l.append(tuplex[i])\n    return l\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1:\n        return 0\n    if len(nums1) < N:\n        return 0\n    if nums1[0] == nums2[0]:\n        return [nums1[0], nums1[0] * nums1[0]]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # O(N * M) time and O(M) space\n    def find_smallest(nums1, nums2, N):\n        smallest_product = float('inf')\n        smallest_index = -1\n        for i in range(N):\n            for j in range(N):\n                if smallest_product > nums1[i] * nums2[j]:\n                    smallest_product = nums1[i] * nums2[j]\n                    smallest_index = i\n        return smallest_index\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Use a counter variable for the number of elements\n    counter = 1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Your code here\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            nums1[i] *= nums2[j]\n    return max(nums1)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    out = []\n    for i in range(N):\n        out.append(nums1[i]*nums2[i])\n    return out\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    print(nums1)\n    print(nums2)\n    m, l = len(nums1), len(nums2)\n    while m < l:\n        print(m, l)\n        if m < l:\n            p = m * nums2[l] / nums1[l]\n            print(\"p\", p)\n            m = m - p\n            print(m)\n        else:\n            p = l * nums1[m] / nums2[l]\n            print(\"p\", p)\n            l = l - p\n            print(l)\n    print(m)\n    return m * nums1[m] / nums2[l]\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > len(nums2):\n        return large_product(nums2, nums1, N)\n    else:\n        return large_product(nums1, nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    \n    # find the maximum possible count of products\n    max_count = 0\n    for i in range(n):\n        for j in range(m):\n            if nums1[i]*nums2[j] > nums1[i]*nums2[j]*N:\n                break\n            if max_count<(nums1[i]*nums2[j]):\n                max_count = nums1[i]*nums2[j]\n    \n    # divide into sublists\n    if max_count==0:\n        return []\n    for i in range(n):\n        for j in range(m):\n            if nums1[i]*nums2[j] == max_count:\n                nums1[i] *= nums2[j]\n                nums1[i] = nums1[i]/max_count\n                break\n    return nums1\n    \ndef main():\n    nums1 = [4, 5, 6, 1, 3, 2, 8]\n    nums2 = [4, 5, 6, 1, 3, 2, 8, 1]\n    N = 10\n    print(large_product(nums1, nums2, N))\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    ## Your code goes here\n    if (N==0):\n        return 0\n    else:\n        return large_product(nums1, nums2, N-1) + large_product(nums1, nums2, N-2)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        raise TypeError(\"Incorrect types\")\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    #Use max() to find the greatest number\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return \"Empty\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a) is not int:\n        return 'Error: You entered an invalid input.'\n    if type(b) is not int:\n        return 'Error: You entered an invalid input.'\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return 'The input is valid.'\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return 0\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a<b:\n        return a\n    elif b<a:\n        return b\n    else:\n        return 0\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \nprint(maximum(3,5))\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    str1=str1.replace(\"'\",'').replace(\"(\",'').replace(\")\",'')\n    tuple_str=''\n    \n    for s in str1:\n        if s in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' or s in 'abcdefghijklmnopqrstuvwxyz':\n            tuple_str+=s\n            \n    return tuple_str\n        \ndef delete_starting_spaces(string):\n    '''\n    Write a function to delete the first letter from the given string.\n    '''\n    \n    string=string.replace(\" \",\"\")\n    return string[0]\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if len(str1) == 0:\n        return (None, None)\n    lst = list(str1)\n    return (lst[0], lst[1])\n    \ndef main():\n    print(string_to_tuple('spam'))\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    mytuple = tuple(str1)\n    return mytuple\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_char = []\n    string_ch = []\n    print(\"String to tuple\")\n    for char in str1:\n        tuple_char.append(ord(char))\n    return tuple_char\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if str1 == '':\n        return ()\n    else:\n        return tuple(str1)\n    \ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a given tuple to a string.\n    '''\n    return str(tuple1)\n    \ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    if str1 == '':\n        return []\n    else:\n        return list(str1)\n    \ndef list_to_string(tuple1):\n    '''\n    Write a function to convert a given list of characters to a string.\n    '''\n    return str(tuple1)\n    \ndef dict_to_string(dictionary):\n    '''\n    Write a function to convert a given dictionary of keys to a string.\n    '''\n    return str(dictionary)\n    \ndef list_to_tuple(tuple1):\n    '''\n    Write a function to convert a given tuple of keys to a dictionary of\n    keys to a string.\n    '''\n    return str(tuple1)\n    \ndef tuple_to_dict(tuple1):\n    '''\n    Write a function to convert a given tuple of keys to a dictionary of\n    keys to a string.\n    '''\n    return str(tuple1)\n    \ndef string_to_dict(str1):\n    '''\n    Write a function to convert a given string of keys to a dictionary\n    of keys to a string.\n    '''\n    return str(str1)\n    \ndef dictionary_to_string(dictionary):\n    '''\n    Write a function to convert a given dictionary of keys to a string.\n    '''\n    return str(dictionary)\n    \ndef string_to_list_dict(str1):\n    '''\n    Write a function to convert a given string of keys to a list of\n    dictionaries.\n    '''\n    return str(str1)\n    \ndef list_to_string_dict(tuple1):\n    '''\n    Write a function to convert a given list of dictionaries to a string\n    of keys and dictionaries.\n    '''\n    return str(tuple1)\n    \ndef dictionary_to_list_dict(dictionary):\n    '''\n    Write a function to convert a given dictionary of keys to a list of\n    dictionaries.\n    '''\n    return str(dictionary"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1.lower())\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = ()\n    for char in str1:\n        tuple1 += (char,)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_to_int = {\n    'a': 0,\n    'b': 1,\n    'c': 2,\n    'd': 3,\n    'e': 4,\n    'f': 5,\n    'g': 6,\n    'h': 7,\n    'i': 8,\n    'j': 9,\n    'k': 10,\n    'l': 11,\n    'm': 12,\n    'n': 13,\n    'o': 14,\n    'p': 15,\n    'q': 16,\n    'r': 17,\n    's': 18,\n    't': 19,\n    'u': 20,\n    'v': 21,\n    'w': 22,\n    'x': 23,\n    'y': 24,\n    'z': 25,\n    'A': 26,\n    'B': 27,\n    'C': 28,\n    'D': 29,\n    'E': 30,\n    'F': 31,\n    'G': 32,\n    'H': 33,\n    'I': 34,\n    'J': 35,\n    'K': 36,\n    'L': 37,\n    'M': 38,\n    'N': 39,\n    'O': 40,\n    'P': 41,\n    'Q': 42,\n    'R': 43,\n    'S': 44,\n    'T': 45,\n    'U': 46,\n    'V': 47,\n    'W': 48,\n    'X': 49,\n    'Y': 50,\n    'Z': 51,\n    '1': 52,\n    '2': 53,\n    '3': 54,\n    '4': 55,\n    '5': 56,\n    '6': 57,\n    '7': 58,\n    '8': 59,\n    '9': 60,\n    '0': 61,\n    '!': 62,\n    '\"': 63,\n    '#': 64,\n    '$': 65,\n    '%': 66,\n    '&': 67,\n    \"'\": 68,\n    '*': 69,\n    '+': 70,\n    ',' :71,\n    '-': 72,\n    '.': 73,\n    '/': 74,\n    '0': 75,\n    '1': 76,\n    '2': 77,\n    '3': 78,\n    '4': 79,\n    '5': 80,\n    '6': 81,\n    '7': 82,\n    '8': 83,\n    '9': 84,\n    ' ': 85,\n    '!': 86,\n    '\"': 87,\n    '#': 88,\n    '$': 89,\n    '%': 90,\n    '&': 91,\n    \"'\": 92,\n    '*': 93,\n    '+': 94,\n    ',' :95,\n    '-': 96,\n    '.': 97,\n    '/': 98,\n    '0': 99,\n    '1': 100,\n    '2': 101,\n    '3': 102,\n    '4': 103,\n    '5': 104,\n    '6': 105,\n    '7': 106,\n    '8': 107,\n    '9': 108,\n    ' ': 109,\n    '!': 110,\n    '\"': 111,\n    '#': 112,\n    '$': 113,\n    '%': 114,\n    '&': 115,\n    \"'\": 116,\n    '*': 117,\n    '+': 118,\n    ',' :119,\n    '-': 120,\n    '.': 121,\n    '/': 122,\n    '0': 123,\n    '1': 124,\n    '2': 125,\n    '3': 126,\n    '4': 127,\n    '5': 128,\n    '6': 129,\n    '7': 130,\n    '8': 131,\n    '9': 132,\n    ' ': 133,\n    '!': 134,\n    '\"': 135,\n    '#': 136,\n    '$': 137,\n    '%': 138,\n    '&': 139,\n    \"'\": 140,\n    '*': 141,\n    '+': 142,\n    ',' :143,\n    '-': 144,\n    '.': 145,\n    '/': 146,\n    '0': 147,\n    '1': 148,\n    '2': 149,\n    '3': 150,\n    '4': 151,\n    '5': 152,\n    '6': 153,\n    '7': 154,\n    '8': 155,\n    '9': 156,\n    ' ': 157,\n    '!': 158,\n    '\"': 159,\n    '#': 160,\n    '$': 161,\n    '%': 162,\n    '&': 163,\n    \"'\": 164,\n    '*': 165,\n    '+': 166,\n    ',' :167,\n    '-': 168,\n    '.': 169,\n    '/': 170,\n    '0': 171,\n    '1': 172,\n    '2': 173,\n    '3': 174,\n    '4': 175,\n    '5': 176,\n    '6': 177,\n    '7': 178,\n    '8': 179,\n    '9': 180,\n    ' ': 181,\n    '!': 182,\n    '\"': 183,\n    '#': 184,\n    '$': 185,\n    '%': 186,\n    '&': 187,\n    \"'\": 188,\n    '*': 189,\n    '+': 190,\n    ',' :191,\n    '-': 192,\n    '.': 193,\n    '/': 194,\n    '0': 195,\n    '1': 196,\n    '2': 197,\n    '3': 198,\n    '4': 199,\n    '5': 200,\n    '6': 201,\n    '7': 202,\n    '8': 203,\n    '9': 204,\n    ' ': 205,\n    '!': 206,\n    '\"': 207,\n    '#': 208,\n    '$': 209,\n    '%': 210,\n    '&': 211,\n    \"'\": 212,\n    '*': 213,\n    '+': 214,\n    ',' :215,\n    '-': 216,\n    '.': 217,\n    '/': 218,\n    '0': 219,\n    '1': 220,\n    '2': 221,\n    '3': 222,\n    '4': 223,\n    '5': 224,\n    '6': 225,\n    '7': 226,\n    '8': 227,\n    '9': 228,\n    ' ': 229,\n    '!': 230,\n    '\"': 231,\n    '#': 232,\n    '$': 233,\n    '%': 234,\n    '&': 235,\n    \"'\": 236,\n    '*': 237,\n    '+': 238,\n    ',' :239,\n    '-': 240,\n    '.': 241,\n    '/': 242,\n    '0': 243,\n    '1': 244,\n    '2': 245,\n    '3': 246,\n    '4': 247,\n    '5': 248,\n    '6': 249,\n    '7': 250,\n    '8': 251,\n    '9': 252,\n    ' ': 253,\n    '!': 254,\n    '\"': 255,\n    '#': 256,\n    '$': 257,\n    '%': 258,\n    '&': 259,\n    \"'\": 260,\n    '*': 261,\n    '+': 262,\n    ',' :263,\n    '-': 264,\n    '.': 265,\n    '/': 266,\n    '0': 267,\n    '1': 268,\n    '2': 269,\n    '3': 270,\n    '4': 271,\n    '5': 272,\n    '6': 273,\n    '7': 274,\n    '8': 275,\n    '9': 276,\n    ' ': 277,\n    '!': 278,\n    '\"': 279,\n    '#': 280,\n    '$': 281,\n    '%': 282,\n    '&': 283,\n    \"'\": 284,\n    '*': 285,\n    '+': 286,\n    ',' :287,\n    '-': 288,\n    '.': 289,\n    '/': 290,\n    '0': 291,\n    '1': 292,\n    '2': 293"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    m = 2**n\n    return m\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << n.bit_length() - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Write your code here\n    return n & 0b1111111111111111\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #A list of bits to be set\n    \n    a=[]\n    #bit-1\n    if(n&1==1):\n        a.append(0)\n    #bit-2\n    if(n&2==1):\n        a.append(0)\n    #bit-3\n    if(n&4==1):\n        a.append(0)\n    #bit-4\n    if(n&8==1):\n        a.append(0)\n    #bit-5\n    if(n&16==1):\n        a.append(0)\n    #bit-6\n    if(n&32==1):\n        a.append(0)\n    #bit-7\n    if(n&64==1):\n        a.append(0)\n    #bit-8\n    if(n&128==1):\n        a.append(0)\n    #bit-9\n    if(n&256==1):\n        a.append(0)\n    return a\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    temp_bit = n & (n - 1)\n    n &= temp_bit\n    if n > 0:\n        n += 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(n):\n        if (n & 1 == 0):\n            n = n >> 1\n        else:\n            n = n >> 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n >= 0\n    if (n & 0x80):\n        return n\n    return n | 0x80\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    left_most_bit = n & 1\n    n >>= 1\n    if n == 0:\n        return 1\n    else:\n        n = n & 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & (~n-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Assumptions:\n    -    -    If a bit is set, the left most unset bit is 1\n    -    -    If a bit is set, the left most unset bit is 0\n    -    -    If a bit is set, the left most unset bit is 0\n    -    -    If a bit is unset, the left most unset bit is 1\n    -    -    If a bit is unset, the left most unset bit is 0\n    '''\n    if n & 1 == 0: \n        return n | 1\n    elif n & 1 == 1:\n        return n & 0x01\n    else:\n        return n & 0x03\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**3 * h**2 * math.pi\ndef volume_cylinder(r,h):\n    '''\n    Write a function that returns the volume of a cylinder.\n    '''\n    return r**3 * math.pi * h\ndef surface_area(r,h):\n    '''\n    Write a function to compute the area of a surface.\n    '''\n    return (r**2)*(h/2)\ndef surface_volume(r,h):\n    '''\n    Write a function to compute the volume of a surface.\n    '''\n    return (r**2)*(h/2) * math.pi\ndef surface_area_cone(r,h):\n    '''\n    Write a function to return the surface area of a cone.\n    '''\n    return volume_cone(r,h)\ndef surface_volume_cone(r,h):\n    '''\n    Write a function to return the surface volume of a cone.\n    '''\n    return volume_cone(r,h) * math.pi\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to return the surface area of a cylinder.\n    '''\n    return volume_cylinder(r,h) * math.pi\ndef surface_volume_cylinder(r,h):\n    '''\n    Write a function to return the surface volume of a cylinder.\n    '''\n    return volume_cylinder(r,h) * math.pi\ndef surface_area_both(r,h):\n    '''\n    Write a function to return the surface area of both surfaces.\n    '''\n    return (r**2)*(h/2) * math.pi\ndef surface_volume_both(r,h):\n    '''\n    Write a function to return the surface volume of both surfaces.\n    '''\n    return (r**2)*(h/2) * math.pi\ndef surface_area_both(r,h):\n    '''\n    Write a function to return the surface area of both surfaces.\n    '''\n    return (r**2)*(h/2) * math.pi * (r*r/4)\ndef surface_volume_both(r,h):\n    '''\n    Write a function to return the surface volume of both surfaces.\n    '''\n    return (r**2)*(h/2) * math.pi * (r*r/4)\ndef surface_area_surface(r,h):\n    '''\n    Write a function to return the surface area of a surface.\n    '''\n    return surface_area(r,h) * r**3\ndef surface_volume_surface(r,h):\n    '''\n    Write a function to return the surface volume of a surface.\n    '''\n    return surface_volume(r,h) * r**3\ndef surface_area_surface_both(r,h):\n    '''\n    Write a function to return the surface area of both surfaces.\n    '''\n    return surface_area_surface(r,h) * r**3\ndef surface_volume_surface_both(r,h):\n    '''\n    Write a function to return the surface volume of both surfaces.\n    '''\n    return surface_volume_surface(r,h) * r**3\ndef surface_area_surface_surface(r,h):\n    '''\n    Write a function to return the surface area of both surfaces.\n    '''\n    return surface_area_surface(r,h) * (r*r*r)\ndef surface_volume_surface_surface(r,h):\n    '''\n    Write a function to return the surface volume of both surfaces.\n    '''\n    return surface_volume_surface(r,h) * (r*r*r)\ndef surface_area_volume(r,h):\n    '''\n    Write a function to return the surface area of a volume.\n    '''\n    return surface_area(r,h) * math.pi\ndef surface_volume_volume(r,h):\n    '''\n    Write a function to return the surface volume of a volume.\n    '''\n    return surface_volume(r,h) * math.pi\ndef surface_area_volume_both(r,h):\n    '''\n    Write a function to return the surface area of both volumes.\n    '''\n    return surface_area_volume(r,h) * math.pi\ndef surface_volume_volume_both(r,h):\n    '''\n    Write a function to return the surface volume of both volumes.\n    '''\n    return surface_volume_volume(r,h) * math.pi\ndef surface_area_volume_surface(r,h):\n    '''\n    Write a function to return the surface area of a volume.\n    '''\n    return surface_area_volume(r,h) * r\ndef surface_volume_volume_surface(r,h):\n    '''\n    Write a function to return the surface volume of a volume.\n    '''\n    return surface_volume_volume(r,h) * r\ndef volume_area(r,h):\n    '''\n    Write a function to compute the volume of a rectangle.\n    '''\n    return r**2 * h\ndef volume_volume(r,h):\n    '''\n    Write a function to compute the volume of a rectangle.\n    '''\n    return r**2 * (h/2) * math.pi\ndef volume_area_both(r,h):\n    '''\n    Write a function to compute the volume of a rectangle.\n    '''\n    return volume_area(r,h) * r**2 * h\ndef volume_volume_both(r,h):\n    '''\n    Write a function to compute the volume of a rectangle.\n    '''\n    return volume_area(r,h) * r**2 * h\ndef volume_area_surface(r,h):\n    '''\n    Write a function to compute the volume of a surface.\n    '''\n    return volume_area(r,h) * (r*r/4)\ndef volume_volume_surface(r,h):\n    '''\n    Write a function to compute the volume of a surface.\n    '''\n    return volume_area(r,h) * (r*r/4) * (r*r/4)\ndef volume_area_surface_both(r,h):\n    '''\n    Write a function to compute the volume of both surfaces.\n    '''\n    return volume_area_surface(r,h) * (r*r/4) * (r*r/4)\ndef volume_volume_surface_both(r,h):\n    '''\n    Write a function to compute the volume of both surfaces.\n    '''\n    return volume_area_surface(r,h) * (r*r/4) * (r*r/4) * (r*r/4)\ndef volume_area_surface_surface(r,h):\n    '''\n    Write a function to compute the volume of a surface.\n    '''\n    return volume_area(r,h) * (r*r*r)\ndef volume_volume_surface_surface(r,h):\n    '''\n    Write a function to compute the volume of a surface.\n    '''\n    return volume_area(r,h) * (r*r*r) * (r*r*r)\ndef volume_area_surface_both(r,h):\n    '''\n    Write a function to compute the volume of both surfaces.\n    '''\n    return volume_area_surface(r,h) * (r*r*r) * (r*r*r)\ndef volume_volume_surface_both(r,h):\n    '''\n    Write a function to compute the volume of both surfaces.\n    '''\n    return volume_area_surface(r,h) * (r*r*r) * (r*r*r) * (r*r*r)\ndef volume_area_volume(r,h):\n    '''\n    Write a function to compute the volume of a rectangle.\n    '''\n    return r**2 * h\ndef volume_volume_volume(r,h):\n    '''\n    Write a function to compute the volume of a rectangle.\n    '''\n    return r**2 * (h/2) * math.pi\ndef volume_area_volume_both(r,h):\n    '''\n    Write a function to compute the volume of a rectangle.\n    '''\n    return volume_area_volume(r,h) "
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    for i in range(r,r+h):\n        volume += (i*(i-1)**2)/2\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r * h * math.cos(math.radians(90-90/2.0))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=r*(h/2)**3\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    theta = math.radians(60)\n    alpha = math.radians(90)\n    x_A = r*math.cos(alpha)*math.cos(theta)\n    y_A = r*math.cos(alpha)*math.sin(theta)\n    z_A = r*math.sin(alpha)\n    x_B = r*math.cos(alpha)*math.cos(theta)\n    y_B = r*math.cos(alpha)*math.sin(theta)\n    z_B = r*math.sin(alpha)\n    volume = ((x_A + y_A + z_A) * (x_B + y_B + z_B))\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=h*(r**2)*(math.sqrt(4*(math.pi*r))/3)\n    print(volume)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2 * math.pi * r * h\ndef volume_ellipse(a,b,c,d):\n    '''\n    Write a function to find the volume of an ellipse.\n    '''\n    return 4 * (a * c) + (b * d)\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * (r ** 2)\ndef area_rectangle(a,b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return a * b\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return a * a\ndef area_triangle(a,b):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return a * (a+b) / 2\ndef perimeter_square(a):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return 4 * (a+b+c)\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return a * (a+b+c)\ndef perimeter_circle(a,b):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return math.pi * a * a\ndef perimeter_ellipse(a,b,c):\n    '''\n    Write a function to calculate the perimeter of an ellipse.\n    '''\n    return 4 * (a+b+c) + math.pi * a * b * a\ndef perimeter_triangle(a,b):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    return 3 * (a+b+c) + math.pi * a * b\ndef main():\n    print(\"Area of rectangle : \",area_rectangle(5,6))\n    print(\"Area of rectangle : \",area_rectangle(7,8))\n    print(\"Area of rectangle : \",area_rectangle(9,10))\n    print(\"Area of rectangle : \",area_rectangle(5,3))\n    print(\"Area of rectangle : \",area_rectangle(5,6,7,8))\n    print(\"Area of rectangle : \",area_rectangle(2,8,9,3))\n    print(\"Area of rectangle : \",area_rectangle(2,8,3,4))\n    print(\"Area of rectangle : \",area_rectangle(2,3,7,8))\n    print(\"Area of rectangle : \",area_rectangle(3,5,6,7))\n    print(\"Area of rectangle : \",area_rectangle(7,6,3,2))\n    print(\"Area of rectangle : \",area_rectangle(5,2,3,4))\n    print(\"Area of rectangle : \",area_rectangle(5,4,7,2))\n    print(\"Area of rectangle : \",area_rectangle(3,5,6,7))\n    print(\"Area of rectangle : \",area_rectangle(5,2,3,4))\n    print(\"Area of rectangle : \",area_rectangle(3,5,2,7))\n    print(\"Area of rectangle : \",area_rectangle(1,2,3,4))\n    print(\"Area of rectangle : \",area_rectangle(3,2,6,7))\n    print(\"Area of rectangle : \",area_rectangle(1,7,3,5))\n    print(\"Area of rectangle : \",area_rectangle(2,4,5,8))\n    print(\"Area of rectangle : \",area_rectangle(1,1,2,3))\n    print(\"Area of rectangle : \",area_rectangle(6,8,3,4))\n    print(\"Area of rectangle : \",area_rectangle(7,8,6,3))\n    print(\"Area of rectangle : \",area_rectangle(8,3,7,6))\n    print(\"Area of rectangle : \",area_rectangle(7,8,8,9))\n    print(\"Area of rectangle : \",area_rectangle(8,9,6,7))\n    print(\"Area of rectangle : \",area_rectangle(3,3,2,7))\n    print(\"Area of rectangle : \",area_rectangle(7,6,3,2))\n    print(\"Area of rectangle : \",area_rectangle(5,6,3,4))\n    print(\"Area of rectangle : \",area_rectangle(3,2,1,3))\n    print(\"Area of rectangle : \",area_rectangle(1,1,6,5))\n    print(\"Area of rectangle : \",area_rectangle(6,8,7,3))\n    print(\"Area of rectangle : \",area_rectangle(5,8,6,2))\n    print(\"Area of rectangle : \",area_rectangle(7,8,3,1))\n    print(\"Area of rectangle : \",area_rectangle(6,6,2,3))\n    print(\"Area of rectangle : \",area_rectangle(5,5,4,6))\n    print(\"Area of rectangle : \",area_rectangle(7,5,3,4))\n    print(\"Area of rectangle : \",area_rectangle(6,4,5,8))\n    print(\"Area of rectangle : \",area_rectangle(5,6,3,7))\n    print(\"Area of rectangle : \",area_rectangle(2,6,5,7))\n    print(\"Area of rectangle : \",area_rectangle(6,3,5,7))\n    print(\"Area of rectangle : \",area_rectangle(6,7,3,4))\n    print(\"Area of rectangle : \",area_rectangle(3,7,5,2))\n    print(\"Area of rectangle : \",area_rectangle(3,7,6,3))\n    print(\"Area of rectangle : \",area_rectangle(5,2,3,6))\n    print(\"Area of rectangle : \",area_rectangle(5,7,3,2))\n    print(\"Area of rectangle : \",area_rectangle(3,5,7,6))\n    print(\"Area of rectangle : \",area_rectangle(5,7,6,3))\n    print(\"Area of rectangle : \",area_rectangle(3,7,2,5))\n    print(\"Area of rectangle : \",area_rectangle(1,2,3,6))\n    print(\"Area of rectangle : \",area_rectangle(6,2,5,8))\n    print(\"Area of rectangle : \",area_rectangle(1,3,5,7))\n    print(\"Area of rectangle : \",area_rectangle(2,3,6,7))\n    print(\"Area of rectangle : \",area_rectangle(7,6,3,2))\n    print(\"Area of rectangle : \",area_rectangle(7,3,5,2))\n    print(\"Area of rectangle : \",area_rectangle(7,7,3,1))\n    print(\"Area of rectangle : \",area_rectangle(8,3,5,2))\n    print(\"Area of rectangle : \",area_rectangle(7,7,6,3))\n    print(\"Area of rectangle : \",area_rectangle(7,8,6,3))\n    print(\"Area of rectangle : \",area_rectangle(5,7,2,3))\n    print(\"Area of rectangle : \",area_rectangle(8,6,3,4))\n    print(\"Area of rectangle : \",area_rectangle(6,3,2,5))\n    print(\"Area of rectangle : \",area_rectangle(7,3,7,2))\n    print(\"Area of rectangle : \",area_rectangle(5,3,6,7))\n    print(\"Area of rectangle : \",area_rectangle(5,3,7,8))\n    print(\"Area of rectangle : \",area_rectangle(3,2,4,6))\n    print(\"Area of rectangle : \",area_rectangle(7,6,3,2))\n    print(\"Area of rectangle : \",area_rectangle(7,3,5,2))\n    print(\"Area of rectangle : \",area_rectangle(2,6,3,2))\n    print(\"Area of rectangle : \",area_rectangle(1,2,6,7))\n    print(\"Area of rectangle : \",area_rectangle(3,7,3,6))\n    print(\"Area of rectangle : \",area_rectangle(3,5,2,7))\n    prin"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r * h * 4.0 * math.pi\ndef compute_volume_cone(r,h):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    return volume_cone(r,h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4 * (h**3)) * (math.pi * r**3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # get radius\n    radius = r\n    # get height\n    height = h\n    # find volume\n    volume = math.pi*radius*(radius**2)*height\n    # return the volume\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n<=0:\n        return None\n    elif n==0:\n        return n\n    else:\n        a=0\n        while a<n:\n            if a%2==0:\n                return a\n            a=a+1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    low = 0\n    high = n\n    while high > 1:\n        low = low + 1\n        high = high // 2\n    return low\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return highest_Power_of_2(n // 2) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    low = 2\n    while n!= 1:\n        if n % 2 == 1:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    output = 0\n    if n <= 0:\n        return -1\n    while n:\n        if n % 2 == 0:\n            output = n // 2\n            n = n // 2\n        else:\n            n = n // 2 + 1\n            \n    return output \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 2\n    output = 0\n    while (i <= n):\n        output = output + (i**2)\n        i = i + 1\n    return output\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n    else:\n        return highest_Power_of_2(n//2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 2\n    while n>i:\n        if n % i == 0:\n            return int(n/i)\n        i+=1\n    return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while n!= 1:\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = 3 * n + 1\n        i += 1\n    return i\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # We need to check if the number is a multiple of 4.\n    if n%4==0:\n        return int(n/4)\n    \n    if n%2==0: # If n is even\n        return find_lucas(n/2)\n    else: # n is odd\n        return find_lucas(3*n+1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return n\n    if n < 3:\n        return 1\n    for i in range(2,n):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    f = [0,1]\n    if n <= 0: \n        return \"1\"\n    elif n == 1: \n        return \"2\"\n    elif n == 2: \n        return \"3\"\n    elif n == 3: \n        return \"4\"\n    else: \n        for i in range(4, n+1): \n            f.append(f[i-1] + f[i-2])\n        return f[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    if n == 4: \n        return 4\n    if n == 5: \n        return 5\n    if n == 6: \n        return 6\n    if n == 7: \n        return 7\n    if n == 8: \n        return 8\n    if n == 9: \n        return 9\n    if n == 10: \n        return 10\n    if n == 11: \n        return 11\n    if n == 12: \n        return 12\n    if n == 13: \n        return 13\n    if n == 14: \n        return 14\n    if n == 15: \n        return 15\n    if n == 16: \n        return 16\n    if n == 17: \n        return 17\n    if n == 18: \n        return 18\n    if n == 19: \n        return 19\n    if n == 20: \n        return 20\n    if n == 21: \n        return 21\n    if n == 22: \n        return 22\n    if n == 23: \n        return 23\n    if n == 24: \n        return 24\n    if n == 25: \n        return 25\n    if n == 26: \n        return 26\n    if n == 27: \n        return 27\n    if n == 28: \n        return 28\n    if n == 29: \n        return 29\n    if n == 30: \n        return 30\n    if n == 31: \n        return 31\n    if n == 32: \n        return 32\n    if n == 33: \n        return 33\n    if n == 34: \n        return 34\n    if n == 35: \n        return 35\n    if n == 36: \n        return 36\n    if n == 37: \n        return 37\n    if n == 38: \n        return 38\n    if n == 39: \n        return 39\n    if n == 40: \n        return 40\n    if n == 41: \n        return 41\n    if n == 42: \n        return 42\n    if n == 43: \n        return 43\n    if n == 44: \n        return 44\n    if n == 45: \n        return 45\n    if n == 46: \n        return 46\n    if n == 47: \n        return 47\n    if n == 48: \n        return 48\n    if n == 49: \n        return 49\n    if n == 50: \n        return 50\n    if n == 51: \n        return 51\n    if n == 52: \n        return 52\n    if n == 53: \n        return 53\n    if n == 54: \n        return 54\n    if n == 55: \n        return 55\n    if n == 56: \n        return 56\n    if n == 57: \n        return 57\n    if n == 58: \n        return 58\n    if n == 59: \n        return 59\n    if n == 60: \n        return 60\n    if n == 61: \n        return 61\n    if n == 62: \n        return 62\n    if n == 63: \n        return 63\n    if n == 64: \n        return 64\n    if n == 65: \n        return 65\n    if n == 66: \n        return 66\n    if n == 67: \n        return 67\n    if n == 68: \n        return 68\n    if n == 69: \n        return 69\n    if n == 70: \n        return 70\n    if n == 71: \n        return 71\n    if n == 72: \n        return 72\n    if n == 73: \n        return 73\n    if n == 74: \n        return 74\n    if n == 75: \n        return 75\n    if n == 76: \n        return 76\n    if n == 77: \n        return 77\n    if n == 78: \n        return 78\n    if n == 79: \n        return 79\n    if n == 80: \n        return 80\n    if n == 81: \n        return 81\n    if n == 82: \n        return 82\n    if n == 83: \n        return 83\n    if n == 84: \n        return 84\n    if n == 85: \n        return 85\n    if n == 86: \n        return 86\n    if n == 87: \n        return 87\n    if n == 88: \n        return 88\n    if n == 89: \n        return 89\n    if n == 90: \n        return 90\n    if n == 91: \n        return 91\n    if n == 92: \n        return 92\n    if n == 93: \n        return 93\n    if n == 94: \n        return 94\n    if n == 95: \n        return 95\n    if n == 96: \n        return 96\n    if n == 97: \n        return 97\n    if n == 98: \n        return 98\n    if n == 99: \n        return 99\n    if n == 100: \n        return 100\n    if n == 101: \n        return 101\n    if n == 102: \n        return 102\n    if n == 103: \n        return 103\n    if n == 104: \n        return 104\n    if n == 105: \n        return 105\n    if n == 106: \n        return 106\n    if n == 107: \n        return 107\n    if n == 108: \n        return 108\n    if n == 109: \n        return 109\n    if n == 110: \n        return 110\n    if n == 111: \n        return 111\n    if n == 112: \n        return 112\n    if n == 113: \n        return 113\n    if n == 114: \n        return 114\n    if n == 115: \n        return 115\n    if n == 116: \n        return 116\n    if n == 117: \n        return 117\n    if n == 118: \n        return 118\n    if n == 119: \n        return 119\n    if n == 120: \n        return 120\n    if n == 121: \n        return 121\n    if n == 122: \n        return 122\n    if n == 123: \n        return 123\n    if n == 124: \n        return 124\n    if n == 125: \n        return 125\n    if n == 126: \n        return 126\n    if n == 127: \n        return 127\n    if n == 128: \n        return 128\n    if n == 129: \n        return 129\n    if n == 130: \n        return 130\n    if n == 131: \n        return 131\n    if n == 132: \n        return 132\n    if n == 133: \n        return 133\n    if n == 134: \n        return 134\n    if n == 135: \n        return 135\n    if n == 136: \n        return 136\n    if n == 137: \n        return 137\n    if n == 138: \n        return 138\n    if n == 139: \n        return 139\n    if n == 140: \n        return 140\n    if n == 141: \n        return 141\n    if n == 142: \n        return 142\n    if n == 143: \n        return 143\n    if n == 144: \n        return 144\n    if n == 145: \n        return 145\n    if n == 146: \n        return 146\n    if n == 147: \n        return 147\n    if n == 148: \n        return 148\n    if n == 149: \n        return 149\n    if n == 150: \n        return 150\n    if n == 151: \n        return 151\n    if n == 152: \n        return 152\n    if n == 153: \n        return 153\n    if n == 154: \n        return 154\n    if n == 155: \n        return 155\n    if n == 156: \n        return 156\n    if n == 157: \n        return 157\n    if n == 158: \n        return 158\n    if n == 159: \n        return 159\n    if n == 160: \n        return 160\n    if n == 161: \n        return 161\n    if n == 162: \n        return 162\n    if n == 163: \n        return 163\n    if n == 164: \n        return 164\n    if n == 165: \n        return 165\n    if n == 166: \n        return 166\n    if n == 167: \n        retur"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2: \n        return 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return n\n    if n == 3:\n        return 4\n    if n % 3 == 0:\n        return find_lucas(n-1) + 4\n    if n % 3 == 1:\n        return find_lucas(n-1) + (n-2)\n    if n % 3 == 2:\n        return find_lucas(n-1) + (n-3)\n    \n    \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for i in list_:\n        i = format(i, string)\n        if i.lower() == 'true':\n            i = True\n        elif i.lower() == 'false':\n            i = False\n        elif i.lower() == 'none':\n            i = None\n        else:\n            i = str(i)\n        if i not in list_:\n            list_.append(i)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element.format_string = string.format(**element.format_string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list(map(lambda x: f'{string}{x}', list_))\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element.format_string = string.format(**element.format_dict)\n    return list"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    try:\n        list_.append(str(string))\n    except:\n        list_.append(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == '':\n        return list_\n    elif string[0]!= '%':\n        new_string = string\n    else:\n        new_string = string[1:]\n    return [f'{str(e)} {new_string}' for e in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    try:\n        return list(map(lambda x: f'{string} {x}', list_))\n    except ValueError as e:\n        raise ValueError(f'The list of strings {list_} is not valid: {e}') from e\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = ''\n    for element in list_:\n        result += element.format(string)\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(i.format(string))\n    return new_list\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {'user1': {'name': l1[0], 'age': l1[1]},\n            'user2': {'name': l2[0], 'age': l2[1]},\n            'user3': {'name': l3[0], 'age': l3[1]}\n    }"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_l1 = {}\n    for key, value in enumerate(l1):\n        dict_l1[key] = value\n    dict_l2 = {}\n    for key, value in enumerate(l2):\n        dict_l2[key] = value\n    dict_l3 = {}\n    for key, value in enumerate(l3):\n        dict_l3[key] = value\n    return dict_l1, dict_l2, dict_l3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_list = []\n    if l1!= []:\n        for i in range(0,len(l1)):\n            new_list.append({})\n            for j in range(0,len(l1[i])):\n                new_list[i][l1[i][j]] = l2[i][j]\n            new_list[i][\"ID\"] = l3[i]\n    else:\n        new_list = []\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in l1:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n    for i in l2:\n        if i in d2:\n            d2[i] += 1\n        else:\n            d2[i] = 1\n    d3 = {}\n    for i in d1:\n        d3[i] = d1[i] * d2[i]\n    return d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        for j in l2:\n            d[i] = j\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    if isinstance(l1, list):\n        for i in range(len(l1)):\n            result[i] = convert_list_dictionary(l1[i], l2[i], l3[i])\n    elif isinstance(l2, list):\n        for i in range(len(l1)):\n            result[i] = l1[i]\n            result[i].update(convert_list_dictionary(l1[i], l2[i], l3[i]))\n    elif isinstance(l3, list):\n        for i in range(len(l1)):\n            result[i] = l1[i]\n            result[i].update(l2[i])\n            result[i].update(l3[i])\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1 is None:\n        return None\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1 is None or l2 is None or l3 is None:\n        return None\n    if l1 == [] or l2 == [] or l3 == []:\n        return None\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    if len(l1) == 1:\n        d1.update(l1[0])\n        d1.update(l2[0])\n        d1.update(l3[0])\n        return d1\n    elif len(l1) == 2:\n        d1.update(l1[0])\n        d2.update(l2[0])\n        d3.update(l3[0])\n        return d1, d2, d3\n    elif len(l1) == 3:\n        d1.update(l1[0])\n        d2.update(l2[0])\n        d3.update(l3[0])\n        d4.update(l3[1])\n        return d1, d2, d3, d4\n    else:\n        d1.update(l1[0])\n        d2.update(l2[0])\n        d3.update(l3[0])\n        d4.update(l3[1])\n        d5.update(l3[2])\n        return d1, d2, d3, d4, d5\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {key:convert_list_dictionary(val, l2, l3) for key, val in l1.items()}\n    \ndef get_dict_value(d, key):\n    '''\n    Return the value for key in dictionary d.\n    '''\n    return d[key]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic1 = {}\n    dic2 = {}\n    dic3 = {}\n    for i in range(len(l1)):\n        dic1[l1[i]] = l2[i]\n    for j in range(len(l2)):\n        dic2[l2[j]] = l3[j]\n    for k in range(len(l3)):\n        dic3[l3[k]] = l3[k]\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #the equation can be written as max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    #the equation can be written as max(f(n), n)\n    #therefore, if n is positive, the equation can be written as max(f(n/2), f(n/3), f(n/4), f(n/5))\n    \n    max_sum = 0\n    if n > 0:\n        for i in range(1, n):\n            max_sum += f(i)\n        \n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #determine initial value\n    n_mod=0\n    n_fact=1\n    n=n_fact\n    while (n_mod!=0):\n        n_mod=n%n_fact\n        n=n_mod\n    #return\n    return n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for n in range (2, n):\n        sum = f(n)\n        max_sum = max(max_sum, sum)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            result += i\n            if i % 2 == 0:\n                result += n/2\n            if i % 3 == 0:\n                result += n/3\n            if i % 4 == 0:\n                result += n/4\n            if i % 5 == 0:\n                result += n/5\n            i += 1\n        else:\n            i += 1\n    return result\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)) for n in range(1, n+1) )\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max ( max ( n - (n/2), n - (n/3), n - (n/4), n - (n/5)), n )\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # TODO: Write your code here.\n    maximum = f(n)\n    i = 1\n    while(i <= n):\n        if (f(i) == f(n) + f(n/2) + f(n/3) + f(n/4) + f(n/5)):\n            maximum = f(n)\n        i += 1\n    return maximum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    maximum = -float(\"inf\")\n    for i in range (1, n + 1):\n        if ((n/i) % 1) == 0:\n            maximum = max(maximum, f(n/i))\n    return maximum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = lambda x: max ( (f(x/2), f(x/3), f(x/4)), n)\n    return f (n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return((n/2) + (n/3) + (n/4) + (n/5))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #return max(list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 'Not found'\n    else:\n        return max(input_list, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if input_list == None:\n        return None\n    \n    if len(input_list) == 0:\n        return None\n    \n    return max(input_list, key=len)\n    \nprint(max_length_list([3, 4, 5]))"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    output_list = [i for i in input_list if len(i) > len(input_list[0])]\n    return output_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    index = 0\n    for index, element in enumerate(input_list):\n        if index == len(input_list)-1:\n            break\n        if input_list[index] > element:\n            if max_length < element:\n                max_length = element\n                index = index + 1\n            else:\n                continue\n    if max_length == 0:\n        return None\n    return max_length\n    \n    \n    \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    min_length = input_list[0]\n    index = 0\n    for index, element in enumerate(input_list):\n        if element > min_length:\n            min_length = element\n            index = index + 1\n        else:\n            break\n    if index == len(input_list):\n        return None\n    return min_length\n    \n    \ndef main():\n    print(max_length_list([1, 2, 3]))\n    print(min_length_list([1, 2, 3]))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for x in input_list:\n        if len(x) > max_len:\n            max_len = len(x)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        print(\"Tuple doesn't contain duplicate values.\")\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #TODO: Implement this function\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return all(test_tup[i] == test_tup[i + 1] for i in range(len(test_tup) - 1))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for val in test_tup:\n        if val in test_tup:\n            print(\"tuple {} contains duplicate value {}\".format(val,test_tup.count(val)))\n        else:\n            return False\n    return True\n    \ndef main():\n    \n    #solution\n    test_tup1 = (2,1,2,3,4,5,7,3,4,6,7)\n    check_distinct(test_tup1)\n    \n    #solution with lambda\n    test_tup2 = (2,1,2,3,4,5,7,3,4,6,7)\n    check_distinct(test_tup2)\n    \n    #solution with set\n    test_tup3 = (2,1,2,3,4,5,7,3,4,6,7)\n    check_distinct(test_tup3)\n    \n    #solution with lambda\n    test_tup4 = (2,1,2,3,4,5,7,3,4,6,7)\n    check_distinct(test_tup4)\n    \n    #solution with set\n    test_tup5 = (2,1,2,3,4,5,7,3,4,6,7)\n    check_distinct(test_tup5)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct_tup = set(test_tup)\n    if len(distinct_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #Use a list to check for duplicates\n    #Tuple is unordered\n    #Data structure as:\n    #[(a, b), (c, d),...]\n    \n    #Code using two pointers\n    #if (x[0]!= x[1]) {\n        #return false\n    #} else {\n        #return true\n    #}\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # TODO: Write your code here\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not str1:\n        return \"\"\n    str1 = str1.lower()\n    count = {}\n    for c in str1:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n    if len(count) == 1:\n        return \"\"\n    \n    for c in count:\n        if count[c] == 1:\n            return c\n    return \"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # All characters in the string\n    str_as_list = list(str1)\n    # Create a dictionary\n    dictionary = {}\n    # Loop through each character\n    for i in str_as_list:\n        # If there is a key, add it to the dictionary\n        if i in dictionary:\n            # If there is another entry, update the count, else increment the count\n            dictionary[i] += 1\n        else:\n            # Else add it to the dictionary\n            dictionary[i] = 1\n    # Loop through the dictionary and find the first character\n    for i in dictionary:\n        # Find the first non-repeating character\n        if dictionary[i]!= 1:\n            # Replace the first occurrence\n            dictionary[i] = 0\n            # Return the first non-repeating character\n            return i\n    # If there was no match\n    return \"Missing\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in range(len(str1)):\n        if str1[i] not in dict1:\n            dict1[str1[i]] = 0\n        dict1[str1[i]] += 1\n    for i in range(len(str1)):\n        if str1[i] not in dict1:\n            return \"None\"\n        else:\n            if dict1[str1[i]] == 1:\n                return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.replace(\",\",\"\").replace(\".\",\"\").replace(\" \",\"\").replace(\"-\",\"\").replace(\";\",\"\").replace(\";\",\"\").replace(\" \",\"\").replace(\"-\",\"\")\n    print(str1)\n    if str1.count(str1[0])!= 0:\n        first_occur = str1[0]\n        for i in range(1,len(str1)):\n            if str1[i] == first_occur:\n                first_occur = str1[i]\n        print(first_occur)\n        return first_occur\n    else:\n        print(\"first non repeating character\")\n        return \"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    char_map = {}\n    for char in str1:\n        if char not in char_map:\n            char_map[char] = 1\n        else:\n            char_map[char] += 1\n    \n    for char, frequency in char_map.items():\n        if frequency == 1:\n            return char\n    \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    s = str1.lower()\n    count = {}\n    for i in s:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    for k,v in count.items():\n        if v == 1:\n            return k\n    \n    \ndef non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    s = str1.lower()\n    count = 0\n    for i in s:\n        if s.count(i)!= 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Hint:  you can use the.find(substring) function\n    # HINT:  if the given string contains the first repeating character then the character will appear twice\n    # HINT:  1. if the string is empty then return 0\n    # HINT:  2. if the given string is only one character, return 0\n    # HINT:  3. if the given string contains more than one character, then return None\n    # HINT:  4. If the given string is only one character, then return the first repeating character\n    # HINT:  5. if the given string contains no repeating characters, return None\n    # HINT:  6. if the given string has only one character, return None\n    if len(str1) == 0:\n        return 0\n    if len(str1) == 1:\n        return str1[0]\n    if str1[0] == str1[1]:\n        return str1[0]\n    for i in range(len(str1)):\n        if str1[i]!= str1[i+1]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    str1 = str(str1)\n    if str1 == str1[::-1]:\n        return str1[1::]\n    else:\n        return \"Invalid string\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #if the string is empty\n    if not str1:\n        return -1\n    #create an empty array to store the characters\n    char_array = []\n    #create an empty array to store the occurrences of characters\n    occurrences = [0]*26\n    for i in range(len(str1)):\n        #if the character is not repeated\n        if str1[i] not in char_array:\n            #add the character to the array\n            char_array.append(str1[i])\n            #add the occurrence count to the array\n            occurrences[ord(str1[i])-97]+=1\n    #get the first occurrence count\n    first_occurrence = occurrences.index(max(occurrences))\n    #return the first occurrence count\n    return char_array[first_occurrence]\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (re.search(regex, string)!= None)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0]!= string[-1]):\n        return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith(string) and string.endswith(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(string)\n    if string.startswith(\"a\"):\n        if string.endswith(\"e\"):\n            return True\n    elif string.startswith(\"A\"):\n        if string.endswith(\"E\"):\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) >= 2:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n    return True\ndef number_of_caps(string):\n    '''\n    Write a function to count the number of characters that are capital letters.\n    '''\n    if string.isupper():\n        return string.upper().count('A')\n    elif string.islower():\n        return string.lower().count('a')\n    else:\n        return string.count('A')\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x=[]\n    y=[]\n    z=[]\n    m=a+b+c\n    m1=m//3\n    if m1==0:\n        print(\"Not available\")\n    else:\n        for i in range(3):\n            x.append(i)\n            y.append(a+b+c[i])\n            z.append(y[i]/3)\n        print(\"Median: \",z[m1])\n    \ndef main():\n    print('Enter three numbers: ')\n    a,b,c=map(int,input().split())\n    median_numbers(a,b,c)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)>=3:\n        a = sorted(a)\n        b = sorted(b)\n        c = sorted(c)\n    median = (a[(len(a)-1)//2]+a[(len(a)-2)//2]+a[(len(a)-3)//2])/3\n    median_index = a.index(median)\n    median_list = []\n    median_list.append(a[median_index])\n    median_list.append(b[median_index])\n    median_list.append(c[median_index])\n    return median_list\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 1 or len(b) == 1 or len(c) == 1:\n        return a[0]\n    if len(a) > 1 and len(b) > 1 and len(c) > 1:\n        return sum(a)/3\n    return 0\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    if len(a)<3 or len(b)<3 or len(c)<3:\n        return None\n    return a[int(len(a)/3)]+b[int(len(b)/3)]+c[int(len(c)/3)]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) > 3:\n        return sorted([a,b,c])[len(a)//2]\n    elif len(a) > 1:\n        if len(b) > 3:\n            return sorted([a,b,c])[len(b)//2]\n        elif len(b) > 1:\n            if len(c) > 3:\n                return sorted([a,b,c])[len(c)//2]\n            elif len(c) > 1:\n                if len(a) > 3:\n                    return sorted([a,b,c])[len(a)//2]\n                elif len(a) > 1:\n                    if len(b) > 3:\n                        return sorted([a,b,c])[len(b)//2]\n                    elif len(b) > 1:\n                        if len(c) > 3:\n                            return sorted([a,b,c])[len(c)//2]\n                        elif len(c) > 1:\n                            if len(a) > 3:\n                                return sorted([a,b,c])[len(a)//2]\n                            elif len(a) > 1:\n                                if len(b) > 3:\n                                    return sorted([a,b,c])[len(b)//2]\n                                elif len(b) > 1:\n                                    if len(c) > 3:\n                                        return sorted([a,b,c])[len(c)//2]\n                                    elif len(c) > 1:\n                                        if len(a) > 3:\n                                            return sorted([a,b,c])[len(a)//2]\n                                        elif len(a) > 1:\n                                            if len(b) > 3:\n                                                return sorted([a,b,c])[len(b)//2]\n                                            elif len(b) > 1:\n                                                if len(c) > 3:\n                                                    return sorted([a,b,c])[len(c)//2]\n                                                elif len(c) > 1:\n                                                    if len(a) > 3:\n                                                        return sorted([a,b,c])[len(a)//2]\n                                                    elif len(a) > 1:\n                                                        if len(b) > 3:\n                                                            return sorted([a,b,c])[len(b)//2]\n                                                        elif len(b) > 1:\n                                                            if len(c) > 3:\n                                                                return sorted([a,b,c])[len(c)//2]\n                                                        elif len(c) > 1:\n                                                            if len(b) > 3:\n                                                                return sorted([a,b,c])[len(b)//2]\n                                                        elif len(b) > 1:\n                                                            if len(a) > 3:\n                                                                return sorted([a,b,c])[len(a)//2]\n                                                        elif len(a) > 1:\n                                                            if len(b) > 3:\n                                                                return sorted([a,b,c])[len(b)//2]\n                                                            elif len(b) > 1:\n                                                                if len(c) > 3:\n                                                                    return sorted([a,b,c])[len(c)//2]\n                                                                elif len(c) > 1:\n                                                                    if len(a) > 3:\n                                                                        return sorted([a,b,c])[len(a)//2]\n                                                                elif len(a) > 1:\n                                                                    if len(b) > 3:\n                                                                        return sorted([a,b,c])[len(b)//2]\n                                                                elif len(b) > 1:\n                                                                    if len(c) > 3:\n                                                                        return sorted([a,b,c])[len(c)//2]\n                                                                elif len(c) > 1:\n                                                                    if len(a) > 3:\n                                                                        return sorted([a,b,c])[len(a)//2]\n                                                                elif len(a) > 1:\n                                                                    if len(b) > 3:\n                                                                        return sorted([a,b,c])[len(b)//2]\n                                                                elif len(b) > 1:\n                                                                    if len(c) > 3:\n                                                                        return sorted([a,b,c])[len(c)//2]\n                                                                elif len(c) > 1:\n                                                                    if len(a) > 3:\n                                                                        return sorted([a,b,c])[len(a)//2]\n                                                                elif len(a) > 1:\n                                                                    if len(b) > 3:\n                                                                        return sorted([a,b,c])[len(b)//2]\n                                                                elif len(b) > 1:\n                                                                    if len(c) > 3:\n                                                                        return sorted([a,b,c])[len(c)//2]\n                                                                elif len(c) > 1:\n                                                                    if len(a) > 3:\n                                                                        return sorted([a,b,c])[len(a)//2]\n                                                                elif len(a) > 1:\n                                                                    if len(b) > 3:\n                                                                        return sorted([a,b,c])[len(b)//2]\n                                                                elif len(b) > 1:\n                                                                    if len(c) > 3:\n                                                                        return sorted([a,b,c])[len(c)//2]\n                                                                elif len(c) > 1:\n                                                                    if len(a) > 3:\n                                                                        return sorted([a,b,c])[len(a)//2]\n                                                                elif len(a) > 1:\n                                                                    if len(b) > 3:\n                                                                        return sorted([a,b,c])[len(b)//2]\n                                                                elif len(b) > 1:\n                                                                    if len(c) > 3:\n                                                                        return sorted([a,b,c])[len(c)//2]\n                                                                elif len(c) > 1:\n                                                                    if len(a) > 3:\n                                                                        return sorted([a,b,c])[len(a)//2]\n                                                                elif len(a) > 1:\n                                                                    if len(b) > 3:\n                                                                        return sorted([a,b,c])[len(b)//2]\n                                                                elif len(b) > 1:\n                                                                    if len(c) > 3:\n                                                                        return sorted([a,b,c])[len(c)//2]\n                                                                elif len(c) > 1:\n                                                                    if len(a) > 3:\n                                                                        return sorted([a,b,c])[len(a)//2]\n                                                                elif len(a) > 1:\n                                                                    if len(b) > 3:\n                                                                        return sorted([a,b,c])[len(b)//2]\n                                                                elif len(b) > 1:\n                                                                    if len(c) > 3:\n                                                                        return sorted([a,b,c])[len(c)//2]\n                                                                elif len(c) > 1:\n                                                                    if len(a) > 3:\n                                                                        return sorted([a,b,c])[len(a)//2]\n                                                                elif len(a) > 1:\n                                                                    if len(b) > 3:\n                                                                        return sorted([a,b,c])[len(b)//2]\n                                                                elif len"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == 0:\n        return b\n    elif a == 1:\n        return c\n    else:\n        return (a + c + b) // 3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median_a = 0\n    median_b = 0\n    median_c = 0\n    i = 0\n    j = 0\n    k = 0\n    n = len(a)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    a_median = int(sum(a) / 3)\n    b_median = int(sum(b) / 3)\n    c_median = int(sum(c) / 3)\n    \n    if a_median < b_median and a_median < c_median:\n        return a_median\n    elif b_median < a_median and b_median < c_median:\n        return b_median\n    else:\n        return c_median\n    \n    # replace this statement with your code\n    \ndef main():\n    '''\n    Write an app for computing the median of three numbers.\n    '''\n    \n    # create a list of 3 numbers\n    a_list = [1,2,3]\n    \n    # create a list of 7 numbers\n    b_list = [4,5,6,7,8,9,10]\n    \n    # compute the median\n    c_median = median_numbers(a_list,b_list,b_list)\n    \n    # display the median\n    print(f'The median of the numbers is: {c_median}')\n    \nmain()"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def median_c(x):\n        return (x+a)/2\n    def median_d(y):\n        return (y+b)/2\n    def median_e(z):\n        return (z+c)/2\n    return (median_c(a),median_d(b),median_e(c))\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    print('Median of three numbers:',end='')\n    if a>b and a>c:\n        print(a,end=',')\n    elif b>a and b>c:\n        print(b,end=',')\n    else:\n        print(c,end=',')\n    return a+b+c\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    num_list = []\n    for item in nums:\n        num_list.append(int(item))\n    sum_of_digits = 0\n    for i in range(len(num_list)):\n        sum_of_digits += num_list[i]\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def calc_sum(nums):\n        sum = 0\n        for i in nums:\n            sum += int(i)\n        return sum\n    \n    def calc_sum_2(nums):\n        sum = 0\n        for i in nums:\n            sum += i\n        return sum\n    \n    # calculate the sum of digits of each number of a given list\n    sum_of_digits = [calc_sum_2(nums) for nums in nums]\n    return sum(sum_of_digits)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # If the number is int, make sure it is not a list.\n    if isinstance(nums, int):\n        nums = [nums]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result=0\n    for num in nums:\n        result+=num%10\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # your code here\n    sum_of_digits = 0\n    for number in nums:\n        sum_of_digits += int(number)\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = 0\n    for n in nums:\n        sums += n\n    return sums\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += i\n    return s\n    \ndef sum_of_digits_1(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += i\n    return s\n    \ndef sum_of_digits_2(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([i for i in nums if i > 0])\n    \ndef main():\n    '''\n    Read a line containing a number separated by a comma, count the number of\n    digits in the number, and print it.\n    '''\n    nums = [int(x) for x in input().split(',')]\n    print(sum_of_digits(nums))\n    \n    '''\n    Write a program that takes a number n from the user and calculates the sum\n    of all the digits of n. For example, if n is 54, the sum of digits should be\n    4.\n    '''\n    \n    n = int(input('Enter a number: '))\n    print(sum_of_digits(n))\n    \n    '''\n    Write a program that takes a list of numbers as input and computes the\n    sum of all the even numbers. For example, if the list is [2, 4, 6, 8, 10],\n    the sum of even numbers should be 12.\n    '''\n    \n    nums = [int(x) for x in input().split(',')]\n    print(sum_of_digits_2(nums))\n    \n    '''\n    Write a program that takes a list of numbers as input and computes the\n    sum of all the even numbers. For example, if the list is [2, 4, 6, 8, 10],\n    the sum of even numbers should be 12.\n    '''\n    \n    nums = [int(x) for x in input().split(',')]\n    print(sum_of_digits_1(nums))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    total = 0\n    for n in nums:\n        total += int(n)\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return_tup = []\n    for i in range(len(test_tup1)):\n        xor_val = test_tup1[i] ^ test_tup2[i]\n        if xor_val not in return_tup:\n            return_tup.append(xor_val)\n    return return_tup\n    \ntest_tup1 = [2,4,5,6,7]\ntest_tup2 = [3,4,5,6,7]\nprint(bitwise_xor(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1, test_tup2 = tuple(map(tuple, test_tup1)), tuple(map(tuple, test_tup2))\n    total = 0\n    for i in range(len(test_tup1)):\n        total += test_tup1[i] ^ test_tup2[i]\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    # Create a list to store result\n    result = []\n    # Get the first and second tuple\n    first_tup = test_tup1\n    second_tup = test_tup2\n    \n    # Perform the bitwise xor using the bitwise operators\n    for i in range(len(first_tup)):\n        result.append(first_tup[i] ^ second_tup[i])\n        \n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    return (tup1[0] ^ tup2[0]) if tup1[0]!= tup2[0] else (tup1[1] ^ tup2[1])\n    \ndef get_bits(a):\n    '''\n    Write a function to return a list of integers in the form of bits.\n    '''\n    result = []\n    for i in range(0, len(a)):\n        result.append(a[i])\n    return result\n    \ndef get_bytes(a):\n    '''\n    Write a function that returns a bit vector of the given bytes.\n    '''\n    result = []\n    for i in range(0, len(a)):\n        result.append(a[i] % 2)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(sorted(test_tup1))\n    test_tup2 = tuple(sorted(test_tup2))\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    if l1 < l2:\n        test_tup1 = test_tup1[:l1]\n        test_tup2 = test_tup2[:l2]\n    if l1 > l2:\n        test_tup2 = test_tup2[:l1]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return(sum(tup1[i] ^ tup2[i] for i in range(len(tup1))))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return ((test_tup1[0] ^ test_tup2[0]) & 0xFF, (test_tup1[1] ^ test_tup2[1]) & 0xFF, (test_tup1[2] ^ test_tup2[2]) & 0xFF)\n    \ndef get_sum(test_tup1, test_tup2):\n    '''\n    Write a function to perform the logical sum operation on the given tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1], test_tup1[2] + test_tup2[2])\n    \ndef get_product(test_tup1, test_tup2):\n    '''\n    Write a function to perform the logical product operation on the given tuples.\n    '''\n    return (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1], test_tup1[2] * test_tup2[2])\n    \ndef get_identity(test_tup1, test_tup2):\n    '''\n    Write a function to perform the logical identity operation on the given tuples.\n    '''\n    return (test_tup1[0] == test_tup2[0], test_tup1[1] == test_tup2[1], test_tup1[2] == test_tup2[2])\n    \ndef get_absolute_value(test_tup1, test_tup2):\n    '''\n    Write a function to perform the logical absolute value operation on the given tuples.\n    '''\n    return (abs(test_tup1[0] - test_tup2[0]), abs(test_tup1[1] - test_tup2[1]), abs(test_tup1[2] - test_tup2[2]))\n    \ndef get_relative_value(test_tup1, test_tup2):\n    '''\n    Write a function to perform the logical relative value operation on the given tuples.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2])\n    \ndef get_sum_of_squares(test_tup1, test_tup2):\n    '''\n    Write a function to perform the square root operation on the given tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1], test_tup1[2] + test_tup2[2])\n    \ndef get_sum_of_squares_with_probabilities(test_tup1, test_tup2, test_prob1, test_prob2):\n    '''\n    Write a function to perform the square root operation on the given tuples with given probabilities.\n    '''\n    return ((test_tup1[0] + test_tup2[0]) / 2, (test_tup1[1] + test_tup2[1]) / 2, (test_tup1[2] + test_tup2[2]) / 2)\n    \ndef get_sum_of_squares_with_probabilities_and_absolute_value(test_tup1, test_tup2, test_prob1, test_prob2):\n    '''\n    Write a function to perform the square root operation on the given tuples with given probabilities.\n    '''\n    return ((test_tup1[0] + test_tup2[0]) / 2, (test_tup1[1] + test_tup2[1]) / 2, (test_tup1[2] + test_tup2[2]) / 2)\n    \ndef get_sum_of_squares_with_probabilities_and_relative_value(test_tup1, test_tup2, test_prob1, test_prob2):\n    '''\n    Write a function to perform the square root operation on the given tuples with given probabilities.\n    '''\n    return (test_tup1[0] + test_tup2[0]) / 2, (test_tup1[1] + test_tup2[1]) / 2, (test_tup1[2] + test_tup2[2]) / 2\n    \ndef get_sum_of_squares_with_probabilities_and_absolute_value_and_relative_value(test_tup1, test_tup2, test_prob1, test_prob2):\n    '''\n    Write a function to perform the square root operation on the given tuples with given probabilities.\n    '''\n    return (test_tup1[0] + test_tup2[0]) / 2, (test_tup1[1] + test_tup2[1]) / 2, (test_tup1[2] + test_tup2[2]) / 2\n    \ndef get_sum_of_squares_with_probabilities_and_absolute_value_and_relative_value_and_difference(test_tup1, test_tup2, test_prob1, test_prob2):\n    '''\n    Write a function to perform the square root operation on the given tuples with given probabilities.\n    '''\n    return (test_tup1[0] + test_tup2[0]) / 2, (test_tup1[1] + test_tup2[1]) / 2, (test_tup1[2] + test_tup2[2]) / 2, (test_tup1[0] - test_tup2[0]) / 2, (test_tup1[1] - test_tup2[1]) / 2, (test_tup1[2] - test_tup2[2]) / 2\n    \ndef get_sum_of_squares_with_probabilities_and_absolute_value_and_relative_value_and_difference_and_probabilities(test_tup1, test_tup2, test_prob1, test_prob2):\n    '''\n    Write a function to perform the square root operation on the given tuples with given probabilities.\n    '''\n    return (test_tup1[0] + test_tup2[0]) / 2, (test_tup1[1] + test_tup2[1]) / 2, (test_tup1[2] + test_tup2[2]) / 2, (test_tup1[0] - test_tup2[0]) / 2, (test_tup1[1] - test_tup2[1]) / 2, (test_tup1[2] - test_tup2[2]) / 2, (test_tup1[0] * test_tup2[0]) / 2, (test_tup1[1] * test_tup2[1]) / 2, (test_tup1[2] * test_tup2[2]) / 2, (test_tup1[0] / test_tup2[0]) / 2, (test_tup1[1] / test_tup2[1]) / 2, (test_tup1[2] / test_tup2[2]) / 2\n    \ndef get_sum_of_squares_with_probabilities_and_absolute_value_and_relative_value_and_difference_and_probabilities_and_absolute_value(test_tup1, test_tup2, test_prob1, test_prob2):\n    '''\n    Write a function to perform the square root operation on the given tuples with given probabilities.\n    '''\n    return (test_tup1[0] + test_tup2[0]) / 2, (test_tup1[1] + test_tup2[1]) / 2, (test_tup1[2] + test_tup2[2]) / 2, (test_tup1[0] "
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The tuple lengths must be the same.')\n    return [x or y for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"First tuple of bits must have the same length as second tuple.\"\n    assert len(test_tup1[0]) == len(test_tup2[0]), \"First tuple of bits must have the same length as second tuple.\"\n    assert all([len(x) == len(y) for x, y in zip(test_tup1, test_tup2)]), \"First tuple of bits must be of equal length to second tuple.\"\n    \n    output = []\n    for i in range(len(test_tup1)):\n        output.append(bin(test_tup1[i] ^ test_tup2[i]).replace('0b', '').zfill(len(test_tup1[i])))\n    \n    return output\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    with open(\"LICENSE.txt\", \"r\") as f:\n        data = f.readlines()\n    \n    count = 0\n    for line in data:\n        if line.startswith(\"#\"):\n            pass\n        else:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_lst = list()\n    for element in test_list:\n        freq_lst.append(len(element))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    tuple_list = []\n    for x in test_list:\n        if x not in tuple_list:\n            tuple_list.append(x)\n    return len(tuple_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for i in test_list:\n        if i in list(dict.fromkeys(i)):\n            freq += 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = Counter(test_list)\n    freq = [x for x in freq.values()]\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print(test_list)\n    dictionary = {}\n    for num in range(len(test_list)):\n        key = test_list[num][0]\n        value = test_list[num][1]\n        if(key in dictionary):\n            dictionary[key] += 1\n        else:\n            dictionary[key] = 1\n    print(dictionary)\n    return len(dictionary)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        key = i[0]\n        freq[key] = 0\n    for i in test_list:\n        key = i[0]\n        freq[key] += 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for line in test_list:\n        tup = tuple(line.strip('\\n').split(','))\n        unique_tuples.add(tup)\n    print(len(unique_tuples))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # pass a list of tuples to the function\n    freq = Counter(tuple(zip(*test_list))[0])\n    print(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create a new tuple with the outer tuple as the first element\n    new_tuple1 = test_tup1\n    # create a new tuple with the inner tuples as the second element\n    new_tuple2 = test_tup2\n    # add the tuple 1 element to the new tuple\n    new_tuple1 = tuple(new_tuple1[0]) + tuple(new_tuple1[1])\n    # add the tuple 2 element to the new tuple\n    new_tuple2 = tuple(new_tuple2[0]) + tuple(new_tuple2[1])\n    return new_tuple1, new_tuple2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tuple1 = test_tup1\n    nested_tuple2 = test_tup2\n    nested_tuple1.append(test_tup2)\n    nested_tuple2.append(test_tup1)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # loop through both the tuples and check if the tuple has a nested list\n    # If not, then create a new tuple and add the two nested tuples to it\n    # In order to do this, it takes the first element of each tuple\n    # and the second element of each tuple\n    \n    # check if the length of the two tuples have the same length\n    # If they don't, then use the first element of the 2nd tuple as the index\n    # If they do, then set the index of the tuple to the sum of the two elements\n    # else, set the index of the tuple to 0\n    \n    #return new tuple\n    \n    def add_nested_tuples(nested_tup1, nested_tup2):\n        # get the length of the two tuples\n        len1 = len(nested_tup1)\n        len2 = len(nested_tup2)\n        \n        if len1!= len2:\n            nested_tup1 = tuple(nested_tup1)\n            nested_tup2 = tuple(nested_tup2)\n            \n            # if the lengths do not match, then use the first element of the 2nd tuple\n            # if the lengths match, then use the second element of the 2nd tuple\n            # set the index of the new tuple to the sum of the two elements\n            # else, set the index of the new tuple to 0\n            \n            if len1!= len2:\n                # if the lengths do not match, then check if they are nested lists\n                # if they are, then use the first element of the 2nd tuple\n                # if the lengths match, then set the index of the new tuple to the sum of the two elements\n                # else, set the index of the new tuple to 0\n                \n                if len1!= len2:\n                    if nested_tup1 == nested_tup2:\n                        index = 0\n                    elif nested_tup1 == nested_tup2[0]:\n                        index = 1\n                    elif nested_tup1[0] == nested_tup2[0]:\n                        index = 2\n                    else:\n                        index = 0\n                        \n                    # if the lengths match, then set the index of the new tuple to the sum of the two elements\n                    # else, set the index of the new tuple to 0\n                    \n                    if index == 0:\n                        # check if the index of the nested list 1 is higher than the index of the nested list 2\n                        # if yes, then set the index of the nested list 1 to the index of the nested list 2\n                        # else, set the index of the nested list 1 to the index of the nested list 2\n                        if nested_tup1[0][index] > nested_tup2[0][index]:\n                            return tuple(nested_tup2)\n                        else:\n                            return tuple(nested_tup1)\n                else:\n                    index = 0\n                    \n                    # check if the index of the nested list 1 is higher than the index of the nested list 2\n                    # if yes, then set the index of the nested list 1 to the index of the nested list 2\n                    # else, set the index of the nested list 1 to the index of the nested list 2\n                    if nested_tup1[0][index] > nested_tup2[0][index]:\n                        return tuple(nested_tup2)\n                    else:\n                        return tuple(nested_tup1)\n            else:\n                # if the lengths match, then set the index of the new tuple to the sum of the two elements\n                # else, set the index of the new tuple to 0\n                index = 0\n                \n                # check if the index of the nested list 1 is higher than the index of the nested list 2\n                # if yes, then set the index of the nested list 1 to the index of the nested list 2\n                # else, set the index of the nested list 1 to the index of the nested list 2\n                if nested_tup1[0][index] > nested_tup2[0][index]:\n                    return tuple(nested_tup2)\n                else:\n                    return tuple(nested_tup1)\n        \n        else:\n            return tuple(nested_tup1)\n    \n    # create a new tuple and add the two nested tuples to it\n    # return the new tuple\n    \n    return add_nested_tuples(test_tup1, test_tup2)\n    \ndef sum_nested_tuples(nested_tup1, nested_tup2):\n    # get the length of the two tuples\n    len1 = len(nested_tup1)\n    len2 = len(nested_tup2)\n    \n    # if the lengths do not match, then use the first element of the 2nd tuple\n    # if the lengths match, then use the second element of the 2nd tuple\n    # set the index of the new tuple to the sum of the two elements\n    # else, set the index of the new tuple to 0\n    \n    if len1!= len2:\n        if nested_tup1 == nested_tup2:\n            return sum(nested_tup1)\n        elif nested_tup1 == nested_tup2[0]:\n            return sum(nested_tup1[0])\n        elif nested_tup1[0] == nested_tup2[0]:\n            return sum(nested_tup1)\n        else:\n            return sum(nested_tup1)\n    else:\n        return sum(nested_tup1)\n    \ndef count_nested_tuples(nested_tup1, nested_tup2):\n    # get the length of the two tuples\n    len1 = len(nested_tup1)\n    len2 = len(nested_tup2)\n    \n    # if the lengths do not match, then use the first element of the 2nd tuple\n    # if the lengths match, then use the second element of the 2nd tuple\n    # set the index of the new tuple to the sum of the two elements\n    # else, set the index of the new tuple to 0\n    \n    if len1!= len2:\n        if nested_tup1 == nested_tup2:\n            return len(nested_tup1)\n        elif nested_tup1 == nested_tup2[0]:\n            return len(nested_tup1[0])\n        elif nested_tup1[0] == nested_tup2[0]:\n            return len(nested_tup1)\n        else:\n            return len(nested_tup1)\n    else:\n        return len(nested_tup1)\n    "
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not test_tup1 and not test_tup2:\n        return\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print()\n    print('Add Nested Tuples')\n    print()\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = 0\n    for tup in test_tup1:\n        result = result + tup\n    for tup in test_tup2:\n        result = result + tup\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('\\n*** 1. Simple Addition ***')\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            result = test_tup1[i] + test_tup2[j]\n            print('\\t', result, '=', test_tup1[i] + test_tup2[j])\n        print('\\n')\n    print('\\n*** 2. Index Sum ***')\n    print('\\t', test_tup1, '\\t', sum(test_tup1))\n    print('\\t', test_tup2, '\\t', sum(test_tup2))\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b>a:\n        return a\n    elif b<a:\n        return b\n    else:\n        print('same')\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        a,b = b,a\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a)!= float and type(b)!= float:\n        return -1\n    elif a == b:\n        return a\n    elif a < b:\n        a,b = b,a\n    else:\n        return -1\n    \n    if type(a) == float:\n        return a\n    elif type(b) == float:\n        return b\n    elif type(a) == str or type(b) == str:\n        return b\n    \n    if b > 0:\n        return a\n    elif a < 0:\n        return -1\n    else:\n        return -b\n        \nprint(minimum(2,6))\nprint(minimum(2,6.0))\nprint(minimum(1.5,0))\nprint(minimum(0.5,1.0))\nprint(minimum(2.5,0.5))"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a)\n    else:\n        print(b)\n    \n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum=a\n    if a<b:\n        minimum=b\n    return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #create a new array to hold the minimum\n    min_arr = [0]*len(a)\n    min_index = 0\n    #create a new array to hold the smallest number in array\n    for i in range(len(a)):\n        if a[i] < b[i]:\n            min_arr[i] = a[i]\n        elif a[i] == b[i]:\n            min_arr[i] = a[i]\n            min_index = i\n    #return the index and min_arr\n    return min_index, min_arr\n    "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum = a\n    if a < b:\n        minimum = b\n    return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # Write your code here.\n    return a if a<b else b\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    lst = []\n    for i in tuplex:\n        lst.append(i)\n    if tuple1 in lst:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem==tuple1:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex[tuple1] in tuplex[:tuple1+1]\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex[0] == tuple1[0]):\n        return True\n    elif (tuplex[0] == tuple1[-1]):\n        return True\n    elif (tuplex[0] == tuple1[-1]):\n        return True\n    else:\n        return False\n        \ndef main():\n    '''\n    Function to calculate the sum of the numbers.\n    '''\n    tuple1 = (7,5,8,7,4,4,9,8,3,8,7,5,4,3,9,7,8)\n    tuple2 = (8,9,9,3,8,9,6,3,7,6,3,8,9,6,3,7,9,4)\n    tuplex = tuple(tuple1)\n    tuple3 = tuple(tuple2)\n    print(tuplex)\n    print(check_tuplex(tuplex,tuple3))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n        else:\n            return False\n    \n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == 1:\n        if tuplex[0] in tuple1:\n            return True\n    else:\n        for i in tuplex:\n            if tuplex.count(i) > 1:\n                return False\n    return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s = str(x)\n    if s[0] == '0':\n        return (len(s) - 1) % 2 == 1 \n    else:\n        return (len(s) - 1) % 2 == 0 \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Your code here\n    for i in range(x):\n        if (x%2) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"odd\"\n    else:\n        return \"even\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # YOUR CODE HERE\n    even=0\n    odd=0\n    for i in x:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    if even>=2 and odd<=2:\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd = x % 2\n    if odd == 0:\n        print(\"the number is even\")\n    else:\n        print(\"the number is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = 0\n    a = 0\n    while (a < x):\n        if(a % 2 == 0):\n            y += 1\n            a += 1\n        else:\n            a += 1\n    return y\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #first case\n    if x % 2 == 0:\n        return 'even'\n    \n    #second case\n    return 'odd'\n    \n    \n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # This code is from the wiki to add the extra padding (if you want)\n    #if n < 10:\n    #    n = n + 10 - len(str(n))\n    #elif n < 100:\n    #    n = n + 10 - len(str(n)[1:])\n    #elif n < 1000:\n    #    n = n + 10 - len(str(n)[2:])\n    #else:\n    #    n = n + 10 - len(str(n)[3:])\n    \n    #print(n)\n    return n\n    #else:\n    #    n = n + 10 - len(str(n)[3:])\n    \n    #return rearrange_bigger(n)\n    \ndef get_next_bigger(n):\n    '''\n    Write a function to find the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # This code is from the wiki to add the extra padding (if you want)\n    #if n < 10:\n    #    n = n + 10 - len(str(n))\n    #elif n < 100:\n    #    n = n + 10 - len(str(n)[1:])\n    #elif n < 1000:\n    #    n = n + 10 - len(str(n)[2:])\n    #else:\n    #    n = n + 10 - len(str(n)[3:])\n    \n    #print(n)\n    return n\n    #else:\n    #    n = n + 10 - len(str(n)[3:])\n    \n    #return get_next_bigger(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    divisors = [2, 3, 5]\n    return n//10 % 10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    new_num = 0\n    \n    for i in str(n):\n        if i not in '123456789':\n            break\n        \n        num = int(i)\n        new_num += num\n    \n    return new_num\n    \ndef next_bigger(n):\n    '''\n    Write a function to find the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    new_num = 0\n    \n    for i in str(n):\n        if i not in '123456789':\n            break\n        \n        num = int(i)\n        new_num += num\n    \n    return new_num\n    \nprint(rearrange_bigger(5))\nprint(next_bigger(5)"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = n + '0'*(5-len(n))\n    return int(''.join(reversed(n)))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    while len(s) < 8:\n        s = '0' + s\n    res = ''\n    for i in range(len(s)):\n        if i % 2!= 0:\n            res += s[i]\n    return int(res)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    b = str(n)\n    l = list(b)\n    for i in range(len(l)):\n        if l[i] < '1':\n            l[i] = '0' + l[i]\n    return int(''.join(l))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}\n    new_num = []\n    new_num_digits = []\n    for i in range(len(n)):\n        if n[i] in digits:\n            new_num.append(digits[n[i]])\n            new_num_digits.append(i)\n    return ''.join(str(num) for num in sorted(new_num, reverse=True)) + ''.join(str(num) for num in sorted(new_num_digits, reverse=True))"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits_list = []\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list.append(digits.pop(0))\n    digits_list"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def helper(n):\n        s = str(n)\n        last = s[-1]\n        for i in range(len(s)-1, -1, -1):\n            if last == '9':\n                break\n            else:\n                n = n*10+int(s[i])\n        return n\n    return helper(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    #define the variable that will contain the next bigger number\n    next_bigger_num = []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr1, arr2 = list(nums1), list(nums2)\n    m = len(arr1)\n    k = k % len(arr1)\n    if k == 0:\n        return None\n    for i in range(m):\n        if arr1[i] > arr2[i]:\n            arr1[i], arr2[i] = arr2[i], arr1[i]\n        else:\n            break\n    arr1 = sorted(arr1)\n    for i in range(m):\n        if i < k:\n            continue\n        if arr1[i] < arr2[i]:\n            arr1[i], arr2[i] = arr2[i], arr1[i]\n        else:\n            break\n    return arr1\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_list = []\n    for i in range(len(nums1)):\n        heapq.heappush(smallest_list, (-nums1[i], nums1[i]))\n    for j in range(len(nums2)):\n        heapq.heappush(smallest_list, (-nums2[j], nums2[j]))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k <= 0 or len(nums1)<=1 or len(nums2)<=1:\n        return []\n    \n    pairs = []\n    pairs.append([nums1[0], nums2[0]])\n    heapq.heapify(pairs)\n    pairs.sort()\n    print(pairs)\n    #print(pairs)\n    # heapify() takes n, the length of the array and returns the index of the node.\n    # If n is less than 2, you will return the index from index 0.\n    # if n is greater than 2, you will return the index from index 1\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for i in nums1:\n        for j in nums2:\n            if i + j not in h:\n                heapq.heappush(h, i + j)\n                heapq.heappush(h, i)\n    res = 0\n    while len(h) > k:\n        x = heapq.heappop(h)\n        y = heapq.heappop(h)\n        res += 1\n        heapq.heappush(h, x + y)\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #create a pair list to store all the elements of the list \n    #as the first element is the smallest element\n    smallest_list = []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(heap, (i + j))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if k > len(nums1) + len(nums2):\n        return \"Invalid\"\n    \n    if k == len(nums1) + len(nums2):\n        return []\n    \n    i = 0\n    j = len(nums1) - 1\n    result = []\n    \n    while i!= j:\n        if nums1[i] + nums2[j]!= 0:\n            result.append((nums1[i] + nums2[j], nums1[i] + nums2[j]))\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    \n    if len(result) == k:\n        return result\n    \n    return \"Invalid\"\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    print (\"k smallest pairs:\")\n    num_k = k\n    h = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            #print (f\"({i}, {j})\")\n            if nums1[i] == nums2[j] and i!= j:\n                heapq.heappush(h, (nums1[i] - nums2[j], i, j))\n            elif nums1[i] > nums2[j]:\n                heapq.heappush(h, (nums1[i] - nums2[j], i, j))\n            else:\n                heapq.heappush(h, (nums2[j] - nums1[i], j, i))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def min_heapify(nums, parent, i):\n        smallest = i\n        left = 2*parent +1\n        right = 2*parent +2\n        if left < len(nums) and nums[left] < nums[i]:\n            smallest = left\n        if right < len(nums) and nums[right] < nums[i]:\n            smallest = right\n        if smallest!= i:\n            nums[smallest], nums[i] = nums[i], nums[smallest]\n            min_heapify(nums, smallest, i)\n    \n    def heap_sort(nums):\n        heap = []\n        for num in nums:\n            heapq.heappush(heap, num)\n        i = len(heap)\n        while i>0:\n            num = heapq.heappop(heap)\n            nums[i-1], nums[-i] = nums[-i], nums[i]\n            i-=1\n    \n    count = 0\n    for i in range(len(nums1)):\n        min_heapify(nums1, i, 0)\n    \n    for j in range(len(nums2)):\n        min_heapify(nums2, j, 0)\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] <= nums2[j]:\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k==0:\n        return []\n    heap = []\n    result = []\n    for i in range(len(nums1)):\n        for j in range(i, len(nums1)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    while len(heap) > 0:\n        total = heapq.heappop(heap)\n        if total[1] - total[2] >= k:\n            result.append((total[0], total[1] - total[2]))\n        else:\n            heapq.heappush(heap, (total[0], total[1] - total[2]))\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # iterate through the list, and compare all the tuples and sum the first and last of each tuple\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            total = list1[i][0] + list1[j][0]\n            if total < list1[i][1] + list1[j][1]:\n                total = list1[i][1] + list1[j][1]\n                list1[i], list1[j] = list1[j], list1[i]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = 0\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = list1[0][0]*list1[1][0]\n    for i in list1:\n        minimum = minimum if i[0] > minimum else i[0]\n        minimum = minimum if i[0] < minimum else i[0]\n        minimum = minimum if i[1] > minimum else i[1]\n    return minimum\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # return the min of each pair of tuples\n    min_val = list1[0][1]\n    for index, element in enumerate(list1[1:]):\n        if min_val > element[1]:\n            min_val = element[1]\n    return min_val\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in list1:\n        for j in list1:\n            min_product = min(i[0],j[0],min_product)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    if n < 2:\n        return -1\n    else:\n        for i in range(0,n):\n            for j in range(i+1,n):\n                #print(list1[i], list1[j])\n                if list1[i][0] < list1[j][0] and list1[i][1] > list1[j][1]:\n                    return list1[i][1]*list1[j][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    min_product_pair = []\n    for a,b in list1:\n        if a[0] < b[0] and b[1] < a[1]:\n            temp = (a[0]*b[0], a[0], b[1])\n            min_product_pair.append(temp)\n        elif a[0] < b[0] and b[1] >= a[1]:\n            temp = (a[1]*b[1], a[1], b[0])\n            min_product_pair.append(temp)\n        elif b[0] < a[0] and a[1] >= b[1]:\n            temp = (a[0]*b[0], b[0], a[1])\n            min_product_pair.append(temp)\n        elif b[0] >= a[0] and a[1] >= b[1]:\n            temp = (a[0]*b[0], a[0], b[1])\n            min_product_pair.append(temp)\n    min_product_list = list(min_product_pair)\n    min_product = min(min_product_list)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #TODO: Write your code here\n    min_product = None\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if min_product == None:\n                min_product = list1[i] * list1[j]\n            else:\n                if list1[i] * list1[j] < min_product:\n                    min_product = list1[i] * list1[j]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # TODO: Create a function that finds the minimum product from the triplet of tuples in the list.\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l = list(map(lambda x: (x[0], x[1]), list1))\n    \n    min_p = l[0][1]\n    for i in range(1, len(l)):\n        if l[i][1] < min_p:\n            min_p = l[i][1]\n    \n    return min_p\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = min(listval)\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for x in range(len(listval)):\n        if listval[x] < listval[0]:\n            listval[0] = listval[x]\n    return listval[0]\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for x in range(len(listval)):\n        if listval[x] > listval[0]:\n            listval[0] = listval[x]\n    return listval[0]\n    \ndef reverse_sort(listval):\n    '''\n    Write a function to sort a given heterogeneous list.\n    '''\n    for x in range(len(listval)):\n        temp = listval[x]\n        j = x\n        while j > 0 and listval[j-1] > temp:\n            listval[j] = listval[j-1]\n            j = j-1\n        listval[j] = temp\n    return listval\n    \ndef merge(listval):\n    '''\n    Write a function to sort a given heterogeneous list.\n    '''\n    for x in range(len(listval)):\n        temp = min_val(listval[x:len(listval)])\n        j = x\n        for y in range(len(listval[x:len(listval)])):\n            if listval[x] > listval[y] and listval[y] > temp:\n                temp = listval[y]\n                j = y\n        listval[x:x+len(listval[j:len(listval)])] = listval[j:j+len(listval[j:len(listval)])] + [temp]\n    return listval\n    \ndef sort(listval):\n    '''\n    Write a function to sort a given heterogeneous list.\n    '''\n    #TODO: Finish this function\n    return listval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for val in listval:\n        if min > val:\n            min = val\n    return min\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for val in listval:\n        if max < val:\n            max = val\n    return max\n    \ndef median(listval):\n    '''\n    Write a function to compute the median value in a given heterogeneous list.\n    '''\n    mid_val = len(listval)/2\n    if len(listval) % 2 == 1:\n        mid_val = mid_val - 1\n    if len(listval) % 2 == 0:\n        return (listval[mid_val] + listval[mid_val+1])/2\n    else:\n        return listval[mid_val]\n    \ndef avg(listval):\n    '''\n    Write a function to compute the average value in a given heterogeneous list.\n    '''\n    avg = 0.0\n    total = len(listval)\n    for val in listval:\n        avg += val\n    return avg/total\n    \ndef p_sum(listval):\n    '''\n    Write a function to find the percentage value in a given heterogeneous list.\n    '''\n    p_sum = 0.0\n    total = len(listval)\n    for val in listval:\n        p_sum += val\n    return (p_sum/total) * 100\n    \ndef confidence(listval):\n    '''\n    Write a function to compute the confidence value in a given heterogeneous list.\n    '''\n    confidence = 0.0\n    total = len(listval)\n    for val in listval:\n        if val > 0:\n            confidence += val/2.0\n    return confidence\n    \ndef ks_test(listval):\n    '''\n    Write a function to compute the ks test value in a given heterogeneous list.\n    '''\n    if len(listval) < 2:\n        return 1.0\n    else:\n        return (listval[0] - listval[1]) / math.sqrt(listval[0] * listval[1])\n    \ndef ks_value(listval):\n    '''\n    Write a function to compute the ks test value in a given heterogeneous list.\n    '''\n    if len(listval) < 2:\n        return 1.0\n    else:\n        return listval[0]/listval[1]\n    \ndef md(listval):\n    '''\n    Write a function to compute the median value in a given heterogeneous list.\n    '''\n    if len(listval) < 2:\n        return listval[0]\n    else:\n        return median(listval)\n    \ndef p_value(listval):\n    '''\n    Write a function to compute the p-value value in a given heterogeneous list.\n    '''\n    if len(listval) < 2:\n        return 1.0\n    else:\n        return p_sum(listval)/len(listval)\n    \ndef t_test(listval):\n    '''\n    Write a function to compute the t-value value in a given heterogeneous list.\n    '''\n    if len(listval) < 2:\n        return 1.0\n    else:\n        return t_value(listval)\n    \ndef t_value(listval):\n    '''\n    Write a function to compute the t-value value in a given heterogeneous list.\n    '''\n    if len(listval) < 2:\n        return 1.0\n    else:\n        return 1.0 - (ks_test(listval) - 1) / (ks_test(listval) * (1 - ks_test(listval)))\n    \ndef t_value_test(listval):\n    '''\n    Write a function to compute the t-value value in a given heterogeneous list.\n    '''\n    if len(listval) < 2:\n        return 1.0\n    else:\n        return 1.0 - (ks_value(listval) - 1) / (ks_value(listval) * (1 - ks_value(listval)))\n    \ndef main():\n    '''\n    Sample test code.\n    '''\n    print('Evaluating program...')\n    \n    print('list of values:')\n    for i in range(10):\n        print('{} = {}'.format(i,eval(str(i))))\n    \n    print('\\nThe median of the following values is: {}'.format(median([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(min_val([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(median([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(avg([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(p_sum([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(confidence([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(ks_test([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(ks_value([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(md([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(p_value([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(t_test([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \n    print('\\nThe median of the following values is: {}'.format(t_value_test([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for num in listval:\n        if min_val > num:\n            min_val = num\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    lst = []\n    for i in listval:\n        lst.append(i)\n    return min(lst)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in range(len(listval)):\n        if(listval[i] < listval[i-1]):\n            return listval[i]\n    return listval[-1]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    min_index = -1\n    for index, item in enumerate(listval):\n        if item < min_val:\n            min_val = item\n            min_index = index\n    return min_val, min_index\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for x in listval:\n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return''.join(x.capitalize() for x in re.split('([a-z])([A-Z]+)', word))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    final_result = \"\"\n    if(len(word) == 0):\n        return word\n    elif(word[0].isupper()):\n        if(len(word) == 1):\n            return word[0].lower() + word[1:]\n        else:\n            result = re.search(\"[A-Z]\",word)\n            if(result):\n                return word[0:result.start()] + word[result.end():]\n            else:\n                return word + word[1:]\n    else:\n        result = re.search(\"[a-zA-Z]\",word)\n        if(result):\n            return word[0:result.start()] + word[result.end():]\n        else:\n            return word + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    for i in re.findall(r'[A-Z]+', word):\n        word = word.replace(i, i.upper())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'([A-Z]|[a-z]|[0-9]|[!@#$%&*]|\\d|[+_])'\n    if word.endswith('y'):\n        return word[:-1] + 'Y'\n    if re.search(pattern, word):\n        return word[:-1] + 'Y' + word[-1]\n    else:\n        return word[:-1] + word[-1] + 'a'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() if w.islower() else w.lower() for w in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return word\n    if word.upper() in ['A', 'E', 'I', 'O', 'U']:\n        return word.upper()\n    if word.upper() in ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n        return word.lower()\n    return word.capitalize()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # snake case -> snake case -> camel case\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if l[i]%2==1:\n            new_list.append(l[i])\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2!= 0:\n            odd.append(i)\n    l = odd\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    t = l[::2]\n    for i in t:\n        if i % 2 == 1:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    l_odd = [i for i in l if i%2!= 0]\n    return l_odd\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list2=[]\n    for num in l:\n        if num%2==0:\n            list2.append(num)\n    return list2\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l[i] = l[i] / 2\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    num_list=[]\n    for i in l:\n        if i%2==0:\n            num_list.append(i)\n    l=num_list\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    l_len = len(l)\n    if l_len == 1:\n        return []\n    elif l_len % 2 == 1:\n        return l\n    else:\n        i = l_len // 2\n        l1 = l[i]\n        l2 = l[i - 1]\n        l1_index = 0\n        l2_index = 1\n        while l1_index < l2_index:\n            if l1 > l2:\n                l1_index += 1\n            else:\n                l2_index += 1\n        l1 = l[i - l1_index]\n        l2 = l[i - l2_index]\n        if l1 > l2:\n            l1_index += 1\n        else:\n            l2_index += 1\n        l_len = len(l)\n        if l_len % 2 == 0:\n            return l[l_len//2:l_len]\n        else:\n            return l[l_len//2 + 1:l_len]\n    \n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd=[]\n    for i in l:\n        if i%2==1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_new = []\n    for i in l:\n        if i % 2!= 0:\n            l_new.append(i)\n    return l_new\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # extract the tuple\n    tuple1 = list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        raise IndexError('Index out of range')\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = tuple()\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    # Initialize an empty list of tuples and assign it to the variable `sublist`\n    sublist = []\n    \n    # Loop through the list and append each tuple to the sublist.\n    for i in range(len(list1)):\n        sublist.append(list1[i])\n    \n    # Remove the first element from the sublist\n    sublist.pop(0)\n    \n    # Return the nth element from the sublist\n    return sublist[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list_nth_element = []\n    for i in range(n):\n        list_nth_element.append(list1[i])\n    return list_nth_element"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # your code goes here\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for tuple in list1:\n        list2.append(tuple[n])\n    return list2\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1==list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    intersection = []\n    for x in list1:\n        if x in list2:\n            intersection.append(x)\n    return intersection\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if (list1[0]==list2[0]):\n        return True\n    if (list1[1]==list2[1]):\n        return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    return len(set(list1).intersection(set(list2)))>=0\n    \nprint(overlapping([1, 2, 3], [3, 5, 2, 1, 2]))\nprint(overlapping([1, 2, 3], [3, 5, 2, 1, 2, 5]))\nprint(overlapping([1, 2, 3], [3, 5, 2, 1, 2, 5, 7]))\nprint(overlapping([1, 2, 3], [3, 5, 2, 1, 2, 5, 7, 3])"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                print('List[{0}] is overlapping with List[{1}]'.format(i,j))\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if list1[0] in list2 or list2[0] in list1 else False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list2)):\n            if list1[i] in list2:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return not(list1 == list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if(list1.count(list2[0])>1):\n        return False\n    elif(list2.count(list1[0])>1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = arr[0] * arr[0]\n    for i in range(1, len(arr)):\n        maxProduct = max(maxProduct * arr[i], arr[i])\n    return maxProduct\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if(arr[i] > max_product):\n            max_product = arr[i]\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product_sum = 0\n    max_product = 0\n    \n    for i in arr:\n        product_sum += i\n        if product_sum > max_product:\n            max_product = product_sum\n            pair = [i, product_sum]\n    return pair\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    x = 0\n    y = 0\n    n = len(arr)\n    z = 0\n    while x < n:\n        if arr[x] > arr[y]:\n            x = arr[y]\n            z = arr[y]\n        elif arr[x] < arr[y]:\n            y = arr[x]\n        else:\n            z = arr[x]\n            z = z\n    print(arr, z, y, x, z)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    d = dict()\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    d_list = list(d.values())\n    d_list.sort()\n    for i in d:\n        if d[i] == d_list[0]:\n            return [i, d[i]]\n    return [-1, -1]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_ = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_:\n            max_ = arr[i]\n    return(max_)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr)\n    arr.sort()\n    for i in range(1,n-1):\n        for j in range(i+1,n):\n            if arr[i]*arr[j]>arr[j]:\n                arr[j],arr[i]=arr[i],arr[j]\n    return arr[-1]\narr=[1,2,3,4,5]\nprint(max_Product(arr))"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    L = len(arr)\n    \n    def maxProduct(n):\n        if n == 1:\n            return arr[0]\n        if n == 2:\n            return arr[0] * arr[1]\n        p1 = maxProduct(n - 1)\n        p2 = maxProduct(n - 2)\n        return p1 if arr[n - 1] > arr[n - 2] else p2\n    \n    return maxProduct(L - 1)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr=list(arr)\n    max_p=arr[0]\n    for i in range(len(arr)):\n        if max_p*arr[i]>max_p:\n            max_p=arr[i]\n    return max_p,arr\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    uniq_tuples = []\n    for ele in Input:\n        if ele not in uniq_tuples:\n            uniq_tuples.append(ele)\n    return uniq_tuples\n    \nInput = [(1,2,3), (1,2,4), (1,3,4), (2,3,4), (2,3,5)]\nprint(group_tuples(Input)"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output_list = []\n    for index, i in enumerate(Input):\n        if index == 0:\n            output_list.append(i)\n        if i not in output_list:\n            output_list.append(i)\n    return output_list\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique_tuples = list(dict.fromkeys(Input))\n    print(unique_tuples)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_list = []\n    second_list = []\n    for i in range(len(Input)):\n        if Input[i] in first_list:\n            pass\n        else:\n            first_list.append(Input[i])\n    for i in range(len(first_list)):\n        if i == 0:\n            second_list.append(first_list[i])\n        else:\n            if first_list[i]!= first_list[i-1]:\n                second_list.append(first_list[i])\n    if len(second_list)!= 0:\n        return second_list[0]\n    else:\n        return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Inp=[]\n    for i in Input:\n        Inp.append(i)\n    if len(set(Inp))==len(Inp):\n        return list(set(Inp))\n    else:\n        return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your code here\n    # Delete this line\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # TODO: Write your code here\n    \n    list1 = Input[0]\n    list2 = Input[1]\n    list3 = Input[2]\n    list4 = Input[3]\n    \n    common_first = max(list1,list2,list3,list4)\n    \n    return common_first\n    \n    \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print('Common first element in given list is:', end = \"\")\n    for i in Input:\n        if i[0] == i[1]:\n            print(i[0], end = \" \")\n        else:\n            print(' ', end = \" \")\n    print(\"\\n\")\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [x[0] for x in list(set(Input))]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d1 = dict(zip(*Input))\n    d2 = dict(zip(*d1))\n    common_first = d1.get(d2.get(min(d1, key=d1.get, default=None)))\n    return common_first"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if i > max:\n            max = i\n    return max"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    maxLength = 0\n    for i in range(len(lst)):\n        if lst[i] > maxLength:\n            maxLength = lst[i]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    len_lst = len(lst) \n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n            \n    return max_element\n    \ndef Remove_Max(lst):\n    '''\n    Write a python function to remove the maximum element from a list\n    '''\n    len_lst = len(lst) \n    for i in range(len_lst):\n        if lst[i] > lst[i-1]:\n            lst.pop(i-1)\n        else:\n            pass\n    \n    return lst\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return -1\n    elif len(lst)==1:\n        return lst[0]\n    else:\n        return Find_Max(lst[1:])\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = lst[0]\n    for element in lst:\n        if element > maximum:\n            maximum = element\n    return maximum\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = lst[0]\n    for x in lst:\n        if(x > Max):\n            Max = x\n    return Max\nlst = [3,6,9,12,15,16,19,23,24,25,32,37,38,43]\nlst = [3,6,9,12,15,16,19,23,24,25,32,37,38,43]\nprint(Find_Max(lst))\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    i = 0\n    for i in range(len(lst)):\n        if(lst[i] > lst[i+1]):\n            return lst[i]\n    return lst[i]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if not lst:\n        return 0\n    return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(lst)\n    max_index = lst.index(max_len)\n    return max_index\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total += number\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_ = 0\n    for i in range(len(list1)):\n        sum_ += list1[i]\n    print(sum_, '=', sum(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #loop through each element in the list\n    for i in list1:\n        #if the element is a number it is added to a new variable\n        if type(i) == int:\n            #print the number\n            print(i)\n    #add the length of the list to a variable\n    #print the sum\n    sum = 0\n    #loop through the list\n    for i in list1:\n        #if the element is a number it is added to a new variable\n        if type(i) == int:\n            #add the element to the sum\n            sum += i\n            #print the sum\n            print(sum)\n    #return sum\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        total += list1[i]\n    return total\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    len_of_list = len(list1)\n    for i in list1:\n        total_sum += i\n    print(f\"the sum of the numbers in the list is: {total_sum * len_of_list}\")\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = len(list1)\n    for item in list1:\n        total += item\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # i = 0\n    # while i < len(list1):\n    #     if i == 0:\n    #         a = list1[i]\n    #     else:\n    #         a = list1[i] + list1[i-1]\n    #     list1[i] = a\n    #     i += 1\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for item in list1:\n        item = round(item,2)\n    return item\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(list1)\n    for number in list1:\n        print(number, '=', round(number,2), '*', len(list1))\n    return sum(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n    \nprint(cube_Sum(10))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    for i in range(n):\n        a += i*(i+1)\n    return a\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        c += i**3\n    print(c)\n    \ncube_Sum(5)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #Write your code here\n    cube = []\n    for i in range(1,n+1):\n        cube.append(i**3)\n    \n    return sum(cube)\n    \nprint(cube_Sum(10))\nprint(cube_Sum(20))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(input(\"Enter the number you want to sum: \"))\n    if n < 0: \n        print (\"Please enter a positive integer\")\n    else:\n        cube = 0\n        for i in range(1, n+1):\n            cube += i**3\n        print(\"cube_sum is: \",cube)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # define the sum of the nth even numbers\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1) if i%2==0])\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n): \n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i **3\n    return sum\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2] + test_tup[3]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(map(lambda x:x+'.', test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = []\n    for i in test_tup:\n        result.append(i)\n    return result\n    \ndef gather_columns(my_dict, delimiter):\n    '''\n    Write a function to find all values in a dictionary where the keys are in the delimiter and the values are \n    concatenated together to give one list.\n    '''\n    temp = []\n    for key, value in my_dict.items():\n        temp = concatenate_tuple(temp)\n    return temp\n    \ndef convert_dict(my_dict):\n    '''\n    Write a function to turn a dictionary into a list of tuples.\n    '''\n    temp = []\n    for key, value in my_dict.items():\n        temp.append((key, value))\n    return temp\n    \ndef combine_list(my_list):\n    '''\n    Write a function to combine multiple lists together.\n    '''\n    result = []\n    for i in my_list:\n        result.extend(i)\n    return result\n    \ndef add_list(my_list):\n    '''\n    Write a function to add multiple lists together.\n    '''\n    result = []\n    for i in my_list:\n        result.append(i)\n    return result\n    \ndef remove_from_list(my_list, item):\n    '''\n    Write a function to remove a list items.\n    '''\n    for i in range(len(my_list)):\n        if my_list[i] == item:\n            my_list.pop(i)\n    return my_list\n    \ndef add_strings(my_list):\n    '''\n    Write a function to combine several strings into one.\n    '''\n    for i in range(len(my_list)):\n        my_list[i] = my_list[i].replace(\" \", \"\")\n        my_list[i] = my_list[i].replace(\"\\'\", \"\")\n        my_list[i] = my_list[i].replace(\"\\\\\", \"\")\n        my_list[i] = my_list[i].replace(\"/\", \"\")\n        my_list[i] = my_list[i].replace(\"*\", \"\")\n        my_list[i] = my_list[i].replace(\"?\", \"\")\n        my_list[i] = my_list[i].replace(\":\", \"\")\n        my_list[i] = my_list[i].replace(\"<\", \"\")\n        my_list[i] = my_list[i].replace(\">\", \"\")\n        my_list[i] = my_list[i].replace(\"@\", \"\")\n        my_list[i] = my_list[i].replace(\"_\", \"\")\n        my_list[i] = my_list[i].replace(\"=\", \"\")\n    return my_list\n    \ndef convert_to_boolean(my_list):\n    '''\n    Write a function to convert a list of characters into a boolean value.\n    '''\n    for i in range(len(my_list)):\n        if my_list[i] == \"True\":\n            my_list[i] = True\n        elif my_list[i] == \"False\":\n            my_list[i] = False\n    return my_list\n    \ndef check_even(my_list):\n    '''\n    Write a function to check if a list of numbers is even.\n    '''\n    count = 0\n    for i in range(len(my_list)):\n        if my_list[i] % 2 == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    return False\n    \ndef check_odd(my_list):\n    '''\n    Write a function to check if a list of numbers is odd.\n    '''\n    count = 0\n    for i in range(len(my_list)):\n        if my_list[i] % 2 == 1:\n            count += 1\n    if count % 2 == 1:\n        return True\n    return False\n    \ndef convert_integer(my_list):\n    '''\n    Write a function to convert a list of integers into a list of strings.\n    '''\n    for i in range(len(my_list)):\n        my_list[i] = str(my_list[i])\n    return my_list\n    \ndef reverse_string(my_list):\n    '''\n    Write a function to reverse a string.\n    '''\n    new_list = []\n    for i in range(len(my_list)):\n        new_list.append(my_list[len(my_list) - i - 1])\n    return new_list\n    \ndef swap_numbers(my_list):\n    '''\n    Write a function to swap two numbers in a list.\n    '''\n    temp = my_list[0]\n    my_list[0] = my_list[1]\n    my_list[1] = temp\n    return my_list\n    \ndef remove_duplicates(my_list):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    for i in range(len(my_list)):\n        for j in range(len(my_list)):\n            if my_list[i] == my_list[j]:\n                my_list.pop(j)\n                break\n    return my_list\n    \ndef remove_duplicates2(my_list):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    count = 0\n    for i in range(len(my_list)):\n        for j in range(len(my_list)):\n            if my_list[i] == my_list[j]:\n                my_list.pop(j)\n                break\n    return my_list\n    \ndef concatenate_lists(my_list):\n    '''\n    Write a function to concatenate two lists.\n    '''\n    result = []\n    for i in my_list:\n        result.extend(i)\n    return result\n    \ndef concatenate_tuples(my_list):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    result = []\n    for i in my_list:\n        result.extend(i)\n    return result\n    \ndef convert_to_list(my_list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    for i in range(len(my_list)):\n        if my_list[i] == \" \":\n            my_list[i] = \"\"\n    return my_list\n    \ndef find_index(my_list, item):\n    '''\n    Write a function to find the position of a list item.\n    '''\n    for i in range(len(my_list)):\n        if my_list[i] == item:\n            return i\n    return -1\n    \ndef test_decorator(test_func):\n    '''\n    Write a function to test the decorator.\n    '''\n    def wrapper(*args, **kwargs):\n        print(\"Executing the decorated function\")\n        print(\"========\")\n        print(\"Args: \")\n        print(args)\n        print(\"Kwargs: \")\n        print(kwargs)\n        print(\"Return: \")\n        result = test_func(*args, **kwargs)\n        print(result)\n        print(\"========\")\n    return wrapper\n    \ndef test_decorator_2(test_func):\n    '''\n    Write a function to test the decorator.\n    '''\n    def wrapper(*args, **kwargs):\n        print(\"Executing the decorated function\")\n        print(\"========\")\n        print(\"Args: \")\n        print(args)\n        print(\"Kwargs: \")\n        print(kwargs)\n        print(\"Return: \")\n        result = test_func(*args, **kwargs)\n        print(result)\n        print(\"========\")\n    return wrapper\n    \ndef test_decorator_3(test_func):\n    '''\n    Write a function to test the decorator.\n    '''\n    def wrapper(*args, **kwargs):\n        print(\"Executing the decorated function\")\n        print(\"========\")\n        print(\"Args: \")\n    "
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    my_list = []\n    for i in test_tup:\n        my_list.append(i)\n    return my_list\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str, test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return tuple(test_tup[i:i+2] for i in range(0, len(test_tup), 2))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += test_tup[i]\n    return result\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    total = 0\n    for i in range(0, n):\n        cube = int(input('Enter a number'))\n        total = total + cube\n    return total / (n * 3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Your code here\n    cubes_of_n=[]\n    for i in range(0,n):\n        cubes_of_n.append(int(i**3))\n    cubes_of_n.sort()\n    total_of_cubes=0\n    for i in cubes_of_n:\n        total_of_cubes=total_of_cubes+i**3\n    return total_of_cubes/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    while i <= n:\n        a = 1\n        while a <= i:\n            a += a\n            i += 1\n        print(i)\n        i -= 1\n    print(\"-\")\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=1\n    answer=0\n    while i<=n:\n        answer=answer+(i*(i*3)+3*(i*5)+5*(i*7))\n        i=i+1\n    return answer\nprint(find_Average_Of_Cube(10)"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if(n == 0):\n        return 0\n    else:\n        return n + find_Average_Of_Cube(n - 1)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = 1\n    for i in range(n):\n        cube += i ** 3\n    return cube / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / n\n    \ndef find_Max_Of_Cube(n):\n    '''\n    Write a python function to find the maximum of cubes of first n natural numbers.\n    '''\n    return max(map(lambda x: x ** 3, range(1, n)))\n    \ndef main():\n    \"\"\"\n    Use the list functions to find the average of cubes of first n natural numbers.\n    Find the maximum of cubes of first n natural numbers.\n    \"\"\"\n    n = input(\"Enter a natural number: \")\n    if n == \"\":\n        print(\"Invalid input\")\n    elif n.isnumeric():\n        print(\"Invalid input\")\n    else:\n        print(find_Average_Of_Cube(int(n)))\n        print(find_Max_Of_Cube(int(n)))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = []\n    for i in range(1, n+1):\n        cube.append(i**3)\n    \n    return sum(cube) / len(cube)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    rear_list = []\n    for element in test_tuple:\n        rear_list.append(element[-1])\n        \n    return rear_list\n    \n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_str = test_tuple[0]\n    rear_index_list = []\n    for i in range(len(test_str)):\n        if test_str[i] == \"R\":\n            rear_index_list.append(i)\n    return rear_index_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    rear = [i for i, j in enumerate(test_tuple) if j == 'R']\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(test_tuple)\n    rear_indexes = []\n    for string in test_tuple:\n        if string[-1]!= 'r':\n            rear_indexes.append(int(string[:-1]))\n    return rear_indexes\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_rear = []\n    for i in test_tuple:\n        if i[-1] == 'R':\n            list_rear.append(i)\n    return list_rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indexes = []\n    rear_indexes.append(test_tuple[0])\n    \n    for i in range(1, len(test_tuple)):\n        if test_tuple[i] == test_tuple[i-1]:\n            rear_indexes.append(i)\n        else:\n            break\n    \n    return rear_indexes\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = test_tuple[1:]\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    '''\n    Example:\n    test_tuple = ((1, 2), 3, 4, 5, 6)\n    extract_rear(test_tuple) => (1, 2)\n    '''\n    rear_index = []\n    for elem in test_tuple:\n        if elem[0] == test_tuple[0][0]:\n            rear_index.append(elem)\n    return rear_index\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return (len([x for x in list1 if x == x[0]]))\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == x:\n            count +=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if (x in list1[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    index_list = list1.index(x)\n    count_sublist = 0\n    \n    if (index_list!= -1):\n        \n        for i in range(index_list + 1, len(list1)):\n            if (list1[i] == x):\n                count_sublist += 1\n        return count_sublist\n    else:\n        return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    l = 0 \n    \n    for i in range(len(list1)): \n        for j in range(len(list1[i])): \n            if list1[i][j] == x: \n                l += 1\n    return l \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for i in list1: \n        if i[0] == x: \n            count += 1 \n    return count \n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Your code here\n    filter = []\n    for num in nums:\n        if num % 2 == 1:\n            filter.append(num)\n    return filter\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    l = len(nums)\n    for i in range(l):\n        if nums[i] % 2!= 0:\n            nums[i] = 0\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!=0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num%2!= 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            nums[i]=nums[i]//2\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for x in nums:\n        if x%2 == 0:\n            odds.append(x)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds=[]\n    for num in nums:\n        if num%2!=0:\n            odds.append(num)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if not nums:\n        return []\n    if len(nums)==1:\n        return [nums]\n    #check if the number is odd\n    if nums[0]%2 == 1:\n        return [nums[0]] + filter_oddnumbers(nums[1:])\n    return filter_oddnumbers(nums[1:])\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    form = re.compile(r'^([0-9]{1,2})-([0-9]{1,2})')\n    m = form.match(dt)\n    if m:\n        dd,mm,yy = m.groups()\n        dd = int(dd)\n        mm = int(mm)\n        yy = int(yy)\n        return \"%d-%02d-%04d\"%(yy,mm,dd)\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # dt = \"2-08-2014\"\n    # dt = \"20-03-2014\"\n    # dt = \"3-06-2015\"\n    # dt = \"1-16-2017\"\n    # dt = \"6-05-2019\"\n    # dt = \"5-24-2020\"\n    # dt = \"01-03-2015\"\n    # dt = \"18-05-2019\"\n    # dt = \"20-03-2019\"\n    # dt = \"17-06-2020\"\n    # dt = \"03-06-2021\"\n    # dt = \"02-08-2021\"\n    # dt = \"2-08-2021\"\n    # dt = \"2-08-2021\"\n    # dt = \"5-26-2021\"\n    # dt = \"5-23-2021\"\n    # dt = \"3-06-2021\"\n    # dt = \"3-06-2021\"\n    # dt = \"18-05-2021\"\n    # dt = \"02-06-2021\"\n    # dt = \"6-07-2021\"\n    # dt = \"6-05-2021\"\n    # dt = \"21-04-2021\"\n    # dt = \"20-04-2021\"\n    # dt = \"1-04-2021\"\n    # dt = \"19-05-2021\"\n    # dt = \"09-07-2021\"\n    # dt = \"05-24-2021\"\n    # dt = \"05-22-2021\"\n    # dt = \"03-06-2021\"\n    # dt = \"19-05-2021\"\n    # dt = \"23-06-2021\"\n    # dt = \"09-05-2021\"\n    # dt = \"05-21-2021\"\n    # dt = \"01-05-2021\"\n    # dt = \"05-06-2021\"\n    # dt = \"21-02-2021\"\n    # dt = \"13-07-2021\"\n    # dt = \"01-04-2021\"\n    # dt = \"20-04-2021\"\n    # dt = \"02-04-2021\"\n    # dt = \"06-04-2021\"\n    # dt = \"09-04-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"19-06-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"18-05-2021\"\n    # dt = \"03-05-2021\"\n    # dt = \"02-06-2021\"\n    # dt = \"06-07-2021\"\n    # dt = \"07-06-2021\"\n    # dt = \"06-05-2021\"\n    # dt = \"21-02-2021\"\n    # dt = \"21-05-2021\"\n    # dt = \"21-03-2021\"\n    # dt = \"08-06-2021\"\n    # dt = \"05-24-2021\"\n    # dt = \"05-22-2021\"\n    # dt = \"03-06-2021\"\n    # dt = \"18-05-2021\"\n    # dt = \"02-06-2021\"\n    # dt = \"06-07-2021\"\n    # dt = \"06-05-2021\"\n    # dt = \"22-06-2021\"\n    # dt = \"20-04-2021\"\n    # dt = \"01-04-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"07-06-2021\"\n    # dt = \"01-05-2021\"\n    # dt = \"20-04-2021\"\n    # dt = \"07-06-2021\"\n    # dt = \"01-02-2021\"\n    # dt = \"23-06-2021\"\n    # dt = \"09-05-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"21-02-2021\"\n    # dt = \"13-07-2021\"\n    # dt = \"01-04-2021\"\n    # dt = \"09-05-2021\"\n    # dt = \"20-04-2021\"\n    # dt = \"02-04-2021\"\n    # dt = \"06-04-2021\"\n    # dt = \"09-04-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"19-06-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"18-05-2021\"\n    # dt = \"03-05-2021\"\n    # dt = \"02-06-2021\"\n    # dt = \"06-07-2021\"\n    # dt = \"06-05-2021\"\n    # dt = \"21-02-2021\"\n    # dt = \"21-05-2021\"\n    # dt = \"21-03-2021\"\n    # dt = \"08-06-2021\"\n    # dt = \"05-24-2021\"\n    # dt = \"05-22-2021\"\n    # dt = \"03-06-2021\"\n    # dt = \"18-05-2021\"\n    # dt = \"02-06-2021\"\n    # dt = \"06-07-2021\"\n    # dt = \"07-06-2021\"\n    # dt = \"06-05-2021\"\n    # dt = \"22-06-2021\"\n    # dt = \"20-04-2021\"\n    # dt = \"01-04-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"09-05-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"19-06-2021\"\n    # dt = \"01-04-2021\"\n    # dt = \"23-06-2021\"\n    # dt = \"09-05-2021\"\n    # dt = \"01-02-2021\"\n    # dt = \"21-02-2021\"\n    # dt = \"13-07-2021\"\n    # dt = \"01-04-2021\"\n    # dt = \"09-05-2021\"\n    # dt = \"20-04-2021\"\n    # dt = \"02-04-2021\"\n    # dt = \"06-04-2021\"\n    # dt = \"09-04-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"19-06-2021\"\n    # dt = \"01-03-2021\"\n    # dt = \"18-05-2021\"\n    # dt = \"03-05-2021\"\n    # dt = \"02-06-2021\"\n    # dt = \"06-07-2021\"\n    # dt = \"06-05-2021\"\n    # dt = \"21-02-2021\"\n    # dt = \"21-05-2021\"\n    # dt = \"21-03-2021\"\n    # dt = \"08-06-2021\"\n    # dt = \"05-24-2021\"\n    # dt = \"05-22-2021\"\n    # dt = \"03-06-2021\"\n    # dt = \"18-05-2021\"\n    # dt = \"02-06-2021\"\n    # dt = \"06-07-2021\"\n    # dt = \"06-05-2021\"\n    # dt = \"22-06-2021\"\n    # dt = \"20-04-2021\"\n    # dt = \"01"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    dt.insert(1, \"0\")\n    dt.insert(2, \"0\")\n    dt.insert(3, \"0\")\n    dt.insert(4, \"0\")\n    dt.insert(5, \"0\")\n    dt.insert(6, \"0\")\n    dt.insert(7, \"0\")\n    dt.insert(8, \"0\")\n    return \"\".join(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    result = pattern.search(dt)\n    if result == None:\n        return dt\n    year = int(result.group(1))\n    month = int(result.group(2))\n    day = int(result.group(3))\n    if int(result.group(1)) < 10:\n        date = '0' + str(int(result.group(1)))\n    else:\n        date = result.group(1)\n    return str(year) + '-' + str(month) + '-' + str(day) +'' + date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt[0] == '-':\n        return dt[1:] + '-' + dt[2:4] + '-' + dt[4:6] + '-' + dt[6:8]\n    else:\n        return dt[:8] + '-' + dt[8:10] + '-' + dt[10:12] + '-' + dt[12:14]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    result = re.search(r'(\\d\\d\\d)-(\\d\\d)-(\\d\\d)',dt)\n    if result is not None:\n        year,month,day = result.group(1),result.group(2),result.group(3)\n        return f'{year}-{month}-{day}'\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.find('/') > -1:\n        d,m,y = dt.split('/')\n        y = y.split('-')\n        for i in range(len(y)):\n            y[i] = int(y[i])\n        return '-'.join(y) + '-01-'+m+'-'+d\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n    # print(year, month, day)\n    try:\n        num = int(day)\n    except ValueError:\n        num = day\n    return f'{year}-{month}-{num}-01'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt)!= 10:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d1 = dt[:2]\n    m1 = dt[2:4]\n    d2 = dt[4:6]\n    m2 = dt[6:8]\n    d3 = dt[8:10]\n    m3 = dt[10:12]\n    dt_1 = dt.replace(year = int(d1), month = int(m1), day = int(d2))\n    dt_2 = dt.replace(year = int(d1), month = int(m1), day = int(d3))\n    dt_3 = dt.replace(year = int(d2), month = int(m2), day = int(d3))\n    dt_4 = dt.replace(year = int(d3), month = int(m2), day = int(d3))\n    dt_5 = dt.replace(year = int(d2), month = int(m3), day = int(d3))\n    dt_6 = dt.replace(year = int(d3), month = int(m3), day = int(d3))\n    dt_7 = dt.replace(year = int(d1), month = int(m2), day = int(d3))\n    dt_8 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_9 = dt.replace(year = int(d2), month = int(m3), day = int(d3))\n    dt_10 = dt.replace(year = int(d3), month = int(m3), day = int(d3))\n    dt_11 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_12 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_13 = dt.replace(year = int(d2), month = int(m4), day = int(d3))\n    dt_14 = dt.replace(year = int(d3), month = int(m4), day = int(d3))\n    dt_15 = dt.replace(year = int(d1), month = int(m2), day = int(d3))\n    dt_16 = dt.replace(year = int(d1), month = int(m2), day = int(d3))\n    dt_17 = dt.replace(year = int(d2), month = int(m3), day = int(d3))\n    dt_18 = dt.replace(year = int(d3), month = int(m3), day = int(d3))\n    dt_19 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_20 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_21 = dt.replace(year = int(d2), month = int(m4), day = int(d3))\n    dt_22 = dt.replace(year = int(d3), month = int(m4), day = int(d3))\n    dt_23 = dt.replace(year = int(d1), month = int(m2), day = int(d3))\n    dt_24 = dt.replace(year = int(d1), month = int(m2), day = int(d3))\n    dt_25 = dt.replace(year = int(d2), month = int(m3), day = int(d3))\n    dt_26 = dt.replace(year = int(d3), month = int(m3), day = int(d3))\n    dt_27 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_28 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_29 = dt.replace(year = int(d2), month = int(m4), day = int(d3))\n    dt_30 = dt.replace(year = int(d3), month = int(m4), day = int(d3))\n    dt_31 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_32 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_33 = dt.replace(year = int(d2), month = int(m3), day = int(d3))\n    dt_34 = dt.replace(year = int(d3), month = int(m3), day = int(d3))\n    dt_35 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_36 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_37 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_38 = dt.replace(year = int(d2), month = int(m4), day = int(d3))\n    dt_39 = dt.replace(year = int(d3), month = int(m4), day = int(d3))\n    dt_40 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_41 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_42 = dt.replace(year = int(d2), month = int(m4), day = int(d3))\n    dt_43 = dt.replace(year = int(d3), month = int(m4), day = int(d3))\n    dt_44 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_45 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_46 = dt.replace(year = int(d2), month = int(m4), day = int(d3))\n    dt_47 = dt.replace(year = int(d3), month = int(m4), day = int(d3))\n    dt_48 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_49 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_50 = dt.replace(year = int(d2), month = int(m4), day = int(d3))\n    dt_51 = dt.replace(year = int(d3), month = int(m4), day = int(d3))\n    dt_52 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_53 = dt.replace(year = int(d1), month = int(m4), day = int(d3))\n    dt_54 = dt.replace(year = int(d2), month = int(m4), day = int(d3))\n    dt_55 = dt.replace(year = int(d3), month = int(m4), day = int(d3))\n    dt_56 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_57 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_58 = dt.replace(year = int(d2), month = int(m3), day = int(d3))\n    dt_59 = dt.replace(year = int(d3), month = int(m3), day = int(d3))\n    dt_60 = dt.replace(year = int(d1), month = int(m3), day = int(d3))\n    dt_61 = dt.replac"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(1, len(my_list)):\n        for j in range(0, len(my_list)-i):\n            # Find the midpoint of list\n            # for j in range(j, len(my_list)):\n            #     print(\"j: \", j)\n            #     print(\"j+1: \", j+1)\n            #     print(\"i: \", i)\n            #     print(\"i+1: \", i+1)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 1:\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    len_list = len(my_list)\n    gap = len_list // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    count = len(my_list)\n    gap = count // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # fill gaps in the array\n    gap = len(my_list) // 2\n    while gap > 0:\n        # move all elements in gap to the right\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = int(len(my_list)/2)\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n            gap = int(gap/2)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Your code here\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while my_list[i] > my_list[j] and j + 1 < len(my_list):\n                j += 1\n            if j - i >= 2:\n                temp = my_list[i]\n                my_list[i] = my_list[j]\n                my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def sort(arr,n):\n        for i in range(n-1):\n            j = i\n            while j>=0 and arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n                j-=1\n        return arr\n    def shell_sort(arr,n):\n        gap = n // 2\n        while gap>=1:\n            for i in range(gap,n):\n                arr[i],arr[i+gap] = arr[i+gap],arr[i]\n            gap = gap//2\n        return arr\n    def shell_sort_recursive(arr,n):\n        gap = n // 2\n        while gap>=1:\n            for i in range(gap,n):\n                arr[i],arr[i+gap] = arr[i+gap],arr[i]\n            gap = gap//2\n        return arr\n    def shell_sort_recursive(arr,n):\n        gap = n // 2\n        while gap>=1:\n            for i in range(gap,n):\n                arr[i],arr[i+gap] = arr[i+gap],arr[i]\n            gap = gap//2\n        return arr\n    # sort the array\n    def rec(arr,n):\n        if n <= 1:\n            return arr\n        gap = n // 2\n        while gap>=1:\n            arr[gap],arr[gap-1] = arr[gap-1],arr[gap]\n            gap = gap//2\n        return rec(arr,n-gap)\n    arr = sorted(my_list, key=lambda x: x)\n    #print(arr)\n    #print(rec(arr,len(arr)))\n    return arr\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    len_list = len(my_list)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(test_tup1) + tuple(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if test_tup1 == () and test_tup2 == ():\n        return ()\n    elif test_tup1 == ():\n        return test_tup2\n    elif test_tup2 == ():\n        return test_tup1\n    else:\n        return test_tup1 + test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0] and (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] or test_tup2[0]),(test_tup1[1] or test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 & test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    x, y = test_tup1, test_tup2\n    # write your code here\n    return x and y\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # your code here\n    return tuple(test_tup1[i] for i in range(0,len(test_tup1)))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup1[1]) or (test_tup2[0] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4 * a * c == 0:\n        print(\"No Parabola Found\")\n        return\n    print(\"A = %f, b = %f, c = %f\" % (a, b, c))\n    x = (-b + (b**2 - 4*a * c)/(2*a))/(2*a)\n    print(\"x = %f\" % x)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # a^2 + b^2 + c^2\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    #.\n    "
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = [a, a, a, a, a]\n    y = [b, c, b, b, b]\n    z = [0, 0, c, b, c]\n    z = [x,y,z,x,z]\n    return z\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return None\n    x = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a + (b - a)*(b*b - 4*a*c)**0.5\n    if (x < 0):\n        x = 0\n    elif (x > 1):\n        x = 1\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (b * b) / (2 * a)\n    x2 = (b * c) / (2 * a)\n    x3 = (a * c) / (2 * a)\n    y1 = a * x1 * x1 * x1 * x2 * x2 * x2 * x3\n    y2 = a * x1 * x2 * x3\n    y3 = a * x2 * x3\n    return y1, y2, y3\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return [0, 0]\n            else:\n                return [-1, 0]\n        else:\n            return [0, -b/a]\n    else:\n        if b == 0:\n            return [b*a, 0]\n        else:\n            return [b*a, (c**2)/b]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    r = b ** 2 - 4 * a * c\n    # If r is negative, solve for a.\n    if r < 0:\n        print(\"RHS is negative!\")\n        return -1\n    # Find the two root.\n    x1 = (-b + r ** 0.5) / (2 * a)\n    x2 = (-b - r ** 0.5) / (2 * a)\n    return (x1, x2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Write your code here\n    print('Enter the value of a:')\n    a = float(input())\n    # Write your code here\n    print('Enter the value of b:')\n    b = float(input())\n    # Write your code here\n    print('Enter the value of c:')\n    c = float(input())\n    # Write your code here\n    print('Find the directrix:')\n    if a!= 0:\n        x = (b*b - 4*a*c)/(2*a)\n        print('x ='+ str(x))\n    else:\n        print('There is no such a parabola')\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(b**2) + c**2\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) >= len(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list1.isdisjoint(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    for i in range(len(list1)):\n        if i in range(len(list2)):\n            if list1[i] == list2[i]:\n                common += 1\n    return common > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    common = list1[0]\n    for item in list1:\n        if item == common:\n            common = False\n    if common == False:\n        common = list2[0]\n    for item in list2:\n        if item == common:\n            common = False\n    if common == False:\n        common = list1[0]\n    return common == False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = list1[0]\n    for i in range(1, len(list1)):\n        if common == list1[i]:\n            common = list1[i]\n            break\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        for i in list1:\n            for j in list2:\n                if i == j:\n                    return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set_list1 = set(list1)\n    set_list2 = set(list2)\n    return len(set_list1.intersection(set_list2)) >= 1\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_ele = []\n    for ele in list1:\n        if ele in list2:\n            common_ele.append(ele)\n    return len(common_ele) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    l1 = len(base1)\n    l2 = len(base2)\n    l3 = 0\n    if l1 > l2:\n        l3 = (l1*(l1+1)/2)\n    else:\n        l3 = (l2*(l2+1)/2)\n    return (l1+l2+l3)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Pass base1, base2, and height into the function\n    # base1 should be a list, base2 should be a float, and height should be a float\n    \n    # Create an empty list for the list that will hold the medians\n    medians = []\n    \n    # Iterate through the list and append the medians\n    for i in range(0,len(base1)):\n        if base2 - base1[i] > 0:\n            medians.append(base1[i]+base2-base1[i])\n        elif base2 - base1[i] < 0:\n            medians.append(base1[i])\n        \n    # Finally, sort the medians array, so that all the medians are on the same element as the base1 element.\n    medians.sort()\n    \n    # Return the median of the medians array\n    return medians[len(medians)//2]\n    \ndef area_trapezium(base1,base2):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    # Pass base1, base2, and height into the function\n    # base1 should be a list, base2 should be a float, and height should be a float\n    \n    # Create an empty list for the list that will hold the areas\n    areas = []\n    \n    # Iterate through the list and append the areas\n    for i in range(0,len(base1)):\n        if base2 - base1[i] > 0:\n            areas.append(base1[i]**2)\n        elif base2 - base1[i] < 0:\n            areas.append(base1[i])\n        \n    # Finally, sort the areas array, so that all the areas are on the same element as the base1 element.\n    areas.sort()\n    \n    # Return the median of the areas array\n    return areas[len(areas)//2]\n    \ndef median_trapezium_area(base1,base2):\n    '''\n    Write a function to find the median area of a trapezium.\n    '''\n    # Pass base1, base2, and height into the function\n    # base1 should be a list, base2 should be a float, and height should be a float\n    \n    # Create an empty list for the list that will hold the medians\n    medians = []\n    \n    # Iterate through the list and append the medians\n    for i in range(0,len(base1)):\n        if base2 - base1[i] > 0:\n            medians.append(base1[i]**2)\n        elif base2 - base1[i] < 0:\n            medians.append(base1[i])\n        \n    # Finally, sort the medians array, so that all the medians are on the same element as the base1 element.\n    medians.sort()\n    \n    # Return the median of the medians array\n    return medians[len(medians)//2]\n    \ndef area_trapezium_area(base1,base2):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    # Pass base1, base2, and height into the function\n    # base1 should be a list, base2 should be a float, and height should be a float\n    \n    # Create an empty list for the list that will hold the areas\n    areas = []\n    \n    # Iterate through the list and append the areas\n    for i in range(0,len(base1)):\n        if base2 - base1[i] > 0:\n            areas.append(base1[i]**2)\n        elif base2 - base1[i] < 0:\n            areas.append(base1[i])\n        \n    # Finally, sort the areas array, so that all the areas are on the same element as the base1 element.\n    areas.sort()\n    \n    # Return the median of the areas array\n    return areas[len(areas)//2]\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2 + height) / 2\n    if base1 < base2:\n        return median_trapezium(base1,base2,height/2)\n    else:\n        return median_trapezium(base2,base1,height/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Get the indices of the leftmost and rightmost elements\n    l = base1\n    r = base2 - 1\n    mid = (l+r)//2\n    # A trapezium is a subset of a normal\n    if height < l+mid:\n        height = mid + height - l\n        l = base1\n        r = mid - 1\n    else:\n        height = mid + height - r\n        l = mid + 1\n        r = base2\n    # Set the median to be the one between the leftmost and rightmost elements\n    if l > r:\n        median = (l+r)//2\n    else:\n        median = l + (r-l)//2\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<height<base2:\n        return base1\n    elif base2<height<base1:\n        return base2\n    else:\n        return round(height/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        base1, base2 = base2, base1\n        height = -1 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    d=base1+base2\n    if d==0:\n        return 0\n    if d%2==0:\n        a=0\n        b=0\n        c=0\n        for i in range(0,d,2):\n            a=a+base1[i]\n            b=b+base2[i]\n            c=c+base1[i]*base2[i]\n        return (a+b+c)/2\n    else:\n        a=0\n        b=0\n        c=0\n        for i in range(0,d,2):\n            a=a+base1[i]\n            b=b+base2[i]\n            c=c+base1[i]*base2[i]\n        return (a+b)/2\ndef main():\n    '''\n    Run all functions\n    '''\n    for i in range(0,len(array),2):\n        print(median_trapezium(array[i],array[i+1],array[i+2]))\n    for i in range(0,len(array),2):\n        print(median_trapezium(array[i],array[i+1],array[i+2]))\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    n=float(base1+base2)/2\n    trapezium_area = (1/4)*np.pi*n*(n-1)\n    trapezium_area_size = trapezium_area**2\n    trapezium_area_size_square = trapezium_area_size**2\n    trapezium_area_area = trapezium_area_size_square\n    trapezium_area_area_square = trapezium_area_area**2\n    trapezium_area_area_square_sqrt = trapezium_area_area_square**(1/2)\n    trapezium_area_area_sqrt = trapezium_area_area_square_sqrt\n    triangle_area_area_sqrt = n*n*n\n    triangle_area_area_area = triangle_area_area_sqrt\n    triangle_area_area_area_square = triangle_area_area_area_sqrt\n    triangle_area_area_area_square_sqrt = triangle_area_area_area_area_square**(1/2)\n    triangle_area_area_area_sqrt = triangle_area_area_area_area_square_sqrt\n    trapezium_area_area_area_square_sqrt = trapezium_area_area_area_square_sqrt*n\n    sum_area_sqrt = trapezium_area_area_area_square_sqrt + trapezium_area_area_area_square_sqrt + triangle_area_area_area_area_square_sqrt\n    area_trapezium = np.sqrt(sum_area_sqrt)\n    return area_trapezium\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium_and_median(base1,base2,height):\n        trapezium_and_median_base1 = height * base1 + height / 2 * base2\n        median_trapezium_base1 = height * base1 + (height + 1) * (base2 + base1) / 2\n        trapezium_and_median_base2 = height * base2 + height / 2 * base1\n        median_trapezium_base2 = height * base2 + (height + 1) * (base1 + base2) / 2\n        return (trapezium_and_median_base1,trapezium_and_median_base2,median_trapezium_base1,median_trapezium_base2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 <= 0 or base2 <= 0:\n        return -1\n    else:\n        return int((base1 + base2)/2)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    #return arr[number] > arr[number+1]\n    return arr[number] > arr[number+1]\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    else:\n        if arr[0] > number:\n            return False\n        else:\n            if arr[0] == number:\n                return True\n            else:\n                return check_greater(arr[1:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[number] >= arr[number - 1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number == arr[0]:\n        return arr[0] > arr[1]\n    else:\n        return arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3]\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[len(arr)-1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] >= number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return True\n    if number > arr[0]:\n        return True\n    if arr[len(arr) - 1] > number:\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'^(a{0,1}){0,1}$', text) is not None\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_split = text.split(' ')\n    a_match = [i for i in text_split if i.startswith('a')]\n    b_match = [i for i in text_split if i.startswith('b')]\n    for i in range(len(a_match)):\n        text = text.replace(a_match[i],b_match[i])\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return text.find('a')!= -1\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #Your code here\n    #test\n    #print(text)\n    #print(text.count('a'))\n    #print(text.count('a') >=1)\n    #print(text.count('a') >=1)\n    #print(text.count('a') == 1)\n    if(text.count('a') == 1):\n        #print('match 1')\n        return text.count('a')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('b'))\n    #print(text.count('b'))\n    #print(text.count('b') >=1)\n    #print(text.count('b') >=1)\n    #print(text.count('b') == 1)\n    if(text.count('b') == 1):\n        #print('match 1')\n        return text.count('b')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('c'))\n    #print(text.count('c'))\n    #print(text.count('c') >=1)\n    #print(text.count('c') >=1)\n    #print(text.count('c') == 1)\n    if(text.count('c') == 1):\n        #print('match 1')\n        return text.count('c')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('d'))\n    #print(text.count('d'))\n    #print(text.count('d') >=1)\n    #print(text.count('d') >=1)\n    #print(text.count('d') == 1)\n    if(text.count('d') == 1):\n        #print('match 1')\n        return text.count('d')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('e'))\n    #print(text.count('e'))\n    #print(text.count('e') >=1)\n    #print(text.count('e') >=1)\n    #print(text.count('e') == 1)\n    if(text.count('e') == 1):\n        #print('match 1')\n        return text.count('e')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('f'))\n    #print(text.count('f'))\n    #print(text.count('f') >=1)\n    #print(text.count('f') >=1)\n    #print(text.count('f') == 1)\n    if(text.count('f') == 1):\n        #print('match 1')\n        return text.count('f')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('g'))\n    #print(text.count('g'))\n    #print(text.count('g') >=1)\n    #print(text.count('g') >=1)\n    #print(text.count('g') == 1)\n    if(text.count('g') == 1):\n        #print('match 1')\n        return text.count('g')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('h'))\n    #print(text.count('h'))\n    #print(text.count('h') >=1)\n    #print(text.count('h') >=1)\n    #print(text.count('h') == 1)\n    if(text.count('h') == 1):\n        #print('match 1')\n        return text.count('h')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('i'))\n    #print(text.count('i'))\n    #print(text.count('i') >=1)\n    #print(text.count('i') >=1)\n    #print(text.count('i') == 1)\n    if(text.count('i') == 1):\n        #print('match 1')\n        return text.count('i')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('j'))\n    #print(text.count('j'))\n    #print(text.count('j') >=1)\n    #print(text.count('j') >=1)\n    #print(text.count('j') == 1)\n    if(text.count('j') == 1):\n        #print('match 1')\n        return text.count('j')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('k'))\n    #print(text.count('k'))\n    #print(text.count('k') >=1)\n    #print(text.count('k') >=1)\n    #print(text.count('k') == 1)\n    if(text.count('k') == 1):\n        #print('match 1')\n        return text.count('k')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('l'))\n    #print(text.count('l'))\n    #print(text.count('l') >=1)\n    #print(text.count('l') >=1)\n    #print(text.count('l') == 1)\n    if(text.count('l') == 1):\n        #print('match 1')\n        return text.count('l')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('m'))\n    #print(text.count('m'))\n    #print(text.count('m') >=1)\n    #print(text.count('m') >=1)\n    #print(text.count('m') == 1)\n    if(text.count('m') == 1):\n        #print('match 1')\n        return text.count('m')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('n'))\n    #print(text.count('n'))\n    #print(text.count('n') >=1)\n    #print(text.count('n') >=1)\n    #print(text.count('n') == 1)\n    if(text.count('n') == 1):\n        #print('match 1')\n        return text.count('n')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('o'))\n    #print(text.count('o'))\n    #print(text.count('o') >=1)\n    #print(text.count('o') >=1)\n    #print(text.count('o') == 1)\n    if(text.count('o') == 1):\n        #print('match 1')\n        return text.count('o')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('p'))\n    #print(text.count('p'))\n    #print(text.count('p') >=1)\n    #print(text.count('p') >=1)\n    #print(text.count('p') == 1)\n    if(text.count('p') == 1):\n        #print('match 1')\n        return text.count('p')\n    else:\n        #print('match 0')\n        return 0\n    \n    #test\n    #print(text.count('q'))\n    #print(text.count('q'))\n    #print(text.count('q') >=1)\n    #print(text.count('q') >=1)\n    #print(text.count('q') == 1)\n    if(text.count('q') == 1):\n        #print('match 1')\n        return text.count('q')\n    else:\n        #print('match 0')\n        return 0\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(?P<a>a)(?P<b>[b])(?P<c>c)?'\n    return re.match(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_no_spaces = text.replace('\\n','')\n    return re.findall('\\[(a|b)b', text_no_spaces)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('[a-b]')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\b(a)?\\s*'\n    return re.findall(pattern, text, re.MULTILINE)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if len(text) <= 0: return False\n    for i in range(len(text) - 1):\n        if not text[i].isalpha() and text[i + 1].isalpha():\n            text = text[:i] + \"b\" + text[i + 1:]\n            return text\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print('-----')\n    print('text:',text)\n    return text[text.find('a')+1:]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 9 :\n        n = n - 9\n    return n % 10\n    \n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    d = 0\n    while n > 0:\n        n, r = divmod(n, 10)\n        d += r\n    return d\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 0 :\n        return n % 10\n    else :\n        return n % -10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    l = len(n)\n    x = -1\n    for i in range(0, l-1, 1) :\n        if (n[i] == '0') :\n            x = i\n            break\n    if x == -1 :\n        return n[l-1]\n    else :\n        return n[x]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #return the last digit of a number\n    return str(n)[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s = str(n)\n    return s[-1]\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit_num = n % 10\n    last_digit = int(last_Digit_num)\n    return last_digit\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(len(list1)):\n        neg.append(-list1[i])\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1_neg = []\n    for item in list1:\n        if item < 0:\n            list1_neg.append(item)\n    return list1_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i > 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = list1\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n    \n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg = []\n    for num in list1:\n        if num < 0:\n            list_neg.append(num)\n    return list_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    n=[]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            n.append(-1*list1[i])\n        else:\n            n.append(list1[i])\n    return n\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    sum = 0\n    for i in list1:\n        if i > 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for num in list1:\n        if num < 0:\n            list2.append(num)\n    return list2"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        newlist.append(-list1[i])\n    return newlist\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = list1[::-1]\n    print(list1)\n    return list1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        if i % 2!= 0:\n            res += str1[i]\n        else:\n            res += str1[i]\n    return res\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if i % 2!= 0:\n            str1 = str1.replace(i, '')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]%2==1:\n            str1=str1[:i]+str1[i+1:]\n        else:\n            str1=str1[:i]+str1[i+1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    def odd_characters(str):\n        '''\n        Get a string with odd characters,\n        and remove them.\n        '''\n        return \"\".join([i for i in str if i % 2!= 0])\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = list(str1)\n    count = 0\n    for char in lst:\n        if(char % 2):\n            count += 1\n    \n    lst.clear()\n    lst.extend(list(range(count)))\n    \n    return \"\".join(lst)\n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_val=str1.lower()\n    print(str_val)\n    print(str_val.count('a'))\n    for i in range(0,len(str_val)):\n        if(str_val[i]=='a'):\n            str_val=str_val[:i] +str_val[i+1:]\n            print(str_val)\n            \n    return str_val\nstr1=\"aabbbcccdddddeeffghijklnqrstuvwxyz\"\nprint(remove_odd(str1))"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    str1_o = []\n    for char in str1:\n        if char % 2!= 0:\n            str1_o.append(char)\n    return ''.join(str1_o)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #initialize an empty string\n    result = ''\n    #loop through string\n    for s in str1:\n        #if odd character\n        if s % 2!= 0:\n            #add odd char to result\n            result += s\n        #if not odd\n        else:\n            #if char is odd\n            if s % 2 == 1:\n                #remove char and return new string\n                result = result[:-1]\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(s for s in str1 if s % 2!= 0)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    cnt = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            if isinstance(item[0], tuple) and len(item) == 2:\n                # bidirectional tuples\n                if item[0][0] == item[1][1]:\n                    cnt = cnt + 1\n                elif item[0][1] == item[1][0]:\n                    cnt = cnt + 1\n    return cnt\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    res = 0\n    for item in test_list:\n        if item[0]!= item[1]:\n            res += 1\n    return res\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pair = ()\n    for i in test_list:\n        if i[0] == i[1]:\n            pair += (i[0],i[1])\n        else:\n            pair += (i[0],i[1],i[1])\n    return pair\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    res = []\n    count = 0\n    for item in test_list:\n        if item[1] == 'B':\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        count += len(i) - 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bi_count = 0\n    for i in range(0,len(test_list)-1):\n        if test_list[i][1] == test_list[i+1][0]:\n            bi_count += 1\n    return bi_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                count += 1\n            if test_list[i][0] > test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pairs\n    # count bidirectional pair"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    ###TODO: Fill in the do-nothing function\n    '''\n    Should return a dictionary where the key is a tuple of the form (list, bidirectional_list)\n    The key in the dictionary is a tuple of the form (tuple, list)\n    The value is the number of times that the tuple is an ordered tuple\n    '''\n    return { (tuple, tuple_list):1 for tuple, tuple_list in test_list}\n    \ndef count_bidirectional_tuples(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    ###TODO: Fill in the do-nothing function\n    '''\n    Should return a dictionary where the key is a tuple of the form (list, bidirectional_list)\n    The key in the dictionary is a tuple of the form (tuple, list)\n    The value is the number of times that the tuple is an ordered tuple\n    '''\n    counts = {}\n    for tuple, list in test_list:\n        counts[tuple] = counts.get(tuple, 0) + 1\n    return counts\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x+y,L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Create a list of the elements in the list\n    L_s = L[:]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''\n    for x in L:\n        s += str(x)\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # input: L is a list of integers\n    # output: the single integer that corresponds to the input\n    # this should be the same as the one in the solution, but you can modify it to test it\n    # i.e., if L[0] = [1,2,3], then it should return [1,2,4,3]\n    # use an algorithm which works in both lists and numpy\n    \n    # you can do it in another way, for example:\n    # def multiple_to_single(L):\n    #     return np.prod(L,axis=0)\n    # input: L is a list of integers\n    # output: the single integer that corresponds to the input\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    list_ = []\n    for item in L:\n        list_.append(item)\n    return sum(list_)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = []\n    for i in L:\n        L.append(i)\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    string_list = []\n    for i in L:\n        string_list.append(str(i))\n    string_str = ','.join(string_list)\n    return int(string_str)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = \"\"\n    for i in range(0,len(L)):\n        num = num + str(L[i])\n    return int(num)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''\n    for i in L:\n        s+=str(i)\n    return int(s)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #r = re.findall(r'(?:(?<=[a-z]+)([aeiou]|$))', text)\n    r = re.findall(r'(?:(?<=[a-z]+)([aeiou])|(?<=[^a-z])[aeiou]+)(?=[^a-z])', text)\n    #r = re.findall(r'(?:(?<=[a-z]+)([aeiou])|(?<=[^a-z])[aeiou]+)(?=[^a-z]+)', text)\n    \n    for word in r:\n        \n        for i in range(len(word)):\n            if word[i].isalpha():\n                \n                if i == 0:\n                    adverb_position = i\n                else:\n                    if word[i-1].isalpha() and word[i].isalpha() and word[i+1].isalpha() and word[i].lower()!= word[i+1].lower():\n                        adverb_position = i\n                        break\n                    if word[i].isalpha() and word[i-1].isalpha():\n                        adverb_position = i\n                        break\n                    \n                break\n                \n    return adverb_position\n    \ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    #r = re.findall(r'(?:(?<=[a-z]+)([aeiou]|$))', text)\n    r = re.findall(r'(?:(?<=[a-z]+)([aeiou])|(?<=[^a-z])[aeiou]+)(?=[^a-z]+)', text)\n    #r = re.findall(r'(?:(?<=[a-z]+)([aeiou])|(?<=[^a-z])[aeiou]+)(?=[^a-z]+)', text)\n    \n    for word in r:\n        \n        for i in range(len(word)):\n            if word[i].isalpha():\n                \n                if i == 0:\n                    verb_position = i\n                else:\n                    if word[i-1].isalpha() and word[i].isalpha() and word[i+1].isalpha() and word[i].lower()!= word[i+1].lower():\n                        verb_position = i\n                        break\n                    if word[i].isalpha() and word[i-1].isalpha() and word[i].isalpha() and word[i+1].isalpha():\n                        verb_position = i\n                        break\n                    \n                break\n                \n    return verb_position\n    \ndef is_capital(word):\n    '''\n    Write a function to check if a given word is capital.\n    '''\n    if word.isupper():\n        return True\n    \n    return False\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #check to see if there are the right number of adverbs\n    if len(text) < 7:\n        return -1, -1, 0\n    #collect all of the numbers in the sentence and compare it to all of the positions where the adverb is\n    numbers = []\n    for letter in text:\n        if letter.isdigit():\n            numbers.append(int(letter))\n    adverb_pos = 0\n    for i in range(len(numbers)):\n        if numbers[i] == 1:\n            adverb_pos += i + 1\n        else:\n            if i == len(numbers) - 1:\n                adverb_pos += numbers[i]\n            else:\n                adverb_pos += numbers[i] + 1\n    return adverb_pos, numbers[adverb_pos], adverb_pos + numbers[adverb_pos] - 1\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos_list = []\n    adverbs = ['a', 'an', 'and', 'are', 'as', 'but', 'did', 'does', 'do', 'for', 'from', 'in', 'into', 'of', 'on', 'to', 'with', 'without', 'with', 'which', 'to', 'when', 'where']\n    for word in text:\n        if word in adverbs:\n            start_index = text.index(word)\n            pos_list.append((start_index, start_index+len(word)))\n    return pos_list\ndef make_pos(pos_list):\n    '''\n    Write a function to translate the text into an\n    adjective-based list.\n    '''\n    pos_list_adj = []\n    for i, j in pos_list:\n        pos_list_adj.append((j, i+1))\n    return pos_list_adj\ndef is_adj(word):\n    '''\n    Write a function to check if the given word is an adjective\n    '''\n    if re.search('^a', word):\n        return True\n    return False\ndef make_verb(pos_list):\n    '''\n    Write a function to translate the text into a verb-based list.\n    '''\n    verb_list = []\n    for i, j in pos_list:\n        if i == 0:\n            verb_list.append(word)\n        else:\n            if is_adj(word) and i < len(word):\n                verb_list.append(word[i-1])\n                verb_list.append(word[i])\n            else:\n                verb_list.append(word)\n    return verb_list\ndef make_noun(pos_list):\n    '''\n    Write a function to translate the text into a noun-based list.\n    '''\n    noun_list = []\n    for i, j in pos_list:\n        if j > 1 and i == 0:\n            noun_list.append(word)\n        elif j > 1 and i == len(word) and j == 2:\n            noun_list.append(word)\n        elif j == 2 and i > 1:\n            noun_list.append(word)\n    return noun_list\ndef make_noun_and_verb(pos_list):\n    '''\n    Write a function to translate the text into a noun-based list and verb-based list.\n    '''\n    noun_list = []\n    verb_list = []\n    for i, j in pos_list:\n        if i == 0:\n            noun_list.append(word)\n            verb_list.append(word)\n        else:\n            if is_adj(word):\n                verb_list.append(word)\n                noun_list.append(word)\n            else:\n                verb_list.append(word)\n                noun_list.append(word[i-1])\n    return noun_list, verb_list\ndef remove_numbers(word):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return re.sub(r'[0-9]{2,}', '', word)\ndef remove_symbols(word):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z]', '', word)\ndef is_verb(word):\n    '''\n    Write a function to check if a given word is a verb\n    '''\n    if word[-1] =='s':\n        return True\n    return False\ndef is_noun(word):\n    '''\n    Write a function to check if a given word is a noun\n    '''\n    if word[-1] == 'a':\n        return True\n    return False\ndef is_noun_and_verb(word):\n    '''\n    Write a function to check if a given word is a noun-based list and verb-based list.\n    '''\n    return word in [make_noun(pos) for pos in word_pos_list]\ndef get_adjective_pos(word):\n    '''\n    Write a function to find the first position of an adjective\n    '''\n    word_pos_list = [i for i, x in enumerate(word) if x in 'aeiouAEIOU']\n    if word_pos_list:\n        return word_pos_list[0]\n    else:\n        return -1\ndef get_verb_pos(word):\n    '''\n    Write a function to find the first position of a verb\n    '''\n    word_pos_list = [i for i, x in enumerate(word) if x in 'aeiouAEIOU']\n    if word_pos_list:\n        return word_pos_list[-1]\n    else:\n        return -1\ndef remove_number(word):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return re.sub(r'[0-9]', '', word)\ndef remove_symbols(word):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]', '', word)\ndef remove_symbols_and_numbers(word):\n    '''\n    Write a function to remove symbols and numbers from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+', '', word)\ndef remove_digits(word):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub(r'[^0-9]', '', word)\ndef remove_alphanumerics(word):\n    '''\n    Write a function to remove alphanumerics from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\-\\s]+', '', word)\ndef find_punctuation(word):\n    '''\n    Write a function to find the first punctuation character in a given string.\n    '''\n    word = word.strip()\n    if len(word) == 0:\n        return ''\n    for char in word:\n        if char in '!?.\\'\"':\n            return char\ndef remove_punctuation(word):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+', '', word)\ndef remove_punctuation_and_numbers(word):\n    '''\n    Write a function to remove punctuation and numbers from a given string.\n    '''\n    return re.sub(r'[^0-9]+', '', word)\ndef find_punctuation_and_numbers(word):\n    '''\n    Write a function to find the first punctuation character and the first number in a given string.\n    '''\n    word = word.strip()\n    if len(word) == 0:\n        return ''\n    for char in word:\n        if char in '!?' and char in '0123456789':\n            return char\ndef get_first_letter(word):\n    '''\n    Write a function to return the first letter in a given string.\n    '''\n    return word[0]\ndef is_present(word):\n    '''\n    Write a function to check if a given word is present.\n    '''\n    if word in 'aeiouAEIOU':\n        return True\n    return False\ndef is_present_and_numbers(word):\n    '''\n    Write a function to check if a given word is present and with numbers.\n    '''\n    if word in '0123456789':\n        return True\n    return False\ndef get_first_and_last_letter(word):\n    '''\n    Write a function to find the first letter and the last letter in a given string.\n    '''\n    first_letter = word[0]\n    last_letter = word[-1]\n    return first_letter, last_letter\ndef is_anagram(word, words):\n    '''\n    Write a function to check if a given string is an anagram.\n    '''\n    return sorted(word) == sorte"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs_list = ['a.', 'a.s.', 'a.e.', 'a.m.', 'a.p.', 'a.f.', 'a.k.', 'a.e.', 'a.a.', 'a.i.', 'a.l.', 'a.k.', 'a.i.', 'a.m.', 'a.s.', 'a.o.', 'a.n.', 'a.o.', 'a.s.', 'a.e.', 'a.r.', 'a.p.', 'a.n.', 'a.e.', 'a.k.', 'a.s.', 'a.k.', 'a.e.', 'a.n.', 'a.k.', 'a.p.', 'a.a.', 'a.o.', 'a.r.', 'a.n.', 'a.o.', 'a.n.', 'a.n.', 'a.m.', 'a.s.', 'a.o.', 'a.n.', 'a.n.', 'a.n.', 'a.o.', 'a.i.', 'a.l.', 'a.k.', 'a.e.', 'a.o.', 'a.o.', 'a.n.', 'a.i.', 'a.m.', 'a.s.', 'a.e.', 'a.k.', 'a.o.', 'a.n.', 'a.n.', 'a.e.', 'a.n.', 'a.n.', 'a.a.', 'a.k.', 'a.o.', 'a.n.', 'a.i.', 'a.l.', 'a.p.', 'a.n.', 'a.e.', 'a.o.', 'a.n.', 'a.n.', 'a.k.', 'a.o.', 'a.n.', 'a.o.', 'a.k.', 'a.o.', 'a.n.', 'a.n.', 'a.n.', 'a.n.', 'a.o.', 'a.n.', 'a.n.', 'a.a.', 'a.p.', 'a.o.', 'a.n.', 'a.s.', 'a.k.', 'a.i.', 'a.l.', 'a.p.', 'a.n.', 'a.n.', 'a.o.', 'a.n.', 'a.o.', 'a.a.', 'a.k.', 'a.e.', 'a.n.', 'a.e.', 'a.a.', 'a.a.', 'a.o.', 'a.n.', 'a.a.', 'a.o.', 'a.o.', 'a.a.', 'a.k.', 'a.n.', 'a.n.', 'a.n.', 'a.a.', 'a.k.', 'a.a.', 'a.n.', 'a.n.', 'a.o.', 'a.n.', 'a.n.', 'a.n.', 'a.n.', 'a.n.', 'a.a.', 'a.k.', 'a.a.', 'a.k.', 'a.i.', 'a.n.', 'a.n.', 'a.n.', 'a.a.', 'a.a.', 'a.a.', 'a.o.', 'a.o.', 'a.o.', 'a.o.', 'a.o.', 'a.a.', 'a.o.', 'a.o.', 'a.o.', 'a.o.', 'a.o.', 'a.n.', 'a.n.', 'a.n.', 'a.a.', 'a.n.', 'a.o.', 'a.n.', 'a.n.', 'a.n.', 'a.a.', 'a.o.', 'a.o.', 'a.a.', 'a.k.', 'a.s.', 'a.n.', 'a.n.', 'a.a.', 'a.s.', 'a.n.', 'a.a.', 'a.o.', 'a.s.', 'a.n.', 'a.o.', 'a.n.', 'a.o.', 'a.n.', 'a.s.', 'a.n.', 'a.n.', 'a.a.', 'a.p.', 'a.n.', 'a.n.', 'a.n.', 'a.a.', 'a.k.', 'a.s.', 'a.n.', 'a.a.', 'a.o.', 'a.n.', 'a.n.', 'a.k.', 'a.s.', 'a.s.', 'a.n.', 'a.n.', 'a.s.', 'a.o.', 'a.n.', 'a.n.', 'a.s.', 'a.s.', 'a.s.', 'a.o.', 'a.n.', 'a.n.', 'a.s.', 'a.k.', 'a.s.', 'a.o.', 'a.n.', 'a.n.', 'a.a.', 'a.k.', 'a.s.', 'a.s.', 'a.n.', 'a.a.', 'a.k.', 'a.s.', 'a.s.', 'a.a.', 'a.s.', 'a.o.', 'a.s.', 'a.n.', 'a.n.', 'a.a.', 'a.o.', 'a.n.', 'a.n.', 'a.s.', 'a.o.', 'a.n.', 'a.n.', 'a.n.', 'a.a.', 'a.k.', 'a.s.', 'a.n.', 'a.a.', 'a.n.', 'a.s.', 'a.s.', 'a.n.', 'a.n.', 'a.s.', 'a.n.', 'a.n.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.o.', 'a.s.', 'a.s.', 'a.o.', 'a.n.', 'a.n.', 'a.n.', 'a.s.', 'a.o.', 'a.n.', 'a.n.', 'a.a.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.o.', 'a.s.', 'a.s.', 'a.s.', 'a.o.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s.', 'a.s."
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = [c for c in text if c in 'aeiou']\n    adverb_start = [c.start() for c in adverbs]\n    adverb_positions = [adverb_start.index(pos) for pos in 'nsv']\n    return adverb_positions\ndef find_dative_position(text):\n    '''\n    Write a function to find the first dative and their positions in a given sentence.\n    '''\n    dative_start = [c.start() for c in text if c in 'aeiou']\n    dative_positions = [dative_start.index(pos) for pos in 'nsv']\n    return dative_positions\ndef find_interrogative_position(text):\n    '''\n    Write a function to find the first interrogative and their positions in a given sentence.\n    '''\n    interrogative_start = [c.start() for c in text if c in 'aeiou']\n    interrogative_positions = [interrogative_start.index(pos) for pos in 'nsv']\n    return interrogative_positions\ndef find_prepositional_position(text):\n    '''\n    Write a function to find the first prepositional and their positions in a given sentence.\n    '''\n    prepositional_start = [c.start() for c in text if c in 'aeiou']\n    prepositional_positions = [prepositional_start.index(pos) for pos in 'nsv']\n    return prepositional_positions\ndef find_verb_post_position(text):\n    '''\n    Write a function to find the first verb and their postposition in a given sentence.\n    '''\n    verb_post_start = [c.start() for c in text if c in 'aeiou']\n    verb_post_positions = [verb_post_start.index(pos) for pos in 'nsv']\n    return verb_post_positions\ndef find_noun_or_preposition(text):\n    '''\n    Write a function to find the first noun or a preposition in a given sentence.\n    '''\n    noun_or_preposition_start = [c.start() for c in text if c in 'aeiou']\n    noun_or_preposition_positions = [noun_or_preposition_start.index(pos) for pos in 'nsv']\n    return noun_or_preposition_positions\ndef find_plural_position(text):\n    '''\n    Write a function to find the first plural and their positions in a given sentence.\n    '''\n    plural_start = [c.start() for c in text if c in 'aeiou']\n    plural_positions = [plural_start.index(pos) for pos in 'nsv']\n    return plural_positions\ndef find_possesive_position(text):\n    '''\n    Write a function to find the first possessive and their positions in a given sentence.\n    '''\n    possesive_start = [c.start() for c in text if c in 'aeiou']\n    possesive_positions = [possesive_start.index(pos) for pos in 'nsv']\n    return possessive_positions\ndef find_head_position(text):\n    '''\n    Write a function to find the first head and their positions in a given sentence.\n    '''\n    head_start = [c.start() for c in text if c in 'aeiou']\n    head_positions = [head_start.index(pos) for pos in 'nsv']\n    return head_positions\ndef find_root_position(text):\n    '''\n    Write a function to find the first root and their positions in a given sentence.\n    '''\n    root_start = [c.start() for c in text if c in 'aeiou']\n    root_positions = [root_start.index(pos) for pos in 'nsv']\n    return root_positions\ndef find_appear_position(text):\n    '''\n    Write a function to find the first appear and their positions in a given sentence.\n    '''\n    appear_start = [c.start() for c in text if c in 'aeiou']\n    appear_positions = [appear_start.index(pos) for pos in 'nsv']\n    return appear_positions\ndef find_numeral_position(text):\n    '''\n    Write a function to find the first numeral and their positions in a given sentence.\n    '''\n    numeral_start = [c.start() for c in text if c in 'aeiou']\n    numeral_positions = [numeral_start.index(pos) for pos in 'nsv']\n    return numeral_positions\ndef find_plural_noun_and_preposition(text):\n    '''\n    Write a function to find the first plural noun and a preposition in a given sentence.\n    '''\n    plural_noun_start = [c.start() for c in text if c in 'aeiou']\n    plural_noun_positions = [plural_noun_start.index(pos) for pos in 'nsv']\n    return plural_noun_positions\ndef find_plural_noun_postposition(text):\n    '''\n    Write a function to find the first plural noun postposition in a given sentence.\n    '''\n    plural_noun_postposition_start = [c.start() for c in text if c in 'aeiou']\n    plural_noun_postposition_positions = [plural_noun_postposition_start.index(pos) for pos in 'nsv']\n    return plural_noun_postposition_positions\ndef find_plural_noun_appear_position(text):\n    '''\n    Write a function to find the first plural noun appear and their positions in a given sentence.\n    '''\n    plural_noun_appear_start = [c.start() for c in text if c in 'aeiou']\n    plural_noun_appear_positions = [plural_noun_appear_start.index(pos) for pos in 'nsv']\n    return plural_noun_appear_positions\ndef find_plural_noun_preposition_position(text):\n    '''\n    Write a function to find the first plural noun preposition in a given sentence.\n    '''\n    plural_noun_preposition_start = [c.start() for c in text if c in 'aeiou']\n    plural_noun_preposition_positions = [plural_noun_preposition_start.index(pos) for pos in 'nsv']\n    return plural_noun_preposition_positions\ndef find_plural_verb_position(text):\n    '''\n    Write a function to find the first plural verb and their positions in a given sentence.\n    '''\n    plural_verb_start = [c.start() for c in text if c in 'aeiou']\n    plural_verb_positions = [plural_verb_start.index(pos) for pos in 'nsv']\n    return plural_verb_positions\ndef find_plural_verb_postposition(text):\n    '''\n    Write a function to find the first plural verb postposition in a given sentence.\n    '''\n    plural_verb_postposition_start = [c.start() for c in text if c in 'aeiou']\n    plural_verb_postposition_positions = [plural_verb_postposition_start.index(pos) for pos in 'nsv']\n    return plural_verb_postposition_positions\ndef find_plural_verb_appear_position(text):\n    '''\n    Write a function to find the first plural verb appear and their positions in a given sentence.\n    '''\n    plural_verb_appear_start = [c.start() for c in text if c in 'aeiou']\n    plural_verb_appear_positions = [plural_verb_appear_start.index(pos) for pos in 'nsv']\n    return plural_verb_appear_positions\ndef find_plural_verb_preposition_position(text):\n    '''\n    Write a function to find the first plural verb preposition in a given sentence.\n    ''"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = re.compile(r'(?:v|m|a)\\b')\n    m = regex.search(text)\n    if m:\n        start_pos = m.start()\n        adverb = text[start_pos:start_pos+4]\n        adverb_position_list = text[start_pos+4:].split(' ')\n        adverb_position_list = [int(p) for p in adverb_position_list]\n        return adverb, adverb_position_list\n    return None, None\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    count = 0\n    i = 0\n    while i < len(text):\n        if text[i] in 'aeiou':\n            if text[i] == 'e' or text[i] == 'o' or text[i] == 'u' or text[i] == '\u00fc':\n                count += 1\n            else:\n                if count < 1:\n                    count += 1\n                i += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] == 'adverb':\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['the','an']:\n                    return i,j\n        \ndef find_preposition_position(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['its', 'is']:\n                    return i,j\n        \ndef find_inflexive_position(text):\n    '''\n    Write a function to find the first inflexive and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_singular_position(text):\n    '''\n    Write a function to find the first singular and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_extremes_position(text):\n    '''\n    Write a function to find the first extremes and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_conjunction_position(text):\n    '''\n    Write a function to find the first conjunction and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['and', 'but']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_final_position(text):\n    '''\n    Write a function to find the last final and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_trailing_position(text):\n    '''\n    Write a function to find the last trailing and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_double_position(text):\n    '''\n    Write a function to find the last double and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_first_sub_position(text):\n    '''\n    Write a function to find the first first sub and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_middle_position(text):\n    '''\n    Write a function to find the middle and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_last_sub_position(text):\n    '''\n    Write a function to find the last first sub and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_trailing_sub_position(text):\n    '''\n    Write a function to find the last trailing sub and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_last_trailing_sub_position(text):\n    '''\n    Write a function to find the last trailing sub and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_first_double_position(text):\n    '''\n    Write a function to find the first first double and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_middle_double_position(text):\n    '''\n    Write a function to find the middle and first double and their positions in a given sentence.\n    '''\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] in ['of', 'and', 'in']:\n            for j in range(i+1,len(text_list)):\n                if text_list[j] in ['s','s']:\n                    return i,j\n        \ndef find_last_double_position(text):\n    '''\n    Write a function to find the last first double and their positions in a given sentence.\n    '''\n    text_list = text.split()\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    adverb_positions = [\n            (i,j) for (i,j) in enumerate(text) if (text[i] in 'aeiou') and (text[j] in 'aeiou')\n            ]\n    adverb_position_array = []\n    for index, position in adverb_positions:\n        adverb_position_array.append([index,position])\n    adverb_position_array.sort(key = lambda x : x[0])\n    adverb_position_array = adverb_position_array[:3]\n    return adverb_position_array\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = [\"be\",\"have\",\"to\",\"has\",\"with\",\"in\",\"to\",\"i\",\"from\",\"in\",\"of\",\"to\",\"to\",\"of\",\"of\",\"of\",\"in\",\"in\",\"on\",\"have\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"on\",\"has\",\"with\",\"with\",\"with\",\"to\",\"in\",\"to\",\"to\",\"has\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"to\",\"to\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"to\",\"to\",\"to\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\",\"in\","
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfaceArea = 0\n    for i in l:\n        for j in i:\n            surfaceArea += j*j\n    return surfaceArea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfaceArea = 0\n    \n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                if i == 0 or j == 0 or k == 0:\n                    surfaceArea += l*l*l\n    return surfaceArea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 4 * l * (l + 1)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def cubearea(l):\n        return l*l*l\n    return cubearea(l)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**3)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(1,int(l**0.5) + 1):\n        area += l * l * i\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 3.14*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l == 0:\n        return 0\n    else:\n        return (4*l**3)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l >= 0:\n        if l > 0:\n            return l * l * 3.14 * 6\n        else:\n            return \"invalid cube size\"\n    else:\n        print(\"Error, must be positive\")\n        return \"invalid cube size\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums == []:\n        return -1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) < 2:\n        return 'You need at least two integers!'\n    positives = [i for i in nums if i > 0]\n    num_p = len(positives)\n    num_n = len(nums)\n    if num_p < num_n:\n        return 'Invalid input!'\n    negatives = [i for i in nums if i < 0]\n    num_neg = len(negatives)\n    return round((num_p/num_n)/(num_neg/num_p),2)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # array = array(positive_count(nums))\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    div = array('i',[0])\n    for i in nums:\n        div.append(div[-1]/i)\n    return div\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p = 0\n    q = 0\n    for i in range(0,len(nums)):\n        if nums[i] >= 0:\n            p += 1\n        else:\n            q += 1\n    if p > q:\n        return p\n    else:\n        return q\ndef find_max(nums):\n    '''\n    Write a function to find the maximum value of a list of numbers.\n    '''\n    max_num = nums[0]\n    for i in range(0,len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n    return max_num\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for i in nums:\n        if i >= 0:\n            positive += 1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([n for n in nums if n>0])/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    nums_1 = []\n    for i in nums:\n        if i >= 0:\n            nums_1.append(i)\n    \n    positives = 0\n    for i in nums_1:\n        if i > 0:\n            positives += 1\n    \n    return positives/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    from fractions import Fraction\n    positive_sum = 0\n    for x in nums:\n        if x >= 0:\n            positive_sum = positive_sum + 1\n        else:\n            positive_sum = positive_sum + 0\n    \n    return positive_sum / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for i in nums:\n        if i > 0:\n            positives += 1\n    return positives/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for x in list1:\n        if x < 0:\n            if max_neg < x:\n                max_neg = x\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -1\n    for num in list1:\n        if num < 0:\n            continue\n        elif num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    if len(list1) == 1:\n        return -list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return -list1[0]\n    else:\n        return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg = 0\n    for i in list1:\n        if i < 0:\n            neg += 1\n    print(neg)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -100\n    for element in list1: \n        if element < 0: \n            if element > largest_neg: \n                largest_neg = element \n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = None\n    for number in list1:\n        if number < 0:\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n    return largest_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    result = -1\n    for elem in list1:\n        if elem < 0:\n            result = elem\n    return result\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    # If list is not empty\n    if len(list1) > 0: \n        \n        # Get the maximum and minimum elements from the given list \n        max_neg = list1[0] \n        min_neg = list1[0] \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1)==0:\n        return -1\n    neg_list = []\n    for x in range(0,len(list1)):\n        if x<0:\n            neg_list.append(abs(list1[x]))\n    return max(neg_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # your code here\n    print(\"Start your code here\")\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # raise NotImplementedError\n    \n    assert(len(test_list) > 0)\n    \n    new_list = []\n    \n    for element in test_list:\n        # print(element, end ='')\n        assert(len(element) <= K)\n        \n        new_list.append(element[:K])\n    \n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    lst = []\n    for i in test_list:\n        for j in range(K):\n            lst.append(i[j])\n    return lst\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    try:\n        for i in range(0,len(test_list)):\n            for j in range(0,len(test_list[i])):\n                if(j<K):\n                    test_list[i][j]=test_list[i][j][0:K]\n    except:\n        pass\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    return_list = []\n    for item in test_list:\n        return_list.append(item[:K])\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if i[j] == None:\n                i[j] = ''\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError('The argument is not a list')\n    elif not isinstance(K, int):\n        raise TypeError('The argument is not a valid integer')\n    elif K <= 0:\n        raise ValueError('The K cannot be negative')\n    elif K == 1:\n        return test_list[0]\n    else:\n        return (tuple(test_list[:-K])) + (tuple(test_list[-K:]))\n    \n    \ndef flatten(test_list):\n    '''\n    Write a function to flatten a given list into a new list.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError('The argument is not a list')\n    elif not isinstance(test_list, (list, tuple)):\n        raise TypeError('The argument is not a list or tuple')\n    elif len(test_list) == 0:\n        raise ValueError('The list cannot be empty')\n    elif isinstance(test_list, list):\n        if len(test_list) == 1:\n            return test_list[0]\n        elif len(test_list) == 2:\n            return (test_list[0], test_list[1])\n        else:\n            return (test_list[0], test_list[1], test_list[2])\n    else:\n        return (tuple(test_list))\n    \n    \ndef reverse(test_list):\n    '''\n    Write a function to reverse a given list of tuples.\n    '''\n    if not isinstance(test_list, (list, tuple)):\n        raise TypeError('The argument is not a list or tuple')\n    elif not isinstance(test_list, list):\n        raise TypeError('The argument is not a list')\n    elif len(test_list) == 0:\n        raise ValueError('The list cannot be empty')\n    elif isinstance(test_list, list):\n        if len(test_list) == 1:\n            return test_list[::-1]\n        elif len(test_list) == 2:\n            return (test_list[1], test_list[0])\n        else:\n            return (test_list[1], test_list[0], test_list[2])\n    else:\n        return (tuple(test_list[::-1]))\n    \n    \ndef count_words(test_list):\n    '''\n    Write a function to count the number of words in a given list of tuples.\n    '''\n    if not isinstance(test_list, (list, tuple)):\n        raise TypeError('The argument is not a list or tuple')\n    elif not isinstance(test_list, list):\n        raise TypeError('The argument is not a list')\n    elif len(test_list) == 0:\n        raise ValueError('The list cannot be empty')\n    elif isinstance(test_list, list):\n        if len(test_list) == 1:\n            return test_list[0]\n        elif len(test_list) == 2:\n            return (test_list[0] + 1)\n        else:\n            return (test_list[0] + 1, test_list[1])\n    else:\n        return (tuple(test_list[0]))\n    \n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                test_list[i], test_list[j] = test_list[j], test_list[i]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [i for i in test_list[:K] if i]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # your code goes here\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = test_tup1[0] * test_tup2[0]\n    print('Index wise multiplication of tuple elements: {}'.format(result))\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    x = 0\n    y = 0\n    for i in range(len(test_tup1)):\n        x = x * test_tup1[i]\n        y = y * test_tup2[i]\n    return x,y\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    index_multiplication_tuple = (tup1[0] * test_tup2[0], tup1[1] * test_tup2[1])\n    return index_multiplication_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #write your code here\n    return 0\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for index, value in enumerate(test_tup1):\n        new_tup += (value * test_tup2[index])\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(type(test_tup1))\n    print(type(test_tup2))\n    test_list1 = []\n    test_list2 = []\n    test_list1.extend(test_tup1)\n    test_list2.extend(test_tup2)\n    print(test_list1)\n    print(test_list2)\n    print('\\n')\n    print(test_list1[0] * test_list2[0])\n    print(test_list1[0] * test_list2[1])\n    print(test_list1[1] * test_list2[0])\n    print(test_list1[1] * test_list2[1])\n    print(test_list1[2] * test_list2[0])\n    print(test_list1[2] * test_list2[1])\n    print(test_list1[3] * test_list2[0])\n    print(test_list1[3] * test_list2[1])\n    print('\\n')\n    print(test_list1[0] + test_list2[0])\n    print(test_list1[0] + test_list2[1])\n    print(test_list1[1] + test_list2[0])\n    print(test_list1[1] + test_list2[1])\n    print(test_list1[2] + test_list2[0])\n    print(test_list1[2] + test_list2[1])\n    print(test_list1[3] + test_list2[0])\n    print(test_list1[3] + test_list2[1])\n    print('\\n')\n    print(test_list1[4] * test_list2[0])\n    print(test_list1[4] * test_list2[1])\n    print(test_list1[5] * test_list2[0])\n    print(test_list1[5] * test_list2[1])\n    print(test_list1[6] * test_list2[0])\n    print(test_list1[6] * test_list2[1])\n    print(test_list1[7] * test_list2[0])\n    print(test_list1[7] * test_list2[1])\n    print('\\n')\n    print(test_list1[8] + test_list2[0])\n    print(test_list1[8] + test_list2[1])\n    print(test_list1[9] + test_list2[0])\n    print(test_list1[9] + test_list2[1])\n    print(test_list1[10] + test_list2[0])\n    print(test_list1[10] + test_list2[1])\n    print(test_list1[11] + test_list2[0])\n    print(test_list1[11] + test_list2[1])\n    print('\\n')\n    print(test_list1[12] * test_list2[0])\n    print(test_list1[12] * test_list2[1])\n    print(test_list1[13] * test_list2[0])\n    print(test_list1[13] * test_list2[1])\n    print(test_list1[14] * test_list2[0])\n    print(test_list1[14] * test_list2[1])\n    print(test_list1[15] * test_list2[0])\n    print(test_list1[15] * test_list2[1])\n    print('\\n')\n    print(test_list1[16] + test_list2[0])\n    print(test_list1[16] + test_list2[1])\n    print(test_list1[17] + test_list2[0])\n    print(test_list1[17] + test_list2[1])\n    print(test_list1[18] + test_list2[0])\n    print(test_list1[18] + test_list2[1])\n    print(test_list1[19] + test_list2[0])\n    print(test_list1[19] + test_list2[1])\n    print(test_list1[20] + test_list2[0])\n    print(test_list1[20] + test_list2[1])\n    print(test_list1[21] + test_list2[0])\n    print(test_list1[21] + test_list2[1])\n    print(test_list1[22] + test_list2[0])\n    print(test_list1[22] + test_list2[1])\n    print(test_list1[23] + test_list2[0])\n    print(test_list1[23] + test_list2[1])\n    print(test_list1[24] + test_list2[0])\n    print(test_list1[24] + test_list2[1])\n    print(test_list1[25] + test_list2[0])\n    print(test_list1[25] + test_list2[1])\n    print(test_list1[26] + test_list2[0])\n    print(test_list1[26] + test_list2[1])\n    print(test_list1[27] + test_list2[0])\n    print(test_list1[27] + test_list2[1])\n    print(test_list1[28] + test_list2[0])\n    print(test_list1[28] + test_list2[1])\n    print(test_list1[29] + test_list2[0])\n    print(test_list1[29] + test_list2[1])\n    print(test_list1[30] + test_list2[0])\n    print(test_list1[30] + test_list2[1])\n    print(test_list1[31] + test_list2[0])\n    print(test_list1[31] + test_list2[1])\n    print(test_list1[32] + test_list2[0])\n    print(test_list1[32] + test_list2[1])\n    print(test_list1[33] + test_list2[0])\n    print(test_list1[33] + test_list2[1])\n    print(test_list1[34] + test_list2[0])\n    print(test_list1[34] + test_list2[1])\n    print(test_list1[35] + test_list2[0])\n    print(test_list1[35] + test_list2[1])\n    print(test_list1[36] + test_list2[0])\n    print(test_list1[36] + test_list2[1])\n    print(test_list1[37] + test_list2[0])\n    print(test_list1[37] + test_list2[1])\n    print(test_list1[38] + test_list2[0])\n    print(test_list1[38] + test_list2[1])\n    print(test_list1[39] + test_list2[0])\n    print(test_list1[39] + test_list2[1])\n    print(test_list1[40] + test_list2[0])\n    print(test_list1[40] + test_list2[1])\n    print(test_list1[41] + test_list2[0])\n    print(test_list1[41] + test_list2[1])\n    print(test_list1[42] + test_list2[0])\n    print(test_list1[42] + test_list2[1])\n    print(test_list1[43] + test_list2[0])\n    print(test_list1[43] + test_list2[1])\n    print(test_list1[44] + test_list2[0])\n    print(test_list1[44] + test_list2[1])\n    print(test_list"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result + test_tup1[i] * test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize answer list to empty tuple\n    answer = ()\n    # iterate over both lists in range of range of test tuple\n    for i in range(len(test_tup1)):\n        # if index == 0\n        if i == 0:\n            # iterate over both lists in range of test tuple\n            for j in range(len(test_tup2)):\n                # if index == 0\n                if j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 0\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                        # if index == 0\n                        if k == 0:\n                            answer = answer + test_tup1[i]\n                        else:\n                            answer = answer + test_tup2[j] * test_tup1[i]\n        # if index == 1\n        elif i == 1:\n            # iterate over both lists in range of test tuple\n            for j in range(len(test_tup2)):\n                # if index == 1\n                if j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 1\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 1\n                elif j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 1\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 1\n                else:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 1\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n        # if index == 2\n        elif i == 2:\n            # iterate over both lists in range of test tuple\n            for j in range(len(test_tup2)):\n                # if index == 2\n                if j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 2\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 2\n                elif j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 2\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 2\n                else:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 2\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n        # if index == 3\n        elif i == 3:\n            # iterate over both lists in range of test tuple\n            for j in range(len(test_tup2)):\n                # if index == 3\n                if j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 3\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 3\n                elif j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 3\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 3\n                else:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 3\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n        # if index == 4\n        elif i == 4:\n            # iterate over both lists in range of test tuple\n            for j in range(len(test_tup2)):\n                # if index == 4\n                if j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 4\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 4\n                elif j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 4\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 4\n                else:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 4\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n        # if index == 5\n        elif i == 5:\n            # iterate over both lists in range of test tuple\n            for j in range(len(test_tup2)):\n                # if index == 5\n                if j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 5\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 5\n                elif j == 0:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 5\n                        if k == 0:\n                            answer = test_tup1[i] * test_tup2[j]\n                        else:\n                            answer = answer + test_tup1[i] * test_tup2[j]\n                # if index == 5\n                else:\n                    # iterate over both lists in range of test tuple\n                    for k in range(len(test_tup1)):\n                        # if index == 5\n                        if k == 0:\n                            answer = test_tup1[i] * test_tu"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple()\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a list to store occurrence count of all elements of the tuple\n    count_list = []\n    # Iterate over all elements of the tuple\n    for i in range(len(tup)): \n        # If element is in the list, add 1 to count_list\n        if tup[i] in lst:\n            count_list.append(lst.count(tup[i]))\n    # Print the occurrence count\n    print(count_list)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len([x for x in lst if tup.count(x) > 1])\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c=0\n    for i in tup:\n        if i in lst:\n            c+=1\n    return c\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = (tuple(tup))\n    occ = dict()\n    for i in tup: \n        occ[i] = tup.count(i)\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    if type(tup) is not tuple: \n        return 0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for el in lst: \n        if el in tup: \n            count = count + 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup2 = []\n    for i in range(len(lst)):\n        for j in range(len(tup)):\n            if lst[i] == tup[j]:\n                tup2.append(i)\n    occ = len(tup2)\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    for i in range(len(lst)): \n        if lst[i] in tup: \n            lst[i] = lst[i] \n    return lst \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        count = count + len(tup)\n    for j in lst:\n        count = count + len(lst)\n    return count\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    \n    for i in nums:\n        result.append(cube(i))\n    \n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = 0\n    for i in range(len(nums)):\n        cube += nums[i]*(nums[i]*3)\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num ** 3 for num in nums]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                if nums[i]**3 + nums[j]**3 + nums[k]**3 == nums[i]**3 + nums[j]**3 + nums[k]**3:\n                    cubes.append(nums[i]**3 + nums[j]**3 + nums[k])\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    #get length of nums list\n    length = len(nums)\n    #get all cubes of length 2 from nums\n    cubes = [cube_num * (cube_num * nums[i]) for i in range(length)]\n    #return sum of cubes\n    return sum(cubes)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cubes(nums):\n        return [cubes(nums[i])**3 for i in range(len(nums))]\n    return cubes(nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Convert the input into a list of integers\n    int_list = list(map(int, nums))\n    # calculate the sum of cubes of integers in the input\n    sum = 0\n    # Create an empty list for the result\n    result = []\n    # iterate over the list\n    for i in int_list:\n        # increment the sum of cubes of this element by it's cubed value\n        sum += i**3\n        # append the current cube value to the result list\n        result.append(sum)\n    # return the result list\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [x**3 for x in nums]\n    return cubes\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        sum += i \n    return sum \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    for i in range(1, n + 1):\n        res += i\n    return res \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 0: \n        return 0\n    return n + sum(cal_sum(n-1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n + sum(range(0, n))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n+cal_sum(n-1) \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    end = len(str)\n    while end < len(str):\n        start = str.find(str[end], start) + len(str[end])\n        if start < 0:\n            start = 0\n        end = start + len(str)\n    return str[start:end]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if type(str) is not list:\n        return str\n    if len(str) == 0:\n        return str\n    else:\n        return extract_string(str[0], l[1:])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    p = []\n    for i in range(0, len(l)):\n        if len(l[i]) > l[i]:\n            p.append(l[i])\n        else:\n            p.append(str)\n    return(p)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not isinstance(str, list):\n        raise TypeError('str must be a list')\n    if not str:\n        raise ValueError('str cannot be empty')\n    if not l:\n        raise ValueError('length of list must be greater than 0')\n    if not isinstance(l, list):\n        raise TypeError('list must be a list')\n    for el in l:\n        if not isinstance(el, str):\n            raise TypeError('list elements must be strings')\n    if len(l) > len(str):\n        raise ValueError('list must be shorter than list of strings')\n    s = ''\n    for el in l:\n        s += extract_string(str, el)\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        if str[0] == '<':\n            str = '<{}'.format(str[1:])\n            if len(str.split('<',1)) == 2:\n                if str.split('>')[1].startswith('/'):\n                    return extract_string(str, l)\n                else:\n                    return extract_string(str.split('>',1)[1], l)\n            elif len(str.split('>',1)) == 2:\n                if str.split('<')[1].startswith('/'):\n                    return extract_string(str, l)\n                else:\n                    return extract_string(str.split('<')[1], l)\n        elif str[0] == '>':\n            str = '{}'.format(str[1:])\n            if len(str.split('>',1)) == 2:\n                if str.split('<')[1].startswith('/'):\n                    return extract_string(str, l)\n                else:\n                    return extract_string(str.split('<')[1], l)\n            elif len(str.split('<',1)) == 2:\n                if str.split('>')[1].startswith('/'):\n                    return extract_string(str, l)\n                else:\n                    return extract_string(str.split('<')[1], l)\n        else:\n            return str\n    except Exception as ex:\n        print('ERROR: Invalid Input: {}'.format(str), ex)\n        return 'N/A'\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, l, str.find(l, "
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str)<l:\n        return''\n    str = str[:l]\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        #'10,99,990,980,988,989,989,982,990,999,999,999'\n        #'10,99,990,988,989,99,999,999,999'\n        start_index = l.index(str)\n        #print start_index\n        end_index = start_index + len(str)\n        #print end_index\n        return (start_index, end_index)\n    except ValueError:\n        #print '\\nNo matches found\\n'\n        return None\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str.pop(l[0])\n    if len(str) == l[1]:\n        str.pop(0)\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return (l[:l.index(str) + len(str)]).replace('\\n','').replace(' ','')\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.replace(' ', '')\n    text3=re.sub(r'[\\n\\t\\r]', '', text2)\n    text4=re.sub(r'\\s+','', text3)\n    text5=re.sub(r'\\s+','', text4)\n    return text5\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = re.sub(r'\\s+', '', text1)\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(\"\\s+\", \"\", text1)\n    return text2\n    '''\n    I have created a function that removes all whitespaces from a string\n    and then made an output string which has the removed whitespaces\n    '''\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', str(text1))\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = ''\n    for i in range(len(text1)):\n        if(text1[i]!=''):\n            text2 = text2 + text1[i]\n    return text2\n    \ndef remove_punctuation(text1):\n    '''\n    Write a function that takes a string and returns a new one that does not contain any punctuation characters and lowercase all the letters.\n    '''\n    text2 = ''\n    for i in range(len(text1)):\n        if(text1[i] in '!@#$%^&*()_+-=|{}:~;'):\n            text2 = text2 + text1[i]\n    return text2.lower()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1_new = re.sub(r'\\s+','', text1)\n    return text1_new\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    remove_string = re.compile(r\"\\s+\")\n    return remove_string.sub(\"\", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    for char in text1:\n        if char!= \" \":\n            text1 = text1.replace(char, \" \")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    def clean_space(text):\n        return re.sub(' +','', text)\n    # convert string to list of words\n    words = clean_space(text1).split(' ')\n    # remove duplicate whitespace\n    words = list(dict.fromkeys(words))\n    # sort list by length\n    words = sorted(words, key=len)\n    # return new string\n    return''.join(words)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # 1. find how much money on the sale\n    # 2. calculate the sale amount\n    # 3. add the sale amount to the actual cost\n    # 4. return the sale amount\n    # 5. return 0 if there is no sale on the sale amount\n    if sale_amount == 0:\n        return actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0.000\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount==0:\n        return 0\n    else:\n        return sale_amount/actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        if actual_cost<sale_amount:\n            return 0\n        else:\n            return sale_amount-actual_cost\n    except:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            factors.append(i)\n            if (i!= math.sqrt(n)):\n                factors.append(n//i)\n    if n > 1:\n        factors.append(n)\n    return sum(factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1) : \n        if n%i==0 : \n            sum+=i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 2\n    elif n % 2 == 0 : \n        return n / 2\n    else : \n        return (n * sumofFactors(n-1)) / 2\ndef sumOfFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 2\n    elif n % 2 == 0 : \n        return (n / 2) + (n * sumOfFactors(n-1)) / 2\n    else : \n        return (n * sumofFactors(n-1)) + (n * sumofFactors(n-2)) / 2\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    elif n % 2!= 0:\n        return math.ceil(n/2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    f = []\n    while n % 2 == 0:\n        f.append(2)\n        n = n / 2\n    if n!= 1 :\n        f.append(n)\n    s = 0\n    for i in range(len(f)):\n        s = s + f[i]*i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0: \n            sum += i \n    return sum \ndef isBinomial(n, k) : \n    '''\n    Write a python function that determines whether n is a binomial number or not.\n    '''\n    if n == 0 : \n        return True\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if k == 2 : \n        return False\n    if k == 0 : \n        return False\n    if k == 1 : \n        return True\n    \n    factor = math.factorial(n-1)\n    # the number of non-redundant factors of n is n-k\n    factors = factor // (math.factorial(k) // math.factorial(n-k))\n    return factors * isBinomial(n-k, k)\ndef isFibonacci(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            return False\n    return True\ndef isFibonacciPoly(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            return False\n    return True\ndef isFibonacciSum(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            return False\n    return True\ndef isFibonacciApprox(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            return False\n    return True\ndef isFibonacciHex(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            return False\n    return True\ndef isFibonacciHexPoly(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            return False\n    return True\ndef isFibonacciRing(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            return False\n    return True\ndef isFibonacciSuperDup(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            return False\n    return True\ndef isFibonacciTail(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            return False\n    return True\ndef isFibonacciMe(n) : \n    '''\n    Write a python function that determines whether a number is a fibonacci number or not.\n    '''\n    if n < 2 : \n        return True\n    if n == 2 or n == 3 : \n        return False\n    # the number of fibonacci numbers that are greater than the current number\n    fibonacci = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    fibonacci[n] = fibonacci[n] + fibonacci[n-2]\n    for i in range(5, 0, -1) : \n        if fibonacci[i] > n : \n            retur"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0):\n        return 0\n    for i in range(1, int(math.sqrt(n)+1)):\n        if (n % i == 0):\n            return i\n    return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0 \n    # traverse till n is divisible by 2\n    for i in range(1, int(math.sqrt(n)+1)): \n        # if divisible by 2, sum of even factors is 2 \n        if (n % i == 0): \n            result += (i) \n            # if n is divided by 2, the result will add 2 \n            if (n // i == 2): \n                result += 2 \n    return result \ndef sumofFactorsDict(n) : \n    '''\n    This function will return the sum of the factors of a number n \n    and a dictionary of the factors and the sum of their factors. \n    The dictionary will be indexed as: \n    f({i: sum of i's factors, i + 1: sum of i's factors plus 1}) \n    '''\n    dic = {}\n    dic[2] = 0 \n    dic[3] = 0 \n    dic[4] = 0 \n    dic[5] = 0 \n    dic[6] = 0 \n    dic[7] = 0 \n    dic[8] = 0 \n    dic[9] = 0 \n    dic[10] = 0 \n    dic[11] = 0 \n    for i in range(2, int(math.sqrt(n)+1)): \n        if (n % i == 0): \n            dic[i] = (n // i) + 1\n    dic[1] = 1 \n    return dic \ndef main():\n    '''\n    This program will take in user input and calculate the sum of all the factors.\n    The program will display the sum of all the factors and the sum of their factors. \n    '''\n    # taking input \n    # the user will enter a number to calculate the sum \n    print(\"Enter a number to calculate the sum of its factors :\")\n    n = int(input()) \n    # using sumofFactors function, it returns the sum of all factors of n \n    print(sumofFactors(n)) \n    print(\"sum of factors of\", n, \"is\", sum(sumofFactorsDict(n)))\n    \nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # h is the number of digit of n\n    h = n\n    #  h is the number of digits of n\n    while (h % 2 == 0) : \n        h = h // 2\n    # print(h) \n    # find the sum of even factors\n    f = 0\n    for i in range(1, h + 1) :\n        # if i is odd, n is a factor of n\n        if (i % 2 == 0) : \n            f = f + 1\n    # return the sum of even factors\n    return f\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    else : \n        return n * sumofFactors(n - 1) \n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_words = text.split()\n    text_m = re.match('^' + text + '$', text)\n    if text_m is None:\n        return text_m\n    else:\n        return text_m.group(0)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z|\\w+', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z'\n    result = re.match(pattern,text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # List of words, in lower case\n    words = [word.lower() for word in text.split()]\n    # List of short words, in lower case\n    short_words = [word.lower() for word in words if len(word) < 3]\n    # Create empty lists\n    result_match_wordz = []\n    # For each word in the short list, if there's any match for the word in the original list, add to result_match_wordz\n    for word in short_words:\n        if re.match(word, words):\n            result_match_wordz.append(word)\n    # Return the list\n    return result_match_wordz\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = text.split()\n    for i in wordz:\n        if i[0] == 'z':\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #find all the words in the text\n    words = re.findall('[A-Z][a-z]*', text)\n    \n    #iterate through each word to match the word\n    for word in words:\n        if word.endswith('z'):\n            #return the first match\n            return word[0:3]\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = ['z']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordz:\n            result.append(w)\n    return result\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    wordy = ['y']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordy:\n            result.append(w)\n    return result\ndef text_match_wordm(text):\n    '''\n    Write a function that matches a word containing'm'.\n    '''\n    wordm = ['m']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordm:\n            result.append(w)\n    return result\ndef text_match_wordq(text):\n    '''\n    Write a function that matches a word containing 'q'.\n    '''\n    wordq = ['q']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordq:\n            result.append(w)\n    return result\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    wordr = ['r']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordr:\n            result.append(w)\n    return result\ndef text_match_words(text):\n    '''\n    Write a function that matches a word containing's'.\n    '''\n    words = ['s']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in words:\n            result.append(w)\n    return result\ndef text_match_wordt(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    wordt = ['t']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordt:\n            result.append(w)\n    return result\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    wordu = ['u']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordu:\n            result.append(w)\n    return result\ndef text_match_wordv(text):\n    '''\n    Write a function that matches a word containing 'v'.\n    '''\n    wordv = ['v']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordv:\n            result.append(w)\n    return result\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    wordw = ['w']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordw:\n            result.append(w)\n    return result\ndef text_match_wordx(text):\n    '''\n    Write a function that matches a word containing 'x'.\n    '''\n    wordx = ['x']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordx:\n            result.append(w)\n    return result\ndef text_match_wordzs(text):\n    '''\n    Write a function that matches a word containing 'zs'.\n    '''\n    wordzs = ['zs']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordzs:\n            result.append(w)\n    return result\ndef text_match_wordys(text):\n    '''\n    Write a function that matches a word containing 'ys'.\n    '''\n    wordys = ['ys']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordys:\n            result.append(w)\n    return result\ndef text_match_wordms(text):\n    '''\n    Write a function that matches a word containing'ms'.\n    '''\n    wordms = ['ms']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordms:\n            result.append(w)\n    return result\ndef text_match_wordqs(text):\n    '''\n    Write a function that matches a word containing 'qs'.\n    '''\n    wordqs = ['qs']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordqs:\n            result.append(w)\n    return result\ndef text_match_wordrs(text):\n    '''\n    Write a function that matches a word containing 'rs'.\n    '''\n    wordrs = ['rs']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordrs:\n            result.append(w)\n    return result\ndef text_match_wordss(text):\n    '''\n    Write a function that matches a word containing'ss'.\n    '''\n    wordss = ['ss']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordss:\n            result.append(w)\n    return result\ndef text_match_wordtss(text):\n    '''\n    Write a function that matches a word containing 'ttss'.\n    '''\n    wordtss = ['ttss']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordtss:\n            result.append(w)\n    return result\ndef text_match_worduq(text):\n    '''\n    Write a function that matches a word containing 'uq'.\n    '''\n    worduq = ['uq']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in worduq:\n            result.append(w)\n    return result\ndef text_match_wordvq(text):\n    '''\n    Write a function that matches a word containing 'vq'.\n    '''\n    wordvq = ['vq']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordvq:\n            result.append(w)\n    return result\ndef text_match_wordwq(text):\n    '''\n    Write a function that matches a word containing 'wq'.\n    '''\n    wordwq = ['wq']\n    word = re.findall(r'\\w+', text)\n    result = []\n    for w in word:\n        if w[0].lower() not in wordwq:\n            result.append(w)\n    return result\ndef text_match_wordxq(text):\n    '''\n    Write a function that matche"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.replace('z', '0')\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define pattern\n    pattern = r'(?P<keyword>\\w+\\s*)(?P<space>\\s+)\\w*(?P<word>\\w+\\s+\\w+)\\w*(?P<end>\\s+\\w*)(?P<punct>.*)?'\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # Constraints\n    #     for each word in text,\n    #     the characters can be a letter or a digit\n    #     with any number of consonants and any number of vowels\n    #     in the word\n    \n    # Return\n    #     true if the text contains a word containing 'z'\n    #     else, return false\n    #\n    # Precondition\n    #     0 < len(text) <= 50\n    #\n    # Postcondition\n    #     the text is a word containing 'z'\n    \n    word_list = re.findall('[a-zA-Z]+', text)\n    for word in word_list:\n        if word.lower() in text.lower():\n            return True\n    \n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 <= 12) or (monthnum2 > 12):\n        return False\n    elif monthnum2 > 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    try:\n        int(monthnum2)\n    except:\n        print(\"The given month number should be an integer\")\n        return\n    try:\n        if int(monthnum2) > 12 or int(monthnum2) < 0:\n            print(\"The given month number should be an integer between 0 and 12\")\n            return\n        elif len(str(monthnum2))!= 2:\n            print(\"The given month number should be an integer between 0 and 12\")\n            return\n        elif int(monthnum2) >= 0 and int(monthnum2) < 9:\n            print(\"The given month number should be an integer between 0 and 9\")\n            return\n        elif int(monthnum2) == 0:\n            print(\"The given month number should be an integer between 0 and 9\")\n            return\n    except:\n        print(\"The given month number should be an integer\")\n        return\n    monthnum2 = str(monthnum2)\n    monthnum2 = monthnum2.zfill(2)\n    \n    for i in range(0, len(monthnum2)):\n        if int(monthnum2[i]) >= 1 and int(monthnum2[i]) <= 31:\n            break\n        else:\n            print(\"The given month number should be an integer between 0 and 31\")\n            return\n    monthnum2 = int(monthnum2)\n    return\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if monthnum2 > 2:\n            raise ValueError('Error! The month number must be less than or equal to 2.')\n        else:\n            if monthnum2!= 2:\n                raise ValueError('Error! The month number must be greater than or equal to 2.')\n    except ValueError as ve:\n        print(ve)\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2>12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 1\n    elif monthnum2 == 2:\n        return 2\n    elif monthnum2 == 3:\n        return 3\n    elif monthnum2 == 4:\n        return 4\n    elif monthnum2 == 5:\n        return 5\n    elif monthnum2 == 6:\n        return 6\n    elif monthnum2 == 7:\n        return 7\n    elif monthnum2 == 8:\n        return 8\n    elif monthnum2 == 9:\n        return 9\n    elif monthnum2 == 10:\n        return 10\n    elif monthnum2 == 11:\n        return 11\n    elif monthnum2 == 12:\n        return 12\n    else:\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 31:\n        return True\n    else:\n        return False\n        \ndef number_year_month_number(year, month):\n    '''\n    Write a function to find the year, month, and number of the given year, month, \n    and return the corresponding year, month, and number.\n    '''\n    if not isinstance(year, int) or not isinstance(month, int):\n        return (None, None, None)\n    \n    if not (isinstance(month, int) and month in range(1, 13)):\n        return (None, None, None)\n    \n    if not isinstance(year, int):\n        return (None, None, None)\n    \n    if year % 4 == 0 and year % 100 == 0 and year % 400 == 0:\n        return (year, month, 0)\n    \n    return (year, month, 1)\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    check_day = True\n    if not monthnum2.isdigit():\n        return check_day\n    else:\n        if int(monthnum2) > 12:\n            check_day = False\n        else:\n            check_day = True\n    return check_day\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # create a list with 31 days as negative numbers\n    # positive numbers are 31 and negative numbers are not\n    month_list=range(-31,-28,-1)\n    if monthnum2 in month_list:\n        print(\"the month is positive\")\n    else:\n        print(\"the month is negative\")\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 % 3) == 0:\n        if monthnum2 > 31:\n            print(\"It's a weekday.\")\n        else:\n            print(\"It's a weekend.\")\n    else:\n        print(\"It's not a weekday.\")\n        \ndef check_number_1(number):\n    '''\n    Write a function to check whether the given number is a Leap Year or not.\n    '''\n    if (number % 4) == 0:\n        if number % 100!= 0:\n            if number % 400 == 0:\n                print(\"{0} is a Leap Year.\".format(number))\n            else:\n                print(\"{0} is not a Leap Year.\".format(number))\n        else:\n            print(\"{0} is a Leap Year.\".format(number))\n    else:\n        print(\"{0} is not a Leap Year.\".format(number))\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 < 1 or monthnum2 > 12):\n        return False\n    elif(monthnum2 == 1):\n        if(monthnum2 == 2 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 3):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 4):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 5):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 6):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 7):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 8):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 9):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 10):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 11):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 2):\n        if(monthnum2 == 3 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 4):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 5):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 6):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 7):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 8):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 9):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 10):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 11):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 3):\n        if(monthnum2 == 4 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 5):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 6):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 7):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 8):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 9):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 10):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 11):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 4):\n        if(monthnum2 == 5 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 6):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 7):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 8):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 9):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 10):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 11):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 5):\n        if(monthnum2 == 6 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 7):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 8):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 9):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 10):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 11):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 6):\n        if(monthnum2 == 7 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 8):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 9):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 10):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 11):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 7):\n        if(monthnum2 == 8 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 9):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 10):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 11):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 8):\n        if(monthnum2 == 9 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 10):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 11):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 9):\n        if(monthnum2 == 10 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 11):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 10):\n        if(monthnum2 == 11 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 12):\n            return calendar.isleap(datetime.datetime.now().year)\n        else:\n            return False\n    elif(monthnum2 == 11):\n        if(monthnum2 == 12 and calendar.isleap(datetime.datetime.now().year)):\n            return False\n        elif(monthnum2 == 1):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 2):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 3):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum2 == 4):\n            return calendar.isleap(datetime.datetime.now().year)\n        elif(monthnum"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        for j in range(len(stringlist[i])):\n            stringlist[i][j], stringlist[i][-j-1] = stringlist[i][-j-1], stringlist[i][j]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        temp = stringlist[i]\n        stringlist[i] = stringlist[len(stringlist)-1-i]\n        stringlist[len(stringlist)-1-i] = temp\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_str_list = []\n    \n    for s in stringlist:\n        reverse_str_list.append(s[::-1])\n    \n    return reverse_str_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    #using a var to store the string\n    curr_str = ''\n    \n    #the size of the list\n    list_len = len(stringlist)\n    \n    for i in range(list_len):\n        curr_str += stringlist[i]\n        \n    #the list containing the reversed strings\n    reverse_list = []\n    \n    for i in range(list_len):\n        reverse_list.append(curr_str[i:list_len-i])\n    \n    return reverse_list\n    \n    \n    \nif __name__ == '__main__':\n    solution_list = [1, 2, 3, 4, 5]\n    print(reverse_string_list(solution_list))"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist_reversed = []\n    for x in stringlist:\n        stringlist_reversed.append(x[::-1])\n    return stringlist_reversed\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    lst = []\n    for x in stringlist:\n        lst.append(x[::-1])\n    return lst\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.sort(key=len)\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if(len(lst) <= 1): \n        return lst \n    else: \n        return Find_Min(lst[1:])\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = lst[0]\n    lst_min = []\n    for element in lst:\n        if element < minimum:\n            minimum = element\n            lst_min.append(minimum)\n    return lst_min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = 0\n    for i in range(0, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    print(min)\ndef Find_Max(lst):\n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    max = 0\n    for i in range(0, len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    print(max)\ndef Read_Lists(file):\n    '''\n    Read the file and return a list of lists.\n    '''\n    lst = []\n    f = open(file)\n    for line in f:\n        lst.append(line.split())\n    return lst\ndef Find_Longest_Sublist(lst):\n    '''\n    Write a python function that reads the file lst and return the longest sublist.\n    '''\n    lst.sort()\n    length = 0\n    for i in range(len(lst)):\n        if lst[i][1] > length:\n            length = lst[i][1]\n    return length\ndef Read_Frequency_Dict(file):\n    '''\n    Read the file and return a dictionary of counts of occurences of each word.\n    '''\n    f = open(file)\n    return_dict = {}\n    for line in f:\n        word = line.split()\n        return_dict[word[0]] = int(word[1])\n    return return_dict\ndef Write_Frequency_Dict(lst, file):\n    '''\n    Write a python function that takes a dictionary and write a file as follows:\n    word:frequency\n    '''\n    f = open(file, 'w')\n    for i in lst:\n        f.write(i[0] + \":\" + str(i[1]) + '\\n')\n    f.close()\ndef Search_File(lst, file):\n    '''\n    Write a python function that reads a text file and return the list of words in the file.\n    '''\n    f = open(file)\n    return_lst = []\n    for line in f:\n        word = line.split()\n        return_lst.append(word)\n    return return_lst\ndef Read_File(file):\n    '''\n    Read a file and return a list of words.\n    '''\n    lst = []\n    f = open(file)\n    for line in f:\n        word = line.split()\n        lst.append(word)\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0] \n    for i in lst[1:]: \n        if i < min_length: \n            min_length = i\n    return min_length \n  \n  \ndef main(): \n    print(\"Find Minimum in the List:\") \n    print(\"Enter number of elements to be searched: \") \n    num = int(input()) \n  \n    arr = [int(x) for x in input().split()] \n  \n    print(\"The list is: \") \n    print(arr) \n  \n    result = Find_Min(arr) \n  \n    if result!= None: \n        print(\"Sublist with minimum length:\") \n        print(result) \n    else: \n        print(\"The list is empty\") \n  \nif __name__ == \"__main__\": \n    main() "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    x = []\n    for i in range(len(lst)): \n        x.append(lst[i])\n    return x\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_list = []\n    for i in range(len(lst)):\n        if(len(lst[i]) == 1):\n            sub_list.append(lst[i])\n        else:\n            minimum = min(lst[i])\n            for k in range(len(lst[i])):\n                if(lst[i][k] == minimum):\n                    sub_list.append(lst[i][k])\n    return sub_list\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in lst:\n        if lst.count(i) > 1:\n            return i\n    return None\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    def find_min(lst):\n        minimum = lst[0]\n        for i in range(len(lst)):\n            if lst[i] < minimum:\n                minimum = lst[i]\n        return minimum\n    return find_min(lst)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"What is the area of your rectangle?\")\n    print(l,\"x\",b,\"=\",l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    \n    #Get the width and length of the rectangle\n    width = l\n    length = b\n    \n    #Calculate the area\n    area = width * length\n    \n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (a+b+c) * 0.5\n    return area\ndef main():\n    print(\"Create a Rectangle\")\n    r = rectangle_area(5,3)\n    print(\"The area of a rectangle is\",r)\n    print(\"Create a Triangle\")\n    t = triangle_area(5,6,5)\n    print(\"The area of a triangle is\",t)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #In the example below, the area of the rectangle is 3.0.\n    #In the program, the return value is 3.0.\n    #Remember, we have used the method.__str__() for the output.\n    print(\"The area of the rectangle is {:.2f}\".format(l * b))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower().replace(' ', '').replace('  ','').replace('  ','').replace('  ', '').replace(':', '').replace('.', '').replace('!', '').replace('?', '').replace('!', '')\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = []\n    for char in str1:\n        if char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return \"\".join(result)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('','',string.punctuation))\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    try:\n        new_string = ''\n        # for char in str1:\n        #     if char.isupper():\n        #         new_string += char.lower()\n        #     else:\n        #         new_string += char\n        # print(new_string)\n        for i in range(len(str1)):\n            if str1[i].isupper():\n                new_string += str1[i].lower()\n            else:\n                new_string += str1[i]\n        print(new_string)\n        return new_string\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans({' ': '', '!': '', '?': '', '\\'': '', '\"': '',\n        ':': '', ';': '', ')': '', '(': '', ')': '', ')': '', '(': '', ')': '', ']': '',\n        '[': '', ']': '', '<': '', '=': '', '>': '', '&': '', '.': '', '|': '',\n        '\\n': '', '\\t': '', '\\r': '', '\\b': ''}))\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(\"[^a-z]\", \" \", str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str(str1)\n    \n    if len(str2) >= 1:\n        if str2[0] == \" \":\n            return str1\n        else:\n            str2 = str2.split(\" \")\n            return \" \".join(str2)\n    else:\n        return str1\n        \ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str(str1)\n    \n    if len(str2) >= 1:\n        if str2[0] == \" \":\n            return str1\n        else:\n            str2 = str2.split(\" \")\n            return \" \".join(str2)\n    else:\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if len(str1) < 5:\n        return str1\n    elif str1[0] == str1[-1]:\n        return str1[0:-1]\n    else:\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.strip()\n    return ''.join(e for e in str2 if e.isupper())\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('','', string.punctuation))\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = \"\"\n    for lst1 in lst: \n        res += str(lst1[0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0][0] \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    x=0\n    for i in lst:\n        x=i.pop(0)\n    return x\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # implement the logic here\n    # e.g. [1,2,3,4,5,6,7,8]\n    for i in range(len(lst)):\n        print(lst[i][0])\n        \n    return\n    \n        \nif __name__ == '__main__':\n    lst = [[1,2,3,4,5,6,7,8],[2,3,4,5,6,7,8,9]]\n    Extract(lst"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    dic = {}\n    lst = [dic]\n    for i in range(len(lst)):\n        dic = lst[i]\n        dic[\"Element\"] = i+1\n    return lst\n    \ndef Output(lst):\n    '''\n    Write a python function to print all elements in a list.\n    '''\n    for i in range(len(lst)):\n        print(lst[i][\"Element\"])\n        \ndef Print(lst):\n    '''\n    Write a python function to print all elements in a list.\n    '''\n    for i in range(len(lst)):\n        print(lst[i][\"Element\"])\n        \n        \n        \n        \n    \n    "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    pass\ndef InsertionSort(lst):\n    '''\n    Write a python function to sort the given list in-place.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        for i in range(0,len(sublist)): \n            print(sublist[i])\n    \nif __name__=='__main__': \n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n    Extract(lst) "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if i == 0:\n            temp = lst[0]\n        else:\n            temp = lst[i][0]\n        print(temp)\n    print(\"Finished\")\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    num_list = []\n    for x in lst:\n        num_list.append(x[0])\n    return num_list\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str.upper())\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # define count and char variable\n    count = 0\n    char = ''\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    u = 0\n    for i in str:\n        if i.isupper():\n            u+=1\n    return u\n    \n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    for char in str:\n        if char.isupper():\n            print(char.upper(), end ='')\n        else:\n            print(char, end ='')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result = 0\n    if not str:\n        raise ValueError('str argument cannot be empty')\n    for c in str:\n        if c.isupper():\n            result += 1\n    return result\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if str == None:\n        return 0\n    elif str == '':\n        return 0\n    else:\n        return len(str.upper())\n    \n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    print(str.upper())\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_c = 0\n    for i in range(len(str)):\n        if(str[i].isupper()):\n            upper_c += 1\n    return upper_c\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    # Loop through each char in the string\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # get the length of the list\n    length = len(list1)\n    \n    # define empty list\n    combinations = []\n    \n    # find the first element of the list\n    first = list1[0]\n    \n    # perform a for loop\n    for i in range(0, length):\n        # append that element to the list\n        combinations.append(first)\n        # move to the next element\n        first = list1[i]\n    \n    # append the last element of the list\n    combinations.append(first)\n    \n    # return the list\n    return combinations\n    \n    \n    \ndef is_subset(array, subset):\n    '''\n    Write a function to check if an array is a subset of another array.\n    '''\n    # get the length of the array\n    length = len(array)\n    \n    # define empty array\n    subset_array = []\n    \n    # if the array is empty\n    if length == 0:\n        # return False\n        return False\n    \n    # define a for loop\n    for i in range(0, length):\n        \n        # check each element of the array\n        for j in range(0, length):\n            \n            # if array[j] is in the subset\n            if array[j] == subset[i]:\n                # append the element to the array\n                subset_array.append(array[j])\n    \n    # return True\n    return subset_array\n    \n    \n    \n    \ndef find_common_subset(array, subset):\n    '''\n    Write a function to find the common subset of an array.\n    '''\n    # get the length of the array\n    length = len(array)\n    \n    # define empty array\n    common_subset = []\n    \n    # if the array is empty\n    if length == 0:\n        # return False\n        return False\n    \n    # get the length of the first element\n    first = array[0]\n    \n    # find the first element of the array\n    for i in range(0, length):\n        # check if first element of the array is in the subset\n        if array[i] == first:\n            # if array[i] is in the subset\n            if i == 0:\n                # append the first element of the array\n                common_subset.append(first)\n            \n            # if array[i] is in the subset\n            elif array[i] == subset[0]:\n                # if array[i] is in the subset\n                if i == 1:\n                    # append the first element of the array\n                    common_subset.append(first)\n                    # append the first element of the array\n                    first = array[i]\n                # if array[i] is in the subset\n                elif array[i] == subset[1]:\n                    # append the first element of the array\n                    common_subset.append(first)\n                    # append the first element of the array\n                    first = array[i]\n    \n    # return common subset\n    return common_subset\n    \n    \n    \ndef solution(A):\n    '''\n    Find all combinations of a given list of numbers, which sum to a given number.\n    '''\n    \n    # get the length of the array\n    length = len(A)\n    \n    # get the length of the first element\n    first = A[0]\n    \n    # get the length of the second element\n    second = A[1]\n    \n    # get the length of the common subset\n    common_subset = find_common_subset(A, [first, second])\n    \n    # get the length of the common subset\n    common_subset_length = len(common_subset)\n    \n    # get the list of combinations\n    combinations = combinations_list(A)\n    \n    # return the length of the list of combinations\n    return len(combinations) - common_subset_length\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # append the empty list into the end\n    list2 = list1.copy()\n    list2.append([])\n    list2.append([])\n    # iterate through all the elements in the list\n    for i in range(len(list2) - 1):\n        # append the combined element to the end\n        list2[i].extend(list2[i + 1])\n        # remove the last element from the list\n        list2[i] = list2[i][:-1]\n        # remove the last element from the list\n        list2[i + 1] = list2[i][:-1]\n    # find all the combinations\n    list_combinations = []\n    for i in list2:\n        list_combinations.append(list(itertools.combinations(i, 2)))\n    return list_combinations\n    \n    \ndef combinations_dict(d):\n    '''\n    Write a function to find all possible combinations of a given dictionary.\n    '''\n    # get the size of the dictionary\n    num_keys = len(d.keys())\n    # make a list of all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(i)\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(d[i])\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(d[i]))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set(d[i])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set.intersection(*[set(d[i]) for i in d[i]])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set.intersection(*[set(d[i]) for i in set(d[i])])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(set(d[i]))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(set(d[i]))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set.union(*[set(d[i]) for i in d[i]])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set.union(*[set(d[i]) for i in d[i]])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set.intersection(*[set(d[i]) for i in set(d[i])])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set.intersection(*[set(d[i]) for i in set(set(d[i]))])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set.union(*[set(d[i]) for i in set(set(d[i]))])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set.union(*[set(d[i]) for i in d[i]])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n            list_combinations.append([])\n        # add the key and the values to the list\n        elif i in d.keys():\n            list_combinations[i - 1].append(list(set.union(*[set(d[i]) for i in set(set(d[i]))])))\n    # find all the combinations\n    list_combinations = []\n    for i in range(1, num_keys + 1):\n        # if the key is not present in the dictionary\n        if i not in d.keys():\n        "
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    def combination(array, length):\n        '''\n        function that takes the array as parameter and gives the length of the list\n        '''\n        if length == 1:\n            result.append(array[:])\n        else:\n            if array!= None:\n                for i in range(0, len(array) - length + 1):\n                    combination(array[i + 1:], length - 1)\n    combination(list1, len(list1))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==1:\n        return list1\n    else:\n        combs_lst = []\n        # for i in range(1, len(list1) + 1):\n        #     for j in combinations(list1, i):\n        #         combs_lst.append(j)\n        # return combs_lst\n        for i in combinations_with_replacement(list1, len(list1)):\n            combs_lst.append(i)\n        return combs_lst\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result=[]\n    for i in range(len(list1)):\n        for j in itertools.combinations(list1,i):\n            result.append(j)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    list1.sort()\n    combs = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            combs.append([list1[i],list1[j]])\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_combos=[]\n    if type(list1)!=list:\n        raise TypeError(\"list is not list\")\n    for i in range(len(list1)):\n        for j in range(len(list1)-i-1):\n            if list1[i]!=list1[j+1]:\n                list_combos.append([list1[i],list1[j+1]])\n    return list_combos\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    list1.sort()\n    combo = []\n    for l in list1:\n        for c in combinations_list(list1):\n            combo.append([l] + c)\n    return combo\n    \ndef combinations_to_list(combo):\n    '''\n    Write a function to convert a list of lists into a new list of lists.\n    '''\n    if len(combo) == 0:\n        return []\n    else:\n        return [list(i) for i in list(itertools.product(*combo))]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if type(list1) is not list:\n        return None\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1[0]]\n    ans = []\n    for i in range(len(list1)):\n        for x in combinations_list(list1[:i]+list1[i+1:]):\n            ans.append(list1[:i]+list1[i]+x)\n    return ans\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1[0]]\n    else:\n        comb = list(itertools.combinations(list1,2))\n        comb.append([list1[0],list1[1]])\n        return comb\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # If the array is empty, then return None\n    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    ans = []\n    n = len(arr)\n    product = 1\n    for i in range(0, n):\n        for j in range(i, n):\n            product *= arr[j]\n            ans.append(product)\n    \n    return max(ans)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # If there are only 1 element in the array then return the array\n    if len(arr) == 1:\n        return arr[0]\n    # If there are only 2 elements in the array then return the subarray of the other one\n    elif len(arr) == 2:\n        return arr[0] * arr[1]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_sum = -1\n    left_max_sum = -1\n    for i in range(n):\n        left_max_sum = max(left_max_sum + arr[i], arr[i])\n        max_sum = max(max_sum, left_max_sum)\n    return max_sum\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_subarray_size = 0\n    max_subarray_product = 0\n    \n    # Now we go through each element and add it up.\n    for i in range(len(arr)):\n        max_subarray_size += arr[i]\n        if i == 0:\n            max_subarray_product = arr[i]\n        else:\n            if max_subarray_size >= max_subarray_product:\n                max_subarray_product = arr[i]\n                \n    return max_subarray_product"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    i = 0\n    j = 0\n    max_product = 0\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        while j<len(arr) and product > arr[j]:\n            product /= arr[j]\n            j+=1\n        if product > max_product:\n            max_product = product\n            i = j\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 1:\n        return -1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    sub_array = [1 for i in range(len(arr))]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # find the start and end indexes of the array\n    start, end = 0, 0\n    max_subarray = 1\n    for i in range(len(arr)):\n        # find the index of the max element\n        while arr[i] > arr[start] and end < i:\n            start += 1\n        # if the max element in the current row is larger than the max element in the previous row\n        if arr[i] > arr[start] and arr[start] > arr[i]:\n            # the max element in the current row is now greater than the max element in the previous row\n            max_subarray = max(max_subarray, arr[i] * (i - start + 1))\n            # update the end index of the current row\n            end = i\n    # return the product of the current subarray\n    return max_subarra"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    n = len(arr)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values_list = dict.values()\n    for value in values_list:\n        if type(value)!= dict:\n            return False\n        for key in value:\n            if value[key]!= n:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not dict:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if dict[i]!= dict[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        for key in dict:\n            if dict[key]!= key:\n                print(f'Key {key} does not match in dict {dict[key]}')\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if (dict[i]!= dict[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[key] == n for key in dict)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k,v in dict.items():\n        if isinstance(v, (list, dict)):\n            if len(dict[k])!= len(v):\n                raise ValueError('The dictionary contains duplicate keys')\n        else:\n            if dict[k]!= v:\n                raise ValueError('The dictionary contains duplicate keys')\n    return dic"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k in dict:\n        if dict[k]!= k:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not isinstance(n, dict):\n        return 'Invalid Input'\n    for i in n.values():\n        if i!= n[i]:\n            return 'Invalid Input'\n    for i in n:\n        if not n[i] == i:\n            return 'Invalid Input'\n    return 'Valid'\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Start with an empty dictionary\n    dictionary = dict()\n    \n    # Check if the number of key in dictionary is equal to number of value\n    if n > len(dictionary):\n        return True\n        \n    # For each value, check if that value is equal to the key value\n    # Return True if both conditions are met\n    for key, value in dictionary.items():\n        if value!= key:\n            return False\n    \n    # Return True if all values are equal to key\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    try:\n        dict1.popitem()\n    except KeyError:\n        pass\n    \n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if dict1[item] == []:\n            del dict1[item]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1 == None or len(dict1) == 0:\n        return None\n    \n    elif isinstance(dict1, dict):\n        return {k:v for k, v in dict1.items() if v!= None and v!= ''}\n        \n    else:\n        return dict1\n        \ndef get_good_tuple(dict1, key):\n    '''\n    Write a function to return a given key value pair of a given dictionary.\n    '''\n    if dict1 == None or len(dict1) == 0:\n        return None\n    \n    elif isinstance(dict1, dict):\n        return {k:v for k, v in dict1.items() if k == key}\n        \n    else:\n        return dict1[key]\n        \ndef get_formatted_tuple(tuple1):\n    '''\n    Write a function to return a formatted string of a given tuple.\n    '''\n    formatted_tuple = ''\n    if tuple1 == None or len(tuple1) == 0:\n        return None\n    \n    elif isinstance(tuple1, tuple):\n        return tuple1.__str__()\n        \n    else:\n        return tuple1\n        \ndef get_first_element_of_tuple(tuple1):\n    '''\n    Write a function to return the first element of a given tuple.\n    '''\n    return tuple1[0]\n    \ndef get_last_element_of_tuple(tuple1):\n    '''\n    Write a function to return the last element of a given tuple.\n    '''\n    return tuple1[len(tuple1)-1]\n    \ndef get_length_of_tuple(tuple1):\n    '''\n    Write a function to return the number of elements in a given tuple.\n    '''\n    return len(tuple1)\n    \ndef get_min_and_max(tuple1):\n    '''\n    Write a function to return the minimum and maximum values in a given tuple.\n    '''\n    return tuple1[0], tuple1[len(tuple1)-1]\n    \ndef get_tuple_as_list(tuple1):\n    '''\n    Write a function to return a tuple as a list of strings.\n    '''\n    return tuple1.__str__().split('\\n')\n    \ndef get_index_of_element(tuple1, element):\n    '''\n    Write a function to return the index of a given element in a tuple.\n    '''\n    return tuple1.index(element)\n    \ndef get_index_of_tuple(tuple1, element):\n    '''\n    Write a function to return the index of a given element in a tuple.\n    '''\n    return tuple1.index(element)\n    \ndef get_previous_and_next_tuple(tuple1):\n    '''\n    Write a function to return the index of the element and the index of the next tuple.\n    '''\n    previous = tuple1[0]\n    next = tuple1[1]\n    \n    return previous, next\n    \ndef get_first_occurrence_of_element(tuple1, element):\n    '''\n    Write a function to return the first occurrence of a given element in a tuple.\n    '''\n    return tuple1.count(element)\n    \ndef get_last_occurrence_of_element(tuple1, element):\n    '''\n    Write a function to return the last occurrence of a given element in a tuple.\n    '''\n    return tuple1.count(element)\n    \ndef get_occurrences(tuple1, element):\n    '''\n    Write a function to return the number of occurrences of a given element in a tuple.\n    '''\n    return tuple1.count(element)\n    \ndef get_occurrences_of_tuple(tuple1, element):\n    '''\n    Write a function to return the number of occurrences of a given element in a tuple.\n    '''\n    return tuple1.count(element)\n    \ndef get_sort_order_of_tuple(tuple1):\n    '''\n    Write a function to return the sort order of a given tuple.\n    '''\n    return tuple1.index(tuple1[0])\n    \ndef get_dictionary_of_tuple(tuple1):\n    '''\n    Write a function to return the dictionary of a given tuple.\n    '''\n    return tuple1\n    \ndef remove_duplicate(list1):\n    '''\n    Write a function to remove duplicate elements from a given list.\n    '''\n    return list1.sort()\n    \ndef calculate_average(list1):\n    '''\n    Write a function to calculate the average value of a given list.\n    '''\n    return sum(list1)/len(list1)\n    \ndef remove_tuple(tuple1):\n    '''\n    Write a function to remove a tuple.\n    '''\n    return tuple1[1:]\n    \ndef check_unique_element(tuple1):\n    '''\n    Write a function to check if a tuple contains only one element.\n    '''\n    if tuple1 == tuple1:\n        return True\n    return False\n    \ndef verify_comparison_operator(tuple1, tuple2):\n    '''\n    Write a function to verify if two tuples are equal.\n    '''\n    if tuple1 == tuple2:\n        return True\n    return False\n    \ndef verify_not_comparison_operator(tuple1, tuple2):\n    '''\n    Write a function to verify if two tuples are not equal.\n    '''\n    if tuple1 == tuple2:\n        return False\n    return True\n    \ndef verify_tuple_string(tuple1):\n    '''\n    Write a function to verify if two tuples are of a given string.\n    '''\n    if tuple1.count(' ') == tuple1.count(':'):\n        return True\n    return False\n    \ndef verify_not_tuple_string(tuple1):\n    '''\n    Write a function to verify if two tuples are of a given string.\n    '''\n    if tuple1.count(':') == tuple1.count(' '):\n        return False\n    return True\n    \ndef verify_tuple_string_after_comparison_operator(tuple1, tuple2):\n    '''\n    Write a function to verify if two tuples are of a given string.\n    '''\n    if tuple1.count(' ') == tuple1.count(':'):\n        if tuple1.count(':') == tuple1.count(':') and tuple1.count(':') == tuple1.count(':'):\n            return True\n    return False\n    \ndef verify_tuple_string_before_comparison_operator(tuple1, tuple2):\n    '''\n    Write a function to verify if two tuples are of a given string.\n    '''\n    if tuple1.count(':') == tuple1.count(':') and tuple1.count(':') == tuple1.count(':'):\n        return True\n    return False\n    \ndef verify_tuple_string_before_comparison_operator_2(tuple1, tuple2):\n    '''\n    Write a function to verify if two tuples are of a given string.\n    '''\n    if tuple1.count(':') == tuple1.count(':') and tuple1.count(':') == tuple1.count(':'):\n        return False\n    return True\n    \ndef verify_tuple_string_after_comparison_operator_2(tuple1, tuple2):\n    '''\n    Write a function to verify if two tuples are of a given string.\n    '''\n    if tuple1.count(':') == tuple1.count(':') and tuple1.count(':') == tuple1.count(':'):\n        return True\n    return False\n    \ndef verify_not_tuple_string_after_comparison_operator_2(tuple1, tuple2):\n    '''\n    Write a function to verify if two tuples are of a given string.\n    '''\n    if tuple1.count(':') == tuple1.count(':') and tuple1.count(':') == tuple1.count(':'):\n        return False\n    return True\n    \ndef verify_not_tuple_string_before_compariso"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict_1 = dict(dict1)\n    for x in dict_1:\n        if dict_1[x] == '':\n            del dict_1[x]\n    return dict_1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v == '':\n            dict1.pop(k)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1 == {}:\n        pass\n    else:\n        dict1.pop('', None)\n        return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    d = {}\n    for key in dict1:\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = dict()\n    for item in dict1.items():\n        if not item[1]:\n            new_dict[item[0]] = ''\n        else:\n            new_dict[item[0]] = item[1]\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if len(v) == 0}\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value == \"\":\n            new_dict.update({key: \"\"})\n        else:\n            new_dict.update({key: value})\n    return new_dict\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    for i in range(1, len(arr)):\n        for j in range(i-1, -1, -1):\n            temp = arr[i]*arr[j]\n            if temp > max_product:\n                max_product = temp\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    sum = 0\n    for i in range(len(arr)-1):\n        sum += arr[i]\n    max = arr[0]*arr[1]*arr[2]\n    for i in range(3,len(arr)):\n        sum = max\n        max = max * arr[i]\n    return sum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product=[]\n    \n    n=len(arr)\n    \n    # code here\n    for i in range(n-1):\n        for j in range(i+1,n):\n            prod=arr[i]*arr[j]\n            max_product.append(prod)\n    \n    return max(max_product)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        result = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                result = arr[i]\n            else:\n                result = arr[i-1] + result\n        return result \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maximum = arr[0] * arr[1]\n    \n    for i in range(1, len(arr)):\n        current = arr[i] * arr[i-1]\n        if current > maximum:\n            maximum = current\n        \n    return maximum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    product = arr[0]\n    current_product = arr[0]\n    for num in arr[1:]:\n        current_product *= num\n        product = max(product, current_product)\n    \n    return product\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    len_of_arr = len(arr)\n    max_product = arr[0]\n    for i in range(len_of_arr):\n        for j in range(i, len_of_arr):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maxProduct = arr[0] * arr[1] * arr[2]\n    for i in range(3, len(arr)):\n        maxProduct = max(maxProduct, arr[i] * arr[i-1] * arr[i-2])\n    return maxProduct\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr_sorted = []\n    arr.sort()\n    for i in arr:\n        arr_sorted.append(i)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    #Create a new tuple of all elements of the two tuples.\n    #Since we want to find the sum, we will use the sum of the two tuples\n    newTup = ()\n    \n    for i in range(len(test_tup)):\n        newTup += (test_tup[i], test_tup[i+1])\n    \n    return newTup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result = result + test_tup[i]\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    from itertools import combinations\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    #solutions for the implementation of this method\n    answer = (0,0)\n    def neighbour(element,element_index):\n        '''\n        Generate the tuple that contains the two elements in the given index\n        '''\n        return (element[0] + element[1],element[1] + element[0])\n    \n    #adding the value of the tuple to the solution tuple\n    def add(tuple):\n        if len(tuple)==2:\n            answer = tuple[0] + tuple[1]\n        else:\n            answer = tuple[0] + tuple[1] + tuple[2]\n        return answer\n    \n    #generating the tuple of neighboring elements\n    def add_neighbor(tuple):\n        '''\n        Generate the tuple that contains the two elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2]\n    \n    #adding the value of the tuple to the solution tuple\n    def add_neighbor(tuple):\n        '''\n        Generate the tuple that contains the two elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9] + tuple[10]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9] + tuple[10] + tuple[11]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9] + tuple[10] + tuple[11] + tuple[12]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9] + tuple[10] + tuple[11] + tuple[12] + tuple[13]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9] + tuple[10] + tuple[11] + tuple[12] + tuple[13] + tuple[14]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9] + tuple[10] + tuple[11] + tuple[12] + tuple[13] + tuple[14] + tuple[15]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9] + tuple[10] + tuple[11] + tuple[12] + tuple[13] + tuple[14] + tuple[15] + tuple[16]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9] + tuple[10] + tuple[11] + tuple[12] + tuple[13] + tuple[14] + tuple[15] + tuple[16] + tuple[17]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] + tuple[6] + tuple[7] + tuple[8] + tuple[9] + tuple[10] + tuple[11] + tuple[12] + tuple[13] + tuple[14] + tuple[15] + tuple[16] + tuple[17] + tuple[18]\n    \n    #generating the tuple of the two adjacent elements\n    def add_adjacent(tuple):\n        '''\n        Generate the tuple that contains the two adjacent elements in the given index\n        '''\n        return tuple[0] "
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x,y = test_tup\n    if y - x == 1:\n        x,y = y,x\n    return (x,y)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Compute the differences\n    diff = [test_tup[i] - test_tup[i+1] for i in range(len(test_tup)-1)]\n    diff.sort()\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # add element from right to left\n    # compare the elements\n    return tuple(sorted((test_tup[i] + test_tup[i+1], test_tup[i], test_tup[i+1])))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError('tuple is not a tuple')\n    for i, j in test_tup:\n        if i is not None and j is not None:\n            yield (i, j)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(1, len(test_tup)):\n        res.append((test_tup[i-1], test_tup[i]))\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # base case\n    if n==0:\n        return 1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    m=1\n    for i in range(n): \n        m=m*arr[i] \n    return m % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Return if the array is empty or if modulo is zero\n    if arr == [] or len(arr) <= 0:\n        return None\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #Find the product of the array by the multiplication of the product of the array by the product of the array by the multiplication of the product of the array by the product of the array by the multiplication of the product of the array by the product of the array by the multiplication of the product of the array by the product of the array by the multiplication of the product of the array by the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the array by the multiplication of the product of the arra"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    for i in range(n): \n        arr[i] = arr[i] * arr[i]\n    return arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod_n = n%2\n    if mod_n == 0:\n        return 1\n    else:\n        return arr[len(arr)-1]\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    x = 1\n    res = 1\n    \n    while x * x <= n:\n        x *= 2\n        res += x\n    \n    return res\n    \n    \n    "
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # all the elements of arr\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # multiplying all the elements to arr[j] and adding it to the result\n            arr[i] *= arr[j]\n    \n    # calculating the remainder\n    result = 1\n    for i in range(n):\n        result = result * arr[i]\n    \n    # returning the result\n    return result\n    \n    \n    \ndef find_remainder2(arr, n):\n    \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # all the elements of arr\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # multiplying all the elements to arr[j] and adding it to the result\n            arr[i] *= arr[j]\n    \n    # calculating the remainder\n    result = 1\n    for i in range(n):\n        result = result * arr[i]\n    \n    # returning the result\n    return result\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # get the index of the first element \n    # in array \n    start = arr.index(1)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if n == 0:\n        return 0\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)): \n        if l[i] - l[i-1] == 1: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i] - l[i-1] == i-1 for i in range(1, len(l)))\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    # check condition\n    l.remove(0)\n    if len(l) == 1:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return False\n    if l[0] == l[1]:\n        return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    #get a set \n    arr = set(l)\n    #initialise result to 0 \n    count = 0\n    #loop over list \n    for x in l: \n        if x in arr: \n            count += 1\n    # if array contains consecutive numbers return true \n    if count > 1: \n        return True\n    return False \n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    def consecutive_nums(l):\n        '''\n        Write a python function to check whether the given list contains consecutive numbers or not.\n        '''\n        for i in range(len(l)-1):\n            if l[i]!= l[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    \n    else:\n        # Add the numbers from the list \n        add = 0\n        for i in l:\n            add = add + i\n        if add % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count = count + 1\n    if count == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        if l[0] == l[1]:\n            return 0\n        else:\n            return 1\n    elif n == 2:\n        if l[0] == l[1] and l[1] == l[2]:\n            return 0\n        else:\n            return 1\n    elif n == 3:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3]:\n            return 0\n        else:\n            return 1\n    else:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4]:\n            return 0\n        else:\n            return 1\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = l + l\n    s = 0\n    for i in l:\n        if i % 10 == 0:\n            s += 1\n    if s == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersected_tuple = ()\n    for element in test_list1:\n        if element in test_list2:\n            intersected_tuple = intersected_tuple + (element,)\n    return intersected_tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    res = []\n    for i in range(0, len(test_list1)):\n        if test_list1[i] in test_list2:\n            res.append(test_list1[i])\n    return res\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = ()\n    for i in range(len(test_list1)):\n        if i in test_list2:\n            result = result + (test_list1[i])\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #create a list to store the intersection\n    intersection_list = []\n    #loop through each element in list1\n    for element in test_list1:\n        #loop through each element in list2\n        for element in test_list2:\n            #if element is in list1\n            if element in test_list1:\n                #add element to intersection_list\n                intersection_list.append(element)\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = list()\n    for value in test_list1:\n        if value in test_list2:\n            tuple_list.append(value)\n    return tuple_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return test_list1[0]\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect = []\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    for item in test_list1:\n        if item in test_list2:\n            intersect.append(item)\n    return intersect\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    if len(test_list1) <= len(test_list2):\n        for i in range(0, len(test_list2)):\n            if test_list2[i] in test_list1:\n                intersection = intersection + (test_list1[i])\n    else:\n        for i in range(0, len(test_list1)):\n            if test_list1[i] in test_list2:\n                intersection = intersection + (test_list2[i])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    i = 0\n    while i < len(test_list1):\n        if test_list1[i]!= test_list2[i]:\n            if test_list1[i] in test_list2:\n                print(\"The intersection of the tuple is: \")\n                print(test_list1[i])\n                i = len(test_list1)\n            else:\n                i = i + 1\n        else:\n            i = i + 1\n    return\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # no tuples are in the list, return an empty tuple\n    if len(test_list1)!= len(test_list2):\n        return ()\n        \n    # creates a dictionary of all the element in the list. \n    # for each element in the list, adds it to the dictionary of the corresponding element in the list\n    # if the element is not in the dictionary, then it is appended to the list.\n    # if the element is in the dictionary, then it is added to the dictionary and the intersection is returned\n    intersection_dictionary = {}\n    for element in test_list1:\n        if element in intersection_dictionary:\n            intersection_dictionary[element] += 1\n        else:\n            intersection_dictionary[element] = 1\n    \n    # creates a new list with the intersection\n    intersection_list = []\n    for element in intersection_dictionary:\n        if intersection_dictionary[element] == 1:\n            intersection_list.append(element)\n            \n    # print the intersection\n    print(\"The intersection is: \")\n    print(intersection_list)\n    \n    # return the intersection\n    return intersection_list\n    "
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= ch:\n            str2 += str1[i]\n    str2 += newch\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(0, len(str1)):\n        if str1[i] == ch:\n            str2 = str2 + newch\n        else:\n            str2 = str2 + str1[i]\n    return str2\n    \ndef test():\n    assert replace_char(\"qwerty\",\"q\", \"y\") == \"qqwqeyrty\"\n    assert replace_char(\"qwerty\",\"q\", \"\") == \"q\"\n    assert replace_char(\"qwerty\",\"z\", \"q\") == \"qzq\"\n    assert replace_char(\"qwerty\",\"z\", \" \") == \"q\"\n    assert replace_char(\"qwerty\",\"z\", \".\") == \"q\"\n    assert replace_char(\"qwerty\",\"z\", \"=\") == \"q\"\n    assert replace_char(\"qwerty\",\"z\", \"!\") == \"qzq\"\n    assert replace_char(\"qwerty\",\"z\", \"?\") == \"qzq\"\n    assert replace_char(\"qwerty\",\"z\", \".\") == \"qzq\"\n    assert replace_char(\"qwerty\",\"z\", \"*\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"@\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"`\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"~\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \":\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"#\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"%\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"$\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"&\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"*\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"\\u00B0\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"!\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"?\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \".\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"`\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"~\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \":\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"#\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"%\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"$\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"&\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"*\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"\\u00B0\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"!\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"?\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \".\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"`\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"~\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \":\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"!\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"?\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \".\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"`\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"~\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \":\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"#\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"%\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"$\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"&\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"*\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"\\u00B0\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"!\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"?\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \".\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"`\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"~\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \":\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"!\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"?\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \".\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"`\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"~\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \":\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"#\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"%\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"$\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"&\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"*\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"\\u00B0\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"!\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"?\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \".\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"`\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \"~\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \":\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\"z\", \";\") == \"qzqz\"\n    assert replace_char(\"qwerty\",\""
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str_replace = \"\"\n    if ch==' ':\n        str_replace = \"\"\n    elif ch in string.ascii_lowercase:\n        str_replace = str1.lower()\n    elif ch in string.ascii_uppercase:\n        str_replace = str1.upper()\n    elif ch in string.punctuation:\n        str_replace = str1.replace(ch,'')\n    return str_replace\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    l_str=[]\n    for i in range(0,len(str1)):\n        if str1[i].isalpha()==True:\n            l_str.append(str1[i].upper())\n        else:\n            l_str.append(str1[i].lower())\n    print(l_str)\n    print(l_str.index(ch))\n    str1=str1.replace(ch,newch)\n    return str1\nprint(replace_char(\"test\",\"T\",\"t\"))"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for c in str1:\n        if c!= ch:\n            newstr += newch\n        else:\n            newstr += c\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if type(newch) == type(''):\n        return str1.replace(ch,newch)\n    else:\n        return str1.replace(ch,newch)\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # First, declare a variable to hold the original string\n    original = str1\n    \n    # Second, declare a variable to hold the new character\n    new_char = newch\n    \n    # Replace the character with the new character\n    str1 = str1.replace(ch, new_char)\n    \n    # Return the modified string\n    return str1\n    \n    "
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda item: item[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict=dict()\n    for key,value in dict1.items():\n        new_dict[value] = key\n    sorted_dict = sorted(new_dict.items(),key=lambda item: item[0])\n    # print(sorted_dict)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {}\n    for item in dict1:\n        new_dict[item] = dict1[item]\n    for k, v in new_dict.items():\n        if v > 1:\n            print(k,v)\n            new_dict[k] = v\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    sorted_dict = dict(sorted_dict)\n    \n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    a=dict1.copy()\n    a = sorted(a.items(), key=lambda x: x[1])\n    return a\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_val_sorted = dict1.items()\n    dict_val_sorted.sort(key=lambda tup: tup[1])\n    return dict_val_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict()\n    for key in dict1:\n        sorted_dict[key] = dict1[key]\n    sorted_dict = sorted(sorted_dict.items(), key=lambda item: item[1])\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # [ ] Make sure the first item in the dictionary is the biggest one\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    # [ ] Insert the biggest items in the dictionary\n    # [ ] Sort the dictionary by the biggest items\n    # [ ] Return the sorted dictionary\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = {}\n    for k in dict1:\n        if dict1[k] in sort_dict:\n            sort_dict[dict1[k]].append(k)\n        else:\n            sort_dict[dict1[k]] = [k]\n    return sort_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    return max(nums[0], nums[1]) + min(nums[0], nums[1])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # get the max num\n    max_num = max(nums)\n    # get the min num\n    min_num = min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    arr = sorted(nums)\n    if len(arr) < 2:\n        return arr[0] + arr[1]\n    else:\n        if arr[-1] < arr[-2]:\n            return arr[-2] + arr[-1]\n        else:\n            return arr[-1] + arr[-2]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return nums.index(max(nums))+nums.index(min(nums))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if max_val < num:\n            max_val = num\n        if min_val > num:\n            min_val = num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] > nums[1]:\n        return nums[0]\n    return nums[1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Write your code here\n    return sorted([sum(nums), min(nums), max(nums)])\n    \n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_sum = -float('inf')\n    min_sum = float('inf')\n    for num in nums:\n        if num > max_sum:\n            max_sum = num\n        if num < min_sum:\n            min_sum = num\n    print(max_sum, min_sum)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Your code here\n    if string == \"\":\n        return string\n    else:\n        return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case_string = string.lower()\n    return lower_case_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #Write your code here\n    if type(string)!= str:\n        raise TypeError('string must be a string')\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string_lower = string.lower()\n    string_lower_list = string_lower.split()\n    string_lower_joined =''.join(string_lower_list)\n    return string_lower_joined\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.isupper():\n        return string.lower()\n    else:\n        return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string_lower = \"\"\n    for char in string:\n        string_lower += char.lower()\n    return string_lower\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Iterate through string and do the lowercase substring removal.\n    sub_list = []\n    for i in range(len(str1)):\n        if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            sub_list.append(str1[i])\n    # Remove all lowercase substrings from the list and return the string\n    return ''.join(sub_list).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert each letter to lower case\n    lst = [re.sub(r'[^a-zA-Z0-9]','', word).lower() for word in str1.split(' ')]\n    # return the word with no lowercase\n    return''.join(lst)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str1 = ''\n    for char in str1:\n        if char.islower():\n            new_str1 += char.lower()\n    return new_str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # ^ => Beginning of substring\n    # $ => End of substring\n    # [ ] => Single quote\n    # [^ ] => Not a quote\n    # [0-9] => Numbers\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    # [^0-9] => Not a number\n    "
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    def remove_lowercase_re(str1, replace_string, replace_dict):\n        '''\n        Remove lowercase substrings from a given string.\n        '''\n        start = 0\n        end = len(str1)\n        for i in range(len(str1)):\n            if str1[i] in replace_dict:\n                str1 = str1.replace(str1[i], replace_dict[str1[i]])\n            elif str1[i] in replace_dict:\n                end = i\n                break\n            else:\n                start += 1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lst = []\n    lst_3 = []\n    for i in range(len(str1)):\n        if(str1[i].islower()):\n            lst.append(str1[i])\n            lst_3.append(str1[i].lower())\n        elif(str1[i].isupper()):\n            lst.append(str1[i])\n            lst_3.append(str1[i].upper())\n        elif(str1[i] == '-'):\n            continue\n        else:\n            continue\n    return lst, lst_3\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code goes here\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    list1 = list(str1)\n    for i in range(len(list1)):\n        list1[i] = list1[i].lower()\n    return ''.join(list1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    r = re.findall(r\"(.{2,})([a-z]+)\", str1)\n    for word in r:\n        if word[0].lower() == word[0] and word[1].lower() == word[1]:\n            str1 = str1.replace(word[0], \"\")\n        if word[1].lower() == word[1] and word[0].lower() == word[0]:\n            str1 = str1.replace(word[1], \"\")\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1.lower())\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Write your code here\n    # return number\n    \n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return(n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n < 10 : \n        return n \n    else : \n        return n % 10 \n        \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s=\"\"\n    n=n-1\n    while n > 0:\n        s=s+str(n % 10)\n        n = n // 10\n    if int(s)>=10:\n        return int(s)\n    else :\n        return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n > 9 : \n        return n % 10\n    else : \n        return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    count = 0\n    \n    while n > 0 :\n        count = count + 1\n        n = n / 10\n    \n    return count\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    result = n % 10\n    return result\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10\n        \ndef main() : \n    '''\n    Write a python function to print the sum of the digits of a given number.\n    '''\n    print(sum(first_Digit(int(input()))))\n    \nmain()"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n == 0 or n < 0 :\n        return 0\n    \n    if n < 10 :\n        return 1\n    \n    elif n % 10 == 0 :\n        return 0\n    \n    else :\n        return n % 10\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return int(str(n)[0])\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if list is None or list == []: \n        return None\n    else: \n        odd_list = [] \n        for i in range(len(list)): \n            if (list[i] % 2 == 0): \n                odd_list.append(list[i]) \n        return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = [] \n    even = []\n    odd = list[::2] \n    even = list[1::2] \n    return odd, even\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0]\n    \nprint(Split([1,2,3,4,5]))\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            result.append(list[i])\n    return result \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    num = list[0]\n    list.remove(num)\n    i = 0\n    while i < len(list):\n        if num % 2 == 1:\n            list.remove(num)\n            list.append(num)\n        else:\n            i += 1\n    return list\n    \ndef OddEven(list): \n    '''\n    Write a python function which takes a list of integers and returns the even ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenFirst(list): \n    '''\n    Write a python function which takes a list of integers and returns the even ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef EvenOdd(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef EvenOddFirst(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddOddFirst(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenFirst(list): \n    '''\n    Write a python function which takes a list of integers and returns the even ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenFirst(list): \n    '''\n    Write a python function which takes a list of integers and returns the even ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenSecond(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenSecond(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef EvenOddSecond(list): \n    '''\n    Write a python function which takes a list of integers and returns the even ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef EvenOddSecond(list): \n    '''\n    Write a python function which takes a list of integers and returns the even ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddOddSecond(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddOddSecond(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenSecond(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenSecond(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenThird(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenThird(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenFourth(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenFourth(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenFifth(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenFifth(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenSixth(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenSixth(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenSeventh(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenSeventh(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenEighth(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            list.remove(i)\n    return list\n    \ndef OddEvenEighth(list): \n    '''\n    Write a python function which takes a list of integers and returns the odd ones, only after removing the odd ones.\n    '''\n    for i in list:\n        if i % 2!= 0:\n        "
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Output should be: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n    # O(n) runtime\n    # O(n) space\n    odd_list = []\n    odd_list_2 = []\n    # Iterate over the elements of list\n    for element in list:\n        # If the element is odd then append it to odd_list\n        if element % 2 == 1:\n            odd_list.append(element)\n        # If the element is odd then append it to odd_list_2\n        else:\n            odd_list_2.append(element)\n    return odd_list + odd_list_2\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if not list:\n        return []\n    else:\n        return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            odd.append(list[i])\n    return odd\n    \nprint(Split([4,7,1,5,9]))\n    \n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1=0\n    for i in range(0,n+1):\n        sum1+=i**3\n    sum2=sum1**3\n    return sum2-sum1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Declare a function\n    def sum_cube(n):\n        result = 0\n        for i in range(1,n+1):\n            result += i**3\n        return result\n    \n    # Use the function\n    result = sum_cube(n) - sum_cube(n-1)\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # fucntion to find the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n) : \n        # sum of cubes \n        sum_of_cubes = 0\n        # looping through the range of 10 to 0\n        for x in range(1,n+1) : \n            # checking the value in the range of 10 and adding it to the sum of cubes \n            sum_of_cubes = sum_of_cubes + pow(x,3) \n        return sum_of_cubes\n    \n    # print the sum of cubes \n    print(sum_of_cubes(n))\n    \n    # function to return the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers \n    def difference_of_cubes(n) : \n        # sum of cubes \n        sum_of_cubes = 0\n        # looping through the range of 10 to 0\n        for x in range(1,n+1) : \n            # checking the value in the range of 10 and adding it to the sum of cubes \n            sum_of_cubes = sum_of_cubes + pow(x,3) - x\n        return sum_of_cubes\n    \n    # print the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers \n    print(difference_of_cubes(n))\n    \nif __name__ == '__main__':\n    difference(5)\n    difference_of_cubes(5)"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n < 1 : \n        print('Invalid input')\n        return \n    if n == 1 : \n        print('1')\n        return \n    for i in range (1, n) : \n        print(n*i*i, end=' ') \n    return n\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 1 :\n        return n\n    else :\n        return n*n*(n-1)\n    \n    return n*(n*n)\n    \n    \nn = int(input('Enter the number of numbers : '))\nprint('The difference between the sum of cubes of the first',n,' natural numbers and the sum of the first',n,' natural numbers is',difference(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    sum = n ** 3\n    a = n ** 2\n    b = n ** 4\n    c = n ** 6\n    print(\"the difference is \" + str(sum - a - b - c))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(\"difference of cubes of the first n natural numbers\")\n    # your code here\n    total = 0\n    cubes = [1,3,5,7,9]\n    for i in range(n):\n        total += cubes[i]\n    print(total)\n    \n    \ndifference(3)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return difference(n-1) + (n**3)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n<=0:\n        return None\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)*(n-2)\n    \n    \nn=input(\"Enter the number:\")\na=difference(int(n))\nif a!=None:\n    print(\"The difference is\",a)\nelse:\n    print(\"No such numbers exists\")"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def first(n) :\n        cube = 1\n        for i in range(1, n + 1) :\n            cube = cube * i\n        return cube\n    def second(n) :\n        cube = 1\n        for i in range(1, n + 1) :\n            cube = cube * i ** 2\n        return cube\n    def sum(n) :\n        cube = first(n) + second(n)\n        return cube\n    print(\"Difference = \", sum(n) - sum(n-2))\nfirst(10)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) == (A[i] ^ A[j] ^ N) : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(1,N+1) : \n        for j in range(1,N+1) :\n            if (A[i] & A[j] == A[i] ^ A[j]) :\n                odd_pairs += 1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # find how many pairs have odd xor value\n    pairs = 0\n    odds = 0\n    # find how many pairs with odd xor value\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if(A[i]^A[j]!= A[i]):\n                odds = odds + 1\n    # find how many pairs have even xor value\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if(A[i]^A[j]!= A[i]):\n                pairs = pairs + 1\n                #print(\"pair: {}  {} {}\".format(A[i],A[j],A[i]^A[j]))\n    return odds,pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    lst = []\n    if N % 2 == 0 : \n        if N < 10 : \n            for i in range(1,N+1) : \n                lst.append(i)\n        else : \n            for i in range(1,N+1) : \n                lst.append(i)\n            lst.pop()\n    elif N % 2 == 1 : \n        if N < 10 : \n            for i in range(N//2) : \n                lst.append(i)\n            lst.pop()\n        else : \n            for i in range(N//2) : \n                lst.append(i)\n            lst.pop()\n    elif N % 2 == 0 and N % 2 == 1 : \n        if N < 10 : \n            for i in range(N//2) : \n                lst.append(i)\n            lst.pop()\n        else : \n            for i in range(N//2) : \n                lst.append(i)\n            lst.pop()\n    return lst\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    lst = []\n    if N % 2 == 0 : \n        if N < 10 : \n            for i in range(1,N+1) : \n                lst.append(i)\n        else : \n            for i in range(1,N+1) : \n                lst.append(i)\n            lst.pop()\n    elif N % 2 == 1 : \n        if N < 10 : \n            for i in range(N//2) : \n                lst.append(i)\n            lst.pop()\n        else : \n            for i in range(N//2) : \n                lst.append(i)\n            lst.pop()\n    elif N % 2 == 0 and N % 2 == 1 : \n        if N < 10 : \n            for i in range(N//2) : \n                lst.append(i)\n            lst.pop()\n        else : \n            for i in range(N//2) : \n                lst.append(i)\n            lst.pop()\n    return lst\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt=0\n    for i in range(1,N) : \n        if A[i]&1 == 1 : cnt+=1\n    return cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = len(A)\n    count = 0\n    for i in range(l-1):\n        for j in range(i+1,l):\n            if A[i]^A[j]==0:\n                count+=1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd=0\n    for i in range(1,N+1) :\n        if (A[i-1]&1)!= A[i] :\n            odd+=1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if A[i] & A[j] == 0 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # number of pairs\n    n = N\n    # lst to store xor result\n    X = []\n    # create X with 0\n    X.append(0)\n    # create empty list to store the xor result\n    res = []\n    # create empty list to store the pairs to be checked\n    pair = []\n    # find pairs from A\n    for i in range(1, n) : \n        # find the xor of the element A[i] and element A[i-1] \n        # if xor of A[i] is odd return 1\n        # if xor of A[i-1] is odd return 0\n        if (A[i] & A[i-1]) % 2 == 1 : \n            res.append(1)\n        else : \n            res.append(0)\n    # if 1 is found return count \n    if len(res) == 1 : return 1 \n    else : \n        for i in range(1,n) : \n            # find the xor of the element A[i] and element A[i-1] \n            # if xor of A[i] is odd return 1\n            # if xor of A[i-1] is odd return 0\n            if (A[i] & A[i-1]) % 2 == 1 : \n                pair.append(1)\n            else : \n                pair.append(0)\n        # if 1 is found return count \n        if len(pair) == 1 : return 1 \n        else : \n            # if the number of pairs is odd then return the number of pairs \n            # and return count \n            if n % 2 == 0 : return int(len(pair)/2)\n            # if the number of pairs is even then return the number of pairs \n            # and return count \n            else : return int(len(pair)/2) + 1\n            "
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N, 2) : \n        for j in range(i, N, 2) : \n            if (A[i] == A[j]) : \n                count = count + 1\n            else : \n                continue\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return ''\n    if string[0] == string[0].upper():\n        return string[0].lower() + string[1:]\n    return string[0].upper() + string[1:]\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    if string[0] =='s':\n        string = string[1:]\n    if string[-1] =='s':\n        string = string[:-1]\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        print(char)\n    return string\n    \n    \ndef get_digit(number):\n    '''\n    Function to get the digit of a number.\n    '''\n    return number % 10\n    \n    \ndef get_first_digit(number):\n    '''\n    Function to get the first digit of a number.\n    '''\n    return number // 10\n    \n    \ndef get_last_digit(number):\n    '''\n    Function to get the last digit of a number.\n    '''\n    return number // 100\n    \n    \ndef convert_decimal_to_binary(decimal):\n    '''\n    Function to convert a decimal to binary.\n    '''\n    if decimal == 0:\n        return '0'\n    else:\n        return '1' + convert_decimal_to_binary(decimal // 2)\n    \n    \ndef convert_binary_to_decimal(binary):\n    '''\n    Function to convert a binary number to decimal.\n    '''\n    decimal = 0\n    num = 0\n    for char in binary:\n        if char == '1':\n            decimal = decimal * 2 + 1\n        else:\n            decimal = decimal * 2\n        num = num + decimal\n    return num\n    \n    \ndef get_digit_count(number):\n    '''\n    Function to count the number of digits.\n    '''\n    if number < 10:\n        return 1\n    else:\n        return number // 10\n    \n    \ndef is_digit(number):\n    '''\n    Function to determine if a number is digit.\n    '''\n    if number >= 10:\n        return True\n    else:\n        return False\n    \n    \ndef get_decimal_count(number):\n    '''\n    Function to count the decimal numbers.\n    '''\n    if number < 10:\n        return 1\n    else:\n        return number // 10\n    \n    \ndef is_decimal(number):\n    '''\n    Function to determine if a number is decimal.\n    '''\n    if number >= 10:\n        return True\n    else:\n        return False\n    \n    \ndef find_first_digit(number):\n    '''\n    Function to find the first digit of a number.\n    '''\n    if is_digit(number):\n        return get_first_digit(number)\n    else:\n        return 0\n    \n    \ndef find_last_digit(number):\n    '''\n    Function to find the last digit of a number.\n    '''\n    if is_digit(number):\n        return get_last_digit(number)\n    else:\n        return 0\n    \n    \ndef sum_digit(number):\n    '''\n    Function to find the sum of digits of a number.\n    '''\n    if is_digit(number):\n        return number + find_last_digit(number)\n    else:\n        return 0\n    \n    \ndef multiply_digit(number):\n    '''\n    Function to find the product of digits of a number.\n    '''\n    if is_digit(number):\n        return number * find_first_digit(number)\n    else:\n        return 0\n    \n    \ndef find_sum_digit(number):\n    '''\n    Function to find the sum of digits of a number.\n    '''\n    if is_digit(number):\n        return number + find_last_digit(number)\n    else:\n        return 0\n    \n    \ndef reduce_digits(number):\n    '''\n    Function to reduce a number to digits.\n    '''\n    if number < 10:\n        return number\n    else:\n        if is_digit(number):\n            number = number % 10\n        else:\n            return 0\n        if number == 0:\n            return 0\n        else:\n            return number + reduce_digits(number - 1)\n    \n    \ndef add_digits(number):\n    '''\n    Function to add digits of a number.\n    '''\n    if is_digit(number):\n        return number + find_last_digit(number)\n    else:\n        return 0\n    \n    \ndef is_prime(number):\n    '''\n    Function to check if a number is prime.\n    '''\n    if number < 2:\n        return False\n    elif number % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(number ** 0.5), 2):\n            if number % i == 0:\n                return False\n        return True\n    \n    \ndef find_even_sum(number):\n    '''\n    Function to find the sum of even numbers.\n    '''\n    if is_prime(number):\n        if number == 2:\n            return 0\n        else:\n            if number == 3:\n                return 1\n            else:\n                return (number - 1) + find_even_sum(number - 1)\n    else:\n        return 0\n    \n    \ndef is_prime_factor(number):\n    '''\n    Function to determine if a number is prime factor.\n    '''\n    if number < 2:\n        return False\n    elif number % 2 == 0:\n        return False\n    elif number % 3 == 0:\n        return False\n    elif is_prime(number) is False:\n        return False\n    elif is_prime_factor(number) is True:\n        return True\n    else:\n        for i in range(5, int(number ** 0.5), 2):\n            if is_prime(i) is True:\n                return True\n        return False\n    \n    \ndef get_sum_even_digits(number):\n    '''\n    Function to find the sum of even numbers of a number.\n    '''\n    if is_prime_factor(number) is False:\n        return 0\n    else:\n        if number == 0:\n            return 0\n        else:\n            if is_digit(number) is True:\n                return number + get_sum_even_digits(number - 1)\n            else:\n                return 0\n    \n    \ndef get_sum_odd_digits(number):\n    '''\n    Function to find the sum of odd numbers of a number.\n    '''\n    if is_prime_factor(number) is False:\n        return 0\n    else:\n        if is_digit(number) is True:\n            return number + get_sum_odd_digits(number - 1)\n        else:\n            return 0\n    \n    \ndef get_sum_factor(number):\n    '''\n    Function to find the sum of a number with a prime factor.\n    '''\n    if is_prime_factor(number) is False:\n        return 0\n    else:\n        if number == 0:\n            return 0\n        else:\n            if number == 2:\n                return 1\n            else:\n                return (number - 1) + get_sum_factor(number - 1)\n    \n    \ndef get_sum_primes(number):\n    '''\n    Function to find the sum of prime numbers.\n    '''\n    if is_prime_factor(number) is True:\n        return number + get_sum_primes(number - 1)\n    else:\n        return 0\n    \n    \ndef get_sum_digit_primes(number):\n    '''\n    Function to find the sum of prime numbers with a digit.\n    '''\n    if is_prime_factor(number) is True:\n        return number + get_sum_digit_primes(number - 1)\n    else:\n        return 0\n    \n    \ndef find_prime_factor_sum(number):\n    '''\n    Function to find the sum of prime numbers with a factor.\n    '''\n    if is_prime_factor(number) is True:\n        return number + get_sum_prime_factor_sum(number - 1)\n    else:\n        return 0\n    \n    \ndef find_prime_factor_sum_prime_factors(number):\n    '''\n    Function to find the sum of prime numbers with a factor.\n    '''\n    if is_prime_factor(number) is True:\n        return number + get_sum_prime_factor_sum_prime_factors(number - 1)\n    else:\n        return 0\n    \n    \ndef find_prime_factor_sum_digit_primes(number):\n    '''\n    Function t"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    import string\n    string = string.upper()\n    string = string.replace(\" \",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"#\",\"\")\n    string = string.replace(\"*\",\"\")\n    string = string.replace(\"?\",\"\")\n    string = string.replace(\"$\",\"\")\n    string = string.replace(\"^\",\"\")\n    string = string.replace(\"`\",\"\")\n    string = string.replace(\":\",\"\")\n    string = string.replace(\"<\",\"\")\n    string = string.replace(\">\",\"\")\n    string = string.replace(\"|\",\"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\"?\",\"\")\n    string = string.replace(\".\",\"\")\n    string = string.replace(\",\",\"\")\n    string = string.replace(\"(\",\"\")\n    string = string.replace(\"'\",\"\")\n    string = string.replace(\";\",\"\")\n    string = string.replace(\"-\",\"\")\n    string = string.replace(\"*\",\"\")\n    string = string.replace(\"!\",\"\")\n    string = string.replace(\"~\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"`\",\"\")\n    string = string.replace(\"'\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"=\",\"\")\n    string = string.replace(\"+\",\"\")\n    string = string.replace(\"$\",\"\")\n    string = string.replace(\"^\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"$\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"@\",\"\")\n    string = string.replace(\"&\",\"\")\n    string = string.replace(\"*\",\"\")\n    string = string.replace(\"~\",\"\")\n    string = string.replace(\"&\",\"\")\n    string = string.replace(\"(\",\"\")\n    string = string.replace(\")\",\"\")\n    string = string.replace(\"&\",\"\")\n    string = string.replace(\"(\",\"\")\n    string = string.replace(\")\",\"\")\n    string = string.replace(\"&\",\"\")\n    string = string.replace(\"*\",\"\")\n    string = string.replace(\" \",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\" \",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"_\",\"\")\n    string "
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.lower() if string.islower() else string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == 'It is a string':\n        string = string.replace('It is a string', 'It is not a string')\n    if string == 'a string':\n        string = string.replace('a string', 'an string')\n    if string == 'a string':\n        string = string.replace('a string', 'an')\n    if string == 'an':\n        string = string.replace('an', 'a')\n    if string == 'an':\n        string = string.replace('an', '')\n    if string == 'an':\n        string = string.replace('an', 'a')\n    if string == 'an':\n        string = string.replace('an', 'a')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'a')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an':\n        string = string.replace('an', 'an')\n    if string == 'an'"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for letter in string:\n        if letter == letter.upper():\n            print(letter.lower())\n        else:\n            print(letter.upper())\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += '_'\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string:\n        if string[0].isupper():\n            return ''.join([\"U\", string[1:]])\n        return \"\".join([\"U\", string[1:]])\n    return \"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = 0\n    d2 = 0\n    for i in range(n1):\n        d1 += (n1 - i) * (n2 - i)\n    for i in range(n2):\n        d2 += (i - n1) * (n2 - i)\n    return d1 + d2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        if n1[i]!= n2[i]:\n            diff += 1\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    diff_sum = 0\n    while diff:\n        diff_sum = diff_sum + diff % 10\n        diff = diff // 10\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return n1 - n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two inputs into ints\n    x1 = int(n1)\n    x2 = int(n2)\n    # find the difference between each two numbers\n    sums = 0\n    for x in range(x1, x2 + 1):\n        sums += abs(x - x1)\n    # return the sum of the differences\n    return sums\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    a = 0\n    b = 0\n    for i in range(0, len(n1)-1):\n        a = a + abs(n1[i] - n2[i])\n    return a\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        n1, n2 = n2, n1\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2) % 10\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return (sum(n1[i] - n2[i] for i in range(len(n1))))\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return sum_max_sub_array_sum(a, size, 0, 0, 0, 0)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #declaring the variables\n    max_so_far = 0\n    max_ending = 0\n    sub_array = []\n    #looping for number of elements\n    for i in range(size):\n        #getting the max ending\n        max_ending = max_so_far\n        for j in range(i, size):\n            #getting max ending for current sublist\n            if a[j] > a[i]:\n                max_ending = max(a[j] + max_ending, a[j])\n        #adding to max ending\n        max_ending = max(max_ending, max_so_far)\n        #adding to the array\n        sub_array.append(max_ending)\n        #setting the max so far\n        max_so_far = max(sub_array)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = [0] * size\n    max_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    current_sum = 0\n    \n    current_sum_idx = 0\n    \n    current_sub_array = []\n    \n    for idx in range(0, size):\n        current_sub_array.append(a[idx])\n        \n        if idx + 1 < size:\n            current_sum_idx = max(current_sum_idx, current_sub_array[idx] + current_sub_array[idx + 1])\n        \n    return current_sum_idx\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_arr = [0 for i in range(size)]\n    \n    sum = 0\n    cur_sum = 0\n    for i in range(0, size):\n        cur_sum += a[i]\n        if cur_sum > sum:\n            sum = cur_sum\n            for j in range(i, size):\n                sub_arr[j] = a[i]\n                cur_sum -= a[j]\n                \n    if cur_sum > sum:\n        sum = cur_sum\n        for j in range(size, len(a)):\n            sub_arr[j] = a[j]\n            cur_sum -= a[j]\n            \n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    def find_sum(lst):\n        '''\n        find_sum(lst)\n        Given a list of integers, calculate the sum of the largest contiguous sublist.\n        '''\n        cnt = 0\n        for i in range(len(lst)):\n            cnt += lst[i]\n            if cnt > size:\n                return cnt\n    return find_sum(a)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    max_sub_sum = -math.inf\n    sum_list = []\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += a[j]\n            if sum > max_sub_sum:\n                sum_list = [a[i], sum]\n                max_sub_sum = sum\n    return sum_list\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    sub_sum = 0\n    for i in range(size):\n        sub_sum += a[i]\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            sub_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    a_max = 0\n    temp_max = 0\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n    "
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = [test_tup1, test_tup2]\n    result.sort()\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Since tuples can be sorted, we will ignore the order of elements\n    return sorted(set(test_tup1 + test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        tup1,tup2 = test_tup2,test_tup1\n    else:\n        tup1,tup2 = test_tup1,test_tup2\n    return tup1 + tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result_tuple = tuple(sorted(test_tup1 + test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    tup = tup1.union(tup2)\n    tup = list(tup)\n    tup.sort()\n    return tup\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1 or not test_tup2:\n        return None\n    t1_idx = 0\n    t2_idx = 0\n    t1_len = len(test_tup1)\n    t2_len = len(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #creating a tuple with first element being the last element of the tuples\n    union_tup = (test_tup1[0], test_tup1[-1], test_tup2[0], test_tup2[-1])\n    #checking the tuple is already sorted\n    if union_tup[0] == union_tup[-1]:\n        #printing all the elements\n        print(\"The Union of the elements:\", union_tup[0], union_tup[-1])\n    else:\n        #printing the first element of the tuples\n        print(\"The Union of the elements:\", union_tup[0], union_tup[-1], \"and\", union_tup[1], union_tup[2], union_tup[3])\n        #iterating through the list of tuples and comparing with the tuples\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == union_tup[0] and test_tup2[i] == union_tup[-1]:\n                #printing the element to be compared\n                print(\"The Element is:\", test_tup1[i], test_tup2[i])\n                #setting the respective index of the element to 0\n                test_tup1[i] = 0\n                test_tup2[i] = 0\n        #printing the second element of the tuples\n        print(\"The Second element is:\", test_tup2[0], test_tup2[1], test_tup2[2], test_tup2[3])\n        #creating a list to store the elements in\n        all_elements = []\n        #iterating through the list of tuples and appending the elements to the list\n        for i in range(len(test_tup1)):\n            all_elements.append(test_tup1[i])\n            all_elements.append(test_tup2[i])\n        #printing the combined elements\n        print(\"The combined elements:\", all_elements)\n        #sorting the elements in the tuples\n        all_elements.sort()\n        #printing the elements in sorted order\n        print(\"The elements in the sorted order:\", all_elements)\n    #printing the element of the list\n    print(\"The element of the list is:\", all_elements[0], all_elements[-1])\n    #returning the list with elements\n    return all_elements\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    print(f\"Union of {test_tup1} and {test_tup2} is:\")\n    print(f\"{test_tup1.union(test_tup2)}\")\n    \n    #raise NotImplementedError(\"Implement this!\")\n    \n    \n    "
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # write your code here\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    MAX = len(lst[0])\n    for i in lst:\n        if len(i) > MAX:\n            MAX = len(i)\n    return MAX\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    if len(lst) == 0:\n        return 0\n    else:\n        for i in range(len(lst)):\n            if len(lst[i]) > max_length:\n                max_length = len(lst[i])\n        return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                if len(lst[i]) > max_length:\n                    max_length = len(lst[i])\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    max_sublist = \"\"\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_len = []\n    lst_len_start = lst[0]\n    lst_len_end = lst[-1]\n    i = 1\n    while i < len(lst):\n        if lst[i] < lst_len_start:\n            lst_len_start = lst[i]\n        if lst[i] > lst_len_end:\n            lst_len_end = lst[i]\n        i += 1\n    return max(lst_len)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length=1\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            #print(lst[i],lst[j])\n            if len(lst[i])<len(lst[j]):\n                #print(lst[i],lst[j])\n                max_length=max(max_length,len(lst[j]))\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return max(dict, key=dict.get)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 1\n    if len(lst) < 1:\n        return 0\n    for i in range(1,len(lst)):\n        curr_len = 0\n        for j in range(0,i):\n            if lst[j] > lst[i]:\n                curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst==None or len(lst)==0:\n        return -1\n    #Initialize the longest sublist of lst with zeros and length of 0\n    l=lst[0]\n    L=0\n    #Loop for each index in the lst\n    for i in range(1,len(lst)):\n        #Check if current sublist is longer than the longest one, if it is add the length to L\n        if lst[i]>l:\n            L=L+1\n        #Loop over every elements in lst to see if there is another greater than L in the previous\n        #sublist, if there is, then subtract 1 to find the max length of L from the previous sublist\n        else:\n            L=1\n            #Create a new sublist and append the element to the previous one\n            temp=lst[i]\n            l=l-temp\n    #Return the length of the longest sublist\n    return L\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    elif len(lst) == 2:\n        if lst[0] > lst[1]:\n            return 2\n        else:\n            return 1\n    else:\n        if lst[0] > lst[1]:\n            return Find_Max_Length(lst[2:])\n        else:\n            return Find_Max_Length(lst[:2])\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.split(r'[\\,\\(]', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    split = re.split(r'[\\\"\\']', text)\n    return [s.replace('\\n', '').strip() for s in split if s]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[(](.*?)[)]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_words(text):\n    '''\n    Write a function to extract words from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w\\s]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_months(text):\n    '''\n    Write a function to extract months from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'(\\d{1,2})\\s')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_number_of_days(text):\n    '''\n    Write a function to extract number of days from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'\\d{1,2}\\s')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_percent_money(text):\n    '''\n    Write a function to extract percent money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^0-9]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_percent_of_money(text):\n    '''\n    Write a function to extract percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_percent_of_balance(text):\n    '''\n    Write a function to extract percent of balance from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_balance(text):\n    '''\n    Write a function to extract average of balance from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_money(text):\n    '''\n    Write a function to extract average of percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_of_money(text):\n    '''\n    Write a function to extract average of percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_balance_percent_money(text):\n    '''\n    Write a function to extract average of balance percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_of_balance_money(text):\n    '''\n    Write a function to extract average of percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_of_balance_percent_money(text):\n    '''\n    Write a function to extract average of percent of balance percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_balance(text):\n    '''\n    Write a function to extract average of balance from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_of_balance(text):\n    '''\n    Write a function to extract average of percent of balance from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_of_balance_money(text):\n    '''\n    Write a function to extract average of percent of balance percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_of_balance_percent_money(text):\n    '''\n    Write a function to extract average of percent of balance percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_balance_percent_money(text):\n    '''\n    Write a function to extract average of percent of balance percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_of_balance_percent_money(text):\n    '''\n    Write a function to extract average of percent of balance percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_balance_percent(text):\n    '''\n    Write a function to extract average of percent of balance percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_of_balance_money(text):\n    '''\n    Write a function to extract average of percent of balance percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compile(r'[^\\w]')\n    # search through the string for the pattern\n    results = reg.findall(text)\n    # return the results\n    return results\ndef extract_avg_of_percent_of_balance_money(text):\n    '''\n    Write a function to extract average of percent of balance percent of money from a string.\n    '''\n    # define the regular expression\n    reg = re.compil"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'[^\"]+', text)\n    values = values[0].split('\"')\n    values = values[1:]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    s = re.findall(r'\\w+[.?!][^\\']*\\w+', text)[0]\n    s = s.replace('\\'', '\"').replace('\"', '\\'')\n    return s\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', '').replace('\\'', '').replace(',', '').replace(\"'\", '').replace('!', '').replace('?', '')\n    text = re.sub('[^a-zA-Z0-9-_]+', '', text)\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #your code here\n    val = re.findall(r'\\(.*?\\)', text)\n    for item in val:\n        text = text.replace(item, '')\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # here we have to use the re library.  Using this regex will give us all the values we have to extract.\n    # regex will give us all the values we want to extract.\n    # we want to match the value in the entire string.\n    # matched string will be '\\d+', '\\d+\\d+',...\n    # look at the regex on the end of the string to find a match.\n    # if there is a match then we will have to join the values to get a string.\n    # so we just use a simple '\\d+' regex to find the match.\n    # we use this to extract the number in the beginning of the string.\n    # this is how you write a regex.\n    #\n    # this is a test of the function.\n    # try it out\n    #\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\\w+[(]\\w+', text)\n    return result\n    \ndef extract_mail_number(text):\n    '''\n    Write a function to extract a mail number from a string.\n    '''\n    result = re.findall(r'\\w+[@]\\w+[.]\\w+', text)\n    return result\n    \ndef extract_names(text):\n    '''\n    Write a function to extract names from a string.\n    '''\n    result = re.findall(r'\\w+', text)\n    return result\n    \ndef extract_title(text):\n    '''\n    Write a function to extract a title from a string.\n    '''\n    result = re.findall(r'\\w+', text)\n    return result\n    \ndef extract_last_names(text):\n    '''\n    Write a function to extract last names from a string.\n    '''\n    result = re.findall(r'\\w+', text)\n    return result\n    \ndef extract_middle_names(text):\n    '''\n    Write a function to extract middle names from a string.\n    '''\n    result = re.findall(r'\\w+', text)\n    return result\n    \ndef extract_first_names(text):\n    '''\n    Write a function to extract first names from a string.\n    '''\n    result = re.findall(r'\\w+', text)\n    return result\n    \ndef extract_suffix(text):\n    '''\n    Write a function to extract a suffix from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_middlenames(text):\n    '''\n    Write a function to extract middle names from a string.\n    '''\n    result = re.findall(r'\\w+', text)\n    return result\n    \ndef extract_surnames(text):\n    '''\n    Write a function to extract surnames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_suffixes(text):\n    '''\n    Write a function to extract suffixes from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_surnames_and_suffixes(text):\n    '''\n    Write a function to extract surname and suffix from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_middlenames_and_suffixes(text):\n    '''\n    Write a function to extract middle names and suffixes from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_first_names_and_suffixes(text):\n    '''\n    Write a function to extract first names and suffixes from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_surnames_and_suffix(text):\n    '''\n    Write a function to extract surname and suffix from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_middlenames_and_suffix(text):\n    '''\n    Write a function to extract middle names and suffix from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_last_names_and_suffix(text):\n    '''\n    Write a function to extract last names and suffix from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_middlenames_and_suffix(text):\n    '''\n    Write a function to extract middle names and suffix from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_surnames_and_suffix(text):\n    '''\n    Write a function to extract surname and suffix from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_suffix_and_surnames(text):\n    '''\n    Write a function to extract suffix and surnames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_first_names_and_suffixes(text):\n    '''\n    Write a function to extract first names and suffixes from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_surnames_and_suffixes(text):\n    '''\n    Write a function to extract surname and suffixes from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_suffix_and_middlenames(text):\n    '''\n    Write a function to extract suffix and middlenames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_last_names_and_middlenames(text):\n    '''\n    Write a function to extract last names and middlenames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_middlenames_and_lastnames(text):\n    '''\n    Write a function to extract middle names and lastnames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_suffix_and_lastnames(text):\n    '''\n    Write a function to extract suffix and lastnames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_first_names_and_suffixes(text):\n    '''\n    Write a function to extract first names and suffixes from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_surnames_and_suffixes(text):\n    '''\n    Write a function to extract surname and suffixes from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_suffix_and_middlenames(text):\n    '''\n    Write a function to extract suffix and middlenames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_last_names_and_middlenames(text):\n    '''\n    Write a function to extract last names and middlenames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_middlenames_and_lastnames(text):\n    '''\n    Write a function to extract middle names and lastnames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_suffix_and_middlenames(text):\n    '''\n    Write a function to extract suffix and middlenames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_last_names_and_middlenames(text):\n    '''\n    Write a function to extract last names and middlenames from a string.\n    '''\n    result = re.findall(r'[.!?]', text)\n    return result\n    \ndef extract_middlenames_and_lastnames(text):\n    '''\n    Write a function to extract middle names and lastnames from "
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #returns the number of unordered pairs\n    num_pairs = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count_pairs = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if (arr[i]!= arr[j]): \n                count_pairs += 1\n    return count_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    elif n%2 == 0:\n        return count_Pairs(arr, n//2) + count_Pairs(arr, n//2)\n    else:\n        return count_Pairs(arr, n//2) + count_Pairs(arr, n//2) + 1"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    l = len(arr)\n    count = 0\n    for i in range(l):\n        for j in range(i+1,l):\n            if arr[i]!= arr[j] :\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif arr[0]!= arr[1]: \n        return (count_Pairs(arr,n-1)) + count_Pairs(arr,n-2)\n    else: \n        return (count_Pairs(arr,n-2)) \n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2:\n        return 0\n    elif len(arr) == n:\n        return 1\n    elif arr[n-1]!= arr[n-2]:\n        return count_Pairs(arr,n-1)\n    else:\n        return count_Pairs(arr,n-2)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    pairs=0\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            pairs+=1\n            if arr[i]!= arr[j]:\n                count+=1\n                break\n    return(count)\n    \n    \ndef binary_search(arr,n,low,high):\n    '''\n    Return the index of the value that appears closest to n in the array.\n    '''\n    mid=int((low+high)/2)\n    if arr[mid]==n:\n        return mid\n    elif arr[mid]<n:\n        return binary_search(arr,n,mid+1,high)\n    else:\n        return binary_search(arr,n,low,mid-1)\n    \ndef check_two_pairs(arr):\n    '''\n    If there are two pairs in the array, return the indexes of those two.\n    '''\n    pair_arr=[]\n    for i in range(len(arr)):\n        if arr[i]==arr[i+1]:\n            pair_arr.append(i)\n        if arr[i]!=arr[i+1]:\n            pair_arr.append(i)\n    return pair_arr\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    pairs=0\n    \n    for i in range(1,n):\n        for j in range(i+1,n):\n            if (arr[i]==arr[j]):\n                pairs+=1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = str(word)\n    return word[0:len(word)-1] \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(\" \")\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -n\n    else:\n        digits = 0\n        while n!= 0:\n            digits += n % 10\n            n //= 10\n        return digits\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num = n\n    while num >= 10:\n        num = num // 10\n        num = num % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n//10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n:\n        n &= (n-1)\n        return n\n    \nprint(sum_digits(12))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        s = 0\n        while n > 0:\n            s += n % 10\n            n //= 10\n        return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # if n is negative, return 0\n    if n < 0:\n        return 0\n    \n    # return n as a string\n    string = str(n)\n    \n    # check if n is 0, return 0\n    if n == 0:\n        return 0\n    \n    # check if n is a perfect square, return 0\n    if n == int(n**0.5):\n        return 0\n    \n    # return the sum of all the digits\n    return sum_digits(int(string[0] + string[1] + string[2]))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n <= 0:\n        return 0\n    return n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    res = 0\n    while(n!=0):\n        res = res*10 + n%10\n        n = n//10\n    return res\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if type(n) is not int:\n        return NotImplemented\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s=0\n    while n:\n        s+=n%10\n        n//=10\n    return s\n    \ndef sum_digits_interative(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    The number of digits is equal to the number of steps in the function\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n<10:\n        return n\n    else:\n        return sum_digits(n//10) + sum_digits(n%10)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Base Case : First element of the list is the minimum element\n    if len(list1) == 0:\n        return True\n    \n    if list1[0] <= list1[-1]:\n        return True\n    \n    # Traverse through list1 backwards\n    for i in range(len(list1)-1, -1, -1):\n        if list1[i] <= list1[i+1]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1.sort()!= list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for item in list1:\n        if item < list1[0]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted = True\n    if len(list1) == 0:\n        sorted = False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        for i in range(1,len(list1)):\n            if list1[i]<list1[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if(list1):\n        return list1[0] < list1[1]\n    return None\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Step 1: Initialize first element\n    first = list1[0]\n    # Step 2: Initialize second element\n    second = list1[1]\n    # Step 3: Loop over second element\n    for i in range(1, len(list1)):\n        # Step 4: Compare the elements\n        if list1[i] < first:\n            return False\n        # Step 5: If the second element is smaller than the first element,\n        #   then swap the elements\n        if list1[i] < second:\n            list1[i], list1[first] = list1[first], list1[i]\n            first = first\n            second = second\n        # Step 6: If the second element is greater than the first element,\n        #   then swap the elements\n        if list1[i] > second:\n            list1[i], list1[first] = list1[first], list1[i]\n            first = first\n            second = second\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for item in list1:\n        print(\"Appending {0} to the end of the list.\".format(item))\n        list1.append(item)\n    return list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if list1[i] > list1[j]:\n                swap_it = list1[i]\n                list1[i] = list1[j]\n                list1[j] = swap_it\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(0,length):\n        dic = {}\n        dic['name'] = input('Enter name of the dict\\n')\n        dic['is_active'] = input('Enter true or false\\n')\n        dic['phone'] = input('Enter phone number\\n')\n        lst.append(dic)\n    return lst\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == 0:\n        return []\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    list = []\n    print(\"Enter %d list entries\" % length)\n    for i in range(length):\n        print(\"Enter %d entry\" % (i+1))\n        entry = {}\n        for j in range(2):\n            entry[str(j+1)] = input()\n        list.append(entry)\n    return list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    for i in range(length):\n        dictionaries.append({})\n    return dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(0, length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({\"name\": \"\", \"score\": 0})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    for i in range(length):\n        dictionaries.append(dict())\n    return dictionaries\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_by_str(list1,str1):\n        '''\n        Sort each sublist by each element in string and print it.\n        '''\n        for i in range(len(list1)):\n            for j in range(len(list1[i])):\n                list1[i][j] = str1[j]\n        print(list1)\n        # for i in range(len(list1)):\n        #     print(list1[i])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    temp_list = []\n    while i < len(list1):\n        temp_list.append([])\n        while i < len(list1[i]):\n            temp_list[i].append(list1[i][i])\n            i = i + 1\n        i = i + 1\n        while len(temp_list[i]) < 5:\n            temp_list[i].append('a')\n        i = 0\n    return temp_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(\"Sort the sublists of strings in a given list\")\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j].isdigit() is True:\n                list1[i][j] = str(list1[i][j])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = []\n    for i in range(len(list1)):\n        sub_lists.append([])\n        for j in range(len(list1[i])):\n            sub_lists[i].append(list1[i][j])\n    return sub_lists\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Define a function that takes a list as its only parameter and returns a new list containing\n    #the characters from the original list sorted ascending in order by their index.\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(list1)\n    if not type(list1) is list:\n        raise TypeError('Please input a list of lists')\n    \n    for sublist in list1:\n        sublist.sort()\n    print(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        for index, element in enumerate(sublist):\n            if index % 2 == 0:\n                sublist[index] = element.upper()\n            else:\n                sublist[index] = element.lower()\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp=list1[0]\n    temp2=list()\n    for sublist in list1:\n        if sublist!=temp:\n            temp2.append(sublist)\n    temp2.sort(key=lambda sublist: sublist[0])\n    return temp2\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        new_list.append(sublist)\n        new_list.sort()\n        \n    return new_list\n        \ndef is_valid_name(string):\n    '''\n    Write a function to check if the name is valid.\n    '''\n    valid_names = ['abraham', 'daisy', 'harold', 'harold', 'david', 'david', 'kyle', 'kyle', 'kyle', 'kyle']\n    \n    if string[0].lower() in valid_names:\n        return True\n    \n    return False\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    for i in range(len(nums)):\n        new_nums.append(nums[i])\n    i = 0\n    while i < len(new_nums):\n        if new_nums[i] not in new_nums[i + 1:]:\n            new_nums.remove(new_nums[i])\n        else:\n            i = i + 1\n    return new_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # pass a list of numbers as an argument\n    # return a list of numbers with unique numbers removed\n    nums = list(set(nums))\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Get unique list of numbers\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if nums == None or len(nums) == 0:\n        return nums\n    \n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    return [i for i in nums if i in d and d[i] > 1]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # if no list, return empty list\n    if len(nums) == 0:\n        return []\n    # sort list\n    nums.sort()\n    # iterate over list\n    for i in range(len(nums)):\n        # if duplicate, remove it\n        if nums[i] == nums[i-1]:\n            continue\n        # return the list with the duplicate removed\n        return nums[:i] + nums[i+1:]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    d = {}\n    for num in nums:\n        if num in d.keys():\n            d[num] += 1\n        else:\n            d[num] = 1\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dict_nums = {}\n    for i in nums:\n        if i in dict_nums:\n            dict_nums[i] = dict_nums[i] + 1\n        else:\n            dict_nums[i] = 1\n    return dict_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Corner case\n    if len(nums) == 0:\n        return []\n    # Using set\n    seen = set()\n    \n    # Iterate over each element in the list\n    for num in nums:\n        # If the element is already in the set\n        if num in seen:\n            # Add it to the set\n            seen.remove(num)\n        # Add the element to the set\n        seen.add(num)\n    return list(seen)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Your code here\n    seen = set()\n    for n in nums:\n        if n not in seen:\n            seen.add(n)\n            nums.remove(n)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n    return seen"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for item in list_data:\n        product *= int(item)\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for number in list_data:\n        for i in range(0,len(list_data)):\n            if number == list_data[i]:\n                list_data.remove(number)\n                break\n    \n    return len(list_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_unique = []\n    for i in range(len(list_data)):\n        list_unique.append(list_data[i])\n    if len(set(list_unique))==len(list_unique):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    my_dict = {}\n    # Iterating over the list\n    for item in list_data:\n        # If the item is not already in the dictionary\n        if item not in my_dict:\n            # Add it to the dictionary\n            my_dict[item] = 1\n        else:\n            # Add 1 to the value of the dictionary\n            my_dict[item] += 1\n    return my_dict\n    "
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for data in list_data:\n        if data not in unique_list:\n            unique_list.append(data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=1\n    for number in list_data:\n        product*=number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_list = []\n    for data in list_data:\n        if data not in product_list:\n            product_list.append(data)\n    return product_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    l = []\n    for i in range(len(list_data)):\n        l.append(list_data[i])\n    m = max(l)\n    return m\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #You may find the function is_prime in the simple_math package.\n    '''\n    lst = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    lst = list(set(lst))\n    '''\n    # Write your code here.\n    product = 1\n    for i in list_data:\n        product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_product = 1\n    for data in list_data:\n        total_product = total_product * data\n    return total_product\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 4 * (np.pi * r**2)\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*(r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h * math.pi\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*h*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=0.5*(r*r*h*h)\n    print(f'The area of a cylinder with radius {r} and height {h} is {area}')\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5*(h**2) * (3*r*(r**2))\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    import math\n    # Define variables\n    area_cylinder = 0\n    radius_cylinder = r\n    height_cylinder = h\n    # Calculate the area of a cylinder\n    area_cylinder = math.pi * radius_cylinder ** 2\n    # Calculate the volume of a cylinder\n    volume_cylinder = 4 * math.pi * radius_cylinder * height_cylinder\n    # Calculate the area of a sphere\n    area_sphere = math.pi * radius_cylinder ** 2 * 2\n    # Calculate the volume of a sphere\n    volume_sphere = 4 * math.pi * radius_cylinder * radius_cylinder\n    # Calculate the area of a convex cone\n    area_cone = math.pi * radius_cylinder ** 2 * 2 * (math.tan(math.radians(60)) - 1)\n    # Calculate the volume of a convex cone\n    volume_cone = 4 * math.pi * radius_cylinder ** 2 * (math.tan(math.radians(60)) - 1)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*h*(r**2))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Method 1: check if all elements of A are in B\n    # O(n) time | O(1) space\n    if len(A) == 0: return False\n    if len(B) == 0: return True\n    if len(A) < len(B):\n        return False\n    for i in range(len(B)):\n        if A[0] == B[i]:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(A)==1):\n        return False\n    if(A[0]==B[0]):\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    L = len(A)\n    r = []\n    for i in range(L):\n        if(A[i] in B):\n            r.append(i)\n    return r\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # if A is a list and B is a sublist of A, then return True\n    if isinstance(A,list) and isinstance(B,list):\n        for i in range(0,len(B)):\n            if B[i] not in A:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # create a loop that iterates through all the elements in list A \n    for i in range(0,len(A)):\n        if A[i] not in B:\n            return False\n    return True\n    \nA = [1,2,3,4]\nB = [2,3]"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return len(B)==len(A) and A[0:len(B)]==B\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # code here\n    # return True if it is sub list of a list\n    for i in range(len(A)-1):\n        if B[i] not in A[i+1:]:\n            return False\n    return True\n    "
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == len(B):\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+2] == B:\n            print('Yes')\n            return True\n    print('No')\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # First we have to check if the number is even or not\n    if n==0 or n==1:\n        return n\n    elif n>=2:\n        # We have to return the factorial of the number first\n        return n*last_Digit_Factorial(n-1)\n    else:\n        # Second we have to return the factorial of the number\n        return n*last_Digit_Factorial(n-2)\n    \nif __name__ == '__main__':\n    print(\"Hello! This is a program that is a utility for us in interview\")\n    print(\"If you are reading this article for you, please keep the comments\")\n    print(\"print to the python console\")\n    print(\"If you have any questions please feel free to contact me\")\n    print(\"\")\n    \n    print(\"Question 1:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 2:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 3:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 4:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 5:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 6:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 7:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 8:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 9:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 10:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 11:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 12:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 13:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 14:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 15:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n        print(\"\")\n        \n    print(\"Question 16:\")\n    print(\" \")\n    print(\"How many of your friends do you have to be friends?\")\n    print(\"Please enter only numbers\")\n    answer = input()\n    answer = int(answer)\n    while answer!= 0:\n        print(\" \")\n        print(\"How many of your friends do you have to be friends?\")\n        print(\"Please enter only numbers\")\n        answer = input()\n        answer = int(answer)\n    "
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    print(fact)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Write your code here\n    \n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n        return fact\n    \n    \n    "
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # your code goes here\n    lastDigitFactorial = n % 10\n    return lastDigitFactorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n > 0:\n        fact *= n\n        n = n - 1\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n    \nprint(last_Digit_Factorial(6))\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:\n        return 38\n    elif n == 40:\n        return 39\n    elif n == 41:\n        return 40\n    elif n == 42:\n        return 41\n    elif n == 43:\n        return 42\n    elif n == 44:\n        return 43\n    elif n == 45:\n        return 44\n    elif n == 46:\n        return 45\n    elif n == 47:\n        return 46\n    elif n == 48:\n        return 47\n    elif n == 49:\n        return 48\n    elif n == 50:\n        return 49\n    elif n == 51:\n        return 50\n    elif n == 52:\n        return 51\n    elif n == 53:\n        return 52\n    elif n == 54:\n        return 53\n    elif n == 55:\n        return 54\n    elif n == 56:\n        return 55\n    elif n == 57:\n        return 56\n    elif n == 58:\n        return 57\n    elif n == 59:\n        return 58\n    elif n == 60:\n        return 59\n    elif n == 61:\n        return 60\n    elif n == 62:\n        return 61\n    elif n == 63:\n        return 62\n    elif n == 64:\n        return 63\n    elif n == 65:\n        return 64\n    elif n == 66:\n        return 65\n    elif n == 67:\n        return 66\n    elif n == 68:\n        return 67\n    elif n == 69:\n        return 68\n    elif n == 70:\n        return 69\n    elif n == 71:\n        return 70\n    elif n == 72:\n        return 71\n    elif n == 73:\n        return 72\n    elif n == 74:\n        return 73\n    elif n == 75:\n        return 74\n    elif n == 76:\n        return 75\n    elif n == 77:\n        return 76\n    elif n == 78:\n        return 77\n    elif n == 79:\n        return 78\n    elif n == 80:\n        return 79\n    elif n == 81:\n        return 80\n    elif n == 82:\n        return 81\n    elif n == 83:\n        return 82\n    elif n == 84:\n        return 83\n    elif n == 85:\n        return 84\n    elif n == 86:\n        return 85\n    elif n == 87:\n        return 86\n    elif n == 88:\n        return 87\n    elif n == 89:\n        return 88\n    elif n == 90:\n        return 89\n    elif n == 91:\n        return 90\n    elif n == 92:\n        return 91\n    elif n == 93:\n        return 92\n    elif n == 94:\n        return 93\n    elif n == 95:\n        return 94\n    elif n == 96:\n        return 95\n    elif n == 97:\n        return 96\n    elif n == 98:\n        return 97\n    elif n == 99:\n        return 98\n    elif n == 100:\n        return 99\n    elif n == 101:\n        return 100\n    elif n == 102:\n        return 101\n    elif n == 103:\n        return 102\n    elif n == 104:\n        return 103\n    elif n == 105:\n        return 104\n    elif n == 106:\n        return 105\n    elif n == 107:\n        return 106\n    elif n == 108:\n        return 107\n    elif n == 109:\n        return 108\n    elif n == 110:\n        return 109\n    elif n == 111:\n        return 110\n    elif n == 112:\n        return 111\n    elif n == 113:\n        return 112\n    elif n == 114:\n        return 113\n    elif n == 115:\n        return 114\n    elif n == 116:\n        return 115\n    elif n == 117:\n        return 116\n    elif n == 118:\n        return 117\n    elif n == 119:\n        return 118\n    elif n == 120:\n        return 119\n    elif n == 121:\n        return 120\n    elif n == 122:\n        return 121\n    elif n == 123:\n        return 122\n    elif n == 124:\n        return 123\n    elif n == 125:\n        return 124\n    elif n == 126:\n        return 125\n    elif n == 127:\n        return 126\n    elif n == 128:\n        return 127\n    elif n == 129:\n        return 128\n    elif n == 130:\n        return 129\n    elif n == 131:\n        return 130\n    elif n == 132:\n        return 131\n    elif n == 133:\n        return 132\n    elif n == 134:\n        return 133\n    elif n == 135:\n        return 134\n    elif n == 136:\n        return 135\n    elif n == 137:\n        return 136\n    elif n == 138:\n        return 137\n    elif n == 139:\n        return 138\n    elif n == 140:\n        return 139\n    elif n == 141:\n        return 140\n    elif n == 142:\n        return 141\n    elif n == 143:\n        return 142\n    elif n == 144:\n        return 143\n    elif n == 145:\n        return 144\n    elif n == 146:\n        return 145\n    elif n == 147:\n        return 146\n    elif n == 148:\n        return 147\n    elif n == 149:\n        return 148\n    elif n == 150:\n        return 149\n    elif n == 151:\n        return 150\n    elif n == 152:\n        return 151\n    elif n == 153:\n        return 152\n    elif n == 154:\n        return 153\n    elif n == 155:\n        return 154\n    elif n == 156:\n        return 155\n    elif n == 157:\n        return 156\n    elif n == 158:\n        return 157\n    elif n == 159:\n        return 158\n    elif n == 160:\n        return 159\n    elif n == 161:\n        return 160\n    elif n == 162:\n        return 161\n    elif n == 163:\n        return 162\n    elif n == 164:\n        return 163\n    elif n == 165:\n        return 164\n    elif n == 166:\n        return 165\n    elif n ="
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n > 0:\n        if n == 1:\n            return 1\n        else:\n            return (n // 1) * last_Digit_Factorial(n - 1)\n    else:\n        return \"error\"\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    temp_list1 = list1[0]\n    temp_list2 = list1[1]\n    temp_list3 = list1[2]\n    for index in range(3):\n        temp_list3.extend(list3[index])\n    return temp_list1+temp_list2+temp_list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list(i+j) for i,j in zip(list1,list2)]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create a new list that has all the elements of the 3 lists concatenated into one\n    new_list = []\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                new_list.append(i + j + k)\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialise empty lists\n    newlist = []\n    newlist2 = []\n    newlist3 = []\n    i = 0\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(itertools.chain(*list(zip(list1,list2,list3))))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i=0\n    j=0\n    k=0\n    interlaced_list1=[]\n    interlaced_list2=[]\n    interlaced_list3=[]\n    \n    while(i<len(list1) and j<len(list2) and k<len(list3)):\n        if(i!=len(list1) and j!=len(list2) and k!=len(list3)):\n            interlaced_list1.append(list1[i])\n            interlaced_list1.append(list2[j])\n            interlaced_list1.append(list3[k])\n            \n            i+=1\n            j+=1\n            k+=1\n        elif(i==len(list1)):\n            interlaced_list1.append(list1[j])\n            interlaced_list1.append(list2[i])\n            interlaced_list1.append(list3[k])\n            \n            j+=1\n            i+=1\n            k+=1\n        elif(j==len(list2)):\n            interlaced_list2.append(list1[i])\n            interlaced_list2.append(list2[j])\n            interlaced_list2.append(list3[k])\n            \n            i+=1\n            j+=1\n            k+=1\n        elif(k==len(list3)):\n            interlaced_list3.append(list1[i])\n            interlaced_list3.append(list2[j])\n            interlaced_list3.append(list3[i])\n            \n            i+=1\n            j+=1\n            k+=1\n    return interlaced_list1+interlaced_list2+interlaced_list3\n    \ndef main():\n    try:\n        print(\"Interleave Lists\")\n        list1=[]\n        list2=[]\n        list3=[]\n        print(\"Length of list1: \",len(list1))\n        print(\"Length of list2: \",len(list2))\n        print(\"Length of list3: \",len(list3))\n        for i in range(len(list1)):\n            list1.append(input(\"Enter value: \"))\n        for j in range(len(list2)):\n            list2.append(input(\"Enter value: \"))\n        for k in range(len(list3)):\n            list3.append(input(\"Enter value: \"))\n        print(\"Lists are: \",list1,\"\\n\",list2,\"\\n\",list3)\n        interlaced_list1=interleave_lists(list1,list2,list3)\n        print(\"Interlaced List: \",interlaced_list1)\n        \n    except ValueError:\n        print(\"Invalid input\")\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l1=[]\n    l2=[]\n    l3=[]\n    for i in range(len(list1)):\n        l1.append(list1[i])\n        l2.append(list2[i])\n        l3.append(list3[i])\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i=0\n    temp=[]\n    while i<len(list1):\n        temp.append(list1[i])\n        i+=1\n    while i<len(list2):\n        temp.append(list2[i])\n        i+=1\n    while i<len(list3):\n        temp.append(list3[i])\n        i+=1\n    return temp\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise Exception(\"Input lists must be of the same length\")\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i=0\n    j=0\n    k=0\n    flat_list=[]\n    while i<len(list1):\n        flat_list.append(list1[i])\n        i+=1\n        j+=1\n        if i==len(list1):\n            i=0\n        if j==len(list2):\n            j=0\n        if k==len(list3):\n            k=0\n    return flat_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    num_dissim = len(test_tup1)\n    dissim_elements = set()\n    for i in range(0, num_dissim):\n        if test_tup1[i] not in dissim_elements and test_tup2[i] not in dissim_elements:\n            dissim_elements.add(test_tup1[i])\n            dissim_elements.add(test_tup2[i])\n            \n    return dissim_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    arr1 = test_tup1[0]\n    arr2 = test_tup1[1]\n    len1 = len(arr1)\n    len2 = len(arr2)\n    arr1 = arr1[0:len1-1]\n    arr2 = arr2[0:len2-1]\n    #print(arr1)\n    #print(arr2)\n    arr3 = arr1 + arr2\n    arr3.sort()\n    #print(arr3)\n    return arr3\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup_1, tup_2 = sorted(test_tup1), sorted(test_tup2)\n    #print(tup_1, tup_2)\n    i, j = 0, 0\n    while i < len(tup_1) and j < len(tup_2):\n        if tup_1[i] < tup_2[j]:\n            i += 1\n        elif tup_1[i] > tup_2[j]:\n            j += 1\n        else:\n            if tup_1[i]!= tup_2[j]:\n                i += 1\n                j += 1\n    return (tup_1[i:], tup_2[j:])\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    matching = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            matching.append(test_tup1[i])\n            \n    return matching\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tuples = set(test_tup1).difference(test_tup2)\n    return dissimilar_tuples\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    l1_sorted = sorted(l1)\n    l2_sorted = sorted(l2)\n    index_list = []\n    for i in range(len(l1_sorted)):\n        for j in range(len(l2_sorted)):\n            if l1_sorted[i] == l2_sorted[j]:\n                index_list.append([i,j])\n    return index_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return test_tup1[1] + test_tup2[1]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Write your code here.\n    c_dict = {}\n    for i in test_tup1:\n        if i not in c_dict:\n            c_dict[i] = test_tup1.count(i)\n    for i in test_tup2:\n        if i not in c_dict:\n            c_dict[i] = test_tup2.count(i)\n    return c_dict\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Start writing your code here\n    tup1 = test_tup1\n    tup2 = test_tup2\n    test_tup3 = []\n    for i in tup1:\n        for j in tup2:\n            if i == j:\n                test_tup3.append(i)\n    return test_tup3\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #remove duplicates\n    test_tup1 = list(set(test_tup1))\n    test_tup2 = list(set(test_tup2))\n    #get the common element\n    common = test_tup1[0]\n    #delete the common element\n    test_tup1.remove(common)\n    test_tup2.remove(common)\n    #loop through two tuples\n    for i in test_tup1:\n        if i not in test_tup2:\n            test_tup2.append(i)\n    return test_tup2\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for x in test_tuple:\n        if x % 2 == 0:\n            even_list.append(x)\n    even_list.sort()\n    return even_fnc(even_list)\n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to remove odd elements in the nested mixed tuple.\n    '''\n    odd_list = []\n    for x in test_tuple:\n        if x % 2!= 0:\n            odd_list.append(x)\n    odd_list.sort()\n    return odd_fnc(odd_list)\n        \ndef full_ele(test_tuple, full_fnc):\n    '''\n    Write a function to remove full elements in the nested mixed tuple.\n    '''\n    return full_fnc(test_tuple)\n    \ndef prime_ele(test_tuple, prime_fnc):\n    '''\n    Write a function to remove prime elements in the nested mixed tuple.\n    '''\n    return prime_fnc(test_tuple)\n    \ndef multi_list_fnc(list_tuple, fnc):\n    '''\n    Write a function to remove multiples in the nested mixed tuple.\n    '''\n    return list(filter(fnc, list_tuple))\n    \ndef even_elem(test_tuple, even_fnc):\n    '''\n    Write a function to remove even elements in the nested mixed tuple.\n    '''\n    return even_ele(test_tuple, even_fnc)\n    \ndef odd_elem(test_tuple, odd_fnc):\n    '''\n    Write a function to remove odd elements in the nested mixed tuple.\n    '''\n    return odd_ele(test_tuple, odd_fnc)\n    \ndef full_elem(test_tuple, full_fnc):\n    '''\n    Write a function to remove full elements in the nested mixed tuple.\n    '''\n    return full_ele(test_tuple, full_fnc)\n    \ndef prime_elem(test_tuple, prime_fnc):\n    '''\n    Write a function to remove prime elements in the nested mixed tuple.\n    '''\n    return prime_ele(test_tuple, prime_fnc)\n    \ndef multi_list(test_tuple, fnc):\n    '''\n    Write a function to remove multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(test_tuple, fnc)\n    \ndef even_multi_list(test_tuple, fnc):\n    '''\n    Write a function to remove even multiples in the nested mixed tuple.\n    '''\n    return multi_list(test_tuple, fnc)\n    \ndef odd_multi_list(test_tuple, fnc):\n    '''\n    Write a function to remove odd multiples in the nested mixed tuple.\n    '''\n    return multi_list(test_tuple, fnc)\n    \ndef full_multi_list(test_tuple, fnc):\n    '''\n    Write a function to remove full multiples in the nested mixed tuple.\n    '''\n    return multi_list(test_tuple, fnc)\n    \ndef prime_multi_list(test_tuple, fnc):\n    '''\n    Write a function to remove prime multiples in the nested mixed tuple.\n    '''\n    return multi_list(test_tuple, fnc)\n    \ndef multi_list_fnc(list_tuple, fnc):\n    '''\n    Write a function to remove multiples in the nested mixed tuple.\n    '''\n    return list(filter(fnc, list_tuple))\n    \ndef even_multi_list_fnc(list_tuple, fnc):\n    '''\n    Write a function to remove even multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef odd_multi_list_fnc(list_tuple, fnc):\n    '''\n    Write a function to remove odd multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef full_multi_list_fnc(list_tuple, fnc):\n    '''\n    Write a function to remove full multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef multi_list_fnc2(list_tuple, fnc):\n    '''\n    Write a function to remove multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef even_multi_list_fnc2(list_tuple, fnc):\n    '''\n    Write a function to remove even multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef odd_multi_list_fnc2(list_tuple, fnc):\n    '''\n    Write a function to remove odd multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef full_multi_list_fnc2(list_tuple, fnc):\n    '''\n    Write a function to remove full multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef prime_multi_list_fnc2(list_tuple, fnc):\n    '''\n    Write a function to remove prime multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef even_multi_list_fnc2(list_tuple, fnc):\n    '''\n    Write a function to remove even multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef odd_multi_list_fnc2(list_tuple, fnc):\n    '''\n    Write a function to remove odd multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef full_multi_list_fnc2(list_tuple, fnc):\n    '''\n    Write a function to remove full multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef even_multi_list_fnc3(list_tuple, fnc):\n    '''\n    Write a function to remove even multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef odd_multi_list_fnc3(list_tuple, fnc):\n    '''\n    Write a function to remove odd multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef full_multi_list_fnc3(list_tuple, fnc):\n    '''\n    Write a function to remove full multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef prime_multi_list_fnc3(list_tuple, fnc):\n    '''\n    Write a function to remove prime multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef even_multi_list_fnc3(list_tuple, fnc):\n    '''\n    Write a function to remove even multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef odd_multi_list_fnc3(list_tuple, fnc):\n    '''\n    Write a function to remove odd multiples in the nested mixed tuple.\n    '''\n    return multi_list_fnc(list_tuple, fnc)\n    \ndef full_multi_list_fnc3(list_tuple, fnc):\n    '''\n    Write a functio"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple) \n    return test_tuple \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, even_fnc)\n    even_fnc(test_tuple, lambda tup, even_fnc=even_fnc: tup.remove(even_fnc(tup, even_fnc)))\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_el = []\n    even_el = even_fnc(test_tuple, even_el)\n    even_tuple = tuple(even_el)\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ele_res = list(test_tuple)\n    for i in range(len(even_ele_res)):\n        if i % 2!= 0:\n            even_ele_res.remove(even_ele_res[i])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_str = ''\n    for ele in test_tuple:\n        if ele % 2 == 0:\n            even_str += ele\n        else:\n            even_str += str(ele)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, even_fnc)\n    even_fnc(tuple(t for t in test_tuple if isinstance(t, int)))\n    even_fnc(tuple(t for t in test_tuple if not isinstance(t, int)))\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple\n    even_tuple = tuple([item for item in even_tuple if item % 2 == 0])\n    even_tuple = tuple([item for item in even_tuple if item % 2!= 0])\n    even_tuple = tuple([item for item in even_tuple if item % 2 == 0])\n    even_tuple = tuple([item for item in even_tuple if item % 2!= 0])\n    if even_fnc(even_tuple, test_tuple):\n        return even_tuple\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2 == 0: \n        even_fnc(test_tuple, even_fnc) \n    else:\n        even_fnc(test_tuple, even_fnc) \n        even_fnc(test_tuple[1::2], even_fnc)\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove even elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2!= 0: \n        odd_fnc(test_tuple, odd_fnc) \n    else: \n        odd_fnc(test_tuple, odd_fnc) \n        odd_fnc(test_tuple[1::2], odd_fnc) \n    \ndef odd_pos(test_tuple, odd_fnc): \n    '''\n    Write a function to remove odd elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2!= 0: \n        odd_fnc(test_tuple, odd_fnc) \n    else:\n        odd_fnc(test_tuple, odd_fnc) \n        odd_fnc(test_tuple[1::2], odd_fnc) \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def odd_ele(tuple, odd_fnc): \n        '''\n        write a function that removes the even elements of a tuple. \n        '''\n        even_list = []\n        odd_list = []\n        for t in tuple: \n            if t % 2 == 0: \n                even_list.append(t) \n            else: \n                odd_list.append(t)\n        return odd_list, even_list \n    odd_tuple, even_tuple = odd_ele(test_tuple, odd_fnc) \n    return even_tuple + odd_tuple \n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 4*b*s/3\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    l=b//s\n    for i in range(l):\n        for j in range(l):\n            print(f\"x={j}+i={i}\")\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if type(b) is not int or type(s) is not int:\n        return ValueError(\"Please use int values only!\")\n    if b < 0 or s < 0:\n        return ValueError(\"Please use positive values only!\")\n    return s * b\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # TODO: Your code here\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    #Base edge of the pyramid\n    s = s \n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = sqrt(4*b)\n    h = (2*a)*sqrt(3)/4\n    return h\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your code here\n    if(b==0):\n        return 0\n    else:\n        return ((b*b) - (s*(s-1)))\n    \ndef triangle(a,b,c):\n    '''\n    Write a python function to find the area of a triangle with three sides.\n    '''\n    # Your code here\n    if(a==0):\n        if(b==0):\n            if(c==0):\n                return 0\n            else:\n                return (b*c)\n        else:\n            return ((b*b) - (c*c))\n    else:\n        return (a*b*c)\n    \ndef area(base,height):\n    '''\n    Write a python function to find the area of a pyramid with a given base edge and height.\n    '''\n    # Your code here\n    if(base==0):\n        return 0\n    else:\n        return ((base*height)/2)\n    \ndef cube(a,b,c):\n    '''\n    Write a python function to find the area of a cube with a given base edge and height.\n    '''\n    # Your code here\n    if(a==0):\n        if(b==0):\n            if(c==0):\n                return 0\n            else:\n                return (b*c)\n        else:\n            return ((b*b) - (c*c))\n    else:\n        return (a*b*c)\n    \ndef volume(base,height):\n    '''\n    Write a python function to find the volume of a pyramid with a given base edge and height.\n    '''\n    # Your code here\n    if(base==0):\n        return 0\n    else:\n        return ((base*height)/2)\n    \ndef ex1(base,height):\n    '''\n    Write a python function to compute the area of a cube with a given base edge and height.\n    '''\n    # Your code here\n    if(base==0):\n        return 0\n    else:\n        return base*height\n    \ndef ex2(base,height):\n    '''\n    Write a python function to compute the area of a cube with a given base edge and height.\n    '''\n    # Your code here\n    if(base==0):\n        return 0\n    else:\n        return base*height\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    assert s>=0, 'Base edge should be positive'\n    assert s<=b, 'Height of base should be greater than base edge'\n    \n    return (s*s*(4+s)*(4+s))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def area(base,height):\n        # formula is h x base*height\n        area = base*height\n        return area\n    # create the base and height of the pyramid\n    base = int(b)\n    height = int(s)\n    # create a temporary area where the height is computed\n    tarea = area(base,height)\n    #print('tarea:',tarea)\n    return tarea"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        print(i)\n        if dict1.get(i):\n            print(1)\n        else:\n            print(0)\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        print(i)\n    print(dict1)\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return(all(type(x) is dict for x in dict1))\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    elif num <= 4:\n        return 2\n    elif num <= 8:\n        return 3\n    elif num <= 15:\n        return 4\n    elif num <= 20:\n        return 5\n    elif num <= 100:\n        return 6\n    else:\n        return 7\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # 0, 1,..., num - 1\n    # print(num)\n    # initialise n, n-1,..., 1\n    # print(n)\n    # n = n-1, n-2... 1\n    # n = n-1, n-2... 0\n    # n = n-1, n-2... 0\n    # n = n-1,... 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res=0\n    for i in range(1,num+1):\n        res=res+((i*(i+1))//2)\n    return res\ndef count_numbers(n):\n    '''\n    Write a function which returns the number of distinct \n    numbers less than or equal to the given number n.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if i<=n:\n            count=count+1\n    return count\ndef fibonacci_number(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_d(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_e(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_f(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_g(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_h(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_i(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_j(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_k(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_l(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_m(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_n(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_o(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_p(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_q(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_r(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_s(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_t(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_u(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_v(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_w(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_x(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_y(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=1,1\n    for i in range(n):\n        a,b=b,a+b\n        res=res+a\n    return res\ndef fibonacci_number_z(n):\n    '''\n    Write a function which returns the nth fibonacci number.\n    '''\n    res=0\n    a,b=0,1\n    for i in range(n):\n        a"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        raise ValueError(\"nth value must be greater than zero.\")\n    elif num == 1:\n        return 1\n    else:\n        catalan_n = 1\n        catalan_n_prev = 1\n        for i in range(2,num+1):\n            catalan_n_prev = catalan_n\n            catalan_n = catalan_n + catalan_n_prev\n        return catalan_n\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    from math import factorial\n    \n    # print(factorial(num))\n    \n    return (factorial(num))"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<0:\n        raise ValueError('nth_catalan_number() number should be positive!')\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    num += 1\n    return (2 * num * (catalan_number(num - 1) + (num - 1))) / math.factorial(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 0\n    elif num > 1:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 4\n    elif num == 3:\n        return 9\n    elif num == 4:\n        return 42\n    elif num == 5:\n        return 137\n    elif num == 6:\n        return 262\n    elif num == 7:\n        return 1079\n    elif num == 8:\n        return 3280\n    elif num == 9:\n        return 1041\n    elif num == 10:\n        return 4113\n    elif num == 11:\n        return 100\n    elif num == 12:\n        return 1104\n    elif num == 13:\n        return 4041\n    elif num == 14:\n        return 4133\n    elif num == 15:\n        return 1109\n    elif num == 16:\n        return 4149\n    elif num == 17:\n        return 1102\n    elif num == 18:\n        return 2552\n    elif num == 19:\n        return 4129\n    elif num == 20:\n        return 1092\n    elif num == 21:\n        return 1451\n    elif num == 22:\n        return 4289\n    elif num == 23:\n        return 107\n    elif num == 24:\n        return 29\n    elif num == 25:\n        return 965\n    elif num == 26:\n        return 975\n    elif num == 27:\n        return 107\n    elif num == 28:\n        return 3631\n    elif num == 29:\n        return 4198\n    elif num == 30:\n        return 107\n    elif num == 31:\n        return 100\n    elif num == 32:\n        return 1152\n    elif num == 33:\n        return 1094\n    elif num == 34:\n        return 2565\n    elif num == 35:\n        return 1499\n    elif num == 36:\n        return 793\n    elif num == 37:\n        return 5542\n    elif num == 38:\n        return 100\n    elif num == 39:\n        return 3493\n    elif num == 40:\n        return 4102\n    elif num == 41:\n        return 765\n    elif num == 42:\n        return 4379\n    elif num == 43:\n        return 2103\n    elif num == 44:\n        return 4697\n    elif num == 45:\n        return 727\n    elif num == 46:\n        return 2113\n    elif num == 47:\n        return 991\n    elif num == 48:\n        return 963\n    elif num == 49:\n        return 34\n    elif num == 50:\n        return 489\n    elif num == 51:\n        return 3457\n    elif num == 52:\n        return 789\n    elif num == 53:\n        return 545\n    elif num == 54:\n        return 473\n    elif num == 55:\n        return 5633\n    elif num == 56:\n        return 15\n    elif num == 57:\n        return 2187\n    elif num == 58:\n        return 683\n    elif num == 59:\n        return 759\n    elif num == 60:\n        return 4333\n    elif num == 61:\n        return 391\n    elif num == 62:\n        return 953\n    elif num == 63:\n        return 7\n    elif num == 64:\n        return 565\n    elif num == 65:\n        return 478\n    elif num == 66:\n        return 841\n    elif num == 67:\n        return 449\n    elif num == 68:\n        return 1451\n    elif num == 69:\n        return 459\n    elif num == 70:\n        return 679\n    elif num == 71:\n        return 631\n    elif num == 72:\n        return 901\n    elif num == 73:\n        return 521\n    elif num == 74:\n        return 100\n    elif num == 75:\n        return 695\n    elif num == 76:\n        return 9\n    elif num == 77:\n        return 70\n    elif num == 78:\n        return 438\n    elif num == 79:\n        return 4\n    elif num == 80:\n        return 687\n    elif num == 81:\n        return 57\n    elif num == 82:\n        return 11\n    elif num == 83:\n        return 13\n    elif num == 84:\n        return 2\n    elif num == 85:\n        return 1\n    elif num == 86:\n        return 100\n    elif num == 87:\n        return 101\n    elif num == 88:\n        return 6\n    elif num == 89:\n        return 4\n    elif num == 90:\n        return 3\n    elif num == 91:\n        return 2\n    elif num == 92:\n        return 7\n    elif num == 93:\n        return 4\n    elif num == 94:\n        return 9\n    elif num == 95:\n        return 17\n    elif num == 96:\n        return 7\n    elif num == 97:\n        return 2\n    elif num == 98:\n        return 6\n    elif num == 99:\n        return 4\n    elif num == 100:\n        return 3\n    elif num == 101:\n        return 2\n    elif num == 102:\n        return 8\n    elif num == 103:\n        return 7\n    elif num == 104:\n        return 3\n    elif num == 105:\n        return 2\n    elif num == 106:\n        return 6\n    elif num == 107:\n        return 4\n    elif num == 108:\n        return 7\n    elif num == 109:\n        return 5\n    elif num == 110:\n        return 7\n    elif num == 111:\n        return 1\n    elif num == 112:\n        return 6\n    elif num == 113:\n        return 5\n    elif num == 114:\n        return 4\n    elif num == 115:\n        return 4\n    elif num == 116:\n        return 9\n    elif num == 117:\n        return 2\n    elif num == 118:\n        return 6\n    elif num == 119:\n        return 1\n    elif num == 120:\n        return 2\n    elif num == 121:\n        return 2\n    elif num == 122:\n        return 6\n    elif num == 123:\n        return 3\n    elif num == 124:\n        return 3\n    elif num == 125:\n        return 4\n    elif num == 126:\n        return 4\n    elif num == 127:\n        return 4\n    elif num == 128:\n        return 5\n    elif num == 129:\n        return 6\n    elif num == 130:\n        return 4\n    elif num == 131:\n        return 4\n    elif num == 132:\n        return 5\n    elif num == 133:\n        return 1\n    elif num == 134:\n        return 2\n    elif num == 135:\n        return 5\n    elif num == 136:\n        return 6\n    elif num == 137:\n        return 2\n    elif num == 138:\n        return 4\n    elif num == 139:\n        return 9\n    elif num == 140:\n        return 10\n    elif num == 141:\n        return 5\n    elif num == 142:\n        return 7\n    elif num == 143:\n        return 7\n    elif num == 144:\n        return 2\n    elif num == 145:\n        return 5\n    elif num == 146:\n        return 6\n    elif num == 147:\n        return 2\n    elif num == 148:\n        return 8\n    elif num == 149:\n        return 5\n    elif num == 150:\n        return 5\n    elif num == 151:\n        return 4\n    elif num == 152:\n        return 3\n    elif num == 153:\n        return 4\n    elif num == 154:\n        return 9\n    elif num == 155:\n        return 4\n    elif num == 156:\n        return 5\n    elif num == 157:\n        return 4\n    elif num == 158:\n        return 4\n    elif num == 159:\n        return 9\n    elif num == 160:\n        return 2\n    elif num == 161:\n        return 7\n    elif num == 162:\n        return 7\n    elif num == 163:\n        return 1\n    eli"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text_list = text.split('-')\n    symbol_list = ['ly', 'i', 'y']\n    i = 0\n    final_adverb = ''\n    for symbol in symbol_list:\n        if symbol in text_list[i]:\n            i += 1\n            final_adverb = symbol +'' + text_list[i] +''\n            if i == len(text_list):\n                break\n        else:\n            i = 0\n    return final_adverb\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    #this is the regular expression that catches the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly])([ly])')\n    m = regex.search(text)\n    if m:\n        adverbs.append(m.group(1))\n        adverbs.append(m.group(2))\n        adverbs.append(m.group(3))\n    else:\n        pass\n    #this is the regular expression that captures the cases of the following adverbs: 'ly' + ly\n    regex = re.compile(r'([ly"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    i = 0\n    for token in re.finditer('(ly|ly$)', text):\n        adverbs.append(token.group(0))\n        i = i + 1\n        if i == 2:\n            break\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    positions = []\n    # print(text)\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha() and text[positions[i]+3].isalpha():\n            result.append(text[positions[i]+1:positions[i]+3])\n            # print(result)\n    # print(result)\n    return result\n    \ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with \"l\" and its positions in a given string.\n    '''\n    result = []\n    positions = []\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha() and text[positions[i]+3].isalpha():\n            result.append(text[positions[i]+1:positions[i]+3])\n            # print(result)\n    # print(result)\n    return result\n    \ndef find_comma_in_noun(text):\n    '''\n    Write a function to find the first comma in a given string.\n    '''\n    result = []\n    positions = []\n    # print(text)\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha() and text[positions[i]+3].isalpha():\n            result.append(text[positions[i]+1:positions[i]+3])\n            # print(result)\n    # print(result)\n    return result\n    \ndef find_closing_brackets(text):\n    '''\n    Write a function to find the first closing bracket ending with a number.\n    '''\n    result = []\n    positions = []\n    # print(text)\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha():\n            result.append(text[positions[i]+1:positions[i]+2])\n            # print(result)\n    # print(result)\n    return result\n    \ndef find_single_noun_ending(text):\n    '''\n    Write a function to find the first single noun ending with \"s\" and its positions in a given string.\n    '''\n    result = []\n    positions = []\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha():\n            result.append(text[positions[i]+1:positions[i]+2])\n            # print(result)\n    # print(result)\n    return result\n    \ndef find_middle_noun_ending(text):\n    '''\n    Write a function to find the first middle noun ending with \"n\" and its positions in a given string.\n    '''\n    result = []\n    positions = []\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha() and text[positions[i]+3].isalpha():\n            result.append(text[positions[i]+1:positions[i]+3])\n            # print(result)\n    # print(result)\n    return result\n    \ndef find_last_noun_ending(text):\n    '''\n    Write a function to find the first last noun ending with \"l\" and its positions in a given string.\n    '''\n    result = []\n    positions = []\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha():\n            result.append(text[positions[i]+1:positions[i]+2])\n            # print(result)\n    # print(result)\n    return result\n    \ndef find_double_noun_ending(text):\n    '''\n    Write a function to find the first double noun ending with \"d\" and its positions in a given string.\n    '''\n    result = []\n    positions = []\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha():\n            result.append(text[positions[i]+1:positions[i]+2])\n            # print(result)\n    # print(result)\n    return result\n    \ndef find_comma_ending(text):\n    '''\n    Write a function to find the first comma ending with a number.\n    '''\n    result = []\n    positions = []\n    # print(text)\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha():\n            if text[positions[i]+2].isalpha():\n                result.append(text[positions[i]+1:positions[i]+2])\n                # print(result)\n    # print(result)\n    return result\n    \ndef find_closing_bracket_ending(text):\n    '''\n    Write a function to find the first closing bracket ending with a number.\n    '''\n    result = []\n    positions = []\n    # print(text)\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha():\n            result.append(text[positions[i]+1:positions[i]+2])\n            # print(result)\n    # print(result)\n    return result\n    \ndef find_single_adverb_ending(text):\n    '''\n    Write a function to find the first single adverb ending with \"a\" and its positions in a given string.\n    '''\n    result = []\n    positions = []\n    for i in range(len(text)):\n        if text[i].isalpha():\n            positions.append(i)\n    # print(positions)\n    for i in range(len(positions)-1, -1, -1):\n        if text[positions[i]+1].isalpha() and text[positions[i]+2].isalpha():\n            result.append(text"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for x in text:\n        if x in ['ly','m','m']:\n            adverbs.append(x)\n    adverbs.remove('')\n    return adverbs\ndef find_adj(text):\n    '''\n    Write a function to find the first adjective ending with these words.\n    '''\n    adj = []\n    for x in text:\n        if x in ['a', 'e', 'i', 'o', 'u', '\u00e1', '\u00e9', '\u00ed', '\u00f3', '\u00fa', '\u00e3', '\u00e9']:\n            adj.append(x)\n    adj.remove('')\n    return adj\ndef find_noun(text):\n    '''\n    Write a function to find the first noun ending with these words.\n    '''\n    noun = []\n    for x in text:\n        if x in ['a', 'e', 'i', 'o', 'u', '\u00e3', '\u00e9', '\u00ed', '\u00f3', '\u00fa', '\u00e3', '\u00e9']:\n            noun.append(x)\n    noun.remove('')\n    return noun\ndef get_start(text):\n    '''\n    Write a function to find the start of the string.\n    '''\n    start = []\n    for x in text:\n        if x in ['\u00e1', '\u00e9', '\u00ed', '\u00f3', '\u00fa', '\u00e3', '\u00e9']:\n            start.append(x)\n    start.remove('')\n    return start\ndef get_end(text):\n    '''\n    Write a function to find the end of the string.\n    '''\n    end = []\n    for x in text:\n        if x in ['\u00e1', '\u00e9', '\u00ed', '\u00f3', '\u00fa', '\u00e3', '\u00e9']:\n            end.append(x)\n    end.remove('')\n    return end\ndef get_all_noun_ex_two(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_2 = []\n    noun_ex_2 = []\n    for x in start:\n        if x not in end:\n            noun_2.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_2.append(x)\n    return noun_2, noun_ex_2\ndef get_all_noun_ex_three(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_3 = []\n    noun_ex_3 = []\n    for x in start:\n        if x not in end:\n            noun_3.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_3.append(x)\n    return noun_3, noun_ex_3\ndef get_all_noun_ex_four(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_4 = []\n    noun_ex_4 = []\n    for x in start:\n        if x not in end:\n            noun_4.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_4.append(x)\n    return noun_4, noun_ex_4\ndef get_all_noun_ex_five(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_5 = []\n    noun_ex_5 = []\n    for x in start:\n        if x not in end:\n            noun_5.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_5.append(x)\n    return noun_5, noun_ex_5\ndef get_all_noun_ex_six(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_6 = []\n    noun_ex_6 = []\n    for x in start:\n        if x not in end:\n            noun_6.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_6.append(x)\n    return noun_6, noun_ex_6\ndef get_all_noun_ex_seven(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_7 = []\n    noun_ex_7 = []\n    for x in start:\n        if x not in end:\n            noun_7.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_7.append(x)\n    return noun_7, noun_ex_7\ndef get_all_noun_ex_eight(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_8 = []\n    noun_ex_8 = []\n    for x in start:\n        if x not in end:\n            noun_8.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_8.append(x)\n    return noun_8, noun_ex_8\ndef get_all_noun_ex_nine(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_9 = []\n    noun_ex_9 = []\n    for x in start:\n        if x not in end:\n            noun_9.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_9.append(x)\n    return noun_9, noun_ex_9\ndef get_all_noun_ex_ten(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_10 = []\n    noun_ex_10 = []\n    for x in start:\n        if x not in end:\n            noun_10.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_10.append(x)\n    return noun_10, noun_ex_10\ndef get_all_noun_ex_eleven(text):\n    '''\n    Write a function to find the nouns of the end of the words and the words of the start of the string.\n    '''\n    start = get_start(text)\n    end = get_end(text)\n    noun_11 = []\n    noun_ex_11 = []\n    for x in start:\n        if x not in end:\n            noun_11.append(x)\n    for x in end:\n        if x not in start:\n            noun_ex_11.append(x)\n    return noun_11, noun_ex_11\ndef get_all_noun_ex_twelve(text):\n    '''\n    Write a function to find the nouns of the end of th"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_regex = re.compile('(?:ly|lyl)')\n    match = adverb_regex.search(text)\n    if not match:\n        return 0\n    adverb_text = match.group(1)\n    adverb_pos = [int(pos) for pos in re.findall(r'(?<=ly)', adverb_text)]\n    adverb_pos.sort()\n    return adverb_pos\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['ly', 'ly ']\n    for i in range(len(text)-2):\n        if text[i:i+3] in adverbs:\n            start = i\n            if i+3 < len(text):\n                if text[i+3] == 'y':\n                    end = i + 3\n                else:\n                    end = i + 4\n                return start,end\n    return None\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # check if no adverb found\n    if 'not' in text:\n        return 'No'\n    \n    #split text\n    text = text.split()\n    \n    # check if the last adverb is not ly\n    if not 'ly' in text:\n        return 'No'\n    \n    # return the adverb and the position\n    return text[text.index('ly')+1]\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    list = []\n    my_string = text.split(\" \")\n    for i in my_string:\n        if i.endswith(\"ly\") and i!= \"ly\":\n            list.append(i)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text_without_adverbs = text.replace('ly', '')\n    adverbs = text_without_adverbs.split(' ')\n    if len(adverbs) > 1:\n        for i in range(len(adverbs)-1):\n            if (adverbs[i].endswith(adverbs[i+1])) and adverbs[i+1].lower() == 'ly':\n                return [adverbs[i], i+1]\n    return None\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with 'r' and its positions in a given string.\n    '''\n    text_without_nouns = text.replace('r', '')\n    nouns = text_without_nouns.split(' ')\n    if len(nouns) > 1:\n        for i in range(len(nouns)-1):\n            if (nouns[i].endswith(nouns[i+1])) and nouns[i+1].lower() == 'n':\n                return [nouns[i], i+1]\n    return None\ndef find_verb_word(text, word):\n    '''\n    Write a function to find the first verb ending with 'l' and its positions in a given string.\n    '''\n    text_without_verb_word = text.replace('l', '')\n    verb_word = text_without_verb_word.split(' ')\n    if len(verb_word) > 1:\n        for i in range(len(verb_word)-1):\n            if verb_word[i].endswith(verb_word[i+1]) and verb_word[i+1].lower() == 'l':\n                return [verb_word[i], i+1]\n    return None\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adjective ending with 'a' and its positions in a given string.\n    '''\n    text_without_adjectives = text.replace('a', '')\n    adjectives = text_without_adjectives.split(' ')\n    if len(adjectives) > 1:\n        for i in range(len(adjectives)-1):\n            if adjectives[i].endswith(adjectives[i+1])) and adjectives[i+1].lower() == 'a':\n                return [adjectives[i], i+1]\n    return None\ndef find_noun_stem(text, stem):\n    '''\n    Write a function to find the first noun ending with's' and its positions in a given string.\n    '''\n    text_without_noun_stem = text.replace('s', '')\n    noun_stem = text_without_noun_stem.split(' ')\n    if len(noun_stem) > 1:\n        for i in range(len(noun_stem)-1):\n            if noun_stem[i].endswith(noun_stem[i+1])) and noun_stem[i+1].lower() =='s':\n                return [noun_stem[i], i+1]\n    return None\ndef find_adverb_stem(text, stem):\n    '''\n    Write a function to find the first adverb ending with 'e' and its positions in a given string.\n    '''\n    text_without_adverb_stem = text.replace('e', '')\n    adverb_stem = text_without_adverb_stem.split(' ')\n    if len(adverb_stem) > 1:\n        for i in range(len(adverb_stem)-1):\n            if adverb_stem[i].endswith(adverb_stem[i+1])) and adverb_stem[i+1].lower() == 'e':\n                return [adverb_stem[i], i+1]\n    return None\ndef find_pronoun(text, word):\n    '''\n    Write a function to find the first pronoun ending with 'p' and its positions in a given string.\n    '''\n    text_without_pronoun = text.replace('p', '')\n    pronoun = text_without_pronoun.split(' ')\n    if len(pronoun) > 1:\n        for i in range(len(pronoun)-1):\n            if pronoun[i].endswith(pronoun[i+1]):\n                return [pronoun[i], i+1]\n    return None\ndef find_intransitive_pronoun(text, word):\n    '''\n    Write a function to find the first interransitive pronoun ending with 'i' and its positions in a given string.\n    '''\n    text_without_intransitive_pronoun = text.replace('i', '')\n    intransitive_pronoun = text_without_intransitive_pronoun.split(' ')\n    if len(intransitive_pronoun) > 1:\n        for i in range(len(intransitive_pronoun)-1):\n            if intransitive_pronoun[i].endswith(intransitive_pronoun[i+1]):\n                return [intransitive_pronoun[i], i+1]\n    return None\ndef find_transitive_pronoun(text, word):\n    '''\n    Write a function to find the first transitive pronoun ending with 't' and its positions in a given string.\n    '''\n    text_without_transitive_pronoun = text.replace('t', '')\n    transitive_pronoun = text_without_transitive_pronoun.split(' ')\n    if len(transitive_pronoun) > 1:\n        for i in range(len(transitive_pronoun)-1):\n            if transitive_pronoun[i].endswith(transitive_pronoun[i+1]):\n                return [transitive_pronoun[i], i+1]\n    return None\ndef find_adjective_ending(text, ending):\n    '''\n    Write a function to find the first adjective ending with 'a' and its positions in a given string.\n    '''\n    text_without_adjective_ending = text.replace('a', '')\n    adjective_ending = text_without_adjective_ending.split(' ')\n    if len(adjective_ending) > 1:\n        for i in range(len(adjective_ending)-1):\n            if adjective_ending[i].endswith(ending):\n                return [adjective_ending[i], i+1]\n    return None\ndef find_adverb_ending(text, ending):\n    '''\n    Write a function to find the first adverb ending with 'e' and its positions in a given string.\n    '''\n    text_without_adverb_ending = text.replace('e', '')\n    adverb_ending = text_without_adverb_ending.split(' ')\n    if len(adverb_ending) > 1:\n        for i in range(len(adverb_ending)-1):\n            if adverb_ending[i].endswith(ending):\n                return [adverb_ending[i], i+1]\n    return None\ndef find_noun_suffix(text, ending):\n    '''\n    Write a function to find the first noun ending with's' and its positions in a given string.\n    '''\n    text_without_noun_ending = text.replace('s', '')\n    noun_ending = text_without_noun_ending.split(' ')\n    if len(noun_ending) > 1:\n        for i in range(len(noun_ending)-1):\n            if noun_ending[i].endswith(ending):\n                return [noun_ending[i], i+1]\n    return None\ndef find_noun_adjective(text, ending):\n    '''\n    Write a function to find the first noun ending with 'e' and its positions in a given string.\n    '''\n    text_without_noun_ending = text.replace('e', '')\n    adjective_ending = text_without_adjective_ending.split(' ')\n    if len(adjective_ending) > 1:\n        for i in range(len(adjective_ending)-1):\n            if adjective_ending[i].endswith(ending):\n                return [adjective_ending[i], i+1]\n    return None"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    total_cost = 0\n    h_heap = []\n    heapq.heapify(h_heap)\n    for i in items:\n        total_cost += i[1]\n    heapq.heappush(h_heap,(-total_cost,n))\n    while h_heap:\n        item = heapq.heappop(h_heap)\n        if item[1] == n:\n            return item[0]\n        total_cost += item[1]\n        heapq.heappush(h_heap,(-total_cost,n))\n    return -1\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    m = len(items)\n    nodes = [None]*(m+1)\n    nodes[0] = [None]*(m+1)\n    for i in range(m+1):\n        nodes[i+1] = []\n    for i in range(n):\n        nodes[int(items[i][0])].append((items[i][1],i))\n    # print nodes[1]\n    heap = []\n    heapq.heappush(heap,(0,0))\n    nodes[n] = [nodes[1],nodes[1]]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if not items or len(items) == 0:\n        return []\n    # get the first item from the list\n    first_item = items[0]\n    # remove the item\n    items.remove(first_item)\n    # get the n most expensive items\n    res = []\n    for i in range(n):\n        heapq.heappush(res, (-first_item[0],first_item[1]))\n    # pop the n most expensive items\n    while len(res) > n:\n        heapq.heappop(res)\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for i in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap,i)\n        else:\n            if i < heapq.heappop(min_heap):\n                heapq.heappush(min_heap,i)\n    return heapq.heappop(min_heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for x in items:\n        heapq.heappush(heap, (x[2],x[0],x[1]))\n    result = heapq.nlargest(n,heap)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n_heap = []\n    n_heap_sort = []\n    for i in range(0,n):\n        heapq.heappush(n_heap,items[i][0])\n    for i in range(1,n):\n        heapq.heappush(n_heap_sort,heapq.heappushpop(n_heap,items[i][0]))\n    return heapq.nlargest(n,n_heap_sort)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        if items[i][0]!= 0:\n            heapq.heappush(heap,items[i][1])\n    ans = [heapq.heappop(heap) for _ in range(n)]\n    return ans\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item)\n    res = heapq.nlargest(n,heap)\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a priority queue of the items, in order of the price\n    q = []\n    for item in items:\n        q.append((item['price'],item['count']))\n    # Sort the queue in ascending order\n    q.sort(reverse=True)\n    # Starting with the first item, take the first n items\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(q[0][0],q[0][1]))\n        for j in range(1,len(q)):\n            if q[j][0]<heap[0][0]:\n                heapq.heapreplace(heap,(q[j][0],q[j][1]))\n    # Return the n most expensive items\n    return heapq.nlargest(n,heap)\n    \nitems = [\n    {'name': 'Rolf Smith', 'price': '$1.50', 'count': 5},\n    {'name': 'Bob Smith', 'price': '$3.00', 'count': 2},\n    {'name': 'Jen Smith', 'price': '$2.50', 'count': 4},\n    {'name': 'Anne Smith', 'price': '$2.20', 'count': 3},\n    {'name': 'Marilyn Smith', 'price': '$2.40', 'count': 5}\n    ]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # for item in items:\n    #     count[item] += 1\n    # if count[items[0]] == 0:\n    #     return None\n    # else:\n    #     heapq.heapify(items)\n    #     return heapq.nlargest(n,items)\n    print('expensive_items:',items)\n    if len(items) == 0:\n        return None\n    else:\n        heapq.heapify(items)\n        item_count = [0]*len(items)\n        for item in items:\n            item_count[items.index(item)] += 1\n        return heapq.nlargest(n,items,key=item_count.__getitem__)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n],l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) > n:\n        print(\"More than n number of elements\")\n    elif len(l) < n:\n        l.append(l[0])\n        print(\"Split\", len(l), \"elements\")\n    else:\n        l.insert(n, l[0])\n        print(\"Split\", len(l), \"elements\")\n    print(l)\n    print(len(l))\n    # print(l)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    part = l[:n]\n    # Add the first part to the end of the list\n    part += l[n:]\n    # Return the new array\n    return part\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    #define list as a single variable\n    list = l\n    #print(l)\n    #print(list)\n    #print(len(list))\n    #print(len(list[0]))\n    #print(len(list[0][0]))\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    s = []\n    return s\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[0:n]\n    l2 = l[n:]\n    return [l1, l2]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l[::-1]\n    k = l[-n:]\n    return l, k\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = list(l)\n    a.insert(0, a[0])\n    return a\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    if len(listx) == 0:\n        return ()\n    \n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in listx:\n        tup = tup + (i, )\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = ()\n    for i in range(len(listx)):\n        tuplex += (listx[i],)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list\n    \n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    # pass\n    # map()\n    # tuple()\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # get the length of the list\n    L = len(listx)\n    # create a tuple of the list\n    tup = tuple(listx)\n    # make it the tuple\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for i in listx:\n        t += (i,)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return sum(nums) - sum(nums[::-1])\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # TODO: replace the above code with a helper function\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min = nums[0]\n    max = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        if nums[i] < min:\n            min = nums[i]\n    if min > max:\n        print(min,max)\n    else:\n        print(max,min)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(list(map(abs, nums))) - min(list(map(abs, nums)))\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = len(nums)\n    if l == 0:\n        return 0\n    elif l == 1:\n        return nums[0]\n    elif l == 2:\n        if nums[0] > nums[1]:\n            return nums[1] - nums[0]\n        else:\n            return nums[0] - nums[1]\n    elif l == 3:\n        if nums[0] > nums[1]:\n            return nums[1] - nums[0] - nums[2]\n        elif nums[1] > nums[0]:\n            return nums[1] - nums[0] - nums[2]\n        else:\n            return nums[1] - nums[0] - nums[2] - nums[3]\n    elif l == 4:\n        if nums[0] > nums[1]:\n            return nums[1] - nums[0] - nums[2] - nums[3]\n        elif nums[1] > nums[0]:\n            return nums[1] - nums[0] - nums[2] - nums[3] - nums[4]\n        else:\n            return nums[1] - nums[0] - nums[2] - nums[3] - nums[4] - nums[5]\n    elif l == 5:\n        if nums[0] > nums[1]:\n            return nums[1] - nums[0] - nums[2] - nums[3] - nums[4] - nums[5]\n        elif nums[1] > nums[0]:\n            return nums[1] - nums[0] - nums[2] - nums[3] - nums[4] - nums[5] - nums[6]\n        else:\n            return nums[1] - nums[0] - nums[2] - nums[3] - nums[4] - nums[5] - nums[6] - nums[7]\n    else:\n        if nums[0] > nums[1]:\n            return nums[1] - nums[0] - nums[2] - nums[3] - nums[4] - nums[5] - nums[6] - nums[7] - nums[8]\n        elif nums[1] > nums[0]:\n            return nums[1] - nums[0] - nums[2] - nums[3] - nums[4] - nums[5] - nums[6] - nums[7] - nums[8] - nums[9]\n        else:\n            return nums[1] - nums[0] - nums[2] - nums[3] - nums[4] - nums[5] - nums[6] - nums[7] - nums[8] - nums[9] - nums[10]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min = nums[0]\n    max = nums[0]\n    for num in nums:\n        if num > max:\n            max = num\n        elif num < min:\n            min = num\n    return max - min\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    for i in range(0,len(nums)):\n        for j in range(0,len(nums)):\n            if i < j:\n                x = nums[i]\n                y = nums[j]\n                if x > y:\n                    return x-y\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    small = None\n    large = None\n    small_num = nums[0]\n    large_num = nums[0]\n    for num in nums:\n        if num < small_num:\n            if large == None or num > large:\n                large = num\n        elif num > large_num:\n            if small == None or num < small:\n                small = num\n        else:\n            if num!= large_num:\n                large_num = num\n    return large_num-small_num\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = abs(nums[i])\n    return nums\n    \ndef find_max_smallest(nums):\n    '''\n    Write a python function to find the maximum value in a given list of numbers.\n    '''\n    nums = big_diff(nums)\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n    return max(nums)\n    \ndef find_min_largest(nums):\n    '''\n    Write a python function to find the minimum value in a given list of numbers.\n    '''\n    nums = big_diff(nums)\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n    return min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return 1 if (a ** 2 + b ** 2) == (a ** 2 + b ** 2) else 0\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return a\n    s = 0\n    for x in range(1, a + 1):\n        if a % x == 0 and b % x == 0:\n            s += x\n    if s == b:\n        return s\n    if s > b:\n        return perfect_squares(b, s)\n    else:\n        return perfect_squares(a, s)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    for i in range(abs(a) + 1):\n        for j in range(abs(b) + 1):\n            if (i + j) % 2 == 0:\n                res.append(i*i + j*j)\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        a, b = b, a\n    \n    sq_list = []\n    for num in range(b, a+1):\n        if num**2 == num:\n            sq_list.append(num)\n            \n    return sq_list\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return [a]\n    if b < 0:\n        return []\n    if a == b:\n        return []\n    if a == 2:\n        return [a]\n    if a == 3:\n        return [a,a]\n    if a == 4:\n        return [a,a,a]\n    if a == 5:\n        return [a,a,a,a]\n    if a == 6:\n        return [a,a,a,a,a]\n    if a == 7:\n        return [a,a,a,a,a,a]\n    if a == 8:\n        return [a,a,a,a,a,a,a]\n    if a == 9:\n        return [a,a,a,a,a,a,a,a]\n    if a == 10:\n        return [a,a,a,a,a,a,a,a,a]\n    if a == 11:\n        return [a,a,a,a,a,a,a,a,a,a]\n    if a == 12:\n        return [a,a,a,a,a,a,a,a,a,a,a]\n    if a == 13:\n        return [a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 14:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 15:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 16:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 17:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 18:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 19:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 20:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 21:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 22:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 23:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 24:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 25:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 26:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 27:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 28:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 29:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 30:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 31:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 32:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 33:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 34:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 35:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 36:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 37:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 38:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 39:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 40:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 41:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 42:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 43:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 44:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 45:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 46:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 47:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 48:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    if a == 49:\n        return [a,a,a,a,a,"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    assert type(a) == int and type(b) == int\n    if a * a == b * b:\n        return True\n    elif a * a > b * b:\n        return False\n    elif a * b > b * a:\n        return False\n    else:\n        return a * a == b * b\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 0 or b == 0 or a == b:\n        return False\n    elif a < b:\n        a, b = b, a\n    current_square = 1\n    while b!= 0:\n        if a**2 == b**2:\n            return (current_square, (a**2) + (b**2))\n        else:\n            if a**2 < b**2:\n                current_square += 1\n                a -= 1\n            else:\n                current_square += 1\n                b -= 1\n    return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(1,b):\n        if (a*a) % i == 1:\n            return False\n    return True\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return a\n    elif b % 2 == 0:\n        return perfect_squares(a, b//2)\n    elif b % 2!= 0:\n        return perfect_squares(a, b//2 + 1)\n    else:\n        return None\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # 0 = a, 1 = b\n    # 2 = a, 2 = b\n    # 3 = a, 3 = b\n    # 4 = a, 4 = b\n    # 5 = a, 5 = b\n    # 6 = a, 6 = b\n    # 7 = a, 7 = b\n    # 8 = a, 8 = b\n    # 9 = a, 9 = b\n    # 10 = a, 10 = b\n    # 11 = a, 11 = b\n    # 12 = a, 12 = b\n    # 13 = a, 13 = b\n    # 14 = a, 14 = b\n    # 15 = a, 15 = b\n    # 16 = a, 16 = b\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if y==0:\n        return (x,x)\n    x1=x-cmath.sqrt(x**2+y**2)/y\n    y1=y\n    x2=x+cmath.sqrt(x**2+y**2)/y\n    return (x1,y1,x2,y2)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.asin(y/r)\n    theta = cmath.acos(x/r)\n    return r,phi,theta\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_0=1j*x\n    y_0=1j*y\n    x_2=1j*(2*x-x)\n    y_2=1j*(2*y-y)\n    x_3=1j*(3*x-x)\n    y_3=1j*(3*y-y)\n    return x_0+x_2+x_3,y_0+y_2+y_3\ndef polar_rect_inv(x_0,y_0,x_2,y_2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_0_inv=1j*x_0\n    y_0_inv=1j*y_0\n    x_2_inv=1j*x_2\n    y_2_inv=1j*y_2\n    x_3_inv=1j*x_3\n    y_3_inv=1j*y_3\n    return x_0_inv+x_2_inv+x_3_inv,y_0_inv+y_2_inv+y_3_inv\ndef polar_rect_inv_inv(x_0_inv,y_0_inv,x_2_inv,y_2_inv):\n    '''\n    Write a function to convert rectangular coordinates to rectangular coordinates.\n    '''\n    x_0_inv_inv=1j*x_0_inv\n    y_0_inv_inv=1j*y_0_inv\n    x_2_inv_inv=1j*x_2_inv\n    y_2_inv_inv=1j*y_2_inv\n    x_3_inv_inv=1j*x_3_inv\n    y_3_inv_inv=1j*y_3_inv\n    return x_0_inv_inv+x_2_inv_inv+x_3_inv_inv,y_0_inv_inv+y_2_inv_inv+y_3_inv_inv\ndef polar_rect_polar_inv(x_0_inv,y_0_inv,x_2_inv,y_2_inv):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_0_inv_inv=1j*x_0_inv\n    y_0_inv_inv=1j*y_0_inv\n    x_2_inv_inv=1j*x_2_inv\n    y_2_inv_inv=1j*y_2_inv\n    x_3_inv_inv=1j*x_3_inv\n    y_3_inv_inv=1j*y_3_inv\n    return x_0_inv_inv+x_2_inv_inv+x_3_inv_inv,y_0_inv_inv+y_2_inv_inv+y_3_inv_inv\ndef polar_rect_polar_inv_inv(x_0_inv,y_0_inv,x_2_inv,y_2_inv):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_0_inv_inv=1j*x_0_inv\n    y_0_inv_inv=1j*y_0_inv\n    x_2_inv_inv=1j*x_2_inv\n    y_2_inv_inv=1j*y_2_inv\n    x_3_inv_inv=1j*x_3_inv\n    y_3_inv_inv=1j*y_3_inv\n    return x_0_inv_inv+x_2_inv_inv+x_3_inv_inv,y_0_inv_inv+y_2_inv_inv+y_3_inv_inv\ndef polar_rect_circum(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_0=1j*x\n    y_0=1j*y\n    x_2=1j*(2*x-x)\n    y_2=1j*(2*y-y)\n    x_3=1j*(3*x-x)\n    y_3=1j*(3*y-y)\n    return x_0+x_2+x_3,y_0+y_2+y_3\ndef polar_rect_circum_inv(x_0,y_0,x_2,y_2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_0_inv=1j*x_0\n    y_0_inv=1j*y_0\n    x_2_inv=1j*x_2\n    y_2_inv=1j*y_2\n    x_3_inv=1j*x_3\n    y_3_inv=1j*y_3\n    return x_0_inv+x_2_inv+x_3_inv,y_0_inv+y_2_inv+y_3_inv\ndef polar_rect_circum_inv_inv(x_0_inv,y_0_inv,x_2_inv,y_2_inv):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_0_inv_inv=1j*x_0_inv\n    y_0_inv_inv=1j*y_0_inv\n    x_2_inv_inv=1j*x_2_inv\n    y_2_inv_inv=1j*y_2_inv\n    x_3_inv_inv=1j*x_3_inv\n    y_3_inv_inv=1j*y_3_inv\n    return x_0_inv_inv+x_2_inv_inv+x_3_inv_inv,y_0_inv_inv+y_2_inv_inv+y_3_inv_inv\ndef polar_rect_circum_polar_inv(x_0_inv,y_0_inv,x_2_inv,y_2_inv):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_0_inv_inv=1j*x_0_inv\n    y_0_inv_inv=1j*y_0_inv\n    x_2_inv_inv=1j*x_2_inv\n    y_2_inv_inv=1j*y_2_inv\n    x_3_inv_inv=1j*x_3_inv\n    y_3_inv_inv=1j*y_3_inv\n    return x_0_inv_inv+x_2_inv_inv+x_3_inv_inv,y_0_inv_inv+y_2_inv_inv+y_3_inv_inv\ndef polar_rect_circum_polar_inv_inv(x_0_inv,y_0_inv,x_2_inv,y_2_inv):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_0_inv_inv=1j*x_0_inv\n    y_0_inv_inv=1j*y_0_inv\n    x_2_inv_inv=1j*x_2_inv\n    y_2_inv_inv=1j*y_2_inv\n    x_3_inv_inv=1j*x_3_inv\n    y_3_inv_inv=1j*y_3_inv\n    return x_0_inv_inv+x_2_inv_inv+x_3_inv_inv,y_0_inv_inv+y_2_inv_inv+y_3_inv_inv\ndef polar_rect_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_0=1j*x\n    y_0=1j*y\n    x_2=1j*(2*x-x)\n    y_2=1j*(2*y-y)\n    x_3=1j*(3*x-x)\n    y_3=1j*(3*y-y)\n    return x_0+x_"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=x\n    b=y\n    x=cmath.rect(x,cmath.radians(90))\n    y=cmath.rect(y,cmath.radians(90))\n    return (x,y)\ndef rect_to_polar(rect):\n    '''\n    Write a function that converts rectangular coordinates to polar coordinates.\n    '''\n    x=rect[0]\n    y=rect[1]\n    r=cmath.sqrt(pow(x,2)+pow(y,2))\n    return (r,cmath.atan(y/x))\ndef polar_to_rect(polar):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    x,y=polar\n    r=cmath.sqrt(pow(x,2)+pow(y,2))\n    return (r,polar_rect(x,y))\ndef _polar_to_rect(polar):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    x,y=polar\n    r=cmath.sqrt(pow(x,2)+pow(y,2))\n    return (r,polar_rect(x,y))\ndef rect_to_polar_2(rect):\n    '''\n    Write a function that converts rectangular coordinates to polar coordinates.\n    '''\n    x,y=rect\n    r=cmath.sqrt(pow(x,2)+pow(y,2))\n    return (r,cmath.atan(y/x))\ndef polar_to_rect_2(polar):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    x,y=polar\n    r=cmath.sqrt(pow(x,2)+pow(y,2))\n    return (r,polar_rect(x,y))\ndef point_to_vector(point):\n    '''\n    Write a function that converts a point to a vector.\n    '''\n    x=point[0]\n    y=point[1]\n    return (x,y)\ndef vector_to_point(vector):\n    '''\n    Write a function that converts a vector to a point.\n    '''\n    x=vector[0]\n    y=vector[1]\n    return (x,y)\ndef normal_vector(vector):\n    '''\n    Write a function that converts a vector to a normal vector.\n    '''\n    x=vector[0]\n    y=vector[1]\n    n=cmath.sqrt(pow(x,2)+pow(y,2))\n    return (n,cmath.atan(y/x))\ndef normal_vector_2(vector):\n    '''\n    Write a function that converts a vector to a normal vector.\n    '''\n    n=vector[0]\n    x=vector[1]\n    y=vector[2]\n    n2=cmath.sqrt(pow(x,2)+pow(y,2))\n    return (n,cmath.atan(y/x))\ndef point_to_normal(point):\n    '''\n    Write a function that converts a point to a normal vector.\n    '''\n    x=point[0]\n    y=point[1]\n    n=cmath.sqrt(pow(x,2)+pow(y,2))\n    return (n,cmath.atan(y/x))\ndef normal_to_point(normal):\n    '''\n    Write a function that converts a normal vector to a point.\n    '''\n    n=normal[0]\n    x=normal[1]\n    y=normal[2]\n    return (x,y)\ndef normal_to_vector(normal):\n    '''\n    Write a function that converts a normal vector to a vector.\n    '''\n    n=normal[0]\n    x=normal[1]\n    y=normal[2]\n    return (x,y)\ndef cross(a,b):\n    '''\n    Write a function that calculates the cross product between two vectors.\n    '''\n    x=a[1]*b[2]-a[2]*b[1]\n    y=a[2]*b[0]-a[0]*b[2]\n    return (x,y)\ndef cross_2(a,b):\n    '''\n    Write a function that calculates the cross product between two vectors.\n    '''\n    x=a[1]*b[2]-a[2]*b[1]\n    y=a[2]*b[0]-a[0]*b[2]\n    return (x,y)\ndef cross_3(a,b):\n    '''\n    Write a function that calculates the cross product between two vectors.\n    '''\n    x=a[1]*b[3]-a[3]*b[1]\n    y=a[3]*b[0]-a[0]*b[3]\n    z=a[0]*b[3]-a[3]*b[0]\n    return (x,y,z)\ndef cross_3_2(a,b):\n    '''\n    Write a function that calculates the cross product between two vectors.\n    '''\n    x=a[1]*b[3]-a[3]*b[1]\n    y=a[3]*b[0]-a[0]*b[3]\n    z=a[0]*b[3]-a[3]*b[0]\n    return (x,y,z)\ndef cross_4(a,b):\n    '''\n    Write a function that calculates the cross product between two vectors.\n    '''\n    x=a[1]*b[4]-a[4]*b[1]\n    y=a[4]*b[0]-a[0]*b[4]\n    z=a[0]*b[4]-a[4]*b[0]\n    w=a[0]*b[1]-a[1]*b[0]\n    return (x,y,z,w)\ndef cross_4_2(a,b):\n    '''\n    Write a function that calculates the cross product between two vectors.\n    '''\n    x=a[1]*b[4]-a[4]*b[1]\n    y=a[4]*b[0]-a[0]*b[4]\n    z=a[0]*b[4]-a[4]*b[0]\n    w=a[0]*b[1]-a[1]*b[0]\n    return (x,y,z,w)\ndef cross_4_3(a,b):\n    '''\n    Write a function that calculates the cross product between two vectors.\n    '''\n    x=a[1]*b[4]-a[4]*b[1]\n    y=a[4]*b[0]-a[0]*b[4]\n    z=a[0]*b[4]-a[4]*b[0]\n    w=a[0]*b[1]-a[1]*b[0]\n    return (x,y,z,w)\ndef cross_4_4(a,b):\n    '''\n    Write a function that calculates the cross product between two vectors.\n    '''\n    x=a[1]*b[4]-a[4]*b[1]\n    y=a[4]*b[0]-a[0]*b[4]\n    z=a[0]*b[4]-a[4]*b[0]\n    w=a[0]*b[1]-a[1]*b[0]\n    return (x,y,z,w)\ndef dot(a,b):\n    '''\n    Write a function that calculates the dot product between two vectors.\n    '''\n    x=a[0]*b[0]+a[1]*b[1]\n    y=a[0]*b[2]+a[1]*b[3]\n    z=a[0]*b[4]+a[1]*b[5]\n    w=a[0]*b[6]+a[1]*b[7]\n    return (x,y"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x/y\n    return r\ndef polar_rect_for_vector(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r\ndef polar_rect_for_vector_ref_other_ref_other_ref_other(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # x should be a number between -180 and 180\n    if x >= -180 and x <= 180:\n        # y should be a number between -180 and 180\n        if y >= -180 and y <= 180:\n            # compute the angle of the polar triangle (sagmura)\n            angle = cmath.asin(complex(x,y))\n            # return the coordinates as a tuple\n            return angle, (x,y)\n        else:\n            print(\"Invalid polar coordinates\")\n    else:\n        print(\"Invalid polar coordinates\")\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    try:\n        x = float(x)\n        y = float(y)\n        if x < 0:\n            x = -x\n        if y < 0:\n            y = -y\n        r = abs(x)\n        theta = cmath.phase(x)\n        phi = cmath.phase(y)\n    except ValueError:\n        return 'Error: Invalid input'\n    return r*math.cos(phi) + theta\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect2(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta=cmath.radians(theta)\n    r=cmath.radians(r)\n    return(r,theta)\ndef polar_rect3(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect5(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect6(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect7(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect9(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect10(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect11(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect12(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect13(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect14(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect15(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect16(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect17(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect18(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect19(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect20(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect21(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect22(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect23(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect24(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect25(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect26(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect27(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect28(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect29(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect30(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.radians(x)\n    y=cmath.radians(y)\n    return(x,y)\ndef polar_rect31(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.radians(r)\n    theta=cmath.radians(theta)\n    return(r,theta)\ndef polar_rect32(x,"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    cx = x * cmath.pi / 180\n    cy = y * cmath.pi / 180\n    \n    if (x < 0):\n        x = x * -1\n        cx = cmath.pi + cx\n        cy = cy\n    \n    if (y > 0):\n        y = y * -1\n        cy = cy\n        \n    if (x > 0):\n        x = -x\n        cx = cx + 1\n    \n    return (cx, cy)\n    \ndef polar_rect2(cx, cy):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    rad = cmath.polar(cmath.atan2(cy, cx))\n    \n    return (rad[0] * 180) / cmath.pi, (rad[1] * 180) / cmath.pi\n    \ndef polar_rect3(cx, cy):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    rad = cmath.polar(cmath.atan2(-cy, cx))\n    \n    return (rad[0] * 180) / cmath.pi, (rad[1] * 180) / cmath.pi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return [x*math.pi/180,y*math.pi/180]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[1:2] + newList[0:1]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    print(newList)\n    newList.sort()\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    myList = newList.copy()\n    myList.reverse()\n    return myList\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Asking user what list they want to swap\n    new_list = input(\"What list do you want to swap? (type 'all' for all lists): \")\n    if new_list == 'all':\n        pass\n    elif new_list == 'first':\n        new_list = [newList[0]] + newList[1:]\n        pass\n    elif new_list == 'last':\n        new_list = newList[:1] + newList[2:]\n        pass\n    # Using a variable to store the list\n    list_to_swap = new_list\n    # Using a variable to store the index that should be swapped\n    index_to_swap = 0\n    # Iterating through the list\n    for i in range(len(newList)):\n        # Changing the first element to be the second\n        new_list[i], list_to_swap[index_to_swap] = list_to_swap[index_to_swap], new_list[i]\n        # Increasing the index\n        index_to_swap += 1\n        # After the index is done, breaking out of loop\n        if index_to_swap == len(new_list):\n            index_to_swap = 0\n            pass\n    print(\"New list: \" + str(new_list))\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    i = 0\n    j = len(newList)-1\n    while i < j:\n        newList[i], newList[j] = newList[j], newList[i]\n        i+=1\n        j-=1\n    return newList\n    \nprint(swap_List([2,4,6,1,3,4,5]))\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"You can swap the first and last element in a list. How would you\")\n    print(\"do it? \")\n    print(\"1) Swap the first and last element in the list.\")\n    print(\"2) Repeat step 2 with the new list.\")\n    print(\"3) Exit. \")\n    choice = input()\n    if choice == \"1\":\n        print(newList)\n        index = int(input(\"Choose a number: \"))\n        newList[index], newList[len(newList)-1] = newList[len(newList)-1], newList[index]\n        print(\"The new list is: \")\n        print(newList)\n    elif choice == \"2\":\n        newList.reverse()\n        print(\"The new list is: \")\n        print(newList)\n    elif choice == \"3\":\n        exit()\n    else:\n        print(\"Oops! That's not a valid option. Try again...\")\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) % 2 == 0: \n        newList[0], newList[-1] = newList[-1], newList[0] \n    elif len(newList) % 2!= 0: \n        newList[-1], newList[0] = newList[0], newList[-1] \n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # find the sum of the coefficients\n    sum = 0\n    \n    # recur for k terms\n    for i in range(1,k+1):\n        # sum of the coefficients\n        sum += n*i\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for n in range(1,n+1):\n        result = result + (n**k)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(k**n)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0: \n        n = -n \n    if k < 0: \n        k = -k \n    if k == 0: \n        return 1 \n    elif k == 1: \n        return n \n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) \ndef binomial_Coeff_rec(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0: \n        n = -n \n    if k < 0: \n        k = -k \n    if k == 0: \n        return 1 \n    elif k == 1: \n        return n \n    else: \n        return binomial_Coeff_rec(n-1,k-1) + binomial_Coeff_rec(n-1,k) "
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k==1):\n        return 1\n    return binomial_Coeff(n,k-1) * binomial_Coeff(n-k,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = n + 1\n    for i in range(1,k+1):\n        res *= (n-i)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int(n * (n-1) * (n-2) / 6.0)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    return (n*(k-1))/k\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i*binomial_Coeff(n-1,k-i)\n    return total\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros\n    ip = str(ip)\n    # Replace leading zeros with an underscore\n    ip = ip.replace(ip[0],'_')\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    def remove_zeroes(ip_list):\n        '''\n        Remove all leading zeroes from the ip_list.\n        '''\n        # check that it is a list and does not have a length of 0\n        if type(ip_list)!= list:\n            print(\"input must be a list\")\n            return -1\n        elif len(ip_list) == 0:\n            print(\"input does not have a length of 0\")\n            return -1\n        # if it is a list\n        else:\n            # if the length is more than 1\n            if len(ip_list) > 1:\n                # check that the list is not empty and\n                # that it only contains numbers\n                if all(isinstance(i, int) for i in ip_list):\n                    # remove all leading zeroes\n                    # remove all non-numbers\n                    # return the new list\n                    list_without_zeroes = [int(i) for i in ip_list if not isinstance(i, int)]\n                    return list_without_zeroes\n                else:\n                    return None\n            else:\n                # if the list is only a single value\n                # just return it\n                return [int(i) for i in ip_list]\n    def remove_multiple_zeroes(ip_list):\n        '''\n        Remove all leading zeroes from the ip_list.\n        '''\n        # check that it is a list and does not have a length of 0\n        if type(ip_list)!= list:\n            print(\"input must be a list\")\n            return -1\n        elif len(ip_list) == 0:\n            print(\"input does not have a length of 0\")\n            return -1\n        # if it is a list\n        else:\n            # if the length is more than 1\n            if len(ip_list) > 1:\n                # check that the list is not empty and\n                # that it only contains numbers\n                if all(isinstance(i, int) for i in ip_list):\n                    # remove all leading zeroes\n                    # remove all non-numbers\n                    # return the new list\n                    list_without_zeroes = [int(i) for i in ip_list if not isinstance(i, int)]\n                    return list_without_zeroes\n                else:\n                    return None\n            else:\n                # if the list is only a single value\n                # just return it\n                return [int(i) for i in ip_list]\n    return remove_zeroes(ip_list) or remove_multiple_zeroes(ip_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. If no leading zero in string, return the string unchanged\n    #  3. Remove leading zeroes\n    #  4. Return string with leading zeroes removed\n    #  5. Note that if no leading zero is found, return the string unchanged\n    #  6. Return original string\n    '''\n    def is_valid_ip(ip):\n        ip_regex = re.compile(r'^(\\w\\d|\\.|\\w)*(\\w\\d|\\.|\\w)*$')\n        return True if ip_regex.search(ip) else False\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  3. If no leading zero is found, return the string unchanged\n    #  4. Return string with leading zeroes removed\n    #  5. Return original string\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  3. If no leading zero is found, return the string unchanged\n    #  4. Return string with leading zeroes removed\n    #  5. Return original string\n    def removezero_ip(ip):\n        '''\n        Write a function to remove leading zeroes from an ip address.\n        '''\n        ip_regex = re.compile(r'^(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d)\\s+')\n        return True if ip_regex.search(ip) else False\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  3. If no leading zero is found, return the string unchanged\n    #  4. Return string with leading zeroes removed\n    #  5. Return original string\n    def removezero_ip(ip):\n        '''\n        Write a function to remove leading zeroes from an ip address.\n        '''\n        ip_regex = re.compile(r'^(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d)\\s+')\n        return True if ip_regex.search(ip) else False\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  3. If no leading zero is found, return the string unchanged\n    #  4. Return string with leading zeroes removed\n    #  5. Return original string\n    def removezero_ip(ip):\n        '''\n        Write a function to remove leading zeroes from an ip address.\n        '''\n        ip_regex = re.compile(r'^(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d)\\s+')\n        return True if ip_regex.search(ip) else False\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  3. If no leading zero is found, return the string unchanged\n    #  4. Return string with leading zeroes removed\n    #  5. Return original string\n    def removezero_ip(ip):\n        '''\n        Write a function to remove leading zeroes from an ip address.\n        '''\n        ip_regex = re.compile(r'^(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d)\\s+')\n        return True if ip_regex.search(ip) else False\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  3. If no leading zero is found, return the string unchanged\n    #  4. Return string with leading zeroes removed\n    #  5. Return original string\n    def removezero_ip(ip):\n        '''\n        Write a function to remove leading zeroes from an ip address.\n        '''\n        ip_regex = re.compile(r'^(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d)\\s+')\n        return True if ip_regex.search(ip) else False\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  3. If no leading zero is found, return the string unchanged\n    #  4. Return string with leading zeroes removed\n    #  5. Return original string\n    def removezero_ip(ip):\n        '''\n        Write a function to remove leading zeroes from an ip address.\n        '''\n        ip_regex = re.compile(r'^(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d)\\s+')\n        return True if ip_regex.search(ip) else False\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  3. If no leading zero is found, return the string unchanged\n    #  4. Return string with leading zeroes removed\n    #  5. Return original string\n    def removezero_ip(ip):\n        '''\n        Write a function to remove leading zeroes from an ip address.\n        '''\n        ip_regex = re.compile(r'^(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d)\\s+')\n        return True if ip_regex.search(ip) else False\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  3. If no leading zero is found, return the string unchanged\n    #  4. Return string with leading zeroes removed\n    #  5. Return original string\n    def removezero_ip(ip):\n        '''\n        Write a function to remove leading zeroes from an ip address.\n        '''\n        ip_regex = re.compile(r'^(\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d)\\s+')\n        return True if ip_regex.search(ip) else False\n    '''\n    # TODO:\n    #  1. Check if string is valid. If not, throw a ValueError with message\n    #      1.1. Convert string to int\n    #  2. Return the string with leading zeroes removed\n    #  "
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.replace('.','')\n    # print(ip)\n    l=len(ip)\n    if l>1:\n        try:\n            a=int(ip[0:2])\n            b=int(ip[2:l])\n            if a==0 and b==0:\n                return ip\n        except ValueError:\n            pass\n        except:\n            print(\"[ERROR]  The ip is not an int\")\n    else:\n        return ip\n    return '.'.join(ip.split('.')[1:])\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.search('^(\\d{1,3}(?:\\.\\d{1,3}){3}){5}$', ip):\n        return ip\n    else:\n        return ip\n        \ndef is_valid_ip(ip):\n    '''\n    Write a function that takes in an ip address and returns\n    True if it is a valid ip and false if it is not.\n    '''\n    try:\n        ip = removezero_ip(ip)\n        if re.search('^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', ip):\n            return True\n        else:\n            return False\n    except:\n        return False\n        \n        \ndef reverse_ip_netmask(netmask):\n    '''\n    Write a function that takes in a netmask and returns its reverse netmask.\n    '''\n    lst = [int(i) for i in netmask.split('.')]\n    lst.reverse()\n    netmask = '.'.join(map(str,lst))\n    if len(netmask) < 1:\n        return netmask\n    else:\n        return netmask\n        \ndef get_ip_address_from_netmask(netmask):\n    '''\n    Write a function that takes in a netmask and returns the IP address that\n    exactly matches the netmask.\n    '''\n    lst = [int(i) for i in netmask.split('.')]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = lst[i] + 0xffffffff\n    for i in range(len(lst)-1,-1,-1):\n        lst[i] = lst[i] - lst[i+1]\n    return '.'.join(map(str,lst))\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    list_ip = ip.split('.')\n    print(list_ip)\n    i=1\n    # Removing the leading zeros\n    while i<len(list_ip):\n        if list_ip[i]=='0':\n            list_ip[i]='1'\n            i=i+1\n            break\n        i=i+1\n    # Removing the trailing zeroes\n    while i<len(list_ip):\n        if list_ip[i]=='0':\n            list_ip[i]='1'\n            break\n        i=i+1\n    print(list_ip)\n    return '.'.join(list_ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    n = len(ip)\n    if n < 7:\n        return ip\n    while n>7:\n        if ip[n-7:n] == \"0\":\n            del ip[n-7:n]\n        else:\n            n = n-7\n    return ip\ndef main():\n    f = open('IP_raw.txt')\n    content = f.readlines()\n    f.close()\n    f = open('IP_raw.txt','w')\n    for line in content:\n        line = re.sub(r'\\s', '', line)\n        line = removezero_ip(line)\n        f.write(line)\n    f.close()\n    #print(content)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        new_ip = re.sub(r'\\D', '', ip)\n        if not new_ip.startswith('0'):\n            return new_ip\n    except:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    def remove(ip):\n        removezero = 0\n        new_ip = ''.join(ip)\n        for i in new_ip:\n            if i == '0':\n                removezero += 1\n        return removezero\n    return \"\".join([i for i in ip if i!= \"0\"])\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    newip = ip\n    # str.isdigit() checks if the string contains only digits\n    while str.isdigit(newip) == False:\n        # if no digits, it will be a new string\n        newip = re.sub('\\D', '', newip)\n    return newip\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    for element in list1:\n        if element % 2 == 0:\n            even_odd.append(element)\n        else:\n            continue\n    return even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        return list1[0] - list1[1]\n    else:\n        return list1[1] - list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd=[]\n    for i in list1:\n        if i%2==0:\n            even_odd.append(i)\n        else:\n            pass\n    print(even_odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(0,len(list1)):\n        if i%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return(len(even)-len(odd))\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    for i in range(len(list1)-1):\n        if list1[i] % 2 == 0:\n            diff += 1\n        else:\n            diff -= 1\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    print(f'The diff is: {len(odd) - len(even)}')\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff_even = list1[0]\n    diff_odd = list1[1]\n    for i in range(2,len(list1)):\n        if list1[i] % 2 == 0:\n            diff_even = list1[i]\n        else:\n            diff_odd = list1[i]\n    return diff_even - diff_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Define variables\n    diff_even_odd = []\n    even_odd = []\n    # loop through the list to find the difference\n    for i in range(len(list1)):\n        diff_even_odd.append(list1[i] - list1[i][::2])\n        even_odd.append(list1[i] - list1[i][1::2])\n    # find the difference\n    return diff_even_odd, even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=0\n    odd=0\n    for x in list1:\n        if x%2==0:\n            even+=1\n        else:\n            odd+=1\n    return even-odd\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c1 = 0\n    c2 = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            c1 += 1\n    for i in range(len(str1)) :\n        if str1[i] == str2[i] :\n            c2 += 1\n    return c1 + c2\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    char_map = {\n        '1': '0',\n        '0': '1'\n    }\n    return str1 + str2 + ''.join(map(lambda i: char_map[i], map(str, str2)))\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #0: 0011 0\n    #1: 11 001\n    #2: 101 00010\n    #3: 1101111\n    #4: 1101111\n    n = len(str1)\n    m = len(str2)\n    l1 = n*[0]\n    l2 = n*[0]\n    n1 = m*[0]\n    n2 = m*[0]\n    for i in range(0,n):\n        for j in range(0,m):\n            if str1[i]==str2[j]:\n                n1[i]=1\n                n2[i]=1\n            else:\n                break\n    for i in range(0,n):\n        for j in range(0,m):\n            if n1[i]==1 and n2[j]==1:\n                l1[i]=1\n                l2[j]=1\n            elif n1[i]==1 and n2[j]==0:\n                l1[i]=1\n                l2[j]=0\n            elif n1[i]==0 and n2[j]==1:\n                l1[i]=0\n                l2[j]=1\n            elif n1[i]==0 and n2[j]==0:\n                l1[i]=0\n                l2[j]=0\n    result = n*n - (n1[0]+n2[0])\n    return result\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Creating a dictionary to store the binary string\n    binary_to_num = dict()\n    for i in range(len(str1)) :\n        binary_to_num[str1[i]] = i\n    \n    # Creating a dictionary to store the binary string\n    binary_to_num2 = dict()\n    for i in range(len(str2)) :\n        binary_to_num2[str2[i]] = i\n    \n    # Counting minimum swaps required\n    minimum_swaps = 0\n    \n    # Iterating through each element in the binary string\n    for i in range(len(str1)) :\n        binary_number = str1[binary_to_num[str1[i]]]\n        for j in range(len(str2)) :\n            binary_number2 = str2[binary_to_num2[str2[j]]]\n            \n            # Checking if the binary strings are the same\n            if binary_number == binary_number2 :\n                \n                # If both of them are the same then we need to move them\n                if binary_number[0] == binary_number2[0] :\n                    \n                    # Check if the third element is 1\n                    if binary_number[2] == 1 :\n                        \n                        # If the third element is 1 then we need to move it to the end of the second array\n                        if binary_number2[2] == 1 :\n                            binary_to_num[str1[i]] = str2[j]\n                            binary_to_num[str2[j]] = str1[i]\n                            minimum_swaps += 1\n                    \n                    # If the third element is 0\n                    else :\n                        if binary_number[2] == 0 :\n                            binary_to_num[str1[i]] = str2[j]\n                            binary_to_num[str2[j]] = str1[i]\n                            minimum_swaps += 1\n                            break\n                        \n                # If the third element is not the same than 0 and the third element is 0 then we need to move it to the end of the second array\n                elif binary_number2[2] == 1 :\n                    binary_to_num[str1[i]] = str2[j]\n                    binary_to_num[str2[j]] = str1[i]\n                    minimum_swaps += 1\n                    break\n            \n    # Return the minimum swaps required\n    return minimum_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    def swap(string) : \n        return string[1] + string[0] + string[2] + string[3] + string[4] + string[5] + string[6] + string[7] + string[8]\n    \n    length = len(str1)\n    swaps = 0\n    \n    while(length > 1) : \n        for i in range(8) : \n            if (swap(str1[i:i+3]) == str1[i:i+3]) : \n                swaps += 1\n            else : \n                break\n            \n        if swaps == 3 : \n            return len(str1) - swaps - 2\n        length = len(str1)\n        swaps = 0\n    \n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    size1,size2=len(str1),len(str2)\n    str1=str1.replace(\"1\",\"0\")\n    str2=str2.replace(\"1\",\"0\")\n    for i in range(size1+size2-1):\n        if str1[i]!=str2[i]:\n            return i\n    return size1+size2-1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1_dict = {}\n    str2_dict = {}\n    count = 0\n    for i in range(len(str1)):\n        str1_dict[i] = 0\n        str2_dict[i] = 0\n        if str1[i] == str2[i] :\n            str1_dict[i] = 1\n            str2_dict[i] = 1\n        else :\n            str1_dict[i] = 1\n            str2_dict[i] = 1\n    for i in range(len(str1)) :\n        if str1[i] == str2[i] :\n            count += 1\n            str1_dict[i] = 1\n            str2_dict[i] = 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # if str1 is bigger than 2, this is just a simple count\n    if len(str1) == 0 or len(str2) == 0:\n        return -1\n    elif str1[0]!= str2[0]:\n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return [0,0]\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for elem in tuple_list:\n        size += len(elem)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for item in tuple_list:\n        count += len(item)\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for elem in tuple_list:\n        size += len(elem) + (len(elem) * 2)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum([len(item) for item in tuple_list])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (sys.getsizeof(tuple_list[0]))+sum(sys.getsizeof(i) for i in tuple_list[1:])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += len(i)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (sum(map(lambda x:sys.getsizeof(x),tuple_list)))\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # 1. Find the length of the array\n    n = len(arr1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # O(nlogn) in time, O(n) in space\n    # '''\n    # find kth value in both the array.\n    # '''\n    # key is the first element from array.\n    # value is the second element from array.\n    # '''\n    # O(log n) to find kth element in the sorted array.\n    # '''\n    # O(n) in time\n    # '''\n    # '''\n    # Find the kth element of array1.\n    # '''\n    # O(1)\n    # '''\n    # Find the kth element of array2.\n    # '''\n    # O(1)\n    # '''\n    # Compare the kth element of array1 with the kth element of array2.\n    # '''\n    # O(1)\n    # '''\n    # Compare the kth element of array1 with the kth element of array2.\n    # '''\n    # '''\n    # O(1)\n    # '''\n    # Compare the kth element of array1 with the kth element of array2.\n    # '''\n    # '''\n    # O(1)\n    # '''\n    # '''\n    # Return the kth element of array1, if k = n, return -1 if k > n.\n    # '''\n    # O(1)\n    # '''\n    # return arr1[k] if k < len(arr1) else -1\n    # '''\n    # '''\n    # O(1)\n    # '''\n    # return arr2[k] if k < len(arr2) else -1\n    # '''\n    # O(1)\n    # '''\n    # return arr1[n] if n < len(arr2) else -1\n    # '''\n    # O(1)\n    # '''\n    # return arr2[n] if n < len(arr2) else -1\n    # '''\n    # O(1)\n    # '''\n    # return arr1[n] if n < len(arr2) else -1\n    # '''\n    # O(1)\n    # '''\n    # return arr2[n] if n < len(arr1) else -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) < len(arr2):\n        return arr1[k-1]\n    if arr1[k-1] < arr2[k-1]:\n        return arr1[k-1]\n    if arr2[k-1] < arr1[k-1]:\n        return arr2[k-1]\n    return arr1[k-1]\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k < len(arr1):\n        return find_kth(arr1, arr2, k+1)\n    elif k > len(arr2):\n        return find_kth(arr2, arr1, k+1)\n    else:\n        i = 0\n        j = 0\n        while(i < len(arr1) and j < len(arr2)):\n            if arr1[i] <= arr2[j]:\n                i += 1\n            else:\n                j += 1\n        if i == len(arr1):\n            return arr2[j]\n        else:\n            return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    a1 = 0\n    b1 = len(arr1)-1\n    \n    a2 = 0\n    b2 = len(arr2)-1\n    \n    while(a1<=b1 and a2<=b2):\n        \n        if(arr1[a1] > arr2[b2]):\n            a1 += 1\n        elif(arr2[a2] > arr1[b1]):\n            b2 -= 1\n        else:\n            return arr1[a1]\n    \n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l1 = 0\n    l2 = 0\n    if len(arr1) == 0 or len(arr2) == 0:\n        return -1\n    \n    while l1 < len(arr1) and l2 < len(arr2):\n        if arr1[l1] < arr2[l2]:\n            l1 += 1\n        else:\n            l2 += 1\n    if l1 == len(arr1):\n        return arr2[l2]\n    else:\n        return arr1[l1]\n    \n    return -1\n    \ndef find_pos(arr, k):\n    '''\n    Write a function that finds kth element from the given array and returns its position.\n    '''\n    l1 = 0\n    l2 = len(arr) - 1\n    while l1 <= l2:\n        if arr[l1] < arr[l2]:\n            return l1 + (k - 1)\n        else:\n            l1 += 1\n    return l2 + (k - 1)\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Find the kth element in the first array\n    if len(arr1) <= k:\n        return arr1[k]\n    if len(arr2) <= k:\n        return arr2[k]\n    \n    # Find the kth element in the second array\n    m = len(arr2)\n    if arr1[m-k] > arr2[m-k]:\n        return find_kth(arr2, arr1, k)\n    else:\n        return find_kth(arr1, arr2, k-1)\n        \ndef remove(n):\n    # Remove the first element from the given list\n    if n == 0:\n        return [1,2,3,4,5,6,7,8,9,10]\n    \n    # Remove the second element from the given list\n    if n == 1:\n        return [2,3,4,5,6,7,8,9,10]\n    \n    # Remove the third element from the given list\n    if n == 2:\n        return [3,4,5,6,7,8,9,10]\n    \n    # Remove the fourth element from the given list\n    if n == 3:\n        return [4,5,6,7,8,9,10]\n    \n    # Remove the fifth element from the given list\n    if n == 4:\n        return [5,6,7,8,9,10]\n    \n    # Remove the sixth element from the given list\n    if n == 5:\n        return [6,7,8,9,10]\n    \n    # Remove the seventh element from the given list\n    if n == 6:\n        return [7,8,9,10]\n    \n    # Remove the eighth element from the given list\n    if n == 7:\n        return [8,9,10]\n    \n    # Remove the ninth element from the given list\n    if n == 8:\n        return [9,10]\n    \n    # Remove the tenth element from the given list\n    if n == 9:\n        return [10]\n    \n    # Return an empty array\n    return []\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k <= 0:\n        raise Exception('k must be greater than zero')\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # loop through both the arrays\n    for i in range(len(arr1)):\n        if arr1[i] > arr2[k-1]:\n            # swap the smaller element with the next smaller element\n            arr1[i], arr2[k-1] = arr2[k-1], arr1[i]\n            # recursively call the function\n            return find_kth(arr1, arr2, k)\n    return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if arr1[-k] > arr2[-k]:\n        return arr1[-k]\n    else:\n        return arr2[-k]\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    string = str(number)\n    lst = []\n    for i in range(len(string)):\n        lst.append(int(string[i]))\n    counter = 0\n    i = 0\n    while(i < len(lst)):\n        remainder = lst[i] % 10\n        i += 1\n        if remainder == 0:\n            i += 1\n            continue\n        if sum(lst[i:]) == lst[i]:\n            counter += 1\n    if len(lst) == counter:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number)) == 1:\n        return number == number_convert(number)\n    return check_number(number, len(str(number)))\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    # iterate over the number to find the sum\n    for i in range(1, number):\n        # count the digits in the given number\n        digit = int(str(i) + str(i))\n        # check if the current sum is equal to the\n        # sum of previous digits\n        if digit == number:\n            sum += digit\n            # if sum equals the number,\n            # then it is armstrong number\n            if sum == number:\n                return True\n        else:\n            # sum equals the number\n            # if it does not equal the number,\n            # then it is not armstrong\n            sum = 0\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summation = 0\n    if number < 0:\n        return False\n    elif number == 0:\n        return True\n    else:\n        for i in range(number):\n            summation += 1\n            digits = int(str(number)[i])\n            if digits > 9:\n                summation = 0\n            for j in range(10):\n                if j!= 0 and j!= digits:\n                    if j!= 0 and j!= digits:\n                        summation *= int(str(digits)[j])\n                    else:\n                        summation *= int(str(digits)[j])\n                else:\n                    summation *= int(str(digits)[j])\n            if summation == number:\n                return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        temp = temp // 10\n        count += 1\n    if count == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number))!= len(str(number)):\n        return False\n    str_number = str(number)\n    num_sum = 0\n    for num in range(len(str_number)):\n        num_sum += int(str_number[num]) ** len(str_number)\n    return num_sum == number\n    \n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    for i in range(1,number+1):\n        remainder = number % i\n        if remainder == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    divide = number // 10\n    remainder = number % 10\n    #print(divide, remainder)\n    result = ''\n    if divide == 0:\n        result += str(divide)\n        #print(result)\n    else:\n        while divide!= 0:\n            remainder = remainder * 10 + number % 10\n            #print(remainder)\n            divide = divide // 10\n        result += str(remainder)\n        #print(result)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    flag=1\n    for i in str(number):\n        if ord(i)>=48 and ord(i)<=57:\n            flag=flag*10+ord(i)\n        else:\n            flag=flag*10\n    if flag==number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    counter = 0\n    temp = ''\n    temp = number\n    temp = str(temp)\n    for i in range(len(temp)):\n        for j in range(len(temp)):\n            if i < len(temp)-1:\n                if int(temp[i])**2 == int(temp[i+1])**2:\n                    counter += 1\n            else:\n                if int(temp[i])**2 == number:\n                    counter += 1\n    if counter == len(temp):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for x in range(1, number + 1):\n        s = s + x\n    average = s / number\n    print(\"Sum = \", s)\n    print(\"Average = \", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum = sum + i\n        count += 1\n    average = sum / count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    for i in range(number):\n        sum+=i+1\n    return sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    i = 0\n    sum = 0\n    average = 0\n    while i <= number:\n        sum += i\n        i += 1\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if not number:\n        return 0\n    else:\n        total = 0\n        for i in range(1,number+1):\n            total += i\n        return total/number\n    \nnumber = int(input('Enter the natural numbers to calculate the average: '))\nif not number:\n    print('Invalid number.\\n')\nelse:\n    print('Sum: ', sum_average(number))\n    print('Average: ', sum_average(number)/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Assuming n is an input\n    n = int(input(\"Enter the number of natural numbers you want :\"))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    print(average)\n    return sum, average\nsum_average(5)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Write your code here.\n    sum = 0\n    for n in range(1,number+1):\n        sum += n\n    average = sum/number\n    return (sum,average)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    def natural_sum(numbers):\n        '''\n        numbers: an iterable object that contain int numbers\n        Return sum and average of numbers.\n        '''\n        total = 0\n        for number in numbers:\n            total += number\n        average = total/len(numbers)\n        return total, average\n    \n    def sum_numbers(numbers):\n        '''\n        numbers: an iterable object that contain int numbers\n        Return sum and average of numbers.\n        '''\n        total = 0\n        for number in numbers:\n            total += number\n        return total\n    \n    def sum_average(numbers):\n        '''\n        numbers: an iterable object that contain int numbers\n        Return sum and average of numbers.\n        '''\n        total = 0\n        for number in numbers:\n            total += number\n        return total/len(numbers)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,number+1):\n        total += i\n    average = total / number\n    return total,average\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        print(n, 'is even') \n    else: \n        print(n, 'is not even') \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # TODO: Your code here\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            return str1[i]\n    return '_'\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = list(str1)\n    index = 0\n    while index < len(lst):\n        if lst[index] == lst[index+1]:\n            lst[index], lst[index+1] = lst[index+1], lst[index]\n            index += 2\n        else:\n            index += 1\n    return ''.join(lst)\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if str1[count] == str1[count+1]:\n            count += 1\n        else:\n            count = 0\n    return str1[count]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str2 = str1.lower()\n    idx = 0\n    while idx < len(str2):\n        if str2[idx] == str2[idx+1]:\n            return str2[idx+1]\n        idx += 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_repeated_char_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in first_repeated_char_dict:\n            first_repeated_char_dict[str1[i]] += 1\n        else:\n            first_repeated_char_dict[str1[i]] = 1\n    print(first_repeated_char_dict)\n    for k, v in first_repeated_char_dict.items():\n        if v == 1:\n            return k\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return -1\n    elif len(str1) == 1:\n        return str1[0]\n    else:\n        first = str1[0]\n        count = 0\n        for char in str1:\n            if char == first:\n                count += 1\n            else:\n                if count > 0:\n                    first = char\n                    count = 0\n        return first\n    \n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    for key, value in freq_dict.items():\n        if value == 1:\n            return key\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    start = 0\n    end = len(str1) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if str1[mid] == str1[mid - 1]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return str1[start]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # if the string contains only one character\n    if(len(str1) == 1):\n        return''\n    # if the string contains multiple characters\n    if(len(str1) > 1):\n        start = 0\n        end = 1\n        while end < len(str1):\n            if(str1[start:end+1] == str1[start]):\n                return str1[start]\n            start += 1\n            end += 1\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Your code here\n    luc_dict = dict()\n    for i in range(1, n + 1):\n        if i not in luc_dict:\n            luc_dict[i] = 1\n        else:\n            luc_dict[i] += 1\n    return luc_dict\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n,n + 10):\n        if i % 3!= 0 and i % 5!= 0 and i % 7!= 0 and i % 9!= 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for x in range(1,n):\n        if x % 5 == 0 and x % 3 == 0:\n            ludic.append(x)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i<=n:\n            ludic.append(i)\n        else:\n            break\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucides = []\n    for i in range(n):\n        if i < 3:\n            lucides.append(i)\n        elif i >= 3 and i % 3 == 0:\n            lucides.append(i)\n    return lucides\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucky = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            if i**2 > n:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludible_numbers = []\n    for i in range(1, n+1):\n        if i < 10:\n            ludible_numbers.append(i)\n        elif 10 <= i < 100:\n            ludible_numbers.append(i//10)\n        elif 100 <= i < 1000:\n            ludible_numbers.append(i//100)\n        elif 1000 <= i < 10000:\n            ludible_numbers.append(i//1000)\n        elif 10000 <= i < 100000:\n            ludible_numbers.append(i//10000)\n        else:\n            ludible_numbers.append(i//100000)\n    return ludible_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lud = []\n    for x in range(1, n + 1):\n        if x % 5 == 0 or x % 3 == 0:\n            lud.append(x)\n    return lud\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = set()\n    for i in range(1,n+1):\n        if i <= n:\n            if i%3!= 0:\n                ludic.add(i)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    reverse_word = []\n    for word in s:\n        reverse_word.append(word[::-1])\n    return''.join(reverse_word)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return list(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join([s.split()[::-1][i] for i in range(len(s.split()))])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_s = ''\n    last = ''\n    i = len(s) - 1\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return [s[i] for i in range(len(s)) if s[i]!='']\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    newWords = []\n    for word in words:\n        newWords.append(word[::-1])\n    \n    return''.join(newWords)\n    "
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #Your code goes here\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # create an empty string\n    s ='' + s +''\n    # create an empty list\n    res = []\n    # create a loop to iterate over the string\n    for i in s.split():\n        # append the word to the list\n        res.append(i)\n    # return the list\n    return res\n    \ndef reverse_word(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # create an empty string\n    s ='' + s +''\n    # create an empty list\n    res = []\n    # create a loop to iterate over the string\n    for i in s.split():\n        # append the word to the list\n        res.append(i)\n    # return the list\n    return res\n    \ndef reverse_all_words(s):\n    '''\n    Write a function to reverse all words in a given string.\n    '''\n    # create an empty string\n    s ='' + s +''\n    # create an empty list\n    res = []\n    # create a loop to iterate over the string\n    for i in s.split():\n        # append the word to the list\n        res.append(i)\n    # return the list\n    return res\n    \ndef reverse_all_words_v2(s):\n    '''\n    Write a function to reverse all words in a given string.\n    '''\n    # create an empty string\n    s ='' + s +''\n    # create an empty list\n    res = []\n    # create a loop to iterate over the string\n    for i in s.split():\n        # append the word to the list\n        res.append(i)\n    # return the list\n    return res\n    \ndef remove_punctuation(s):\n    '''\n    Write a function to remove punctuation in a given string.\n    '''\n    # create an empty string\n    s ='' + s +''\n    # create an empty list\n    res = []\n    # create a loop to iterate over the string\n    for i in s.split():\n        # if the string contains punctuation\n        if i in punctuation:\n            # replace the word with it's original\n            res.append(i)\n        # if it is not a punctuation character\n        else:\n            # remove the punctuation from the string\n            res.append(i.strip(punctuation))\n    # return the list\n    return res\n    \ndef convert_to_morse(s):\n    '''\n    Write a function that converts a string to Morse code.\n    '''\n    # create an empty string\n    s ='' + s +''\n    # create an empty list\n    res = []\n    # create a loop to iterate over the string\n    for i in s.split():\n        # if the string contains punctuation\n        if i in punctuation:\n            # split the word by a space\n            res.append(i.split())\n        # if it is not a punctuation character\n        else:\n            # convert the word to its morse code\n            res.append(morse_code(i))\n    # return the list\n    return res\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    lst = s.split()\n    lst.reverse()\n    return \" \".join(lst)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    else:\n        res = \"\"\n        for c in s:\n            res = c + res\n        return res\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==1 or num==2 or num==3 or num==4 or num==5 or num==6 or num==7:\n        return False\n    elif num==8 or num==9 or num==10:\n        return False\n    else:\n        for i in range(2, int(num**0.5)+1):\n            if num%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num == 5:\n        return True\n    if num == 7:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    if num % 5 == 0:\n        return False\n    if num % 7 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3 or num == 5 or num == 7:\n        return True\n    elif num%2 == 0 or num%3 == 0 or num%5 == 0:\n        return False\n    else:\n        for i in range(5, int(num**0.5)+1, 6):\n            if num%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num == 5 or num == 7:\n        return False\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5,int(math.sqrt(num))+1,6):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num > 2 and num % 2 == 0:\n        return False\n    elif num > 2 and num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(num)) + 1, 6):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    is_prime = True\n    if num == 1:\n        is_prime = False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n            elif num % i == 0:\n                is_prime = False\n    return is_prime\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0:\n            return False\n    return True\n    \ndef main():\n    \n    for i in range(1, 1000):\n        print(\"Check if\", i, \"is prime number\")\n        # Get the current number and check if it is prime\n        if prime_num(i):\n            print(\"Prime number\", i)\n        \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num % 2 == 0:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    for i in range(3,int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * math.pi / 180\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\ndef deg_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\ndef euclidean_distance(a, b):\n    '''\n    Write a function to calculate the euclidean distance between two points.\n    '''\n    distance = 0\n    for i in range(len(a)):\n        distance += pow((a[i] - b[i]), 2)\n    return math.sqrt(distance)\ndef euclid_distances(a, b):\n    '''\n    Write a function to calculate the euclidean distances between two points.\n    '''\n    distance = 0\n    for i in range(len(a)):\n        distance += pow((a[i] - b[i]), 2)\n    return math.sqrt(distance)\ndef manhattan_distance(a, b):\n    '''\n    Write a function to calculate the manhattan distance between two points.\n    '''\n    distance = 0\n    for i in range(len(a)):\n        distance += abs(a[i] - b[i])\n    return distance\ndef get_distance_matrix(m,n):\n    '''\n    Write a function to calculate the distance matrix.\n    '''\n    distance_matrix = [[0 for i in range(m)] for j in range(n)]\n    for i in range(m):\n        for j in range(n):\n            distance_matrix[i][j] = euclidean_distance(m,n) + euclid_distances(m,n)\n    return distance_matrix\ndef get_min_distance(m,n,distance_matrix):\n    '''\n    Write a function to calculate the minimum distance for the given data.\n    '''\n    distance_matrix = distance_matrix[1:m-1][1:n-1]\n    distance_matrix = distance_matrix.tolist()\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            distance_matrix[i][j] = math.sqrt(distance_matrix[i][j])\n    distance_matrix = sorted(distance_matrix, reverse=True)\n    min_distance = distance_matrix[0][0]\n    return min_distance\ndef get_smallest_distance(m,n,distance_matrix):\n    '''\n    Write a function to calculate the smallest distance for the given data.\n    '''\n    distance_matrix = distance_matrix[1:m-1][1:n-1]\n    distance_matrix = distance_matrix.tolist()\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            distance_matrix[i][j] = math.sqrt(distance_matrix[i][j])\n    distance_matrix = sorted(distance_matrix, reverse=True)\n    smallest_distance = distance_matrix[0][0]\n    return smallest_distance\ndef get_closest_distance(m,n,distance_matrix,smallest_distance):\n    '''\n    Write a function to calculate the closest distance for the given data.\n    '''\n    distance_matrix = distance_matrix[1:m-1][1:n-1]\n    distance_matrix = distance_matrix.tolist()\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            distance_matrix[i][j] = math.sqrt(distance_matrix[i][j])\n    distance_matrix = sorted(distance_matrix, reverse=True)\n    closest_distance = distance_matrix[0][0]\n    return closest_distance\ndef get_max_distance(m,n,distance_matrix):\n    '''\n    Write a function to calculate the maximum distance for the given data.\n    '''\n    distance_matrix = distance_matrix[1:m-1][1:n-1]\n    distance_matrix = distance_matrix.tolist()\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            distance_matrix[i][j] = math.sqrt(distance_matrix[i][j])\n    distance_matrix = sorted(distance_matrix, reverse=True)\n    max_distance = distance_matrix[0][0]\n    return max_distance\ndef get_closest_to_point(m,n,distance_matrix,smallest_distance):\n    '''\n    Write a function to calculate the closest distance to the given point.\n    '''\n    distance_matrix = distance_matrix[1:m-1][1:n-1]\n    distance_matrix = distance_matrix.tolist()\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            distance_matrix[i][j] = math.sqrt(distance_matrix[i][j])\n    distance_matrix = sorted(distance_matrix, reverse=True)\n    closest_distance = distance_matrix[0][0]\n    return closest_distance\ndef get_smallest_to_point(m,n,distance_matrix,smallest_distance):\n    '''\n    Write a function to calculate the closest distance to the given point.\n    '''\n    distance_matrix = distance_matrix[1:m-1][1:n-1]\n    distance_matrix = distance_matrix.tolist()\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            distance_matrix[i][j] = math.sqrt(distance_matrix[i][j])\n    distance_matrix = sorted(distance_matrix, reverse=True)\n    smallest_distance = distance_matrix[0][0]\n    return smallest_distance\ndef get_closest_to_point_for_all_points(m,n,distance_matrix,smallest_distance):\n    '''\n    Write a function to calculate the closest distance to the given point for each point.\n    '''\n    distance_matrix = distance_matrix[1:m-1][1:n-1]\n    distance_matrix = distance_matrix.tolist()\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            distance_matrix[i][j] = math.sqrt(distance_matrix[i][j])\n    distance_matrix = sorted(distance_matrix, reverse=True)\n    closest_distance = distance_matrix[0][0]\n    return closest_distance\ndef get_closest_to_point_for_all_points_for_all_points(m,n,distance_matrix,smallest_distance):\n    '''\n    Write a function to calculate the closest distance to the given point for each point for each point.\n    '''\n    distance_matrix = distance_matrix[1:m-1][1:n-1]\n    distance_matrix = distance_matrix.tolist()\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            distance_matrix[i][j] = math.sqrt(distance_matrix[i][j])\n    distance_matrix = sorted(distance_matrix, reverse=True)\n    closest_distance = distance_matrix[0][0]\n    return closest_distance\ndef get_smallest_distance_for_all_points(m,n,distance_matrix):\n    '''\n    Write a function to calculate the smallest distance for each point.\n    '''\n    distance_matrix = distance_matrix[1:m-1][1:n-1]\n    distance_matrix = distance_matrix.tolist()\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            distanc"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = math.radians(degree)\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180.0\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree *(3.14159/180)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    start_index = None\n    end_index = None\n    start_index_match = re.search(pattern, text)\n    end_index_match = re.search(pattern, text[end_index:])\n    if start_index_match:\n        start_index = start_index_match.start()\n        end_index = end_index_match.end()\n    return start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    sub_match = re.finditer(pattern, text)\n    matching_substring = next(sub_match, None)\n    start = matching_substring.start()\n    end = matching_substring.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if len(pattern) == 0:\n        return None\n    \n    pattern = pattern.replace('\\\\', '\\\\\\\\').replace('^', '\\\\^{}'.format(pattern.replace('[', '\\\\[').replace(']', '\\\\]').replace('{', '\\\\{').replace('}', '\\\\}')))\n    \n    m = re.search(pattern, text)\n    \n    if m:\n        return m.start(), m.end()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Grab the starting position of the pattern\n    search_start = pattern.search(text, 0, len(pattern.pattern))\n    # print(search_start)\n    # print(search_start.start())\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = -1\n    end_index = -1\n    pattern = pattern.replace('\\\\', '\\\\\\\\')\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        match = re.search(pattern, text[start_index:end_index])\n        if match:\n            start_index = start_index + match.start()\n            end_index = start_index + match.end()\n        return text[start_index:end_index], start_index, end_index\n    else:\n        return None, -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    indices = []\n    index = 0\n    while index < len(text):\n        m = pattern.search(text, index)\n        if m:\n            if not m.start() in indices:\n                indices.append(m.start())\n        index += 1\n    return indices\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex_pattern = re.compile(pattern)\n    regex_match = regex_pattern.search(text)\n    if regex_match is not None:\n        start_index = regex_match.start()\n        end_index = regex_match.end()\n        return text[start_index:end_index], start_index, end_index\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # pattern = 'abcdefghijklmnopqrstuvwxyz'\n    # text = 'abcdefghijklmnopqrstuvwxyz'\n    # print(pattern)\n    # print(text)\n    \n    # find a match\n    i = 0\n    substring = ''\n    for match in re.findall(pattern, text):\n        substring = match\n        i = text.find(substring)\n        # print(substring)\n        # print(i)\n        # print(text[i+1:])\n        # print(text[i:i+1])\n        if (i > 0):\n            start = i\n            end = i + len(substring)\n        if (start > 0):\n            return start, end, substring\n    \n    # print(text[start:end])\n    return -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # An example of a pattern:\n    # ^c$\n    # ^[^c]+$\n    # ^a^b$\n    # ^a^b$\n    # ^a^b$\n    # ^a^b$\n    # ^a^b$\n    # ^a^b$\n    # ^a^b$\n    # ^a^b$\n    # ^a^b$\n    # ^a^b$\n    # ^a^b$\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex_start = re.compile(pattern, re.IGNORECASE)\n    regex_end = re.compile(pattern, re.IGNORECASE)\n    return regex_start.search(text), regex_end.search(text), regex_start.findall(text), regex_end.findall(text)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # n = int(input(\"Enter n: \"))\n    # print(n)\n    # fib = [0,1]\n    # for i in range(n):\n    #     fib.append(fib[i]+fib[i+1])\n    # return fib[n]\n    return fib[n]+fib[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = [0] * (n + 1) \n    a[1] = 1\n    for i in range(2, n + 1): \n        a[i] = (a[i - 1] * (i - 1)) % 1234567\n    return a[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if (n==0):\n        return 0\n    elif (n==1):\n        return 1\n    elif (n==2):\n        return 5\n    elif (n==3):\n        return 11\n    elif (n==4):\n        return 19\n    elif (n==5):\n        return 29\n    elif (n==6):\n        return 39\n    elif (n==7):\n        return 51\n    elif (n==8):\n        return 61\n    elif (n==9):\n        return 73\n    elif (n==10):\n        return 79\n    elif (n==11):\n        return 89\n    elif (n==12):\n        return 99\n    elif (n==13):\n        return 121\n    elif (n==14):\n        return 131\n    elif (n==15):\n        return 141\n    elif (n==16):\n        return 151\n    elif (n==17):\n        return 161\n    elif (n==18):\n        return 171\n    elif (n==19):\n        return 181\n    elif (n==20):\n        return 191\n    elif (n==21):\n        return 211\n    elif (n==22):\n        return 231\n    elif (n==23):\n        return 237\n    elif (n==24):\n        return 239\n    elif (n==25):\n        return 249\n    elif (n==26):\n        return 257\n    elif (n==27):\n        return 261\n    elif (n==28):\n        return 271\n    elif (n==29):\n        return 277\n    elif (n==30):\n        return 281\n    elif (n==31):\n        return 291\n    elif (n==32):\n        return 311\n    elif (n==33):\n        return 321\n    elif (n==34):\n        return 331\n    elif (n==35):\n        return 347\n    elif (n==36):\n        return 349\n    elif (n==37):\n        return 353\n    elif (n==38):\n        return 359\n    elif (n==39):\n        return 367\n    elif (n==40):\n        return371\n    elif (n==41):\n        return381\n    elif (n==42):\n        return391\n    elif (n==43):\n        return401\n    elif (n==44):\n        return409\n    elif (n==45):\n        return413\n    elif (n==46):\n        return421\n    elif (n==47):\n        return431\n    elif (n==48):\n        return449\n    elif (n==49):\n        return463\n    elif (n==50):\n        return481\n    elif (n==51):\n        return491\n    elif (n==52):\n        return501\n    elif (n==53):\n        return511\n    elif (n==54):\n        return513\n    elif (n==55):\n        return521\n    elif (n==56):\n        return523\n    elif (n==57):\n        return531\n    elif (n==58):\n        return541\n    elif (n==59):\n        return549\n    elif (n==60):\n        return563\n    elif (n==61):\n        return561\n    elif (n==62):\n        return569\n    elif (n==63):\n        return577\n    elif (n==64):\n        return581\n    elif (n==65):\n        return591\n    elif (n==66):\n        return601\n    elif (n==67):\n        return613\n    elif (n==68):\n        return631\n    elif (n==69):\n        return641\n    elif (n==70):\n        return661\n    elif (n==71):\n        return683\n    elif (n==72):\n        return711\n    elif (n==73):\n        return721\n    elif (n==74):\n        return741\n    elif (n==75):\n        return751\n    elif (n==76):\n        return761\n    elif (n==77):\n        return777\n    elif (n==78):\n        return789\n    elif (n==79):\n        return799\n    elif (n==80):\n        return813\n    elif (n==81):\n        return831\n    elif (n==82):\n        return841\n    elif (n==83):\n        return851\n    elif (n==84):\n        return871\n    elif (n==85):\n        return881\n    elif (n==86):\n        return891\n    elif (n==87):\n        return897\n    elif (n==88):\n        return899\n    elif (n==89):\n        return901\n    elif (n==90):\n        return931\n    elif (n==91):\n        return941\n    elif (n==92):\n        return951\n    elif (n==93):\n        return971\n    elif (n==94):\n        return979\n    elif (n==95):\n        return981\n    elif (n==96):\n        return983\n    elif (n==97):\n        return985\n    elif (n==98):\n        return1003\n    elif (n==99):\n        return1011\n    elif (n==100):\n        return1019\n    elif (n==101):\n        return1023\n    elif (n==102):\n        return1041\n    elif (n==103):\n        return1051\n    elif (n==104):\n        return1061\n    elif (n==105):\n        return1071\n    elif (n==106):\n        return1081\n    elif (n==107):\n        return1091\n    elif (n==108):\n        return1093\n    elif (n==109):\n        return1097\n    elif (n==110):\n        return1099\n    elif (n==111):\n        return1103\n    elif (n==112):\n        return1107\n    elif (n==113):\n        return1119\n    elif (n==114):\n        return1123\n    elif (n==115):\n        return1121\n    elif (n==116):\n        return1129\n    elif (n==117):\n        return1131\n    elif (n==118):\n        return1141\n    elif (n==119):\n        return1151\n    elif (n==120):\n        return1161\n    elif (n==121):\n        return1179\n    elif (n==122):\n        return1193\n    elif (n==123):\n        return1197\n    elif (n==124):\n        return1201\n    elif (n==125):\n        return1211\n    elif (n==126):\n        return1231\n    elif (n==127):\n        return1241\n    elif (n==128):\n        return1251\n    elif (n==129):\n        return1261\n    elif (n==130):\n        return1271\n    elif (n==131):\n        return1281\n    elif (n==132):\n        return1291\n    elif (n==133):\n        return1293\n    elif (n==134):\n        return1297\n    elif (n==135):\n        return1301\n    elif (n==136):\n        return1309\n    elif (n==137):\n        return1311\n    elif (n==138):\n        return1321\n    elif (n==139):\n        return1341\n    elif (n==140):\n        return1351\n    elif (n==141):\n        return1361\n    elif (n==142):\n        return1371\n    elif (n==143):\n        return1381\n    elif (n==144):\n        return1401\n    elif (n==145):\n        return1411\n    elif (n==146):\n        return1421\n    elif (n==147):\n        return1441\n    elif (n==148):\n        return1451\n    elif (n="
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # your code goes here\n    if n <= 0:\n        raise ValueError('n should be greater than zero')\n    k = n-1\n    for i in range(n-1):\n        print(f'{k}th Bessie')\n        k -= 1\n    print(f'{k}th Bessie')\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 7\n    else:\n        n += 1\n        return bell_Number(n) + bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return (n-2) * bell_Number(n-1) + bell_Number(n-3) \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    for i in range(n+1):\n        if i == 0 or i == 1:\n            return i\n        return (i*(i+1))/2\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 0\n    while True:\n        if n % i == 0:\n            i += 1\n            n //= i\n        else:\n            i = 0\n            n -= 1\n        if n == 0:\n            return i\n        \ndef main():\n    number_of_rows = int(input('number of rows: '))\n    number_of_columns = int(input('number of columns: '))\n    \n    # list of the elements\n    arr = [0] * number_of_columns\n    for i in range(number_of_rows):\n        arr[i] = [int(x) for x in input().split()]\n    \n    # find all the index of values of the input array\n    index = 0\n    for i in range(number_of_rows):\n        for j in range(number_of_columns):\n            if arr[i][j] == 1:\n                index = i\n                break\n        \n    # find the nth number\n    print(bell_Number(index))\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L is None or len(L) == 0:\n        return []\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L is None:\n        return None\n    \n    for i in range(L):\n        if len(list1) > i+1:\n            del list1[i]\n            return list1\n    return list1\n    \n    \n    \n    "
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L==[]:\n        raise ValueError(\"list cannot be empty\")\n    else:\n        list2=[]\n        for i in range(L):\n            list2.append(L[i])\n        return list2\n        \n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in list1:\n        if i == L:\n            new_list.append(i)\n    return new_list\n    \n    \ndef remove_first_occurence(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurrence removed.\n    '''\n    new_list = []\n    for i in list1:\n        if i == L:\n            new_list.append(i)\n    return new_list\n    \n    \ndef remove_last_occurence(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the last occurrence removed.\n    '''\n    new_list = []\n    for i in list1:\n        if i == L:\n            new_list.append(i)\n    return new_list\n    \n    \ndef merge_lists(L1, L2):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element is merged with the other k'th element.\n    '''\n    new_list = []\n    for i in range(0, len(L1)):\n        if L1[i] < L2[i]:\n            new_list.append(L1[i])\n        else:\n            new_list.append(L2[i])\n    return new_list\n    \n    \ndef count_elements(list1):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element is counted.\n    '''\n    count = 0\n    for i in list1:\n        if i == L:\n            count = count + 1\n    return count\n    \n    \ndef merge_lists_using_stack(L1, L2):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element is merged with the other k'th element in the stack.\n    '''\n    new_list = []\n    stack = []\n    for i in range(0, len(L1)):\n        if L1[i] < L2[i]:\n            stack.append(L1[i])\n        else:\n            stack.append(L2[i])\n    for i in stack:\n        new_list.append(i)\n    return new_list\n    \n    \ndef merge_lists_using_queue(L1, L2):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element is merged with the other k'th element in the queue.\n    '''\n    new_list = []\n    queue = []\n    for i in range(0, len(L1)):\n        if L1[i] < L2[i]:\n            queue.append(L1[i])\n        else:\n            queue.append(L2[i])\n    for i in queue:\n        new_list.append(i)\n    return new_list\n    \n    \ndef delete_first_occurence(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurrence is deleted.\n    '''\n    new_list = []\n    for i in list1:\n        if i == L:\n            new_list.append(i)\n    return new_list\n    \n    \ndef delete_last_occurence(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the last occurrence is deleted.\n    '''\n    new_list = []\n    for i in list1:\n        if i == L:\n            new_list.append(i)\n    return new_list\n    \n    \ndef delete_first_occurence_and_last_occurence(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurrence is deleted, and the last occurrence is deleted.\n    '''\n    new_list = []\n    for i in list1:\n        if i == L:\n            new_list.append(i)\n            new_list.append(i)\n    return new_list\n    \n    \ndef delete_first_occurence_and_last_occurence_in_stack(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurrence is deleted, and the last occurrence is deleted in the stack.\n    '''\n    new_list = []\n    stack = []\n    for i in range(0, len(list1)):\n        if list1[i] < L:\n            stack.append(list1[i])\n        else:\n            new_list.append(stack.pop())\n    return new_list\n    \n    \ndef delete_first_occurence_and_last_occurence_in_queue(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurrence is deleted, and the last occurrence is deleted in the queue.\n    '''\n    new_list = []\n    queue = []\n    for i in range(0, len(list1)):\n        if list1[i] < L:\n            queue.append(list1[i])\n        else:\n            new_list.append(queue.pop())\n    return new_list\n    \n    \ndef move_first_occurence_to_end(list1):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurrence is moved to the end of the list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\n    \n    \ndef move_last_occurence_to_end(list1):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the last occurrence is moved to the end of the list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\n    \n    \ndef move_first_occurence_to_start(list1):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurrence is moved to the beginning of the list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\n    \n    \ndef move_last_occurence_to_start(list1):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the last occurrence is moved to the beginning of the list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\n    \n    \ndef swap_element(list1, i, j):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurrence is swapped with the second occurrence.\n    '''\n    new_list = []\n    for i in list1:\n        if i == L:\n            new_list.append(j)\n        else:\n            new_list.append(i)\n    return new_list\n    \n    \ndef swap_elements(list1):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the first occurrence is swapped with the second occurrence.\n    '''\n    new_list = []\n    for i in list1:\n        if i == L:\n            new_list.append(j)\n        else:\n            new_list.append(i)\n    return new_list\n    \n    \ndef count_frequencies(list1):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element is counted.\n    '''\n    count = 0\n    for i in list1:\n        if i == L:\n            count = count + 1\n    return count\n    \n    \ndef fin"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #list1.sort()\n    #return list1[L:]\n    \n    list1.sort(reverse=True)\n    return list1[L:]\n    \n    #key = list1.pop(L)\n    #list1.sort(key=len)\n    #return list1\n    \n    #return list1[:L]\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1)):\n        if i == L:\n            return\n    del list1[i]\n    print('\\nRemove item with kth element {}'.format(L))\n    return remove_kth_element(list1, L+1)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1.pop(L)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == L:\n        return list1\n    else:\n        return list1[1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # TODO: Write your code here\n    if L == []:\n        return []\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_row = max(test_list, key=lambda x: x[N])\n    return max_row[N]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = test_list[0][N-1]\n    for i in range(1,N):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key = lambda x: x[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # base case\n    if N == 0:\n        return max(test_list)\n    \n    # recursively call\n    res = test_list[0][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Write your code here\n    return max(test_list[0])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key = lambda x : x[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list.sort()\n    max = test_list[N-1][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] > max:\n            max = test_list[i][0]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = test_list[0]\n    for i in range(N):\n        result = max(result,test_list[i][N-1])\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max:\n            max = test_list[i][N-1]\n    return max\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[0])\n        new_lst.append(i[1])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    list_1 = []\n    list_2 = []\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # A list of lists of two elements\n    res = []\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[0][0], lst[1][0]]] + [[lst[0][1], lst[1][1]]]"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0]] + [lst[0][1]] + [lst[1][0]] + [lst[1][1]] + lst[2:]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for ele in lst:\n        res.append([ele[0], ele[1]])\n    return res\n    "
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [elem[0], elem[1]] for elem in zip(*lst) ]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    if len(lst) < 2:\n        return lst\n    \n    new_lst = []\n    i = 0\n    while i < len(lst):\n        new_lst.append(lst[i])\n        i = i + 1\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    if len(lst)<=1:\n        return lst\n    else:\n        return [lst[0]] + merge(lst[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    for i in range(len(test_list)):\n        cummulative_sum = 0\n        for j in range(len(test_list)):\n            cummulative_sum += test_list[j][i]\n        cummulative_sum_list.append(cummulative_sum)\n    return(cummulative_sum_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for value in test_list:\n        sum += value\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum = 0\n    for i in test_list:\n        cum = cum + i\n    return cum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return test_list[0]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    for i in test_list:\n        cummulative_sum_list.append(sum(i))\n    return cummulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    lst=[]\n    for i in test_list:\n        lst.append(sum(i))\n    return lst\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for value in test_list:\n        result += value\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    \n    # base case\n    if len(test_list) == 0:\n        return 0\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num)/len(num) for num in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    a = list()\n    for tuple in nums:\n        a.append(sum(tuple) / len(tuple))\n    return a\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total=[]\n    count=0\n    for i in range(len(nums)):\n        count=0\n        for j in nums[i]:\n            count+=j\n        total.append(count/len(nums[i]))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(nums, []) / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    s = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum += j\n        avg = sum / len(i)\n        s.append(avg)\n    return s\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tuple in nums:\n        result.append(tuple[0]/tuple[1])\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # YOUR CODE HERE\n    # raise NotImplementedError\n    result = []\n    for i in nums:\n        result.append(sum(i)/len(i))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    out = []\n    for i in range(len(nums)):\n        out.append(nums[i][0] + nums[i][1])\n    out.sort()\n    return out\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(tuple,sum(nums)))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    out1 = test_tup1 % test_tup2\n    out2 = test_tup2 % test_tup1\n    return out1, out2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # create a tuple with the elements of test_tup1\n    # create a tuple with the elements of test_tup2\n    # modify the tuples element wise by multiplying them\n    # return the tuple with the modulo element\n    \n    # WRITE CODE\n    # create a tuple with the elements of test_tup1\n    # create a tuple with the elements of test_tup2\n    # modify the tuples element wise by multiplying them\n    # return the tuple with the modulo element\n    \n    # WRITE CODE\n    # create a tuple with the elements of test_tup1\n    # create a tuple with the elements of test_tup2\n    # modify the tuples element wise by multiplying them\n    # return the tuple with the modulo element\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print('modulo test_tuple1')\n    print(test_tup1[0])\n    print(test_tup1[1])\n    mod = test_tup1[0]\n    for i in test_tup1[1]:\n        if test_tup1[1][i] % mod == 0:\n            mod = test_tup1[1][i]\n        else:\n            mod = test_tup1[1][i]\n    print(mod)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(0, len(test_tup1)):\n        if(len(test_tup1[i])!= len(test_tup2[i])):\n            print(\"Error: the length of the tuples don't match.\")\n            return\n        for j in range(0, len(test_tup1[i])):\n            test_tup1[i][j] = test_tup1[i][j] % test_tup2[i][j]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Take the first element from the tuple\n    first_element_tup = test_tup1[0]\n    # Take the second element from the tuple\n    second_element_tup = test_tup2[1]\n    # Calculate the result\n    result = first_element_tup % second_element_tup\n    # Return the result\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    res = ()\n    for i in range(len(test_tup1)):\n        res = res + (test_tup1[i] % test_tup2[i])\n    return res\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # TODO: Write your code here\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Can only compute the modulo of two tuples of the same length')\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # print(\"tuple 1 is: \", test_tup1)\n    # print(\"tuple 2 is: \", test_tup2)\n    # print(\"tuple 1 with modulo is: \", modulo_tup1)\n    # print(\"tuple 2 with modulo is: \", modulo_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple()\n    i = 0\n    while i < len(test_tup1):\n        result.append(test_tup1[i] % test_tup2[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min_J = 0\n    prev_d = 0\n    for i in range(steps-1):\n        prev_d = d\n        if prev_d == 0:\n            return i + 1\n        d = d - 1\n    return min_J\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def is_inside(x, y, d):\n        return (x >= 0) and (y >= 0) and (x < d.shape[0]) and (y < d.shape[1])\n    def get_x(d, i, j):\n        return d[i][j][0]\n    def get_y(d, i, j):\n        return d[i][j][1]\n    def get_z(d, i, j):\n        return d[i][j][2]\n    def get_ij(i, j):\n        return d[i][j]\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n    elif steps[0][0] == d: return 0\n    elif steps[0][0] == 1: return 1\n    elif steps[0][0] == 2: return 2\n    elif steps[0][0] == 3: return 3\n    elif steps[0][0] == 4: return 4\n    else:\n        return min(min_Jumps(steps, d-1), min_Jumps(steps, d-2)) + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    \n    if steps == d: \n        return 1\n    \n    if steps == d: \n        return 0\n    \n    steps_ = [] \n    jumps = [] \n    \n    # Step 1: Initialize step for j-th step. \n    # Step 2: Create a list of length steps+2 which contains jump numbers. \n    # Step 3: Create a list of length steps to check for the minimum jump of that step. \n    # Step 4: If all jump numbers are found, return the number of jumps. \n    \n    for j in range(steps + 2): \n        # Step 1: Initialize step for j-th step. \n        # Step 2: Create a list of length steps to check for the minimum jump of that step. \n        # Step 3: If all jump numbers are found, return the number of jumps. \n        \n        if j == steps: \n            jumps.append(1)\n            break\n        \n        if j == 0: \n            jumps.append(0)\n            break\n        \n        # Step 2: Create a list of length steps to check for the minimum jump of that step. \n        # Step 3: If all jump numbers are found, return the number of jumps. \n        # Step 4: If all jump numbers are found, return the number of jumps. \n        \n        if j < steps and j >= 0: \n            if jumps[j - 1] == 0: \n                jumps.append(j)\n                break\n        \n    if jumps[j] == 0: \n        return min_Jumps(steps, d)\n    \n    return jumps[-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    check = [0,0]\n    check[0] = steps[0][0] + steps[0][1]\n    check[1] = steps[1][0] + steps[1][1]\n    if check[1] == 0:\n        check[1] = steps[0][0] + steps[1][0]\n    return check\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return False\n    if steps > d: return False\n    if (steps % 2) == 1: return False\n    return minJumps(steps, d - 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize counter variable for iterations\n    jumpCounter = 0\n    \n    # Check if the point is within a grid\n    if d >= steps[0] and d <= steps[1] and steps[0] >= 0 and steps[1] >= 0:\n        \n        # Calculate the total number of jumps required\n        jumpCounter = abs(steps[0] - d) + abs(steps[1] - d)\n        \n        # Check if it's not a local minimum\n        if jumpCounter < d:\n            return jumpCounter\n    \n    # Return if the point does not exist\n    else:\n        return 0\n    \ndef min_Jumps_2d(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize counter variable for iterations\n    jumpCounter = 0\n    \n    # Check if the point is within a grid\n    if d >= steps[0] and d <= steps[1] and steps[0] >= 0 and steps[1] >= 0:\n        \n        # Calculate the total number of jumps required\n        jumpCounter = abs(steps[0] - d) + abs(steps[1] - d)\n        \n        # Check if it's not a local minimum\n        if jumpCounter < d:\n            return jumpCounter\n    \n    # Return if the point does not exist\n    else:\n        return 0\n    "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in nums1:\n        if len(nums2) == 0:\n            return\n        else:\n            index = 0\n            while index < len(nums2):\n                if nums2[index] % i == 0:\n                    nums2.pop(index)\n                    index -= 1\n                index += 1\n    return nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n=len(nums1)\n    m=len(nums2)\n    dp=[[0 for x in range(m+1)]for y in range(n+1)]\n    for i in range(1,n+1):\n        dp[i][0]=nums1[i-1]\n    for j in range(1,m+1):\n        dp[0][j]=nums2[j-1]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if nums1[i-1]==nums2[j-1]:\n                dp[i][j]=1+dp[i-1][j-1]\n            else:\n                dp[i][j]=max(dp[i-1][j],dp[i][j-1])\n    return dp[n][m]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == len(nums2):\n        return [[nums1[i], nums2[i]] for i in range(len(nums1))]\n    else:\n        return [[nums1[i], nums2[i]] for i in range(len(nums1),len(nums2))]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!=len(nums2):\n        return None\n    s=list(set(nums1))\n    s.sort()\n    index=s.index(min(s))\n    if index==0:\n        return None\n    else:\n        return nums1[index]/nums2[index]\ndef main():\n    '''\n    Write a function that prints all even numbers in a list of size N.\n    '''\n    n=int(input())\n    l=[]\n    for i in range(0,n):\n        nums=int(input())\n        if nums%2==0:\n            l.append(nums)\n    print(l)\nmain("
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num_list1=[]\n    num_list2=[]\n    for i in range(len(nums1)):\n        num_list1.append(nums1[i])\n        num_list2.append(nums2[i])\n    # print(num_list1,num_list2)\n    return num_list1,num_list2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #iterative\n    i=0\n    for i in range(len(nums1)):\n        temp=[]\n        for j in range(len(nums2)):\n            temp.append(nums1[i]/nums2[j])\n        for j in range(len(nums1)):\n            nums1[i]=nums1[i]-temp[j]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    lst1 = nums1.split(',')\n    lst2 = nums2.split(',')\n    res = []\n    for i in range(len(lst1)):\n        lst1[i] = int(lst1[i])\n    for i in range(len(lst2)):\n        lst2[i] = int(lst2[i])\n    for i in range(len(lst1)):\n        if lst1[i]!= 0 and lst2[i]!= 0:\n            res.append(lst1[i]/lst2[i])\n    return res\n    \ndef test():\n    assert(div_list([1,2,3,4,5],2) == [2,2,2,2,2])\n    assert(div_list([1,2,3,4,5],5) == [1,2,2,2,2])\n    assert(div_list([1,2,3,4,5],1) == [1,2,2,2,2])\n    assert(div_list([1,2,3,4,5],0) == [1,2,2,2,2])\n    assert(div_list([1,2,3,4,5],2) == [1,3,6,10,20])\n    assert(div_list([1,2,3,4,5],5) == [1,5,10,15,20])\n    assert(div_list([1,2,3,4,5],10) == [1,2,2,2,2])\n    assert(div_list([1,2,3,4,5],4) == [1,2,3,4])\n    \n    print('Test passed')\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    lst = []\n    for i in range(0,len(nums1)):\n        lst.append(nums1[i])\n    for j in range(0,len(nums2)):\n        lst.append(nums2[j])\n    return lst\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not nums1 or not nums2:\n        return None\n    if len(nums1) > len(nums2):\n        l = len(nums1)\n        r = len(nums2)\n    else:\n        l = len(nums2)\n        r = len(nums1)\n    \n    arr = []\n    for i in range(l):\n        arr.append(nums1[i]//nums2[i])\n        if nums1[i]%nums2[i]!= 0:\n            arr[i]+=1\n        \n    return arr\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            if nums1[i] > nums2[i]:\n                temp = nums1[i]\n                nums1[i] = nums2[i]\n                nums2[i] = temp\n        return nums1,nums2\n    else:\n        return nums1,nums2\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.strip().replace(\" \", \"\")\n    for i in range(len(test_str)-1):\n        if test_str[i].isnumeric() or test_str[i] == \"-\" or test_str[i] == \"_\" or test_str[i] == \" \":\n            test_str = test_str[:i] + str(test_str[i+1:])\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = []\n    for letter in test_str:\n        if letter.isalpha():\n            result.append(letter.lower())\n        else:\n            result.append(letter)\n    return ''.join(result)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('0', '1').replace('1', '0')\n    test_str = test_str.replace('2', '1').replace('3', '2')\n    test_str = test_str.replace('4', '2').replace('5', '3')\n    test_str = test_str.replace('6', '3').replace('7', '4')\n    test_str = test_str.replace('8', '4').replace('9', '5')\n    test_str = test_str.replace('10', '5').replace('11', '6')\n    test_str = test_str.replace('12', '6').replace('13', '7')\n    test_str = test_str.replace('14', '7').replace('15', '8')\n    test_str = test_str.replace('16', '8').replace('17', '9')\n    test_str = test_str.replace('18', '9').replace('19', '10')\n    test_str = test_str.replace('20', '10').replace('21', '11')\n    test_str = test_str.replace('22', '11').replace('23', '12')\n    test_str = test_str.replace('24', '12').replace('25', '13')\n    test_str = test_str.replace('26', '13').replace('27', '14')\n    test_str = test_str.replace('28', '14').replace('29', '15')\n    test_str = test_str.replace('30', '15').replace('31', '16')\n    test_str = test_str.replace('32', '16').replace('33', '17')\n    test_str = test_str.replace('34', '17').replace('35', '18')\n    test_str = test_str.replace('36', '18').replace('37', '19')\n    test_str = test_str.replace('38', '19').replace('39', '20')\n    test_str = test_str.replace('40', '20').replace('41', '21')\n    test_str = test_str.replace('42', '21').replace('43', '22')\n    test_str = test_str.replace('44', '22').replace('45', '23')\n    test_str = test_str.replace('46', '23').replace('47', '24')\n    test_str = test_str.replace('48', '24').replace('49', '25')\n    test_str = test_str.replace('50', '25').replace('51', '26')\n    test_str = test_str.replace('52', '26').replace('53', '27')\n    test_str = test_str.replace('54', '27').replace('55', '28')\n    test_str = test_str.replace('56', '28').replace('57', '29')\n    test_str = test_str.replace('58', '29').replace('59', '30')\n    test_str = test_str.replace('60', '30').replace('61', '31')\n    test_str = test_str.replace('62', '31').replace('63', '32')\n    test_str = test_str.replace('64', '32').replace('65', '33')\n    test_str = test_str.replace('66', '33').replace('67', '34')\n    test_str = test_str.replace('68', '34').replace('69', '35')\n    test_str = test_str.replace('70', '35').replace('71', '36')\n    test_str = test_str.replace('72', '36').replace('73', '37')\n    test_str = test_str.replace('74', '37').replace('75', '38')\n    test_str = test_str.replace('76', '38').replace('77', '39')\n    test_str = test_str.replace('78', '39').replace('79', '40')\n    test_str = test_str.replace('80', '40').replace('81', '41')\n    test_str = test_str.replace('82', '41').replace('83', '42')\n    test_str = test_str.replace('84', '42').replace('85', '43')\n    test_str = test_str.replace('86', '43').replace('87', '44')\n    test_str = test_str.replace('88', '44').replace('89', '45')\n    test_str = test_str.replace('90', '45').replace('91', '46')\n    test_str = test_str.replace('92', '46').replace('93', '47')\n    test_str = test_str.replace('94', '47').replace('95', '48')\n    test_str = test_str.replace('96', '48').replace('97', '49')\n    test_str = test_str.replace('98', '49').replace('99', '50')\n    test_str = test_str.replace('100', '50').replace('101', '51')\n    test_str = test_str.replace('102', '51').replace('103', '52')\n    test_str = test_str.replace('104', '52').replace('105', '53')\n    test_str = test_str.replace('106', '53').replace('107', '54')\n    test_str = test_str.replace('108', '54').replace('109', '55')\n    test_str = test_str.replace('110', '55').replace('111', '56')\n    test_str = test_str.replace('112', '56').replace('113', '57')\n    test_str = test_str.replace('114', '57').replace('115', '58')\n    test_str = test_str.replace('116', '58').replace('117', '59')\n    test_str = test_str.replace('118', '59').replace('119', '60')\n    test_str = test_str.replace('120', '60').replace('121', '61')\n    test_str = test_str.replace('122', '61').replace('123', '62')\n    test_str = test_str.replace('124', '62').replace('125', '63')\n    test_str = test_str.replace('126', '63').replace('127', '64')\n    test_str = test_str.replace('128', '64').replace('129', '65')\n    test_str = test_str.replace('130', '65').replace('131', '66')\n    test_str = test_str.replace('132', '66').replace('133', '67')\n    test_str = test_str.replace('134', '67').replace('135', '68')\n    test_str = test_str.replace('136', '68').replace('137', '69')\n    test_str = test_str.replace('138', '69').replace('139', '70')\n    test_str = test_str.replace('140', '70').replace('141', '71')\n    test_str = test_str.replace('142', '71').replace('143', '72')\n    test_str = test_str.replace('144', '72').replace('145', '73')\n    test_str = test_str.replace('146', '73').replace('147', '74')\n    test_str = test_str.replace('148', '74').replace('149', '75')\n    test_str = test_str.replace('150', '75').replace('151', '76')\n    test_str = test_str.replace('152', '76').replace('153', '77')\n    test_str = test_str.replace('154', '77').replace('155', '78')\n    test_str = test_str.replace('156', '78').replace('157', '79')\n    test_str = test_str.replace('158', '79').replace('159', '80')\n    test_str = test_str.replace('160', '80').replace('161', '81')\n    test_str = test_str.replace('162', '81').replace('163', '82')\n    test_str = test_str.replace('164', '82').replace('165', '83')\n    test_str = test_str.replace('166', '83').replace('167'"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    arr = list(test_str)\n    num = 0\n    for i in range(len(arr)):\n        if arr[i] in str(1234567890):\n            arr[i] = str(int(arr[i]) + num)\n            num = num + 1\n        else:\n            arr[i] = arr[i] + str(num)\n            num = 0\n    return \"\".join(arr)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            result.append(test_str[i])\n        else:\n            result.append(test_str[i].replace('.', ''))\n    result = ''.join(result)\n    print(result)\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    regex = re.compile('(\\d+)')\n    test_str = regex.sub(r'\\1\\1', test_str)\n    test_str = test_str.replace('3', '1')\n    test_str = test_str.replace('4', '2')\n    test_str = test_str.replace('5', '3')\n    test_str = test_str.replace('6', '4')\n    test_str = test_str.replace('7', '5')\n    test_str = test_str.replace('8', '6')\n    test_str = test_str.replace('9', '7')\n    test_str = test_str.replace('10', '8')\n    test_str = test_str.replace('11', '9')\n    test_str = test_str.replace('12', '10')\n    test_str = test_str.replace('13', '11')\n    test_str = test_str.replace('14', '12')\n    test_str = test_str.replace('15', '13')\n    test_str = test_str.replace('16', '14')\n    test_str = test_str.replace('17', '15')\n    test_str = test_str.replace('18', '16')\n    test_str = test_str.replace('19', '17')\n    test_str = test_str.replace('20', '18')\n    test_str = test_str.replace('21', '19')\n    test_str = test_str.replace('22', '20')\n    test_str = test_str.replace('23', '21')\n    test_str = test_str.replace('24', '22')\n    test_str = test_str.replace('25', '23')\n    test_str = test_str.replace('26', '24')\n    test_str = test_str.replace('27', '25')\n    test_str = test_str.replace('28', '26')\n    test_str = test_str.replace('29', '27')\n    test_str = test_str.replace('30', '28')\n    test_str = test_str.replace('31', '29')\n    test_str = test_str.replace('32', '30')\n    test_str = test_str.replace('33', '31')\n    test_str = test_str.replace('34', '32')\n    test_str = test_str.replace('35', '33')\n    test_str = test_str.replace('36', '34')\n    test_str = test_str.replace('37', '35')\n    test_str = test_str.replace('38', '36')\n    test_str = test_str.replace('39', '37')\n    test_str = test_str.replace('40', '38')\n    test_str = test_str.replace('41', '39')\n    test_str = test_str.replace('42', '40')\n    test_str = test_str.replace('43', '41')\n    test_str = test_str.replace('44', '42')\n    test_str = test_str.replace('45', '43')\n    test_str = test_str.replace('46', '44')\n    test_str = test_str.replace('47', '45')\n    test_str = test_str.replace('48', '46')\n    test_str = test_str.replace('49', '47')\n    test_str = test_str.replace('50', '48')\n    test_str = test_str.replace('51', '49')\n    test_str = test_str.replace('52', '50')\n    test_str = test_str.replace('53', '51')\n    test_str = test_str.replace('54', '52')\n    test_str = test_str.replace('55', '53')\n    test_str = test_str.replace('56', '54')\n    test_str = test_str.replace('57', '55')\n    test_str = test_str.replace('58', '56')\n    test_str = test_str.replace('59', '57')\n    test_str = test_str.replace('60', '58')\n    test_str = test_str.replace('61', '59')\n    test_str = test_str.replace('62', '60')\n    test_str = test_str.replace('63', '61')\n    test_str = test_str.replace('64', '62')\n    test_str = test_str.replace('65', '63')\n    test_str = test_str.replace('66', '64')\n    test_str = test_str.replace('67', '65')\n    test_str = test_str.replace('68', '66')\n    test_str = test_str.replace('69', '67')\n    test_str = test_str.replace('70', '68')\n    test_str = test_str.replace('71', '69')\n    test_str = test_str.replace('72', '70')\n    test_str = test_str.replace('73', '71')\n    test_str = test_str.replace('74', '72')\n    test_str = test_str.replace('75', '73')\n    test_str = test_str.replace('76', '74')\n    test_str = test_str.replace('77', '75')\n    test_str = test_str.replace('78', '76')\n    test_str = test_str.replace('79', '77')\n    test_str = test_str.replace('80', '78')\n    test_str = test_str.replace('81', '79')\n    test_str = test_str.replace('82', '80')\n    test_str = test_str.replace('83', '81')\n    test_str = test_str.replace('84', '82')\n    test_str = test_str.replace('85', '83')\n    test_str = test_str.replace('86', '84')\n    test_str = test_str.replace('87', '85')\n    test_str = test_str.replace('88', '86')\n    test_str = test_str.replace('89', '87')\n    test_str = test_str.replace('90', '88')\n    test_str = test_str.replace('91', '89')\n    test_str = test_str.replace('92', '90')\n    test_str = test_str.replace('93', '91')\n    test_str = test_str.replace('94', '92')\n    test_str = test_str.replace('95', '93')\n    test_str = test_str.replace('96', '94')\n    test_str = test_str.replace('97', '95')\n    test_str = test_str.replace('98', '96')\n    test_str = test_str.replace('99', '97')\n    test_str = test_str.replace('100', '98')\n    test_str = test_str.replace('101', '99')\n    test_str = test_str.replace('102', '100')\n    test_str = test_str.replace('103', '101')\n    test_str = test_str.replace('104', '102')\n    test_str = test_str.replace('105', '103')\n    test_str = test_str.replace('106', '104')\n    test_str = test_str.replace('107', '105')\n    test_str = test_str.replace('108', '106')\n    test_str = test_str.replace('109', '107')\n    test_str = test_str.replace('110', '108')\n    test_str = test_str.replace('111', '109')\n    test_str = test_str.replace('112', '110')\n    test_str = test_str.replace('113', '111')\n    test_str = test_str.replace('114', '112')\n    test_str = test_str.replace('115', '113')\n    test_str = test_str.replace('116', '114')\n    test_str = test_str.replace('117', '115')\n    test_str = test_str.replace('118', '116')\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str=str(test_str)\n    a=test_str.split()\n    return \"\".join(a)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Take the current position\n    start = 0\n    end = 0\n    \n    # Calculate the length\n    length = len(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_lst = list(test_str)\n    for i in range(0, len(str_lst)):\n        if str_lst[i] in \"123456789\":\n            str_lst[i] = str_lst[i] + str_lst[i+1]\n    return ''.join(str_lst)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str[0] == '0':\n        return ''.join(test_str[1:])\n    else:\n        return test_str[:-1] + '0' + test_str[-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    S = []\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            if len(a[i:j]) > len(S):\n                S = a[i:j]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    nums = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a) + 1):\n            if a[j] % a[i] == 0:\n                if a[i] > max_so_far:\n                    max_so_far = a[i]\n                    max_ending_here = i\n            nums.append(a[i])\n    return [nums, max_ending_here]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    \n    # Find the maximum of the smallest and largest sublists\n    max_sub = -1\n    min_sub = n\n    \n    # Find the maximum and minimum elements of a sublist\n    for i in range(0,n):\n        \n        # Set the max sublist to the largest sublist\n        if a[i] > max_sub:\n            max_sub = a[i]\n        \n        # Set the min sublist to the smallest sublist\n        if a[i] < min_sub:\n            min_sub = a[i]\n    \n    # If the maximum and minimum sublists are equal\n    if max_sub == min_sub:\n        return max_sub\n    \n    # Find the index of the maximum sublist\n    max_index = 0\n    for i in range(0, n):\n        if a[i] > max_sub:\n            max_index = i\n    \n    # Find the index of the minimum sublist\n    min_index = n\n    for i in range(0, n):\n        if a[i] < min_sub:\n            min_index = i\n    \n    # If the max and min sublists are different\n    if max_index > min_index:\n        return largest_subset(a[0:max_index]) + largest_subset(a[max_index:])\n    \n    # Otherwise, the largest sublist will be returned\n    else:\n        return largest_subset(a[0:min_index]) + largest_subset(a[min_index:])\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    for x in a:\n        for y in a:\n            if x > y:\n                size = size + 1\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    smallest = a[0]\n    for i in range(1, len(a)):\n        smallest = max(smallest, a[i])\n        if smallest % a[i]!= 0:\n            return a[i]\n    return smallest\n    \ndef counting(a, i):\n    if i == len(a):\n        print(a)\n    else:\n        for j in range(i, len(a)):\n            a[i], a[j] = a[j], a[i]\n            counting(a, i+1)\n            a[i], a[j] = a[j], a[i]\n            \na = [5, 2, 6, 3, 7, 4, 8, 8, 10]\nprint(largest_subset(a))\ncounting(a, 0)\n    "
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    min = 0\n    max = 0\n    for n in range(len(a)):\n        if a[n] % 2 == 0:\n            min += a[n]\n        else:\n            max += a[n]\n    return max - min\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # copy a to a_list, calculate the number of ones, then take the max(a_list)\n    # after that, create a set and get all the smaller numbers in a_list, if there is any pair in a that is not in the set, it is not a subset, so add the pair\n    # as a smaller number to a_list\n    # if there is a pair, do not add that pair to a_list, remove that pair from the set and check if there is no combination of two\n    # smaller numbers. If this combination is the largest subset, then return its size, if not, return None\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    L = len(a)\n    # set of positive numbers\n    pos_set = {i for i in range(L)}\n    # if a is divisible by any number, return its positive number\n    def is_divisible(a):\n        for i in a:\n            if i not in pos_set:\n                return False\n        return True\n    # if not a divisible by any number, return 0\n    def is_divisible_alt(a):\n        for i in a:\n            if i not in pos_set:\n                return False\n        return True\n    # if a is not divisible by any number, return 0\n    def is_divisible_alt_alt(a):\n        for i in a:\n            if i not in pos_set:\n                return False\n        return True\n    # if a is divisible by all positive numbers, return a list of all positive numbers\n    if is_divisible(a):\n        return pos_set\n    # if a is divisible by all positive numbers, return the whole array\n    if is_divisible_alt(a):\n        return a\n    # if a is divisible by all negative numbers, return the whole array\n    if is_divisible_alt_alt(a):\n        return a\n    # if a is divisible by all negative numbers, return all positive numbers in a list\n    if is_divisible_alt_alt(a):\n        return [i for i in a if i in pos_set]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_sum = 0\n    max_sum_set = []\n    \n    for i in range(len(a)):\n        if a[i] not in max_sum_set:\n            max_sum_set.append(a[i])\n            \n        if a[i] % 2 == 0:\n            sub_sum = a[i] * a[i+1]\n        else:\n            sub_sum = a[i] * a[i+1] * 2\n        \n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            max_sum_set = [a[i]]\n        \n        if sub_sum < 0:\n            max_sum = max_sum * -1\n    \n    return max_sum\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    l = [1]*n\n    j = [0]*n\n    ans = [0]*n\n    for i in range(n):\n        j[i] = 1\n        for jj in range(i):\n            if a[i]%a[jj]==0:\n                l[i] = l[jj] + 1\n                j[i] = 0\n    # print(l)\n    for i in range(n):\n        # print(l[i])\n        if j[i]==1:\n            ans[i] = max(l[i], ans[i])\n    # print(ans)\n    # print(l)\n    # print(n)\n    return ans"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) < len(arr2):\n        med = (arr1 + arr2)\n    else:\n        med = (arr2 + arr1)\n    if len(med) % 2 == 0:\n        return (med[len(med)//2] + med[(len(med)//2)-1])/2\n    else:\n        return med[len(med)//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n % 2 == 0):\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return (arr1[n//2] + arr2[n//2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return\n    elif n == 1:\n        return arr1[0]\n    else:\n        middle = (n - 1) // 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0] + arr2[0]) / 2\n    if n % 2 == 0:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n    else:\n        return (arr1[n // 2] + arr2[n // 2])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort the list to get the middle element\n    arr1.sort()\n    arr2.sort()\n    \n    #print(arr1, arr2)\n    \n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    return int(arr1[(len(arr1) // 2)])\n    \ndef get_lower_upper_bound(arr, n):\n    '''\n    Given an array and a target length n, returns the \n    lower bound, upper bound and median of the array\n    '''\n    # sort the list to get the middle element\n    arr.sort()\n    \n    if len(arr) < 2:\n        return arr[0], arr[0], arr[0]\n    \n    if n == 2:\n        return arr[0], arr[1], arr[1]\n    \n    # choose the middle element\n    mid = int(len(arr) / 2)\n    \n    # choose the first element and the second element\n    lower = arr[:mid]\n    upper = arr[mid:]\n    \n    # find the median\n    lower_median = get_median(lower, n)\n    upper_median = get_median(upper, n)\n    \n    return lower, upper, lower_median, upper_median\n    \ndef get_sum(arr, n):\n    '''\n    Given an array and a target length n, returns the sum\n    of the array\n    '''\n    # sort the list to get the middle element\n    arr.sort()\n    \n    if len(arr) < 2:\n        return arr[0]\n    \n    # choose the first element and the second element\n    lower = arr[:n]\n    upper = arr[n:]\n    \n    # find the sum\n    sum = 0\n    for x in lower:\n        sum += x\n    for x in upper:\n        sum += x\n    \n    return sum\n    \ndef get_diff(arr, n):\n    '''\n    Given an array and a target length n, returns the difference\n    between the array and the median\n    '''\n    # sort the list to get the middle element\n    arr.sort()\n    \n    if len(arr) < 2:\n        return arr[0] - arr[1]\n    \n    # choose the first element and the second element\n    lower = arr[:n]\n    upper = arr[n:]\n    \n    # find the sum\n    sum = 0\n    for x in lower:\n        sum += x\n    for x in upper:\n        sum += x\n    \n    return abs(sum - get_median(lower, n))\n    \ndef get_count(arr, n):\n    '''\n    Given an array and a target length n, returns the count\n    of the array\n    '''\n    # sort the list to get the middle element\n    arr.sort()\n    \n    if len(arr) < 2:\n        return arr[0]\n    \n    # choose the first element and the second element\n    lower = arr[:n]\n    upper = arr[n:]\n    \n    # find the sum\n    sum = 0\n    for x in lower:\n        sum += x\n    for x in upper:\n        sum += x\n    \n    # count\n    return len(arr) - sum\n    \ndef get_ratio(arr, n):\n    '''\n    Given an array and a target length n, returns the ratio\n    between the array and the median\n    '''\n    # sort the list to get the middle element\n    arr.sort()\n    \n    if len(arr) < 2:\n        return arr[0]\n    \n    # choose the first element and the second element\n    lower = arr[:n]\n    upper = arr[n:]\n    \n    # find the sum\n    sum = 0\n    for x in lower:\n        sum += x\n    for x in upper:\n        sum += x\n    \n    # count\n    return len(arr) / sum\n    \ndef main():\n    print('#' * 50)\n    print(f'{get_sum(numbers, 5) = }')\n    print(f'{get_median(numbers, 5) = }')\n    print(f'{get_diff(numbers, 5) = }')\n    print(f'{get_count(numbers, 5) = }')\n    print(f'{get_ratio(numbers, 5) = }')\n    print(f'{get_sum(numbers, 2) = }')\n    print(f'{get_median(numbers, 2) = }')\n    print(f'{get_diff(numbers, 2) = }')\n    print(f'{get_count(numbers, 2) = }')\n    print(f'{get_ratio(numbers, 2) = }')\n    print(f'{get_sum(numbers, 1) = }')\n    print(f'{get_median(numbers, 1) = }')\n    print(f'{get_diff(numbers, 1) = }')\n    print(f'{get_count(numbers, 1) = }')\n    print(f'{get_ratio(numbers, 1) = }')\n    print('#' * 50)\n    \nif __name__ == '__main__':\n    numbers = [int(x) for x in input().split()]\n    print(f'{get_sum(numbers, 5) = }')\n    print(f'{get_median(numbers, 5) = }')\n    print(f'{get_diff(numbers, 5) = }')\n    print(f'{get_count(numbers, 5) = }')\n    print(f'{get_ratio(numbers, 5) = }')\n    print(f'{get_sum(numbers, 2) = }')\n    print(f'{get_median(numbers, 2) = }')\n    print(f'{get_diff(numbers, 2) = }')\n    print(f'{get_count(numbers, 2) = }')\n    print(f'{get_ratio(numbers, 2) = }')\n    print('#' * 50)\n    main()"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Method 1:\n    # Finding the median of two sorted arrays.\n    # The idea is to divide the array in two subarrays (a,b) which are (x,y)\n    # where y is the middle point of x.\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[(n - 1) // 2] + arr1[n // 2]) / 2\n    else:\n        return arr1[n // 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    temp_arr = []\n    if len(arr1) > len(arr2):\n        for i in arr1:\n            if i not in arr2:\n                temp_arr.append(i)\n    else:\n        for i in arr2:\n            if i not in arr1:\n                temp_arr.append(i)\n    if len(arr1) == 0:\n        return (0)\n    if len(arr2) == 0:\n        return (0)\n    if len(temp_arr) == 0:\n        return (0)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n    elif n == 1:\n        return arr1[0]\n    else:\n        index_1 = n//2\n        index_2 = n-index_1\n        arr1_median = get_median(arr1[:index_1+1], arr1[index_1+1:], index_1)\n        arr2_median = get_median(arr2[:index_2+1], arr2[index_2+1:], index_2)\n        if index_1!= index_2:\n            if arr1_median == -1 and arr2_median == -1:\n                return -1\n            elif arr1_median == -1 and arr2_median!= -1:\n                return arr2_median\n            elif arr1_median!= -1 and arr2_median == -1:\n                return arr1_median\n            else:\n                return arr1_median if arr1_median < arr2_median else arr2_median\n        else:\n            if arr1_median == -1:\n                return arr2_median\n            elif arr2_median == -1:\n                return arr1_median\n            else:\n                return arr1_median if arr1_median > arr2_median else arr2_median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the middle\n    mid = int(n/2)\n    \n    # find the median at the mid\n    if n % 2 == 0:\n        left_median = arr1[mid]\n        right_median = arr2[mid]\n    else:\n        left_median = arr2[mid]\n        right_median = arr1[mid]\n    \n    # find the median\n    mid_median = (left_median + right_median) / 2\n    \n    # return\n    return mid_median\n    \n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def nth_nums_power(a,n):\n        n=n-1\n        res=[1]\n        for i in range(n):\n            res.append(a**i)\n        return res\n    if not nums or len(nums)<n:\n        return []\n    return nth_nums_power(nums,n)"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1,1]\n    else:\n        l = nth_nums(nums,n//2)\n        if n % 2 == 0:\n            l = [l[i]**2 for i in range(len(l))]\n        return l\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # if n <= len(nums):\n    #     return nums[n-1]**n\n    # else:\n    #     return 1\n    # for i in range(n):\n    #     nums[i]**=n\n    # return nums\n    i = n\n    while i>0:\n        nums[i]**=i\n        i-=1\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for n in range(len(nums)):\n        nums[n] = nums[n]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n        \n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # define helper function\n    def power(n,power):\n        # base case\n        if power == 0:\n            return 1\n        # recursive case\n        elif n == 0:\n            return 0\n        # compute the power\n        else:\n            return power*power*n\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for i in range(len(nums)):\n        power *= nums[i]\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power=1\n    for i in range(len(nums)):\n        power=power*nums[i]\n    return power\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #Write your code here\n    if len(nums) == 0:\n        return []\n    if n == 1:\n        return nums\n    if n == 2:\n        return [nums[0]**2] + [nums[1]**2]\n    return [nums[0]**n] + [nums[1]**n] + nth_nums(nums[2:],n-1)\n    \n    \nnth_nums([2, 3, 4, 1], 3)\nnth_nums([2, 3, 4, 1], 4)\nnth_nums([2, 3, 4, 1], 5"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    num_list = []\n    for i in range(len(nums)):\n        num_list.append(nums[i]**(len(nums)-i-1))\n    return num_list\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    res = \"\"\n    for letter in string:\n        if letter.isupper():\n            res += letter.upper()\n        else:\n            res += letter\n    return res\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == string.upper():\n        return string\n    else:\n        return 'Not a Valid String'\n    \ndef to_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    if string == string.lower():\n        return string\n    else:\n        return 'Not a Valid String'\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    "
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper = ''\n    for char in string:\n        if char.isupper():\n            upper += char.upper()\n        else:\n            upper += char\n    return upper\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length - 1]\n    newList[length - 1] = first\n    newList[0] = last\n    return newList\n    \nnew_list = [1, 2, 3, 4, 5]\nprint(new_list)\nprint(swap_List(new_list))\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return newList\n    elif len(newList) > 1:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n    else:\n        return newList\n    \ndef main():\n    '''\n    Write a program to print all numbers from 0 to 100.\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Code goes here\n    # If the list is empty, return an empty list\n    if len(newList) == 0:\n        return newList\n    elif len(newList) == 1:\n        newList.pop(0)\n        newList.pop(0)\n        return newList\n    elif len(newList) == 2:\n        newList.insert(0, newList.pop(0))\n        newList.insert(1, newList.pop())\n        return newList\n    else:\n        # Get the middle element\n        # Swap the first and last elements\n        # put the middle element back\n        # get the second and the first element\n        # return the new list\n        # The solution is easier to solve and do it in python\n        mid = (len(newList)-2) // 2\n        first = newList.pop(mid)\n        second = newList.pop(mid)\n        newList.insert(mid, first)\n        newList.insert(mid, second)\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    i = 0\n    j = n-1\n    while (i < n-1 and j >=0):\n        temp = newList[i]\n        newList[i] = newList[j]\n        newList[j] = temp\n        i += 1\n        j -= 1\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(len(newList)-1):\n        newList[i], newList[i+1] = newList[i+1], newList[i]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    old = len(newList) - 1\n    i = 1\n    while i <= old:\n        newList[old], newList[i] = newList[i], newList[old]\n        i += 1\n        old -= 1\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    index = 0\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList.append(newList.pop())\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(len(newList)):\n        temp = newList[i]\n        newList[i] = newList[len(newList) - 1 - i]\n        newList[len(newList) - 1 - i] = temp\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        raise ValueError(\"radius must be positive\")\n    if r > 0 :\n        return (2 * 3.14) * r ** 2\n    else :\n        raise ValueError(\"radius must be positive\")\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area=0\n    for i in range(1,r):\n        area=area+math.pow(i,2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    triangle_list = [ [r, -(r + sqrt(r**2 - 4*r*cos(a))), -(r + sqrt(r**2 - 4*r*cos(a)))] for a in arange(-pi, pi, 0.01)]\n    area_list = [ [a**2 + b**2 for a, b in zip(triangle_list[i][0], triangle_list[i][1])] for i in range(len(triangle_list)) ]\n    return sum(area_list)**(1/2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r > 0):\n        if ((r%2) == 0):\n            return (r**2)\n        else :\n            return (r**2) * 0.5\n    else :\n        return \"Incorrect data given\"\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import factorial\n    import math\n    \n    a = (3.14*(r**2))\n    b = (math.pi*(r**2))\n    c = math.sqrt((2*r)**2)\n    d = 2*c\n    e = 3*(math.pi*(r**2))\n    f = (factorial(3))\n    g = (factorial(4))\n    h = factorial(3)\n    i = factorial(4)\n    j = factorial(2)\n    k = factorial(2)*2\n    l = factorial(4)\n    m = factorial(2)\n    n = factorial(1)\n    o = factorial(0)\n    p = factorial(1)\n    q = factorial(2)\n    s = factorial(2)\n    t = factorial(4)\n    u = factorial(6)\n    v = factorial(8)\n    x = factorial(12)\n    y = factorial(24)\n    z = factorial(36)\n    \n    return ((a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*s*t*u*v*x*y*z)/(4*math.pi))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    \n    if r >= 1 :\n        a = (r * 2) ** 0.5\n        while r >= a :\n            r = a/2\n            area += (2 * r) * (r * (r + 1))\n        return round(area,2)\n    else :\n        raise ValueError(\"Radius should be greater than 1\")\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        return 0\n    else :\n        if (r % 2 == 0) :\n            return (r**2) - (4/3)*(r+1)\n        else :\n            return (r**2) - (4/3)*(r+1) + ((r+1)/2)**2\n        \nprint(triangle_area(7))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #declare variables\n    l = r\n    d = l * 2\n    a = -l\n    #iterate until we reach a point that is a square with two sides\n    while d > 0 :\n        if a ** 2 > d :\n            a = a - l\n            d = d * 2\n        else :\n            d = d - l\n    return d\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (math.pi * r**2) * 2\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 1 :\n        return 0.5*(r*(r+1))\n    elif r > 1 :\n        return ((1/3)*(r**3))\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end - start < 0:\n        return None\n    mid = (start+end)//2\n    if array[mid] == mid:\n        return array[mid]\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid-1)\n    elif array[mid] < mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return mid\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    elif end<0:\n        end=len(array)-1\n    for i in range(start,end):\n        if array[i] > array[end]:\n            return array[i]\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    \n    left=start\n    right=end\n    \n    while left<=right:\n        mid=(left+right)//2\n        if mid == 0:\n            return array[mid]\n        if mid < array[mid]:\n            left = mid +1\n        if mid > end:\n            right = mid -1\n    return array[left]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end < start:\n        print(\"Error: end is less than start\")\n        return -1\n    start, end = (start-1, end-1) if start<end else (end-1, start-1)\n    while start < end:\n        middle = (start + end) // 2\n        if array[middle] == middle:\n            start = middle + 1\n        else:\n            end = middle\n    return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start >= end:\n        return None\n    mid = (start+end)//2\n    if array[mid] == mid+1:\n        return mid+1\n    if array[mid] < mid+1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    mid = (start + end)//2\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for char in string:\n        if char!='' and char!= '\\t':\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \",\"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20'"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for char in string:\n        if char!='':\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for char in string:\n        if char =='':\n            string = string.replace(' ','%20')\n        else:\n            string = string.replace(char,'%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            evens.append(list[i])\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return [even,odd]\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    odd=[]\n    for i in list: \n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return [even,odd] \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list = []\n    # iterate through the list and check if even\n    for i in list: \n        if i % 2 == 0: \n            new_list.append(i)\n    return new_list\n    "
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    return even_list\n    \n    \ndef Even_numbers(even_list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_even = []\n    for i in range(len(even_list)):\n        if even_list[i] % 2 == 0:\n            even_even.append(even_list[i])\n    return even_even\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for item in list: \n        if item % 2 == 0: \n            even_numbers.append(item)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l = []\n    for i in list:\n        if i%2 == 0:\n            l.append(i)\n    return l\n    "
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append( (x, y-1) )\n    sub.append( (x, y+1) )\n    sub.append( (x-1, y) )\n    sub.append( (x+1, y) )\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return sub[sub.index(ele)+1:]\n    else:\n        sub.append(ele)\n        return adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0]==-1 or ele[1]==-1 or ele[0]==-1 or ele[1]==-1:\n        return sub\n    sub.append((ele[0], ele[1]))\n    adjac(ele[0]+1,sub)\n    adjac(ele[1]+1,sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return \n    else:\n        sub.append(ele) \n        adjac(ele[0], sub) \n        adjac(ele[1], sub) \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if ele[0] == ele[1]: \n        adjac(ele[0], sub)\n    else: \n        adjac(ele[1], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele[0])\n    sub.append(ele[1])\n    sub.append(ele[0])\n    sub.append(ele[1])\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == ele[1] == ele[2] or ele[1] == ele[0] == ele[2] or ele[2] == ele[0] == ele[1]: \n        sub.append(ele)\n    if ele[0] == ele[1]!= ele[2] or ele[1]!= ele[0]!= ele[2]:\n        sub.append(ele)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + ele\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return sub # Check if the current coordinate is in sub\n    sub.append(ele) \n    return adjac(ele[0], sub) + adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Base case\n    if ele[0] == ele[1]: \n        return (ele[0] - 1, ele[1] - 1)\n    \n    return (ele[0] - 1, ele[1])\n    \ndef coords(a, b): \n    '''\n    Return the coordinates of the points a and b.\n    '''\n    # Base case\n    if a[0] == b[0]: \n        return (a[0] - 1, a[1] - 1)\n    \n    return (a[0] - 1, a[1] - 1)\n    \ndef check(p1, p2, p3): \n    '''\n    Check if two points are on the same line.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return False\n    \n    # If all the points are the same coordinate, then the points on the line are not on the same line.\n    if p1[0] == p3[0] and p1[1] == p3[1]: \n        return False\n    \n    # The two points are on the same line.\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return True\n    \n    return False\n    \ndef check_if_there_are_no_crossings(a, b): \n    '''\n    Check if there are no crossings between the given points a and b.\n    '''\n    # Base case\n    if a[0] == b[0] and a[1] == b[1]: \n        return False\n    \n    # All the points are on the same line.\n    if a[0] == a[1] and a[0] == b[0]: \n        return False\n    \n    # The points are on the same line.\n    if a[0] == a[0] and a[1] == b[1]: \n        return False\n    \n    return True\n    \ndef check_if_there_are_no_crossings(p1, p2, p3): \n    '''\n    Check if there are no crossings between the given points a and b.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return False\n    \n    if p1[0] == p3[0] and p1[1] == p3[1]: \n        return False\n    \n    return True\n    \ndef check_if_there_are_no_crossings(p1, p2): \n    '''\n    Check if there are no crossings between the given points a and b.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return False\n    \n    return True\n    \ndef check_if_there_are_no_crossings(p1, p2): \n    '''\n    Check if there are no crossings between the given points a and b.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return False\n    \n    return True\n    \ndef check_if_there_are_no_crossings(p1, p2): \n    '''\n    Check if there are no crossings between the given points a and b.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return False\n    \n    return True\n    \ndef point_has_crossing(p1, p2): \n    '''\n    Check if a point is crossing the two given points.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return True\n    \n    return False\n    \ndef point_has_no_crossing(p1, p2): \n    '''\n    Check if a point is not crossing the two given points.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return True\n    \n    return False\n    \ndef point_has_no_crossing(p1, p2): \n    '''\n    Check if a point is not crossing the two given points.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return True\n    \n    return False\n    \ndef point_has_no_crossing(p1, p2): \n    '''\n    Check if a point is not crossing the two given points.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return True\n    \n    return False\n    \ndef point_has_no_crossing(p1, p2): \n    '''\n    Check if a point is not crossing the two given points.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return True\n    \n    return False\n    \ndef point_has_no_crossing(p1, p2): \n    '''\n    Check if a point is not crossing the two given points.\n    '''\n    # Base case\n    if p1[0] == p2[0] and p1[1] == p2[1]: \n        return True\n    \n    return False\n    \ndef line_has_no_crossing(line1, line2): \n    '''\n    Check if a line has no crossing.\n    '''\n    # Base case\n    if line1[0] == line2[0] and line1[1] == line2[1]: \n        return True\n    \n    return False\n    \ndef line_has_no_crossing(line1, line2): \n    '''\n    Check if a line has no crossing.\n    '''\n    # Base case\n    if line1[0] == line2[0] and line1[1] == line2[1]: \n        return True\n    \n    return False\n    \ndef line_has_no_crossing(line1, line2): \n    '''\n    Check if a line has no crossing.\n    '''\n    # Base case\n    if line1[0] == line2[0] and line1[1] == line2[1]: \n        return True\n    \n    return False\n    \ndef line_has_no_crossing(line1, line2): \n    '''\n    Check if a line has no crossing.\n    '''\n    # Base case\n    if line1[0] == line2[0] and line1[1] == line2[1]: \n        return True\n    \n    return False\n    \ndef line_has_no_crossing(line1, line2): \n    '''\n    Check if a line has no crossing.\n    '''\n    # Base case\n    if line1[0] == line2[0] and line1[1] == line2[1]: \n        return True\n    \n    return False\n    \ndef line_has_no_crossing(line1, line2): \n    '''\n    Check if a line has no crossing.\n    '''\n    # Base case\n    if line1[0] == line2[0] and line1[1] == line2[1]: \n        return True\n    \n    return False\n    \ndef line_has_no_crossing(line1, line2): \n    '''\n    Check if a line has no crossing.\n    '''\n    # Base case\n    if line1[0] == line2[0] and line1[1] == line2[1]: \n        return True\n    \n    return False\n    \ndef line_has_no_crossing(line1, line2): \n    '''\n    Check if a line has no crossing.\n    '''\n    # Base case\n    if line1[0] == line2[0] and line1[1] == line2["
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    string = text.replace(' ', '_')\n    string = string.replace('.', '_')\n    return string\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = re.sub(r'\\s+','_',text)\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\".\", \"_\")\n    text = text.replace(\"?\", \"_\")\n    text = text.replace(\"!\", \"_\")\n    text = text.replace(\"-\", \"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #create a new string to store the answer\n    ans=''\n    for i in text:\n        if i==''or i=='\\n' or i=='\\t':\n            ans+=i\n        else:\n            ans+=i.replace(\" \",\"_\")\n    return ans"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('-', '_').replace('.', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('-', '_').replace('.', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_').replace('.', '_').replace('?', '_').replace('!', '_').replace('\u00e2', '_').replace('\u00e7', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\").replace(\" \", \"_\")\n    text = text.replace(\"\\n\", \"_\").replace(\"\\t\", \"_\")\n    text = text.replace(\"\\r\", \"_\").replace(\"\\x0c\", \"_\").replace(\"\\x1c\", \"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Initialization\n    # text = text.split()\n    # text =''.join(text)\n    # text = text.replace(' ', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('@', '_')\n    # text = text.replace('$', '_')\n    # text = text.replace('%', '_')\n    # text = text.replace('^', '_')\n    # text = text.replace('_', '_')\n    # text = text.replace('-', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('=', '_')\n    # text = text.replace('{', '_')\n    # text = text.replace('}', '_')\n    # text = text.replace(';', '_')\n    # text = text.replace('\\'', '_')\n    # text = text.replace('`', '_')\n    # text = text.replace(':', '_')\n    # text = text.replace('\"', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('@', '_')\n    # text = text.replace('$', '_')\n    # text = text.replace('%', '_')\n    # text = text.replace('^', '_')\n    # text = text.replace('_', '_')\n    # text = text.replace('-', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('=', '_')\n    # text = text.replace('{', '_')\n    # text = text.replace('}', '_')\n    # text = text.replace(';', '_')\n    # text = text.replace('\\'', '_')\n    # text = text.replace('`', '_')\n    # text = text.replace(':', '_')\n    # text = text.replace('\"', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_')\n    # text = text.replace('=', '_')\n    # text = text.replace('{', '_')\n    # text = text.replace('}', '_')\n    # text = text.replace(';', '_')\n    # text = text.replace('\\'', '_')\n    # text = text.replace('`', '_')\n    # text = text.replace(':', '_')\n    # text = text.replace('\"', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_')\n    # text = text.replace('=', '_')\n    # text = text.replace('{', '_')\n    # text = text.replace('}', '_')\n    # text = text.replace(';', '_')\n    # text = text.replace('\\'', '_')\n    # text = text.replace('`', '_')\n    # text = text.replace(':', '_')\n    # text = text.replace('\"', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_')\n    # text = text.replace('=', '_')\n    # text = text.replace('{', '_')\n    # text = text.replace('}', '_')\n    # text = text.replace(';', '_')\n    # text = text.replace('\\'', '_')\n    # text = text.replace('`', '_')\n    # text = text.replace(':', '_')\n    # text = text.replace('\"', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_')\n    # text = text.replace('=', '_')\n    # text = text.replace('{', '_')\n    # text = text.replace('}', '_')\n    # text = text.replace(';', '_')\n    # text = text.replace('\\'', '_')\n    # text = text.replace('`', '_')\n    # text = text.replace(':', '_')\n    # text = text.replace('\"', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_')\n    # text = text.replace('=', '_')\n    # text = text.replace('{', '_')\n    # text = text.replace('}', '_')\n    # text = text.replace(';', '_')\n    # text = text.replace('\\'', '_')\n    # text = text.replace('`', '_')\n    # text = text.replace(':', '_')\n    # text = text.replace('\"', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_')\n    # text = text.replace('=', '_')\n    # text = text.replace('{', '_')\n    # text = text.replace('}', '_')\n    # text = text.replace(';', '_')\n    # text = text.replace('\\'', '_')\n    # text = text.replace('`', '_')\n    # text = text.replace(':', '_')\n    # text = text.replace('\"', '_')\n    # text = text.replace('+', '_')\n    # text = text.replace('!', '_')\n    # text = text.replace('(', '_')\n    # text = text.replace(')', '_')\n    # text = text.replace('.', '_')\n    # text = text.replace(',', '_'"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.insert(i,0)\n    return num_list\n    \nnum_list = [0,1,2,3,4,5,6,7,8,9]\nnum_list = move_zero(num_list)\nprint(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            pass\n        else:\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, value in enumerate(num_list):\n        if value == 0:\n            num_list[index] = -1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result = []\n    for i in num_list:\n        if i == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.remove(num)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.reverse()\n    num_list.append(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    lst = [0] * len(num_list)\n    while len(lst) > 0:\n        num = lst.pop()\n        if num!= 0:\n            lst.append(num)\n            continue\n    return lst\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(0)\n        elif num_list[i]!= 0:\n            num_list.pop()\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        sum = sum ^ arr[i]\n    return sum \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(n) : \n        total += arr[i]\n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_ = 0\n    for i in range(n-1) :\n        for j in range(i+1, n) : \n            sum_ += arr[i]^arr[j]\n    return sum_\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) <= 1: \n        return 0\n    if n == 1: \n        return 1\n    else : \n        return pair_xor_Sum(arr[1:],n) + pair_xor_Sum(arr[:-1],n)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_of_xor = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum_of_xor += arr[i]^arr[j]\n    return sum_of_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Adding all the numbers into a list\n    all_numbers = [i for i in arr]\n    # Adding xor to all numbers\n    xor_numbers = [all_numbers[i]^all_numbers[i+1] for i in range(len(all_numbers)-1)]\n    # Summing the xor_numbers list\n    xor_sum = sum(xor_numbers)\n    # Creating a list of all numbers that are not xor\n    xor_list = [i for i in range(1,len(xor_numbers)) if xor_numbers[i]!=xor_numbers[i-1]]\n    # returning the list of all pairs\n    return xor_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum = sum ^ (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # generate a list of pairs\n    xor_list = [(a,b) for a in arr for b in arr if a!=b]\n    print(xor_list)\n    # find sum of pairs\n    sum_xor = sum([xor[0]^xor[1] for xor in xor_list])\n    print(sum_xor)\n    return sum_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # return sum of xor of every pair\n    return sum([x^y for x,y in itertools.combinations(arr,2)])\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    y = 0\n    for i in range(n) :\n        x = x ^ arr[i]\n        y = y ^ arr[i]\n    return x,y\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def sort_rec(iterable,key):\n        if len(iterable) == 0:\n            return iterable\n        if key(iterable[0]) > key(iterable[1]):\n            return [iterable[0],iterable[1]]\n        else:\n            return [iterable[1],iterable[0]]\n    return sorted(iterable,key=sort_rec,reverse=True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def sort_helper(iterable, heap_type):\n        if heap_type == 'heap':\n            heapq.heapify(iterable)\n        return tuple(sorted(iterable))\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for el in iterable:\n        heapq.heappush(hq, el)\n    return list(reversed(heapq.heappop(hq)))\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=hq.nlargest_key)\ndef deque(iterable, n=None):\n    '''\n    Write a function to create a queue.\n    '''\n    return hq.deque(iterable, maxlen=n)\ndef max_heap(iterable, n=None):\n    '''\n    Write a function to create a max heap.\n    '''\n    return sorted(iterable, key=lambda x: x, reverse=True)\ndef merge(iterable, key=None):\n    '''\n    Write a function to merge two sorted sequences into a single sequence.\n    '''\n    return sorted(iterable, key=key, reverse=True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        heapq.heappush(h, i)\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # The idea is to sort the list by listing all ith elements, then perform the merge operation on the two lists\n    # while maintaining the order of the new list. The order is still preserved.\n    \n    # The first part of the merge operation is to maintain the order of the two lists, while keeping the order of the new list.\n    # This is a Heap.\n    \n    # To do this, a list of lists of integers is broken into 2 separate lists.\n    \n    # The first part of the merge operation uses a heap.\n    # The second part of the merge operation uses a priority queue.\n    \n    # The merge operation uses a priority queue to keep the order of the new list. The priority queue is a heap of tuples\n    # that are sorted by the index in the list, and the index of the list, that is greater than the other tuple.\n    \n    # The priority queue has two attributes.\n    \n    # 1. The first attribute is the list that each tuple in the list is sorted by.\n    # 2. The second attribute is the index of the tuple.\n    \n    # We will use heapq to maintain the order of the two lists.\n    \n    # We will also maintain the order of the new list, so that the order of the new list is preserved.\n    \n    # The priority queue is sorted by the order of the tuple itself,\n    # so that the order of the new list is preserved.\n    \n    # The priority queue does not maintain the order of the first element of the list.\n    \n    # The priority queue does not maintain the order of the second element of the list.\n    \n    # The priority queue does not maintain the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the first element of the new list.\n    \n    # The priority queue maintains the order of the second element of the new list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintains the order of the elements in the new list.\n    \n    # The priority queue maintains the order of the elements in the other list.\n    \n    # The priority queue maintain"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        hq.heappush(iterable, iterable.pop(i))\n    for i in range(len(iterable)):\n        heapq.heapify(iterable)\n        heapq.heappush(iterable, -hq.heappop(iterable))\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #create a minheap to store the elements\n    heap = []\n    #iterate through the list and push the next element as the smallest\n    for x in iterable:\n        heapq.heappush(heap, -x)\n    #iterate through the heap until the heap is not empty\n    while heap:\n        #pop the smallest element\n        smallest = heapq.heappop(heap)\n        #iterate through the remaining elements\n        for x in iterable:\n            #if the current element is greater than the smallest\n            if smallest + x > -smallest:\n                #push it to the heap\n                heapq.heappush(heap, -x)\n    #return the final list\n    return heapq.nlargest(len(iterable), heap)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for value in iterable:\n        hq.heappush(iterable, value)\n        hq.heapify(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, reverse=True)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        profit = actual_cost - sale_amount\n        return profit\n    elif actual_cost < sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return actual_cost\ndef profit_validation(actual_cost,sale_amount):\n    '''\n    check whether the given amount has no profit or no loss\n    '''\n    if sale_amount < actual_cost:\n        raise Exception('A profit cannot be made from selling some items')\n    elif sale_amount > actual_cost:\n        raise Exception('A profit cannot be made from selling some items')\n    else:\n        return actual_cost\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    try:\n        if actual_cost - sale_amount < 0.0:\n            return False\n        else:\n            return True\n    except:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost - sale_amount \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    def noprofit(profit,loss):\n        '''\n        a function to check whether the profit is greater than the loss\n        '''\n        if profit > loss:\n            return False\n        elif profit < loss:\n            return True\n        return True\n    if sale_amount!= 0:\n        profit_no_loss = noprofit(actual_cost,sale_amount)\n        return profit_no_loss\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Declare variables\n    profit = actual_cost\n    loss = sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # YOUR CODE HERE\n    noprofit_noloss_cost=actual_cost-sale_amount\n    return noprofit_noloss_cost>=0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"Payment is not enough\")\n    else:\n        print(\"Sale profit is better\")\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in actual_cost:\n        if i!= sale_amount:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #your code here\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(t>=0 and t<=10):\n        temp = math.floor(v/6.0*(7.0/32.0) + 32.0)\n        wind_chill = (v - (0.6*temp))\n        if wind_chill > 100:\n            wind_chill = 100\n        if wind_chill < -100:\n            wind_chill = -100\n        return(math.floor(wind_chill))\n    else:\n        return -1\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert the wind speed from km/h to m/s\n    wind_v = v*3.6\n    # convert the temperature from celsius to fahrenheit\n    temp_fah = t + 273.15\n    # calculate the wind chill index\n    wind_chill = wind_v/(0.621371*temp_fah*temp_fah - 0.0065*math.pow(wind_v,2))\n    # convert the wind chill index from fahrenheit to celsius\n    return(math.ceil(wind_chill))\ndef wind_speed_from_wind_chill(wind_chill):\n    '''\n    Write a function to convert a wind chill index (in the range 0 to 100) to a speed in km/h.\n    '''\n    # convert the wind chill index to a speed\n    speed = wind_chill*3.6\n    # convert the speed from km/h to m/s\n    return(math.floor(speed))\ndef mean_range(range_list):\n    '''\n    Write a function to calculate the mean of a list of ranges.\n    '''\n    # calculate the mean of the range list\n    total_range = sum(range_list)\n    mean = round(total_range / len(range_list), 2)\n    # return the mean of the range list\n    return(mean)\ndef percent_change_in_wind_chill(range_list):\n    '''\n    Write a function that calculates the percent change in wind chill.\n    '''\n    # calculate the percentage change in the wind chill\n    percent_change = (wind_chill(range_list[-1],range_list[0]) - range_list[0])/range_list[0]*100\n    # return the percent change\n    return(round(percent_change,2))\ndef mean_range_from_percent_change(percent_change_list):\n    '''\n    Write a function that calculates the mean of a list of percent changes.\n    '''\n    # calculate the mean of the percent change list\n    total_percent_change = sum(percent_change_list)\n    mean = round(total_percent_change/len(percent_change_list), 2)\n    # return the mean of the percent change list\n    return(mean)\ndef max_and_min(range_list):\n    '''\n    Write a function that calculates the maximum and minimum of a list of ranges.\n    '''\n    # calculate the maximum and minimum of the range list\n    max = range_list[0]\n    min = range_list[0]\n    for i in range(0,len(range_list)-1):\n        if range_list[i] > max:\n            max = range_list[i]\n        if range_list[i] < min:\n            min = range_list[i]\n    # return the maximum and minimum of the range list\n    return(max,min)\ndef percentage_change_from_mean_range_list(range_list):\n    '''\n    Write a function that calculates the percentage change in a list of ranges.\n    '''\n    # calculate the percentage change of the range list\n    percent_change = (wind_chill(range_list[-1],range_list[0]) - range_list[0])/range_list[0]*100\n    # return the percent change\n    return(round(percent_change,2))\ndef range_above_mean(range_list):\n    '''\n    Write a function that determines whether or not a list of range values is above the mean.\n    '''\n    # calculate the average of the range list\n    average = mean_range(range_list)\n    # calculate the standard deviation of the range list\n    std_dev = math.sqrt(sum(i**2 for i in range_list)/len(range_list))\n    # if the average is above the standard deviation of the range list\n    if (average>std_dev):\n        # return true\n        return(\"True\")\n    # return false\n    return(\"False\")\ndef range_above_percent_change(range_list):\n    '''\n    Write a function that determines whether or not a list of range values is above the percent change.\n    '''\n    # calculate the percentage change of the range list\n    percent_change = (wind_chill(range_list[-1],range_list[0]) - range_list[0])/range_list[0]*100\n    # if the percentage change is above the mean\n    if (percent_change>= mean_range_from_percent_change(percent_change_list)):\n        # return true\n        return(\"True\")\n    # return false\n    return(\"False\")\ndef range_above_mean_percent_change(range_list):\n    '''\n    Write a function that determines whether or not a list of range values is above the mean percent change.\n    '''\n    # calculate the mean percent change of the range list\n    mean_percent_change = mean_range_from_percent_change(percent_change_list)\n    # calculate the percentage change of the range list\n    percent_change = (wind_chill(range_list[-1],range_list[0]) - range_list[0])/range_list[0]*100\n    # if the percentage change is above the mean\n    if (mean_percent_change>= percent_change):\n        # return true\n        return(\"True\")\n    # return false\n    return(\"False\")\ndef range_below_mean(range_list):\n    '''\n    Write a function that determines whether or not a list of range values is below the mean.\n    '''\n    # calculate the average of the range list\n    average = mean_range(range_list)\n    # calculate the standard deviation of the range list\n    std_dev = math.sqrt(sum(i**2 for i in range_list)/len(range_list))\n    # if the average is below the standard deviation of the range list\n    if (average<std_dev):\n        # return true\n        return(\"True\")\n    # return false\n    return(\"False\")\ndef range_below_percent_change(range_list):\n    '''\n    Write a function that determines whether or not a list of range values is below the percent change.\n    '''\n    # calculate the percentage change of the range list\n    percent_change = (wind_chill(range_list[-1],range_list[0]) - range_list[0])/range_list[0]*100\n    # if the percentage change is below the mean\n    if (percent_change<= mean_range_from_percent_change(percent_change_list)):\n        # return true\n        return(\"True\")\n    # return false\n    return(\"False\")\ndef range_below_mean_percent_change(range_list):\n    '''\n    Write a function that determines whether or not a list of range values is below the mean percent change.\n    '''\n    # calculate the mean percent change of the range list\n    mean_percent_change = mean_range_from_percent_change(percent_change_list)\n    # calculate the percentage change of the range list\n    percent_change = (wind_chill(range_list[-1],range_list[0]) - range_list[0])/range_list[0]*100\n    # if the percentage change is below the mean\n    if (mean_percent_change<= percent_change):\n        # return true\n        return(\"True\")\n    # return false\n    return(\"False\")\ndef range_above_percent_change_range(range_list):\n    '''\n    Write a function that determines whether or not a list of range values is above the percent change.\n    '''\n    # calculate the average of the range list\n    average = mean_range(range_list)\n    # calculate the standard deviation of the range list\n    std_dev = math.sqrt(sum(i**2 for i in range_list)/len(range_list))\n    # if the average is above the standard deviation of the range list\n    if (average>std_dev):\n        # return true\n        return(\"True\")\n    # return false\n    return(\"False\")\ndef range_above_mean_percent_change_range(range_list):\n    '''\n    Write a function that determines whether or not a list of range values is above the mean percent change.\n    '''\n    # calculate the mean percent change of the range list\n    mean_percent_change = mean_rang"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v*math.pow(9.0/5.0, t/10.0)\n    if w <= 0.0:\n        return -99\n    return round(((w - 100.0) * (9.0/5.0)), 2)\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed using the windchill function in the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_speed = v/2.5\n    #check for negative wind speed\n    if v_speed < 0:\n        v_speed = -v_speed\n    t_speed = t/10.0\n    w_speed = wind_chill(v_speed,t_speed)\n    return round(v_speed + w_speed, 2)\ndef temp(v,t):\n    '''\n    Write a function to calculate the temperature given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_temp = v/2.5\n    t_temp = t/10.0\n    w_temp = wind_chill(v_temp,t_temp)\n    t_temp = round(v_temp + w_temp, 2)\n    return round(t_temp, 2)\ndef wind_direction(v,t):\n    '''\n    Write a function to calculate the wind direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_temp = v/2.5\n    t_temp = t/10.0\n    w_temp = wind_chill(v_temp,t_temp)\n    if w_temp < 0.0:\n        return math.radians(360 - math.degrees(math.asin(-w_temp)))\n    elif w_temp > 0.0:\n        return math.radians(360 + math.degrees(math.asin(-w_temp)))\ndef wind_dir(v,t):\n    '''\n    Write a function to calculate the wind direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_temp = v/2.5\n    t_temp = t/10.0\n    w_temp = wind_chill(v_temp,t_temp)\n    if w_temp < 0.0:\n        return math.radians(math.degrees(math.asin(w_temp)))\n    elif w_temp > 0.0:\n        return math.radians(math.degrees(math.asin(w_temp)))\n    else:\n        return math.radians(360)\ndef wind_speed_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind speed given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_speed(v,t)\n    w_normal = round((w_normal/v)/5.0, 2)\n    return w_normal\ndef wind_speed_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind speed given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_speed(v,t)\n    w_normal = round((w_normal/v)/5.0, 2)\n    return round((w_normal/t)*360, 2)\ndef wind_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_dir(v,t)\n    w_normal = round((w_normal/t)*360, 2)\n    return round((w_normal/360), 2)\ndef gust_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_dir(v,t)\n    w_normal = round((w_normal/t)*360, 2)\n    return round((w_normal/360), 2)\ndef gust_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_dir(v,t)\n    w_normal = round((w_normal/t)*360, 2)\n    return round((w_normal/360), 2)\ndef wind_chill_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind chill index given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_chill(v,t)\n    w_normal = round((w_normal/v)/5.0, 2)\n    return round((w_normal/100.0), 2)\ndef wind_chill_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind chill index given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_chill(v,t)\n    w_normal = round((w_normal/v)/5.0, 2)\n    return round((w_normal/100.0), 2)\ndef wind_chill_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind chill index given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_chill(v,t)\n    w_normal = round((w_normal/v)/5.0, 2)\n    return round((w_normal/100.0), 2)\ndef wind_speed_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind speed given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_speed(v,t)\n    w_normal = round((w_normal/v)/5.0, 2)\n    return round((w_normal/t)*360, 2)\ndef wind_speed_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind speed given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_speed(v,t)\n    w_normal = round((w_normal/v)/5.0, 2)\n    return round((w_normal/t)*360, 2)\ndef wind_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_dir(v,t)\n    w_normal = round((w_normal/t)*360, 2)\n    return round((w_normal/360), 2)\ndef wind_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_dir(v,t)\n    w_normal = round((w_normal/t)*360, 2)\n    return round((w_normal/360), 2)\ndef wind_speed_direction_normalized(v,t):\n    '''\n    Write a function to calculate the normalised wind speed given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #write your code here\n    w_normal = wind_speed(v,t)\n    w_normal = round((w_normal/v)/5.0, 2)\n    return round((w_normal/t)*360, 2)\ndef wind_speed_direction_normalized(v,t):\n    '''\n    Write a function to calculate the norma"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    u = v/3.6\n    r = 1 + 0.6215 * u\n    b = (0.6215 * r) + (0.6215 * t)\n    return round(b,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # YOUR CODE HERE\n    # hint: you can use any Python function you would like\n    # wind chill index is a number between -100 and 100\n    # use math.exp to get a better estimate\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C_p = 23.74\n    C_t = -1.25 + (17.24 * v) + (0.62 * v ** 2) + (0.001 * v ** 3) + (0.0004 * v ** 4)\n    C_w = (C_p + C_t) / C_t\n    C_w = round(C_w)\n    return C_w\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    m = 10**(-5)\n    #C = ((v*9/5)+32)\n    C = math.exp((v/10000)/m)\n    return C\ndef wind_chill_min(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    m = 10**(-5)\n    C = math.exp((v/10000)/m)\n    return (10 * C) - 273.15\ndef wind_chill_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return C + 273.15\ndef wind_chill_diff(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return 10 * C - 273.15\ndef wind_chill_f(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_f(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return 10 * C - 273.15\ndef wind_chill_min_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return 10 * C - 273.15\ndef wind_chill_s_min(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) - 9\ndef wind_chill_diff_s_min(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) - 9\ndef wind_chill_s_diff(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_s_min(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_s_diff_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_s_diff_s_min(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_s_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_s_diff_s_min(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_s_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_s_diff_s_min(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_s_diff_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_s_diff_s_min(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_s_diff_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_s_diff_s_min(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_s_diff_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_s_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_diff_s_diff_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = wind_chill(v,t)\n    return (10 * C) + 9\ndef wind_chill_min_s_diff_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #calculate the wind chill index\n    C = v * 9.0 / 5.0 + 32.0\n    #convert the temperature to celsius\n    C = C - 273.15\n    #wind chill index\n    #use the formula\n    wind_chill = (9.0/5.0) * C + 32\n    #convert from celsius to kph\n    wind_chill = wind_chill * 5.0 / 9.0\n    #return the wind chill index\n    return wind_chill\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate wind chill\n    def wind_chill(v,t):\n        # return wind chill index as value\n        C = (9.2050 + (0.44275*v) - (0.4275*t))\n        return C\n    # calculate the wind chill temperature\n    def wind_chill_temp(v,t):\n        C = wind_chill(v,t)\n        # calculate the wind chill temperature using formula\n        T = (C + 35)\n        return T\n    # calculate the wind chill wind speed\n    def wind_chill_wind_speed(v,t):\n        # return wind chill wind speed\n        w = v / ((t/100) + 0.0065)\n        # return wind chill wind speed\n        return w\n    # calculate the wind chill wind direction\n    def wind_chill_wind_dir(v,t):\n        # return wind chill wind direction\n        dir_f = math.asin(math.sqrt(v/math.pow(v,2) + math.pow(t/100,2)))\n        dir_c = math.acos(math.sqrt(v/math.pow(v,2) + math.pow(t/100,2)))\n        dir_p = dir_f + dir_c\n        # return wind chill wind direction\n        return dir_p\n    # return wind chill wind speed and wind direction\n    return wind_chill_wind_speed, wind_chill_wind_dir\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].islower():\n            names.append(name)\n    return sum(len(name) for name in names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0] == \"a\":\n            sum_len += len(name)\n    return sum_len\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for sample in sample_names:\n        if sample.split()[0].lower()[0:1] in 'aeiou':\n            pass\n        else:\n            names.append(sample)\n    sample_length = len(names)\n    if sample_length % 2 == 0:\n        sample_length += 1\n    return sample_length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # initialize counters\n    sum_len = 0\n    # loop through list\n    for name in sample_names:\n        # if string starts with lowercase letter\n        if name[0].islower():\n            # increment the sum of lengths\n            sum_len += len(name)\n            # and remove the name\n            sample_names.remove(name)\n    # return the list\n    return sum_len\n    \n    # should return an int\n    \nprint(sample_nam(['mike', 'william', 'tim', 'wally'])"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name.startswith(\"a\"):\n            result += len(name)\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # for i in sample_names:\n    #     if i.startswith('a'):\n    #         sample_names.remove(i)\n    # return sample_names\n    return [len(i) for i in sample_names if not i.startswith('a')]\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Write your code here\n    names = []\n    for name in sample_names:\n        if name[0].islower():\n            names.append(name)\n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_array = []\n    for name in sample_names:\n        if name[0] == 'a':\n            names_array.append(len(name))\n        elif name[0] == 'b':\n            names_array.append(len(name))\n    names_array = list(dict.fromkeys(names_array))\n    return sum(names_array)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name.startswith('a'):\n            count += len(name)\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    numbers_list = list(map(str, sample_names))\n    numbers = []\n    numbers.extend(list(map(str, numbers_list)))\n    \n    numbers = list(filter(lambda x: x.lower()[0]!= 'a', numbers))\n    \n    return sum(numbers)\n    \n    #for name in sample_names:\n        #if name[0].lower()[0]!= 'a':\n            #print(name)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #This code is to extract the numbers from the string\n    def extract_num(s):\n        numbers = []\n        for i in s:\n            if i in ['(', ')', ',', ':', ';', ')', '*', '/']:\n                numbers.append(i)\n        return numbers\n    \n    #This code is to extract the numbers from the string\n    def extract_num_child(s):\n        num_child = []\n        for i in s:\n            if i not in ['(', ')', ',', ':', ';', ')', '*', '/']:\n                num_child.append(i)\n        return num_child\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = ''\n    for item in items:\n        item = item.strip()\n        if item!= '':\n            new_item = re.sub('^\\(\\w*\\)', '', item)\n            new_item = re.sub('^\\((.*)\\)', '', new_item)\n            new_item = new_item.strip(')')\n            new_item = new_item.strip(',')\n            if new_item!= '':\n                new_items = new_items + new_item +''\n            else:\n                new_items = new_items +''\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item[0] == '(':\n            items.remove(item)\n        if item[-1] == '(':\n            items.remove(item)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_list = []\n    new_string = ''\n    for x in items:\n        new_list.append(x)\n    for i in range(0, len(new_list)):\n        for j in range(i + 1, len(new_list)):\n            if new_list[i] == '(' and new_list[j] == ')':\n                new_list[i] = ')'\n                new_list[j] = ')'\n    for i in range(0, len(new_list)):\n        new_string += new_list[i]\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = []\n    for item in items:\n        if item[0] == '(':\n            temp.append(item)\n        else:\n            if len(temp) > 0:\n                temp.append(temp.pop(0))\n                item = item.replace('(' + str(temp[0]), '')\n            temp.append(item)\n    return temp\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if item[0]=='(':\n            result.append(item[1:])\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items == None or len(items) == 0:\n        return None\n    else:\n        firs_stmt = items[0]\n        last_stmt = items[-1]\n        lst = []\n        for i in range(len(firs_stmt)):\n            if firs_stmt[i]!= '(' and last_stmt[i]!= ')':\n                lst.append(firs_stmt[i])\n        lst_end = last_stmt[-1]\n        if lst_end == ')':\n            lst_end = lst[-1]\n        firs_stmt = firs_stmt[0:len(firs_stmt)-1]\n        return firs_stmt + \"\".join(lst)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # YOUR CODE GOES HERE\n    parenthesis_index = 0\n    for item in items:\n        if item.endswith(\")\"):\n            parenthesis_index = item.find(\"(\",parenthesis_index)\n            item = item[:parenthesis_index]\n        if item.endswith(\")\"):\n            parenthesis_index = item.find(\")\",parenthesis_index)\n            item = item[:parenthesis_index]\n        items[items.index(item)] = item\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if item[0] == \"(\":\n            result.append(item)\n        elif item[-1] == \")\":\n            result.pop()\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\").replace(\")\", \"\")\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    row = 0\n    row_range = range(n)\n    while True:\n        if len(row_range) == 0:\n            return None\n        if len(row_range) == 1:\n            if row == 0:\n                return row_range[0]\n            elif row == n - 1:\n                return row_range[0] + row_range[-1] + 1\n            else:\n                return row_range[row_range.index(row) - 1] + row_range[row_range.index(row) + 1] + 1\n        if row % 2 == 0:\n            row = row // 2\n        else:\n            row = (row // 2) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return (n//2) + 1\n    else:\n        return (n//2) - 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Your code here\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        for i in range(n-1):\n            if i!= n-1-i:\n                return 2**i\n        return 1**(n-1)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 1:\n        return 0\n    else:\n        return 1 + is_nonagonal(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    assert(isinstance(n, int)), 'Input must be an integer'\n    assert(n >= 0), 'n must be >= 0'\n    assert(n <= 2**32), 'n must be <= 2**32'\n    \n    # define a function to get the nth nonagonally adjacent number\n    # from an index \n    def get_nth_adjacent(n, index): \n        '''\n        Find the nth adjacent number.\n        '''\n        assert(isinstance(n, int)), 'Input must be an integer'\n        assert(isinstance(index, int)), 'Input must be an integer'\n        assert(index >= 0), 'index must be >= 0'\n        assert(index < n), 'index must be less than n'\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: return 1\n    for i in range(n):\n        if i + 2*n*i < n+1: \n            return (n+2*i) % (n+1)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n%2 == 0): \n        return n-1\n    else: \n        return n-1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = abs(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(n):\n        if i == (n-1):\n            return n+i-1\n        for j in range(i+1, n):\n            if (j-i) == n-1:\n                return j+i\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    divider = n%2\n    if divider == 0:\n        return n\n    else:\n        return n-1\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('.', '')\n    if text.startswith(('za', '\u00e1')) == True and text.endswith(('z', '\u00e1')) == True:\n        text = text[1:]\n    if text.endswith(('z', '\u00e1')) == True and text.startswith(('za', '\u00e1')) == False:\n        text = text[:-1]\n    if text.startswith('z') == True and text.endswith('z') == True:\n        text = text[1:]\n    if text.startswith('\u00e1') == True and text.endswith('\u00e1') == True:\n        text = text[1:]\n    if text.endswith('z') == True and text.startswith('z') == True:\n        text = text[:-1]\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_list = text.split()\n    #pattern = r\"[^a-zA-Z0-9]*z?\\s*[a-zA-Z0-9]+\"\n    pattern = r\"[^a-zA-Z0-9]+z?\\s*[a-zA-Z0-9]+\"\n    return re.findall(pattern, text_list[-1])!= []\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_z_middle = ''\n    text_lower = text.lower()\n    if 'z' in text_lower:\n        text_lower = text_lower.replace('z', '')\n    if'' not in text_lower:\n        return False\n    else:\n        for i in range(0, len(text_lower) - 1):\n            if text_lower[i] =='':\n                if i == 0 or i == len(text_lower) - 1:\n                    if text_lower[i + 1].isalpha():\n                        word_z_middle = word_z_middle + text_lower[i] + text_lower[i + 1]\n                        text_lower = text_lower[0:i] + text_lower[i + 1] + text_lower[i + 2:]\n                        break\n                else:\n                    if text_lower[i + 1].isalpha():\n                        word_z_middle = word_z_middle + text_lower[i] + text_lower[i + 1]\n                        text_lower = text_lower[0:i] + text_lower[i + 1] + text_lower[i + 2:]\n                        break\n            else:\n                if i == 0:\n                    if text_lower[i + 1].isalpha():\n                        word_z_middle = word_z_middle + text_lower[i] + text_lower[i + 1]\n                        text_lower = text_lower[0:i] + text_lower[i + 1] + text_lower[i + 2:]\n                        break\n                else:\n                    if text_lower[i + 1].isalpha():\n                        word_z_middle = word_z_middle + text_lower[i] + text_lower[i + 1]\n                        text_lower = text_lower[0:i] + text_lower[i + 1] + text_lower[i + 2:]\n                        break\n        if word_z_middle == '':\n            return False\n        elif len(text_lower) == len(word_z_middle):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub(\"\\s+\", \" \", text) #remove extra spaces\n    text = text.lower()\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    r = re.compile(r'\\w')\n    if(r.search(text)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" not in text and text[0]==\" \" and text[-1]==\" \":\n        return False\n    else:\n        return True\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_start_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_end_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_end_middle_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_end_middle_end_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_end_middle_end_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_end_middle_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_end_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_middle_end_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" in text:\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_end_middle_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text=text.lower()\n    text=text.strip()\n    if \"z\" i"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match_start = re.search('[a-zA-Z0-9\\s]+',text)\n    match_end = re.search('\\s+',text[:match_start.start()+1])\n    if match_start and match_end:\n        return match_start.start() + 1, match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match_start = re.search('[a-zA-Z0-9\\s]+',text)\n    match_end = re.search('\\s+',text[:match_start.start()])\n    if match_start and match_end:\n        return match_start.start(), match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_start = re.search('[a-zA-Z0-9\\s]+',text)\n    match_end = re.search('\\s+',text[:match_start.end()])\n    if match_start and match_end:\n        return match_start.end(), match_end.start()\n    else:\n        return 0,0\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_start = re.search('[a-zA-Z0-9\\s]+',text)\n    match_end = re.search('\\s+',text[match_start.end()+1:])\n    if match_start and match_end:\n        return match_start.end(), match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_start = re.search('[a-zA-Z0-9\\s]+',text)\n    match_end = re.search('\\s+',text[:match_start.end()])\n    if match_start and match_end:\n        return match_start.start(), match_end.start()\n    else:\n        return 0,0\ndef text_match_wordz_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    match_middle = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_middle:\n        return match_middle.start(), match_middle.end()\n    else:\n        return 0,0\ndef text_match_wordz_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    match_middle = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_middle:\n        return match_middle.end(), match_middle.end()\n    else:\n        return 0,0\ndef text_match_wordz_end_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_end = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_end:\n        return match_end.end(), match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_middle_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_end = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_end:\n        return match_end.end(), match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_end = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_end:\n        return match_end.end(), match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_middle_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    match_start = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_start:\n        return match_start.start(), match_start.start()\n    else:\n        return 0,0\ndef text_match_wordz_end_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    match_start = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_start:\n        return match_start.end(), match_start.end()\n    else:\n        return 0,0\ndef text_match_wordz_end_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_end = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_end:\n        return match_end.end(), match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_middle_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    match_middle = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_middle:\n        return match_middle.start(), match_middle.start()\n    else:\n        return 0,0\ndef text_match_wordz_end_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_end = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_end:\n        return match_end.end(), match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_middle_middle_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    match_middle = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_middle:\n        return match_middle.start(), match_middle.start()\n    else:\n        return 0,0\ndef text_match_wordz_end_end_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_end = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_end:\n        return match_end.end(), match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_middle_end_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_end = re.search('[a-zA-Z0-9\\s]+',text)\n    if match_end:\n        return match_end.end(), match_end.end()\n    else:\n        return 0,0\ndef text_match_wordz_end_end_middle_end(text):\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub('[Za-z]+', '', text)\n    text = re.sub('[a-z]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('^[^a-zA-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub('[^a-zA-z0-9]', '', text)\n    text = re.sub('[a-zA-z0-9]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[^0-9]', '', text)\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    text = re.sub("
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # create a regular expression object\n    regexp = re.compile(r'([a-zA-Z])z([a-zA-Z])')\n    # iterate over the text\n    for i in text:\n        # if we're at the start of the word then check it\n        if i == 'z' or i =='':\n            # search for the word and return the last match\n            if regexp.search(text):\n                print(i)\n                return text\n            else:\n                # if we're not at the start of the word then add a space\n                text = text +''\n    # if we didn't find a match, return the original text\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if not text.startswith(\"z\"):\n        return False\n    if not text.endswith(\"z\"):\n        return False\n    else:\n        return True\n    \ndef text_match_wordz_front(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    if not text.startswith(\"z\"):\n        return False\n    if not text.endswith(\"z\"):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    output = [0]*len(arr)\n    for i in range(len(arr)-k):\n        output[i+k-1] = arr[i]\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    size = len(input)\n    result = []\n    i = 0\n    while i < size:\n        result.append(input[i])\n        i += 1\n    i = 0\n    while i < size:\n        result[size-1-i] = input[size-1-i]\n        i += 1\n    return result\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = input[::-1]\n    return input\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not isinstance(input, list) or len(input) == 0:\n        return None\n    output = []\n    for i in range(len(input)):\n        output.append(input[len(input)-i-1])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print('')\n    start = 0\n    while (start < len(input)):\n        print('***Start position:', start+1)\n        end = start\n        while (end < len(input)):\n            print('**End position:', end+1)\n            if (end < start):\n                input[end], input[end-1] = input[end-1], input[end]\n            end = end + 1\n        start = start + 1\n    return input\n    print(' ')\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(k, len(input)):\n        output.append(input[i])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    \n    for i in range(k+1): \n        output.append(input[i]) \n    \n    for i in range(k+1, len(input)): \n        output.append(input[i]) \n        \n    return output\n    \n    \n    \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_k_steps(input, k): \n        '''\n        Write a function that reverses an array of size k (inclusive).\n        '''\n        n = len(input)\n        output = []\n        for i in range(0, n, k):\n            output.append(input[i])\n            output.append(input[i + k])\n        return output\n    return reverse_k_steps(input, k)"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = []\n    index = len(input) - k\n    for i in range(index, 0, -1):\n        reverse_array.append(input[i])\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = input[0:k]\n    input[0:k] = input[k:len(input)]\n    input[k:len(input)] = temp\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    return test_tup + test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, val in test_dict.items():\n        test_tup[key] = val\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, val in test_dict.items():\n        test_tup.append(val)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    try:\n        return tuple(test_tup[1].values()[0] + test_dict[key] for key in test_tup[1].keys())\n    except:\n        return ('Nothing')\n    \ndef add_dict_to_tuple_list(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    try:\n        return tuple(test_tup[1].values()[0] + test_dict[key] for key in test_tup[1].keys())\n    except:\n        return ('Nothing')\n        \ndef get_total_marks(test_dict):\n    '''\n    Write a function that takes a dictionary and returns the sum of all the marks in the test_dict.\n    '''\n    try:\n        total = sum(value for key, value in test_dict.items())\n        return total\n    except:\n        return ('Nothing')\n        \ndef get_test_results(test_dict):\n    '''\n    Write a function that takes a dictionary and returns a string with the overall score for the test.\n    '''\n    try:\n        total = get_total_marks(test_dict)\n        result = f'{total}'\n        return result\n    except:\n        return ('Nothing')\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for i in test_dict.keys():\n        test_tup.append(i)\n    for i in test_dict.values():\n        test_tup.append(i)\n    return tuple(test_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    assert type(test_tup) == tuple\n    assert type(test_dict) == dict\n    assert len(test_tup) == len(test_dict)\n    for key, value in test_dict.items():\n        assert type(key) == str\n        assert type(value) == any\n        test_tup.append((key, value))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_dict.items()) + test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (key, value)\n    return test_tup\n    \n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup + (test_dict,))\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost == []:\n        return 0\n    \n    curr_cost = 0\n    max_cost = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def calculateAverage(path, result):\n        total = 0\n        for i in range(len(path) - 1):\n            total = total + path[i]\n        average = total/len(path)\n        result.append(average)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def average(s):\n        return sum(s) / len(s)\n    \n    # Get the max and min values for each row in the matrix\n    N = len(cost)\n    max_val = min_val = cost[0][0]\n    for i in range(1, N):\n        max_val = max(max_val, cost[i][0])\n        min_val = min(min_val, cost[i][0])\n        if max_val < min_val:\n            max_val, min_val = min_val, max_val\n    return (max_val / N)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    costs = [0] * N\n    paths = []\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    column = len(cost[0])\n    total = sum(cost)\n    paths = []\n    for i in range(row):\n        paths.append([])\n        for j in range(column):\n            paths[i].append(cost[i][j]/total)\n    return paths\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    matrix = [[0 for _ in range(N)] for _ in range(N)]\n    sum = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    visited = set()\n    paths = []\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 1:\n        return cost[0][0]\n    \n    max_cell = cost[0][0]\n    max_visited = 0\n    \n    for r in range(N):\n        for c in range(N):\n            if c == 0:\n                total_cost = cost[r][c]\n                curr_visited = 0\n            else:\n                total_cost = cost[r][c] - cost[r][c-1]\n                curr_visited = cost[r][c-1]\n            if total_cost > max_cell:\n                max_cell = total_cost\n                max_visited = curr_visited\n    \n    return max_cell / max_visited\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    average = sum(cost[i][j] for i in range(len(cost)) for j in range(len(cost))) / len(cost)\n    paths = []\n    \n    # Initialize sums\n    for i in range(len(cost)):\n        for j in range(len(cost)):\n            if i!= j:\n                paths.append(sum(cost[i][j:j+2]) / 2)\n                paths.append(sum(cost[j][i:i+2]) / 2)\n    \n    return paths, average\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    '''\n    Input:\n        cost: a list of lists.\n        path: a list of lists.\n    Output:\n        a list of lists.\n    '''\n    total = 0\n    average = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            total += cost[i][j]\n            average += cost[i][j]\n    return [average/total, [i for i in range(len(path)) if path[i] == [i for i in range(len(path[0]))]]]\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #Create a new dictionary with each key as the name of the student and each value as a tuple of the student's height and weight.\n    students_height = {}\n    for name,height,weight in students.items():\n        students_height[name] = (height,weight)\n    #Filter all students with height and weight above the minimum.\n    filtered_students = {}\n    for name,height,weight in students_height.values():\n        if height>=h and weight>=w:\n            filtered_students[name] = (height,weight)\n    #print filtered_students\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for key, value in students.items():\n        if value[1] < w:\n            students[key] = (value[0], value[1])\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        filtered_students[student[0]] = student\n    \n    #Calculating total weight and height for each student\n    for student in students:\n        weight = student[1][0]\n        height = student[1][1]\n        \n        if weight > w and height > h:\n            filtered_students[student[0]] = student\n    \n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students.values():\n        if student[1][0] >= h and student[1][1] >= w:\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for s in students.values():\n        s_height = s[0]\n        s_weight = s[1]\n        if s_height > h and s_weight > w:\n            students[s[0]] = s\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    def filter_heights(d, h):\n        '''\n        The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n        Write a function to filter students that have height and weight above the minimum.\n        '''\n        keys=d.keys()\n        new_dict={}\n        for k in keys:\n            if(len(d[k])<h):\n                continue\n            for i in d[k]:\n                if(i[1]<h):\n                    new_dict[k]=i\n                    break\n        return new_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data = students.items()\n    temp = []\n    for key,value in data:\n        height = value[1][1] - value[1][0]\n        if height>h:\n            temp.append(key)\n    data = temp\n    temp = []\n    for key,value in data:\n        weight = value[1][0] - value[1][1]\n        if weight>w:\n            temp.append(key)\n    data = temp\n    return data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.values():\n        student_height = student[0]\n        student_weight = student[1]\n        if student_height >= h and student_weight >= w:\n            return student\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height = students[h]\n    weight = students[w]\n    if (weight['height'] > height['height']):\n        return (False,students[w])\n    else:\n        return (True,students[h])\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    dict_height={}\n    dict_weight={}\n    for student in students:\n        if len(student['height']) < h and len(student['weight']) < w:\n            dict_height[student['name']] = student['height']\n            dict_weight[student['name']] = student['weight']\n    return dict_height, dict_weight\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Count pairs of the same value in the two lists.\n    pair = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                pair += 1\n    return pair\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n    \ndef count_diff_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count the number of pairs where the lists have different values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i]!= nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # if len(nums1) == len(nums2):\n    #     print(nums1, nums2)\n    #     return 0\n    # else:\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n1_counter = 0\n    n2_counter = 0\n    for idx1, num1 in enumerate(nums1):\n        for idx2, num2 in enumerate(nums2):\n            if num1 == num2:\n                n1_counter += 1\n    for idx1, num1 in enumerate(nums1):\n        if num1 == num2:\n            n2_counter += 1\n    return n1_counter == n2_counter\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return list(filter(lambda x: x[0]!= x[1], zip(nums1, nums2)))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # To make things a bit easier to read, the code uses 2 set rules:\n    # 1. nums1 is a set, and every element appears only once\n    # 2. nums2 is a set, and every element appears only once\n    #\n    # Set a default value for the two rules. \n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    # 2. a set has its elements only once.\n    # If not, return 0\n    if len(nums1_set)!= len(nums2_set):\n        return 0\n    # If the lists have the same elements, return 1\n    if len(nums1_set) == len(nums2_set):\n        return 1\n    # If they have different elements, return 0\n    # In both cases, return 2\n    #\n    return 2\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    cnt = 0\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            if nums1[i] == nums2[j]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base:\n        sum += base % 10\n        base //= 10\n    return sum * power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 1:\n        return 1\n    elif power == 0:\n        return 1\n    elif base < 0:\n        return 0\n    elif base == 2:\n        return power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1\n    if power < 0:\n        return None\n    elif power == 0:\n        return 1\n    elif power == 1:\n        return base\n    else:\n        return base * power_base_sum(base, power - 1)"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    #base = base.upper()\n    #power = power.upper()\n    if power == \"BASE\":\n        return power_base_sum(base, int(power))\n    else:\n        return base + power_base_sum(base, int(power))\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sums = 0\n    while base > 0:\n        sums += base % 10\n        base = int(base / 10)\n    return sums\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += power % base\n        power //= base\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(digit) for digit in str(base) if digit.isdigit()]) ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = int(base)\n    power = int(power)\n    power_base_sum = 0\n    while power > 0:\n        power_base_sum += base\n        base = base * 10\n        power = power - 1\n    return power_base_sum\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotations = re.findall(r\"(\\\")|(?= \\\")\", text1)\n    text1 = text1.replace(\"\\\"\",\"\")\n    for i in range(len(quotations)):\n        if quotations[i] == \" \":\n            text1 = text1.replace(\" \", \"\")\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    string_list = text1.split(\" \")\n    string_list.remove('')\n    string_list.remove('.')\n    string_list.remove('?')\n    string_list.remove('!')\n    string_list.remove(';')\n    string_list.remove(':')\n    string_list.remove('@')\n    string_list.remove('$')\n    string_list.remove('&')\n    string_list.remove('#')\n    string_list.remove('{')\n    string_list.remove('}')\n    string_list.remove('(')\n    string_list.remove(')')\n    string_list.remove('-')\n    string_list.remove('_')\n    string_list.remove('@')\n    string_list.remove('$')\n    string_list.remove('&')\n    string_list.remove('#')\n    string_list.remove('{')\n    string_list.remove('}')\n    string_list.remove('(')\n    string_list.remove(')')\n    string_list.remove('-')\n    string_list.remove('_')\n    string_list.remove('@')\n    string_list.remove('$')\n    string_list.remove('&')\n    string_list.remove('#')\n    string_list.remove('{')\n    string_list.remove('}')\n    string_list.remove('(')\n    string_list.remove(')')\n    string_list.remove('')\n    string_list.remove(':')\n    string_list.remove(';')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove('\\t')\n    string_list.remove('\\r')\n    string_list.remove('\\f')\n    string_list.remove('\\v')\n    string_list.remove('!')\n    string_list.remove('#')\n    string_list.remove('{')\n    string_list.remove('}')\n    string_list.remove('(')\n    string_list.remove(')')\n    string_list.remove(':')\n    string_list.remove(';')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove('\\t')\n    string_list.remove('\\r')\n    string_list.remove('\\f')\n    string_list.remove('\\v')\n    string_list.remove('!')\n    string_list.remove('#')\n    string_list.remove('{')\n    string_list.remove('}')\n    string_list.remove('(')\n    string_list.remove(')')\n    string_list.remove('')\n    string_list.remove(':')\n    string_list.remove(';')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove('\\t')\n    string_list.remove('\\r')\n    string_list.remove('\\f')\n    string_list.remove('\\v')\n    string_list.remove('!')\n    string_list.remove('#')\n    string_list.remove('{')\n    string_list.remove('}')\n    string_list.remove('(')\n    string_list.remove(')')\n    string_list.remove('')\n    string_list.remove(':')\n    string_list.remove(';')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove('\\t')\n    string_list.remove('\\r')\n    string_list.remove('\\f')\n    string_list.remove('\\v')\n    string_list.remove('!')\n    string_list.remove('#')\n    string_list.remove('{')\n    string_list.remove('}')\n    string_list.remove('(')\n    string_list.remove(')')\n    string_list.remove('')\n    string_list.remove(':')\n    string_list.remove(';')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove('\\t')\n    string_list.remove('\\r')\n    string_list.remove('\\f')\n    string_list.remove('\\v')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove(' ')\n    string_list.remove('\\n')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    string_list.remove(' ')\n    strin"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=text1.replace('\"','')\n    return text2\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = r'[,]+\"\\s(.*?)\\s'\n    m = re.match(regex,text1)\n    if m:\n        return m.group(1)\n    else:\n        return \"null\"\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"\\s*(?:\\'\\w+\\s*\"\n    return re.findall(pattern, text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=text1.split()\n    text3=''\n    for i in range(len(text2)):\n        if '\"' in text2[i]:\n            if '\"' in text2[i-1]:\n                text3=text3+text2[i]\n            else:\n                text3=text3+text2[i-1]+' '\n    text4=text3.replace(' ', '')\n    return text4\n    \ndef extract_words(text):\n    '''\n    Write a function to extract the words from the given text.\n    '''\n    text=text.lower()\n    words=text.split()\n    for i in range(len(words)):\n        if re.search(r'[0-9]', words[i]):\n            words[i]=words[i].replace('0','')\n            words[i]=words[i].replace('1','')\n            words[i]=words[i].replace('2','')\n            words[i]=words[i].replace('3','')\n            words[i]=words[i].replace('4','')\n            words[i]=words[i].replace('5','')\n            words[i]=words[i].replace('6','')\n            words[i]=words[i].replace('7','')\n            words[i]=words[i].replace('8','')\n            words[i]=words[i].replace('9','')\n    return words\n    \ndef extract_quantity(text):\n    '''\n    Write a function to extract the quantity from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_quantity(text):\n    '''\n    Write a function to extract the quantity from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_value(text):\n    '''\n    Write a function to extract the value from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_value(text):\n    '''\n    Write a function to extract the value from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_unit(text):\n    '''\n    Write a function to extract the unit from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_unit(text):\n    '''\n    Write a function to extract the unit from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_barcode(text):\n    '''\n    Write a function to extract the barcode from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_barcode(text):\n    '''\n    Write a function to extract the barcode from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_time(text):\n    '''\n    Write a function to extract the time from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_time(text):\n    '''\n    Write a function to extract the time from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_quantity(text):\n    '''\n    Write a function to extract the quantity from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', '')\n        text[1]=text[1].replace('d', '')\n        text=text[0]\n    text=text.replace(' ', '')\n    return text\n    \ndef extract_quantity(text):\n    '''\n    Write a function to extract the quantity from the given text.\n    '''\n    text=text.lower()\n    if 'n' in text:\n        text='1'\n    elif 'd' in text:\n        text='1'\n    else:\n        text=text.split('.')\n        text[1]=text[1].replace('n', ''"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace('\u201c', '\"')\n    text1 = text1.replace('\u201d', '\"')\n    text1 = text1.replace(\"'\", '\"')\n    text1 = text1.replace(\",\", \" \")\n    return text1.strip()\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) '(\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_var(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) =\",\n    return re.search(pattern,text1)\n    \ndef extract_value(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) =(\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_id(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_id_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_input(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_input_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_comment(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_comment_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_input_comment(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_input_comment_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_if_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_if_name_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_if_comment(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_if_comment_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_if_input(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_if_input_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_else(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_else_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_while_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_while_name_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_while_input(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_while_input_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_while_comment(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_while_comment_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_while_input_comment(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_while_input_comment_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_case_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_case_name_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_case_input(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(\\w+) = (\\w+)\",\n    return re.search(pattern,text1)\n    \ndef extract_case_input_in_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # This regex to extract quotation marks.\n    # It is an attempt to extract the value between two quotation marks.\n    pattern = '\"\"\"'\n    # All the quotation marks in string are split as \" \"\"\".\n    quotation_marks = re.findall(pattern, text1)\n    # In this case, quotation marks are left-aligned, in this way, they are not considered as quotation marks.\n    # The '[]' part is included because they are also part of quotation marks.\n    quotation_marks = re.sub(r'\"\"\",\"','\",text1[text1.index(\":\")+1:],0)\n    return quotation_marks\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define regular expression\n    pattern = r'[\u201c\u201d]{3,}[\u2018\u2019]{2,}'\n    # create a regular expression object\n    regex = re.compile(pattern)\n    # loop through the string\n    for x in text1:\n        # if the quotation mark is found\n        if regex.search(x):\n            # print(x)\n            # create a re.sub() function to replace quotation marks with empty string\n            text1 = re.sub(r'[\u201c\u201d]', \"\", text1)\n            # create a new string\n            text2 = text1.replace(\"'\", \"\")\n            # print(text2)\n            # return the result\n            return text2\n    # if the quotation marks is not found\n    return \"\"\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    x = t_1\n    y = t_2\n    z = []\n    for i in range(len(t_1)):\n        z.append(t_1[i]*t_2[i])\n    return(z)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        new_tup = new_tup + (i * test_tup)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_N = test_tup[1]\n    for i in range(1,len(test_tup)):\n        t_i = test_tup[i]\n        t_i *= t_1\n    return t_i\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_0 = test_tup[0]\n    for i in range(1, len(test_tup)):\n        t_0 = t_0 * test_tup[i]\n    return t_0\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result = result + (test_tup[i] * test_tup[i+1])\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert type(test_tup) is tuple, 'tup is not a tuple'\n    assert all(type(el) is int for el in test_tup), 'all elements in tup are ints'\n    return tuple(el * el for el in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # create a new tuple with the first element of the tuple multiplied with the second and third elements\n    t_1, t_2, t_3 = test_tup\n    result = [t_1*t_2, t_1*t_3, t_2*t_3]\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Hint: You can do this with Python's \"for\" loop.\n    # (Remember, \"len\" returns the length of a tuple!)\n    # Hint: This isn't a great solution. I used Python's built-in len function to do this.\n    # Also, don't forget to add the len function!\n    if len(test_tup) == 0:\n        return ()\n    else:\n        t_1 = test_tup[0]\n        t_i = len(test_tup)\n        result = ()\n        for i in range(1, len(test_tup)):\n            result = t_1 * t_i\n        return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result += (test_tup[i]*test_tup[i+1])\n    return result\ndef main():\n    print(\"Is the tuple (1, 2, 3) in the above list? (Yes: 1)\")\n    print(test_tup.count(1))\n    print(\"\\nIs the tuple (1, 2, 3) in the above list? (Yes: 2)\")\n    print(test_tup.count(2))\n    print(\"\\nIs the tuple (1, 2, 3) in the above list? (No: 3)\")\n    print(test_tup.count(3))\n    print(\"\\nAre all the given elements in the tuple equal? (Yes: True)\")\n    print(test_tup[0] == test_tup[1])\n    print(test_tup[0] == test_tup[2])\n    print(\"\\nIs the tuple (1, 2, 3) in the above list? (No: False)\")\n    print(test_tup[-1] == test_tup[-2])\n    print(test_tup[-1] == test_tup[-3])\n    print(\"\\nIs the tuple (1, 2, 3) in the above list? (Yes: True)\")\n    print(multiply_elements(test_tup) == test_tup)\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_N = len(test_tup)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(i) for i in zip(lst1,lst2)]\n    \n    \n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sums = []\n    for i in range(len(lst1)):\n        for j in range(len(lst2[i])):\n            if(lst1[i][j] + lst2[i][j]!= 0):\n                lst_sums.append(lst1[i][j]+lst2[i][j])\n    return lst_sums\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    total=0\n    for i in range(len(lst1)):\n        total+=lst1[i]+lst2[i]\n    return total\nlst1=list(range(50))\nlst2=list(range(30,50))\nprint(sum_list(lst1,lst2))"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result=[]\n    for i in lst1:\n        result.append(i+lst2[0])\n    return result\n    \ndef main():\n    lst1=['a','b','c','d']\n    lst2=[1,2,3,4,5]\n    print(sum_list(lst1,lst2))\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    total = 0\n    for num1 in lst1:\n        total += num1\n    for num2 in lst2:\n        total += num2\n    return total\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    for i in lst1:\n        sum_list.append(lst2.append(i))\n    return sum_list\n    \ndef diff_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    diff_list = []\n    for i in lst1:\n        diff_list.append(lst2.remove(i))\n    return diff_list\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_val=[]\n    for i in range(len(lst1)):\n        sum_val.append(lst1[i]+lst2[i])\n    return sum_val\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summ = []\n    for i in range(len(lst1)):\n        summ.append(lst1[i]+lst2[i])\n    return summ\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    if len(nums) == 0:\n        return []\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # traverse all the numbers from the given list\n    for num in nums:\n        if num == nums[0]:\n            continue\n        \n        # count the number of times that the current number is the previous \n        # number. If it is the same as the previous number, we add a duplicate \n        # to our list\n        prev = nums[0]\n        count = 1\n        for i in range(1, len(nums)):\n            if prev == nums[i]:\n                count += 1\n            else:\n                count = 1\n            if count == 2:\n                nums.pop(i)\n                count = 1\n            prev = num\n        \n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        nums.remove(nums[i])\n        i = i - 1\n        while i >= 0 and nums[i] == nums[i - 1]:\n            i = i - 1\n        result.append(nums[i])\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 3:\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for x,y in groupby(nums) if len(list(y))==1]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_2d = [nums[i:i+2] for i,j in groupby(enumerate(nums))]\n    return [item for item in nums_2d if len(item) == 2]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x, y in groupby(nums) if seen_add(y)]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    seen_iter = seen.copy()\n    seen_iter.add(None)\n    for i, num in enumerate(nums):\n        if num in seen_iter:\n            continue\n        seen_iter.add(num)\n        if num in seen:\n            continue\n        seen_iter.add(num)\n        if i!= len(nums)-1 and num!= nums[i+1] and nums[i]!= nums[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Write your code here\n    if len(nums)<1:\n        return []\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*h*(math.tan(math.radians(45-r/2)))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def sqrt2(x):\n        return math.sqrt(x*x + x*x + 2)\n    sqrt2 = sqrt2(r*r*r*h/6)\n    s = 1/(sqrt2*math.tan(math.radians(h/2)))\n    return s*s*sqrt2\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*math.exp(h/2)*(1-math.cos(h/2))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/math.tan(math.radians(90-h)))*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef vertices(s,r,h):\n    '''\n    Write a function to find the vertices of a cone given the surface area s, radius r, and height h.\n    '''\n    return math.cos(math.radians(90-h))*s*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef edge_points(s,r,h):\n    '''\n    Write a function to find the vertices of a cone given the surface area s, radius r, and height h.\n    '''\n    return math.sin(math.radians(90-h))*s*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef sides(s,r,h):\n    '''\n    Write a function to find the sides of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/math.cos(math.radians(90-h)))*s*math.pow(r,2)*math.pow(math.sin(math.radians(90-h)),2)\ndef tangent(s,r,h):\n    '''\n    Write a function to find the tangent of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/math.cos(math.radians(90-h)))*s*math.pow(r,2)*math.pow(math.tan(math.radians(90-h)),2)\ndef perpendicular(s,r,h):\n    '''\n    Write a function to find the perpendicular of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/math.tan(math.radians(90-h)))*s*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef triangle_area(s,r,h):\n    '''\n    Write a function to find the triangle area of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/s)*s*(r*math.pow(r,2)-s*math.pow(math.cos(math.radians(90-h)),2))\ndef normal(s,r,h):\n    '''\n    Write a function to find the normal of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/s)*s*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef intersect_point(p1,p2,r,h):\n    '''\n    Write a function to find the intersection point of a line and a cone given the point 1 and point 2 and the surface area s, radius r, and height h.\n    '''\n    return (1/s)*(p1+p2)*s*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef intersect_line(p1,p2,r,h):\n    '''\n    Write a function to find the intersection point of a line and a cone given the point 1 and point 2 and the surface area s, radius r, and height h.\n    '''\n    return (1/s)*(p1+p2)*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef intersect_line_2(p1,p2,r,h):\n    '''\n    Write a function to find the intersection point of a line and a cone given the point 1 and point 2 and the surface area s, radius r, and height h.\n    '''\n    return (1/s)*(p1+p2)*(math.pow(r,2)*math.cos(math.radians(90-h))+math.pow(r,2)*math.sin(math.radians(90-h)))\ndef normal(s,r,h):\n    '''\n    Write a function to find the normal of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/s)*s*(r*math.pow(r,2)-s*math.pow(math.cos(math.radians(90-h)),2))\ndef surface_area(s,r,h):\n    '''\n    Write a function to find the surface area of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/s)*s*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef area(s,r,h):\n    '''\n    Write a function to find the area of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/s)*s*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef lerp(s,r,h):\n    '''\n    Write a function to find the lerp of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/s)*(s*math.pow(r,2)-r*math.pow(math.cos(math.radians(90-h)),2))\ndef hintersect(s,r,h):\n    '''\n    Write a function to find the hintersect point of a line and a cone given the point 1 and point 2 and the surface area s, radius r, and height h.\n    '''\n    return (1/s)*(s*math.pow(r,2)+r*math.pow(math.cos(math.radians(90-h)),2))\ndef hintersect_line(p1,p2,r,h):\n    '''\n    Write a function to find the hintersect point of a line and a cone given the point 1 and point 2 and the surface area s, radius r, and height h.\n    '''\n    return (1/s)*(p1+p2)*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef hintersect_line_2(p1,p2,r,h):\n    '''\n    Write a function to find the hintersect point of a line and a cone given the point 1 and point 2 and the surface area s, radius r, and height h.\n    '''\n    return (1/s)*(p1+p2)*(math.pow(r,2)*math.cos(math.radians(90-h))+math.pow(r,2)*math.sin(math.radians(90-h)))\ndef tangent_cos(s,r,h):\n    '''\n    Write a function to find the cosine of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/s)*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef tangent_sin(s,r,h):\n    '''\n    Write a function to find the sine of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/s)*math.pow(r,2)*math.pow(math.sin(math.radians(90-h)),2)\ndef tangent(s,r,h):\n    '''\n    Write a function to find the tangent of a cone given the surface area s, radius r, and height h.\n    '''\n    return (1/s)*math.pow(r,2)*math.pow(math.cos(math.radians(90-h)),2)\ndef lerp_cos(s,r,h):\n    '''\n    Write a function to find the lerp of a cone given the surface area s, radius r, and height h.\n    '''"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*r*h\n    if s < 0.2:\n        print('ERROR: Not in the cone (s < 0.2)')\n    if s > 0.2 and s < 0.4:\n        print('WARNING: In the cone (s > 0.2)')\n    if s > 0.4 and s < 0.6:\n        print('WARNING: In the cone (s > 0.4)')\n    if s > 0.6 and s < 0.8:\n        print('WARNING: In the cone (s > 0.6)')\n    if s > 0.8 and s < 1.0:\n        print('WARNING: In the cone (s > 0.8)')\n    return s\ndef border_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*r*h\n    if s < 0.2:\n        print('ERROR: Not in the border (s < 0.2)')\n    if s > 0.2 and s < 0.4:\n        print('WARNING: In the border (s > 0.2)')\n    if s > 0.4 and s < 0.6:\n        print('WARNING: In the border (s > 0.4)')\n    if s > 0.6 and s < 0.8:\n        print('WARNING: In the border (s > 0.6)')\n    if s > 0.8 and s < 1.0:\n        print('WARNING: In the border (s > 0.8)')\n    return s\ndef dashed_line_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*r*h\n    if s < 0.2:\n        print('ERROR: Not in the dashed line (s < 0.2)')\n    if s > 0.2 and s < 0.4:\n        print('WARNING: In the dashed line (s > 0.2)')\n    if s > 0.4 and s < 0.6:\n        print('WARNING: In the dashed line (s > 0.4)')\n    if s > 0.6 and s < 0.8:\n        print('WARNING: In the dashed line (s > 0.6)')\n    if s > 0.8 and s < 1.0:\n        print('WARNING: In the dashed line (s > 0.8)')\n    return s\ndef curved_line_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*r*h\n    if s < 0.2:\n        print('ERROR: Not in the curved line (s < 0.2)')\n    if s > 0.2 and s < 0.4:\n        print('WARNING: In the curved line (s > 0.2)')\n    if s > 0.4 and s < 0.6:\n        print('WARNING: In the curved line (s > 0.4)')\n    if s > 0.6 and s < 0.8:\n        print('WARNING: In the curved line (s > 0.6)')\n    if s > 0.8 and s < 1.0:\n        print('WARNING: In the curved line (s > 0.8)')\n    return s\ndef solid_curved_line_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*r*h\n    if s < 0.2:\n        print('ERROR: Not in the solid curved line (s < 0.2)')\n    if s > 0.2 and s < 0.4:\n        print('WARNING: In the solid curved line (s > 0.2)')\n    if s > 0.4 and s < 0.6:\n        print('WARNING: In the solid curved line (s > 0.4)')\n    if s > 0.6 and s < 0.8:\n        print('WARNING: In the solid curved line (s > 0.6)')\n    if s > 0.8 and s < 1.0:\n        print('WARNING: In the solid curved line (s > 0.8)')\n    return s\ndef curved_solid_curved_line_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*r*h\n    if s < 0.2:\n        print('ERROR: Not in the curved solid curved line (s < 0.2)')\n    if s > 0.2 and s < 0.4:\n        print('WARNING: In the curved solid curved line (s > 0.2)')\n    if s > 0.4 and s < 0.6:\n        print('WARNING: In the curved solid curved line (s > 0.4)')\n    if s > 0.6 and s < 0.8:\n        print('WARNING: In the curved solid curved line (s > 0.6)')\n    if s > 0.8 and s < 1.0:\n        print('WARNING: In the curved solid curved line (s > 0.8)')\n    return s\ndef curved_solid_solid_curved_line_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*r*h\n    if s < 0.2:\n        print('ERROR: Not in the curved solid solid curved line (s < 0.2)')\n    if s > 0.2 and s < 0.4:\n        print('WARNING: In the curved solid solid curved line (s > 0.2)')\n    if s > 0.4 and s < 0.6:\n        print('WARNING: In the curved solid solid curved line (s > 0.4)')\n    if s > 0.6 and s < 0.8:\n        print('WARNING: In the curved solid solid curved line (s > 0.6)')\n    if s > 0.8 and s < 1.0:\n        print('WARNING: In the curved solid solid curved line (s > 0.8)')\n    return s\ndef curved_solid_dashed_line_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*r*h\n    if s < 0.2:\n        print('ERROR: Not in the curved solid dashed line (s < 0.2)')\n    if s > 0.2 and s < 0.4:\n        print('WARNING: In the curved solid dashed line (s > 0.2)')\n    if s > 0.4 and s < 0.6:\n        print('WARNING: In the curved solid dashed line (s > 0.4)')\n    if s > 0.6 and s < 0.8:\n        print('WARNING: In the curved solid dashed line (s > 0.6)')\n    if s > 0.8 and s < 1.0:\n        print('WARNING: In the curved solid dashed line (s > 0.8)')\n    return s\ndef dashed_solid_curved_line_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 0.5*r*h\n    if s < 0.2:\n        print('ERROR: Not in the dashed solid curved line (s < 0.2)')\n    if s > 0.2 and s < 0.4:\n        print('WARNING: In the dashed solid curved line (s > 0.2)')\n    if s > 0.4 and s < 0.6:\n        print('WARNING: In the dashed solid curved line (s > 0.4)')\n    if s > 0.6 and s < 0.8:\n        print('WARNING: In the dashed solid curved line (s > 0.6)')\n    if s > 0.8 and s < 1.0:\n        print('WARNING: In the dashed solid curved line (s > 0.8)')\n    return s\ndef curved_solid_solid_curved_line"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    try:\n        r=float(r)\n        h=float(h)\n    except:\n        return -1\n    return (1/3)*((math.pi)*(r*(r+h))**(1/3))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*r*h\ndef linear_surfaces(r,h):\n    '''\n    Write a function to find the surface area of a linear surface given a parameter r and the height h.\n    '''\n    return (r*h)**2\ndef draw_cone(r,h):\n    '''\n    Write a function to draw a cone of two given parameters. The parameters r and h are in meters, and the function\n    should draw a cone of the height h surface area and of radius r surface area.\n    '''\n    print('cone\\tsurface\\t(meters)\\t(m)\\t(meters)')\n    print('--------\\t--------\\t-------\\t-------')\n    print(f'{r:<8.2f}\\t{h:<8.2f}\\t{r*h:<8.2f}\\t{r*h:<8.2f}')\ndef draw_cylinder(r,h,z):\n    '''\n    Write a function to draw a cylinder of radius r and height h surface area. The cylinder should look like\n    this:\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (((h*math.pi)/180)*(math.sin(math.radians(45))**2))\ndef prismsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*(r**2)*h)\ndef conesurface_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (4/3)*(math.pi*(r**3))\ndef corsweepsurface_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (2*(h*math.pi)*(math.sin(math.radians(45))**2))\ndef nthcorneo_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (math.pi*(r**3)*(h**3)/(2*h))\ndef fangura_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (4*(h**3)/(2*h))\ndef convex_surface_cone(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (2*math.pi*(r**2))\ndef tangent_surface_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (4*(math.pi*r**2))\ndef spherical_surface_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (2*math.pi*r*h)\ndef hartreesurface_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (h*(math.pi/180))*(r**2)\ndef geodesic_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (2*(h**2)*(r*math.sin(math.radians(45))))\ndef acos_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (math.sqrt((r**2)*(math.sin(math.radians(45))**2)))\ndef tan_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.tan(math.radians(45)))\ndef tan_surface_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.tan(math.radians(45)))*(math.sin(math.radians(45)))\ndef quadradial_surface_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (2*(h**2))*(math.sin(math.radians(45)))\ndef cosine_surface_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.cos(math.radians(45)))\ndef sin_surface_cone(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))\ndef angle_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (2*(h*math.pi)/(math.sin(math.radians(45))))\ndef angle_surface_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (2*(h*math.pi)/(math.sin(math.radians(45))))*(math.sin(math.radians(45)))\ndef trigonal_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (2*(h**2))*(r*math.cos(math.radians(45)))\ndef parallelogram_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return r*(math.sin(math.radians(45)))\ndef quadratilateral_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*(math.sin(math.radians(45))))\ndef parallelogram_surface_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*(math.sin(math.radians(45))))*(math.sin(math.radians(45)))\ndef arc_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*(math.sin(math.radians(45))))*(math.sin(math.radians(45)))\ndef arc_surface_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*(math.sin(math.radians(45))))*(math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef polygon_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))*(math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef rectangle_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef triangle_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef parallelogram_surface_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))*(math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef parallelogram_surface_surface_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))*(math.sin(math.radians(45)))*(math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef arc_surface_surface_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))*(math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef arc_surface_surface_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))*(math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef cone_surface(r,h):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef arc_surface_surface(r):\n    '''\n    Write a function to return the cone surface area.\n    '''\n    return (r*math.sin(math.radians(45)))*(math.sin(math.radians(45)))*(math.sin(math.radians(45)))\ndef rectangle_surface_surface("
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    u = 2*r\n    #Determine the radius of the side of the cone\n    a = 1.3 * u\n    #Determine the height of the cone\n    b = h/2\n    #Finite difference formula\n    d = u*(2 * h - b)\n    #Determine the area of the cone using the formula\n    area = (math.pi * d**2)\n    #Return the surface area\n    return area\ndef main():\n    '''\n    Print the surface area of a cone given its radius r and its height h.\n    '''\n    #Ask user for the radius and height of the cone\n    r = input(\"Enter the radius of the cone: \")\n    h = input(\"Enter the height of the cone: \")\n    #Call the function and check its output\n    a = lateralsurface_cone(r,h)\n    #Print the results\n    print(a)\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\s]\\S+','',text)\n    text = re.sub(r',\\s+',',',text)\n    text = re.sub(r'\\s+:',':',text)\n    text = re.sub(r'\\s+;',':',text)\n    text = re.sub(r'\\s+$', '', text)\n    text = re.sub(r'\\s+@', ':', text)\n    text = re.sub(r'\\s+&', ':', text)\n    text = re.sub(r'\\s+$', ':', text)\n    text = re.sub(r'\\s+:',':',text)\n    text = re.sub(r'\\s+:',':',text)\n    text = re.sub(r'\\s+@', ':', text)\n    text = re.sub(r'\\s+&', ':', text)\n    text = re.sub(r'\\s+;',':',text)\n    text = re.sub(r'\\s+$', ':', text)\n    text = re.sub(r'\\s+{', ':', text)\n    text = re.sub(r'\\s+}', ':', text)\n    text = re.sub(r'\\s+:',':',text)\n    text = re.sub(r'\\s+;',':',text)\n    text = re.sub(r'\\s+$', ':', text)\n    text = re.sub(r'\\s+\\|', ':', text)\n    text = re.sub(r'\\s+\\{', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+{', ':', text)\n    text = re.sub(r'\\s+\\|', ':', text)\n    text = re.sub(r'\\s+\\s', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\{\\}', ':', text)\n    text = re.sub(r'\\s+\\{\\s+', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\{\\s+', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\{\\s+', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\{', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\{', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\{', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+\\}', ':', text)\n    text = re.sub(r'\\s+"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #replacing all occurrences of spaces\n    for i in range(len(text)):\n        text = text.replace(' ',':')\n    #replacing all occurrences of commas\n    text = text.replace(',',' :')\n    #replacing all occurrences of dots\n    text = text.replace('.',' :')\n    #replacing all occurrences of spaces\n    text = text.replace(' ',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = text\n    for i in range(0,len(text)):\n        if text[i] =='':\n            if text[i-1]!= ',':\n                new_text = new_text[0:i] + ':' + new_text[i:]\n        elif text[i] == ',':\n            if text[i-1]!='':\n                new_text = new_text[0:i] + ':' + new_text[i:]\n        elif text[i] == '.':\n            if text[i-1]!='':\n                new_text = new_text[0:i] + ':' + new_text[i:]\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace('.',':').replace(',',':\\n').replace(';',':\\n')\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^a-zA-Z0-9 ]'\n    text = re.sub(pattern, r':', text)\n    pattern = r'[^a-zA-Z0-9.]'\n    text = re.sub(pattern, r':', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'-', text)\n    pattern = r'(.|\\.)'\n    text = re.sub(pattern, r'\\1:', text)\n    pattern = r'(.|\\.)'\n    text = re.sub(pattern, r':', text)\n    pattern = r'[0-9]+(?:\\.[0-9]+(?:e[+-]?\\d+)?|' + r'\\.[0-9]+(?:e[+-]?\\d+)?)'\n    text = re.sub(pattern, r':', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'(.|\\.)'\n    text = re.sub(pattern, r'0:', text)\n    pattern = r'(.|\\.)'\n    text = re.sub(pattern, r':', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r' - ', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'-', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r' - ', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'-', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'-', text)\n    pattern = r'[0-9]+(?:\\.[0-9]+(?:e[+-]?\\d+)?|' + r'\\.[0-9]+(?:e[+-]?\\d+)?)'\n    text = re.sub(pattern, r':', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[a-zA-Z]+'\n    text = re.sub(pattern, r'0', text)\n    pattern = r'[0-9]+'\n    text = re.sub(pattern, r'0', text)\n    pattern "
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', '\\u00A0')\n    text = text.replace('.', '\\u00A0')\n    text = text.replace('/', '\\u00A0')\n    text = text.replace('\\'', '\\u00A0')\n    text = text.replace('--', '\\u00A0')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\" \", \"\")\n    return text\ndef num2word(num,vowels,inverse):\n    '''\n    Write a function that takes in a number and a vowel string and returns a string that converts it to a word.\n    '''\n    \n    if len(str(num)) == 1:\n        return '0'+str(num)\n    else:\n        if vowels == 1:\n            return num\n        else:\n            if inverse == 1:\n                return '1' + num\n            else:\n                return '2' + num\ndef word2num(word, vowels):\n    '''\n    Write a function that takes in a string and a vowel string and converts it to an integer.\n    '''\n    int_num = 0\n    for char in word:\n        if char.isdigit():\n            int_num = int_num * 10 + int(char)\n        elif char.isalpha():\n            if vowels == 1:\n                int_num = int_num * 26 + ord(char)-96\n            else:\n                int_num = int_num * 26 + ord(char)-64\n        else:\n            if vowels == 1:\n                int_num = int_num * 26 + ord(char)-96\n            else:\n                int_num = int_num * 26 + ord(char)-64\n    return int_num\ndef key_check(key):\n    '''\n    Check if a string contains a list of integers.\n    '''\n    if type(key) == list:\n        return all(map(lambda x: type(x) == int, key))\n    else:\n        return False\ndef make_keys(key):\n    '''\n    Return a list of the numbers within the given list of integers.\n    '''\n    keys = list(map(lambda x: str(x), key))\n    #print(keys)\n    return [int(n) for n in keys]\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # regex = re.compile('(\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.)')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.', ': ', text)\n    return text\ndef remove_dots_from_string(text):\n    '''\n    Write a function to remove any consecutive spaces, commas, or dots from a string.\n    '''\n    # regex = re.compile('(\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.)')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.', ': ', text)\n    return text\ndef remove_from_space(text):\n    '''\n    Write a function to remove any consecutive spaces from a string.\n    '''\n    # regex = re.compile('(\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.)')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.','', text)\n    return text\ndef remove_to_space(text):\n    '''\n    Write a function to remove any consecutive spaces from a string.\n    '''\n    # regex = re.compile('(\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.)')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.','', text)\n    return text\ndef replace_spaces_to_space(text):\n    '''\n    Write a function to replace spaces with a colon.\n    '''\n    # regex = re.compile('(\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.)')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.', ': ', text)\n    return text\ndef remove_spaces_from_string(text):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    # regex = re.compile('(\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.)')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.', ': ', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    # regex = re.compile('([^\\s\\w]|_)+')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('[^a-zA-Z0-9_]+','', text)\n    return text\ndef remove_dashes(text):\n    '''\n    Write a function to remove dashes from a string.\n    '''\n    # regex = re.compile('([^\\s\\w]|_)+')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.', ': ', text)\n    return text\ndef remove_symbol(text):\n    '''\n    Write a function to remove a symbol from a string.\n    '''\n    # regex = re.compile('[^a-zA-Z0-9_]+')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.', ': ', text)\n    return text\ndef replace_symbol_in_string(text):\n    '''\n    Write a function to replace a symbol in a string.\n    '''\n    # regex = re.compile('[^a-zA-Z0-9_]+')\n    # text = regex.sub('\\\\1: ', text)\n    # text = regex.sub('\\\\2: ', text)\n    # text = regex.sub('\\\\3: ', text)\n    # text = regex.sub('\\\\4: ', text)\n    text = re.sub('\\s|,|\\.|\\:|\\!|\\'|\"|\\?|;|,|\\.', ': ', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace('-',':')\n    text = text.replace(',',':::')\n    text = text.replace(' ',':::')\n    text = text.replace('[',':::')\n    text = text.replace(']',':::')\n    text = text.replace('.','::::')\n    text = text.replace(';',':::')\n    text = text.replace('{',':::')\n    text = text.replace('}',':::')\n    text = text.replace('~',':::')\n    text = text.replace('!',':::')\n    text = text.replace('<',':::')\n    text = text.replace('=',':::')\n    text = text.replace('>',':::')\n    text = text.replace('?',':::')\n    text = text.replace('@',':::')\n    text = text.replace('{',':::')\n    text = text.replace('}',':::')\n    text = text.replace('\"',':::')\n    text = text.replace('\"',':::')\n    text = text.replace('<',':::')\n    text = text.replace('>',':::')\n    text = text.replace('%',':::')\n    text = text.replace('#',':::')\n    text = text.replace('$',':::')\n    text = text.replace('@',':::')\n    text = text.replace('&',':::')\n    text = text.replace('`',':::')\n    text = text.replace('^',':::')\n    text = text.replace('~',':::')\n    text = text.replace('(',':')\n    text = text.replace(')',':::')\n    text = text.replace('[',':::')\n    text = text.replace(']',':::')\n    text = text.replace('{',':::')\n    text = text.replace('}',':::')\n    text = text.replace('(',':')\n    text = text.replace(')',':::')\n    text = text.replace('.',':::')\n    text = text.replace(';',':::')\n    text = text.replace('{',':::')\n    text = text.replace('}',':::')\n    text = text.replace('~',':::')\n    text = text.replace('!',':::')\n    text = text.replace('<',':::')\n    text = text.replace('=',':::')\n    text = text.replace('>',':::')\n    text = text.replace('?',':::')\n    text = text.replace('@',':::')\n    text = text.replace('{',':::')\n    text = text.replace('}',':::')\n    text = text.replace('\"',':::')\n    text = text.replace('\"',':::')\n    text = text.replace('<',':::')\n    text = text.replace('>',':::')\n    text = text.replace('%',':::')\n    text = text.replace('#',':::')\n    text = text.replace('$',':::')\n    text = text.replace('@',':::')\n    text = text.replace('&',':::')\n    text = text.replace('`',':::')\n    text = text.replace('^',':::')\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i=0\n    j=len(A)-1\n    while i<j:\n        m=i+j//2\n        if A[m]==x:\n            return m\n        if A[m]>x:\n            i=m+1\n        else:\n            j=m-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # if the number is not present in the array.\n    if A[0]!= x:\n        return -1\n    else:\n        # initialize the first element to be the index of the number.\n        first = 0\n        # iterate over the array.\n        for i in range(1, len(A)):\n            # if the element at index i is equal to the value at index i-1\n            # then that element is the first occurrence.\n            if A[i] == A[i - 1]:\n                first = i\n                break\n        return first"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Sort the array\n    A.sort()\n    \n    # Find index of first occurence of x in array\n    i = 0\n    for j in range(len(A)):\n        if A[j] == x:\n            i = j\n            break\n    \n    # return index\n    return i\n    \n    \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    # Sort the array\n    A.sort()\n    \n    # Find index of last occurence of x in array\n    i = len(A) - 1\n    for j in range(len(A) - 1, -1, -1):\n        if A[j] == x:\n            i = j\n            break\n    \n    # return index\n    return i\n    \ndef test_find_first_occurrence():\n    '''\n    Test function for find_first_occurrence()\n    '''\n    # Create an array of 10 numbers\n    A = [2, 3, 4, 2, 3, 4, 2, 3, 4, 3, 4]\n    \n    # Number at index 3\n    assert find_first_occurrence(A, 3) == 3\n    \n    # Number at index 4\n    assert find_first_occurrence(A, 4) == 4\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    count = 0\n    l = len(A)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    count = 0\n    mid = 0\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = 0\n    last = len(A) - 1\n    while (first <= last):\n        mid = (first + last) // 2\n        if (A[mid] == x):\n            return mid\n        elif (A[mid] < x):\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) < 1:\n        return -1\n    if x not in A:\n        return -1\n    return A.index(x)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    a = bisect.bisect_left(A, x, lo=0, hi=len(A))\n    if a == 0 or A[a-1]!= x:\n        return a\n    return a-1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    low = 0\n    high = n-1\n    while low<=high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_Of_Subarrays = []\n    total = 1\n    for i in range(len(arr)):\n        total *= arr[i]\n    for j in range(len(arr)):\n        total *= arr[j]\n        if j == len(arr) - 1:\n            sum_Of_Subarrays.append(total)\n        else:\n            sum_Of_Subarrays.append(total - arr[j])\n    return sum_Of_Subarrays\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    subarrays=[]\n    subarray=[]\n    for i in range(1,n+1):\n        if n-i<=1:\n            subarray.append(i)\n    sum=0\n    for i in range(len(arr)):\n        subarrays.append(subarray)\n        subarray=[]\n        for j in range(i,n):\n            subarray.append(arr[j])\n            sum+=arr[j]\n        subarrays[-1].append(sum)\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # if there is only one element then return that element\n    if not arr:\n        return arr[0]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    def sumOfSubarray(i, j, arr):\n        if i > j:\n            return 0\n        res = 0\n        for k in range(i, j+1):\n            res = res + arr[k]\n        return res\n    res = 0\n    for i in range(len(arr)-1, -1, -1):\n        for j in range(len(arr)-1, i, -1):\n            res = res + sumOfSubarray(i, j, arr)\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    subarray = [[arr[i]] for i in range(n)]\n    for i in range(n-1):\n        subarray[i][0] = arr[i] + arr[i+1]\n        subarray[i+1][0] = subarray[i][0]\n        for j in range(1, n):\n            subarray[i][j] = subarray[i][j] + subarray[i][j-1]\n            subarray[i][j] = subarray[i][j] + arr[i]\n    return sum([i[0] for i in subarray])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    # base case\n    if n == 1:\n        ans += arr[0]\n        return ans\n    \n    # recursivley to find all possible subarrays\n    # for each possible subarrays\n    # sum of all possible subarrays\n    # for each subarray\n    for i in range(n):\n        for j in range(i,n):\n            # if subarray[i]*subarray[j]*product is given,\n            # then we have to update ans\n            ans += arr[i]*arr[j]*sum(arr[i:j+1])\n    \n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in arr:\n        total += sum(i)\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum = sum + arr[i] * arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    return sum_Of_Subarray_Prod(arr[:-1]) + arr[-1]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return bin(n ^ n >> 1)  \n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(n, i):\n        num = n >> i & 1\n        if num:\n            n = n ^ n\n        else:\n            n = n ^ n\n        return n\n    return toggle_bits(n, 0)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return '0b' + bin(n)[2:]\n    \n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bin_n = bin(n)[2:]\n    bin_n = '0'*(8 - len(bin_n)) + bin_n\n    n = bin_n\n    for i in range(8):\n        n = n[::-1]\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    out = ''\n    while(n):\n        if n & 1:\n            out = out + '1'\n        else:\n            out = out + '0'\n        n = n >> 1\n    return out\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(f'\\n{n}  |  {n & 0xFF}   {n & 0xFFFFF} | {n & 0xFFF}')\n    print(f'{n >> 1}  |  {n >> 1}  |  {n >> 1}')\n    \n    print(f'{n & 0xFF}  |   {n & 0xFFF}   |   {n & 0xFFF}')\n    print(f'{n >> 1}  |   {n >> 1}  |   {n >> 1}')\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    binary = bin(n)[2:]\n    if len(binary) == 0:\n        return -1\n    else:\n        while len(binary) < 32:\n            binary = '0' + binary\n        if len(binary) == 0:\n            return -1\n        else:\n            return binary\n    \n    '''\n    if is_valid_prime(n):\n        return n\n    else:\n        return -1\n    '''\n    \ndef is_valid_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    lst = list(str(n))\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return int(\"\".join(lst), 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    z=0\n    if n==0:\n        n=1\n        z=1\n    else:\n        n=0\n        z=0\n    return n,z\n    \n    \n    "
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n==0:\n        return 1\n    elif n>0:\n        return n&1\n    else:\n        return n&(-1)\n        \n    \n    \ndef toggle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # print(n)\n    if n==0:\n        return -1\n    elif n>0:\n        return n&1\n    else:\n        return n&(-1)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # 1. Retrieve the minimum element, if any, of a list and if it's greater than x, set the minimum element as the rightmost element of the list, set the minimum element as the first element, then move to the next element\n    # 2. If the list has only one element, we can always set the first element, set the second element, and move to the next element\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    j = bisect.bisect_left(a, x)\n    if j > l:\n        return l\n    elif j < l:\n        return j\n    else:\n        return l + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    # If the value is already at the right place, insert it at the right place.\n    if a[x] < a[-1]:\n        # Only compare the elements to the left of the x\n        i = bisect.bisect_left(a, x, lo=0, hi=len(a))\n        # If the element is found, insert it before it\n        if i == 0:\n            a.insert(0, x)\n        else:\n            # If the element is not found, insert it at the right place\n            a.insert(i, x)\n        # Finally, return the x index, which is the location of the inserted element\n        return i\n    \n    # If the value is not present in the array, insert it at the left place\n    else:\n        a.append(x)\n        return len(a) - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i >= len(a):\n        return len(a)\n    else:\n        return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i > len(a):\n        return len(a)\n    else:\n        return i\ndef partition(a, x):\n    i = bisect.bisect_left(a, x)\n    if i >= len(a):\n        return (len(a), None)\n    elif a[i] < x:\n        return (i, a[i])\n    else:\n        return (i+1, a[i])\ndef quick_sort(a, start, end):\n    if start >= end:\n        return\n    pivot = partition(a, end)\n    quick_sort(a, start, pivot[0])\n    quick_sort(a, pivot[1], end)\ndef heapify(a, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    largest = i\n    if left < len(a) and a[left][0] < a[i][0]:\n        largest = left\n    if right < len(a) and a[right][0] < a[largest][0]:\n        largest = right\n    if largest!= i:\n        a[i], a[largest] = a[largest], a[i]\n        heapify(a, largest)\ndef heap_sort(a, key):\n    for i in range(len(a) - 1, -1, -1):\n        heapify(a, i)\n    for i in range(len(a) - 1, 0, -1):\n        a[i], a[0] = a[0], a[i]\n        heapify(a, 0)\ndef sift_down(a, i, n):\n    v = a[i]\n    while i * 2 + 1 < n:\n        j = i * 2 + 1\n        if j < n and a[j][0] < v[0]:\n            j = j * 2 + 1\n        if a[i][0] > v[0]:\n            break\n        if j < n and a[i][0] > a[j][0]:\n            a[i], a[j] = a[j], a[i]\n            i = j\n        else:\n            break\ndef merge(a, p, r):\n    i, j = p, r\n    k = a[i][0] + a[j][0]\n    a[i], a[j] = a[j], a[i]\n    k = a[i][0] + a[j][0]\n    a[i], a[j] = a[j], a[i]\n    if k > m:\n        return a\n    for i in range(p, r):\n        a[i] = a[i][1:] + [a[i][0]]\n    return a\ndef merge_sort(a, key):\n    m = len(a) // 2\n    if m > 0:\n        a = merge(a, 0, m - 1)\n        a = merge(a, m, len(a) - 1)\n        a = merge_sort(a, key)\n        return a\n    else:\n        return a\ndef quicksort(a, start, end):\n    if start >= end:\n        return\n    pivot = partition(a, end)\n    quick_sort(a, start, pivot[0])\n    quick_sort(a, pivot[1], end)\ndef quick_insert(a, x):\n    i = bisect.bisect_left(a, x)\n    if i < len(a):\n        return i\n    else:\n        return len(a)\ndef insert(a, x):\n    i = len(a)\n    if x < a[i - 1][0]:\n        a.append((x, i - 1))\n        a[i - 1][0] = x\n    elif a[i - 1][0] < x:\n        a.insert(i, (x, i - 1))\n        a[i - 1] = a[i - 1][1:] + [a[i - 1][0]]\n    else:\n        a.insert(i, (x, i))\n        a[i] = a[i][1:] + [a[i][0]]\n    return a\ndef get_min(a):\n    i = 0\n    m = len(a) // 2\n    if m == 0:\n        return a[0]\n    else:\n        return a[i]\ndef get_max(a):\n    i = len(a) - 1\n    m = len(a) // 2\n    if m == 0:\n        return a[m]\n    else:\n        return a[i]\ndef merge_2(a, p, r):\n    i, j = p, r\n    k = a[i][0] + a[j][0]\n    a[i], a[j] = a[j], a[i]\n    k = a[i][0] + a[j][0]\n    a[i], a[j] = a[j], a[i]\n    if k > m:\n        return a\n    for i in range(p, r):\n        a[i] = a[i][1:] + [a[i][0]]\n    return a\ndef quick_merge(a, p, r):\n    i = bisect.bisect_left(a, r)\n    if i < len(a):\n        a[i:p] = merge(a, i, r)\n        return a\n    else:\n        return a\ndef quick_sort_2(a, start, end):\n    if start >= end:\n        return\n    p = partition(a, end)\n    quick_sort_2(a, start, p)\n    quick_sort_2(a, p + 1, end)\ndef partition_2(a, p):\n    i = p\n    for j in range(p, len(a)):\n        if a[j][0] < a[i][0]:\n            i = j\n    a[i], a[p] = a[p], a[i]\n    return i\ndef quick_sort_2(a, start, end):\n    if start >= end:\n        return\n    p = partition_2(a, start)\n    quick_sort_2(a, start, p - 1)\n    quick_sort_2(a, p + 1, end)\ndef quick_insert_2(a, x):\n    i = len(a)\n    a.append((x, i))\n    a[i] = a[i][1:] + [a[i][0]]\ndef quick_insert_3(a, x):\n    i = len(a)\n    a.append((x, i))\n    a[i] = [x]\n    a[i][0] = x\ndef quick_insert_4(a, x):\n    a.append((x, len(a) + 1))\n    a.append([x] + a[i][1:] for i in range(len(a) - 1))\ndef quick_insert_5(a, x):\n    a.append((x, len(a) + 1))\n    a[len(a) + 1].append(x)\n    a[len(a) + 1] = a[len(a) + 1][1:] + [a[len(a) + 1][0]]\ndef quick_insert_6(a, x):\n    a.append((x, len(a) + 1))\n    a[len(a) + 1].append(x)\n    a[len(a) + 1] = [x] + a[i][1:] for i in range(len(a) - 1)\ndef quick_insert_7(a, x):\n    "
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i > 0:\n        return i\n    else:\n        return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x == a:\n        return a\n    elif x > a:\n        return a\n    else:\n        return a + 1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x == a:\n        return a\n    elif x < a:\n        return a\n    else:\n        return a + 1\n    \ndef sift_down(a, i, x):\n    '''\n    Write a function to sift down a given list of values using bubble sort.\n    '''\n    v = a[i]\n    j = i\n    for j in range(i, len(a)):\n        if a[j] < v:\n            j = j + 1\n            a[j], a[j-1] = a[j-1], a[j]\n    a[i], a[j] = a[j], a[i]\n    return j\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    sorted_index = bisect.bisect(a, x)\n    return sorted_index - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return string[0] in 'AEIOU'\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if len(string)==0 or string[0] not in \"aeiouAEIOU\": \n        print(\"The string is not starting with vowels\") \n        return 0\n    else: \n        str_list = string.split('_')\n        for word in str_list: \n            for letter in word: \n                if letter not in \"AEIOU\": \n                    print(\"The string is not starting with vowels\") \n                    return 0\n    return 1\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef check_symbol(string):\n    '''\n    Write a function to check whether the given string is a symbol (a,e,i,o,u,l,n,r,s) or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef check_uppercase(string):\n    '''\n    Write a function to check whether the given string is a UPPERCASE letter or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef check_digit(string):\n    '''\n    Write a function to check whether the given string is a number or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef check_lowercase(string):\n    '''\n    Write a function to check whether the given string is a lowercase letter or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef check_upper(string):\n    '''\n    Write a function to check whether the given string is an uppercase letter or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef check_not_startswith(string):\n    '''\n    Write a function to check whether the given string is not a startswith using regex.\n    '''\n    return re.search(regex, string) == None\ndef check_contain_num(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_digit(string):\n    '''\n    Write a function to check whether the given string is a digit or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_lower(string):\n    '''\n    Write a function to check whether the given string is lowercase or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_upper(string):\n    '''\n    Write a function to check whether the given string is upper case or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_symbol(string):\n    '''\n    Write a function to check whether the given string is a symbol (a,e,i,o,u,l,n,r,s) or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_uppercase(string):\n    '''\n    Write a function to check whether the given string is uppercase or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_digits(string):\n    '''\n    Write a function to check whether the given string is digits or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_lower_upper(string):\n    '''\n    Write a function to check whether the given string is lowercase or uppercase or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_lower_upper_symbol(string):\n    '''\n    Write a function to check whether the given string is lowercase or upper case and uppercase or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_contain_number(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_digit_symbol(string):\n    '''\n    Write a function to check whether the given string is a digit or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_digit_symbol_uppercase(string):\n    '''\n    Write a function to check whether the given string is a digit or uppercase or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_not_startswith_symbol(string):\n    '''\n    Write a function to check whether the given string is not a startswith using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_not_contain_number(string):\n    '''\n    Write a function to check whether the given string is not contain numbers or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_symbol_not_startswith_number(string):\n    '''\n    Write a function to check whether the given string is not a startswith or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_not_symbol_startswith_number(string):\n    '''\n    Write a function to check whether the given string is not a startswith or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_not_symbol_startswith_symbol(string):\n    '''\n    Write a function to check whether the given string is not a startswith or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_not_symbol_not_startswith_symbol(string):\n    '''\n    Write a function to check whether the given string is not a startswith or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_contain_number_symbol(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_contain_number_not_startswith_number(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_contain_number_startswith_number(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string)!= None\ndef is_contain_number_not_startswith_symbol(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_contain_number_symbol_not_startswith_symbol(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_contain_number_symbol_not_startswith_symbol(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_contain_number_not_startswith_number(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_contain_number_not_startswith_symbol(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_contain_number_symbol_not_startswith_number(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_contain_number_symbol_not_startswith_symbol(string):\n    '''\n    Write a function to check whether the given string is contain numbers or not using regex.\n    '''\n    return re.search(regex, string) == None\ndef is_contain_symbol_not_startswith"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    if string[0] == 'a' or string[0] == 'e' or string[0] == 'i' or string[0] == 'o' or string[0] == 'u' or string[0] == 'A' or string[0] == 'E' or string[0] == 'I' or string[0] == 'O' or string[0] == 'U':\n        return True\n    else:\n        return False\ndef check_str_num(string):\n    '''\n    Write a function to check whether the given string is starting with a number or not using regex.\n    '''\n    \n    if re.match(regex, string):\n        return True\n    else:\n        return False\ndef check_str_mat(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given string is starting with a match of a or b or not using regex.\n    '''\n    \n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef check_num_mat_mat_mat_num(string):\n    '''\n    Write a function to check whether the given strin"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(string[0] in ['a', 'e', 'i', 'o', 'u']):\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if not re.search(regex, string): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    check_str = string.lower()\n    if re.search(vowel, check_str):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    for i in string:\n        if(re.search(regex,i)):\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    total = 0\n    if n == 0:\n        return 0\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    n-1=n-1+n\n    return n-1\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    assert n > 0, \"n must be greater than 0\"\n    if n == 0:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Write your code here\n    if n==0:\n        return 0\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n<10:\n        return n\n    elif n%10==0:\n        return 10\n    else:\n        a=0\n        b=1\n        while b<=math.floor((n-1)/10):\n            if n%10>a:\n                a=n%10\n                b+=1\n            else:\n                b+=1\n        return a+b\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initializing\n    digits = 0 \n    i = 1\n    k = 0\n    # looping\n    while (i <= n): \n        # save itr \n        k = digits \n        # starting \n        digits = digits + 1 \n        # loop\n        while digits <= n: \n            # if it is even \n            if (i % 2 == 0): \n                # if digits is odd \n                if (digits % 2!= 0): \n                    # add itr \n                    i = i + 1 \n                    digits = digits + 1 \n                # if digits is even \n                else: \n                    # save itr \n                    i = i + 1 \n                    digits = digits + 1 \n            # if it is odd \n            else: \n                # if digits is odd \n                if (digits % 2!= 0): \n                    # add itr \n                    i = i + 1 \n                    digits = digits + 1 \n                # if digits is even \n                else: \n                    # save itr \n                    i = i + 1 \n                    digits = digits + 1 \n        digits = 0 \n        i = 1\n    return -1 \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    s,k=0,1\n    while s<=n:\n        if n%k==0:\n            s+=1\n        else:\n            k+=1\n            n//=k\n    return s\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l=[]\n    for i in range(n+1):\n        l.append(i)\n    l.append(n)\n    for j in range(len(l)-1):\n        if l[j]>l[j+1]:\n            return j+1\n    return len(l)-1\n    \ndef find_Triangular(n):\n    '''\n    Write a python function to find the minimum and maximum number of triangular numbers with n digits. \n    \n    Notes:\n    * For the given number, the function returns 0 if the number is less than or equal to 0.\n    * For the given number, the function returns the smallest number of n digits if the minimum of the n digits is found.\n    * For the given number, the function returns the largest number of n digits if the maximum of the n digits is found.\n    * For the given number, the function returns None if the given number is not a valid number.\n    '''\n    if n<=0:\n        return None\n    if n==0:\n        return 0\n    \n    if n==1:\n        return (0,1)\n        \n    if n==2:\n        return (0,1,2)\n    \n    if n==3:\n        return (0,2,3)\n        \n    if n==4:\n        return (0,3,4)\n        \n    if n==5:\n        return (0,4,5)\n        \n    if n==6:\n        return (0,4,5,6)\n        \n    if n==7:\n        return (0,5,7)\n        \n    if n==8:\n        return (0,7,8)\n        \n    if n==9:\n        return (0,8,9)\n        \n    if n==10:\n        return (0,8,9,10)\n        \n    if n==11:\n        return (1,1,11)\n        \n    if n==12:\n        return (1,2,12)\n        \n    if n==13:\n        return (2,1,13)\n        \n    if n==14:\n        return (2,2,14)\n        \n    if n==15:\n        return (3,1,15)\n        \n    if n==16:\n        return (3,2,16)\n        \n    if n==17:\n        return (4,1,17)\n        \n    if n==18:\n        return (4,2,18)\n        \n    if n==19:\n        return (4,3,19)\n        \n    if n==20:\n        return (5,1,20)\n        \n    if n==21:\n        return (5,2,21)\n        \n    if n==22:\n        return (5,3,22)\n        \n    if n==23:\n        return (6,1,23)\n        \n    if n==24:\n        return (6,2,24)\n        \n    if n==25:\n        return (6,3,25)\n        \n    if n==26:\n        return (6,4,26)\n        \n    if n==27:\n        return (7,1,27)\n        \n    if n==28:\n        return (7,2,28)\n        \n    if n==29:\n        return (7,3,29)\n        \n    if n==30:\n        return (8,1,30)\n        \n    if n==31:\n        return (8,2,31)\n        \n    if n==32:\n        return (8,3,32)\n        \n    if n==33:\n        return (9,1,33)\n        \n    if n==34:\n        return (9,2,34)\n        \n    if n==35:\n        return (9,3,35)\n        \n    if n==36:\n        return (10,1,36)\n        \n    if n==37:\n        return (10,2,37)\n        \n    if n==38:\n        return (10,3,38)\n        \n    if n==39:\n        return (11,1,39)\n        \n    if n==40:\n        return (11,2,40)\n        \n    if n==41:\n        return (11,3,41)\n        \n    if n==42:\n        return (12,1,42)\n        \n    if n==43:\n        return (12,2,43)\n        \n    if n==44:\n        return (12,3,44)\n        \n    if n==45:\n        return (13,1,45)\n        \n    if n==46:\n        return (13,2,46)\n        \n    if n==47:\n        return (13,3,47)\n        \n    if n==48:\n        return (14,1,48)\n        \n    if n==49:\n        return (14,2,49)\n        \n    if n==50:\n        return (14,3,50)\n        \n    if n==51:\n        return (15,1,51)\n        \n    if n==52:\n        return (15,2,52)\n        \n    if n==53:\n        return (15,3,53)\n        \n    if n==54:\n        return (16,1,54)\n        \n    if n==55:\n        return (16,2,55)\n        \n    if n==56:\n        return (16,3,56)\n        \n    if n==57:\n        return (17,1,57)\n        \n    if n==58:\n        return (17,2,58)\n        \n    if n==59:\n        return (17,3,59)\n        \n    if n==60:\n        return (18,1,60)\n        \n    if n==61:\n        return (18,2,61)\n        \n    if n==62:\n        return (18,3,62)\n        \n    if n==63:\n        return (19,1,63)\n        \n    if n==64:\n        return (19,2,64)\n        \n    if n==65:\n        return (19,3,65)\n        \n    if n==66:\n        return (20,1,66)\n        \n    if n==67:\n        return (20,2,67)\n        \n    if n==68:\n        return (20,3,68)\n        \n    if n==69:\n        return (21,1,69)\n        \n    if n==70:\n        return (21,2,70)\n        \n    if n==71:\n        return (21,3,71)\n        \n    if n==72:\n        return (22,1,72)\n        \n    if n==73:\n        return (22,2,73)\n        \n    if n==74:\n        return (22,3,74)\n        \n    if n==75:\n        return (23,1,75)\n        \n    if n==76:\n        return (23,2,76)\n        \n    if n==77:\n        return (23,3,77)\n        \n    if n==78:\n        return (24,1,78)\n        \n    if n==79:\n        return (24,2,79)\n        \n    if n==80:\n        return (24,3,80)\n        \n    if n==81:\n        return (25,1,81)\n        \n    if n==82:\n        return (25,2,82)\n        \n    if n==83:\n        return (25,3,83)\n        \n    if n==84:\n        return (26,1,84)\n        \n    if n==85:\n        return (26,2,85)\n        \n    if n==86:\n        return (26,3,86)\n        \n    if n==87:\n        return (27,1,87)\n        \n    if n==88:\n        return (27,2,88)\n        \n    if n==89:\n        return (27,3,89)\n        \n    if n==90:\n        return (28,1,90)\n        \n    if n==91:\n        return (28,2,91)\n        \n    if n==9"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 1: \n        return -1\n    else: \n        for i in range(1, int(math.sqrt(n)+1)): \n            if n % i == 0: \n                return i \n    return -1\ndef find_diff(n): \n    '''\n    Write a python function to find the smallest number with difference of n digits from 1 to the number given as input. https://www.geeksforgeeks.org/smallest-number-with-difference-of-n-digits/\n    '''\n    a = math.floor(n) \n    b = math.floor(n) \n    if (a==b): \n        return a\n    elif (n%a==0 and n%b==0): \n        return b \n    elif (n%a==0): \n        return b \n    elif (n%b==0): \n        return a \n    elif (n%a!=0 and n%b!=0): \n        return a \ndef find_Sum(n): \n    '''\n    Write a python function to find the sum of numbers in a given range. https://www.geeksforgeeks.org/find-sum-of-numbers-in-a-given-range/\n    '''\n    a = math.floor(n) \n    b = math.floor(n) \n    sum = (a + b)\n    print(\"Sum of numbers from 0 to\", n, \":\", sum)\ndef find_Sqrt(n): \n    '''\n    Write a python function to find the square root of a given number. https://www.geeksforgeeks.org/square-root-of-a-number/\n    '''\n    if n < 1: \n        return -1 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 1 \n    else: \n        a = math.floor(n/2) \n        print(\"Square root of\", n, \"is\", a)\n        b = math.floor(n/a) \n        print(\"Square root of\", n, \"is\", b) \n    return b \ndef find_Inverse(n): \n    '''\n    Write a python function to find the inverse of a given number. https://www.geeksforgeeks.org/find-inverse-of-a-number/\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else: \n        a = math.floor(math.sqrt(n)) \n        print(\"Inverse of\", n, \"is\", a) \n        b = math.floor(1/a) \n        print(\"Inverse of\", n, \"is\", b) \n    return b \ndef find_M(n): \n    '''\n    Write a python function to calculate the mean of a given array. https://www.geeksforgeeks.org/find-mean-of-a-given-array/\n    '''\n    sum = 0 \n    for i in range(0, n): \n        sum = sum + i \n    mean = sum / n \n    print(\"Mean of array\", n, \"is\", mean) \n    return mean \ndef find_Median(n): \n    '''\n    Write a python function to find the median of a given array. https://www.geeksforgeeks.org/find-median-of-a-given-array/\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 0 \n    elif n == 2: \n        return 1 \n    elif n == 3: \n        return 1\n    else: \n        a = math.floor(math.sqrt(n)) \n        print(\"Median of array\", n, \"is\", a) \n        b = math.floor(n/a) \n        print(\"Median of array\", n, \"is\", b) \n    return b \ndef find_Mode(n): \n    '''\n    Write a python function to find the mode of a given array. https://www.geeksforgeeks.org/find-mode-of-a-given-array/\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else: \n        a = math.floor(math.sqrt(n)) \n        print(\"Mode of array\", n, \"is\", a) \n        b = math.floor(n/a) \n        print(\"Mode of array\", n, \"is\", b) \n    return b \ndef find_Median2(n): \n    '''\n    Write a python function to find the median of a given array. https://www.geeksforgeeks.org/find-median-of-a-given-array/\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 0 \n    elif n == 2: \n        return 1 \n    elif n == 3: \n        return 1\n    else: \n        a = math.floor(math.sqrt(n)) \n        print(\"Median of array\", n, \"is\", a) \n        b = math.floor(n/a) \n        print(\"Median of array\", n, \"is\", b) \n    return b \ndef find_Mode2(n): \n    '''\n    Write a python function to find the mode of a given array. https://www.geeksforgeeks.org/find-mode-of-a-given-array/\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else: \n        a = math.floor(math.sqrt(n)) \n        print(\"Mode of array\", n, \"is\", a) \n        b = math.floor(n/a) \n        print(\"Mode of array\", n, \"is\", b) \n    return b \ndef find_Median3(n): \n    '''\n    Write a python function to find the median of a given array. https://www.geeksforgeeks.org/find-median-of-a-given-array/\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 0 \n    elif n == 2: \n        return 1 \n    elif n == 3: \n        return 1\n    else: \n        a = math.floor(math.sqrt(n)) \n        print(\"Median of array\", n, \"is\", a) \n        b = math.floor(n/a) \n        print(\"Median of array\", n, \"is\", b) \n    return b \ndef find_Mode3(n): \n    '''\n    Write a python function to find the mode of a given array. https://www.geeksforgeeks.org/find-mode-of-a-given-array/\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else: \n        a = math.floor(math.sqrt(n)) \n        print(\"Mode of array\", n, \"is\", a) \n        b = math.floor(n/a) \n        print(\"Mode of array\", n, \"is\", b) \n    return b \ndef find_Median4(n): \n    '''\n    Write a python function to find the median of a given array. https://www.geeksforgeeks.org/find-median-of-a-given-array/\n    '''\n    if n == 0: \n        return 0 \n    e"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def check_triangle(x,y):\n        for i in range(len(y)):\n            for j in range(i+1,len(y)):\n                if x!= y[i] and y[i]*y[j] > x:\n                    return False\n        return True\n    n = str(n)\n    if len(n)<=1:\n        return -1\n    i = 0\n    for i in range(len(n)):\n        if n[i] == \"0\":\n            pass\n        elif i == len(n)-1:\n            if n[i] == \"9\" and n[i-1]!= \"1\":\n                return i\n            elif n[i] == \"9\" and n[i-1] == \"0\":\n                return i\n            else:\n                return -1\n        else:\n            if n[i] == \"9\" and n[i-1]!= \"1\" and n[i+1]!= \"1\":\n                return i\n            elif n[i] == \"9\" and n[i-1] == \"0\" and n[i+1]!= \"1\":\n                return i\n            else:\n                return -1\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = math.factorial(n)\n    b = math.pow(n,2)\n    c = (n-1) * (n-1)\n    d = math.pow(a,2) + math.pow(b,2) + math.pow(c,2)\n    ans = math.floor(d/2)\n    return ans\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            list.append(i)\n    return list[0]\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # we define a loop to calculate the number of digits, and the index, from the top to the last digit of the number\n    index = 0\n    for i in range(n): \n        index += 1\n        index = (index // 10) * 10\n    # returning the index and it's digit\n    return index \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_triangular(num):\n        # this checks if number is a whole number\n        if num % 10 == 0:\n            # this checks if number is a whole number\n            return True\n        else:\n            # if number is not a whole number, it checks if the next number is a whole number, if so it checks if the next number is a whole number, if so it checks if the next number is a whole number.\n            return False\n        \n    # To find index of smallest triangular number\n    n = int(n)\n    \n    # check if n is even or odd\n    if n % 2 == 0:\n        # if even, return index of 2\n        return n // 10 * 10\n    else:\n        # if odd, return index of 3\n        return n // 10 * 10 + 1\n    \n    \ndef check_triangular_numbers(n):\n    '''\n    To find number of triangular numbers with input n, and to check if n is a triangular number, \n    we need to check if there are any triplets of integers which are either odd or even. \n    '''\n    # Check if n is a triangular number\n    if n % 2 == 0:\n        # if n is a triangular number, we need to find all triplets of even integers and odd integers.\n        tri_even = []\n        tri_odd = []\n        \n        for i in range(n, 0, -1):\n            if i % 2 == 0:\n                tri_even.append(i)\n            else:\n                tri_odd.append(i)\n        \n        # check if the triplet is odd or even\n        # if the triplet is even, we will need to check if there are any triplets which are odd integers\n        if len(tri_odd) > 0:\n            if len(tri_odd) % 2 == 0:\n                print('Triangular number is even')\n            else:\n                print('Triangular number is odd')\n                \n        # if all the triplets are odd, we will need to check if there are any triplets which are even integers\n        if len(tri_even) > 0:\n            if len(tri_even) % 2 == 0:\n                print('Triangular number is even')\n            else:\n                print('Triangular number is odd')\n                \n            \ndef main():\n    '''\n    To run the program, user will need to enter the number of triangle number, \n    and the number of test cases to be generated. \n    '''\n    print('The program takes input for n and test case to be generated and returns the number of triangular numbers with input n')\n    n = int(input('Enter the input number of triangle number'))\n    print('\\n')\n    \n    print('The program will generate all the triangular numbers with input n. The code is simple!')\n    print('\\n')\n    \n    if n % 2 == 0:\n        print('The triangle number {} is even'.format(n))\n        check_triangular_numbers(n)\n    else:\n        print('The triangle number {} is odd'.format(n))\n        check_triangular_numbers(n)\n        \n    print('The program will generate the number of triangular numbers with input n, and only return the index of triangle number with input n')\n    print('\\n')\n    \n    if n % 2 == 0:\n        index_of_triangular_num = find_Index(n)\n        print('The index of {} is {}'.format(n, index_of_triangular_num))\n    else:\n        index_of_triangular_num = find_Index(n)\n        print('The index of {} is {}'.format(n, index_of_triangular_num))\n        \n    print('\\n')\n    \n    print('\\n')\n    \n    print('\\n')\n    \nmain()\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup_dict = dict()\n    test_tup_dict['key'] = test_tup[0]\n    test_tup_dict['val'] = test_tup[1]\n    return test_tup_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_tuple = []\n    for i in range(len(test_tup)):\n        new_tuple.append(test_tup[i])\n    return dict(new_tuple)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        test_dict[test_tup[i]] = test_tup[(i+1) % len(test_tup)]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    out = {}\n    # iterate over each element\n    for k,v in test_tup:\n        # create the key and value pair\n        out[k] = v\n    return out\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for index, item in enumerate(test_tup[0]):\n        result[index] = item\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in test_tup:\n        d[i] = test_tup[i]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(len(test_tup)-1):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)):\n        dict[test_tup[i][0]] = test_tup[i][1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup_dic = {}\n    for i in test_tup:\n        tup_dic[i] = test_tup[i]\n    return tup_dic\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = {}\n    for i in test_tup:\n        res[i] = test_tup.count(i)\n    return res\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return(s == s.lower())"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    m = s.upper()\n    if len(m) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s :\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n            continue\n        else :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    res = True\n    for i in range(len(s)) :\n        for j in range(i, len(s)) :\n            if s[i]!= s[j] :\n                res = False\n                break\n    return res\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        char = s[i]\n        if char not in char_dict.keys():\n            return False\n        else:\n            char_dict[char] -= 1\n            if char_dict[char] == 0:\n                del char_dict[char]\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s :\n        if char == s[0] or char == s[-1] :\n            pass\n        else :\n            return False\n    return True\n    \ndef all_Strings_Same(s) :\n    '''\n    Write a python function to check whether all the strings are same or not.\n    '''\n    for char in s :\n        if char == s[0] or char == s[-1] :\n            pass\n        else :\n            return False\n    return True\n        "
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    i=0\n    while i < len(s) :\n        j=0\n        while j < len(s) :\n            if s[i]!= s[j] :\n                return False\n            j+=1\n        i+=1\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    characters = list(s)\n    unique = []\n    unique_char = []\n    for char in characters :\n        if char not in unique :\n            unique.append(char)\n            unique_char.append(char)\n    if len(unique) == len(s):\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check for empty string\n    if (s.isspace()) : return False\n    # check for zero or more digits\n    elif (s.isdigit()) : return False\n    # check for special characters\n    elif (s in ['!', '#', '$', '%', '&', '\\'', '\"', '(', ')', '/', ':', ';', '<', '=', '>', '?', '@', '#', '$', '%', '&', '\\'', '\"', '(']):\n        return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return 4.0\n    elif side == 2:\n        return 8.0\n    elif side == 3:\n        return 8.0\n    elif side == 4:\n        return 2.0\n    else:\n        return 0.0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == \"CCW\":\n        return math.pi * (8 * 3) / 4\n    elif side == \"CW\":\n        return math.pi * (3 * 3) / 4\n    elif side == \"Degree\":\n        return math.pi * 3 / 4\n    elif side == \"Radius\":\n        return math.pi * 3 * 4 / 4\n    elif side == \"CC\":\n        return math.pi * 4\n    elif side == \"CCW\":\n        return math.pi * 6\n    elif side == \"CW\":\n        return math.pi * 6 * 4\n    elif side == \"Degree\":\n        return math.pi * 4 * 6\n    elif side == \"Radius\":\n        return math.pi * 4 * 6 * 4\n    else:\n        print(\"Error, please select a side\")\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side*side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2) * 6\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return (side ** 3) * 9\ndef area_triangle(side1, side2):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return side1 + side2 + side2 * 2\ndef area_four_sides(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a four sides triangle.\n    '''\n    return side1 + side2 + side3 + side1 * 2\ndef area_heptahedron(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a heptahedron.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side3 * 3) + (side1 * 4)\ndef perimeter(side1, side2, side3):\n    '''\n    Write a function to caluclate the perimeter of a triangle.\n    '''\n    return (side1 + side2 + side3) * 2\ndef perimeter_tetrahedron(side1, side2, side3):\n    '''\n    Write a function to caluclate the perimeter of a tetrahedron.\n    '''\n    return (side1 + side2 + side3) * 6\ndef perimeter_cube(side1, side2):\n    '''\n    Write a function to caluclate the perimeter of a cube.\n    '''\n    return (side1 + side2 + side1 * 3) * 9\ndef perimeter_triangle(side1, side2):\n    '''\n    Write a function to caluclate the perimeter of a triangle.\n    '''\n    return (side1 + side2 + side1 * 2) * 4\ndef perimeter_four_sides(side1, side2, side3):\n    '''\n    Write a function to caluclate the perimeter of a four sides triangle.\n    '''\n    return (side1 + side2 + side3 + side1 * 2) * 6\ndef perimeter_heptahedron(side1, side2, side3):\n    '''\n    Write a function to caluclate the perimeter of a heptahedron.\n    '''\n    return (side1 + side2 + side3 + side1 * 2) * 6\ndef area_triangle_nodes(side1, side2):\n    '''\n    Write a function to caluclate the area of a triangle with nodes.\n    '''\n    return (side1 + side2) * side2\ndef area_triangle_nodes_tetrahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a triangle with nodes.\n    '''\n    return (side1 + side2) * 6\ndef area_four_sides_nodes(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a four sides triangle with nodes.\n    '''\n    return (side1 + side2 + side3) * 4\ndef area_triangle_nodes_heptahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a triangle with nodes.\n    '''\n    return (side1 + side2 + side1 * 3) * 9\ndef area_four_sides_nodes_heptahedron(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a four sides triangle with nodes.\n    '''\n    return (side1 + side2 + side3 + side1 * 3) * 4\ndef area_heptahedron_nodes(side1, side2):\n    '''\n    Write a function to caluclate the area of a triangle with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef area_heptahedron_nodes_tetrahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a triangle with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef perimeter_heptahedron_nodes(side1, side2):\n    '''\n    Write a function to caluclate the perimeter of a triangle with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef perimeter_tetrahedron_nodes(side1, side2):\n    '''\n    Write a function to caluclate the perimeter of a triangle with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef perimeter_cube_nodes(side1, side2):\n    '''\n    Write a function to caluclate the perimeter of a cube with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef perimeter_four_sides_nodes(side1, side2, side3):\n    '''\n    Write a function to caluclate the perimeter of a four sides triangle with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side3 * 3) + (side3 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef perimeter_tetrahedron_nodes(side1, side2):\n    '''\n    Write a function to caluclate the perimeter of a triangle with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef perimeter_four_sides_nodes_tetrahedron(side1, side2, side3):\n    '''\n    Write a function to caluclate the perimeter of a four sides triangle with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side3 * 3) + (side3 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef perimeter_heptahedron_nodes_tetrahedron(side1, side2):\n    '''\n    Write a function to caluclate the perimeter of a triangle with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef perimeter_heptahedron_nodes_tetrahedron_heptahedron(side1, side2):\n    '''\n    Write a function to caluclate the perimeter of a triangle with nodes.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side1 * 4) + (side1 * 3) * 2\ndef height(side1, side2, side3, side4):\n    '''\n    Write a function to calculate the height of a cube.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side3 * 2) + (side4 * 3) + (side3 * 2) + (side2 * 4) + (side2 * 3) * 2\ndef height_tetrahedron(side1, side2, side3, side4):\n    '''\n    Write a function to calculate the height of a triangle.\n    '''\n    return (side1 * 6) + (side2 * 3) + (side2 * 2) + (side3 * 3) + (side3 * 2) + (side4 * 3) + (side3 * 2) * 2\ndef height_heptahedron(side1, side2, side3):\n    '''\n    Write a function to calculate the height of a heptahedron.\n    '"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side ** 2\n    b = side * side * side * side * side\n    c = side * side * side * side\n    d = side * side * side * side * side * side\n    e = side * side * side * side * side * side * side\n    f = side * side * side * side * side * side * side * side\n    g = side * side * side * side * side * side * side * side\n    h = side * side * side * side * side * side * side * side\n    i = side * side * side * side * side * side * side * side * side\n    j = side * side * side * side * side * side * side * side * side\n    k = side * side * side * side * side * side * side * side * side\n    l = side * side * side * side * side * side * side * side * side * side\n    n = side * side * side * side * side * side * side * side * side * side * side\n    m = side * side * side * side * side * side * side * side * side * side\n    o = side * side * side * side * side * side * side * side * side * side\n    p = side * side * side * side * side * side * side * side * side * side * side\n    q = side * side * side * side * side * side * side * side * side * side * side\n    r = side * side * side * side * side * side * side * side * side * side * side\n    s = side * side * side * side * side * side * side * side * side * side * side\n    t = side * side * side * side * side * side * side * side * side * side * side\n    u = side * side * side * side * side * side * side * side * side * side * side\n    v = side * side * side * side * side * side * side * side * side * side * side\n    w = side * side * side * side * side * side * side * side * side * side * side\n    x = side * side * side * side * side * side * side * side * side * side * side\n    y = side * side * side * side * side * side * side * side * side * side * side\n    z = side * side * side * side * side * side * side * side * side * side * side\n    \n    return math.sqrt(a * b * c * d * e * f * g * h * i * j * k * l * n * m * n * o * p * q * r * s * t * u * v * w * x * y * z)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side / 3\n    b = 2 * side / 3\n    c = side - 2 * side / 3\n    if side == 0:\n        return -1\n    elif side == 1:\n        return a**2\n    elif side == 2:\n        return a**3 + b**3 + c**3\n    elif side == 3:\n        return a**2 + b**2 + c**2\n    elif side == 4:\n        return (a + b + c)**2\n    else:\n        return area_tetrahedron(side - 1) + area_tetrahedron(side - 2) + area_tetrahedron(side - 3)\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    a = side / 3\n    b = 2 * side / 3\n    c = side - 2 * side / 3\n    if side == 0:\n        return -1\n    elif side == 1:\n        return a * b * c\n    elif side == 2:\n        return a * b ** 2 * c\n    elif side == 3:\n        return a * b * c * (1 - 2 * b**2)\n    elif side == 4:\n        return (a + b + c) * (1 + 4 * b * c) * (1 - 2 * b * c)\n    else:\n        return volume_cube(side - 1) + volume_cube(side - 2) + volume_cube(side - 3)\ndef surface_area(x, y, z):\n    '''\n    Write a function to caluclate the surface area of a sphere.\n    '''\n    a = (x**2 + y**2 + z**2)**(1/2)\n    return a\ndef surface_area_difference(x, y, z):\n    '''\n    Write a function to caluclate the surface area of a sphere.\n    '''\n    a = (x**2 + y**2 + z**2)**(1/2)\n    b = (x**2 + y**2 + z**2)**(1/2)\n    return b - a\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return 4*side*(side+1)\n    elif side == 2:\n        return side*(side+1)/2\n    elif side == 3:\n        return side*(side+1)*math.sqrt(3)\n    else:\n        raise Exception(\"side value error\")\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side*side*side*math.sqrt(3)\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return 4*side*(side+1)\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of an octahedron.\n    '''\n    return side*side*(side+1)*math.sqrt(3)\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a Dodecahedron.\n    '''\n    return (side+1)**2*(side+1)/6\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a Dodecahedron.\n    '''\n    return (side+1)**3*(side+1)/12\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side*side\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3*(side+1)**2\ndef area_rhombus(side):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    return side*(side+1)\ndef volume_rhombus(side):\n    '''\n    Write a function to caluclate the volume of a rhombus.\n    '''\n    return side**2*(side+1)\ndef area_tetrahedron_with_squares(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron with squares.\n    '''\n    return side*side*math.sqrt(3)\ndef volume_tetrahedron_with_squares(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with squares.\n    '''\n    return side*side*math.sqrt(3)\ndef area_tetrahedron_with_squares_areas(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron with squares.\n    '''\n    return side**2*(side+1)**2\ndef volume_tetrahedron_with_squares_areas(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with squares.\n    '''\n    return side**3*(side+1)**2\ndef area_octahedron_with_squares(side):\n    '''\n    Write a function to caluclate the area of a octahedron with squares.\n    '''\n    return side*(side+1)\ndef volume_octahedron_with_squares(side):\n    '''\n    Write a function to caluclate the volume of a octahedron with squares.\n    '''\n    return side**3*(side+1)**2\ndef area_dodecahedron_with_squares(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron with squares.\n    '''\n    return (side+1)**2*(side+1)**2*(side+1)**2\ndef volume_dodecahedron_with_squares(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron with squares.\n    '''\n    return side**3*(side+1)**2\ndef area_cube_with_squares(side):\n    '''\n    Write a function to caluclate the area of a cube with squares.\n    '''\n    return side*side*(side+1)\ndef volume_cube_with_squares(side):\n    '''\n    Write a function to caluclate the volume of a cube with squares.\n    '''\n    return side**3*(side+1)**2\ndef area_rhombus_with_squares(side):\n    '''\n    Write a function to caluclate the area of a rhombus with squares.\n    '''\n    return side*(side+1)\ndef volume_rhombus_with_squares(side):\n    '''\n    Write a function to caluclate the volume of a rhombus with squares.\n    '''\n    return side**2*(side+1)**2\ndef area_tetrahedron_with_primes(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron with primes.\n    '''\n    return side*(side+1)**2\ndef volume_tetrahedron_with_primes(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with primes.\n    '''\n    return side*(side+1)*(side+1)\ndef area_octahedron_with_primes(side):\n    '''\n    Write a function to caluclate the area of an octahedron with primes.\n    '''\n    return (side+1)**2*(side+1)**2*(side+1)**2\ndef volume_octahedron_with_primes(side):\n    '''\n    Write a function to caluclate the volume of an octahedron with primes.\n    '''\n    return (side+1)**3*(side+1)**2*(side+1)**2\ndef area_dodecahedron_with_primes(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron with primes.\n    '''\n    return (side+1)**2*(side+1)**2*(side+1)**2\ndef volume_dodecahedron_with_primes(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron with primes.\n    '''\n    return side**3*(side+1)**2\ndef area_cube_with_primes(side):\n    '''\n    Write a function to caluclate the area of a cube with primes.\n    '''\n    return (side+1)**3*(side+1)**2\ndef volume_cube_with_primes(side):\n    '''\n    Write a function to caluclate the volume of a cube with primes.\n    '''\n    return side**3*(side+1)**2\ndef area_rhombus_with_primes(side):\n    '''\n    Write a function to caluclate the area of a rhombus with primes.\n    '''\n    return side*(side+1)**2\ndef volume_rhombus_with_primes(side):\n    '''\n    Write a function to caluclate the volume of a rhombus with primes.\n    '''\n    return side**2*(side+1)**2\ndef area_tetrahedron_with_primes_areas(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron with primes.\n    '''\n    return side*(side+1)*(side+1)\ndef volume_tetrahedron_with_primes_areas(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with primes.\n    '''\n    return side*(side+1)*(side+1)*(side+1)\ndef area_octahedron_with_primes_areas(side):\n    '''\n    Write a function to caluclate the area of an octahedron with primes.\n    '"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return math.pi * 4\n    elif side == 1:\n        return math.pi * 3.0\n    elif side == 2:\n        return math.pi * 2.0\n    elif side == 3:\n        return math.pi * 1.0\n    elif side == 4:\n        return math.pi * 0.0\n    else:\n        return -1\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    d = side\n    e = side\n    f = side\n    g = side\n    h = side\n    i = side\n    j = side\n    k = side\n    l = side\n    m = side\n    n = side\n    o = side\n    p = side\n    q = side\n    r = side\n    s = side\n    t = side\n    u = side\n    v = side\n    w = side\n    x = side\n    y = side\n    z = side\n    side_A = [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]\n    side_B = [b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z]\n    side_C = [c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z,x]\n    side_D = [d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z,x,z,x,z]\n    side_E = [e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z,x,z,x,z,x,z]\n    side_F = [f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z]\n    side_G = [g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z]\n    side_H = [h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z]\n    side_I = [i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z]\n    side_J = [j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z]\n    side_K = [k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,x,z,"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 * math.sqrt(3) * 3.14159\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    j = n-1\n    for i in range(n//2):\n        list[i], list[j] = list[j], list[i]\n        j -= 1\n    print(list)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # your code here\n    return list\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    # your code here\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[len(list)-1-i])\n    \n    for i in range(m):\n        for i in range(len(list)):\n            new_list.append(list[i])\n        \n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    list = new_list\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list:\n        return None\n    else:\n        \n        for i in range(len(list)-1, -1, -1):\n            list[i], list[i] = list[i], list[i]\n        \n        return list\n        \n    \n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-1::-1] + list + list[::-1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m_n = len(list)\n    count_l = m_n//2\n    #print('count_l = {}'.format(count_l))\n    for i in range(count_l):\n        list[i] = list[-i]\n    #print('list = {}'.format(list))\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # loop till the last index of list\n    for i in range(m - 1, len(list), -1):\n        # loop through each element\n        for j in range(0, i):\n            # increment count of elements\n            list[j], list[i] = list[i], list[j]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Function to rotate list\n    def rotate_list(lst, n):\n        # Base case\n        if n == 0:\n            return lst\n        \n        # Recursive case\n        return rotate_list(lst[-n:], n-1) + [lst[0]] + rotate_list(lst[:-n-1:-1], n-1)\n    \n    return rotate_list(list, m)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n    i = 0\n    for j in range(len(new_list)):\n        new_list[j] = new_list[j+i]\n        i = i + 1\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        tup = tuple(test_tup)\n    except:\n        print('Test_tuple:',test_tup)\n        raise TypeError('Test_tuple has no value')\n    else:\n        if None in tup:\n            print('Test_tuple:',tup)\n            raise ValueError('None value in tuple')\n        else:\n            return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # Your code here\n    try:\n        test_tup[0]\n        test_tup[1]\n    except IndexError:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem!= None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return len(test_tup[0]) > 0\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    num = []\n    for i in range(startnum,endnum+1):\n        if i%10==0:\n            num.append(i)\n    return num\nprint(divisible_by_digits(1,1000))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    output = []\n    for x in range(startnum, endnum+1):\n        for digit in range(0, 10):\n            if x%digit == 0:\n                output.append(digit)\n    return output\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    count = 0\n    for i in range(startnum, endnum + 1):\n        if i%10 == 0:\n            count+=1\n    return count"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    digits = []\n    \n    # def make_list(start, end, step):\n    #     while start < end:\n    #         yield start\n    #         start += step\n    #     return\n    \n    def divisible_by_digit(startnum, endnum):\n        '''\n        Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n        '''\n        numbers = []\n        digits = []\n        \n        # def make_list(start, end, step):\n        #     while start < end:\n        #         yield start\n        #         start += step\n        #     return\n        \n        for i in range(startnum, endnum + 1):\n            if i % 10 == 0:\n                digits.append(i)\n            else:\n                numbers.append(i)\n        \n        # make_list(0, 100, 1)\n        \n        print(digits, numbers)\n        \n    divisible_by_digit(startnum, endnum"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if endnum == 0:\n        endnum = 10**15\n    return startnum % endnum == 0\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for x in range(startnum, endnum):\n        if x % 10!= 0:\n            divisible_by_digit = 1\n            divisible_by_digit_index = 0\n            while divisible_by_digit <= x % 10:\n                divisible_by_digit = divisible_by_digit * 10 + divisible_by_digit_index\n                divisible_by_digit_index = divisible_by_digit_index + 1\n            print(x, \"is divisible by\", divisible_by_digit_index, \"digits.\")\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    '''\n    divisible_by_digits(1, 10) # -> 11\n    divisible_by_digits(7, 11) # -> 0\n    divisible_by_digits(19, 25) # -> 0\n    '''\n    \n    startnum = str(startnum)\n    endnum = str(endnum)\n    \n    startnum_list = startnum.split(\".\")\n    endnum_list = endnum.split(\".\")\n    \n    len_start = len(startnum_list)\n    len_end = len(endnum_list)\n    \n    #Find all numbers in the range between startnum and endnum\n    for i in range(0, len_start):\n        for j in range(0, len_end):\n            if(int(startnum_list[i]) % int(endnum_list[j]) == 0):\n                print(int(startnum_list[i]) % int(endnum_list[j]))\n                #print(f\"{int(startnum_list[i]) % int(endnum_list[j])}\")\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_digit(num):\n        return num > 9 and num % 10 == 0\n    \n    def digit_count(num):\n        return sum(1 for i in str(num) if is_digit(i))\n    \n    start_count = digit_count(startnum)\n    end_count = digit_count(endnum)\n    for i in range(start_count, end_count+1):\n        if digit_count(i) == endnum-startnum:\n            return i\n    return -1\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    d=0\n    while d<(endnum-startnum):\n        #divide by every digit in the range\n        yield startnum % 10\n        startnum = startnum//10\n        d+=1\n    while d<(endnum):\n        #divide by every digit in the range\n        yield startnum % 10\n        startnum = startnum//10\n        d+=1\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    start_num = startnum\n    end_num = endnum\n    div = lambda n: n%10\n    \n    # Write your code here\n    while start_num<end_num:\n        numbers.append(start_num)\n        start_num += div(start_num)\n        end_num -= div(end_num)\n        \n    return numbers\n    \ndef is_leap(year):\n    '''\n    Write a function that returns True if the year is a leap year, \n    and False otherwise. Note: The year can be a date, \n    or a year outside the Gregorian calendar range.\n    '''\n    leap = False\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                leap = True\n        else:\n            leap = True\n    return leap\n        \ndef days_in_month(year, month):\n    '''\n    Write a function that returns the number of days in a month. \n    The first day of the month has 31 days. \n    \n    Note: The month should be zero-padded at least 3 places \n    so the first day of each month is 1.\n    '''\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        days = 31\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        days = 30\n    else:\n        days = 28\n    return days\n    \ndef days_in_year(year):\n    '''\n    Write a function that returns the number of days in a year.\n    '''\n    if is_leap(year):\n        return 29\n    else:\n        return 28\n    \ndef days_in_month_recursive(year, month):\n    '''\n    Return the number of days in the given month in a given year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    if month == 1:\n        return 31\n    if month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    else:\n        return days_in_month_recursive(year + 1, month)\n    \ndef days_in_year_recursive(year):\n    '''\n    Return the number of days in the given year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 29\n    else:\n        return 28\n    \ndef days_in_year_recursive_2(year):\n    '''\n    Return the number of days in the given year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 29\n    else:\n        return 28\n        \ndef days_in_year_recursive_3(year):\n    '''\n    Return the number of days in the given year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    return days_in_year_recursive_2(year)\n    \ndef days_in_year_recursive_4(year):\n    '''\n    Return the number of days in the given year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 29\n    else:\n        return 28\n        \ndef days_in_year_recursive_5(year):\n    '''\n    Return the number of days in the given year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    return days_in_year_recursive_4(year)\n    \ndef days_in_year_recursive_6(year):\n    '''\n    Return the number of days in the given year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 29\n    else:\n        return 28\n    \ndef days_in_year_recursive_7(year):\n    '''\n    Return the number of days in the given year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 29\n    else:\n        return 28\n    \ndef days_in_month_recursive_8(year, month):\n    '''\n    Return the number of days in the given month in a given year.\n    \n    Note: The month should be zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 31\n    else:\n        return days_in_month_recursive_8(year + 1, month)\n        \ndef days_in_year_recursive_9(year):\n    '''\n    Return the number of days in the given year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    return days_in_year_recursive_8(year, 1)\n    \ndef is_leap_year(year):\n    '''\n    Return True if the year is a leap year, and False otherwise. \n    \n    Note: The year can be a date, or a year outside the Gregorian calendar range.\n    '''\n    if is_leap(year):\n        return True\n    else:\n        return False\n        \ndef days_in_month_recursive_10(year, month):\n    '''\n    Return the number of days in a month in a given year. \n    \n    Note: The month should be zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 31\n    else:\n        return days_in_month_recursive_10(year + 1, month)\n        \ndef days_in_year_recursive_11(year):\n    '''\n    Return the number of days in a year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 31\n    else:\n        return days_in_year_recursive_11(year + 1)\n    \ndef days_in_month_recursive_12(year, month):\n    '''\n    Return the number of days in a month in a given year.\n    \n    Note: The month should be zero-padded at least 3 places at the start of the month.\n    '''\n    return days_in_month_recursive_12(year, month - 1)\n    \ndef days_in_year_recursive_13(year):\n    '''\n    Return the number of days in a year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 31\n    else:\n        return days_in_year_recursive_13(year + 1)\n        \ndef days_in_month_recursive_14(year, month):\n    '''\n    Return the number of days in a month in a given year.\n    \n    Note: The month should be zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 31\n    else:\n        return days_in_month_recursive_14(year, month - 1)\n        \ndef days_in_year_recursive_15(year):\n    '''\n    Return the number of days in a year.\n    \n    Note: The year is zero-padded at least 3 places at the start of the month.\n    '''\n    if is_leap(year):\n        return 31\n    else:\n        return days_in_year_recursive"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    x = r*math.cos(a)\n    y = r*math.sin(a)\n    return x*y\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pi = math.pi\n    a_ = math.pi / 180 * a\n    if a_ > pi:\n        return None\n    \n    if r == 1:\n        return round(math.pi*r*r/2*a,2)\n    if r == 2:\n        return round(math.pi*r/2*a,2)\n    if r == 3:\n        return round(r*math.pi*a/2,2)\n    if r == 4:\n        return round(r*math.pi/2*a,2)\n    if r == 5:\n        return round(r*math.pi*a/2,2)\n    if r == 6:\n        return round(r*math.pi*a/2,2)\n    if r == 7:\n        return round(r*math.pi/2*a,2)\n    if r == 8:\n        return round(r*math.pi/4*a,2)\n    if r == 9:\n        return round(r*math.pi/4*a,2)\n    if r == 10:\n        return round(r*math.pi/4*a,2)\n    if r == 11:\n        return round(r*math.pi/4*a,2)\n    if r == 12:\n        return round(r*math.pi/4*a,2)\n    if r == 13:\n        return round(r*math.pi/4*a,2)\n    if r == 14:\n        return round(r*math.pi/4*a,2)\n    if r == 15:\n        return round(r*math.pi/4*a,2)\n    if r == 16:\n        return round(r*math.pi/4*a,2)\n    if r == 17:\n        return round(r*math.pi/4*a,2)\n    if r == 18:\n        return round(r*math.pi/4*a,2)\n    if r == 19:\n        return round(r*math.pi/4*a,2)\n    if r == 20:\n        return round(r*math.pi/4*a,2)\n    if r == 21:\n        return round(r*math.pi/4*a,2)\n    if r == 22:\n        return round(r*math.pi/4*a,2)\n    if r == 23:\n        return round(r*math.pi/4*a,2)\n    if r == 24:\n        return round(r*math.pi/4*a,2)\n    if r == 25:\n        return round(r*math.pi/4*a,2)\n    if r == 26:\n        return round(r*math.pi/4*a,2)\n    if r == 27:\n        return round(r*math.pi/4*a,2)\n    if r == 28:\n        return round(r*math.pi/4*a,2)\n    if r == 29:\n        return round(r*math.pi/4*a,2)\n    if r == 30:\n        return round(r*math.pi/4*a,2)\n    if r == 31:\n        return round(r*math.pi/4*a,2)\n    if r == 32:\n        return round(r*math.pi/4*a,2)\n    if r == 33:\n        return round(r*math.pi/4*a,2)\n    if r == 34:\n        return round(r*math.pi/4*a,2)\n    if r == 35:\n        return round(r*math.pi/4*a,2)\n    if r == 36:\n        return round(r*math.pi/4*a,2)\n    if r == 37:\n        return round(r*math.pi/4*a,2)\n    if r == 38:\n        return round(r*math.pi/4*a,2)\n    if r == 39:\n        return round(r*math.pi/4*a,2)\n    if r == 40:\n        return round(r*math.pi/4*a,2)\n    if r == 41:\n        return round(r*math.pi/4*a,2)\n    if r == 42:\n        return round(r*math.pi/4*a,2)\n    if r == 43:\n        return round(r*math.pi/4*a,2)\n    if r == 44:\n        return round(r*math.pi/4*a,2)\n    if r == 45:\n        return round(r*math.pi/4*a,2)\n    if r == 46:\n        return round(r*math.pi/4*a,2)\n    if r == 47:\n        return round(r*math.pi/4*a,2)\n    if r == 48:\n        return round(r*math.pi/4*a,2)\n    if r == 49:\n        return round(r*math.pi/4*a,2)\n    if r == 50:\n        return round(r*math.pi/4*a,2)\n    if r == 51:\n        return round(r*math.pi/4*a,2)\n    if r == 52:\n        return round(r*math.pi/4*a,2)\n    if r == 53:\n        return round(r*math.pi/4*a,2)\n    if r == 54:\n        return round(r*math.pi/4*a,2)\n    if r == 55:\n        return round(r*math.pi/4*a,2)\n    if r == 56:\n        return round(r*math.pi/4*a,2)\n    if r == 57:\n        return round(r*math.pi/4*a,2)\n    if r == 58:\n        return round(r*math.pi/4*a,2)\n    if r == 59:\n        return round(r*math.pi/4*a,2)\n    if r == 60:\n        return round(r*math.pi/4*a,2)\n    if r == 61:\n        return round(r*math.pi/4*a,2)\n    if r == 62:\n        return round(r*math.pi/4*a,2)\n    if r == 63:\n        return round(r*math.pi/4*a,2)\n    if r == 64:\n        return round(r*math.pi/4*a,2)\n    if r == 65:\n        return round(r*math.pi/4*a,2)\n    if r == 66:\n        return round(r*math.pi/4*a,2)\n    if r == 67:\n        return round(r*math.pi/4*a,2)\n    if r == 68:\n        return round(r*math.pi/4*a,2)\n    if r == 69:\n        return round(r*math.pi/4*a,2)\n    if r == 70:\n        return round(r*math.pi/4*a,2)\n    if r == 71:\n        return round(r*math.pi/4*a,2)\n    if r == 72:\n        return round(r*math.pi/4*a,2)\n    if r == 73:\n        return round(r*math.pi/4*a,2)\n    if r == 74:\n        return round(r*math.pi/4*a,2)\n    if r == 75:\n        return round(r*math.pi/4*a,2)\n    if r == 76:\n        return round(r*math.pi/4*a,2)\n    if r == 77:\n        return round(r*math.pi/4*a,2)\n    if r == 78:\n        return round(r*math.pi/4*a,2)\n    if r == 79:\n        return round(r*math.pi/4*a,2)\n    if r == 80:\n        return round(r*math.pi/4*a,2)\n    if r == 81:\n        return round(r*math.pi/4*a,2)\n    if r == 82:\n        return round(r"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = math.degrees(math.atan(a/r))\n    if angle > 360:\n        return None\n    return angle\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r == 0) or (a < 0):\n        return None\n    if a == 90 or a == 180:\n        return math.pi*r**2\n    elif a == 0:\n        return 4*math.pi*r**2\n    elif a == 180:\n        return -(4*math.pi*r**2)\n    elif a == 270:\n        return 2*math.pi*r**2\n    elif a == 360:\n        return math.pi*r**2\n    else:\n        return -(4*math.pi*r**2)\n    #return None\ndef sector_area_of_polygon(polygon):\n    '''\n    This function takes the two vertices of a polygon and calculates the area.\n    '''\n    sector_area = 0\n    for i in range(len(polygon)):\n        sector_area = sector_area + sector_area_of_polygon(polygon[i])\n    return sector_area\ndef circle_area(r):\n    '''\n    This function takes the radius of a circle and calculates the area.\n    '''\n    return (4/3)*math.pi*r**3\ndef circle_area_of_polygon(polygon):\n    '''\n    This function takes a polygon and calculates the area.\n    '''\n    circle_area = 0\n    for i in range(len(polygon)):\n        circle_area = circle_area + circle_area_of_polygon(polygon[i])\n    return circle_area\ndef triangle_area(a,b,c):\n    '''\n    This function calculates the area of a triangle.\n    '''\n    return (math.sqrt(a**2 + b**2 + c**2))\ndef triangle_area_of_polygon(polygon):\n    '''\n    This function takes a polygon and calculates the area.\n    '''\n    triangle_area = 0\n    for i in range(len(polygon)):\n        triangle_area = triangle_area + triangle_area_of_polygon(polygon[i])\n    return triangle_area\ndef rectangle_area(a,b):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return (a*b)/2\ndef rectangle_area_of_polygon(polygon):\n    '''\n    This function takes a polygon and calculates the area.\n    '''\n    rectangle_area = 0\n    for i in range(len(polygon)):\n        rectangle_area = rectangle_area + rectangle_area_of_polygon(polygon[i])\n    return rectangle_area\ndef line_area(a,b):\n    '''\n    This function calculates the area of a line.\n    '''\n    return (a*b)/2\ndef line_area_of_polygon(polygon):\n    '''\n    This function takes a polygon and calculates the area.\n    '''\n    line_area = 0\n    for i in range(len(polygon)):\n        line_area = line_area + line_area_of_polygon(polygon[i])\n    return line_area\ndef parallelogram_area(a,b):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    return (a*b)/2\ndef parallelogram_area_of_polygon(polygon):\n    '''\n    This function takes a polygon and calculates the area.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_line(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_rectangle(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_circle(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_line_and_circle(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_line_and_rectangle(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_circle_and_line(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_circle_and_rectangle_and_line(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_circle_and_line_and_rectangle_and_circle(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_circle_and_rectangle_and_line_and_circle(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_rectangle_and_circle_and_line(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_area + parallelogram_area_of_polygon(polygon[i])\n    return parallelogram_area\ndef parallelogram_area_of_circle_and_rectangle_and_line_and_circle(polygon):\n    '''\n    This function calculates the area of a parallelogram.\n    '''\n    parallelogram_area = 0\n    for i in range(len(polygon)):\n        parallelogram_area = parallelogram_are"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    global R\n    global A\n    global sector_area_list\n    global sector_area_list_final\n    global sector_area_list_final2\n    global sector_area_list_final3\n    global sector_area_list_final4\n    global sector_area_list_final5\n    global sector_area_list_final6\n    global sector_area_list_final7\n    global sector_area_list_final8\n    global sector_area_list_final9\n    global sector_area_list_final10\n    global sector_area_list_final11\n    global sector_area_list_final12\n    global sector_area_list_final13\n    global sector_area_list_final14\n    global sector_area_list_final15\n    global sector_area_list_final16\n    global sector_area_list_final17\n    global sector_area_list_final18\n    global sector_area_list_final19\n    global sector_area_list_final20\n    global sector_area_list_final21\n    global sector_area_list_final22\n    global sector_area_list_final23\n    global sector_area_list_final24\n    global sector_area_list_final25\n    global sector_area_list_final26\n    global sector_area_list_final27\n    global sector_area_list_final28\n    global sector_area_list_final29\n    global sector_area_list_final30\n    global sector_area_list_final31\n    global sector_area_list_final32\n    global sector_area_list_final33\n    global sector_area_list_final34\n    global sector_area_list_final35\n    global sector_area_list_final36\n    global sector_area_list_final37\n    global sector_area_list_final38\n    global sector_area_list_final39\n    global sector_area_list_final40\n    global sector_area_list_final41\n    global sector_area_list_final42\n    global sector_area_list_final43\n    global sector_area_list_final44\n    global sector_area_list_final45\n    global sector_area_list_final46\n    global sector_area_list_final47\n    global sector_area_list_final48\n    global sector_area_list_final49\n    global sector_area_list_final50\n    global sector_area_list_final51\n    global sector_area_list_final52\n    global sector_area_list_final53\n    global sector_area_list_final54\n    global sector_area_list_final55\n    global sector_area_list_final56\n    global sector_area_list_final57\n    global sector_area_list_final58\n    global sector_area_list_final59\n    global sector_area_list_final60\n    global sector_area_list_final61\n    global sector_area_list_final62\n    global sector_area_list_final63\n    global sector_area_list_final64\n    global sector_area_list_final65\n    global sector_area_list_final66\n    global sector_area_list_final67\n    global sector_area_list_final68\n    global sector_area_list_final69\n    global sector_area_list_final70\n    global sector_area_list_final71\n    global sector_area_list_final72\n    global sector_area_list_final73\n    global sector_area_list_final74\n    global sector_area_list_final75\n    global sector_area_list_final76\n    global sector_area_list_final77\n    global sector_area_list_final78\n    global sector_area_list_final79\n    global sector_area_list_final80\n    global sector_area_list_final81\n    global sector_area_list_final82\n    global sector_area_list_final83\n    global sector_area_list_final84\n    global sector_area_list_final85\n    global sector_area_list_final86\n    global sector_area_list_final87\n    global sector_area_list_final88\n    global sector_area_list_final89\n    global sector_area_list_final90\n    global sector_area_list_final91\n    global sector_area_list_final92\n    global sector_area_list_final93\n    global sector_area_list_final94\n    global sector_area_list_final95\n    global sector_area_list_final96\n    global sector_area_list_final97\n    global sector_area_list_final98\n    global sector_area_list_final99\n    global sector_area_list_final100\n    global sector_area_list_final101\n    global sector_area_list_final102\n    global sector_area_list_final103\n    global sector_area_list_final104\n    global sector_area_list_final105\n    global sector_area_list_final106\n    global sector_area_list_final107\n    global sector_area_list_final108\n    global sector_area_list_final109\n    global sector_area_list_final110\n    global sector_area_list_final111\n    global sector_area_list_final112\n    global sector_area_list_final113\n    global sector_area_list_final114\n    global sector_area_list_final115\n    global sector_area_list_final116\n    global sector_area_list_final117\n    global sector_area_list_final118\n    global sector_area_list_final119\n    global sector_area_list_final120\n    global sector_area_list_final121\n    global sector_area_list_final122\n    global sector_area_list_final123\n    global sector_area_list_final124\n    global sector_area_list_final125\n    global sector_area_list_final126\n    global sector_area_list_final127\n    global sector_area_list_final128\n    global sector_area_list_final129\n    global sector_area_list_final130\n    global sector_area_list_final131\n    global sector_area_list_final132\n    global sector_area_list_final133\n    global sector_area_list_final134\n    global sector_area_list_final135\n    global sector_area_list_final136\n    global sector_area_list_final137\n    global sector_area_list_final138\n    global sector_area_list_final139\n    global sector_area_list_final140\n    global sector_area_list_final141\n    global sector_area_list_final142\n    global sector_area_list_final143\n    global sector_area_list_final144\n    global sector_area_list_final145\n    global sector_area_list_final146\n    global sector_area_list_final147\n    global sector_area_list_final148\n    global sector_area_list_final149\n    global sector_area_list_final150\n    global sector_area_list_final151\n    global sector_area_list_final152\n    global sector_area_list_final153\n    global sector_area_list_final154\n    global sector_area_list_final155\n    global sector_area_list_final156\n    global sector_area_list_final157\n    global sector_area_list_final158\n    global sector_area_list_final159\n    global sector_area_list_final160\n    global sector_area_list_final161\n    global sector_area_list_final162\n    global sector_area_list_final163\n    global sector_area_list_final164\n    global sector_area_list_final165\n    global sector_area_list_final166\n    global sector_area_list_final167\n    global sector_area_list_final168\n    global sector_area_list_final169\n    global sector_area_list_final170\n    global sector_area_list_final171\n    global sector_area_list_final172\n    global sector_area_list_final173\n    global sector_area_list_final174\n    global sector_area_list_final175\n    global sector_area_list_final176\n    global sector_area_list_final177\n    global sector_area_list_final178\n    global sector_area_list_final179\n    global sector_area_list"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\ndef angle(r,a):\n    '''\n    This function takes two angles and returns the angle between them.\n    '''\n    pass\ndef orbit_radius(r,a):\n    '''\n    This function takes two angles and returns the radius of the orbit.\n    '''\n    pass\ndef orbit_angle(r,a):\n    '''\n    This function takes two angles and returns the angle between them.\n    '''\n    pass\ndef orbit_planet(r,a):\n    '''\n    This function takes two angles and returns the planet.\n    '''\n    pass\ndef orbit_name(r,a):\n    '''\n    This function takes two angles and returns the name of the planet.\n    '''\n    pass\ndef orbit_type(r,a):\n    '''\n    This function takes two angles and returns the type of the planet.\n    '''\n    pass\ndef orbit_eccentricity(r,a):\n    '''\n    This function takes two angles and returns the eccentricity of the planet.\n    '''\n    pass\ndef orbit_period(r,a):\n    '''\n    This function takes two angles and returns the period of the planet.\n    '''\n    pass\ndef orbit_period_till(r,a):\n    '''\n    This function takes two angles and returns the period until the planet.\n    '''\n    pass\ndef orbit_stagger(r,a):\n    '''\n    This function takes two angles and returns the time it takes the orbit to get to the planet.\n    '''\n    pass\ndef orbit_hangle(r,a):\n    '''\n    This function takes two angles and returns the hour angle of the orbit.\n    '''\n    pass\ndef orbit_mm(r,a):\n    '''\n    This function takes two angles and returns the minute of the orbit.\n    '''\n    pass\ndef orbit_second(r,a):\n    '''\n    This function takes two angles and returns the second of the orbit.\n    '''\n    pass\ndef orbit_year(r,a):\n    '''\n    This function takes two angles and returns the year of the orbit.\n    '''\n    pass\ndef orbit_year_i(r,a):\n    '''\n    This function takes two angles and returns the year of the orbit.\n    '''\n    pass\ndef orbit_hour(r,a):\n    '''\n    This function takes two angles and returns the hour of the orbit.\n    '''\n    pass\ndef orbit_minute(r,a):\n    '''\n    This function takes two angles and returns the minute of the orbit.\n    '''\n    pass\ndef orbit_second_till(r,a):\n    '''\n    This function takes two angles and returns the period until the orbit.\n    '''\n    pass\ndef orbit_period_in_month(r,a):\n    '''\n    This function takes two angles and returns the period in the month.\n    '''\n    pass\ndef orbit_second_in_month(r,a):\n    '''\n    This function takes two angles and returns the second of the orbit.\n    '''\n    pass\ndef orbit_jday(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_jul(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_jul_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_march(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_march_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_july(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_july_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_aug(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_aug_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_sept(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_sept_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_oct(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_oct_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_nove(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_nove_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_sept_nov(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_sept_nov_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_oct_nov(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_oct_nov_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_november(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_november_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_december(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_december_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_january(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_january_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_february(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_february_sat(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_march(r,a):\n    '''\n    This function takes two angles and returns the jday of the orbit.\n    '''\n    pass\ndef orbit_jday_march_sat(r,a):\n    '''\n    This function takes two angles and returns the jday o"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r <= 0.0 or a <= 0.0 or r > 1.0 or a > math.pi:\n        return None\n    elif math.isclose(r,0.0,abs_tol=1e-14):\n        return 0.0\n    elif math.isclose(a,0.0,abs_tol=1e-14):\n        return None\n    else:\n        return a * math.cos(a * math.pi / 360.0) * math.sin(a * math.pi / 360.0)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<r1+r2:\n        print(\"Cannot calculate the area of a sector with r<r1+r2\")\n        return None\n    if r<r3+r4:\n        print(\"Cannot calculate the area of a sector with r<r3+r4\")\n        return None\n    \n    # use formula\n    delta = math.pi * 2 * r*r * math.sin(a)\n    #math.sin is a trigonometric function\n    #rad = math.pi / 180 * r\n    #if delta<rad:\n    #    print(\"Cannot calculate the area of a sector with delta<rad\")\n    #    return None\n    \n    #return\n    #delta = math.pi * 2 * r*r * math.sin(a)\n    #delta = math.pi * 2 * r*r * math.sin(a)\n    #return\n    \n    return delta\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * (math.pi * r * r)\ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * (sector * r * r * (math.pi * r * r))\ndef sector_section_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * (sector * (sector * r * r))\ndef sector_section_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * (sector * (sector * r * r))\ndef sector_arc_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * (sector * math.pi * r * r)\ndef sector_arc_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * (sector * (sector * r * r))\ndef sector_arc_section_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * sector * (sector * (sector * r * r))\ndef sector_arc_section_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * sector * sector * (sector * (sector * r * r))\ndef sector_arc_arc_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * sector * sector * (sector * sector * r * r)\ndef sector_arc_arc_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * (sector * r * r)\ndef sector_arc_arc_section_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector\ndef sector_arc_arc_section_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector\ndef sector_circ_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * (sector * r * r * (math.pi * r * r))\ndef sector_circ_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 2*math.pi:\n        return None\n    if r < 1.0:\n        return None\n    if a < 0.0:\n        return None\n    sector = int(math.ceil(math.tan(a)))\n    return sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector * sector "
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Initialize variables\n    if r <= 0:\n        return None\n    if a <= 0:\n        return None\n    if a >= 360:\n        return None\n    \n    # Calculate the area\n    return math.acos(1/math.cos(math.radians(a))) * (r * r * math.sin(math.radians(a)))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    k = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    L = len(X)\n    L = len(Y)\n    L = len(Z)\n    \n    # Initialize the table\n    table = [[0 for col in range(L + 1)] for row in range(L + 1)]\n    \n    # Fill the table with values of the first row and second column\n    for i in range(L + 1):\n        table[i][0] = i\n    \n    for j in range(L + 1):\n        table[j][j] = j\n    \n    # Traverse through the table to find the first longest common subsequence\n    for k in range(L - 1):\n        for i in range(L):\n            j = table[i][k]\n            k = table[j][k]\n            k += 1\n            # If the current character is not found in the other string, add it to the table\n            if i < L and j < L and table[i + 1][j]!= k - 1:\n                table[i + 1][j + 1] = k - 1\n            if i < L and j < L and table[i + 1][j + 1]!= k - 1:\n                table[i + 1][j + 1] = k - 1\n                \n    return table[L][L]\n    \ndef lcs_of_four(X, Y, Z, X_2, Y_2, Z_2):\n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    L = len(X)\n    L = len(Y)\n    L = len(Z)\n    L = len(X_2)\n    L = len(Y_2)\n    L = len(Z_2)\n    \n    # Initialize the table\n    table = [[0 for col in range(L + 1)] for row in range(L + 1)]\n    \n    # Fill the table with values of the first row and second column\n    for i in range(L + 1):\n        table[i][0] = i\n    \n    for j in range(L + 1):\n        table[j][j] = j\n    \n    # Traverse through the table to find the first longest common subsequence\n    for k in range(L - 1):\n        for i in range(L):\n            j = table[i][k]\n            k = table[j][k]\n            k += 1\n            # If the current character is not found in the other string, add it to the table\n            if i < L and j < L and table[i + 1][j]!= k - 1:\n                table[i + 1][j + 1] = k - 1\n            if i < L and j < L and table[i + 1][j + 1]!= k - 1:\n                table[i + 1][j + 1] = k - 1\n                \n    # Traverse through the table to find the second longest common subsequence\n    for m in range(L - 1):\n        for i in range(L):\n            j = table[m][i]\n            k = table[m][i + 1]\n            m = table[m][k]\n            k = table[m + 1][k]\n            \n            # If the current character is not found in the other string, add it to the table\n            if i < L and j < L and table[m + 1][j]!= k - 1:\n                table[m + 1][j + 1] = k - 1\n            if i < L and j < L and table[m + 1][j + 1]!= k - 1:\n                table[m + 1][j + 1] = k - 1\n                \n    # Traverse through the table to find the third longest common subsequence\n    for n in range(L - 1):\n        for i in range(L):\n            j = table[i][n]\n            k = table[i + 1][n]\n            \n            # If the current character is not found in the other string, add it to the table\n            if i < L and j < L and table[i + 1][j]!= k - 1:\n                table[i + 1][j + 1] = k - 1\n            if i < L and j < L and table[i + 1][j + 1]!= k - 1:\n                table[i + 1][j + 1] = k - 1\n                \n    # Traverse through the table to find the forth longest common subsequence\n    for o in range(L - 1):\n        for i in range(L):\n            j = table[o][i]\n            k = table[o + 1][i]\n            \n            # If the current character is not found in the other string, add it to the table\n            if i < L and j < L and table[o + 1][j]!= k - 1:\n                table[o + 1][j + 1] = k - 1\n            if i < L and j < L and table[o + 1][j + 1]!= k - 1:\n                table[o + 1][j + 1] = k - 1\n                \n    # Initialize the table with the first character as 0\n    for m in range(L - 1):\n        for i in range(L):\n            j = table[m][i]\n            k = table[m + 1][i]\n            \n            # If the current character is not found in the other string, add it to the table\n            if j < L and table[m][j]!= k - 1:\n                table[m][j] = k - 1\n            if j < L and table[m + 1][j]!= k - 1:\n                table[m + 1][j] = k - 1\n            if k < L and table[m + 1][j + 1]!= k - 1:\n                table[m + 1][j + 1] = k - 1\n                \n    # Return the longest common subsequence as a string\n    return table[L][L]\n    \ndef lcs_of_six(X, Y, Z, X_2, Y_2, Z_2):\n    '''\n    Write a function to find the longest common subsequence for the given six string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-six-strings/\n    '''\n    L = len(X)\n    L = len(Y)\n    L = len(Z)\n    L = len(X_2)\n    L = len(Y_2)\n    L = len(Z_2)\n    \n    # Initialize the table\n    table = [[0 for col in range(L + 1)] for row in range(L + 1)]\n    \n    # Fill the table with values of the first row and second column\n    for i in range(L + 1):\n        table[i][0] = i\n    \n    for j in range(L + 1):\n        table[j][j] = j\n    \n    # Traverse through the table to find the first longest common subsequence\n    for k in range(L - 1):\n        for i in range(L):\n            j = table[i][k]\n            k = table[j][k]\n            k += 1\n            # If the current character is not found in the other string, add it to the table\n            if i < L and j < L and table[i + 1][j]!= k - 1:\n                table[i + 1][j + 1] = k - 1\n            if i < L and j < L and table[i + 1][j + 1]!= k - 1:\n                table[i + 1][j + 1] = k - 1\n                \n    # Traverse through the table to find the second longest common subsequence\n    for m in range(L - 1):\n        for i in range(L):\n            j = table[m][i]\n            k = table[m + 1][i]\n            \n            # If the current character is not found in the other string, add it to the table\n            if i < L and j < L and table[m + 1][j]!= k - 1:\n                table[m + 1][j + 1] = k - 1\n            if i < L and j < L and table[m + 1][j + 1]!= k - 1:\n                table[m + 1][j + 1] = k - 1\n                \n    # Traverse through the table to find the thir"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(str1, str2, str3): \n        m = len(str1) \n        n = len(str2) \n        dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    '''\n    EXAMPLES:\n        Input :\n            X = [\"a\", \"b\", \"c\"]\n            Y = [\"a\", \"c\", \"a\"]\n            Z = [\"a\", \"c\", \"b\"]\n        Output :\n            \"a\"\n            \"a\"\n            \"a\"\n            \"a\"\n    '''\n    # if there is one or more zeros, then return that zeros\n    if len(Z) == 0:\n        return Z\n    # if there is only one character and the other characters are different, then return that char\n    elif len(Z) == 1:\n        return Z[0]\n    # if there are two characters and the other characters are the same, then return that char\n    elif len(Z) == 2:\n        return Z[0]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    L = len(X)\n    R = len(Y)\n    T = len(Z)\n    \n    # Create a two-dimensional array to store the lcs\n    L_L = [[0]*(T+1) for i in range(L+1)]\n    R_R = [[0]*(T+1) for i in range(R+1)]\n    \n    # Initialize L_L, R_R as the initial values \n    for i in range(1, T+1):\n        for j in range(1, R+1):\n            if X[i-1] == Z[j-1]:\n                L_L[i][j] = L_L[i-1][j-1] + 1\n            else:\n                L_L[i][j] = max(L_L[i-1][j], L_L[i][j-1])\n        \n    # Initialize R_R, R_L as the initial values\n    for i in range(1, L+1):\n        for j in range(1, T+1):\n            if Y[i-1] == Z[j-1]:\n                R_R[i][j] = R_R[i-1][j-1] + 1\n            else:\n                R_R[i][j] = max(R_R[i-1][j], R_R[i][j-1])\n    \n    # Construct L_L[], R_R[], R_L[], and return L_L, R_R\n    for i in range(1, T+1):\n        for j in range(1, L+1):\n            if X[i-1] == Z[j-1]:\n                L_L[i][j] = max(L_L[i-1][j], L_L[i][j-1])\n            else:\n                L_L[i][j] = max(L_L[i-1][j], R_R[i][j-1])\n        \n    return L_L, R_R\n    "
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z): \n        return 0\n    \n    if len(X) == len(Y) and len(X) == len(Z): \n        return len(X)\n    \n    if len(X) == 0 or len(Z) == 0: \n        return 0\n    \n    x, y, z = 0, 0, 0\n    \n    while(x < len(X) and y < len(Y) and z < len(Z)): \n        if X[x] == Y[y] and Z[z] == X[x]: \n            x += 1\n            y += 1\n            z += 1\n        elif X[x] == Z[z]: \n            x += 1\n            z += 1\n        elif Y[y] == X[x]: \n            y += 1\n        elif Z[z] == X[x]: \n            z += 1\n            \n    return x + y + z\n    "
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a lcs\n    lcs = [[None for i in range(len(Z)+1)] for j in range(len(X)+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Write your code here.\n    n = len(X)\n    m = len(Y)\n    \n    # Initialize matrix.\n    T = [[0 for i in range(n + 1)] for i in range(m + 1)]\n    \n    # Find the max value of the matrix.\n    T[0][0] = 0\n    for i in range(n):\n        T[0][i + 1] = 0\n        \n    for i in range(m):\n        T[i + 1][0] = 0\n        for j in range(n):\n            T[i + 1][j + 1] = 0\n            \n            # Check if two letters are identical.\n            if X[j] == Y[i]:\n                T[i + 1][j + 1] = T[i + 1][j] + 1\n            elif X[j] == Z[i]:\n                T[i + 1][j + 1] = T[i + 1][j] + 1\n            else:\n                T[i + 1][j + 1] = max(T[i + 1][j], T[i + 1][j + 1])\n    \n    return T[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs = ''\n    i = 0\n    j = 0\n    k = 0\n    length_X = len(X)\n    length_Y = len(Y)\n    length_Z = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    i = j = 0\n    n = len(X)\n    m = len(Y)\n    m = len(Z)\n    d = [[0] * m for _ in range(n)]\n    m = [[0] * (m + 1) for _ in range(n)]\n    for i in range(n):\n        d[i][0] = i\n    for i in range(m):\n        d[0][i] = i\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.replace(' ',' ')\n    str1=str1.split(' ')\n    str1=[str1[i].capitalize() for i in range(len(str1))]\n    str1=' '.join(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Start with the first string, and count words until the end of the first string\n    i = 0\n    while i < len(str1) :\n        if str1[i].isupper() :\n            str1 = str1[0:i]+str1[i].upper()+str1[i+1:]\n        i+=1\n    # Return the string\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    for word in str1.split():\n        if word[0].isupper():\n            print(word.capitalize(), end=\" \")\n        else:\n            print(word, end=\" \")\n    print()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str=''\n    for word in str1.split():\n        if word[0].isupper():\n            new_str+=word+' '\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('  ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('   ','')\n    str1 = str1.replace('    ','')\n    str1 = str1.replace('    '"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.split(r'\\W+', str1)\n    result = []\n    for i in words:\n        if i!= '':\n            result.append(i.capitalize())\n    return \" \".join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = str1.split()\n    final_list = []\n    for word in word_list:\n        if word[0] =='':\n            final_list.append(' ')\n        elif word[0]!='' and word[0]!= '\\t':\n            final_list.append(word[0].upper())\n            final_list.append(' ')\n        else:\n            continue\n    return ''.join(final_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    n = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            n += 1\n        if str1[i] =='':\n            str1 = str1[:i] + str1[i].upper() + str1[i+1:]\n            n += 1\n    return str1, n\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.lower()\n    words=str1.split(\" \")\n    for i in range(len(words)):\n        for j in range(len(words[i])):\n            if words[i][j].isupper():\n                words[i][j]=\" \"\n            else:\n                words[i][j]=\" \"\n    newstr=\"\".join(words)\n    return newstr\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    return re.sub(r'[^a-zA-Z]','',str1).upper()\n    \ndef frequency_words(str1):\n    '''\n    Write a function to count the frequency of words in a given string.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    print(dict)\n    \ndef frequency_words_numbers(str1):\n    '''\n    Write a function to count the frequency of words in a given string.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef clean_words_numbers(str1):\n    '''\n    Write a function to remove any number from the string.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef word_count(str1):\n    '''\n    Write a function to count the words in a given string.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef count_capital_words(str1):\n    '''\n    Write a function to count the number of capital words in a given string.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef count_spaces(str1):\n    '''\n    Write a function to count the number of spaces in a given string.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef count_words_number(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef is_capital(str1):\n    '''\n    Write a function to check if a given string is a capital word.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \n    for i in dict.items():\n        print(i,end=' ')\n    print()\n    \ndef lower_case(str1):\n    '''\n    Write a function to change all letters in a given string to lowercase.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef swap_case(str1):\n    '''\n    Write a function to change all letters in a given string to upper and lowercase.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef swap_uppercase(str1):\n    '''\n    Write a function to change all letters in a given string to upper and lowercase.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef swap_lowercase(str1):\n    '''\n    Write a function to change all letters in a given string to upper and lowercase.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef swap_numbers(str1):\n    '''\n    Write a function to change all letters in a given string to upper and lowercase.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef swap_words(str1):\n    '''\n    Write a function to change all letters in a given string to upper and lowercase.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef replace_word(str1):\n    '''\n    Write a function to replace all letters in a given string to upper and lowercase.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef remove_words(str1):\n    '''\n    Write a function to remove all letters from a given string.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef replace_letters(str1):\n    '''\n    Write a function to replace all letters in a given string with capital letters.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    \n    for i in dict.values():\n        print(i,end=' ')\n    print()\n    \ndef replace_letters_numbers(str1):\n    '''\n    Write a function to replace all letters in a given string with numbers.\n    '''\n    \n    lst = list(str1)\n    dict = {}\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    count = 0\n    for x in nums_str:\n        if x.isdigit():\n            count += 1\n    nums_str.sort()\n    if count == 0:\n        return nums_str\n    if count == 1:\n        return nums_str[0] + \"0\"\n    if count == 2:\n        return nums_str[0] + \"0\" + nums_str[1]\n    if count == 3:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\"\n    if count == 4:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\" + nums_str[2]\n    if count == 5:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\" + nums_str[2] + \"0\"\n    if count == 6:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\" + nums_str[2] + \"0\" + nums_str[3]\n    if count == 7:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\" + nums_str[2] + \"0\" + nums_str[3] + \"0\" + nums_str[4]\n    if count == 8:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\" + nums_str[2] + \"0\" + nums_str[3] + \"0\" + nums_str[4] + \"0\" + nums_str[5]\n    if count == 9:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\" + nums_str[2] + \"0\" + nums_str[3] + \"0\" + nums_str[4] + \"0\" + nums_str[5] + \"0\" + nums_str[6]\n    if count == 10:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\" + nums_str[2] + \"0\" + nums_str[3] + \"0\" + nums_str[4] + \"0\" + nums_str[5] + \"0\" + nums_str[6] + \"0\" + nums_str[7]\n    if count == 11:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\" + nums_str[2] + \"0\" + nums_str[3] + \"0\" + nums_str[4] + \"0\" + nums_str[5] + \"0\" + nums_str[6] + \"0\" + nums_str[7] + \"0\" + nums_str[8]\n    if count == 12:\n        return nums_str[0] + \"0\" + nums_str[1] + \"0\" + nums_str[2] + \"0\" + nums_str[3] + \"0\" + nums_str[4] + \"0\" + nums_str[5] + \"0\" + nums_str[6] + \"0\" + nums_str[7] + \"0\" + nums_str[8] + \"0\" + nums_str[9]\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    length = len(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # Note: your code should be 1 line, so you do not need to look at the function call or output\n    \n    sort_num_str = sorted(nums_str)\n    return sort_num_st"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(i+1, len(nums_str)):\n            if nums_str[i] > nums_str[j]:\n                nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        if type(num) == float:\n            nums.append(float(num))\n        elif type(num) == int:\n            nums.append(int(num))\n        else:\n            nums.append(num)\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #print(type(nums_str))\n    return sorted(nums_str, key = lambda x: x.isdigit())\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if len(nums_str) == 0:\n        return None\n    else:\n        i = 0\n        while i < len(nums_str):\n            temp = nums_str[i]\n            j = i + 1\n            while j < len(nums_str):\n                if nums_str[j] < nums_str[i]:\n                    temp, nums_str[i] = nums_str[i], temp\n                    j = j + 1\n                else:\n                    j = j + 1\n            i = i + 1\n        return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in range(len(nums_str)):\n        nums.append(int(nums_str[i]))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace(',',''))\n    nums_str.sort(key=lambda x: x.replace(' ', ''))\n    nums_str.sort(key=lambda x: x.replace(',',''))\n    nums_str.sort(key=lambda x: x.replace('-',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace(':',''))\n    nums_str.sort(key=lambda x: x.replace('/',''))\n    nums_str.sort(key=lambda x: x.replace('+',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('-',''))\n    nums_str.sort(key=lambda x: x.replace('/',''))\n    nums_str.sort(key=lambda x: x.replace('+',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('-',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace(',',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace('-',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace('/',''))\n    nums_str.sort(key=lambda x: x.replace('+',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('-',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace(',',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace('/',''))\n    nums_str.sort(key=lambda x: x.replace('+',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('-',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace(':',''))\n    nums_str.sort(key=lambda x: x.replace('/',''))\n    nums_str.sort(key=lambda x: x.replace('+',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('-',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace(',',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace('/',''))\n    nums_str.sort(key=lambda x: x.replace('+',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('-',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace(',',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace('/',''))\n    nums_str.sort(key=lambda x: x.replace('+',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('*',''))\n    nums_str.sort(key=lambda x: x.replace('(',''))\n    nums_str.sort(key=lambda x: x.replace(')',''))\n    nums_str.sort(key=lambda x: x.replace('-',''))\n    nums_str.sort(key=lambda x: x.replace('.',''))\n    nums_str.sort(key=lambda x: x.replace(':',''))\n    nums_str.sort(key=lambda x: x.replace('/',''))\n    nums_str.sort(key=lambda x: x.replace('+',''))\n    nums_str.sort(key=lambd"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # YOUR CODE HERE\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list) > 0:\n        test_list = test_list + test_tup\n    else:\n        test_list = test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #write your code here\n    test_list = test_list + test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i == 0): return True\n    \n    if (arr[i] < arr[i // 2]): return check_min_heap_helper(arr, i // 2)\n    return check_min_heap_helper(arr, i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        return check_min_heap_helper(arr, (i-1)/2) and check_min_heap_helper(arr, (i-1)/2 + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = len(arr)\n    if l == 1:\n        return True\n    if i < l:\n        if arr[i] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    elif arr[i] > arr[i + 1]:\n        return check_min_heap_helper(arr, i + 1)\n    else:\n        return check_min_heap_helper(arr, i + 1) or check_min_heap_helper(arr, i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    return check_min_heap_helper(arr[1:-1], i) or check_min_heap_helper(arr[:-2], i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return True\n    elif arr[i] > arr[i+1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) - 1 and arr[i] < arr[i + 1]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    elif arr[i] < arr[(i + 1) // 2]:\n        return check_min_heap_helper(arr, (i * 2) + 1)\n    elif arr[i] < arr[(i + 1) // 2]:\n        return check_min_heap_helper(arr, (i * 2) + 2)\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    return arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2] and arr[i] < arr[2*i+3] and arr[i] < arr[2*i+4]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[(i - 1) // 2]:\n        return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #initialize jacobsthal number\n    j = 1\n    for i in range(2, n):\n        #compute the next jacobsthal number using the previous jacobsthal number\n        j = j * (i+1)\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return (int(n) - 1) ** 2\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # a = {'1': 1, '3': 9, '5': 21, '7': 221, '9': 879, '11': 299, '13': 447, '17': 979, '19': 1391, '21': 1721, '23': 4963, '25': 8795, '27': 6093, '29': 3707, '31': 6406, '33': 2571, '35': 1183, '37': 1614, '39': 4834, '41': 1523, '43': 4114, '45': 2150, '47': 3071, '49': 5061, '51': 6143, '53': 4985, '55': 6497, '57': 7241, '59': 473, '61': 1401, '63': 9251, '65': 14669, '67': 14397, '69': 8037, '71': 4943, '73': 9551, '75': 4869, '77': 3814, '79': 5986, '81': 4821, '83': 6707, '85': 10156, '87': 4761, '89': 1726, '91': 4182, '93': 1618, '95': 3121, '97': 4557, '99': 6299, '101': 10237, '103': 4877, '105': 4963, '107': 9699, '109': 6985, '111': 5918, '113': 6339, '115': 12681, '117': 2335, '119': 4673, '121': 1633, '123': 3896, '125': 6694, '127': 4579, '129': 3095, '131': 6204, '133': 3305, '135': 5805, '137': 7981, '139': 3308, '141': 9279, '143': 6401, '145': 2911, '147': 4702, '149': 6669, '151': 6909, '153': 4619, '155': 4579, '157': 2867, '159': 4858, '161': 5822, '163': 4888, '165': 6991, '167': 1532, '169': 7714, '171': 3866, '173': 9561, '175': 9608, '177': 6606, '179': 4416, '181': 4727, '183': 6763, '185': 1358, '187': 1294, '189': 3898, '191': 5710, '193': 6026, '195': 4677, '197': 3200, '199': 5217, '201': 3115, '203': 4164, '205': 4149, '207': 7099, '209': 4267, '211': 7224, '213': 9229, '215': 4375, '217': 5753, '219': 9243, '221': 5822, '223': 1723, '225': 948, '227': 3251, '229': 2042, '231': 4707, '233': 3121, '235': 3155, '237': 4131, '239': 4457, '241': 1760, '243': 4241, '245': 9121, '247': 4757, '249': 1416, '251': 6289, '253': 2387, '255': 2729, '257': 4145, '259': 9309, '261': 5711, '263': 9699, '265': 10463, '267': 4767, '269': 1841, '271': 4958, '273': 4325, '275': 7529, '277': 9781, '279': 5401, '281': 6685, '283': 2887, '285': 7462, '287': 8931, '289': 7026, '291': 833, '293': 2492, '295': 2969, '297': 6685, '299': 3149, '301': 6069, '303': 6667, '305': 5694, '307': 9927, '309': 8663, '311': 848, '313': 2653, '315': 5989, '317': 1278, '319': 9707, '321': 3716, '323': 9402, '325': 3346, '327': 4709, '329': 3595, '331': 2411, '333': 4510, '335': 9259, '337': 4608, '339': 2631, '341': 2971, '343': 5992, '345': 5049, '347': 1799, '349': 6292, '351': 3740, '353': 4148, '355': 1542, '357': 4522, '359': 5558, '361': 6677, '363': 2701, '365': 4415, '367': 5249, '369': 1245, '371': 1753, '373': 9648, '375': 4712, '377': 2084, '379': 3299, '381': 5259, '383': 4378, '385': 7496, '387': 1818, '389': 6139, '391': 4221, '393': 3224, '395': 1389, '397': 3408, '399': 5275, '401': 2650, '403': 8277, '405': 7113, '407': 5561, '409': 6886, '411': 6168, '413': 5524, '415': 7656, '417': 7779, '419': 7052, '421': 4910, '423': 5609, '425': 3521, '427': 1278, '429': 2031, '431': 7838, '433': 6361, '435': 1388, '437': 5055, '439': 3248, '441': 3297, '443': 6646, '445': 2562, '447': 9308, '449': 1167, '451': 5918, '453': 4378, '455': 5557, '457': 8533, '459': 4683, '461': 9551, '463': 5772, '465': 7091, '467': 4525, '469': 4251, '471': 1841, '473': 5992, '475': 8605, '477': 6471, '479': 3171, '481': 8493, '483': 5052, '485': 3105, '487': 1671, '489': 8511, '491': 2766, '493': 6949, '495': 5568, '497': 7691, '499': 5568, '501': 6363, '503': 5597, '505': 9392, '507': 8719, '509': 5529, '511': 4722, '513': 6945, '515': 1055, '517': 4139, '519': 8706, '521': 2904, '523': 6237, '525': 3799, '526': 9588, '527': 5633, '528': 7492, '529': 8237, '531': 1089, '533': 4149, '535': 3611, '537': 4493, '538': 9122, '539': 5724, '541': 582, '543': 2579, '545': 3343, '547': 2103, '549': 1149, '551': 8832, '553': 3649, '555': 1682, '557': 3288, '559': 5913, '561': 6561, '563': 8695, '565': 3733, '567': 1044, '569': 1113, '571': 4537, '573': 9181, '575': 4669, '577': 4426, '579': 1866, '581': 3373, '583': 9833, '585': 1087, '587': 1084, '589': 2595, '591': 6647, '593': 4667, '595': 6095, '597': 4571, '599': 2153, '601': 3657, '603': 9651, '605': 2764, '607': 7383, '609': 9505, '611': 1755, '613': 4641, '615': 5919, '617': 5411, '619': 4981, '621': 3187, '623': 2934, '625': 9093, '627': 3249, '629': 2123, '631': 7836, '633': 8860, '635': 5424, '637'"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = 0\n    for i in range(1, n + 1):\n        num += i * (i + 1) // 2\n    return num\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = str(n)\n    if n == '0':\n        return int(n)\n    elif n == '1':\n        return int(n)\n    elif n == '2':\n        return int(n)\n    elif n == '3':\n        return int(n)\n    elif n == '4':\n        return int(n)\n    elif n == '5':\n        return int(n)\n    elif n == '6':\n        return int(n)\n    elif n == '7':\n        return int(n)\n    elif n == '8':\n        return int(n)\n    elif n == '9':\n        return int(n)\n    elif n == '10':\n        return int(n)\n    elif n == '11':\n        return int(n)\n    elif n == '12':\n        return int(n)\n    elif n == '13':\n        return int(n)\n    elif n == '14':\n        return int(n)\n    elif n == '15':\n        return int(n)\n    elif n == '16':\n        return int(n)\n    elif n == '17':\n        return int(n)\n    elif n == '18':\n        return int(n)\n    elif n == '19':\n        return int(n)\n    elif n == '20':\n        return int(n)\n    elif n == '21':\n        return int(n)\n    elif n == '22':\n        return int(n)\n    elif n == '23':\n        return int(n)\n    elif n == '24':\n        return int(n)\n    elif n == '25':\n        return int(n)\n    elif n == '26':\n        return int(n)\n    elif n == '27':\n        return int(n)\n    elif n == '28':\n        return int(n)\n    elif n == '29':\n        return int(n)\n    elif n == '30':\n        return int(n)\n    elif n == '31':\n        return int(n)\n    elif n == '32':\n        return int(n)\n    elif n == '33':\n        return int(n)\n    elif n == '34':\n        return int(n)\n    elif n == '35':\n        return int(n)\n    elif n == '36':\n        return int(n)\n    elif n == '37':\n        return int(n)\n    elif n == '38':\n        return int(n)\n    elif n == '39':\n        return int(n)\n    elif n == '40':\n        return int(n)\n    elif n == '41':\n        return int(n)\n    elif n == '42':\n        return int(n)\n    elif n == '43':\n        return int(n)\n    elif n == '44':\n        return int(n)\n    elif n == '45':\n        return int(n)\n    elif n == '46':\n        return int(n)\n    elif n == '47':\n        return int(n)\n    elif n == '48':\n        return int(n)\n    elif n == '49':\n        return int(n)\n    elif n == '50':\n        return int(n)\n    elif n == '51':\n        return int(n)\n    elif n == '52':\n        return int(n)\n    elif n == '53':\n        return int(n)\n    elif n == '54':\n        return int(n)\n    elif n == '55':\n        return int(n)\n    elif n == '56':\n        return int(n)\n    elif n == '57':\n        return int(n)\n    elif n == '58':\n        return int(n)\n    elif n == '59':\n        return int(n)\n    elif n == '60':\n        return int(n)\n    elif n == '61':\n        return int(n)\n    elif n == '62':\n        return int(n)\n    elif n == '63':\n        return int(n)\n    elif n == '64':\n        return int(n)\n    elif n == '65':\n        return int(n)\n    elif n == '66':\n        return int(n)\n    elif n == '67':\n        return int(n)\n    elif n == '68':\n        return int(n)\n    elif n == '69':\n        return int(n)\n    elif n == '70':\n        return int(n)\n    elif n == '71':\n        return int(n)\n    elif n == '72':\n        return int(n)\n    elif n == '73':\n        return int(n)\n    elif n == '74':\n        return int(n)\n    elif n == '75':\n        return int(n)\n    elif n == '76':\n        return int(n)\n    elif n == '77':\n        return int(n)\n    elif n == '78':\n        return int(n)\n    elif n == '79':\n        return int(n)\n    elif n == '80':\n        return int(n)\n    elif n == '81':\n        return int(n)\n    elif n == '82':\n        return int(n)\n    elif n == '83':\n        return int(n)\n    elif n == '84':\n        return int(n)\n    elif n == '85':\n        return int(n)\n    elif n == '86':\n        return int(n)\n    elif n == '87':\n        return int(n)\n    elif n == '88':\n        return int(n)\n    elif n == '89':\n        return int(n)\n    elif n == '90':\n        return int(n)\n    elif n == '91':\n        return int(n)\n    elif n == '92':\n        return int(n)\n    elif n == '93':\n        return int(n)\n    elif n == '94':\n        return int(n)\n    elif n == '95':\n        return int(n)\n    elif n == '96':\n        return int(n)\n    elif n == '97':\n        return int(n)\n    elif n == '98':\n        return int(n)\n    elif n == '99':\n        return int(n)\n    elif n == '100':\n        return int(n)\n    elif n == '101':\n        return int(n)\n    elif n == '102':\n        return int(n)\n    elif n == '103':\n        return int(n)\n    elif n == '104':\n        return int(n)\n    elif n == '105':\n        return int(n)\n    elif n == '106':\n        return int(n)\n    elif n == '107':\n        return int(n)\n    elif n == '108':\n        return int(n)\n    elif n == '109':\n        return int(n)\n    elif n == '110':\n        return int(n)\n    elif n == '111':\n        return int(n)\n    elif n == '112':\n        return int(n)\n    elif n == '113':\n        return int(n)\n    elif n == '114':\n        return int(n)\n    elif n == '115':\n        return int(n)\n    elif n == '116':\n        return int(n)\n    elif n == '117':\n        return int(n)\n    elif n == '118':\n        return int(n)\n    elif n == '119':\n        return int(n)\n    elif n == '120':\n        return int(n)\n    elif n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # iterating over the digits\n    for i in range(1,n+1): \n        # find the nth jacobsthal\n        if i == n:\n            return i\n        # if the current digit is not divisible by 3, only 2 digit can be given\n        # then the current digit is 2, which is the jacobsthal\n        elif i % 3!= 0:\n            return i\n    # the total jacobsthal number is the sum of the numbers in the range\n    return n * jacobsthal_num(n-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    elif n == 2:\n        return n * n\n    elif n == 3:\n        return n * n * n\n    elif n == 4:\n        return (n * n * n)\n    elif n == 5:\n        return n * (n + 1)\n    elif n == 6:\n        return n * (n + 1) * n\n    elif n == 7:\n        return n * (n + 1) * n * n\n    elif n == 8:\n        return (n * n * n * n)\n    elif n == 9:\n        return (n * n * n)\n    elif n == 10:\n        return (n * n * n * n)\n    elif n == 11:\n        return (n * n * n * n * n)\n    elif n == 12:\n        return (n * n * n * n * n * n)\n    elif n == 13:\n        return (n * n * n * n)\n    elif n == 14:\n        return (n * n)\n    elif n == 15:\n        return (n * n)\n    elif n == 16:\n        return (n * n * n)\n    elif n == 17:\n        return (n * n * n * n)\n    elif n == 18:\n        return (n * n * n * n * n)\n    elif n == 19:\n        return (n * n * n * n)\n    elif n == 20:\n        return (n * n * n * n)\n    elif n == 21:\n        return (n * n * n)\n    elif n == 22:\n        return (n * n * n * n * n)\n    elif n == 23:\n        return (n * n * n * n)\n    elif n == 24:\n        return (n * n * n * n * n)\n    elif n == 25:\n        return (n * n * n * n * n * n)\n    elif n == 26:\n        return (n * n * n * n * n * n)\n    elif n == 27:\n        return (n * n * n * n * n * n * n)\n    elif n == 28:\n        return (n * n * n * n * n)\n    elif n == 29:\n        return (n * n * n)\n    elif n == 30:\n        return (n * n * n)\n    elif n == 31:\n        return (n * n)\n    elif n == 32:\n        return (n * n * n)\n    elif n == 33:\n        return (n * n * n * n)\n    elif n == 34:\n        return (n * n * n * n * n)\n    elif n == 35:\n        return (n * n * n * n * n * n)\n    elif n == 36:\n        return (n * n * n * n)\n    elif n == 37:\n        return (n * n)\n    elif n == 38:\n        return (n * n * n)\n    elif n == 39:\n        return (n * n * n)\n    elif n == 40:\n        return (n * n * n * n)\n    elif n == 41:\n        return (n * n * n * n * n)\n    elif n == 42:\n        return (n * n * n * n * n * n)\n    elif n == 43:\n        return (n * n * n * n)\n    elif n == 44:\n        return (n * n * n * n)\n    elif n == 45:\n        return (n * n * n * n)\n    elif n == 46:\n        return (n * n * n * n)\n    elif n == 47:\n        return (n * n * n)\n    elif n == 48:\n        return (n * n)\n    elif n == 49:\n        return (n * n * n)\n    elif n == 50:\n        return (n * n * n * n)\n    elif n == 51:\n        return (n * n * n * n)\n    elif n == 52:\n        return (n * n * n * n)\n    elif n == 53:\n        return (n * n * n * n * n)\n    elif n == 54:\n        return (n * n * n * n)\n    elif n == 55:\n        return (n * n * n)\n    elif n == 56:\n        return (n * n)\n    elif n == 57:\n        return (n * n * n)\n    elif n == 58:\n        return (n * n)\n    elif n == 59:\n        return (n * n)\n    elif n == 60:\n        return (n * n * n)\n    elif n == 61:\n        return (n * n * n * n)\n    elif n == 62:\n        return (n * n * n * n)\n    elif n == 63:\n        return (n * n * n * n)\n    elif n == 64:\n        return (n * n * n * n)\n    elif n == 65:\n        return (n * n * n * n)\n    elif n == 66:\n        return (n * n * n * n)\n    elif n == 67:\n        return (n * n * n)\n    elif n == 68:\n        return (n * n * n)\n    elif n == 69:\n        return (n * n)\n    elif n == 70:\n        return (n * n * n)\n    elif n == 71:\n        return (n * n)\n    elif n == 72:\n        return (n * n * n)\n    elif n == 73:\n        return (n * n * n * n)\n    elif n == 74:\n        return (n * n * n * n)\n    elif n == 75:\n        return (n * n * n * n * n)\n    elif n == 76:\n        return (n * n * n * n)\n    elif n == 77:\n        return (n * n * n)\n    elif n == 78:\n        return (n * n)\n    elif n == 79:\n        return (n * n)\n    elif n == 80:\n        return (n * n * n)\n    elif n == 81:\n        return (n * n * n * n)\n    elif n == 82:\n        return (n * n * n * n)\n    elif n == 83:\n        return (n * n * n * n)\n    elif n == 84:\n        return (n * n * n)\n    elif n == 85:\n        return (n * n * n * n)\n    elif n == 86:\n        return (n * n * n)\n    elif n == 87:\n        return (n * n * n * n)\n    elif n == 88:\n        return (n * n * n * n)\n    elif n == 89:\n        return (n * n * n * n)\n    elif n == 90:\n        return (n * n * n)\n    elif n == 91:\n        return (n * n)\n    elif n == 92:\n        return (n * n)\n    elif n == 93:\n        return (n * n)\n    elif n == 94:\n        return (n * n * n)\n    elif n == 95:\n        return (n * n * n * n)\n    elif n == 96:\n        return (n * n * n * n)\n    elif n == 97:\n        return (n * n * n * n)\n    elif n == 98:\n        return (n * n)\n    elif n == 99:\n        return (n * n)\n    elif n == 100:\n        return (n * n)\n    elif n == 101:\n        return (n * n)\n    elif n == 102:\n        return (n * n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #implement recursively\n    #return the jacobsthal of a natural number\n    if n == 0: return 0\n    elif n == 1: return 1\n    elif n == 2: return 1\n    elif n == 3: return 1\n    elif n == 4: return 1\n    elif n == 5: return 1\n    elif n == 6: return 1\n    elif n == 7: return 1\n    elif n == 8: return 1\n    elif n == 9: return 1\n    elif n == 10: return 1\n    elif n == 11: return 1\n    elif n == 12: return 1\n    elif n == 13: return 1\n    elif n == 14: return 1\n    elif n == 15: return 1\n    elif n == 16: return 1\n    elif n == 17: return 1\n    elif n == 18: return 1\n    elif n == 19: return 1\n    elif n == 20: return 1\n    elif n == 21: return 1\n    elif n == 22: return 1\n    elif n == 23: return 1\n    elif n == 24: return 1\n    elif n == 25: return 1\n    elif n == 26: return 1\n    elif n == 27: return 1\n    elif n == 28: return 1\n    elif n == 29: return 1\n    elif n == 30: return 1\n    elif n == 31: return 1\n    elif n == 32: return 1\n    elif n == 33: return 1\n    elif n == 34: return 1\n    elif n == 35: return 1\n    elif n == 36: return 1\n    elif n == 37: return 1\n    elif n == 38: return 1\n    elif n == 39: return 1\n    elif n == 40: return 1\n    elif n == 41: return 1\n    elif n == 42: return 1\n    elif n == 43: return 1\n    elif n == 44: return 1\n    elif n == 45: return 1\n    elif n == 46: return 1\n    elif n == 47: return 1\n    elif n == 48: return 1\n    elif n == 49: return 1\n    elif n == 50: return 1\n    elif n == 51: return 1\n    elif n == 52: return 1\n    elif n == 53: return 1\n    elif n == 54: return 1\n    elif n == 55: return 1\n    elif n == 56: return 1\n    elif n == 57: return 1\n    elif n == 58: return 1\n    elif n == 59: return 1\n    elif n == 60: return 1\n    elif n == 61: return 1\n    elif n == 62: return 1\n    elif n == 63: return 1\n    elif n == 64: return 1\n    elif n == 65: return 1\n    elif n == 66: return 1\n    elif n == 67: return 1\n    elif n == 68: return 1\n    elif n == 69: return 1\n    elif n == 70: return 1\n    elif n == 71: return 1\n    elif n == 72: return 1\n    elif n == 73: return 1\n    elif n == 74: return 1\n    elif n == 75: return 1\n    elif n == 76: return 1\n    elif n == 77: return 1\n    elif n == 78: return 1\n    elif n == 79: return 1\n    elif n == 80: return 1\n    elif n == 81: return 1\n    elif n == 82: return 1\n    elif n == 83: return 1\n    elif n == 84: return 1\n    elif n == 85: return 1\n    elif n == 86: return 1\n    elif n == 87: return 1\n    elif n == 88: return 1\n    elif n == 89: return 1\n    elif n == 90: return 1\n    elif n == 91: return 1\n    elif n == 92: return 1\n    elif n == 93: return 1\n    elif n == 94: return 1\n    elif n == 95: return 1\n    elif n == 96: return 1\n    elif n == 97: return 1\n    elif n == 98: return 1\n    elif n == 99: return 1\n    elif n == 100: return 1\n    elif n == 101: return 1\n    elif n == 102: return 1\n    elif n == 103: return 1\n    elif n == 104: return 1\n    elif n == 105: return 1\n    elif n == 106: return 1\n    elif n == 107: return 1\n    elif n == 108: return 1\n    elif n == 109: return 1\n    elif n == 110: return 1\n    elif n == 111: return 1\n    elif n == 112: return 1\n    elif n == 113: return 1\n    elif n == 114: return 1\n    elif n == 115: return 1\n    elif n == 116: return 1\n    elif n == 117: return 1\n    elif n == 118: return 1\n    elif n == 119: return 1\n    elif n == 120: return 1\n    elif n == 121: return 1\n    elif n == 122: return 1\n    elif n == 123: return 1\n    elif n == 124: return 1\n    elif n == 125: return 1\n    elif n == 126: return 1\n    elif n == 127: return 1\n    elif n == 128: return 1\n    elif n == 129: return 1\n    elif n == 130: return 1\n    elif n == 131: return 1\n    elif n == 132: return 1\n    elif n == 133: return 1\n    elif n == 134: return 1\n    elif n == 135: return 1\n    elif n == 136: return 1\n    elif n == 137: return 1\n    elif n == 138: return 1\n    elif n == 139: return 1\n    elif n == 140: return 1\n    elif n == 141: return 1\n    elif n == 142: return 1\n    elif n == 143: return 1\n    elif n == 144: return 1\n    elif n == 145: return 1\n    elif n == 146: return 1\n    elif n == 147: return 1\n    elif n == 148: return 1\n    elif n == 149: return 1\n    elif n == 150: return 1\n    elif n == 151: return 1\n    elif n == 152: return 1\n    elif n == 153: return 1\n    elif n == 154: return 1\n    elif n == 155: return 1\n    elif n == 156: return 1\n    elif n == 157: return 1\n    elif n == 158: return 1\n    elif n == 159: return 1\n    elif n == 160: return 1\n    elif n == 161: return 1\n    elif n == 162: return 1\n    elif n == 163: return 1\n    elif n == 164: return 1\n    elif n == 165: return 1\n    elif n == 166: return 1\n    elif n == 167: return 1\n    elif n == 168: return 1\n    elif n == 169: return 1\n    elif n == 170: return 1\n    elif n == 171: return 1\n    elif n == 172: return 1\n    elif n == 173: return 1\n    elif n == 174: return 1\n    elif n == 175: return 1\n    elif n == 176: return 1\n    elif n == 177: return 1\n    elif n == 178: return 1\n    elif n == 179: return 1\n    elif n == 180: return 1\n    elif n == 181: return 1\n    elif n == 182: return 1\n    elif n == 183: return 1\n    elif n == 184: return 1\n    elif n == 185: return 1\n    elif n == 186: return 1\n    elif n == 187: return 1\n    elif n == 188: return 1\n    elif n == 189: return 1\n    elif n == 190: return 1\n    elif n == 191: return 1\n    elif n == 192"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 3:\n        return(n)\n    else:\n        return(3**n - 1)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 0:\n        return len(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # base case 1\n    if len(test_list) == 0:\n        return 0\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Write your code here\n    min_k = []\n    for i in range(len(test_list)):\n        min_k.append(test_list[i][0])\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return 0\n    \n    if K == len(test_list):\n        return len(test_list)\n    \n    mid = len(test_list)//2\n    \n    left = test_list[:mid]\n    right = test_list[mid:]\n    \n    left_k = min_k(left, K)\n    right_k = min_k(right, K)\n    \n    return left_k + right_k\n    \ndef min_k_in_list(test_list, K):\n    '''\n    Write a function that finds the minimum number of elements from tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    \n    if K == len(test_list):\n        return len(test_list)\n    \n    mid = len(test_list)//2\n    \n    left = test_list[:mid]\n    right = test_list[mid:]\n    \n    left_k = min_k(left, K)\n    right_k = min_k(right, K)\n    \n    return left_k + right_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    from collections import deque\n    def min_k_records(arr, k, index=0):\n        '''\n        implement minimum k records of a given tuple list, given k\n        '''\n        if k == 0:\n            return len(arr)\n        if index == len(arr):\n            return 0\n        if k == 1:\n            return 1\n        \n        left_count = min_k_records(arr[0:index] + arr[index + 1:], k - 1, index + 1)\n        right_count = min_k_records(arr[0:index] + arr[index + 1:], k, index)\n        return left_count + right_count\n    \n    return min_k_records(test_list, K)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sum(map(lambda x: len(x[1]) - 1, test_list))//K\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = len(test_list)\n    i = 0\n    j = 0\n    while i < k:\n        j = 0\n        while j < k:\n            if test_list[i] < test_list[j]:\n                j += 1\n            else:\n                i += 1\n                j = 0\n        i += 1\n    return k - j\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    ans = []\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list: return 0\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    global min_k\n    \n    test_list = copy.deepcopy(test_list)\n    \n    for i in test_list:\n        i = tuple(i)\n        \n        if i in min_k:\n            min_k.remove(i)\n        else:\n            min_k.append(i)\n    \n    return min_k\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # We take elements from the lists as input, which are tuples. The tuple is the tuple. The tuple is a tuple.\n    # The tuple is a tuple.\n    # If the index is the same, then we return the tuple.\n    # If the index is different, then we return the tuple.\n    index_list = []\n    # We create the list of tuples, which is the same as the input list.\n    index_list = [(l1[index], l2[index], l3[index]) for index in range(len(l1))]\n    # We extract the common elements as tuples and return the list.\n    index_list = list(set(index_list))\n    return index_list\n    # We create the function, which returns the tuples in the same order as the input.\n    # We do this because the function needs to be in-place.\n    # We have to return the list."
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Will contain indexes of l1\n    index1 = []\n    # Will contain indexes of l2\n    index2 = []\n    # Will contain indexes of l3\n    index3 = []\n    # Creates a set of indexes\n    intersect_index = set()\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #if l1 is empty then the function should return empty list\n    if not l1:\n        return []\n    #if l2 is empty then the function should return empty list\n    if not l2:\n        return []\n    #if l3 is empty then the function should return empty list\n    if not l3:\n        return []\n    \n    index_list = []\n    \n    #iterating over l1\n    for i in range(len(l1)):\n        #if l1[i] in l2 and l2[i] in l3 and l3[i] in l2 and l2[i] in l3 and l3[i] in l1:\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            index_list.append(i)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # l1 = [1, 2, 3]\n    # l2 = [2, 3, 4]\n    # l3 = [1, 2, 3, 4]\n    if len(l1) == len(l2) == len(l3):\n        return list(set(l1+l2+l3))\n    else:\n        return list(set(l1+l2+l3))\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Finding the common elements\n    common_list = []\n    \n    # Case 1: If l1 is the first list\n    if l1 is not None and l2 is not None:\n        common_list = l1 + l2\n        common_list.sort()\n        return common_list\n    \n    # Case 2: If l1 is the second list\n    elif l1 is not None and l2 is None:\n        common_list = l1\n        common_list.sort()\n        return common_list\n    \n    # Case 3: If l1 is the third list\n    elif l1 is None and l2 is not None:\n        common_list = l2\n        common_list.sort()\n        return common_list\n    \n    # Case 4: If l2 is the second list\n    elif l1 is None and l2 is None:\n        common_list = l3\n        common_list.sort()\n        return common_list\n    \n    else:\n        print(\"ERROR: Can not find common elements\")\n        return None\n    "
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    all_lists = []\n    for i in range(len(l1)):\n        all_lists.append(l1[i])\n        all_lists.append(l2[i])\n        all_lists.append(l3[i])\n    all_lists.sort()\n    com_elements = []\n    i = 0\n    while i < len(all_lists):\n        if all_lists[i] == all_lists[i+1] == all_lists[i+2]:\n            com_elements.append(all_lists[i])\n            i += 3\n        else:\n            i += 1\n    return com_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = 0\n    num = 0\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n            num += 1\n        if num > 1:\n            break\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = list()\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l1[i] == l3[k]:\n                    index_list.append(l1[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    if l1[i] not in d.keys():\n                        d[l1[i]] = 1\n                    else:\n                        d[l1[i]] += 1\n    return d.keys()\n    \n    #list1 = [[1,2,3], [2,3,4], [3,4,5]]\n    #list2 = [[2,4,6], [4,6,8], [6,8,10]]\n    #list3 = [[1,2,3,4], [2,3,4,5], [3,4,5,6]]\n    #print(extract_index_list(list1, list2, list3))\n    \ndef list_strings(s):\n    '''\n    We say that we want to know whether the list contains any string. Write a function that takes a string and returns True if it is contained in the list, and False if it is not.\n    '''\n    return any(x.isalpha() for x in s)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = list(set(l1).intersection(set(l2), set(l3)))\n    return common_list\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[len(numbers) // 2]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_value = numbers[0]\n    for number in numbers:\n        if number < smallest_value:\n            smallest_value = number\n    return smallest_value\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if smallest < numbers[i]:\n            smallest = numbers[i]\n        if smallest > second_smallest:\n            second_smallest = smallest\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    low = 0\n    high = len(numbers) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if numbers[mid] < numbers[mid+1]:\n            low = mid + 1\n        elif numbers[mid] > numbers[mid+1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n            high = mid - 1\n    return low\n    \n    \nnumbers = [10,5,6,8,3,15,20,19,7,8,6]\nprint(second_smallest(numbers))\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    smallest_index = 0\n    for i in range(len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = numbers[0]\n    second_smallest_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < numbers[second_smallest]:\n            second_smallest_index = i\n            second_smallest = numbers[i]\n    return second_smallest_index\n    \n    "
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # set variable're_pattern'\n    re_pattern = r'(?<=a)b(?=\\s)'\n    # define pattern\n    re_pattern = re.compile(re_pattern)\n    # find the first match, return its start position\n    m = re_pattern.search(text)\n    if m:\n        return m.start()\n    return -1\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return 'a' in text.lower() or 'b' in text.lower() or 'a' in text.upper() and 'b' in text.upper()\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regexp = '\\b(a|b)\\b'\n    regexp2 = re.compile(regexp)\n    text = text.lower()\n    text = regexp2.findall(text)\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a(b[s])\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_two(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by one or more 'a'\n    '''\n    res = re.findall('b[a]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_three(text):\n    '''\n    Write a function that matches a string that has 'a' followed by a 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_four(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by two or more 'b' followed by two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_five(text):\n    '''\n    Write a function that matches a string that has two or more 'a' followed by two or more 'b' followed by two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_six(text):\n    '''\n    Write a function that matches a string that has two or more 'b' followed by two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('b[a]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_seven(text):\n    '''\n    Write a function that matches a string that has a two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_eight(text):\n    '''\n    Write a function that matches a string that has a two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_nine(text):\n    '''\n    Write a function that matches a string that has a two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_ten(text):\n    '''\n    Write a function that matches a string that has a two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_eleven(text):\n    '''\n    Write a function that matches a string that has two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_twelve(text):\n    '''\n    Write a function that matches a string that has two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_thirteen(text):\n    '''\n    Write a function that matches a string that has two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res = list(filter(lambda x: x is not None, res))\n    res = list(map(lambda x: x.lower(), res))\n    res = list(filter(lambda x: len(x) >= 2, res))\n    return ''.join(res)\ndef text_match_zero_one_fourteen(text):\n    '''\n    Write a function that matches a string that has two or more 'a' followed by two or more 'b' followed by two or more 'a'.\n    '''\n    res = re.findall('a[b]([a-zA-Z0-9]+)', text)\n    res "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # find all occurrences of the letter 'a'\n    text = re.findall(r'[a-zA-Z]\\w+', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Identify the 'a' and 'b's using regular expressions\n    #Split string into three parts:\n    #- a - a\n    #- b - b\n    #- c - c\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p = re.compile(r'(a{2,})a')\n    text_matches = p.finditer(text)\n    matches = []\n    for match in text_matches:\n        matches.append(match.group())\n    return matches\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    start = text.find('a')\n    #print(\"start is \", start)\n    end = text.find('b')\n    #print(\"end is \", end)\n    if start >= 0 and end >= 0 and end < start:\n        text = text[end + 2:end + 6]\n        #print(\"text after removing b is\", text)\n    return text\ndef check_match_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    start = text.find('a')\n    end = text.find('b')\n    if start >= 0 and end >= 0 and end < start:\n        text = text[end + 2:end + 6]\n        #print(\"text after removing b is\", text)\n    return text\ndef check_match_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    start = text.find('a')\n    end = text.find('b')\n    if start >= 0 and end >= 0 and end < start:\n        text = text[start + 2:end]\n        #print(\"text after removing b is\", text)\n    return text\ndef check_match_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    start = text.find('a')\n    end = text.find('b')\n    if start >= 0 and end >= 0 and end < start:\n        text = text[end + 2:end + 6]\n        #print(\"text after removing b is\", text)\n    return text\ndef check_match_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    start = text.find('a')\n    end = text.find('b')\n    if start >= 0 and end >= 0 and end < start:\n        text = text[start + 2:end]\n        #print(\"text after removing b is\", text)\n    return text\ndef check_match_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    start = text.find('a')\n    end = text.find('b')\n    if start >= 0 and end >= 0 and end < start:\n        text = text[start + 2:end]\n        #print(\"text after removing b is\", text)\n    return text\ndef check_match_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    start = text.find('a')\n    end = text.find('b')\n    if start >= 0 and end >= 0 and end < start:\n        text = text[end + 2:end]\n        #print(\"text after removing b is\", text)\n    return text\ndef check_match_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    start = text.find('a')\n    end = text.find('b')\n    if start >= 0 and end >= 0 and end < start:\n        text = text[start + 2:end]\n        #print(\"text after removing b is\", text)\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower()\n    split = re.findall(r'a\\b', text)\n    if len(split) > 0:\n        return \"WOW, a 'b' found in \" + text + \".\"\n    else:\n        return \"No 'a' found in \" + text\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # START: your code goes here\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - 1):\n            if test_list[i] == test_list[j] and j+1 < len(test_list):\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                count +=1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    print(\"REVERSE PIPES:\", end=\" \")\n    total = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            total += 1\n    print(total)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n=len(test_list)\n    #create a set of all the possible pairs\n    #but instead of changing every character a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\n    pairs=set()\n    for i in range(0,n):\n        for j in range(i+1,n):\n            pairs.add((test_list[i],test_list[j]))\n    #print(pairs)\n    #print(set(pairs))\n    return len(pairs)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    res = 0\n    j = len(test_list) - 1\n    for i in range(j):\n        if test_list[i] == test_list[j]:\n            res += 1\n        else:\n            res = 0\n            break\n    return res\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    # initializing the dictionaries\n    dict1 = {}\n    dict2 = {}\n    # loop to create the dictionaries\n    for i in test_list:\n        if i[::-1] in dict1:\n            dict1[i[::-1]] += 1\n        else:\n            dict1[i[::-1]] = 1\n        if i[::-1] in dict2:\n            dict2[i[::-1]] += 1\n        else:\n            dict2[i[::-1]] = 1\n    # loop to print result\n    print(\"The reverse pairs for the given list are:\")\n    for i in dict1:\n        if dict1[i] > 1:\n            result += dict1[i] * dict2[i]\n        elif dict1[i] == 1:\n            print(i, end=\" \")\n    print()\n    print(\"The reverse pairs for the given list are:\")\n    for i in dict2:\n        if dict2[i] > 1:\n            result += dict1[i] * dict2[i]\n        elif dict2[i] == 1:\n            print(i, end=\" \")\n    print()\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    cnt = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                cnt += 1\n    return cnt\n    "
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    length = len(test_list)\n    if length < 2:\n        return 0\n    \n    mid = length // 2\n    \n    if test_list[mid] == test_list[length - 1]:\n        return 2\n    \n    count = 0\n    \n    for i in range(mid, len(test_list)):\n        if test_list[mid]!= test_list[i]:\n            count = count + 1\n        if count == 2:\n            break\n    \n    if count == 2:\n        return count\n    \n    count = 0\n    \n    for i in range(mid, 0, -1):\n        if test_list[mid]!= test_list[i]:\n            count = count + 1\n        if count == 2:\n            break\n    \n    if count == 2:\n        return count\n    \n    count = 0\n    \n    for i in range(mid, len(test_list) - 1):\n        if test_list[mid]!= test_list[i]:\n            count = count + 1\n        if count == 2:\n            break\n    \n    if count == 2:\n        return count\n    \n    return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            count = count + 1\n    print(count)\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if (list1[i] in list1[j]):\n                d[(i,j)] = list1[i].count(list1[i])\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        lst = list(list1[i])\n        for j in range(len(lst)):\n            if lst[j] in result:\n                result[lst[j]] += 1\n            else:\n                result[lst[j]] = 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = {}\n    for i in range(len(list1)):\n        if list1[i] in counter:\n            counter[list1[i]] += 1\n        else:\n            counter[list1[i]] = 1\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #compute the unique list using a dictionary to count\n    unique_list=dict()\n    for i in list1:\n        unique_list[i]=list1.count(i)\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    count_dictionary = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique_sublists(list1):\n        # We'll use a dictionary where the key is the tuple of a list, and the value is the number of occurence of that tuple.\n        return {tuple(t):len(list1[i]) for i,t in enumerate(list1)}\n        \n    return unique_sublists(list1)\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    my_dict = {}\n    for elem in list1:\n        tuple_elem = tuple(elem)\n        if tuple_elem in my_dict:\n            my_dict[tuple_elem] += 1\n        else:\n            my_dict[tuple_elem] = 1\n    return my_dict\n    \n    \nlist1 = [0,1,1,2,2,3,3,4]\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = dict()\n    for i in range(len(list1)):\n        for x in list1[i]:\n            if x not in result:\n                result[x] = 0\n            result[x] += 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if num.is_integer() is True:\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    # Base case\n    if num < 10:\n        return True\n    # We only care if the remainder is 2.\n    # So we can see that the remainder is 2 because we know we can only check the remainder of 2 when we have a positive number.\n    if num % 2 == 0:\n        return False\n    # We want to check if the number has a base.\n    # We can do this by making it a string and then check if it has a prefix.\n    # Prefix is the number itself as a string.\n    # This is the only way to check if the number has a prefix because it only has 2 digits.\n    # The prefix is always the number itself.\n    prefix = str(num)\n    if prefix[0] == '0':\n        return False\n    return check_prefix(prefix)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if num.count('.') == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return False\n    num = num.replace('.', '')\n    if len(num) == 0:\n        return False\n    if num[0] == '-' and num[1] == '0':\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = 0\n    while num!= '.':\n        n += 1\n        num = num[::-1]\n        if n > 2:\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num.count('.') >= 2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return type(num) == str and (len(str(num)) == 10 or num.isnumeric())\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdecimal()\n    \ndef test_is_decimal():\n    assert is_decimal(Decimal('12.34'))\n    assert not is_decimal('12.34')\n    assert not is_decimal('12.34a')\n    assert is_decimal('1234.5678')\n    assert not is_decimal('1234.5678.8889')\n    assert not is_decimal('12.34.5678.8889')\n    assert not is_decimal('12.34.5678.8')\n    assert not is_decimal('12.34.5678.8.8889')\n    assert not is_decimal('1234.5678.8889.')\n    assert not is_decimal('1234.5678.8889.1234567')\n    assert not is_decimal('123456789.')\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        raise TypeError('The input is not a string.')\n    if len(num) == 0:\n        raise ValueError('The string is empty.')\n    if len(num) < 2:\n        raise ValueError('The string is too short.')\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    s = set(arr)\n    return len(s)==1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    list_ = []\n    for i in arr:\n        list_.append(i)\n    if len(set(list_)) == 1:\n        print(\"The given list has only one distinct element\")\n    else:\n        print(\"The given list has only one distinct element\")\n        \ndef any_in_Group(arr):\n    '''\n    Write a python function to check whether a list of elements contains any element of a given list or not.\n    '''\n    if len(arr)==1:\n        print(arr[0])\n    else:\n        for i in arr:\n            if i not in arr:\n                print(i)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count=0\n    # loop through list\n    for i in arr:\n        if arr.count(i)==1:\n            count+=1\n    if count==1:\n        return True\n    else:\n        return False\narr=[1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = False\n    for num in arr:\n        if arr.count(num) > 1:\n            unique = True\n    return unique\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    s = 0\n    unique = []\n    for i in arr:\n        if i not in unique:\n            unique.append(i)\n        else:\n            s += 1\n    if s == len(arr):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    counter = dict()\n    for number in arr:\n        if number in counter:\n            return False\n        else:\n            counter[number] = 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # your code here\n    return len(set(arr))==1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==1:\n        if arr[0]==arr[0]:\n            return True\n    else:\n        for i in range(len(arr)):\n            if arr[i]==arr[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    check_monthnumber_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_2 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3]\n    check_monthnumber_3 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5]\n    check_monthnumber_4 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_5 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_6 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_7 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_8 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_9 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_10 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_11 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_12 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_1_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_2_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_3_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_4_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_5_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_6_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_7_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_8_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_9_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_10_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_11_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    check_monthnumber_12_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if not type(monthnum3) is int or not 0 <= monthnum3 < 13:\n        return 'Invalid input.'\n    elif monthnum3 < 1 or monthnum3 > 12:\n        return 'Invalid input.'\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        raise ValueError(\"Error: Month number should be between 1 and 12\")\n    else:\n        return monthnum3\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    flag = 0\n    for i in months:\n        if i == monthnum3:\n            flag = 1\n    if flag == 0:\n        return False\n    else:\n        return True\ndef check_yearmonthnumber_number(yournum3):\n    '''\n    Write a function to check whether the given year and month number contains 30 days or not. Year is given as number from 1 to 12.\n    '''\n    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\n    flag = 0\n    for i in months:\n        if i == yournum3:\n            flag = 1\n    if flag == 0:\n        return False\n    else:\n        return True\ndef check_monthnumber_number2(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    flag = 0\n    for i in months:\n        if i == monthnum3:\n            flag = 1\n    if flag == 0:\n        return False\n    else:\n        return True\ndef check_yearmonthnumber_number2(yournum3):\n    '''\n    Write a function to check whether the given year and month number contains 30 days or not. Year is given as number from 1 to 12.\n    '''\n    months = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    flag = 0\n    for i in months:\n        if i == yournum3:\n            flag = 1\n    if flag == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_number_list = [1,2,3,4,5,6,7,8,9,10,11,12]\n    if monthnum3 in month_number_list:\n        if (monthnum3+1)%3 == 0:\n            if monthnum3+1 == 12:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if not 1 <= monthnum3 <= 12:\n        return False\n    else:\n        return True\n    \n    \n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11 or monthnum3 == 12:\n        print(\"invalid month number\")\n        return\n    elif monthnum3 < 1 or monthnum3 > 12:\n        print(\"invalid month number\")\n        return\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    if monthnum3 == 2:\n        return monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7\n    if monthnum3 == 3:\n        return monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11\n    if monthnum3 == 4:\n        return monthnum3 == 12 or monthnum3 == 1 or monthnum3 == 2\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] - arr[i+1] < 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[0]-arr[1]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0 or arr == []: \n        return 0\n    \n    if arr[0] < arr[1]:\n        arr[0], arr[1] = arr[1], arr[0]\n    \n    arr_min = arr[0] + find_min_diff(arr, n-1)\n    \n    arr[0], arr[1] = arr[1], arr[0]\n    return arr_min\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0]-arr[1])\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(arr[i]-arr[i-1]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    s=[]\n    s1=[]\n    s2=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n            s2.append(arr[j]-arr[i])\n    d=min(s,s1,s2)\n    if(d==0):\n        return 0\n    else:\n        return abs(d)\ndef find_median(arr): \n    '''\n    Write a python function to find the median of a given array of integers. https://www.geeksforgeeks.org/find-median-number-given-array/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n    if(len(s)==0):\n        return 0\n    if(len(s1)==0):\n        return 0\n    median=s[len(s)//2]\n    if(len(s1)%2==0):\n        median=s1[len(s1)//2]+s1[len(s1)//2-1]\n    else:\n        median=s1[len(s1)//2]\n    return median\ndef find_mode(arr): \n    '''\n    Write a python function to find the mode of a given array of integers. https://www.geeksforgeeks.org/find-mode-number-given-array/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n    if(len(s)==0):\n        return 0\n    if(len(s1)==0):\n        return 0\n    mode=s[len(s)//2]\n    for i in range(0,len(s)):\n        if(s[i]==mode):\n            mode=s1[i]\n    return mode\ndef find_count(arr): \n    '''\n    Write a python function to find the count of a given array of integers. https://www.geeksforgeeks.org/find-unique-count-of-an-array/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n    count=len(set(s))\n    return count\ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of all given array of integers. https://www.geeksforgeeks.org/find-sum-of-all-numbers-in-a-given-array/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n    sum=0\n    for i in range(0,len(s)):\n        sum+=s[i]\n    return sum\ndef find_sum_sub(arr): \n    '''\n    Write a python function to find the sum of all given array of integers. https://www.geeksforgeeks.org/find-sum-of-all-numbers-in-a-given-array-subset-of-given-array/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n    sum=0\n    for i in range(0,len(s)):\n        sum+=s[i]\n    return sum\ndef find_mode_sub(arr): \n    '''\n    Write a python function to find the mode of a given array of integers. https://www.geeksforgeeks.org/find-mode-number-given-array/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n    if(len(s)==0):\n        return 0\n    if(len(s1)==0):\n        return 0\n    mode=s[len(s)//2]\n    for i in range(0,len(s)):\n        if(s[i]==mode):\n            mode=s1[i]\n    return mode\ndef find_mode_sub_nonzero(arr): \n    '''\n    Write a python function to find the mode of a given array of integers. https://www.geeksforgeeks.org/find-mode-number-given-array-sub-given-array/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n    if(len(s)==0):\n        return 0\n    if(len(s1)==0):\n        return 0\n    mode=s[len(s)//2]\n    for i in range(0,len(s)):\n        if(s[i]==mode):\n            mode=s1[i]\n    return mode\ndef find_median_sub(arr): \n    '''\n    Write a python function to find the median of a given array of integers. https://www.geeksforgeeks.org/find-median-number-given-array-subset-of-given-array/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n    median=find_median(s)\n    if(len(s)==0):\n        return 0\n    if(len(s1)==0):\n        return 0\n    median=s[len(s)//2]+median\n    return median\ndef find_diff_sub(arr): \n    '''\n    Write a python function to find the difference between two arrays of integers. https://www.geeksforgeeks.org/find-difference-between-two-arrays-of-integers/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append(arr[i]-arr[j])\n            s1.append(arr[i]-arr[j])\n    if(len(s)==0):\n        return 0\n    if(len(s1)==0):\n        return 0\n    diff=s[len(s)-1]-s1[len(s)-1]\n    return diff\ndef find_min_diff_sub(arr): \n    '''\n    Write a python function to find the minimum difference between two arrays of integers. https://www.geeksforgeeks.org/find-minimum-difference-between-two-arrays-of-integers/\n    '''\n    s=[]\n    s1=[]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            s.append"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1: return arr[0]\n    if n == 2: return min(arr[0], arr[1])\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[1]\n    for i in range(2, n):\n        dp[i] = min(dp[i - 1], dp[i - 2])\n    return dp[n - 1]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # get array\n    arr = sorted(arr)\n    # find the first and last elements \n    first = arr[0]\n    last = arr[-1]\n    # find difference\n    diff = abs(first - last)\n    # set min diff as max\n    minDiff = max(diff, arr[1] - arr[0])\n    # loop through array\n    for i in range(2, len(arr)):\n        diff = abs(first - arr[i])\n        minDiff = max(minDiff, diff)\n    # print result\n    print(minDiff)\n    return minDiff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    small_num = min(arr[0],arr[1])\n    small_index = arr.index(small_num)\n    if small_num == arr[0]:\n        small_arr = arr[1:]\n        small_diff = find_min_diff(small_arr,small_index+1)\n        small_diff = arr[small_index+1] - small_diff\n    elif small_num == arr[1]:\n        small_arr = arr[0:]\n        small_diff = find_min_diff(small_arr,small_index-1)\n        small_diff = small_arr[small_index-1] - small_diff\n    return small_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # get the length of the array\n    l = len(arr) \n    if l == 0:\n        return 0 \n    # find the minimum difference between elements in array\n    min_diff = arr[0] - arr[1] \n    # iterate over the array and find the minimum difference\n    for i in range(l-1):\n        min_diff = min(arr[i+1] - arr[i], min_diff)\n    # return minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return arr[0] - arr[1]\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if str == '' or len(str) < 2:\n        return 0\n    i = 0\n    count = 0\n    while i < len(str):\n        if str[i] in '0123456789':\n            count += 1\n            i += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    lst = list(str)\n    ctr = 0\n    for i in range(len(lst)):\n        if lst[i] == '0':\n            ctr += 1\n        else:\n            break\n    return str.count('0') + ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_count = 0\n    for i in str:\n        if i.isdigit():\n            digit_count += 1\n    return digit_count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    digits = 0\n    for char in str:\n        if char.isdigit():\n            digits += 1\n    return digits\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str.strip('0'))\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n    \ndef number_bin(str):\n    '''\n    Write a python function to return the number of digits of a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n    \ndef number_dec(str):\n    '''\n    Write a python function to return the number of digits of a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n    \ndef number_dec_b(str):\n    '''\n    Write a python function to return the number of digits of a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    #{ \n    #Driver Code Starts\n    if len(str) == 0 :\n        return 0\n    count = 0\n    if str[0]!= '0' :\n        count = 1\n    for i in range(1, len(str)):\n        if str[i] == '0' :\n            break\n        count += 1\n    print(count)\n    return count\n    #} Driver Code Ends\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0:\n        raise ValueError(\"n can't be negative\")\n    elif n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n == 4:\n        return False\n    elif n == 5:\n        return True\n    elif n == 6:\n        return False\n    elif n == 7:\n        return True\n    elif n == 8:\n        return False\n    elif n == 9:\n        return True\n    elif n == 10:\n        return False\n    elif n == 11:\n        return True\n    elif n == 12:\n        return False\n    elif n == 13:\n        return True\n    elif n == 14:\n        return False\n    elif n == 15:\n        return True\n    elif n == 16:\n        return False\n    elif n == 17:\n        return True\n    elif n == 18:\n        return False\n    elif n == 19:\n        return True\n    elif n == 20:\n        return False\n    elif n == 21:\n        return True\n    elif n == 22:\n        return False\n    elif n == 23:\n        return True\n    elif n == 24:\n        return False\n    elif n == 25:\n        return True\n    elif n == 26:\n        return False\n    elif n == 27:\n        return True\n    elif n == 28:\n        return False\n    elif n == 29:\n        return True\n    elif n == 30:\n        return False\n    elif n == 31:\n        return True\n    elif n == 32:\n        return False\n    elif n == 33:\n        return True\n    elif n == 34:\n        return False\n    elif n == 35:\n        return True\n    elif n == 36:\n        return False\n    elif n == 37:\n        return True\n    elif n == 38:\n        return False\n    elif n == 39:\n        return True\n    elif n == 40:\n        return False\n    elif n == 41:\n        return True\n    elif n == 42:\n        return False\n    elif n == 43:\n        return True\n    elif n == 44:\n        return False\n    elif n == 45:\n        return True\n    elif n == 46:\n        return False\n    elif n == 47:\n        return True\n    elif n == 48:\n        return False\n    elif n == 49:\n        return True\n    elif n == 50:\n        return False\n    elif n == 51:\n        return True\n    elif n == 52:\n        return False\n    elif n == 53:\n        return True\n    elif n == 54:\n        return False\n    elif n == 55:\n        return True\n    elif n == 56:\n        return False\n    elif n == 57:\n        return True\n    elif n == 58:\n        return False\n    elif n == 59:\n        return True\n    elif n == 60:\n        return False\n    elif n == 61:\n        return True\n    elif n == 62:\n        return False\n    elif n == 63:\n        return True\n    elif n == 64:\n        return False\n    elif n == 65:\n        return True\n    elif n == 66:\n        return False\n    elif n == 67:\n        return True\n    elif n == 68:\n        return False\n    elif n == 69:\n        return True\n    elif n == 70:\n        return False\n    elif n == 71:\n        return True\n    elif n == 72:\n        return False\n    elif n == 73:\n        return True\n    elif n == 74:\n        return False\n    elif n == 75:\n        return True\n    elif n == 76:\n        return False\n    elif n == 77:\n        return True\n    elif n == 78:\n        return False\n    elif n == 79:\n        return True\n    elif n == 80:\n        return False\n    elif n == 81:\n        return True\n    elif n == 82:\n        return False\n    elif n == 83:\n        return True\n    elif n == 84:\n        return False\n    elif n == 85:\n        return True\n    elif n == 86:\n        return False\n    elif n == 87:\n        return True\n    elif n == 88:\n        return False\n    elif n == 89:\n        return True\n    elif n == 90:\n        return False\n    elif n == 91:\n        return True\n    elif n == 92:\n        return False\n    elif n == 93:\n        return True\n    elif n == 94:\n        return False\n    elif n == 95:\n        return True\n    elif n == 96:\n        return False\n    elif n == 97:\n        return True\n    elif n == 98:\n        return False\n    elif n == 99:\n        return True\n    elif n == 100:\n        return False\n    elif n == 101:\n        return True\n    elif n == 102:\n        return False\n    elif n == 103:\n        return True\n    elif n == 104:\n        return False\n    elif n == 105:\n        return True\n    elif n == 106:\n        return False\n    elif n == 107:\n        return True\n    elif n == 108:\n        return False\n    elif n == 109:\n        return True\n    elif n == 110:\n        return False\n    elif n == 111:\n        return True\n    elif n == 112:\n        return False\n    elif n == 113:\n        return True\n    elif n == 114:\n        return False\n    elif n == 115:\n        return True\n    elif n == 116:\n        return False\n    elif n == 117:\n        return True\n    elif n == 118:\n        return False\n    elif n == 119:\n        return True\n    elif n == 120:\n        return False\n    elif n == 121:\n        return True\n    elif n == 122:\n        return False\n    elif n == 123:\n        return True\n    elif n == 124:\n        return False\n    elif n == 125:\n        return True\n    elif n == 126:\n        return False\n    elif n == 127:\n        return True\n    elif n == 128:\n        return False\n    elif n == 129:\n        return True\n    elif n == 130:\n        return False\n    elif n == 131:\n        return True\n    elif n == 132:\n        return False\n    elif n == 133:\n        return True\n    elif n == 134:\n        return False\n    elif n == 135:\n        return True\n    elif n == 136:\n        return False\n    elif n == 137:\n        return True\n    elif n == 138:\n        return False\n    elif n == 139:\n        return True\n    elif n == 140:\n        return False\n    elif n == 141:\n        return True\n    elif n == 142:\n        return False\n    elif n == 143:\n        return True\n    elif n == 144:\n        return False\n    elif n == 145:\n        return True\n    elif n == 146:\n        return False\n    elif n == 147:\n        return True\n    elif n == 148:\n        return False\n    elif n == 149:\n        return True\n    elif n == 150:\n        return False\n    elif n == 151:\n        return True\n    elif n == 152:\n        return False\n    elif n == 153:\n        return True\n    elif n == 154:\n        return False\n    elif n == 155:\n        return True\n    elif n == 156:\n        return False\n    elif n == 157:\n        return True\n    elif n == 158:\n        return False\n    elif n == 159:\n        return True\n    elif n == 160:\n        return False\n    elif n == 161:\n        return True\n    elif n == 162:\n        return False\n    elif n == 163:\n        return True\n    elif n == 164:\n        return Fals"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Write your code here\n    #recurse on the first and last number \n    if n <= 1:\n        return True\n    if n <= 2:\n        return False\n    if n % 2 == 0:\n        return is_polite(n-1) and is_polite(n-2)\n    if n % 2!= 0:\n        return False\n    return is_polite(n-3) and is_polite(n-1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return False\n    else:\n        n = abs(n)\n        while n > 0:\n            if n % 2 == 0:\n                return True\n            n = n // 2\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 50\n    elif n == 6:\n        return 200\n    elif n == 7:\n        return 500\n    elif n == 8:\n        return 1000\n    elif n == 9:\n        return 10000\n    elif n == 10:\n        return 50000\n    elif n == 11:\n        return 100000\n    elif n == 12:\n        return 1000000\n    elif n == 13:\n        return 10000000\n    elif n == 14:\n        return 100000000\n    elif n == 15:\n        return 1000000000\n    elif n == 16:\n        return 1000000000000\n    elif n == 17:\n        return 10000000000000\n    elif n == 18:\n        return 1000000000000000\n    elif n == 19:\n        return 10000000000000000\n    elif n == 20:\n        return 100000000000000000\n    elif n == 21:\n        return 10000000000000000000\n    elif n == 22:\n        return 1000000000000000200\n    elif n == 23:\n        return 1000000000000000400\n    elif n == 24:\n        return 1000000000000000800\n    elif n == 25:\n        return 1000000000000001000\n    elif n == 26:\n        return 1000000000000002000\n    elif n == 27:\n        return 1000000000000004000\n    elif n == 28:\n        return 1000000000000008000\n    elif n == 29:\n        return 10000000000000010000\n    elif n == 30:\n        return 10000000000000020000\n    elif n == 31:\n        return 10000000000000030000\n    elif n == 32:\n        return 10000000000000040000\n    elif n == 33:\n        return 10000000000000050000\n    elif n == 34:\n        return 10000000000000060000\n    elif n == 35:\n        return 100000000000000700000\n    elif n == 36:\n        return 100000000000000750000\n    elif n == 37:\n        return 10000000000000080000\n    elif n == 38:\n        return 10000000000000090000\n    elif n == 39:\n        return 100000000000000100001\n    elif n == 40:\n        return 100000000000000200001\n    elif n == 41:\n        return 1000000000000003000000\n    elif n == 42:\n        return 1000000000000004000000\n    elif n == 43:\n        return 1000000000000005000000\n    elif n == 44:\n        return 1000000000000006000000\n    elif n == 45:\n        return 1000000000000007000000\n    elif n == 46:\n        return 1000000000000008000000\n    elif n == 47:\n        return 1000000000000009000000\n    elif n == 48:\n        return 100000000000000100001\n    elif n == 49:\n        return 100000000000000200001\n    elif n == 50:\n        return 1000000000000003000000\n    elif n == 51:\n        return 1000000000000004000000\n    elif n == 52:\n        return 1000000000000005000000\n    elif n == 53:\n        return 1000000000000006000000\n    elif n == 54:\n        return 1000000000000007000000\n    elif n == 55:\n        return 1000000000000008000000\n    elif n == 56:\n        return 1000000000000009000000\n    elif n == 57:\n        return 100000000000000100001\n    elif n == 58:\n        return 100000000000000200001\n    elif n == 59:\n        return 1000000000000003000000\n    elif n == 60:\n        return 1000000000000004000000\n    elif n == 61:\n        return 1000000000000005000000\n    elif n == 62:\n        return 1000000000000006000000\n    elif n == 63:\n        return 1000000000000007000000\n    elif n == 64:\n        return 1000000000000008000000\n    elif n == 65:\n        return 1000000000000009000000\n    elif n == 66:\n        return 100000000000000100001\n    elif n == 67:\n        return 100000000000000200001\n    elif n == 68:\n        return 1000000000000003000000\n    elif n == 69:\n        return 1000000000000004000000\n    elif n == 70:\n        return 1000000000000005000000\n    elif n == 71:\n        return 1000000000000006000000\n    elif n == 72:\n        return 1000000000000007000000\n    elif n == 73:\n        return 1000000000000008000000\n    elif n == 74:\n        return 1000000000000009000000\n    elif n == 75:\n        return 100000000000000100001\n    elif n == 76:\n        return 100000000000000200001\n    elif n == 77:\n        return 1000000000000003000000\n    elif n == 78:\n        return 1000000000000004000000\n    elif n == 79:\n        return 1000000000000005000000\n    elif n == 80:\n        return 1000000000000006000000\n    elif n == 81:\n        return 1000000000000007000000\n    elif n == 82:\n        return 1000000000000008000000\n    elif n == 83:\n        return 1000000000000009000000\n    elif n == 84:\n        return 100000000000000100001\n    elif n == 85:\n        return 100000000000000200001\n    elif n == 86:\n        return 1000000000000003000000\n    elif n == 87:\n        return 1000000000000004000000\n    elif n == 88:\n        return 1000000000000005000000\n    elif n == 89:\n        return 1000000000000006000000\n    elif n == 90:\n        return 1000000000000007000000\n    elif n == 91:\n        return 1000000000000008000000\n    elif n == 92:\n        return 1000000000000009000000\n    elif n == 93:\n        return 100000000000000100001\n    elif n == 94:\n        return 100000000000000200001\n    elif n == 95:\n        return 1000000000000003000000\n    elif n == 96:\n        return 1000000000000004000000\n    elif n == 97:\n        return 1000000000000005000000\n    elif n == 98:\n        return 1000000000000006000000\n    elif n == 99:\n        return 1000000000000007000000\n    elif n == 100:\n        return 1000000000000008000000\n    elif n == 101:\n        return 1000000000000009000000\n    elif n == 102:\n        return 100000000000000100001\n    elif n == 103:\n        return 100000000000000200001\n    elif n == 104:\n        return 1000000000000003000000\n    elif n == 105:\n        return 1000000000000004000000\n    elif n == 106:\n        return 1000000000000005000000\n    elif n == 107:\n        return 1000000000000006000000\n    elif n == 108:\n        return 1000000000000007000000\n    elif n == 109:\n        return 1000000000000008000000\n    elif n == 110:\n        return 1000000000000009000000\n    elif n == 111:\n        return 100000000000000100001\n    elif n == 112:\n        return 100000000000000200001\n    elif n == 113:\n        return 1000000000000003000000\n    elif n == 114:\n        return 1000000000000004000000\n    elif n == 115:\n        return 1000000000000005000000\n    elif n == 116:\n        return 1000000000000006000000\n    elif n == 117:\n        return 1000000000000007000000\n    elif n == 118:\n        return 1000000000000008000000\n    elif n == 119:\n        return 1000000000000009000000\n    elif n == 120:\n        return 100000000000000100001\n    elif n == 121:\n        return 100000000000000200001\n    elif n == 122:\n        return 1000000000000003000000\n    elif n == 123:\n        return 1000000000000004000000\n    elif n == 124:\n        return 1000000000000005000000\n    elif n == 125:\n        return 1000000000000006000000\n    elif n == 126:\n        return 1000000000000007000000\n    elif n == 127:\n        return 1000000000000008000000\n    elif n == 128:\n        return 1000000000000009000000\n    elif n == 129:\n        return 1000000000000001000"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n % 10) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0:\n        return 'Valid number'\n    if n==1:\n        return 'Valid number'\n    if n==2:\n        return 'Valid number'\n    if n==3:\n        return 'Valid number'\n    if n==4:\n        return 'Valid number'\n    if n==5:\n        return 'Valid number'\n    if n==6:\n        return 'Valid number'\n    if n==7:\n        return 'Valid number'\n    if n==8:\n        return 'Valid number'\n    if n==9:\n        return 'Valid number'\n    if n==10:\n        return 'Valid number'\n    if n==11:\n        return 'Valid number'\n    if n==12:\n        return 'Valid number'\n    if n==13:\n        return 'Valid number'\n    if n==14:\n        return 'Valid number'\n    if n==15:\n        return 'Valid number'\n    if n==16:\n        return 'Valid number'\n    if n==17:\n        return 'Valid number'\n    if n==18:\n        return 'Valid number'\n    if n==19:\n        return 'Valid number'\n    if n==20:\n        return 'Valid number'\n    if n==21:\n        return 'Valid number'\n    if n==22:\n        return 'Valid number'\n    if n==23:\n        return 'Valid number'\n    if n==24:\n        return 'Valid number'\n    if n==25:\n        return 'Valid number'\n    if n==26:\n        return 'Valid number'\n    if n==27:\n        return 'Valid number'\n    if n==28:\n        return 'Valid number'\n    if n==29:\n        return 'Valid number'\n    if n==30:\n        return 'Valid number'\n    if n==31:\n        return 'Valid number'\n    if n==32:\n        return 'Valid number'\n    if n==33:\n        return 'Valid number'\n    if n==34:\n        return 'Valid number'\n    if n==35:\n        return 'Valid number'\n    if n==36:\n        return 'Valid number'\n    if n==37:\n        return 'Valid number'\n    if n==38:\n        return 'Valid number'\n    if n==39:\n        return 'Valid number'\n    if n==40:\n        return 'Valid number'\n    if n==41:\n        return 'Valid number'\n    if n==42:\n        return 'Valid number'\n    if n==43:\n        return 'Valid number'\n    if n==44:\n        return 'Valid number'\n    if n==45:\n        return 'Valid number'\n    if n==46:\n        return 'Valid number'\n    if n==47:\n        return 'Valid number'\n    if n==48:\n        return 'Valid number'\n    if n==49:\n        return 'Valid number'\n    if n==50:\n        return 'Valid number'\n    if n==51:\n        return 'Valid number'\n    if n==52:\n        return 'Valid number'\n    if n==53:\n        return 'Valid number'\n    if n==54:\n        return 'Valid number'\n    if n==55:\n        return 'Valid number'\n    if n==56:\n        return 'Valid number'\n    if n==57:\n        return 'Valid number'\n    if n==58:\n        return 'Valid number'\n    if n==59:\n        return 'Valid number'\n    if n==60:\n        return 'Valid number'\n    if n==61:\n        return 'Valid number'\n    if n==62:\n        return 'Valid number'\n    if n==63:\n        return 'Valid number'\n    if n==64:\n        return 'Valid number'\n    if n==65:\n        return 'Valid number'\n    if n==66:\n        return 'Valid number'\n    if n==67:\n        return 'Valid number'\n    if n==68:\n        return 'Valid number'\n    if n==69:\n        return 'Valid number'\n    if n==70:\n        return 'Valid number'\n    if n==71:\n        return 'Valid number'\n    if n==72:\n        return 'Valid number'\n    if n==73:\n        return 'Valid number'\n    if n==74:\n        return 'Valid number'\n    if n==75:\n        return 'Valid number'\n    if n==76:\n        return 'Valid number'\n    if n==77:\n        return 'Valid number'\n    if n==78:\n        return 'Valid number'\n    if n==79:\n        return 'Valid number'\n    if n==80:\n        return 'Valid number'\n    if n==81:\n        return 'Valid number'\n    if n==82:\n        return 'Valid number'\n    if n==83:\n        return 'Valid number'\n    if n==84:\n        return 'Valid number'\n    if n==85:\n        return 'Valid number'\n    if n==86:\n        return 'Valid number'\n    if n==87:\n        return 'Valid number'\n    if n==88:\n        return 'Valid number'\n    if n==89:\n        return 'Valid number'\n    if n==90:\n        return 'Valid number'\n    if n==91:\n        return 'Valid number'\n    if n==92:\n        return 'Valid number'\n    if n==93:\n        return 'Valid number'\n    if n==94:\n        return 'Valid number'\n    if n==95:\n        return 'Valid number'\n    if n==96:\n        return 'Valid number'\n    if n==97:\n        return 'Valid number'\n    if n==98:\n        return 'Valid number'\n    if n==99:\n        return 'Valid number'\n    if n==100:\n        return 'Valid number'\n    if n==101:\n        return 'Valid number'\n    if n==102:\n        return 'Valid number'\n    if n==103:\n        return 'Valid number'\n    if n==104:\n        return 'Valid number'\n    if n==105:\n        return 'Valid number'\n    if n==106:\n        return 'Valid number'\n    if n==107:\n        return 'Valid number'\n    if n==108:\n        return 'Valid number'\n    if n==109:\n        return 'Valid number'\n    if n==110:\n        return 'Valid number'\n    if n==111:\n        return 'Valid number'\n    if n==112:\n        return 'Valid number'\n    if n==113:\n        return 'Valid number'\n    if n==114:\n        return 'Valid number'\n    if n==115:\n        return 'Valid number'\n    if n==116:\n        return 'Valid number'\n    if n==117:\n        return 'Valid number'\n    if n==118:\n        return 'Valid number'\n    if n==119:\n        return 'Valid number'\n    if n==120:\n        return 'Valid number'\n    if n==121:\n        return 'Valid number'\n    if n==122:\n        return 'Valid number'\n    if n==123:\n        return 'Valid number'\n    if n==124:\n        return 'Valid number'\n    if n==125:\n        return 'Valid number'\n    if n==126:\n        return 'Valid number'\n    if n==127:\n        return 'Valid number'\n    if n==128:\n        return 'Valid number'\n    if n==129:\n        return 'Valid number'\n    if n==130:\n        return 'Valid number'\n    if n==131:\n        return 'Valid number'\n    if n==132:\n        return 'Valid number'\n    if n==133:\n        return 'Valid number'\n    if n==134:\n        return 'Valid number'\n    if n==135:\n        return 'Valid number'\n    if n==136:\n        return 'Valid number'\n    if n==137:\n        return 'Valid number'\n    if n==138:\n        return 'Valid number'\n    if n==139:\n        return 'Valid number'\n    if n==140:\n        return 'Valid number'\n    if n==141:\n        return 'Valid number'\n    if n==142:\n        return "
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    l=[]\n    for i in range(n): \n        l.append(i+1)\n    return l[math.floor(n/2)-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n % 2 == 0:\n        n /= 2\n        return n\n    else:\n        n = n * 2\n        return n\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 0\n    if n == 3: \n        return 1\n    if n == 4: \n        return 1\n    if n == 5: \n        return 1\n    if n == 6: \n        return 1\n    if n == 7: \n        return 1\n    if n == 8: \n        return 1\n    if n == 9: \n        return 1\n    if n == 10: \n        return 1\n    if n == 11: \n        return 1\n    if n == 12: \n        return 1\n    if n == 13: \n        return 1\n    if n == 14: \n        return 1\n    if n == 15: \n        return 1\n    if n == 16: \n        return 1\n    if n == 17: \n        return 1\n    if n == 18: \n        return 1\n    if n == 19: \n        return 1\n    if n == 20: \n        return 1\n    if n == 21: \n        return 1\n    if n == 22: \n        return 1\n    if n == 23: \n        return 1\n    if n == 24: \n        return 1\n    if n == 25: \n        return 1\n    if n == 26: \n        return 1\n    if n == 27: \n        return 1\n    if n == 28: \n        return 1\n    if n == 29: \n        return 1\n    if n == 30: \n        return 1\n    if n == 31: \n        return 1\n    if n == 32: \n        return 1\n    if n == 33: \n        return 1\n    if n == 34: \n        return 1\n    if n == 35: \n        return 1\n    if n == 36: \n        return 1\n    if n == 37: \n        return 1\n    if n == 38: \n        return 1\n    if n == 39: \n        return 1\n    if n == 40: \n        return 1\n    if n == 41: \n        return 1\n    if n == 42: \n        return 1\n    if n == 43: \n        return 1\n    if n == 44: \n        return 1\n    if n == 45: \n        return 1\n    if n == 46: \n        return 1\n    if n == 47: \n        return 1\n    if n == 48: \n        return 1\n    if n == 49: \n        return 1\n    if n == 50: \n        return 1\n    if n == 51: \n        return 1\n    if n == 52: \n        return 1\n    if n == 53: \n        return 1\n    if n == 54: \n        return 1\n    if n == 55: \n        return 1\n    if n == 56: \n        return 1\n    if n == 57: \n        return 1\n    if n == 58: \n        return 1\n    if n == 59: \n        return 1\n    if n == 60: \n        return 1\n    if n == 61: \n        return 1\n    if n == 62: \n        return 1\n    if n == 63: \n        return 1\n    if n == 64: \n        return 1\n    if n == 65: \n        return 1\n    if n == 66: \n        return 1\n    if n == 67: \n        return 1\n    if n == 68: \n        return 1\n    if n == 69: \n        return 1\n    if n == 70: \n        return 1\n    if n == 71: \n        return 1\n    if n == 72: \n        return 1\n    if n == 73: \n        return 1\n    if n == 74: \n        return 1\n    if n == 75: \n        return 1\n    if n == 76: \n        return 1\n    if n == 77: \n        return 1\n    if n == 78: \n        return 1\n    if n == 79: \n        return 1\n    if n == 80: \n        return 1\n    if n == 81: \n        return 1\n    if n == 82: \n        return 1\n    if n == 83: \n        return 1\n    if n == 84: \n        return 1\n    if n == 85: \n        return 1\n    if n == 86: \n        return 1\n    if n == 87: \n        return 1\n    if n == 88: \n        return 1\n    if n == 89: \n        return 1\n    if n == 90: \n        return 1\n    if n == 91: \n        return 1\n    if n == 92: \n        return 1\n    if n == 93: \n        return 1\n    if n == 94: \n        return 1\n    if n == 95: \n        return 1\n    if n == 96: \n        return 1\n    if n == 97: \n        return 1\n    if n == 98: \n        return 1\n    if n == 99: \n        return 1\n    if n == 100: \n        return 1\n    if n == 101: \n        return 1\n    if n == 102: \n        return 1\n    if n == 103: \n        return 1\n    if n == 104: \n        return 1\n    if n == 105: \n        return 1\n    if n == 106: \n        return 1\n    if n == 107: \n        return 1\n    if n == 108: \n        return 1\n    if n == 109: \n        return 1\n    if n == 110: \n        return 1\n    if n == 111: \n        return 1\n    if n == 112: \n        return 1\n    if n == 113: \n        return 1\n    if n == 114: \n        return 1\n    if n == 115: \n        return 1\n    if n == 116: \n        return 1\n    if n == 117: \n        return 1\n    if n == 118: \n        return 1\n    if n == 119: \n        return 1\n    if n == 120: \n        return 1\n    if n == 121: \n        return 1\n    if n == 122: \n        return 1\n    if n == 123: \n        return 1\n    if n == 124: \n        return 1\n    if n == 125: \n        return 1\n    if n == 126: \n        return 1\n    if n == 127: \n        return 1\n    if n == 128: \n        return 1\n    if n == 129: \n        return 1\n    if n == 130: \n        return 1\n    if n == 131: \n        return 1\n    if n == 132: \n        return 1\n    if n == 133: \n        return 1\n    if n == 134: \n        return 1\n    if n == 135: \n        return 1\n    if n == 136: \n        return 1\n    if n == 137: \n        return 1\n    if n == 138: \n        return 1\n    if n == 139: \n        return 1\n    if n == 140: \n        return 1\n    if n == 141: \n        return 1\n    if n == 142: \n        return 1\n    if n == 143: \n        return 1\n    if n == 144: \n        return 1\n    if n == 145: \n        return 1\n    if n == 146: \n        return 1\n    if n == 147: \n        return 1\n    if n == 148: \n        return 1\n    if n == 149: \n        return 1\n    if n == 150: \n        return 1\n    if n == 151: \n        return 1\n    if n == 152: \n        return 1\n    if n == 153: \n        return 1\n    if n == 154: \n        return 1\n    if n == 155: \n        return 1\n    if n == 156: \n        return 1\n    if n == 157: \n        return 1\n    if n == 158: \n        return 1\n    if n == 159: \n        return 1\n    if n == 160: \n        return 1\n    if n == 161: \n        return 1\n    if n == 162: \n        return 1\n    if n == 163: \n        return 1\n    if n == 164: \n        return 1\n    if n == 165: \n        return 1\n    if n == 166"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # Create a loop where a number can be found\n    for i in range(1,n+1):\n        if (n % i == 0):\n            return i\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = list(l1)\n    for i in range(0, len(l1)):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j]:\n                l1[i], l1[j] = l1[j], l1[i]\n    return l1"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # if this code is broken for now, there is a bug in python\n    # if the string is empty, then it returns an empty list\n    # if there is only one item in the list, then you can return it\n    # also, check if you have duplicates\n    # if the return value is a single list, then it will be a single element list\n    if len(l1) == 1:\n        return [l1]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n=len(l1)\n    pair=[(l1[0],l1[1])]\n    for i in range(2,n):\n        if l1[i]!=l1[i-1]:\n            pair.append((l1[i],l1[i-1]))\n    return pair\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(a, b) for a, b in zip(l1, l1[1:])]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    prev = -1\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1]:\n            res.append([l1[i],l1[i+1]])\n            if l1[i]!= prev:\n                prev = l1[i]\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    list1=[]\n    for x in range(len(l1)-1):\n        for y in range(x+1, len(l1)):\n            if l1[x] == l1[y] and l1[x] not in list1:\n                list1.append((l1[x], l1[y]))\n    return list1\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    x = []\n    for i in range(len(l1)):\n        for j in range(i + 1, len(l1)):\n            x.append([l1[i], l1[j]])\n    return x\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [list(i) for i in itertools.product(*[l1[i:] for i in range(len(l1))])]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(a,b) for a,b in zip(l1, l1[1:])]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1, 2)]\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for num in arr:\n        if num + sum == sum:\n            pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1):\n            if arr[i]+arr[j] == sum:\n                count = count+1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i]+arr[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairCount = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairCount += 1\n    return pairCount\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if sum <= 0:\n        return 0\n    else:\n        # count the number of pairs where sum is equal to the number of numbers in the list\n        pairs = 0\n        for num in arr:\n            if num == sum:\n                pairs += 1\n        return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                pairs+=1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in arr:\n        for j in arr:\n            if (i + j) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # test 1\n    pairs = []\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i]+arr[j]:\n                pairs.append((arr[i],arr[j]))\n    # test 2\n    count = 0\n    for i in range(len(pairs)):\n        if pairs[i][1] == sum:\n            count += 1\n    # test 3\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)!=len(li2):\n        return [-1]\n    li_return=[]\n    for i in range(0,len(li1)):\n        if li1[i]!=li2[i]:\n            li_return.append(li1[i])\n    return li_return\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1 = []\n    l2 = []\n    for i in li1:\n        l1.append(i)\n    for i in li2:\n        l2.append(i)\n    return l1-l2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [i-j for i,j in zip(li1,li2)]\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # if both lists are empty\n    if li1==[] and li2==[]:\n        return 0\n    # if only one list is empty\n    elif li1==[] or li2==[]:\n        return 0\n    # if both lists are not empty\n    else:\n        return li1[0]-li2[0]"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    '''\n    li1 = [1,2,3]\n    li2 = [4,5,6]\n    \n    output = li1 - li2\n    '''\n    li1 = [1,2,3]\n    li2 = [4,5,6]\n    \n    output = li1 - li2\n    return output\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d1=set(li1)\n    d2=set(li2)\n    return d1-d2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_array = []\n    for index in range(len(li1)):\n        if li1[index]!= li2[index]:\n            diff_array.append(li1[index]-li2[index])\n    return diff_array\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff.append(li1[i])\n    return diff\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n_sum = 0\n    for i in range(1, n + 1) : \n        if i % 2!= 0 : \n            n_sum += i ** 2\n    return n_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n) : \n        sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + 4 ** i\n    return sum\n    \ndef first_odd(n) : \n    '''\n    Write a python function to find the first odd number.\n    '''\n    for i in range(n):\n        if n%2!= 0:\n            return i+1\n    return 0\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    elif n%2 == 0:\n        return False\n    elif n%3 == 0:\n        return False\n    elif n%4 == 0:\n        return False\n    else:\n        for i in range(5, int(n**0.5) + 6, 6):\n            if n % i == 0:\n                return False\n        return True\n    \ndef perfect_number(n) : \n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    for i in range(2, int(n**0.5)+2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    first_n = n \n    odd_n = []\n    for i in range(n):\n        if i%2!=0:\n            odd_n.append(i**4)\n    return sum(odd_n)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum += (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + (i * i)\n    return sum \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # define a sum of first n natural numbers\n    sum = 0\n    # define a loop\n    for i in range(1, n) :\n        # if i is odd\n        if i % 2 == 0 :\n            # add to the sum\n            sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = n%4\n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    elif n == 2 : \n        return 2 \n    elif n == 3 : \n        return 3 \n    else : \n        return n * odd_num_sum(n-1) \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    ans = n**4\n    return ans\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(n)\n    if (n<=0) : \n        print (\"Please enter a positive integer\")\n    elif (n%2==0) : \n        print(\"{} squared is {}\".format(n, n*n))\n    elif (n%4==0) : \n        print(\"{} squared is {}\".format(n, n*n))\n    else : \n        n = n**3\n        print(\"{} squared is {}\".format(n, n*n))\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    q = deque()\n    open_parentheses = ['(','[','{']\n    close_parentheses = [')',']','}']\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # check if the expression is parentheses with length of 2 or more\n    if len(exp) % 2 == 0:\n        # if the expression is parenthesis with length of 2\n        for i in range(0, len(exp), 2):\n            # if the expression is balanced\n            if exp[i] == '(' and exp[i + 1] == ')':\n                # delete the brackets\n                exp = exp[:i] + exp[i + 2:]\n                # check if the parentheses are balanced\n                if check_expression(exp):\n                    return True\n                # move on to the next number\n                exp = exp[2:]\n    return False\n    \ndef solve_expression(expression):\n    '''\n    Write a function to solve an expression of the form '(a+b)(c)' that has no parentheses.\n    '''\n    # store all the possible operators in a list\n    operators = ['+', '-', '*', '/']\n    # store all the possible numbers in a list\n    numbers = list(range(0, 10))\n    # create a deque to keep track of all the operators in an expression\n    queue = deque()\n    # initialize a stack to keep track of all the numbers\n    stack = deque()\n    # store the result in the stack\n    result = []\n    # for the given expression\n    for i in expression:\n        # check if the current operator is an operator\n        if i not in operators:\n            # if not, remove the operator from the list\n            operators.remove(i)\n            # if the current operator is a number\n            if i in numbers:\n                # move on to the next number\n                numbers.remove(i)\n            # if the current operator is a bracket\n            elif i in stack:\n                # move on to the next number\n                numbers.remove(i)\n            # if the current operator is a bracket and is not a number\n            else:\n                # if the current operator is a number, and there is no number in the stack, add it to the stack\n                if i not in stack:\n                    stack.append(i)\n                # if the current operator is a number, add the current number to the stack\n                else:\n                    stack.append(numbers.popleft())\n        # if the current operator is an operator, then push the current operator to the stack\n        else:\n            # if the current operator is a number, and there is no number in the stack, add it to the stack\n            if i not in stack:\n                stack.append(i)\n            # if the current operator is a bracket, then move on to the next number\n            elif i in stack:\n                # check if the number is the same as the current number in the stack\n                if stack.index(i)!= stack.index(numbers.popleft()):\n                    # move on to the next number\n                    numbers.remove(numbers.popleft())\n                    stack.append(i)\n                # if the number is different, the current operator is a number\n                else:\n                    # if the current operator is a bracket, remove the current number from the stack\n                    if i not in stack:\n                        stack.remove(numbers.popleft())\n                        stack.append(i)\n                    # if the current operator is a bracket and the current number is a number, then move on to the next number\n                    else:\n                        stack.append(numbers.popleft())\n    # if the stack is empty, return the expression\n    if len(stack) == 0:\n        return expression\n    # if the stack has a number, then return the expression\n    elif len(stack) == 1:\n        return f'{stack[0]} {numbers.popleft()}'\n    # if the stack has a number and the number has a number in the stack, return the expression\n    elif len(stack) == 2:\n        return f'{stack[0]} {numbers.popleft()} {stack[1]}'\n    # if the number has a number in the stack, then remove the number from the stack\n    else:\n        return f'{stack[0]} {numbers.popleft()}'\n        \ndef is_palindrome(s):\n    '''\n    Check if a given string is a palindrome.\n    '''\n    # if the given string is empty\n    if len(s) == 0:\n        return True\n    # if the string is not empty\n    if len(s) == 1:\n        return s == s[::-1]\n    # if the string has a number in the string\n    else:\n        # if the string contains a number in the string\n        if any(i in s for i in range(10)):\n            # if the string is a palindrome\n            return True\n        # if the string contains a number and the number has a number in the string\n        else:\n            # if the number does not contain a number in the string\n            if all(i in s for i in range(10)):\n                return True\n            # if the number does contain a number and the number does not contain a number in the string\n            else:\n                return False\n        \ndef is_greater(a, b):\n    '''\n    Check if a given integer is greater than b.\n    '''\n    # if the given integer is less than b\n    if a < b:\n        # return false\n        return False\n    # if the given integer is greater than a\n    elif a > b:\n        # return true\n        return True\n    # if the given integer is equal to a\n    elif a == b:\n        # return true\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    if not stack:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = []\n    for i in exp:\n        if i == '(':\n            s.append(i)\n        else:\n            if len(s)!= 0:\n                s.pop()\n            else:\n                return False\n    if len(s)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = deque()\n    opening_parentheses = False\n    \n    for c in exp:\n        if c in \"({[\":\n            stack.append(c)\n        elif stack:\n            if c == ')':\n                if stack[-1]!= '(':\n                    return False\n                else:\n                    stack.pop()\n            elif c == '}':\n                if stack[-1]!= '{':\n                    return False\n                else:\n                    stack.pop()\n            else:\n                if stack:\n                    return False\n                else:\n                    return False\n    \n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    '''\n    #Debugging\n    print(\"Exp: \", exp)\n    print(\"Stack: \", stack)\n    print(\"Flag: \", flag)\n    '''\n    stack = deque()\n    flag = deque()\n    for i in exp:\n        if i in '({[':\n            stack.append(i)\n        elif i in ')}]':\n            if stack and stack[-1] == '(':\n                stack.pop()\n                flag.append(i)\n            else:\n                return 'error'\n        else:\n            return 'error'\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    n = len(exp)\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        for i in range(n//2):\n            if not check_expression(exp[i]):\n                return False\n        return check_expression(exp[n//2:n])\n    else:\n        if not check_expression(exp[0]):\n            return False\n        return check_expression(exp[1:n])\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    # expression = exp.split(\" \")\n    # stack.append(expression[0])\n    # stack.append(expression[0])\n    # print(stack)\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # If no parentheses are present, return the expression is not balanced\n    if len(exp) == 0:\n        return True\n    # If there are parentheses, we have to check if the left side of the parenthesis is balanced\n    if exp[0] == '(':\n        return check_expression(exp[1:])\n    # If the left side of the parenthesis is not balanced, we have to check if the right side is balanced\n    if exp[0] == ')':\n        return check_expression(exp[1:])\n    # If neither of the possible cases is possible, we have to return false. Otherwise, we have to return true.\n    return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = str(test_str)\n    if len(test_str) < K:\n        return \"Invalid string\"\n    else:\n        test_str_n = []\n        test_str_n.append(test_str)\n        test_str_n.append(test_str[1:])\n        for i in range(len(test_str_n)):\n            word = test_str_n[i]\n            if len(word) == K:\n                test_str_n[i] = word[1:]\n                test_str_n[i + 1] = test_str_n[i + 1][:-1]\n            elif len(word) < K:\n                return \"Invalid string\"\n        return test_str_n\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # For words with length K in string\n    #\n    #   Input: test_str = \"abcabc\", K = 2\n    #   Output: \"abc\"\n    #\n    #   Input: test_str = \"abcabc\", K = 1\n    #   Output: \"abc\"\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pattern = 'a'*K\n    pattern_list = [i for i in test_str]\n    res = pattern.join(pattern_list)\n    return res\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    results = [word for word in words if len(word) == K]\n    results = list(dict.fromkeys(results))\n    return''.join(results)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length_dict = {}\n    for char in test_str:\n        if char in length_dict:\n            length_dict[char] += 1\n        else:\n            length_dict[char] = 1\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    if K > len(test_str):\n        return None\n    start = 0\n    while start < len(test_str):\n        if test_str[start] == test_str[start + 1]:\n            del test_str[start + 1]\n            start += 1\n        else:\n            start += 1\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    test_str_len = len(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str.replace(K,\"\").strip().split(\" \")\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    # Create empty dic to hold words\n    dic = {}\n    # Loop through the string\n    for word in test_str.split():\n        # if the length of the word is less than the k \n        if len(word) <= K:\n            # If the word is not there in the dictionary then create new\n            # word and add it to the dictionary\n            dic[word] = 1\n        # if the length is greater than the k, then delete the word from the\n        # dictionary and add it to the dictionary \n        else:\n            dic[word] = 0\n    # return the dictionary\n    return dic\n    \n    \n    \n    \n    "
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Note: All the words in the string need to be stored in a hash table.\n    # This can be done using a hash table to store the words.\n    word_dict = {}\n    for word in test_str:\n        if word not in word_dict:\n            word_dict[word] = 1\n        else:\n            word_dict[word] += 1\n    for word in word_dict:\n        if word_dict[word] < K:\n            test_str = test_str.replace(word, \"\")\n    return test_str\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub_list = pattern.findall(text)\n    for i in range(0,len(sub_list)):\n        \n        if sub_list[i] == pattern:\n            return i\n    return None\n    \ndef find_sub_string_pattern(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string.\n    '''\n    return occurance_substring(text,pattern)\n    \ndef find_sub_string(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    return None,pos_substring\n    \ndef compare(list1,list2,pattern):\n    '''\n    Write a function to compare two lists. Return the index of the first match.\n    '''\n    list_list = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if pattern[i] in list1[j] and pattern[i] in list2[j]:\n                list_list.append(i)\n    return list_list\n    \ndef find_sub_string_pattern_with_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    return None,pos_substring\n    \ndef find_sub_string_without_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    return None,pos_substring\n    \ndef compare_with_check(list1,list2,pattern):\n    '''\n    Write a function to compare two lists. Return the index of the first match.\n    '''\n    list_list = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if pattern[i] in list1[j] and pattern[i] in list2[j]:\n                list_list.append(i)\n    return list_list\n    \ndef find_sub_string_without_check_with_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    return None,pos_substring\n    \ndef find_sub_string_without_check_without_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    return None,pos_substring\n    \ndef index_substring(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    return None,pos_substring\n    \ndef find_sub_string_without_check_without_check_with_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    return None,pos_substring\n    \ndef find_sub_string_without_check_without_check_without_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    return None,pos_substring\n    \ndef find_sub_string_without_check_without_check_without_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    return None,pos_substring\n    \ndef find_sub_string_with_check_with_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    pos_substring = pattern.find(text)\n    return text[pos_substring:],pos_substring\n    \ndef find_sub_string_with_check_without_check_with_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    pos_substring = pattern.find(text)\n    return text[pos_substring:],pos_substring\n    \ndef find_sub_string_without_check_without_check_with_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    pos_substring = pattern.find(text)\n    return text[pos_substring:],pos_substring\n    \ndef find_sub_string_without_check_without_check_without_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    pos_substring = pattern.find(text)\n    return text[pos_substring:],pos_substring\n    \ndef find_sub_string_with_check_without_check_without_check(text,pattern):\n    '''\n    Write a function to find the substring with pattern in a string. Return the matched substring and the start index.\n    '''\n    pos_substring = pattern.find(text)\n    if pos_substring > -1:\n        return text[pos_substring:],pos_substring\n    pos_substring = pattern.find(text)\n    return text[pos_substring:],pos_substring\n    \ndef compare_with_check_without_check(list1,list2,pattern):\n    '''\n    Write a function to compare two lists. Return the index of the first match.\n    '''\n    list_list = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if pattern[i] in list1[j] and pattern"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern=='':\n        return None\n    if pattern not in text:\n        return None\n    \n    j = 0\n    i = 0\n    while i<len(text):\n        if pattern[j]==text[i]:\n            i += 1\n        else:\n            if j==len(pattern)-1:\n                j=0\n                i += 1\n            else:\n                j+=1\n    return i-len(text)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=[]\n    for i in range(len(text)-len(pattern)+1):\n        result.append(pattern[i:i+len(pattern)])\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i=0\n    j=0\n    length=len(text)\n    while i < length:\n        if pattern[j].find(text[i])!= -1:\n            i=i+1\n        j=j+1\n    if i == length:\n        return None\n    else:\n        return i,j\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res = re.search(pattern, text)\n    if res == None:\n        return None\n    start = res.start()\n    end = res.end()\n    pattern = pattern.replace('*', '')\n    if '*' in pattern:\n        pattern = pattern.replace('*', '')\n        pattern = pattern.replace('[', '')\n        pattern = pattern.replace(']', '')\n    pattern = pattern.replace(',', '')\n    pattern = pattern.replace(';', '')\n    pattern = pattern.replace('(', '')\n    pattern = pattern.replace(')', '')\n    pattern = pattern.replace('{', '')\n    pattern = pattern.replace('}', '')\n    pattern = pattern.replace('[', '')\n    pattern = pattern.replace(']', '')\n    pattern = pattern.replace(':', '')\n    pattern = pattern.replace('=', '')\n    pattern = pattern.replace('*', '')\n    for i in range(len(pattern)):\n        if pattern[i] == '*':\n            start = i\n    for i in range(len(text)):\n        if text[i] == '*':\n            end = i\n    return text[start:end+1]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.replace(\"\\\\\", \"\")\n    text = re.sub(pattern, '', text)\n    if len(text) == 0:\n        return None\n    i,j=0,0\n    length=len(pattern)\n    while (j<len(text)):\n        if text[j]!= pattern[i]:\n            i=i+1\n            j=j+1\n            continue\n        j=j+1\n    return i,j\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub_pattern = re.compile(pattern)\n    \n    sub_text = sub_pattern.sub('', text)\n    \n    if sub_text == '':\n        return None\n    \n    else:\n        match_list = []\n        \n        for i in range(0,len(sub_text)):\n            match_list.append(sub_text[i:i+len(pattern)])\n        \n        return match_list\n    \ndef substring_to_list(text):\n    '''\n    Write a function to split a string and convert it to a list of all the substrings that occur.\n    '''\n    pattern = re.compile('(?:[a-zA-Z])(?=[A-Z])')\n    sub_text = pattern.findall(text)\n    sub_text_list = []\n    \n    for i in sub_text:\n        sub_text_list.append(i)\n    \n    return sub_text_list\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    n = len(text)\n    if not pattern:\n        return n\n    if pattern[0] == \"*\":\n        pattern = pattern[1:]\n        n = 1\n    if pattern[0] == \"?\":\n        pattern = pattern[1:]\n        n = 1\n    if pattern[0] == \".\":\n        pattern = pattern[1:]\n        n = 1\n    pattern = pattern.replace(\".\",\"\").replace(\",\",\"\").replace(\"-\",\"\").replace(\"?\",\"\").replace(\"*\",\"\").replace(\":\", \"\").replace(\";\",\"\").replace(\"/\",\"\").replace(\"+\",\"\").replace(\".\",\"\").lower()\n    substrings = []\n    for i in range(n):\n        if pattern[i] == \"?\" or pattern[i] == \"*\" or pattern[i] == \".\" or pattern[i] == \":\" or pattern[i] == \"/\" or pattern[i] == \":\":\n            continue\n        else:\n            substrings.append(text[i:])\n    return substrings\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text=text.lower()\n    pattern=pattern.lower()\n    pattern = re.sub(r'[^a-zA-Z0-9]+',' ',pattern)\n    pattern = re.sub(r'\\s+',' ',pattern)\n    pattern = pattern.replace(' ','')\n    res=re.search(pattern,text)\n    print(res)\n    if res is None:\n        print(\"No match\")\n    else:\n        print(res.group())\n        print(res.start())\n        print(res.end())\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd.append(nums[i])\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # if len(nums) == 1:\n    #     return False\n    # else:\n    #     for i in range(len(nums)):\n    #         if nums[i] % 2 == 1:\n    #             return False\n    #     return True\n    \n    # if len(nums) == 1:\n    #     return True\n    # else:\n    #     for i in range(len(nums)):\n    #         if nums[i] % 2 == 1:\n    #             return False\n    #     return True\n    \n    # if len(nums) == 1:\n    #     return True\n    # else:\n    #     for i in range(len(nums)):\n    #         if nums[i] % 2 == 1:\n    #             if nums[i] % 2!= 0:\n    #                 return False\n    #             else:\n    #                 continue\n    #             if nums[i] % 2 == 0:\n    #                 continue\n    #             else:\n    #                 return False\n    #     return True\n    # pass\n    \n    def odd_position(nums):\n        for i in range(len(nums)):\n            if nums[i] % 2!= 0:\n                return False\n        return True\n    \n    # if len(nums) == 1:\n    #     return True\n    # else:\n    #     for i in range(len(nums)):\n    #         if nums[i] % 2!= 0:\n    #             return False\n    #         else:\n    #             continue\n    #     return True\n    \n    # if len(nums) == 1:\n    #     return True\n    # else:\n    #     for i in range(len(nums)):\n    #         if nums[i] % 2 == 0:\n    #             continue\n    #         else:\n    #             return False\n    #     return True\n    \n    # pass\n    \n    \n    \n    # return even_position(nums) or odd_position(nums)\n    return odd_position(nums)\n    \n    \n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # your code goes here\n    return len([i for i in range(len(nums)) if i%2==1])==0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    even = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even += 1\n    return even > 1\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums == None or len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums == None or len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n    \ndef odd_even_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums == None or len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Code Here\n    l = []\n    i = 0\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            l.append(nums[i])\n    if len(l)%2==1:\n        return False\n    else:\n        return True\n    \ndef is_divisible(nums):\n    '''\n    Write a python function to check whether a list of numbers is divisible by any number.\n    '''\n    # Code Here\n    n = len(nums)\n    if n%2==0:\n        return False\n    else:\n        return True\n    "
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count_vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # TODO: replace the naive implementation with a faster solution\n    count_vowels = 0\n    for letter in test_str:\n        if letter in 'aeiouAEIOU':\n            count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for i in range(0, len(test_str)-2):\n        if test_str[i:i+3] in vowels:\n            count+=1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isalpha() and (i.lower() in 'aeiou'):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    #Initialize count dictionary.\n    count = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    #Loop through each character.\n    for char in test_str:\n        #Check if a vowel.\n        if char in count:\n            #Increment count by one.\n            count[char] += 1\n    #Return count dictionary.\n    return count\n    \n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for c in vowels:\n        if c in test_str:\n            count += test_str.count(c)\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # pass\n    count = 0\n    for char in test_str:\n        if char.lower() in 'aeiou':\n            count += 1\n    return count\n    # pass\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    char_dict = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    for c in test_str:\n        if c in 'aeiou':\n            char_dict[c] += 1\n    print(char_dict)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # trivial test case\n    if test_str == \"\":\n        return 0\n    vowels_count = 0\n    # all letters\n    for c in test_str:\n        # all letter which have 2 or more vowels\n        if c.isalpha():\n            if c.isupper():\n                if c.islower() and c in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n                    vowels_count += 2\n            else:\n                if c.islower() and c in ['A', 'E', 'I', 'O', 'U']:\n                    vowels_count += 1\n        # all letter which have 3 or more vowels\n        elif c.isdigit():\n            if c.isalpha() and c.isalnum() and c in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                vowels_count += 3\n    # for each char in the string, if it's vowel, add 1\n    return vowels_count\n    \ndef count_consonants(test_str):\n    '''\n    Write a function to count those characters which are consonants in the given string.\n    '''\n    # trivial test case\n    if test_str == \"\":\n        return 0\n    consonants_count = 0\n    # all letters\n    for c in test_str:\n        # all letters which have one or more consonants\n        if c.isalpha():\n            if c.isupper():\n                if c.islower() and c in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n                    consonants_count += 1\n            else:\n                if c.islower() and c in ['A', 'E', 'I', 'O', 'U']:\n                    consonants_count += 1\n        # all letter which have 2 or more consonants\n        elif c.isdigit():\n            if c.isalpha() and c.isalnum() and c in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                consonants_count += 1\n    # for each char in the string, if it's vowel, add 1\n    return consonants_count\n    \ndef count_punct(test_str):\n    '''\n    Write a function to count those characters which are punctuation in the given string.\n    '''\n    # trivial test case\n    if test_str == \"\":\n        return 0\n    punct_count = 0\n    # all letters\n    for c in test_str:\n        # all letter which have 1 or more punctuations\n        if c.isalnum():\n            if c.isupper():\n                if c.islower() and c in ['A', 'E', 'I', 'O', 'U']:\n                    punct_count += 1\n            else:\n                if c.islower() and c in ['A', 'E', 'I', 'O', 'U']:\n                    punct_count += 1\n        # all letter which have 2 or more punctuations\n        elif c.isdigit():\n            if c.isalpha() and c.isalnum() and c in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                punct_count += 1\n    # for each char in the string, if it's vowel, add 1\n    return punct_count\n    \ndef count_symbols(test_str):\n    '''\n    Write a function to count those characters which are symbols in the given string.\n    '''\n    # trivial test case\n    if test_str == \"\":\n        return 0\n    symbols_count = 0\n    # all letters\n    for c in test_str:\n        # all letter which have 1 or more symbols\n        if c.isalnum():\n            if c.isupper():\n                if c.islower() and c in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n                    symbols_count += 1\n            else:\n                if c.islower() and c in ['A', 'E', 'I', 'O', 'U']:\n                    symbols_count += 1\n        # all letter which have 2 or more symbols\n        elif c.isdigit():\n            if c.isalpha() and c.isalnum() and c in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                symbols_count += 1\n    # for each char in the string, if it's symbol, add 1\n    return symbols_count\n    \ndef count_digits(test_str):\n    '''\n    Write a function to count those characters which are digits in the given string.\n    '''\n    # trivial test case\n    if test_str == \"\":\n        return 0\n    digits_count = 0\n    # all letters\n    for c in test_str:\n        # all letter which have 1 or more digits\n        if c.isalnum():\n            if c.isupper():\n                if c.islower() and c in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n                    digits_count += 1\n            else:\n                if c.islower() and c in ['A', 'E', 'I', 'O', 'U']:\n                    digits_count += 1\n        # all letter which have 2 or more digits\n        elif c.isdigit():\n            if c.isalpha() and c.isalnum() and c in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                digits_count += 1\n    # for each char in the string, if it's digit, add 1\n    return digits_count\n    \ndef count_up(test_str):\n    '''\n    Write a function to count those characters which are up in the given string.\n    '''\n    # trivial test case\n    if test_str == \"\":\n        return 0\n    up_count = 0\n    # all letters\n    for c in test_str:\n        # all letter which have 1 or more up\n        if c.isalnum():\n            if c.isupper():\n                if c.islower() and c in ['A', 'E', 'I', 'O', 'U']:\n                    up_count += 1\n            else:\n                if c.islower() and c in ['A', 'E', 'I', 'O', 'U']:\n                    up_count += 1\n        # all letter which have 2 or more up\n        elif c.isdigit():\n            if c.isalpha() and c.isalnum() and c in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                up_count += 1\n    # for each char in the string, if it's up, add 1\n    return up_count\n    \ndef count_left(test_str):\n    '''\n    Write a function to count those characters which are left in the given string.\n    '''\n    # trivial test case\n    if test_str == \"\":\n        return 0\n    left_count = 0\n    # all letters\n    for c in test_str:\n        # all letter which have 1 or more left\n        if c.isalnum():\n            if c.isupper():\n                if c.islower() and c in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n                    left_count += 1\n            else:\n                if c.islower() and c in ['A', 'E', 'I', 'O', 'U']:\n                    left_count += 1\n        # all letter which have 2 or more left\n        elif c.isdigit():\n            if c.isalpha() and c.isalnum() and c in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                left_count += 1\n    # for each char in the string, if it's left, add 1\n    retur"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # The main code\n    # 1. loop thru and check for each element in the list\n    # 2. check if the element is not present in the list\n    # 3. if not present, return the element itself\n    # 4. if the element is present, check if it's non-repeated.\n    # 5. if not, return the sum of the non-repeated elements\n    # 6. else, return the sum of the non-repeated elements\n    # 7. If the entire list is non-repeated, return the sum\n    #\n    # return the sum of the non-repeated elements\n    \n    # you can use lambda function to do things like these\n    # you can write the code in a function\n    # you can write the code in a function\n    # or you can write the code in a function\n    #\n    # you can use a for loop with a while loop to iterate through the list\n    #\n    #\n    # for a in arr:\n    #     if a not in arr:\n    #         sum = sum + a\n    #     else:\n    #         # you can use a break statement to terminate the loop\n    #         # you can use a continue statement to continue a loop\n    #         # you can use a for loop to iterate through the list\n    #         break\n    #\n    # return sum\n    \n    # you can use a loop to iterate through the list\n    # using a while loop\n    #\n    # loop through the list\n    # sum = 0\n    # for a in arr:\n    #     if a not in arr:\n    #         sum = sum + a\n    #     else:\n    #         # you can use a break statement to terminate the loop\n    #         # you can use a continue statement to continue a loop\n    #         break\n    # return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if i!=0:\n            sum+=i\n    return sum\narr = list(range(100,200))\nprint(\"Sum of elements in given list is: \" + str(find_sum(arr)))\nprint(\"Sum of elements in given list is: \" + str(find_sum(arr)))\nprint(\"Sum of elements in given list is: \" + str(find_sum(arr)))"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_list = []\n    for i in arr:\n        if i not in sum_list:\n            sum_list.append(i)\n    return sum(sum_list)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # If the list is empty, return 0\n    if len(arr) == 0:\n        return 0\n    # initialize sum, length of arr\n    sum = 0\n    length = len(arr)\n    # traverse through the array\n    for i in range(length):\n        # check if the value is equal to the sum\n        if arr[i] == sum:\n            # add the value to the sum\n            sum += arr[i]\n    # return the sum\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for element in arr:\n        if element!= sum:\n            sum += element\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass "
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for x in arr:\n        if x!= x:\n            sum += x\n    return sum\narr = [10,5,3,8,9,2,17,20,1,4,6]\nprint(find_sum(arr)"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_sum = []\n    for i in range(len(arr)):\n        if (arr[i] not in arr_sum):\n            arr_sum.append(arr[i])\n    return sum(arr_sum)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    # loop through the list\n    for i in arr:\n        # find the current element\n        if i not in total:\n            total += i\n    return total\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_copy = list(list1)\n    list1_new = []\n    group = groupby(list1)\n    for group_key, group_value in group:\n        list1_new += list(list(group_value))\n    \n    return list1_new\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for i in list1:\n        # If the list is already concatenated\n        if isinstance(i, list):\n            # Use the groupby method to group the consecutive duplicates into sublists\n            grouped_i = list(groupby(i, key=lambda x: len(x)))\n            # If the first list is empty\n            if not grouped_i[0]:\n                # Remove the first element from the group, that is the duplicate.\n                grouped_i.pop(0)\n                # Add the first element to the list of sublists\n                list1.append(i)\n                # Repeat for all the sublists\n                for i in grouped_i[1:]:\n                    # Get the element from the group, that is the duplicate\n                    j = i[0]\n                    # Create a new list with the element from the group\n                    new_i = list(j)\n                    # Insert the element from the group into the list of sublists\n                    new_i.insert(0, j)\n                    # Append the element to the list of sublists\n                    list1.append(new_i)\n                    # Repeat for all the sublists\n                    for k in range(1, len(new_i)):\n                        # Get the element from the group, that is the duplicate\n                        z = new_i[k]\n                        # Create a new list with the element from the group\n                        new_z = list(z)\n                        # Insert the element from the group into the list of sublists\n                        new_z.insert(0, z)\n                        # Append the element to the list of sublists\n                        list1.append(new_z)\n                    # Repeat for all the sublists\n                    for l in range(1, len(new_i)):\n                        # Get the element from the group, that is the duplicate\n                        w = new_i[l]\n                        # Create a new list with the element from the group\n                        new_w = list(w)\n                        # Insert the element from the group into the list of sublists\n                        new_w.insert(0, w)\n                        # Append the element to the list of sublists\n                        list1.append(new_w)\n                        # Repeat for all the sublists\n                        for m in range(1, len(new_i)):\n                            # Get the element from the group, that is the duplicate\n                            x = new_i[m]\n                            # Create a new list with the element from the group\n                            new_x = list(x)\n                            # Insert the element from the group into the list of sublists\n                            new_x.insert(0, x)\n                            # Append the element to the list of sublists\n                            list1.append(new_x)\n        # If the list is not concatenated\n        else:\n            # Append the element to the list of sublists\n            list1.append(i)\n    # Return the list of sublists\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    counter = dict(groupby(list1))\n    return [list(v) for k, v in counter.items()]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1, lambda x: x not in x)\n    return [list(x) for k, x in groups]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l = []\n    for ele in list1:\n        l.append([ele])\n    return l\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_0 = list(list1)\n    n = len(list_0)\n    count = 0\n    dup = []\n    for i in range(n):\n        if list_0[i]!= list_0[i+1]:\n            count = count + 1\n        if count == 2:\n            dup.append(list_0[i])\n    return dup\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    group = groupby(list1)\n    sorted_lists = sorted(group, key=lambda x: x[0])\n    packed_lists = [list(sorted_lists[i][0]) for i in range(len(sorted_lists))]\n    return packed_lists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # WRITE YOUR SOLUTION\n    list2 = []\n    prev = None\n    prev2 = None\n    prev3 = None\n    prev4 = None\n    for i,j in groupby(list1):\n        if i!= prev and i!= prev2 and i!= prev3 and i!= prev4:\n            list2.append([i,j])\n        prev = i\n        prev2 = prev2 or prev\n        prev3 = prev3 or prev2\n        prev4 = prev4 or prev3\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    for i in list2:\n        if len(list3) >= 2:\n            list3.append([i, list3[len(list3)-1][1]])\n        else:\n            list3.append([i, list3[0][1]])\n    return list3\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # reverse_iterator = iter(reversed(list1))\n    # reverse_iterator = iter(list1)\n    # for i in reverse_iterator:\n    #     if i!= None:\n    #         i = i + reverse_iterator.next()\n    #         yield i, list1\n    for i in range(len(list1)):\n        if i!= len(list1) - 1 and list1[i + 1] == list1[i]:\n            list1[i] = None\n            list1[i + 1] = None\n        elif i == len(list1) - 1:\n            list1[i] = None\n        else:\n            yield i, list1\ndef is_matching(list1, list2):\n    '''\n    Write a function that returns True if and only if all the elements of list1 and list2 are equal.\n    '''\n    for x in range(len(list1)):\n        if list1[x]!= list2[x]:\n            return False\n    return True\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for i in list1:\n        if type(i) is list:\n            if len(i) not in dictionary:\n                dictionary[len(i)] = 1\n            else:\n                dictionary[len(i)] = dictionary[len(i)] + 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    # Step 1: Transform each list to tuple, and make it a list\n    for i in list1:\n        list2 = tuple(i)\n        if list2 not in unique_dict.keys():\n            unique_dict[list2] = 0\n        unique_dict[list2] += 1\n    return unique_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for element in list1:\n        if type(element) == tuple:\n            if element[0] in count_dict:\n                count_dict[element[0]] += 1\n            else:\n                count_dict[element[0]] = 1\n        else:\n            print('An element is not a tuple')\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict_ = {}\n    tuple_ = ()\n    for i in range(len(list1)):\n        dict_[list1[i]] = list1.count(list1[i])\n        tuple_ = tuple_ + (list1[i],)\n    return dict_, tuple_\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # loop through each element in the list\n    # if the list is not a tuple\n    # return the count\n    # else return a dictionary where the key is the element in the list, and the value is the number of occurrences\n    # if the list has only one element, the key is a tuple\n    # if there is multiple elements, the key is a tuple and the value is the number of occurrences\n    # return the dictionary\n    if not isinstance(list1, tuple):\n        return dict()\n    if len(list1) == 1:\n        return dict()\n    count = dict()\n    for i in range(len(list1)):\n        if not isinstance(list1[i], tuple):\n            return count\n        count[list1[i]] = dict()\n        for j in range(i+1, len(list1)):\n            count[list1[i]][list1[j]] = count[list1[i]].get(list1[j], 0)+1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    subs = dict()\n    temp_subs = set()\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            temp_subs.add(list1[i][j])\n    \n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j] in temp_subs:\n                subs[list1[i][j]] = len(list1[i]) - i\n    \n    return subs\n    \n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict_ = {}\n    for i in list1:\n        if type(i) is tuple:\n            if i in dict_:\n                dict_[i] += 1\n            else:\n                dict_[i] = 1\n    return dict_\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counter = {}\n    for i in range(len(list1)):\n        if list1[i] not in counter:\n            counter[list1[i]] = 1\n        else:\n            counter[list1[i]] += 1\n    return counter\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    a=[]\n    for i in range(len(list1)):\n        a.append(tuple(list1[i]))\n    return a\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    if test_list:\n        for i in range(1,len(test_list)+1):\n            for j in combinations(test_list,i):\n                result.append(tuple(j))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def combinations_rec(n,sum_list):\n        '''\n        Helper function to return the combinations of sums with tuples in the given tuple list\n        '''\n        if (n==0):\n            return []\n        \n        if (sum_list[n][0]!=0):\n            return combinations_rec(n-1,sum_list[:n]+[(sum_list[n][0]-1,sum_list[n][1])])\n        \n        else:\n            return combinations_rec(n-1,sum_list[:n]+[sum_list[n][1]])\n    \n    return combinations_rec(len(test_list),[(sum(tup),tup) for tup in test_list])\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if type(test_list) is not list:\n        print('Please input a valid list!')\n        return\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Base case\n    if len(test_list) == 0:\n        return []\n    \n    # Check if the element is in the tuple list\n    def is_in_tuple(element,tuple_list):\n        for i in range(len(tuple_list)):\n            if element in tuple_list[i]:\n                return True\n        return False\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # print(test_list)\n    # print(test_list[0])\n    # print(type(test_list[0]))\n    def calculate_sum(n):\n        return sum(map(lambda x:x[n], test_list))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    c = []\n    for i in test_list:\n        for j in combinations(i, 2):\n            c.append(j)\n    return c\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if not test_list:\n        return []\n    elif not test_list[0]:\n        return []\n    result = []\n    for i in test_list:\n        for j in combinations(test_list, i):\n            result.append(j)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def convert_tuples(t):\n        return tuple(sorted(t))\n    \n    if len(test_list) == 1:\n        return [convert_tuples(test_list[0])]\n    \n    else:\n        return [convert_tuples(combination(t)) for t in test_list]\n        \ndef find_combs_1(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    if len(test_list) == 1:\n        return [test_list]\n    \n    elif len(test_list) == 2:\n        return [tuple(sorted(test_list[:2]))]\n    \n    else:\n        return [tuple(sorted(combination(test_list[:2], 2)))] + find_combs_1(test_list[2:])\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(len(test_list)):\n        comb.append(combinations(test_list,i+1))\n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n    \n    comb_list = []\n    for i in range(len(test_list)):\n        for j in combinations(test_list, i + 1):\n            comb_list.append(tuple(j))\n    return comb_list\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    num_divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            num_divisors += 2\n        else:\n            num_divisors += 1\n    return num_divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Initialize count \n    count = 0 \n    # Loop through numbers \n    while (n > 1) : \n        # Check if the number is prime \n        if (n%2 == 0) : \n            # If it's an even number, increment count by 2 \n            count += 2\n            # Stop the loop \n            break \n        # If it's not an even number, increment count by 1 \n        else : \n            # Increment count by 2 \n            count += 2 \n            # Stop the loop \n            break \n        # Stop the loop \n        n = n // 2 \n    # Return the count \n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    is_divisible = True\n    count = 0\n    i = 2\n    while i <= n and is_divisible :\n        if n % i == 0 :\n            count += 1\n            is_divisible = False\n        else :\n            i += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 0\n    for i in range(1, n + 1): \n        if n % i == 0: \n            c = c + 1\n    return c \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(1, int(math.sqrt(n))) :\n        if (n % i == 0) : \n            return i\n    return 0\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [2,3,5,7]\n    check = 0\n    for i in divisors:\n        if n % i == 0:\n            check = check + 1\n    if check == 0:\n        return True\n    return False\ndef count_divisors_string(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [2,3,5,7]\n    check = 0\n    for i in divisors:\n        if n % i == 0:\n            check = check + 1\n    if check == 0:\n        return True\n    else:\n        return False\ndef count_divisors_string_2(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [2,3,5,7]\n    check = 0\n    for i in divisors:\n        if n % i == 0:\n            check = check + 1\n    if check == 0:\n        return True\n    else:\n        return False\ndef count_divisors_string_3(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [2,3,5,7]\n    check = 0\n    for i in divisors:\n        if n % i == 0:\n            check = check + 1\n    if check == 0:\n        return True\n    else:\n        return False\ndef count_divisors_string_4(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [2,3,5,7]\n    check = 0\n    for i in divisors:\n        if n % i == 0:\n            check = check + 1\n    if check == 0:\n        return True\n    else:\n        return False\ndef count_divisors_string_5(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [2,3,5,7]\n    check = 0\n    for i in divisors:\n        if n % i == 0:\n            check = check + 1\n    if check == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            count_divisors = count_divisors + 1\n    return count_divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if n % i == 0 :\n            sum += i \n    if sum == n : return True\n    else : return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    while i <= math.sqrt(n) :\n        if n % i == 0 :\n            return \"The number is divisible by {}\".format(i)\n        i += 2\n    return \"The number is NOT divisible by any number in the range of {}\".format(n)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                print(i)\n    return count > 0\ndef is_prime(n) :\n    '''\n    We define a prime number as an integer greater than 1 that is divisible by only one and itself. For example, 6 is a prime number, but it is not 6 and 6 itself.\n    '''\n    if n < 2 :\n        return False\n    if n == 2 :\n        return True\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    d = 5\n    while d * d <= n :\n        if n % d == 0 :\n            return False\n        d += 6\n    return True\ndef smallest_prime_factor(n) :\n    '''\n    We define a number as a factor of 2 or 3.\n    '''\n    #print(n)\n    if n == 2 or n == 3 :\n        return 2\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    #print(n)\n    factor_numbers = []\n    i = 4\n    while i <= math.sqrt(n) :\n        if n % i == 0 :\n            factor_numbers.append(i)\n            n //= i\n        else :\n            i += 6\n    if n > 2 :\n        factor_numbers.append(n)\n    #print(factor_numbers)\n    #print(n)\n    return min(factor_numbers)"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = []\n    for i in range(0,len(arr)-1):\n        if (arr[i]%2 == 1):\n            odd_length.append(arr[i])\n    return sum(odd_length)\n        \n        \n    \n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    if not arr or len(arr) == 1:\n        return sum(arr)\n    for i in range(0, len(arr) - 2):\n        if i == 0 or i == len(arr) - 2:\n            result += arr[i]\n        else:\n            if arr[i] % 2 == 0:\n                result += arr[i]\n            else:\n                result += arr[i] + arr[i + 1]\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_lengths = []\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            odd_lengths.append(arr[i])\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Your code here\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 1:\n            odd_length_sum += arr[i]\n    return odd_length_sum"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 1):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0, len(arr)):\n        s = s + arr[i]\n    return s\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # convert the RGB values to the hsv values\n    r_h = r / 255\n    r_s = r_h / 100\n    r_v = r_h\n    g_h = g / 255\n    g_s = g_h / 100\n    g_v = g_h\n    b_h = b / 255\n    b_s = b_h / 100\n    b_v = b_h\n    \n    # get the hsv values\n    h = (r_s + g_s + b_s) / 3\n    \n    # combine the hsv values with the original h value to get the hsv values\n    h_s = (r_h + g_h + b_h) / 3\n    \n    # get the hsv values for the minimum of the two values\n    h_v = (r_s + g_s + b_s) / 3\n    \n    # get the sigmoid function\n    s = 1 / (1 + np.exp(h_s - h_v))\n    \n    # set the hsv values to the sigmoid function result\n    return h, s, v\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color.\n    '''\n    \n    # convert the hsv values to the RGB values\n    r = v * s * 255\n    \n    # get the r values\n    r = int(r)\n    \n    # get the g values\n    g = v - (r/255)\n    \n    # get the b values\n    b = r - (g/255)\n    \n    # set the rgb values to the hue\n    return r, g, b\n    \ndef main():\n    \n    # set up the values to be written to the rgb and hsv values arrays\n    rgb_values = []\n    hsv_values = []\n    \n    # setup the tester function for the rgb_to_hsv function\n    def rgb_to_hsv_tester(r, g, b):\n        '''\n        Write a function to convert rgb color to hsv color.\n        '''\n        \n        # convert the RGB values to the hsv values\n        r_h, r_s, r_v = rgb_to_hsv(r, g, b)\n        \n        # convert the hsv values to the rgb values\n        r, g, b = hsv_to_rgb(r_h, r_s, r_v)\n        \n        # write the rgb values to the rgb and hsv arrays\n        rgb_values.append(r)\n        hsv_values.append(g)\n        hsv_values.append(b)\n        \n    # setup the tester function for the rgb_to_hsv function\n    def rgb_to_hsv_tester_2(r, g, b):\n        '''\n        Write a function to convert rgb color to hsv color.\n        '''\n        \n        # convert the RGB values to the hsv values\n        r_h, r_s, r_v = rgb_to_hsv(r, g, b)\n        \n        # convert the hsv values to the rgb values\n        r, g, b = hsv_to_rgb(r_h, r_s, r_v)\n        \n        # write the rgb values to the rgb and hsv arrays\n        rgb_values.append(r)\n        hsv_values.append(g)\n        hsv_values.append(b)\n        \n    # main loop to run the tests for the rgb and hsv values arrays\n    for r in range(0, 255):\n        for g in range(0, 255):\n            for b in range(0, 255):\n                rgb_to_hsv_tester(r, g, b)\n                rgb_to_hsv_tester_2(r, g, b)\n                \n    # get the rgb and hsv values and write the rgb and hsv arrays to the tester function\n    rgb_values.append(255)\n    hsv_values.append(255)\n    \n    # write the rgb and hsv arrays to the tester function\n    tester(rgb_values, hsv_values, 'rgb_to_hsv')\n    \n    # main loop to run the tests for the rgb and hsv values arrays\n    for r in range(0, 255):\n        for g in range(0, 255):\n            for b in range(0, 255):\n                rgb_to_hsv_tester_2(r, g, b)\n                \n    # get the rgb and hsv values and write the rgb and hsv arrays to the tester function\n    rgb_values.append(255)\n    hsv_values.append(255)\n    \n    # write the rgb and hsv arrays to the tester function\n    tester(rgb_values, hsv_values, 'rgb_to_hsv_2')\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == g == b == 0:\n        return (0, 0, 0)\n    i = 255 / max(r, g, b)\n    h = 0.0 if r == g == b == 0 else (0.0 * i)\n    s = 0.0 if r == g == b == 0 else (i * (180 / 255))\n    v = 0.0 if r == g == b == 0 else (i * (180 / 255))\n    return hsv_to_rgb(h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    \n    if r == 0 and g == 0 and b == 0:\n        return (0, 0, 0)\n    elif r == 0 and g == 0:\n        return (0, 0.188, 0.33)\n    elif r == 0:\n        return (0.5, 0.125, 0.125)\n    elif g == 0:\n        return (0.3, 0.125, 0.3)\n    else:\n        r = ((r / 255) + 0.0175) * 255\n        g = ((g / 255) + 0.0175) * 255\n        b = ((b / 255) + 0.0175) * 255\n        \n        # HSV\n        # Hue\n        if 0 <= r <= 0.5:\n            if 0 <= g <= 0.5:\n                return (0.0, 0.0, 0.0)\n            elif 0.5 <= g <= 0.7:\n                return (0.0, 0.0, 0.5)\n            elif 0.7 <= g <= 1.0:\n                return (0.0, 0.5, 0.0)\n            elif 1.0 <= g <= 1.5:\n                return (0.0, 0.5, 1.0)\n        elif 0.5 <= r <= 0.75:\n            if 0 <= g <= 0.5:\n                return (0.0, 0.0, 0.0)\n            elif 0.5 <= g <= 0.7:\n                return (0.0, 0.5, 0.0)\n            elif 0.7 <= g <= 1.0:\n                return (0.0, 0.7, 0.0)\n            elif 1.0 <= g <= 1.5:\n                return (0.0, 0.7, 1.0)\n        elif 0.75 <= r <= 1.0:\n            if 0 <= g <= 0.5:\n                return (0.0, 0.0, 0.0)\n            elif 0.5 <= g <= 0.7:\n                return (0.0, 0.5, 0.0)\n            elif 0.7 <= g <= 1.0:\n                return (0.0, 0.7, 0.0)\n            elif 1.0 <= g <= 1.5:\n                return (0.0, 0.7, 1.0)\n        # Saturation\n        elif 1.0 <= r <= 1.5:\n            return (0.0, 0.5, 0.0)\n        elif 1.5 <= r <= 2.0:\n            return (0.0, 0.5, 0.0)\n        elif 2.0 <= r <= 2.5:\n            return (0.0, 0.5, 0.0)\n        elif 2.5 <= r <= 3.0:\n            return (0.0, 0.5, 0.0)\n        # Value\n        else:\n            return (0.0, 0.0, 0.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    c = r / 255.0\n    m = g / 255.0\n    b = b / 255.0\n    delta = c + (1 - abs(0.04045 * m - 0.52380 * m * c))\n    s = 0.055 * c - 0.055 * (1 - 0.055 * c * c)\n    v = 0.007843 * c + 0.055 * (1 - 0.055 * c * c) * (1 - delta)\n    h = 1.055 * (1 - s) - 0.055\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    if r == 0.0 and g == 0.0 and b == 0.0:\n        return (0,0,0)\n    elif r == 0.0:\n        return (0,0,0,0.15)\n    elif g == 0.0:\n        return (0,0,0,0.2)\n    elif b == 0.0:\n        return (0,0,0,0.2)\n    else:\n        max_value = 255\n        r = 255 - (255 * (r / max_value))\n        g = 255 - (255 * (g / max_value))\n        b = 255 - (255 * (b / max_value))\n        delta_r = r/max_value\n        delta_g = g/max_value\n        delta_b = b/max_value\n        h = max(delta_r, delta_g, delta_b)\n        s = 0.5 + 0.5 * (1 - delta_r - delta_g - delta_b)\n        v = 255 - (2 * h + 0.5)\n        return (h,s,v)"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r * 255\n    g = g * 255\n    b = b * 255\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    hue = 0.0\n    saturation = 0.0\n    value = 0.0\n    a = np.pi * 2 / 180\n    if (r < 0.0):\n        r *= -1\n    if (g < 0.0):\n        g *= -1\n    if (b < 0.0):\n        b *= -1\n    if (r > 1.0):\n        r *= -1\n    if (g > 1.0):\n        g *= -1\n    if (b > 1.0):\n        b *= -1\n    if (r >= 1.0):\n        r *= -1\n    if (g >= 1.0):\n        g *= -1\n    if (b >= 1.0):\n        b *= -1\n    if (r < 0.0):\n        r *= -1\n    if (g < 0.0):\n        g *= -1\n    if (b < 0.0):\n        b *= -1\n    if (r > 1.0):\n        r *= -1\n    if (g > 1.0):\n        g *= -1\n    if (b > 1.0):\n        b *= -1\n    if (r >= 1.0):\n        r *= -1\n    if (g >= 1.0):\n        g *= -1\n    if (b >= 1.0):\n        b *= -1\n    if (r <= 0.0):\n        r *= -1\n    if (g <= 0.0):\n        g *= -1\n    if (b <= 0.0):\n        b *= -1\n    hue = 0.5 * a * np.arctan((2.0 * r - 1.0) / (2.0 * g - 1.0))\n    #print(hue)\n    if (hue < 0.0):\n        hue *= -1.0\n    #print(hue)\n    if (hue >= 180.0):\n        hue -= 360.0\n    if (hue <= -180.0):\n        hue += 360.0\n    if (hue >= 360.0):\n        hue -= 360.0\n    if (hue <= -360.0):\n        hue += 360.0\n    #print(hue)\n    if (hue > 360.0):\n        hue -= 360.0\n    if (hue < -360.0):\n        hue += 360.0\n    hue = hue * (180.0 / 360.0)\n    #print(hue)\n    #print(hue)\n    saturation = 1.0 - (1.0 - a) * (1.0 - (1.0 - g)) * (1.0 - (1.0 - b))\n    if (saturation < 0.0):\n        saturation *= -1.0\n    #print(saturation)\n    if (saturation >= 1.0):\n        saturation *= -1.0\n    if (saturation <= 0.0):\n        saturation *= -1.0\n    if (saturation < 0.0):\n        saturation *= -1.0\n    #print(saturation)\n    value = a * (r - g - b)\n    #print(value)\n    if (value < 0.0):\n        value *= -1.0\n    #print(value)\n    if (value >= 255.0):\n        value = 255.0\n    if (value <= 0.0):\n        value = 0.0\n    #print(value)\n    return (hue, saturation, value)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    return 0, 0, 0\n    raise NotImplementedError\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # colors in string form\n    r, g, b = map(int, [r, g, b])\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    '''\n    from math import sqrt\n    def is_number(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n    if(is_number(r) and is_number(g) and is_number(b)):\n        return [int(r*65535), int(g*65535), int(b*65535)]\n    '''\n    # END OF CODE\n    # color conversion\n    red = round(r*255.0)\n    green = round(g*255.0)\n    blue = round(b*255.0)\n    red = red - int(red)\n    green = green - int(green)\n    blue = blue - int(blue)\n    # calculate hsv\n    hue = (red + green + blue) % 180\n    saturation = (red / 255.0) + (green / 255.0) + (blue / 255.0)\n    value = (hue * 6.0) % 180\n    # HEX conversion\n    hue = int(hue)\n    saturation = int(saturation)\n    value = int(value)\n    # if we have a tuple\n    if len(str(saturation)) == 1:\n        saturation = \"0\" + str(saturation)\n    if len(str(value)) == 1:\n        value = \"0\" + str(value)\n    # if we have a tuple\n    if len(str(hue)) == 1:\n        hue = \"0\" + str(hue)\n    if len(str(value)) == 1:\n        value = \"0\" + str(value)\n    # convert to hsv\n    hsv = hue, saturation, value\n    return hsv"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for item in list1:\n        if item % 2 == 0:\n            product *= item\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return list1[0] * list1[1]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    # Method 1 - Use looping\n    # O(n)\n    # O(n)\n    # O(n)\n    \n    product = 1\n    for i in range(len(list1)):\n        product *= list1[i]\n        \n    return product\n        \n    # Method 2 - Using array\n    # O(n)\n    # O(n)\n    \n    # array = [1, 2, 3, 4, 5]\n    # print(array)\n    \n    # product = 1\n    # for i in array:\n    #     product *= i\n    # return product\n    \n    # Method 3 - Using dictionary\n    # O(n)\n    # O(n)\n    \n    # a = {1: 1, 2: 2, 3: 3}\n    # print(a)\n    \n    # product = 1\n    # for i in a.values():\n    #     product *= i\n    # return product\n    \n    # Method 4 - Using set\n    # O(n)\n    # O(n)\n    \n    # count = 0\n    # for i in a.values():\n    #     count += 1\n    #     if count % 2 == 0:\n    #         product *= i\n    # return product\n    \n    # Method 5 - Using list\n    # O(n)\n    # O(n)\n    \n    # a = [1, 2, 3, 4, 5]\n    # print(a)\n    \n    # product = 1\n    # for i in a:\n    #     product *= i\n    # return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod=1\n    for i in list1:\n        prod*=i\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num_even_odd_dict = {}\n    for index, element in enumerate(list1):\n        if index % 2 == 0:\n            num_even_odd_dict[element] = element * (index // 2)\n        else:\n            num_even_odd_dict[element] = index\n    print(num_even_odd_dict)\n    return num_even_odd_dict\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_odd += list1[i]\n        else:\n            even_odd -= list1[i]\n    return even_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1.sort()\n    #print(list1)\n    \n    if len(list1)%2 == 0:\n        #print(\"Even\")\n        index = 0\n        while index < len(list1) //2:\n            #print(index)\n            if index == 0:\n                list1[index] = list1[index] * 2\n                index += 1\n            else:\n                list1[index] = list1[index] * 2\n                index += 1\n        #print(list1)\n    else:\n        #print(\"Odd\")\n        index = len(list1)//2\n        while index >= 0:\n            #print(index)\n            if index == 0:\n                list1[index] = list1[index] * 2\n                index -= 1\n            else:\n                list1[index] = list1[index] * 2\n                index -= 1\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod=1\n    for i in list1:\n        prod=prod*i\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    s = 0\n    for i in range(len(list1)):\n        s += list1[i]\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            s *= list1[i]\n    return s\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    m = 1\n    while len(list1) > 1:\n        m = m * list1[0]\n        del list1[0]\n    return m\n    \ndef list_to_int(list1):\n    '''\n    Write a function to convert a list to integer.\n    '''\n    i = 0\n    while len(list1) > i:\n        list1[i] = int(list1[i])\n        i = i + 1\n    return list1\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(',')\n    tuple_int = tuple(int(i) for i in tuple_str)\n    return tuple_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str)\n    test_int = tuple(map(int, test_tuple))\n    return test_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = ()\n    for char in test_str:\n        test_tuple += (ord(char),)\n    return test_tuple\n    \n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_tuple = ()\n    for char in test_str:\n        test_tuple += (float(char),)\n    return test_tuple\n    \n    \ndef tuple_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to bool tuple.\n    '''\n    test_tuple = ()\n    for char in test_str:\n        test_tuple += (bool(char),)\n    return test_tuple\n    \n    \ndef tuple_str_list(test_str):\n    '''\n    Write a function to convert tuple string to list tuple.\n    '''\n    test_tuple = ()\n    for char in test_str:\n        test_tuple += (list(char),)\n    return test_tuple\n    \n    \ndef tuple_str_set(test_str):\n    '''\n    Write a function to convert tuple string to set tuple.\n    '''\n    test_tuple = ()\n    for char in test_str:\n        test_tuple += (set(char),)\n    return test_tuple\n    \n    \ndef tuple_str_any_datatype(test_str):\n    '''\n    Write a function to convert tuple string to any datatype tuple.\n    '''\n    test_tuple = ()\n    for char in test_str:\n        test_tuple += (type(char),)\n    return test_tuple\n    \n    \ndef tuple_str_int_to_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_tuple = tuple_str_float(test_str)\n    return tuple(map(float, test_tuple))\n    \n    \ndef tuple_str_bool_to_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_tuple = tuple_str_float(test_str)\n    return tuple(map(bool, test_tuple))\n    \n    \ndef tuple_str_list_to_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_tuple = tuple_str_int_to_float(test_str)\n    return tuple(map(lambda x: float(x), test_tuple))\n    \n    \ndef tuple_str_set_to_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_tuple = tuple_str_int_to_float(test_str)\n    return tuple(map(lambda x: float(x), test_tuple))\n    \n    \ndef tuple_str_any_datatype_to_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_tuple = tuple_str_any_datatype(test_str)\n    return tuple(map(float, test_tuple))\n    \n    \ndef tuple_str_int_to_bool(test_str):\n    '''\n    Write a function to convert tuple string to bool tuple.\n    '''\n    test_tuple = tuple_str_int_to_bool(test_str)\n    return tuple(map(bool, test_tuple))\n    \n    \ndef tuple_str_bool_to_bool(test_str):\n    '''\n    Write a function to convert tuple string to bool tuple.\n    '''\n    test_tuple = tuple_str_int_to_bool(test_str)\n    return tuple(map(bool, test_tuple))\n    \n    \ndef tuple_str_list_to_bool(test_str):\n    '''\n    Write a function to convert tuple string to bool tuple.\n    '''\n    test_tuple = tuple_str_int_to_bool(test_str)\n    return tuple(map(bool, test_tuple))\n    \n    \ndef tuple_str_set_to_bool(test_str):\n    '''\n    Write a function to convert tuple string to bool tuple.\n    '''\n    test_tuple = tuple_str_int_to_bool(test_str)\n    return tuple(map(bool, test_tuple))\n    \n    \ndef tuple_str_any_datatype_to_bool(test_str):\n    '''\n    Write a function to convert tuple string to bool tuple.\n    '''\n    test_tuple = tuple_str_any_datatype(test_str)\n    return tuple(map(bool, test_tuple))\n    \n    \ndef tuple_str_int_to_int(test_str):\n    '''\n    Write a function to convert tuple string to int tuple.\n    '''\n    test_tuple = tuple_str_int_to_int(test_str)\n    return tuple(map(int, test_tuple))\n    \n    \ndef tuple_str_float_to_int(test_str):\n    '''\n    Write a function to convert tuple string to int tuple.\n    '''\n    test_tuple = tuple_str_float_to_int(test_str)\n    return tuple(map(int, test_tuple))\n    \n    \ndef tuple_str_bool_to_int(test_str):\n    '''\n    Write a function to convert tuple string to int tuple.\n    '''\n    test_tuple = tuple_str_bool_to_int(test_str)\n    return tuple(map(int, test_tuple))\n    \n    \ndef tuple_str_int_to_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_tuple = tuple_str_int_to_float(test_str)\n    return tuple(map(float, test_tuple))\n    \n    \ndef tuple_str_float_to_int(test_str):\n    '''\n    Write a function to convert tuple string to int tuple.\n    '''\n    test_tuple = tuple_str_float_to_int(test_str)\n    return tuple(map(int, test_tuple))\n    \n    \ndef tuple_str_bool_to_int(test_str):\n    '''\n    Write a function to convert tuple string to int tuple.\n    '''\n    test_tuple = tuple_str_bool_to_int(test_str)\n    return tuple(map(int, test_tuple))\n    \n    \ndef tuple_str_list_to_int(test_str):\n    '''\n    Write a function to convert tuple string to int tuple.\n    '''\n    test_tuple = tuple_str_int_to_int(test_str)\n    return tuple(map(int, test_tuple))\n    \n    \ndef tuple_str_set_to_int(test_str):\n    '''\n    Write a function to convert tuple string to int tuple.\n    '''\n    test_tuple = tuple_str_int_to_int(test_str)\n    return tuple(map(int, test_tuple))\n    \n    \ndef tuple_str_any_datatype_to_int(test_str):\n    '''\n    Write a function to convert tuple string to int tuple.\n    '''\n    test_tuple = tuple_str_any_datatype(test_str)\n    return tuple(map(int, test_tuple))\n    \n    \ndef tuple_str_int_to_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_tuple = tuple_str_int_to_float(test_str)\n    return tuple(map(float, test_tuple))\n    \n    \ndef tuple_str_float_to_int(test_str):\n    '''\n    Write a function to convert tuple string to int tuple.\n    '''\n    test_tuple = tuple_str_float_to_int(test_str)\n    return tuple(ma"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    s = \"\"\n    for i in test_str:\n        s += i\n    return tuple(map(int, s.split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.replace('(','').replace(')','').replace('.', ',').replace(',', ',').replace(' ', '').split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '').replace(')', '')\n    return tuple(map(int, test_str.split(',')), fromstring=True)\n    \ndef test_tuple_int_pairs():\n    '''\n    Test a tuple of two ints and a list of tuples.\n    '''\n    tuple_str = '(1, 2)'\n    tuple_int = tuple_str_int(tuple_str)\n    print(tuple_int)\n    tuple_str2 = '(1, 3, '\n    tuple_int2 = tuple_str_int(tuple_str2)\n    print(tuple_int2)\n    assert tuple_int == tuple_int2\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(val) for val in test_str.split(',')])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_complex(test_str):\n    '''\n    Write a function to convert tuple string to complex tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_str(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_str_tuple(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_tuple(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_complex(test_str):\n    '''\n    Write a function to convert tuple string to complex tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_complex(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_tuple(test_str):\n    '''\n    Write a function to convert tuple string to tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_tuple(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_tuple(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_tuple_complex(test_str):\n    '''\n    Write a function to convert tuple string to complex tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_tuple(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool_complex(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_bool_complex(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool_tuple(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_bool_tuple(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_tuple_str(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_bool_tuple_str(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool_str_tuple_str(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool_tuple_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool_str_tuple_bool(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert string to boolean tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_str_bool(test_str):\n    '''\n    Write a function to convert string to boolean tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_str_str(test_str):\n    '''\n    Write a function to convert string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_str_str_tuple(test_str):\n    '''\n    Write a function to convert string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool_str_tuple(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_tuple_bool_str_bool_tuple(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_str_bool_tuple_str(test_str):\n    '''\n    Write a function to convert boolean tuple to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_str_bool_bool_tuple(test_str):\n    '''\n    Write a function to convert boolean tuple to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_str_bool_bool_tuple_str(test_str):\n    '''\n    Write a function to convert boolean tuple to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_bool_bool_str_tuple(test_str):\n    '''\n    Write a function to convert boolean tuple to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_bool_bool_str_bool(test_str):\n    '''\n    Write a function to convert boolean tuple to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_bool_str_bool_bool_str(test_str):\n    '''\n    Write a function to convert boolean tuple to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_bool_bool_str_bool(test_str):\n    '''\n    Write a function to convert boolean tuple to string tuple.\n    '''\n    \n    return test_str\n    \ndef tuple_str_bool_bool"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str\n    int_tuple = []\n    for i in range(len(tuple_str)):\n        int_tuple.append(tuple_str[i])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return -1\n    elif a[index] > x:\n        index = index + 1\n    else:\n        index = index\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_right(a, x)\n    if i == n:\n        return n\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    elif a[0] > x:\n        return 0\n    else:\n        i = bisect.bisect_left(a, x)\n        if i < len(a) and a[i] == x:\n            return i\n        else:\n            return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    h = bisect.bisect_left(a, x)\n    return h\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a,x)\n    return l-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a, x)\n    return left\ndef bin_search(a, x):\n    '''\n    Write a binary search function which searches a sorted array for a value\n    and returns the position of the value.\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == a[mid]:\n            return mid\n        elif x > a[mid]:\n            left = mid + 1\n        elif x < a[mid]:\n            right = mid - 1\n    return -1\ndef merge_two_sorted_lists(a, b):\n    '''\n    Write a function to merge two sorted lists and return their elements.\n    '''\n    a_head, b_head = 0, 0\n    tmp = []\n    while a_head < len(a) and b_head < len(b):\n        if a[a_head] < b[b_head]:\n            tmp.append(a[a_head])\n            a_head += 1\n        else:\n            tmp.append(b[b_head])\n            b_head += 1\n    if a_head < len(a):\n        tmp += a[a_head:]\n    if b_head < len(b):\n        tmp += b[b_head:]\n    return tmp\ndef merge_sort(a):\n    '''\n    Use merge sort to merge the list of numbers into a single list.\n    '''\n    if len(a) > 1:\n        mid = len(a) // 2\n        l = a[:mid]\n        r = a[mid:]\n        merge_sort(l)\n        merge_sort(r)\n        i = j = 0\n        k = 0\n        while i < len(l) and j < len(r):\n            if l[i] <= r[j]:\n                a[k] = l[i]\n                i += 1\n            else:\n                a[k] = r[j]\n                j += 1\n            k += 1\n        while i < len(l):\n            a[k] = l[i]\n            i += 1\n            k += 1\n        while j < len(r):\n            a[k] = r[j]\n            j += 1\n            k += 1\n    return a\ndef insertion_sort(a):\n    '''\n    Use insertion sort to insert the list of numbers into a sorted order.\n    '''\n    for i in range(1, len(a)):\n        j = i\n        while j > 0 and a[j-1] > a[j]:\n            a[j], a[j-1] = a[j-1], a[j]\n            j -= 1\n    return a\ndef heapsort(a):\n    '''\n    Use a heap to sort the list of numbers.\n    '''\n    for i in range(len(a)//2, -1, -1):\n        heapify(a, i)\n    for i in range(len(a)-1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify(a, 0)\n    return a\ndef heapify(a, i):\n    '''\n    Use a heap to sort the list of numbers.\n    '''\n    l, r = 2 * i + 1, 2 * i + 2\n    if l < len(a) and a[l] > a[i]:\n        heapify(a, l)\n    if r < len(a) and a[r] > a[i]:\n        heapify(a, r)\n    if i!= l and a[i] > a[l]:\n        a[i], a[l] = a[l], a[i]\n        heapify(a, l)\ndef heap_sort(a):\n    '''\n    Use a heap to sort the list of numbers.\n    '''\n    for i in range(len(a)//2, -1, -1):\n        heapify(a, i)\n    for i in range(len(a)-1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify(a, 0)\n    return a\ndef bubble_sort(a):\n    '''\n    Use a bubble sort to sort the list of numbers.\n    '''\n    for i in range(len(a) - 1, 0, -1):\n        for j in range(0, i):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return a\ndef linear_search(a, x):\n    '''\n    Write a linear search function which searches a value in a sorted array and returns the index of the value.\n    '''\n    for i in range(0, len(a)):\n        if a[i] == x:\n            return i\n    return -1\ndef linear_search_2(a, x):\n    '''\n    Write a linear search function which searches a value in a sorted array and returns the index of the value.\n    '''\n    for i in range(0, len(a)):\n        if a[i] == x:\n            return i\n    return -1\ndef linear_search_3(a, x):\n    '''\n    Write a linear search function which searches a value in a sorted array and returns the index of the value.\n    '''\n    for i in range(0, len(a)):\n        if a[i] == x:\n            return i\n    return -1\ndef linear_search_4(a, x):\n    '''\n    Write a linear search function which searches a value in a sorted array and returns the index of the value.\n    '''\n    for i in range(0, len(a)):\n        if a[i] == x:\n            return i\n    return -1\ndef linear_search_5(a, x):\n    '''\n    Write a linear search function which searches a value in a sorted array and returns the index of the value.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        elif a[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\ndef linear_search_6(a, x):\n    '''\n    Write a linear search function which searches a value in a sorted array and returns the index of the value.\n    '''\n    for i in range(len(a)):\n        if a[i] < x:\n            return i\n    return -1\ndef linear_search_7(a, x):\n    '''\n    Write a linear search function which searches a value in a sorted array and returns the index of the value.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            high = mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            return -1\n    return -1\ndef binary_search(a, x):\n    '''\n    Write a binary search function which searches a value in a sorted array and returns the index of the value.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\ndef binary_search_2(a, x):\n    '''\n    Write a binary search function which searches a value in a sorted array and returns the index of the value.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)-1\n    while True:\n        m = (l+r)//2\n        if m == a.index(x, l, r) and a[l] > x:\n            r = m\n        elif m == a.index(x, l, r):\n            return m\n        elif a[m] > x:\n            l = m\n        else:\n            r = m\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    m = bisect.bisect_right(a, x) # M = m+1\n    return m+1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.upper()\n    t = re.findall('[a-zA-Z]+', text)\n    if len(t) == 1:\n        for i in range(len(text)):\n            if text[i].isalpha() and text[i].isupper():\n                if text[i] == t[0] and text[i+1] == t[1] and text[i+2] == t[2]:\n                    return t[0]\n            if text[i].isalpha() and text[i].isupper():\n                if text[i] == t[0] and text[i+1] == t[1]:\n                    return t[0]\n    elif len(t) == 2:\n        if text[0].isalpha() and text[1].isupper():\n            if text[0] == t[0] and text[1] == t[1]:\n                return t[0]\n        if text[0].isalpha() and text[1].isupper():\n            if text[0] == t[0] and text[1] == t[1]:\n                return t[0]\n        if text[0].isalpha() and text[1].isupper():\n            if text[0] == t[0] and text[1] == t[1]:\n                return t[0]\n    elif len(t) == 3:\n        if text[0].isalpha() and text[1].isupper():\n            if text[0] == t[0] and text[1] == t[1] and text[2] == t[2]:\n                return t[0]\n        if text[0].isalpha() and text[1].isupper():\n            if text[0] == t[0] and text[1] == t[1]:\n                return t[0]\n        if text[0].isalpha() and text[1].isupper():\n            if text[0] == t[0] and text[1] == t[1]:\n                return t[0]\n        if text[0].isalpha() and text[1].isupper():\n            if text[0] == t[0] and text[1] == t[1]:\n                return t[0]\n        if text[0].isalpha() and text[1].isupper():\n            if text[0] == t[0] and text[1] == t[1]:\n                return t[0]\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.findall('(a){3}b',text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'(?<=\\w)(b)(?=\\w)', text)\n    return match.group()\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # create a pattern to match\n    # string like abcabc\n    pattern = r'\\w*ab?\\w*'\n    # create a regex to match\n    regex = re.compile(pattern)\n    # re.search returns a Match object\n    # get the string using it\n    m = regex.search(text)\n    # if we found a match\n    if m:\n        # return a true or false value\n        return True\n    else:\n        # return a false or true value\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = 0\n    b = 0\n    match = 0\n    for i in text:\n        if i == 'a':\n            a = a + 1\n        elif i == 'b':\n            b = b + 1\n        elif i =='':\n            match = match + 1\n    if a == 3 or b == 3 or match == 3:\n        print(\"Match 3\")\n    else:\n        print(\"not match 3\")\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # For a string that has an a followed by three b, write code\n    # write a regex for a string that has an a followed by three b\n    match = re.search(r'\\s*\\w*\\w*\\s*\\w*\\s*\\w*\\s*\\w*\\s*\\w*\\s*\\w*', text)\n    if match!= None:\n        return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # YOUR CODE HERE\n    # write regex\n    regex = re.compile(r'a\\w*b')\n    match = regex.search(text)\n    if match:\n        return 'Match'\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    i = 0\n    while i < len(text):\n        if text[i] == 'a':\n            i = i + 2\n        elif text[i] == 'b':\n            i = i + 2\n        elif text[i] =='':\n            i = i + 1\n        else:\n            print(\"Not a valid string.\")\n            return False\n    if re.match('^a', text) and re.match('b', text):\n        print(\"Valid string.\")\n    else:\n        print(\"Not a valid string.\")\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[a-zA-Z]+b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # You can either assume that the text is a string of a number or a string of a number followed by a\n    # letter. For example, if your input string is \"abcd\", then it should return true.\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_str + '_' + ''.join([str(element) for element in test_list])\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if not test_str:\n        return tuple()\n    else:\n        return tuple(map(int, test_str.split(',')))\n    \n    \ndef new_list(test_list):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    if not test_list:\n        return []\n    else:\n        return [int(i) for i in test_list.split(',')]\n    \n    \ndef is_solution(test_tuple, test_list):\n    '''\n    Write a function to test if a tuple is a solution in the given list.\n    '''\n    if not test_list or not test_tuple:\n        return False\n    else:\n        test_list = tuple(test_list)\n        test_tuple = tuple(test_tuple)\n        if test_tuple in test_list:\n            return True\n        else:\n            return False\n    \n    \ndef count_solutions(test_tuple, test_list):\n    '''\n    Write a function to count the number of solutions in the given list.\n    '''\n    return len([1 for i in test_list if is_solution(i, test_list)])\n    \n    \ndef test_solutions():\n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"2,3,4,5,6\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == True\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"2,3,4,5,6\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"4,5,6,7,8\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"4,5,6,7,8\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n    test_solution = is_solution(test_tuple, test_list)\n    assert test_solution == False\n    \n    test_list = [1, 2, 3, 4, 5]\n    test_tuple = new_tuple(test_list, \"6,7,8,9,10,11,12\")\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_list == None:\n        return None\n    \n    return tuple(test_list)\n    \n    \ndef new_dictionary(test_str):\n    '''\n    Write a function to create a new dictionary from the given string.\n    '''\n    if test_str == None:\n        return None\n    \n    return dict(eval(test_str))\n    \n    \ndef set_in_dictionary(test_dictionary, test_key, test_value):\n    '''\n    Write a function to set an element in a dictionary to the given key.\n    '''\n    if test_dictionary == None:\n        return None\n    \n    if test_key not in test_dictionary:\n        return None\n    \n    if test_dictionary[test_key]!= test_value:\n        return None\n    \n    return test_dictionary\n    \n    \ndef get_in_dictionary(test_dictionary, test_key):\n    '''\n    Write a function to get an element in a dictionary to the given key.\n    '''\n    if test_dictionary == None:\n        return None\n    \n    if test_key not in test_dictionary:\n        return None\n    \n    return test_dictionary[test_key]\n    \n    \ndef filter_dict(test_dictionary, test_key, test_value):\n    '''\n    Write a function to filter the dictionary based on the given key and value.\n    '''\n    if test_dictionary == None:\n        return None\n    \n    if test_key not in test_dictionary:\n        return None\n    \n    if test_dictionary[test_key] == test_value:\n        return test_dictionary\n    \n    return None\n    \n    \ndef sort_list(test_list):\n    '''\n    Write a function to sort the given list.\n    '''\n    if test_list == None:\n        return None\n    \n    return sorted(test_list)\n    \n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse the given list.\n    '''\n    if test_list == None:\n        return None\n    \n    return test_list[::-1]\n    \n    \ndef remove_list(test_list):\n    '''\n    Write a function to remove the given list.\n    '''\n    if test_list == None:\n        return None\n    \n    return [x for x in test_list if x!= None]\n    \n    \ndef main():\n    '''\n    Write a function to get a tuple from a string and a list.\n    '''\n    test_str = input(\"Enter string: \")\n    test_list = input(\"Enter list: \")\n    test_tuple = new_tuple(test_list, test_str)\n    print(test_tuple)\n    \n    \nif __name__ == '__main__':\n    main()\n    \n    "
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        res.append(test_list[i])\n    return res\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create tuple\n    new_tuple = tuple(test_list)\n    # format new tuple\n    new_tuple = tuple(map(lambda x: x.upper(), test_list))\n    # return new tuple\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    for i in range(len(test_list)):\n        new_tuple += (test_list[i],)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list_list = test_list.split(',')\n    result = tuple(test_list_list)\n    return result\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_list)!= list or type(test_str)!= str:\n        raise ValueError('Input must be a list and string')\n    \n    new_tuple = tuple([test_list[int(x)] for x in test_str])\n    return new_tuple\n    \n    \ndef find_float(test_list):\n    '''\n    Write a function to find the index of a value in a given list.\n    '''\n    if type(test_list)!= list:\n        raise ValueError('Input must be a list')\n    \n    for index, value in enumerate(test_list):\n        if type(value)!= float:\n            raise ValueError('Input must be a float')\n    \n    return index\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #TODO - write your code here\n    return tuple(map(str, test_list))\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    print(nums)\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            print(nums[i], end=\" \")\n    print()\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = True\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even = False\n    return even\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)-1):\n        if (nums[i]%2==0):\n            if(nums[i]%2==0):\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for index in range(len(nums)):\n        if nums[index] % 2 == 0:\n            even_numbers.append(nums[index])\n    return even_numbers\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return len(nums)%2==0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            continue\n        elif nums[i]%2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    #index = 0\n    #while index < len(nums):\n        #if nums[index] % 2 == 0:\n            #print(nums[index], nums[index]/2, nums[index]%2)\n        #else:\n            #index = index + 1\n    # return True\n    index = 0\n    while index < len(nums):\n        if nums[index] % 2 == 0:\n            if nums[index]/2 == 0:\n                print(nums[index], nums[index]/2, nums[index]%2)\n            else:\n                return True\n        else:\n            index = index + 1\n    return False\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(even_position(nums))"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2 == 0):\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_nums = []\n    for index, value in enumerate(nums):\n        if index % 2 == 0:\n            even_nums.append(value)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    remove_list = []\n    for i in range(len(test_tup) - 1):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                remove_list.append(j)\n                break\n    if len(remove_list) == 0:\n        return\n    else:\n        for i in remove_list:\n            del test_tup[i]\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    list_remove = []\n    \n    for i in test_tup:\n        if type(i) is tuple:\n            list_remove.append(i)\n        else:\n            pass\n    \n    return list_remove\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return type(test_tup[0]), tuple(tuple(item) for item in test_tup[1])\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    first_element = test_tup[0]\n    tuple_length = len(test_tup)\n    if tuple_length <= 1:\n        return test_tup\n    for i in range(tuple_length):\n        if test_tup[i+1] == first_element:\n            test_tup = test_tup[:i] + test_tup[i+2:]\n    return tuple(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup[0] = test_tup[0].replace('(', '')\n    test_tup[0] = test_tup[0].replace(')',' ')\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    first_tuple = test_tup[0]\n    second_tuple = test_tup[1]\n    if type(first_tuple) == type(second_tuple):\n        return tuple(filter(None, test_tup[2:]))\n    else:\n        return tuple(filter(None, test_tup[1:]))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_tuple(tup):\n        '''\n        Use a while loop to remove all elements from the tuple.\n        '''\n        print(\"Removing elements from the tuple...\")\n        new_tup = []\n        for element in tup:\n            if isinstance(element, tuple):\n                new_tup.append(element)\n            else:\n                print(element, \"is not a tuple!\")\n        tup = tuple(new_tup)\n        return tup\n    \n    if isinstance(test_tup, tuple):\n        test_tup = remove_tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (x for x in test_tup if x[1] is not None)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[:2] + test_tup[3:]\n    \n    #Write your code here\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count += len(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    c = 0\n    for i in input_list: \n        if type(i) is list: \n            c += 1\n    return c\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output = 0\n    for i in input_list:\n        if isinstance(i, list):\n            output += 1\n    return output\n        \n    \ndef is_list(input_str):\n    '''\n    Write a python function to determine if a given string is a list.\n    '''\n    output = False\n    if count_list(input_str) == 1:\n        output = True\n    return output\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    count = 0\n    \n    for i in range(0, len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n            \n    return count\n    \n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)): \n        count = count + 1 \n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    x = 1\n    for i in input_list:\n        x = x + len(i)\n    return x\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    answer = 0\n    for item in input_list:\n        answer += 1\n    return answer\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    print('the number of lists : ', len(input_list))\n    return(len(input_list))\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start,end=0,len(arr)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return None\n    elif len(arr)==1:\n        return arr[-1]\n    elif len(arr)==2:\n        if arr[-1]==x:\n            return arr[-2]\n        elif arr[-1]>x:\n            return arr[-2]\n    else:\n        if arr[-1]==x:\n            return last(arr[:-2],x)\n        elif arr[-1]>x:\n            return last(arr[:-1],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr is None or arr == []:\n        return -1\n    low,high = 0, len(arr)-1\n    while low <= high:\n        mid = low + (high-low)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    n = len(arr)\n    low = 0\n    high = n-1\n    \n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef binarySearch(arr,x):\n    '''\n    Write a python function to find the index of an element in a sorted array.\n    '''\n    \n    n = len(arr)\n    left = 0\n    right = n-1\n    \n    while left<=right:\n        mid = (left+right)//2\n        if arr[mid]<x:\n            left = mid + 1\n        elif arr[mid]>x:\n            right = mid - 1\n        else:\n            return mid\n    return -1\n    \ndef findIndex(arr,x):\n    '''\n    Write a python function to find the index of an element in a sorted array.\n    '''\n    \n    n = len(arr)\n    low = 0\n    high = n-1\n    \n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef findRange(arr,x,low,high):\n    '''\n    Write a python function to find the range of a sorted array.\n    '''\n    \n    n = len(arr)\n    if low<=high:\n        mid = (low+high)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef findRange2(arr,x,low,high):\n    '''\n    Write a python function to find the range of a sorted array.\n    '''\n    \n    n = len(arr)\n    if low<=high:\n        mid = (low+high)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef findRange3(arr,x,low,high):\n    '''\n    Write a python function to find the range of a sorted array.\n    '''\n    \n    n = len(arr)\n    if low<=high:\n        mid = (low+high)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef findRange4(arr,x,low,high):\n    '''\n    Write a python function to find the range of a sorted array.\n    '''\n    \n    n = len(arr)\n    if low<=high:\n        mid = (low+high)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef findRange5(arr,x,low,high):\n    '''\n    Write a python function to find the range of a sorted array.\n    '''\n    \n    n = len(arr)\n    if low<=high:\n        mid = (low+high)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef main():\n    arr = [1,3,4,5,6,8,9,10,12,15]\n    x = 8\n    ans = binarySearch(arr,x)\n    print(ans)\n    print(binarySearch(arr,10))\n    \nmain("
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    left=0\n    right=len(arr)-1\n    \n    while(left<=right):\n        mid=left+(right-left)//2\n        if arr[mid]<x:\n            left=mid+1\n        elif arr[mid]>x:\n            right=mid-1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            high=mid-1\n        else:\n            low=mid+1\n    return low\n    \n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    \n    while start <= end:\n        mid = (start + end) // 2\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    return n-x-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return -1\n    # binary search\n    l=0\n    r=n-1\n    while l<=r:\n        m=(l+r)//2\n        if arr[m]==x:\n            return m\n        elif arr[m]<x:\n            l=m+1\n        else:\n            r=m-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # start = 0\n    # end = len(arr)-1\n    # while start < end:\n    #     mid = (start + end) // 2\n    #     if arr[mid] == x:\n    #         return mid\n    #     elif arr[mid] > x:\n    #         end = mid - 1\n    #     else:\n    #         start = mid + 1\n    # return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"^[a-b]\\d\\d[a-b]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    pattern = re.compile(r\"^[a-c]\\d\\d[a-c]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    pattern = re.compile(r\"^[a-d]\\d\\d[a-d]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    pattern = re.compile(r\"^[a-e]\\d\\d[a-e]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    pattern = re.compile(r\"^[a-e]\\d\\d[a-e]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endf(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'f'.\n    '''\n    pattern = re.compile(r\"^[a-f]\\d\\d[a-f]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endg(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'g'.\n    '''\n    pattern = re.compile(r\"^[a-g]\\d\\d[a-g]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'h'.\n    '''\n    pattern = re.compile(r\"^[a-h]\\d\\d[a-h]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endi(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'i'.\n    '''\n    pattern = re.compile(r\"^[a-i]\\d\\d[a-i]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endj(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'j'.\n    '''\n    pattern = re.compile(r\"^[a-j]\\d\\d[a-j]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endk(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'k'.\n    '''\n    pattern = re.compile(r\"^[a-k]\\d\\d[a-k]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endl(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'l'.\n    '''\n    pattern = re.compile(r\"^[a-l]\\d\\d[a-l]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endm(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in'm'.\n    '''\n    pattern = re.compile(r\"^[a-m]\\d\\d[a-m]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endn(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'n'.\n    '''\n    pattern = re.compile(r\"^[a-n]\\d\\d[a-n]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endo(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'o'.\n    '''\n    pattern = re.compile(r\"^[a-o]\\d\\d[a-o]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endp(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'p'.\n    '''\n    pattern = re.compile(r\"^[a-p]\\d\\d[a-p]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endq(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'q'.\n    '''\n    pattern = re.compile(r\"^[a-q]\\d\\d[a-q]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endr(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'r'.\n    '''\n    pattern = re.compile(r\"^[a-r]\\d\\d[a-r]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endt(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 't'.\n    '''\n    pattern = re.compile(r\"^[a-t]\\d\\d[a-t]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endu(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'u'.\n    '''\n    pattern = re.compile(r\"^[a-u]\\d\\d[a-u]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endv(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'v'.\n    '''\n    pattern = re.compile(r\"^[a-v]\\d\\d[a-v]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endw(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'w'.\n    '''\n    pattern = re.compile(r\"^[a-w]\\d\\d[a-w]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endx(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'x'.\n    '''\n    pattern = re.compile(r\"^[a-x]\\d\\d[a-x]\\d\\d\")\n    return pattern.search(text)\n    \ndef text_starta_endy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'y'.\n    '''\n    pattern = re.compile(r\"^[a-y]\\d\\d[a-"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\s*(\\w*b)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return text[text.find('a'):]\n    else:\n        return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    matches = re.finditer('a', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has a 'c' followed by anything, ending in 'c'.\n    '''\n    matches = re.finditer('c', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'd' followed by anything, ending in 'd'.\n    '''\n    matches = re.finditer('d', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'e'.\n    '''\n    matches = re.finditer('e', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endf(text):\n    '''\n    Write a function that matches a string that has an 'f' followed by anything, ending in 'f'.\n    '''\n    matches = re.finditer('f', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endg(text):\n    '''\n    Write a function that matches a string that has an 'g' followed by anything, ending in 'g'.\n    '''\n    matches = re.finditer('g', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has an 'h' followed by anything, ending in 'h'.\n    '''\n    matches = re.finditer('h', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endi(text):\n    '''\n    Write a function that matches a string that has an 'i' followed by anything, ending in 'i'.\n    '''\n    matches = re.finditer('i', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endj(text):\n    '''\n    Write a function that matches a string that has an 'j' followed by anything, ending in 'j'.\n    '''\n    matches = re.finditer('j', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endk(text):\n    '''\n    Write a function that matches a string that has an 'k' followed by anything, ending in 'k'.\n    '''\n    matches = re.finditer('k', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endl(text):\n    '''\n    Write a function that matches a string that has an 'l' followed by anything, ending in 'l'.\n    '''\n    matches = re.finditer('l', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endm(text):\n    '''\n    Write a function that matches a string that has an'm' followed by anything, ending in'm'.\n    '''\n    matches = re.finditer('m', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endn(text):\n    '''\n    Write a function that matches a string that has an 'n' followed by anything, ending in 'n'.\n    '''\n    matches = re.finditer('n', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endo(text):\n    '''\n    Write a function that matches a string that has an 'o' followed by anything, ending in 'o'.\n    '''\n    matches = re.finditer('o', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endp(text):\n    '''\n    Write a function that matches a string that has an 'p' followed by anything, ending in 'p'.\n    '''\n    matches = re.finditer('p', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endq(text):\n    '''\n    Write a function that matches a string that has an 'q' followed by anything, ending in 'q'.\n    '''\n    matches = re.finditer('q', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endr(text):\n    '''\n    Write a function that matches a string that has an 'r' followed by anything, ending in 'r'.\n    '''\n    matches = re.finditer('r', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endt(text):\n    '''\n    Write a function that matches a string that has an 't' followed by anything, ending in 't'.\n    '''\n    matches = re.finditer('t', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endu(text):\n    '''\n    Write a function that matches a string that has an 'u' followed by anything, ending in 'u'.\n    '''\n    matches = re.finditer('u', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endv(text):\n    '''\n    Write a function that matches a string that has an 'v' followed by anything, ending in 'v'.\n    '''\n    matches = re.finditer('v', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endw(text):\n    '''\n    Write a function that matches a string that has an 'w' followed by anything, ending in 'w'.\n    '''\n    matches = re.finditer('w', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endx(text):\n    '''\n    Write a function that matches a string that has an 'x' followed by anything, ending in 'x'.\n    '''\n    matches = re.finditer('x', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endy(text):\n    '''\n    Write a function that matches a string that has an 'y' followed by anything, ending in 'y'.\n    '''\n    matches = re.finditer('y', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_endz(text):\n    '''\n    Write a function that matches a string that has an 'z' followed by anything, ending in 'z'.\n    '''\n    matches = re.finditer('z', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_end{\\n}(text):\n    '''\n    Write a function that matches a string that has an '\\n' followed by anything, ending in '\\n'.\n    '''\n    matches = re.finditer('\\n', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_end{'\\n': '\\n'}(text):\n    '''\n    Write a function that matches a string that has an '\\n' followed by anything, ending in '\\n'.\n    '''\n    matches = re.finditer('\\n', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_end{'\\n': '\\n'}(text):\n    '''\n    Write a function that matches a string that has a '\\n' followed by anything, ending in '\\n'.\n    '''\n    matches = re.finditer('\\n', text)\n    for match in matches:\n        print(match)\n        \ndef text_starta_end{'\\n': '\\n'}(text):\n    '''\n    Write a function that matches a string that has a '\\n' followed by anything, endin"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    for c in text:\n        if c == 'a':\n            if text.count('a') == 1:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if 'a' not in text:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    res = re.search(r'\\w{1,4}\\b\\w*a', text)\n    if res:\n        print(res.group())\n    else:\n        print('no start a')\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return text.endswith(\"a\") and text.endswith(\"b\")\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r'a(\\w+)b',text)\n    return x\ndef print_doc_start_end(doc):\n    '''\n    Prints out every word and sentence in doc in order.\n    '''\n    for t in doc:\n        print(t.split(' ')[0] + '\\n' + t.split(' ')[1] + '\\n')\ndef print_doc_start_end_2(doc):\n    '''\n    Print out every word and sentence in doc in order, in order.\n    '''\n    for t in doc:\n        print(t.split(' ')[0] + '\\n' + t.split(' ')[1] + '\\n' + t.split(' ')[2] + '\\n')\ndef print_doc_start_end_3(doc):\n    '''\n    Print out every word and sentence in doc in order, in order, and then some sentences.\n    '''\n    for t in doc:\n        print(t.split(' ')[0] + '\\n' + t.split(' ')[1] + '\\n' + t.split(' ')[2] + '\\n' + t.split(' ')[3] + '\\n')\ndef print_doc_start_end_3_2(doc):\n    '''\n    Print out every word and sentence in doc in order, in order, then some sentences.\n    '''\n    for t in doc:\n        print(t.split(' ')[0] + '\\n' + t.split(' ')[1] + '\\n' + t.split(' ')[2] + '\\n' + t.split(' ')[3] + '\\n' + t.split(' ')[4] + '\\n')\ndef print_doc_start_end_3_3(doc):\n    '''\n    Print out every word and sentence in doc in order, in order, then some sentences, then some sentences.\n    '''\n    for t in doc:\n        print(t.split(' ')[0] + '\\n' + t.split(' ')[1] + '\\n' + t.split(' ')[2] + '\\n' + t.split(' ')[3] + '\\n' + t.split(' ')[4] + '\\n' + t.split(' ')[5] + '\\n' + t.split(' ')[6] + '\\n' + t.split(' ')[7] + '\\n')\ndef print_doc_start_end_3_4(doc):\n    '''\n    Print out every word and sentence in doc in order, in order, then some sentences, then some sentences, then some sentences, then some sentences.\n    '''\n    for t in doc:\n        print(t.split(' ')[0] + '\\n' + t.split(' ')[1] + '\\n' + t.split(' ')[2] + '\\n' + t.split(' ')[3] + '\\n' + t.split(' ')[4] + '\\n' + t.split(' ')[5] + '\\n' + t.split(' ')[6] + '\\n' + t.split(' ')[7] + '\\n' + t.split(' ')[8] + '\\n')\ndef print_doc_start_end_3_5(doc):\n    '''\n    Print out every word and sentence in doc in order, in order, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences.\n    '''\n    for t in doc:\n        print(t.split(' ')[0] + '\\n' + t.split(' ')[1] + '\\n' + t.split(' ')[2] + '\\n' + t.split(' ')[3] + '\\n' + t.split(' ')[4] + '\\n' + t.split(' ')[5] + '\\n' + t.split(' ')[6] + '\\n' + t.split(' ')[7] + '\\n' + t.split(' ')[8] + '\\n' + t.split(' ')[9] + '\\n')\ndef print_doc_start_end_3_6(doc):\n    '''\n    Print out every word and sentence in doc in order, in order, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences.\n    '''\n    for t in doc:\n        print(t.split(' ')[0] + '\\n' + t.split(' ')[1] + '\\n' + t.split(' ')[2] + '\\n' + t.split(' ')[3] + '\\n' + t.split(' ')[4] + '\\n' + t.split(' ')[5] + '\\n' + t.split(' ')[6] + '\\n' + t.split(' ')[7] + '\\n' + t.split(' ')[8] + '\\n' + t.split(' ')[9] + '\\n' + t.split(' ')[10] + '\\n')\ndef print_doc_start_end_3_7(doc):\n    '''\n    Print out every word and sentence in doc in order, in order, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences, then some sentences.\n    '''\n    for t in doc:\n        print(t.split(' ')[0] + '\\n' + t.split(' ')[1] + '\\n' + t.split(' ')[2] + '\\n' + t.split(' ')[3] + '\\n' + t.split(' ')[4] + '\\n' + t.split(' ')[5] + '\\n' + t.split(' ')[6] + '\\n' + t.split(' ')[7] + '\\n' + t.split(' ')[8] + '\\n' + t.split(' ')[9] + '\\n' + t.split(' ')[10] + '\\n' + t.split(' ')[11] + '\\n' + t.split(' ')[12] + '\\n' + t.split(' ')[13] + '\\n' + t.split(' ')[14] + '\\n' + t.split(' ')[15] + '\\n' + t.split(' ')[16] + '\\n' + t.split(' ')[17] + '\\n' + t.split(' ')[18] + '\\n' + t.split(' ')[19] + '\\n' + t.split(' ')[20] + '\\n' + t.split(' ')[21] + '\\n' + t.split(' ')[22] + '\\n' + t.split(' ')[23] + '\\n' + t.split(' ')[24] + '\\n' + t.split(' ')[25] + '\\n' + t.split(' ')[26] + '\\n' + t.split(' ')[27] + '\\n' + t.split(' ')[28] + '\\n' + t.split(' ')[29] + '\\n' + t.split(' ')[30] + '\\n' + t.split(' ')[31] + '\\n' + t.split(' ')[32] + '\\n' + t.split(' ')[33] + '\\n' + t.split(' ')[34] + '\\n' + t.split(' ')[35] + '\\n' + t.split(' ')[36] + '\\n' + t.split(' ')[37] + '\\n' + t.split(' ')[38] + '\\n' + t.split(' ')[39] + '\\n' + t.split(' ')[40] + '\\n' + t.split(' ')[41] + '\\n' + t.split(' ')[42] + '\\n' + t.split(' ')[43] + '\\n' + t.split(' ')[44] + '\\n' + t.split(' ')[45] + '\\n' + t.split(' ')[46] + '\\n' + t.split(' ')[47] + '\\n' + t.split(' ')[48] + '\\n' + t.spli"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search(r'\\b[a-z]{1}\\b[a-z]\\b', text)\n    if result!= None:\n        return text[result.start() + 1:result.end()]\n    else:\n        return text\ndef split_by_whitespace(text):\n    return re.split(r'\\s+', text)\ndef split_by_periods(text):\n    return re.split(r'\\.\\s+', text)\ndef split_by_numbers(text):\n    return re.split(r'\\d+', text)\ndef split_by_digits(text):\n    return re.split(r'\\D+', text)\ndef split_by_symbols(text):\n    return re.split(r'\\w+', text)\ndef split_by_words(text):\n    return re.split(r'\\w+', text)\ndef split_by_quotation_marks(text):\n    return re.split(r'\\?' + re.escape(text) + r'\\?', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.findall(r'a.*b', text)\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if type(dict)!= dict:\n        print(\"Please enter a dictionary\")\n        return 0\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total=0\n    for i in dict.values():\n        total+=i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for i in dict:\n        sum = 0\n        for j in dict[i]:\n            sum += j\n        dict[i].append(sum)\n    return dict\n    \ndef return_sum_from_dict(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for i in dict:\n        sum = 0\n        for j in dict[i]:\n            sum += j\n        dict[i].append(sum)\n    return dict\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # TODO: Write your code here\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #defines range l and r \n    r = 50\n    l = -50\n    #loop to check for numbers greater than l and r\n    while r < l:\n        #add all odd numbers in range \n        sum = r + l\n        #check if number is odd\n        if sum % 2 == 0:\n            #check if number is not odd\n            #if it is odd it adds the numbers to the sum \n            sum += n\n            #make the check for a number more than 1\n            if sum > 1:\n                #if it is not odd it adds 1 to the sum\n                sum += 1\n            else:\n                #if it is odd it adds 1 to the sum\n                sum += 1\n        #check for l and r\n        if r <= sum < l:\n            #check if number is odd\n            #if it is odd it adds the number to the sum\n            sum += n\n            #if the sum is more than 1 it adds 1 to the sum\n            if sum > 1:\n                #if it is not odd it adds 1 to the sum\n                sum += 1\n            else:\n                #if it is odd it adds 1 to the sum\n                sum += 1\n        #update the answer\n        l = sum + 1\n    #return the sum\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = 0\n    for i in range(n, 0, -1):\n        if i % 2!= 0:\n            result += i\n    return result\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n // 2\n    elif n % 2 == 1:\n        return n * 3 + 1\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s=0\n    for i in range(n,0,-1):\n        if i%2==0:\n            s=s+i\n    return s\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = 100\n    s = 0\n    while l < r:\n        s = l + r\n        if s % 2 == 1:\n            r = s/2\n        else:\n            l = s + 1\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n):\n        if i % 2!= 0:\n            s += i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            s += i\n    return s\nprint(sum_odd(5))\nprint(sum_odd(10))\nprint(sum_odd(15))\nprint(sum_odd(25))\nprint(sum_odd(35))\nprint(sum_odd(45))\nprint(sum_odd(55))\nprint(sum_odd(65))\nprint(sum_odd(75))\nprint(sum_odd(100))\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = int(n)\n    sum = 0\n    while l <= r:\n        if l%2 == 1:\n            sum += l\n        l += 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1): \n        if i % 2 == 1: \n            total += i\n    return total\ndef div_by_5(x): \n    '''\n    Write a python function to return the sum of all the odd natural numbers less than or equal to x.\n    '''\n    total = 0\n    for i in range(1, x + 1): \n        if i % 5 == 0: \n            total += i \n    return total\ndef min_x_to_5(n): \n    '''\n    Write a python function to return the smallest number such that each number from 1 to n is divisible by 5.\n    '''\n    total = 0\n    for i in range(1, n+1): \n        if (i % 5 == 0): \n            total += i\n    return total\ndef max_divisible(x, div): \n    '''\n    Write a python function to find the maximum number such that it is divisible by div.\n    '''\n    total = 0\n    for i in range(1, x + 1): \n        if i % div == 0: \n            total += i\n    return total\ndef sum_x_to_20(n): \n    '''\n    Write a python function to find the sum of all the numbers from 1 to n that are divisible by 2.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if (i % 2 == 0): \n            total += i\n    return total\ndef x_to_5(n): \n    '''\n    Write a python function to find the sum of the number from 1 to n that is divisible by 5.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if i % 5 == 0: \n            total += i\n    return total\ndef div_by_2_to_20(x): \n    '''\n    Write a python function to return the sum of all the odd natural numbers less than or equal to x.\n    '''\n    total = 0\n    for i in range(1, x + 1): \n        if i % 2 == 1: \n            total += i\n    return total\ndef sum_odd_to_20(n): \n    '''\n    Write a python function to find the sum of all the odd natural numbers less than or equal to n.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if i % 2 == 0: \n            total += i\n    return total\ndef min_x_to_20(n): \n    '''\n    Write a python function to return the smallest number such that each number from 1 to n is divisible by 2.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if i % 2 == 0: \n            total += i\n    return total\ndef max_divisible(x, div): \n    '''\n    Write a python function to find the maximum number such that it is divisible by div.\n    '''\n    total = 0\n    for i in range(1, x + 1): \n        if i % div == 0: \n            total += i\n    return total\ndef sum_x_to_20(n): \n    '''\n    Write a python function to find the sum of all the numbers from 1 to n that are divisible by 2.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if i % 2 == 1: \n            total += i\n    return total\ndef div_by_2_to_20(x): \n    '''\n    Write a python function to return the sum of all the odd natural numbers less than or equal to x.\n    '''\n    total = 0\n    for i in range(1, x + 1): \n        if i % 2 == 1: \n            total += i\n    return total\ndef sum_odd_to_20(n): \n    '''\n    Write a python function to find the sum of all the odd natural numbers less than or equal to n.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if i % 2 == 0: \n            total += i\n    return total\ndef sum_even_to_20(n): \n    '''\n    Write a python function to find the sum of all the even natural numbers less than or equal to n.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if i % 2 == 0: \n            total += i\n    return total\ndef factorial(x): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    total = 1\n    for i in range(1, x + 1): \n        total *= i\n    return total\ndef is_prime(n): \n    '''\n    Write a python function to return true if the number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, n//2 + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef is_prime_to(n): \n    '''\n    Write a python function to return true if the number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, n//2 + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef is_prime_to_2(n): \n    '''\n    Write a python function to return true if the number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, n//2 + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef sum_primes(n): \n    '''\n    Write a python function to return the sum of all the prime numbers up to the given number.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if is_prime(i): \n            total += i\n    return total\ndef sum_primes_to_n(n): \n    '''\n    Write a python function to return the sum of all the prime numbers up to the given number.\n    '''\n    total = 0\n    for i in range(1, n + 1): \n        if is_prime_to(i): \n            total += i\n    return total\ndef factorial_primes_to_n(n): \n    '''\n    Write a python function to return the factorial of the given number.\n    '''\n    total = 1\n    for i in range(1, n + 1): \n        total *= i\n    return total\ndef is_prime_primes_to_n(n): \n    '''\n    Write a python function to return true if the number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, n//2 + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef is_prime_primes_to_2(n): \n    '''\n    Write a python function to return true if the number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, n//2 + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef su"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for value in arr:\n        sum = sum + value\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum = sum + num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    import math\n    if len(arr) == 1:\n        return arr[0]\n    return sum(arr[:len(arr)//2]) + _sum(arr[len(arr)//2:])\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = 0\n    for x in arr:\n        res += x\n    return res\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    # Hint: use a while loop\n    # Use a for loop to iterate over the array and add all elements to a new list.\n    # Do not worry about the order of the elements in the list.\n    # Assume the array is ordered in non-decreasing order.\n    s = 0\n    for i in arr:\n        s = s + i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for item in arr:\n        total += item\n    return total\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    tmp = n\n    s = 0\n    while (n!= 0):\n        r = n & 1\n        n >>= 1\n        s = s ^ r\n    return s | (tmp << d)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=d-1\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=d\n        j-=d\n    \n    print(\" \".join(m))\n    \ndef rotator(n,d):\n    '''\n    Write a function that takes a number and a d value and rotate it by d bits.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=d-1\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=d\n        j-=d\n    \n    print(\" \".join(m))\n    \ndef binary_to_dec(n,n_r,n_l):\n    '''\n    Write a function that returns the number in binary representation of a given number and its right rotation operation.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=n_r-1\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=n_r\n        j-=n_r\n    \n    print(\" \".join(m))\n    \ndef binary_to_int(n):\n    '''\n    Write a function that returns the number in binary representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef int_to_binary(n):\n    '''\n    Write a function that returns the number in binary representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef int_to_dec(n):\n    '''\n    Write a function that returns the number in decimal representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef int_to_hex(n):\n    '''\n    Write a function that returns the number in hexadecimal representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef int_to_bin(n):\n    '''\n    Write a function that returns the number in binary representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef bin_to_int(n):\n    '''\n    Write a function that returns the number in binary representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef bin_to_dec(n):\n    '''\n    Write a function that returns the number in decimal representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef bin_to_hex(n):\n    '''\n    Write a function that returns the number in hexadecimal representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef bin_to_bin(n):\n    '''\n    Write a function that returns the number in binary representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef bin_to_dec(n):\n    '''\n    Write a function that returns the number in decimal representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef dec_to_bin(n):\n    '''\n    Write a function that returns the number in binary representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef dec_to_hex(n):\n    '''\n    Write a function that returns the number in hexadecimal representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))\n    \ndef dec_to_int(n):\n    '''\n    Write a function that returns the number in decimal representation of a given number.\n    '''\n    print(n)\n    \n    s=str(n)\n    i=0\n    j=int(s[0])\n    m=[]\n    while i<len(s):\n        m.append(s[i:j+i])\n        i+=int(s[j])\n        j-=int(s[j])\n    \n    print(\" \".join(m))"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n >> d) | (n << (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) + (n >> (32 - d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d=d%n\n    carry=1\n    res=0\n    while n>0:\n        s=n%10\n        n=n//10\n        res=res*10+s\n        if (d!=0):\n            res=carry&res\n            carry=(d%2)\n            d=d//2\n    if d!=0:\n        res=carry&res\n        carry=(d%2)\n    return res\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    while (d):\n        n = n >> 1\n        d = d >> 1\n    \n    return n\n    \n    "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n % 4294967295\n    d = d % 4294967295\n    temp = n >> (32-d)\n    temp = (temp << (32-d)) + n\n    n = temp >> (32-d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Get the number of bits\n    shift = (1<<d)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\").replace(\"\\n\",\"\").replace(\"\\t\",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    no_whitespace_text = re.sub(' +','', text)\n    print(\"no whitespace text:\\n\", no_whitespace_text)\n    return no_whitespace_text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_space(text):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    return re.sub(' +','', text)\ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub('[^\\w\\s]', '', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+', '', text)\ndef remove_chars(text, chars):\n    '''\n    Write a function to remove characters from a string.\n    '''\n    return re.sub(r'[{}]'.format(chars), '', text)\ndef remove_symbols(text):\n    '''\n    Write a function to remove symbols from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9_\\-\\s]+', '', text)\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    return re.sub(r'\\d', '', text)\ndef convert_to_lowercase(text):\n    '''\n    Write a function to convert all letters to lowercase.\n    '''\n    return text.lower()\ndef convert_to_upper(text):\n    '''\n    Write a function to convert all letters to uppercase.\n    '''\n    return text.upper()\ndef convert_to_upper_with_spaces(text):\n    '''\n    Write a function to convert all letters to uppercase.\n    '''\n    return text.upper() +''\ndef remove_non_ascii(text):\n    '''\n    Write a function to remove non ascii characters from a string.\n    '''\n    return re.sub(r'[^\\x00-\\x7f]', '', text)\ndef remove_all_chars(text):\n    '''\n    Write a function to remove all characters from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9_\\s]', '', text)\ndef remove_all_special_characters(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9_\\.\\-\\s]+', '', text)\ndef remove_all_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    return re.sub(r'\\d', '', text)\ndef remove_all_lowercase(text):\n    '''\n    Write a function to remove all lowercase letters from a string.\n    '''\n    return re.sub(r'[a-z]+', '', text)\ndef remove_all_upper(text):\n    '''\n    Write a function to remove all uppercase letters from a string.\n    '''\n    return re.sub(r'[A-Z]+', '', text)\ndef remove_all_punctuation_with_chars(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9_\\s]', '', text)\ndef remove_all_digits_with_chars(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef convert_to_numbers(text):\n    '''\n    Write a function to convert all characters to numbers.\n    '''\n    return text.replace('+', '0').replace('-', '0').replace('/', '0').replace('*', '0').replace('=', '0').replace('<', '0').replace('>', '0').replace('[', '0').replace(']', '0').replace(';', '0').replace('<', '1').replace('>', '1').replace('[', '1').replace(']', '1').replace(';', '1').replace('-', '0').replace('.', '0').replace('+', '0').replace('%', '0').replace('*', '0').replace('=', '0').replace('!', '0').replace('\\'', '0').replace('\"', '0').replace('_', '0').replace('/', '0')\ndef remove_extra_spaces(text):\n    '''\n    Write a function to remove extra spaces from a string.\n    '''\n    return text.replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\ndef remove_spaces_and_extra_spaces(text):\n    '''\n    Write a function to remove extra spaces and extra spaces from a string.\n    '''\n    return text.replace('  ','').replace('  ','').replace('  ','').replace('  ','')\ndef remove_chars_and_extra_spaces(text):\n    '''\n    Write a function to remove extra spaces and extra spaces from a string.\n    '''\n    return text.replace('  ','').replace('  ','').replace('  ','').replace('  ','')\ndef remove_digits_and_extra_spaces(text):\n    '''\n    Write a function to remove extra spaces and extra spaces from a string.\n    '''\n    return text.replace('  ','').replace('  ','').replace('  ','').replace('  ','')\ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9_\\s]', '', text)\ndef remove_all_chars_and_extra_spaces(text):\n    '''\n    Write a function to remove extra spaces and extra spaces from a string.\n    '''\n    return text.replace('  ','').replace('  ','').replace('  ','').replace('  ','')\ndef remove_all_digits_and_extra_spaces(text):\n    '''\n    Write a function to remove extra spaces and extra spaces from a string.\n    '''\n    return text.replace('  ','').replace('  ','').replace('  ','').replace('  ','')\ndef remove_all_chars_and_extra_spaces_and_digits(text):\n    '''\n    Write a function to remove extra spaces and extra spaces from a string.\n    '''\n    return text.replace('  ','').replace('  ','').replace('  ','').replace('  ','').replace('  ','')\ndef remove_special_characters(text):\n    '''\n    Write a function to remove special characters from a string.\n    '''\n    return text.replace('!', '.').replace('>', '.').replace('<', '.').replace('?', '.').replace('.', '.').replace('!', '.').replace('>', '.').replace('<', '.').replace('?', '.').replace('.', '.').replace('!', '.').replace('>', '.').replace('<', '.').replace('?', '.').replace('.', '.')\ndef remove_special_characters_and_extra_spaces(text):\n    '''\n    Write a function to remove special characters from a string.\n    '''\n    return text.replace('!', '.').replace('>', '.').replace('<', '.').replace('?', '.').replace('.', '.').replace('!', '.').replace('>', '.').replace('<', '.').replace('?', '.').replace('.', '.').replace('!', '.').replace('>', '.').replace('<', '.').replace('?', '.').replace('.', '.')\ndef remove"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    splitted = re.split('\\s', text)\n    return ''.join(splitted)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +','', text)\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+',' ',text)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x==y==z:\n        count = 1\n    elif x==y!=z:\n        count = 2\n    elif x!=y!=z:\n        count = 3\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    n1=len(x)\n    n2=len(y)\n    n3=len(z)\n    # Write your code here.\n    if n1==n2 and n2==n3:\n        return(sum(x)+sum(y)+sum(z))\n    else:\n        return -1\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"Test Case : \",x,y,z)\n    try:\n        x=float(x)\n        y=float(y)\n        z=float(z)\n        print(\"Sum of three numbers\",sum(x,y,z))\n        print(\"Division of three numbers\",divide(x,y,z))\n        print(\"Multiplication of three numbers\",multiply(x,y,z))\n    except:\n        print(\"Some error has occurred!\")\n    \n    \n    \n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 1\n    elif x!= y!= z:\n        count = 0\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0,3):\n        for j in range(0,3):\n            for k in range(0,3):\n                if(x==i and y==j and z==k):\n                    count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    import time\n    start_time = time.time()\n    \n    x = sum(x)\n    y = sum(y)\n    z = sum(z)\n    \n    return x,y,z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x == y == z)\n    # def test_three_equal(x,y,z):\n    #     '''\n    #     Write a python function to count the number of equal numbers from three given integers.\n    #     '''\n    #     # count=0\n    #     # for i in x:\n    #     #     for j in y:\n    #     #         for k in z:\n    #     #             if i==j==k:\n    #     #                 count+=1\n    #     #         else:\n    #     #             count=0\n    #     #         else:\n    #     #             count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     #     else:\n    #     #         count+=1\n    #     "
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert(len(x)==3 and len(y)==3 and len(z)==3), \"Variable Length Must Be 3\"\n    assert(x[0]==y[0]==z[0]), \"Element Not Equal\"\n    assert(x[1]==y[1]==z[1]), \"Element Not Equal\"\n    assert(x[2]==y[2]==z[2]), \"Element Not Equal\"\n    assert(x[0]!=y[0]!=z[0]), \"Element Not Equal\"\n    assert(x[1]!=y[1]!=z[1]), \"Element Not Equal\"\n    assert(x[2]!=y[2]!=z[2]), \"Element Not Equal\"\n    assert(x[0]==y[0]==z[0]), \"Element Not Equal\"\n    assert(x[1]==y[1]==z[1]), \"Element Not Equal\"\n    assert(x[2]==y[2]==z[2]), \"Element Not Equal\"\n    assert(x[0]!=y[0]!=z[0]), \"Element Not Equal\"\n    assert(x[1]!=y[1]!=z[1]), \"Element Not Equal\"\n    assert(x[2]!=y[2]!=z[2]), \"Element Not Equal\"\n    assert(x[0]==y[0]!=z[0]), \"Element Not Equal\"\n    assert(x[1]==y[1]!=z[1]), \"Element Not Equal\"\n    assert(x[2]==y[2]!=z[2]), \"Element Not Equal\"\n    assert(x[0]!=y[0]!=z[0]), \"Element Not Equal\"\n    assert(x[1]!=y[1]!=z[1]), \"Element Not Equal\"\n    assert(x[2]!=y[2]!=z[2]), \"Element Not Equal\"\n    assert(x[0]==y[0]!=z[0]), \"Element Not Equal\"\n    assert(x[1]==y[1]!=z[1]), \"Element Not Equal\"\n    assert(x[2]==y[2]!=z[2]), \"Element Not Equal\"\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num = x + y + z\n    sum = num\n    for i in range(num):\n        if x == y == z:\n            sum -= i\n        else:\n            break\n    return sum\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    for i in range(0,len(arr)):\n        left=arr[i]\n        right=arr[i+1]\n        while left<=right:\n            if arr[i]>arr[i+1]:\n                break\n            if arr[i]>left and arr[i+1]>left:\n                break\n            if arr[i]>right and arr[i+1]>right:\n                break\n            if arr[i]>left and arr[i+1]<=right:\n                arr[i],arr[i+1]=arr[i+1],arr[i]\n                left,right=right,arr[i+1]\n                count+=1\n            elif arr[i]>left and arr[i+1]>right:\n                right=arr[i+1]\n                count+=1\n            elif arr[i]<left and arr[i+1]<=right:\n                arr[i],arr[i+1]=arr[i+1],arr[i]\n                left,right=arr[i+1],arr[i+1]\n                count+=1\n            elif arr[i]<left and arr[i+1]<=right:\n                arr[i],arr[i+1]=arr[i+1],arr[i]\n                left,right=arr[i+1],arr[i+1]\n                count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Declare the counter\n    count = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Set the index to 1\n        i = 1\n        \n        # Check to see if the array has any numbers in it\n        while i < len(arr):\n            \n            # if the current index is greater than the index of the smallest element\n            # if it is the smallest element, increment the index by 1\n            if arr[i] > arr[i - 1]:\n                i += 1\n            \n            # If it is not, increment the counter by 1\n            else:\n                count += 1\n                i += 1\n                \n    # Return the count\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # create a dictionary to store the number of rotations \n    # based on the array\n    rot_d = {}\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    for i in range(len(arr)):\n        temp = arr[i]\n        arr[i] = arr[len(arr) - i - 1]\n        arr[len(arr) - i - 1] = temp\n        rotations += 1\n        if i!= len(arr) - 1:\n            if arr[i] == arr[i + 1]:\n                rotations += 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        j = i-1\n        while arr[j] < arr[i]:\n            count += 1\n            j -= 1\n        arr[i],arr[j] = arr[j],arr[i]\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    counter = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] < arr[j]:\n                counter += 1\n    return counter\n    \ndef is_sorted(arr):   \n    '''\n    Write a python function to determine if a given array is sorted.\n    '''\n    \n    if len(arr) <= 1:\n        return True\n    if arr[0] <= arr[1]:\n        return True\n    return False\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    counter = 0\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            counter = counter + 1\n        else:\n            arr[i] = 0\n    return counter\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # initialize count\n    count = 0\n    \n    # iterate through array\n    for index in range(len(arr) - 1):\n        \n        # if arr[index] > arr[index + 1]\n        if arr[index] > arr[index + 1]:\n            # swap them\n            arr[index], arr[index + 1] = arr[index + 1], arr[index]\n            count += 1\n    \n    # return count\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    for i in range(len(arr)):\n        rotations += (len(arr)-i)\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    print(\"count_rotation()\")\n    # #\n    # # return int(input(\"Enter the number of rotations: \"))\n    # # #\n    # count = 0\n    # # #\n    # for i in range(0, len(arr)):\n    # # #\n    # # for j in range(len(arr) - i - 1, -1, -1):\n    # # #\n    # # #\n    # # if j > 0:\n    # # #\n    # # #     count += j\n    # # #\n    # # #\n    # # if j > 0:\n    # # #\n    # # #     count += len(arr) - j\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # #\n    # # "
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == int(n) : return True\n    elif n % 2 == 0 : return False\n    elif n % 3 == 0 : return False\n    else : return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_perfect_square(n // 2)\n        else:\n            return is_perfect_square(3 * n + 1)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Very important to use a for loop for this problem\n    count = 0\n    \n    while n!= 1 :\n        if n % 2 == 0 :\n            n = n / 2\n        else :\n            return False\n        count += 1\n    \n    if count == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n%2 == 0):\n        return False\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    m = (n * n) >> 1\n    for i in range(1, m + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    square = n\n    if n==2 or n==3 :\n        return True\n    else :\n        if n%2==0 and n%3==0 :\n            return square==n\n        elif n%2==0 :\n            return square==n**2\n        else :\n            return square==n**3\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # solution 1 :\n    if n == 0 or n == 1 : return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    square_root = int(math.sqrt(n))\n    if n == square_root*square_root :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n)\n    #check if there are no leading zeros\n    if x==0:\n        return False\n    #check for the fact that the value of sqrt(x) is greater than 1\n    if x==1:\n        return True\n    #compute the squared root of the number\n    root = x**0.5\n    #compute the remainder of the number if its root is not a perfect square\n    if not is_perfect_square(root):\n        return False\n    #check if the root of the number is equal or less than 1\n    if root>1:\n        return False\n    #add one to the square root and check if it is a perfect square\n    return is_perfect_square(root+1)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Corner cases\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    # Recursive Cases\n    else:\n        if n == 3:\n            return True\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n % 3 == 0:\n            return False\n        if n % 2 == 0 and n > 3:\n            return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for x in arr: \n        product *= x\n    if product % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\" \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_count = even_count + 1\n    if even_count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr = sorted(arr)\n    check_arr = []\n    flag = False\n    for i in range(len(arr)-1):\n        if arr[i]==arr[i+1]:\n            check_arr.append(arr[i])\n            check_arr.append(arr[i+1])\n    if check_arr.count(arr[0])%2==0:\n        flag = True\n    return flag\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==0:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count=0\n    for i in arr:\n        if(i%2==0):\n            count=count+1\n    return(count==0)\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = 0\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if lists[i][j] > highest:\n                highest = lists[i][j]\n    return highest\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_l = []\n    max_sum = lists[0]\n    for i in range(1, len(lists)):\n        if max_sum < lists[i]:\n            max_sum = lists[i]\n            max_l.append(lists[i])\n    return max_l\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    largest = [0,0]\n    for x in lists:\n        for y in x:\n            if y > largest[0]:\n                largest = [y, x]\n    return largest\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # check if there are duplicate values (list)\n    lists.sort(key=lambda x: x[0])\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    \n    returns = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > lists[i][j]:\n                lists[i][j] = lists[i][j]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # YOUR CODE HERE\n    #print(max_sum_list([[1,3,5,7],[2,4,6,8]]))\n    # HINT: You may not use any built-in function in Python. Try to write your own version of the function.\n    # Note: If you have Python print statements, you should use a 'print' command.\n    return max_sum_list_util(lists,0,0,0,0,0,0,0)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = []\n    for list in lists:\n        highest_sum.append(max(list))\n    return highest_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for list in lists:\n        for i in range(len(list)):\n            for j in range(i+1, len(list)):\n                if list[i] + list[j] > max(list):\n                    max_sum_list = [list[i]] + max_sum_list\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    for i in lists:\n        result.append([sum(i),i])\n    result.sort(key = lambda x: x[0])\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = []\n    for num_list in lists:\n        temp_sum = 0\n        for num in num_list:\n            temp_sum += num\n        if temp_sum > highest_sum[-1]:\n            highest_sum.append(temp_sum)\n        else:\n            highest_sum.append(temp_sum)\n    return highest_sum\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    for i in test_str:\n        if i.isupper():\n            if i >= \"A\" and i <= \"Z\":\n                if max_count < i:\n                    max_count = i\n            if i >= \"a\" and i <= \"z\":\n                if max_count < i:\n                    max_count = i\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # define empty array to store all uppercase characters\n    # each char has a run counter (appears in every character)\n    upper_char_array = []\n    # for each char in the given string, if it's uppercase, increment the run counter\n    # if char is not uppercase, add char to empty array\n    for char in test_str:\n        if char.isupper():\n            upper_char_array.append(char.lower())\n        else:\n            upper_char_array.append(char)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # remove any characters other than uppercase characters\n    test_str = test_str.replace(' ', '').replace('-', '').replace('.', '').replace(',', '').replace('?', '').replace('!', '').replace(';', '')\n    test_str = test_str.replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\x0b', '').replace('\\x1c', '')\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_chars = set(test_str)\n    return max(upper_chars, key=upper_chars.__getitem__)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_chars = 0\n    for char in test_str:\n        if char.isupper():\n            upper_chars += 1\n    return upper_chars\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    lower_count = 0\n    for char in test_str:\n        if char.isupper():\n            upper_count += 1\n        elif char.islower():\n            lower_count += 1\n    return upper_count + lower_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Your code here\n    max_run = 0\n    i = 0\n    \n    while i < len(test_str):\n        if test_str[i].isupper():\n            max_run += 1\n        else:\n            max_run -= 1\n        i += 1\n    \n    if max_run == 0:\n        return \"No run uppercase characters\"\n    \n    else:\n        return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_counter = 0\n    for character in test_str:\n        if character.isupper():\n            upper_counter += 1\n    return upper_counter\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) <= 0:\n        return 0\n    else:\n        max_char_len = 0\n        max_char = \"\"\n        for char in test_str:\n            if char.isupper():\n                if len(char) > max_char_len:\n                    max_char_len = len(char)\n                    max_char = char\n        return max_char_len\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize the result\n    result = 0\n    \n    # Loop through the string\n    for i in range(0, len(test_str)):\n        if(test_str[i].isupper()):\n            result += 1\n            \n    # Return the result\n    return result\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if len(nums) % 2 else nums[1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    odd = 0\n    for n in nums:\n        if n % 2 == 1:\n            odd = odd + n\n    return odd\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # This is to find the first odd number\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n        else:\n            continue\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n        \n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n        else:\n            pass\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Test your code\n    # Use the if-else statement to test your code.\n    # Declare a variable to store the first number\n    first_num = nums[0]\n    # Check if the first number is even\n    if first_num % 2 == 0:\n        # If it is, then return the first number\n        return first_num\n    # Return the first number that is not even\n    else:\n        # Repeat the process for the other numbers\n        for num in range(1, len(nums)):\n            if num % 2 == 1:\n                return nums[num]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    s = sum(nums)\n    if s%2 == 1:\n        return nums[0]\n    else:\n        return nums[len(nums)-1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    s = 0\n    for i in nums:\n        s += 1\n        if i % 2!= 0:\n            print(f\"the first odd number is : {i}\")\n            return s\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #if len(test_tup) < K:\n    #    return False\n    #else:\n    #    return True\n    return all([True if test_tup[i] in K else False for i in range(len(test_tup))])\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # TODO: Add your code here\n    for i in range(len(test_tup)):\n        if(len(test_tup[i])!= K):\n            print(len(test_tup[i]))\n            print(K)\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for k in K:\n        if k in test_tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(set(test_tup)) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup not in K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Set k as k or not\n    k = K\n    # Add all the elements of tuples to a new array\n    arr = [x for x in test_tup]\n    # Check if the array contains the k\n    if arr.count(k) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    K = int(K)\n    for i in test_tup:\n        if i not in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check = True\n    # find if the first element of the tuple is not equal to 0 or not\n    if test_tup[0] == 0:\n        check = False\n    # if the first element of the tuple is not greater than the given K\n    if test_tup[0] > K:\n        check = False\n    # if the second element of the tuple is not greater than the given K\n    if test_tup[1] > K:\n        check = False\n    # if the third element of the tuple is not greater than the given K\n    if test_tup[2] > K:\n        check = False\n    # if the fourth element of the tuple is not greater than the given K\n    if test_tup[3] > K:\n        check = False\n    # if the fifth element of the tuple is not greater than the given K\n    if test_tup[4] > K:\n        check = False\n    # if the sixth element of the tuple is not greater than the given K\n    if test_tup[5] > K:\n        check = False\n    # if the seventh element of the tuple is not greater than the given K\n    if test_tup[6] > K:\n        check = False\n    # if the eighth element of the tuple is not greater than the given K\n    if test_tup[7] > K:\n        check = False\n    # if the last element of the tuple is not greater than the given K\n    if test_tup[8] > K:\n        check = False\n    # if the first element of the tuple is not greater than the given K\n    if test_tup[9] > K:\n        check = False\n    return check\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    def is_contain_K(tupl):\n        return tupl[-1] == K\n    \n    return all(is_contain_K(tupl) for tupl in test_tup)\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check = 0\n    for i in test_tup:\n        if i == K:\n            check += 1\n    return check == 1\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return True\n    elif len(test_tup1) < len(test_tup2):\n        return False\n    else:\n        for elem in test_tup2:\n            if elem < test_tup1[0]:\n                return False\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # loop to check each element of the second tuple for the smaller element\n    for i in test_tup2:\n        if test_tup1[1] > i:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    for i in range(test_tup1_len):\n        for j in range(test_tup2_len):\n            if test_tup1[i] < test_tup2[j]:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    check = True\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                check = False\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup2[i] > test_tup1[i]:\n                check = False\n    return check\n"
    }
]