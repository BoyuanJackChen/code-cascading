[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #add in the 3th argument\n    l = []\n    #loop through the two lists\n    for i in range(len(test_tup1)):\n        #add each element\n        l.append(test_tup1[i])\n        l.append(test_tup2[i])\n    #get the num elements in the two lists\n    c = 0\n    for i in range(len(l)):\n        if l[i] in l[c:c+3]:\n            c += 1\n    return l[c:c+3]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return (test_tup1[0] * test_tup2[1] - test_tup1[1] * test_tup2[0])\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    sorted_list1 = sorted(test_tup1)\n    sorted_list2 = sorted(test_tup2)\n    #print(sorted_list1, sorted_list2)\n    #print(sorted_list1[0], sorted_list2[0])\n    #print(len(test_tup1))\n    if len(sorted_list1)!= len(sorted_list2):\n        return None\n    else:\n        return sorted_list1[0:len(sorted_list1)] + sorted_list2[0:len(sorted_list2)]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    res = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                res.append(i)\n    return res\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Shared elements should be same length!\")\n    test_tup3 = []\n    for ele in test_tup1:\n        if ele in test_tup2:\n            test_tup3.append(ele)\n    return test_tup3\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # Write your code here.\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1).intersection(test_tup2)\n    return shared_elements\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print(\"\\n---  Shared Elements From Two Lists  ---\\n\")\n    print(f\"List A: {test_tup1}\")\n    print(f\"List B: {test_tup2}\")\n    print(\"\\n\")\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1).intersection(test_tup2)\n    return shared_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    # elif n % 2 == 0:\n    #     return True\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0 and n!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef nth_prime(n):\n    '''\n    Write a python function to return the nth prime number.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if is_prime(n):\n        return n\n    prime_list=[]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        if i in prime_list:\n            continue\n        else:\n            prime_list.append(i)\n    return prime_list[-1]\ndef calculate_sum(n):\n    '''\n    Write a python function to compute the sum of a given number.\n    '''\n    if n == 1:\n        return 0\n    if n==2:\n        return 1\n    if is_prime(n):\n        return n\n    prime_list=[]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        if i in prime_list:\n            continue\n        else:\n            prime_list.append(i)\n    return prime_list[-1]\ndef input_primes(n):\n    '''\n    Write a python function to generate a list of primes up to n.\n    '''\n    if n==1:\n        return []\n    if n==2:\n        return [2]\n    if is_prime(n):\n        return []\n    prime_list=[]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        if i in prime_list:\n            continue\n        else:\n            prime_list.append(i)\n    return prime_list\ndef input_primes_2(n):\n    '''\n    Write a python function to generate a list of primes up to n.\n    '''\n    if n==1:\n        return []\n    if n==2:\n        return [2]\n    if is_prime(n):\n        return []\n    prime_list=[]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        if i in prime_list:\n            continue\n        else:\n            prime_list.append(i)\n    return prime_list\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if is_prime(n):\n        return True\n    if is_not_prime(n):\n        return False\ndef is_square(n):\n    '''\n    Write a python function to check if a number is square or not.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if is_square(n):\n        return True\n    if is_not_square(n):\n        return False\ndef is_not_square(n):\n    '''\n    Write a python function to check if a number is square or not.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if is_square(n):\n        return True\n    if is_not_square(n):\n        return False\ndef get_pos(n, d, p):\n    '''\n    Write a python function to return the position of the given element.\n    '''\n    if d == 1:\n        return n\n    if d == 2:\n        return p+n\n    return get_pos(n,d-1,p)\ndef is_prime_but_not_square(n):\n    '''\n    Write a python function to check if a number is prime but not a square.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if is_prime_but_not_square(n):\n        return True\n    if is_not_prime_but_not_square(n):\n        return False\ndef get_sum_digits(n):\n    '''\n    Write a python function to return the sum of digits of a given number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if is_prime(n) or is_square(n):\n        return n\n    return get_sum_digits(get_pos(n,1,0))+get_sum_digits(get_pos(n,1,1))\ndef is_not_prime_but_not_square(n):\n    '''\n    Write a python function to check if a number is not prime but not a square.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if is_prime_but_not_square(n):\n        return True\n    if is_not_prime_but_not_square(n):\n        return False\ndef get_power_of_n(n,p):\n    '''\n    Write a python function to return the power of n, p.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n<=p:\n        return get_power_of_n(n-1,p)\n    else:\n        return n+get_power_of_n(n-1,p-2)\ndef get_power_of_two(n):\n    '''\n    Write a python function to return the power of 2.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    return get_power_of_two(n-1)+get_power_of_two(n-2)\ndef get_sum_sum_squares(n):\n    '''\n    Write a python function to return the sum of squares of a given number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return n\n    if is_prime(n):\n        return n+n\n    if n<=p:\n        return n**2\n    else:\n        return (n+get_power_of_two(n))**2\ndef get_sum_square_digits(n):\n    '''\n    Write a python function to return the sum of squares of a given number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return n\n    if is_prime(n) or is_square(n):\n        return n\n    return get_sum_square_digits(get_power_of_two(n-1))+get_sum_square_digits(get_power_of_two(n-2))\ndef is_prime_but_not_square_or_square(n):\n    '''\n    Write a python function to check if a number is prime but not a square or square.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if is_prime_but_not_square(n):\n        return True\n    if is_not_prime_but_not_square(n):\n        return False\ndef is_not_prime_but_square(n):\n    '''\n    Write a python function to check if a number is not prime but not a square or square.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if is_prime_but_not_square(n):\n        return False\n    if is_not_prime_but_not_square(n):\n        return True\ndef is_square_or_not_square(n):\n    '''\n    Write a python function to check if a number is square or not.\n    '''\n    if n=="
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    if n%7==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 2:\n        return True\n    else:\n        for i in range(2, n//2+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, math.sqrt(n)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \ndef primality(n, n1):\n    '''\n    Write a python function to find the prime numbers less than or equal to n.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n <= n1:\n        return is_not_prime(n)\n    else:\n        i = n1\n        while i*i <= n:\n            if is_not_prime(i):\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return False\n    elif n % 2 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef main():\n    '''\n    Run the following program:\n    python main.py\n    '''\n    n = int(input(\"Enter a number:\"))\n    if is_not_prime(n):\n        print(\"The entered number is not prime.\")\n    else:\n        print(n,\"is a prime number.\")\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        return is_not_prime(n // 2) or is_not_prime(n // 3)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    count = 0\n    if n == 1:\n        count = 1\n        return count\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                count = count + 1\n            else:\n                count = 0\n        if count == 1:\n            return count\n        else:\n            return count\ndef count_digits(n):\n    '''\n    Write a function to count the digits of n\n    '''\n    count = 0\n    while n!= 0:\n        count = count + 1\n        n = n // 10\n    return count\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(0,len(nums)):\n        heapq.heappush(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        if i!=0:\n            heapq.heappush(heap,-nums[i])\n        else:\n            heapq.heappush(heap,nums[i])\n    return -heap[0]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    while len(nums)>0:\n        heapq.heappop(nums)\n    return nums\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    while len(nums)>0:\n        heapq.heappop(nums)\n    return nums\ndef heap_queue_position(n,v):\n    '''\n    Write a function to determine the position of the given variable in a given list of numbers, sorted by the elements of the list.\n    The list is assumed to be sorted in ascending order.\n    '''\n    if len(n)==0:\n        return 0\n    if v < n[0]:\n        return 1\n    elif v > n[-1]:\n        return len(n)-1\n    else:\n        return n.index(v)\ndef find_min(n,v):\n    '''\n    Write a function to return the minimum value in a given list of numbers.\n    '''\n    min = heap_queue_smallest(n,v)\n    for i in range(len(n)):\n        if v<n[i] and heap_queue_position(n,v)<heap_queue_position(n,min):\n            min = n[i]\n    return min\ndef find_max(n,v):\n    '''\n    Write a function to return the maximum value in a given list of numbers.\n    '''\n    max = heap_queue_largest(n,v)\n    for i in range(len(n)):\n        if v>n[i] and heap_queue_position(n,v)>heap_queue_position(n,max):\n            max = n[i]\n    return max\ndef find_index(n,v):\n    '''\n    Write a function to return the index of the given value in a given list of numbers.\n    '''\n    for i in range(len(n)):\n        if v==n[i]:\n            return i\ndef heap_sort(n):\n    '''\n    Write a function to sort a list of numbers in ascending order.\n    '''\n    n.sort(key=find_index)\n    return n\ndef main():\n    '''\n    Write a function to print a list of numbers where the first element is at index 0 and the last element is at index 7.\n    '''\n    n=[i for i in range(1,8)]\n    n.insert(len(n)-1,0)\n    n.append(7)\n    print(n)\n    print(heap_queue_position(n,7))\n    print(heap_queue_position(n,1))\n    print(heap_queue_position(n,8))\n    print(heap_sort(n))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    nums = sorted(nums,reverse=True)\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    ans = []\n    while len(heap) > 0:\n        ans.append(-hq.heappop(heap))\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in nums:\n        heapq.heappush(heap,i)\n    nums = heapq.nlargest(n,heap)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    h = []\n    for i in range(0,n):\n        hq.heappush(h,nums[i])\n    while len(h)!= 0:\n        val = hq.heappop(h)\n        print(val)\n        hq.heappush(h,val*-1)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    l=[]\n    for i in range(n):\n        l.append(nums[i])\n    hq.heapify(l)\n    for i in range(n-1,0,-1):\n        l[0],l[i]=l[i],l[0]\n        hq.heapify(l)\n    return l[0]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    l = []\n    for i in range(n):\n        l.append(nums[i])\n    heapq.heapify(l)\n    for i in range(n-1):\n        heapq.heappushpop(l,heapq.heappop(l) - heapq.heappop(l))\n    return l\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,(-num,num))\n    lst = []\n    for i in range(n-1):\n        heapq.heappush(lst,heapq.heappop(heap)[1])\n    return lst[::-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x >= 0 and x <=0:\n        return False\n    elif x >= 0:\n        x = 1\n        while x > 0:\n            if x%2 == 1:\n                return False\n            x = x // 2\n        return True\n    elif x > 0:\n        x = 1\n        while x > 0:\n            if x%2 == 1:\n                return False\n            x = x // 2\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>0:\n        if x % 2 == 0:\n            print('{} is a power of 2'.format(x))\n        else:\n            print('{} is not a power of 2'.format(x))\n    else:\n        print('{} is not a power of 2'.format(x))\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # your code here\n    return 0"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x >= 0): \n        if (x & x-1) == 0: \n            return True\n        else: \n            return False\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = str(x)\n    k = len(y)\n    if x<=0 and y<0:\n        print(x,\"is not a power of two\")\n    elif x<0 and y>0:\n        print(x,\"is not a power of two\")\n    elif x>0 and y<0:\n        print(x,\"is not a power of two\")\n    else:\n        print(x,y,k,\"is a power of two\")\n        \nnum = int(input(\"Enter a number: \"))\nis_Power_Of_Two (num)"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x % 2 == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x // 2)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = abs(x) \n    if (x == x): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x == 0): \n        return True\n    if (x & 1): \n        return False\n    return is_Power_Of_Two(x / 2)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 2**32:\n        return False\n    if x < 2**32 and x!= x:\n        return False\n    return True\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9\\s]')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    s = ''\n    for i in text:\n        if len(i) < 4:\n            s += i\n    return s\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in text:\n        if len(i) > 4:\n            yield i\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            long_text += text[i]\n    return long_text\ndef find_long_text(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            long_text += text[i]\n    return long_text\ndef find_short_text(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return short_text\ndef find_short_text_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return len(short_text)\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return short_text\ndef find_short_text_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return len(short_text)\ndef find_short_text_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return short_text\ndef find_short_text_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            long_text += text[i]\n    return long_text\ndef find_long_text_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            long_text += text[i]\n    return len(long_text)\ndef find_long_text_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return short_text\ndef find_long_text_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            long_text += text[i]\n    return long_text\ndef find_short_text_short_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return len(short_text)\ndef find_long_text_short_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return len(short_text)\ndef find_long_text_long_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            long_text += text[i]\n    return len(long_text)\ndef find_long_text_short_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return len(short_text)\ndef find_long_text_long_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            long_text += text[i]\n    return len(long_text)\ndef find_long_text_short_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return len(short_text)\ndef find_long_text_long_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            long_text += text[i]\n    return len(long_text)\ndef find_short_text_long_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            long_text += text[i]\n    return len(long_text)\ndef find_long_text_short_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    short_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            short_text += text[i]\n    return len(short_text)\ndef find_short_text_short_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            long_text += text[i]\n    return len(long_text)\ndef find_short_text_long_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            long_text += text[i]\n    return len(long_text)\ndef find_short_text_long_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = ''\n    for i in range(len(text)):\n        if len(text[i]) <= 3:\n            lon"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w+', text)\ndef char_long(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'\\w+', text)\ndef char_long_filter(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_2(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_3(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_4(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_5(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_6(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_7(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_8(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_9(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_10(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_11(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_12(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_13(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_14(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_15(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_16(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_17(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_18(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_19(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_20(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_21(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_22(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_23(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_24(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_25(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_26(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_27(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_28(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_29(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_30(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_31(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_32(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_33(text):\n    '''\n    Write a function to print all the words which are at least 4 characters long.\n    '''\n    return re.findall(r'[^\\w\\s]', text)\ndef char_long_filter_34(text):\n    '''\n    Write a function to print all the words which are at leas"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.split()\n    longest_word = ''\n    for word in text:\n        if len(word) >= 3:\n            if word not in longest_word:\n                longest_word = word\n    return longest_word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    match = re.search(\"^[a-zA-Z]*\\s[a-zA-Z]*\\s[a-zA-Z]*\\s[a-zA-Z]*\\s[a-zA-Z]*\\s[a-zA-Z]*\\s[a-zA-Z]*$\",text)\n    print(match)\n    return match\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    def is_at_least_4_char(str):\n        return len(str) >= 4\n    def is_unique(str):\n        str = str.lower()\n        return all(c.isalpha() for c in str) and all(c.isalpha() for c in str.replace('-', ''))\n    def is_unique_in_list(str):\n        str = str.lower()\n        return all(c.isalpha() for c in str) and all(c.isalpha() for c in str.replace('-', '')) and not str.startswith(' ')\n    for word in text:\n        if is_at_least_4_char(word) or is_unique(word):\n            yield word\n    for word in text:\n        if is_unique_in_list(word):\n            yield word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    text = str(text)\n    count_words = 0\n    for i in range(len(text)):\n        if text[i] == \" \":\n            count_words += 1\n        if count_words >= 4:\n            long_words.append(text[i])\n            count_words = 0\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_size = len(text)\n    bad_words = {}\n    bad_words_id = {}\n    for i in range(text_size):\n        # remove non-ascii characters\n        text = text.replace(chr(i), \"\")\n        # remove spaces\n        text = text.replace(\" \",\"\")\n        # remove multiple spaces\n        text = re.sub(\" +\",\" \",text)\n        words = re.split(\"\\s+\",text)\n        for word in words:\n            # remove punctuation\n            word = re.sub(\"[^a-zA-Z]\", \" \", word)\n            # remove all other punctuation\n            word = re.sub(\"[\\W]+\", \" \", word)\n            # check if the word is in the bad words dictionary\n            if word in bad_words:\n                # increase the counter by 1\n                bad_words_id[word] = bad_words_id[word] + 1\n            else:\n                # add it to the list of bad words\n                bad_words[word] = 1\n    return bad_words_id\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    \n    for num in nums:\n        squares.append(num**2)\n    \n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = []\n    for num in nums:\n        square_nums.append(num*num)\n    return square_nums\n    \n    # must use split instead of map\n    # return [num*num for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num**2)\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for element in nums:\n        squared.append(element*element)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    l = list(map(lambda x: x**2, nums))\n    return list(map(lambda x: x**2, l))\n    # return map(lambda x: x**2, nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num ** 2)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = [num ** 2 for num in nums]\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for num in nums:\n        squared.append(num**2)\n    return squared\n    \n    \ndef is_prime(n):\n    '''\n    Use recursion to find if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    if n in primes:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str is None or len(str) == 0:\n        return None\n    rotations = 0\n    for i in range(len(str)):\n        if str[i] is str[i-1]:\n            rotations += 1\n        else:\n            rotations = 0\n        if rotations > 0:\n            break\n    if rotations > 0:\n        print(\"Rotations are greater than 0\")\n    else:\n        print(\"Rotations are less than 0\")\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 4:\n        return 0\n    rotations = 0\n    maxRotations = 0\n    for i in range(len(str)-2):\n        if str[i] == str[i+1] and str[i] == str[i+2]:\n            rotations += 1\n        elif str[i] == str[i+1] or str[i+1] == str[i+2]:\n            rotations += 2\n        else:\n            rotations = 0\n        if rotations > maxRotations:\n            maxRotations = rotations\n    return maxRotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if (len(str) == 1):\n        return 1\n    elif (str[0] == str[-1]):\n        return 0\n    elif (str[0] =='s' or str[-1] =='s'):\n        return 1\n    elif (str[0] == 't' or str[-1] == 't'):\n        return 2\n    elif (str[0] == 'n' or str[-1] == 'n'):\n        return 3\n    elif (str[0] == 'w' or str[-1] == 'w'):\n        return 4\n    else:\n        return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    i = 0\n    string = str\n    for j in range(0, len(string)-1):\n        if string[j] == string[j+1]:\n            i += 1\n        else:\n            string = string[:j] + string[j+1:]\n            string = string[:j] + string[j+1:]\n            i = 0\n    return i\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    Rotations = 0\n    n = len(str)\n    i = 0\n    while(i < n):\n        if(str[i]!= str[i+1]):\n            if(str[i] == str[i+1]):\n                Rotations = Rotations + 1\n            else:\n                Rotations = Rotations - 1\n            i = i + 1\n        else:\n            i = i + 1\n    return Rotations\ndef is_prime(num):\n    if(num == 0 or num == 1):\n        return False\n    if(num < 2 or num%2 == 0):\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if(num%i == 0):\n            return False\n    return True\ndef dfs(num,arr,i,dic):\n    global count\n    if(i > count):\n        count = i\n        return\n    if(num == 0 or num == 1):\n        return\n    if(num < 2 or num%2 == 0):\n        return\n    if(dic[i]!= 0):\n        return\n    dic[i] = 1\n    dfs(num//2,arr,i-1,dic)\n    dic[i] = 0\n    dfs(num//2,arr,i+1,dic)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    last_char = 'A'\n    for char in str:\n        if char == last_char:\n            rotations += 1\n        else:\n            if rotations > 0:\n                rotations -= 1\n            else:\n                rotations = 1\n            last_char = char\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    count = 0\n    for i in range(len(str)-1):\n        if(str[i]==str[i+1]):\n            count+=1\n        else:\n            rotations+=count\n            count=0\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    print(str)\n    rotations = []\n    for i in range(len(str) - 2):\n        if(str[i]!= str[i + 1] and str[i + 1]!= str[i + 2]):\n            rotations.append(i + 1)\n    rotations.append(len(str) - 2)\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(s, n, d):\n        # get the required number of rotations\n        n = n % (len(d) + 1)\n        \n        # find the minimum number of rotations required\n        return len(d[n])\n        \n    # find the required number of rotations\n    n = int(len(str) / 2)\n    d = []\n    # convert the string to characters\n    for c in str:\n        d.append(c)\n    # get the minimum number of rotations\n    rotations = rotate(d, n, d)\n    \n    # convert the rotations\n    for i in range(rotations):\n        d[n-i] = d[n-i][::-1]\n        \n    # return the rotations\n    return d\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"empty string\")\n        return\n    elif len(s)==1:\n        print(s,\"no occurance of\",ch)\n        return\n    else:\n        print(s,\"occurance of\",ch,\"th\",s[0],\"and\",s[-1])\n        remove_Occ(s[0],ch)\n        remove_Occ(s[-1],ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch: \n        s.pop(0)\n        s.pop() \n    else: \n        return None \n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0]==ch:\n        if s[-1]==ch:\n            return s[1:-1]\n        else:\n            return s[1:]\n    else:\n        return s[:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.lower()\n    return s[s.find(ch)+1:len(s)]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0 or s[0]!= ch:\n        return \"\"\n    else:\n        s = s[1:-1]\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.lower()\n    if not len(s) == 1:\n        return s\n    if s.count(ch) == 1:\n        return s\n    if s.find(ch) >=0:\n        return s.replace(ch, '')\n    else:\n        return ''\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch == '':\n        return ''\n    elif ch in s:\n        return s.replace(ch,'',1)\n    else:\n        return ''\n    \ndef remove_character(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch == '':\n        return ''\n    elif ch in s:\n        return s.replace(ch,'',1)\n    else:\n        return ''\n    \ndef remove_two_occ(s):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace('a','')\n    s = s.replace('e','')\n    s = s.replace('i','')\n    s = s.replace('o','')\n    s = s.replace('u','')\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    n = len(s)\n    # print(s[:n//2])\n    # print(s[n//2:])\n    # for i in range(0,n//2):\n    #     print(s[i:i+2])\n    # print(s[n//2:n//2+2])\n    if ch in s:\n        s = s.replace(ch, '')\n    if n//2 > 0:\n        s = s.replace(s[n//2:n//2+2], '')\n    return s\n        \n    \ndef main():\n    '''\n    Reads from STDIN and calls remove_Occ() on each line.\n    '''\n    line = sys.stdin.readline()\n    # if not line:\n    #     sys.exit()\n    # remove_Occ(line,line[0])\n    print(remove_Occ(line,line[0]))\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[ch-1]+s[ch+1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Implement your function here\n    M = sorted(M, key = lambda x: x[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # write your code here\n    summ = 0\n    for i in range(len(M)):\n        summ += M[i][0]\n    M.sort(key=lambda x: x[0])\n    M.sort(key=lambda x: -x[0])\n    result = []\n    j = 0\n    while len(result) < len(M):\n        result.append([0 for i in range(summ)])\n        j += 1\n        for i in range(j):\n            if M[i][0] > M[i + 1][0]:\n                result[j - i - 1][0] = M[i][0]\n                result[j - i - 1][1] = M[i][1]\n            else:\n                result[j - i - 1][0] = M[i + 1][0]\n                result[j - i - 1][1] = M[i + 1][1]\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            M[i][j] = M[j][i]\n            M[j][i] = M[i][j]\n    for i in range(len(M)):\n        M[i][0] = M[0][i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum_rows(M):\n        s = 0\n        for row in M:\n            s += sum(row)\n        return s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    i = 0\n    while i < len(M) - 1:\n        #  print(M[i][0], M[i][1], M[i + 1][0], M[i + 1][1])\n        if M[i][0] > M[i + 1][0]:\n            # M[i][0] > M[i + 1][0] and M[i][1] > M[i + 1][1]\n            # print(\"BEST CASE\")\n            # print(M[i][0], M[i][1])\n            # print(M[i + 1][0], M[i + 1][1])\n            # print(M[i][0], M[i + 1][1])\n            # print()\n            # print()\n            M[i], M[i + 1] = M[i + 1], M[i]\n            # M[i + 1], M[i] = M[i], M[i + 1]\n            i += 2\n        else:\n            # M[i][1] > M[i + 1][1] and M[i][0] > M[i + 1][0]\n            # print(\"BEST CASE\")\n            # print(M[i][0], M[i][1])\n            # print(M[i + 1][0], M[i + 1][1])\n            # print()\n            # print()\n            M[i], M[i + 1] = M[i + 1], M[i]\n            i += 2\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s_row_sum = []\n    for i in range(len(M)):\n        s_row_sum.append(sum(M[i]))\n    return sorted(M, reverse=True, key=lambda k: k[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    S = 0\n    for i in range(len(M)):\n        S = S + M[i][0]\n    k = 0\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = S - M[i][j]\n        k = k + 1\n    for i in range(len(M)):\n        for j in range(k):\n            M[i].pop()\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M)<2:\n        return M\n    m = M[0]\n    n = len(M[0])\n    def find(x):\n        i = 0\n        j = n-1\n        while i<=j:\n            m = (i+j)/2\n            if m<m:\n                i+=1\n            else:\n                j-=1\n            j-=1\n        return m\n    return sorted(M, key=find)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Step 1: Remove duplicates\n    # Step 2: Sort all the rows according to the sum\n    # Step 3: Add the result in the end\n    # Step 4: Iterate through the reversed rows\n    # Step 5: Iterate through the rows in reverse order\n    # Step 6: Remove the duplicates\n    \n    # Init the matrix as an empty list\n    M = []\n    for i in range(len(M)):\n        # Iterate through each row\n        for j in range(len(M[i])):\n            # Add the value at the end of the matrix\n            M[i][j] = M[i][j] + M[j][i]\n    # Sort the matrix in ascending order\n    M.sort(key = lambda x: x[0])\n    # Sort the rows in reverse order\n    M.reverse()\n    # Iterate through the reversed rows\n    for i in range(len(M)):\n        # Remove the duplicate rows\n        for j in range(len(M[i])):\n            if M[i][j]!= M[i][j]:\n                break\n        else:\n            # Remove the duplicate rows\n            for j in range(len(M[i])):\n                M[i][j] = M[i][j] / 2\n    # Remove the duplicates\n    for i in range(len(M)):\n        M[i] = [M[i][i] for i in range(len(M[i])) if M[i][i]!= 0]\n    # Return the sorted matrix\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_matrix = [[0 for i in range(len(M[0]))] for j in range(len(M))]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            new_matrix[i][j] = M[i][j]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if new_matrix[i][j]!= 0:\n                for k in range(j, len(M)):\n                    new_matrix[k][j] = new_matrix[i][j]\n                    new_matrix[k][j] = new_matrix[k][j] + new_matrix[i][j]\n    for i in range(len(new_matrix)):\n        for j in range(len(new_matrix[0])):\n            if new_matrix[i][j]!= 0:\n                for k in range(i, len(new_matrix)):\n                    if new_matrix[k][j]!= 0:\n                        new_matrix[k][j] = new_matrix[i][j] + new_matrix[k][j]\n    return new_matrix\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    w=0\n    i=l\n    j=h\n    while i < j :\n        i+=1\n        j-=1\n        if(i%2) : \n            w+=i**2\n        else : \n            w+=2*i**2\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Declare variables \n    a,b,h = (0,0,0),(1,1,1),(2,1,1)\n    l = (0,0,1)\n    volume = 0\n    # Iterate over each side \n    for side in range(0,3) : \n        # Check the side against the sides of a triangle \n        # and apply the volume formula \n        if side == 0 : \n            volume = a*(l[0]**2) + b*(l[1]**2) + (h/2) * (l[0]*b*(l[1]+h/2))\n            break\n        elif side == 1 : \n            volume = a*(l[0]**2) + b*(l[1]**2) + (h/2) * (l[0]*b*(l[1]-h/2))\n            break\n        elif side == 2 : \n            volume = a*(l[0]**2) + b*(l[1]**2) + (h/2) * (l[0]*b*(l[1]-h/2))\n            break\n    # Return the calculated volume \n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = l + h\n    b = b + h\n    h = (b-l)/2\n    v = (b*h)/(l*h)\n    return v"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    #Your code here\n    return  (3.14*((h/2)**2))*(l**3)*(b**3)/12\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    if (b == 0) : \n        return (\"ERROR : the bottom boundary is 0\")\n    elif (h == 0) : \n        return (\"ERROR : the top boundary is 0\")\n    else : \n        volume = (1/3)*(h**3)*(b**3)\n        return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    r = l/2\n    h = h*2\n    Volume = 4*(np.pi*r*r)*h\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # your code goes here\n    pass"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # your code goes here\n    a = b*(b+h)\n    print(\"Volume of a triangle is : {}\".format(a))\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    # your code goes here\n    area = (l*(l+h))/2\n    print(\"Area of a triangle is : {}\".format(area))\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # your code goes here\n    a = b*(b+h)\n    volume = (a*l*l+b*l*l+b*l*l)/2\n    print(\"Volume of a triangle is : {}\".format(volume))\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    # your code goes here\n    a = b*(b+h)\n    area = (a*l*l+b*l*l)/2\n    print(\"Area of a triangle is : {}\".format(area))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    c = (4/3) * (b**2) * (h**3) * math.pi\n    v = c * l**3\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if len(l) == 0 : \n        return 0\n    elif len(l) == 1 : \n        return l[0][0] * h\n    elif len(l) == 2 : \n        return (b * (l[1][0] - l[0][0])) * h \n    else : \n        vol = 0\n        for i in l : \n            vol += i[0] * i[1] * i[2]\n        return vol \n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r\"([a-z]+)_([0-9]+)\", text)\ndef is_num_lower(x):\n    '''\n    Returns true if the input string is a numeral with digits separated by a dash, and false otherwise.\n    '''\n    return re.match(r\"([0-9]+)_([0-9]+)\", x)\ndef text_no_dashes(text):\n    '''\n    Return true if the input string contains no dashes.\n    '''\n    return re.match(r\"([a-zA-Z]+)_([0-9]+)\", text)\ndef text_num_dashes(text):\n    '''\n    Return true if the input string contains no dashes.\n    '''\n    return re.match(r\"([0-9]+)_([0-9]+)\", text)\ndef text_no_letters(text):\n    '''\n    Return true if the input string contains no letters.\n    '''\n    return re.match(r\"([a-zA-Z]+)_([0-9]+)\", text)\ndef text_num_letters(text):\n    '''\n    Return true if the input string contains no letters.\n    '''\n    return re.match(r\"([0-9]+)_([0-9]+)\", text)\ndef text_with_tenths(text):\n    '''\n    Return true if the input string contains no digits.\n    '''\n    return re.match(r\"([0-9]+)_([0-9]+)\", text)\ndef text_with_tenths_dashes(text):\n    '''\n    Return true if the input string contains no dashes.\n    '''\n    return re.match(r\"([0-9]+)_([0-9]+)\", text)\ndef text_with_tenths_and_dashes(text):\n    '''\n    Return true if the input string contains no dashes and numbers with a dashes.\n    '''\n    return re.match(r\"([0-9]+)_([0-9]+)_([0-9]+)\", text)\ndef text_with_tenths_and_dashes_and_letters(text):\n    '''\n    Return true if the input string contains no dashes and numbers with a dashes and letters.\n    '''\n    return re.match(r\"([0-9]+)_([0-9]+)_([0-9]+)_([a-zA-Z]+)\", text)\ndef text_only_digits(text):\n    '''\n    Return true if the input string has only digits.\n    '''\n    return re.match(r\"[0-9]\", text)\ndef text_only_digits_and_letters(text):\n    '''\n    Return true if the input string has only digits and letters.\n    '''\n    return re.match(r\"[a-zA-Z]\", text)\ndef text_only_digits_and_letters_and_tenths(text):\n    '''\n    Return true if the input string has only digits and letters and the input string has only tenths.\n    '''\n    return re.match(r\"[0-9]{3}\", text)\ndef text_only_digits_and_letters_and_tenths_and_dashes(text):\n    '''\n    Return true if the input string has only digits and letters and the input string has only tenths and dashes.\n    '''\n    return re.match(r\"[0-9]{3}_[0-9]{3}\", text)\ndef text_only_digits_and_letters_and_tenths_and_dashes_and_tenths(text):\n    '''\n    Return true if the input string has only digits and letters and the input string has only tenths and dashes and the input string has only tenths and dashes.\n    '''\n    return re.match(r\"[0-9]{3}_[0-9]{3}_[0-9]{3}\", text)\ndef is_digit_in_number(x):\n    '''\n    Returns true if the input string contains digits.\n    '''\n    return re.match(r\"\\d\", x)\ndef is_digit_in_number_and_letters(x):\n    '''\n    Returns true if the input string contains digits and letters.\n    '''\n    return re.match(r\"\\d[a-zA-Z]\", x)\ndef is_digit_in_number_and_letters_and_tenths(x):\n    '''\n    Returns true if the input string contains digits and letters and the input string has only tenths and dashes.\n    '''\n    return re.match(r\"\\d[0-9]{3}[0-9]{3}\", x)\ndef is_digit_in_number_and_letters_and_tenths_and_dashes(x):\n    '''\n    Returns true if the input string contains digits and letters and the input string has only tenths and dashes and the input string has only tenths and dashes.\n    '''\n    return re.match(r\"\\d[0-9]{3}[0-9]{3}_[0-9]{3}[0-9]{3}\", x)\ndef is_digit_in_number_and_letters_and_tenths_and_dashes_and_tenths(x):\n    '''\n    Returns true if the input string contains digits and letters and the input string has only tenths and dashes and the input string has only tenths and dashes and the input string has only tenths and dashes.\n    '''\n    return re.match(r\"\\d[0-9]{3}[0-9]{3}_[0-9]{3}[0-9]{3}_[0-9]{3}\", x)\ndef is_digit_in_number_and_letters_and_tenths_and_dashes_and_tenths_and_dashes(x):\n    '''\n    Returns true if the input string contains digits and letters and the input string has only tenths and dashes and the input string has only tenths and dashes and the input string has only tenths and dashes.\n    '''\n    return re.match(r\"\\d[0-9]{3}[0-9]{3}_[0-9]{3}[0-9]{3}_[0-9]{3}_[0-9]{3}\", x)\ndef is_digit_in_number_and_letters_and_tenths_and_dashes_and_tenths_and_dashes_and_tenths(x):\n    '''\n    Returns true if the input string contains digits and letters and the input string has only tenths and dashes and the input string has only tenths and dashes and the input string has only tenths and dashes.\n    '''\n    return re.match(r\"\\d[0-9]{3}[0-9]{3}_[0-9]{3}_[0-9]{3}_[0-9]{3}_[0-9]{3}_[0-9]{3}\", x)\ndef is_digit_in_number_and_letters_and_tenths_and_dashes_and_tenths_and_dashes_and_tenths(x):\n    '''\n    Returns true if the input string contains digits and letters and the input string has only tenths and dashes and the input string has only tenths and dashes and the input string has only tenths and dashes and the input string has only tenths and dashes.\n    '''\n    return re.match(r\"\\d[0-9]{3}[0-9]{3}_[0-9]{3}_[0-9]{3}_[0-9]{3}_[0-9]{3}_[0-9]{3}\", x)\ndef is_digit_in_number_and_letters_and_tenths_and_dashes_and_tenths_and_dashes_and_tenths(x):\n    '''\n    Returns true if the input string contain"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-zA-Z0-9]', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r\"[a-z0-9]\", text)!= None or re.search(r\"[A-Z]\", text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'[a-zA-Z0-9_\\-\\*\\?\\+\\!\\,\\;\\:\\.]'\n    return bool(re.search(regex, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text == '':\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not isinstance(text, str):\n        raise TypeError('text must be a string')\n    text = text.lower()\n    if len(text) < 1:\n        raise ValueError('text must be longer than 1 character')\n    for c in text:\n        if c not in string.ascii_lowercase and c not in string.ascii_uppercase:\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not text:\n        return False\n    for c in text:\n        if not c.isupper():\n            return False\n    if text[0].isupper():\n        return text[1:] == text[0].lower()\n    else:\n        return text[1:] == text[0].upper()\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub(r'[^A-Za-z0-9 ]', '', text)\n    return True if len(text) > 0 else False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower() in text.replace(' ', '').replace('_', '').replace('-', '')\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Use regular expressions to find all lowercase letters and underscores\n    lower_letters = re.findall(r'[a-z]', text)\n    underscored_letters = re.findall(r'[A-Z]', text)\n    # Check if sequence is in lowercase letters or underscores\n    if lower_letters:\n        for letter in lower_letters:\n            if letter in underscored_letters:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return pow(a,2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*(4*a + 1)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a < 0:\n        raise ValueError('Side must be a positive number')\n    return 4*a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a) + (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    perimeter = (4 * math.pi * a)\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square = 0\n    for i in range(1,a+1):\n        square += i\n    return square\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int:\n        print('The input must be an integer!')\n    elif a <= 0:\n        print('The input must be positive!')\n    elif a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    else:\n        return a*a*2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Base Case\n    if a<0:\n        print(\"Square must be positive\")\n    # Square\n    else:\n        print(2*a*a)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in range(len(string)):\n        if string[i] in l:\n            l.remove(string[i])\n        else:\n            l.append(string[i])\n    return l\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    mystr = string.lower()\n    lst = []\n    for char in mystr:\n        if char not in lst:\n            lst.append(char)\n    return lst\ndef list_to_str(list):\n    '''\n    Write a function to convert the list into a string.\n    '''\n    mystr = ''\n    for char in list:\n        mystr += char\n    return mystr\ndef main():\n    '''\n    Main function for program.\n    '''\n    mystr = str_to_list(input(\"Enter the first string: \"))\n    mystr = list_to_str(mystr)\n    print(mystr)\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    for char in string:\n        if char in lst:\n            pass\n        else:\n            lst.append(char)\n    return lst\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.replace(string[0], \"\").split(\" \")\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(filter(None, string.split('-')))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = []\n    list_of_chars.append(string[0])\n    for i in range(1, len(string)):\n        if string[i] in list_of_chars:\n            list_of_chars.remove(string[i])\n    return ''.join(list_of_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    return_string = \"\"\n    for character in string:\n        if character in string[:]:\n            return_string += character\n    return return_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if (len(string) == 0): \n        return ['']\n    list = [] \n    for i in range(len(string)): \n        if string[i] in list: \n            list.remove(string[i]) \n        else: \n            list.append(string[i]) \n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        if string[i] not in list:\n            list.append(string[i])\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert to a list of characters to remove\n    # e.g. if the second string is 'abcdef' and the first is 'a', the resulting list would be ['b', 'c', 'd', 'e', 'f']\n    def remove_chars(string, char_list): \n        for char in char_list:\n            if char in string:\n                string = string.replace(char, \"\")\n        return string\n    # if the string is not empty, convert the string into a list of strings, remove any remaining characters and return the resulting list\n    # e.g. if the first string is 'abcdef' and the second is 'a', the resulting list would be ['b', 'c', 'd', 'e', 'f']\n    return list(filter(lambda x: x!= \"\", list(map(str, string.split(\" \")))))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate=0\n    arraynums.sort()\n    for i in range(0,len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            duplicate+=1\n        else:\n            pass\n    if duplicate==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return arraynums.count(arraynums[0]) > 1\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dupe = []\n    for i in arraynums:\n        if i in dupe:\n            pass\n        else:\n            dupe.append(i)\n    return len(dupe) > 0\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    testlist = []\n    for i in arraynums:\n        if i not in testlist:\n            testlist.append(i)\n    return testlist\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    found = []\n    for element in arraynums:\n        if element in found:\n            return True\n        else:\n            found.append(element)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Find all duplicate numbers\n    duplicate = []\n    for num in arraynums:\n        if num not in duplicate:\n            duplicate.append(num)\n    return len(duplicate) == 0\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if num in arraynums:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #this solution is different from the previous\n    #but it should be a simple solution since all the numbers are 1 \n    if x > 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x=str(x)\n    if 'b' in x:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return 'Not woodball'\n    else:\n        return 'Woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 0 and x <= 2*x \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 10:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 4: \n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x % 2 == 0 else False"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 100:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 0 and x <=1\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        r = num % 10\n        rev = rev * 10 + r\n        num = num // 10\n    if rev == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num = num\n    while num > 1:\n        div = num % 10\n        if div == 0:\n            return True\n        else:\n            rev_num = rev_num * 10 + div\n            num = int(num / 10)\n    if num == rev_num:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    a = str(num)\n    if len(a) > 1:\n        a = a[::-1]\n        b = int(a)\n        if b < 2:\n            return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) if str(num)[::-1].isnumeric() else False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_numb = 0\n    while num!= 0:\n        rev_numb = rev_numb * 10 + num % 10\n        num = num // 10\n    if rev_numb == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    for x in str(num):\n        rev_num += int(x)\n    if rev_num == num:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    num = abs(num)\n    rev_num = abs(num)\n    while(num>0):\n        rem = num%10\n        rev_num = rev_num*10 + rem\n        num = num//10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        dig = num % 10\n        rev_num = rev_num * 10 + dig\n        num = num // 10\n    if rev_num == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revnum = 0\n    if num == 0:\n        return False\n    while num!= 0:\n        revnum = revnum * 10 + num % 10\n        num = num // 10\n    if revnum == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num >= 10:\n        rev = rev*10 + num % 10\n        num = num//10\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    # create an empty list\n    num_list = []\n    # create a loop to iterate through the list\n    for n in arr:\n        num_list.append(int(n))\n    # loop through the list\n    for i in range(0, len(num_list)):\n        # check if the current number is greater than the largest number\n        if num_list[i] > max_num:\n            # if so, change the max_num variable\n            max_num = num_list[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) : \n        for j in range(i, len(arr)) : \n            if (arr[j] - arr[i]) == 1 : \n                if arr[j] > max_num : \n                    max_num = arr[j]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxnum = 0\n    for num in arr : \n        if num < maxnum :\n            maxnum = num\n    return maxnum\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = 0\n    for i in arr : \n        if i > Max : Max = i\n    return Max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==0:\n        return 0\n    \n    max_num = 0\n    for i in arr:\n        if i>max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    if len(arr) == 1:\n        return 1\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] + arr[j] == 0:\n                pass\n            else:\n                if arr[i] + arr[j] > max_num:\n                    max_num = arr[i] + arr[j]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=int(''.join(arr))\n    if m<=0:\n        return 'Input is empty!'\n    if m==1:\n        return arr[0]\n    if m%2==0:\n        return find_Max_Num(arr[1:])+arr[0]\n    else:\n        return find_Max_Num(arr[:-1])+arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    answer = 0\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0\n    elif len(arr) == 1 : \n        return arr[0]\n    else : \n        n = len(arr) - 1\n        i = 0\n        for j in range(n-1) : \n            if arr[j] > arr[n-1-j] : \n                arr[i], arr[n-1-j] = arr[n-1-j], arr[i] \n                i = n-1 - j \n        return arr[i]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    num_set = set(arr)\n    count = 0\n    \n    for i in num_set:\n        if arr.count(i)>count :\n            count = arr.count(i)\n    \n    return count\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x==y==0:\n        return \"No\"\n    elif x==-y==0:\n        return \"No\"\n    elif x>y:\n        return \"no\"\n    else:\n        return \"yes\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return False\n    elif x>0 and y<0:\n        return False\n    elif x>0 and y>0:\n        return True\n    \n    \n    \ndef is_gcd(x,y):\n    '''\n    Write a python function to check whether the given two integers have gcd or not.\n    '''\n    if x>y:\n        return True\n    elif x<y:\n        return False\n    elif x==y:\n        return True\n    else:\n        return False\n    \ndef is_lcm(x,y):\n    '''\n    Write a python function to check whether the given two integers have lcm or not.\n    '''\n    if x>y:\n        return True\n    elif x<y:\n        return False\n    elif x==y:\n        return True\n    else:\n        return False\n    \ndef is_prim(x,y):\n    '''\n    Write a python function to check whether the given two integers have primitive or not.\n    '''\n    if x>y:\n        return True\n    elif x<y:\n        return False\n    elif x==y:\n        return True\n    else:\n        return False\n    \ndef is_sum_of_primes(x,y):\n    '''\n    Write a python function to check whether the given two integers have sum of primes or not.\n    '''\n    if x>y:\n        return True\n    elif x<y:\n        return False\n    elif x==y:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0:\n        if x==-1:\n            return y\n        else:\n            return -y\n    if y<0:\n        if y==-1:\n            return x\n        else:\n            return -x\n    else:\n        if y==1:\n            return x\n        else:\n            return -x\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x>0 and y<0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return False\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return False\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        signs = \"positive\"\n    else:\n        signs = \"negative\"\n    return signs \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    elif x>0 and y<0:\n        return False\n    elif x<0 and y<0:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -1 if x < 0 or y < 0 else x > 0 and y > 0 else x < 0 and y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign1 = -1 if (x == y) else 1\n    sign2 = -1 if (x < 0) else 1\n    return sign1 + sign2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return (n - 1) * 3 + (n - 2) % 3 \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n \n    b = n - 1 \n    while a <= b: \n        if a % 2 == 0: \n            if b % 2 == 0: \n                return a \n            else: \n                return a \n        a = a + 1 \n        b = b - 1 \n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n<=0):\n        print(\"n must be a positive integer\")\n    else:\n        if(n==1 or n==2 or n==3):\n            return n\n        return (is_octagonal(n-1) + is_octagonal(n-2))\nprint(is_octagonal(4))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = 1\n    if n <= 1: \n        return 1\n    while x <= n: \n        if n % x == 0: \n            return n // x\n        x += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1 or n == 0: return n\n    i = 1\n    while i*i <= n:\n        if n % i == 0: return n//i\n        i += 1\n    return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = 0\n    i = 1\n    while x < n:\n        y = x + i\n        i += 1\n        if (y % 2 == 0):\n            continue\n        elif (y % 2!= 0):\n            return y\n        x = y\n    return None\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sqrt_n = math.sqrt(n) \n    if (n == 0): \n        return n\n    elif (n == 1): \n        return sqrt_n \n    elif (n == 2): \n        return 3*(sqrt_n**2)\n    else: \n        # write your code here \n        sqrt_n1 = math.sqrt(n-1) \n        sqrt_n2 = math.sqrt(n+1) \n        return is_octagonal(n-1) + is_octagonal(n+1) + (3*sqrt_n1*sqrt_n2) \n  "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n=int(n)\n    l=[]\n    l.append(1)\n    x=0\n    while(x<n):\n        l.append(x*2)\n        x=x+1\n    return(l[n%10])\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    for i in range(0,n+1):\n        a = a + 1\n        b = a + 2*a\n        c = a + 3*a + 2\n        d = a + 4*a + 3\n        e = a + 5*a + 4\n        f = a + 6*a + 5\n        g = a + 7*a + 6\n        h = a + 8*a + 7\n        i = a + 9*a + 8\n        j = a + 10*a + 9\n        k = a + 11*a + 10\n        l = a + 12*a + 11\n        m = a + 13*a + 12\n        n = a + 14*a + 13\n        o = a + 15*a + 14\n        p = a + 16*a + 15\n        q = a + 17*a + 16\n        r = a + 18*a + 17\n        s = a + 19*a + 18\n        t = a + 20*a + 19\n        u = a + 21*a + 20\n        v = a + 22*a + 21\n        w = a + 23*a + 22\n        x = a + 24*a + 23\n        y = a + 25*a + 24\n        z = a + 26*a + 25\n        a = [i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]\n        if a[i] == a[j] + a[k] + a[l]:\n            print(a[i] + 1)\n        else:\n            print(0)\n            break\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        print(n)\n        return 0\n    else:\n        a = (n-1)\n        b = a-1\n        c = a+1\n        while b >= 1:\n            if (a % b == 0) and (b % c == 0):\n                break\n            else:\n                if a % b == 0:\n                    a = a//b\n                    b = b//c\n                    c = c//a\n                else:\n                    b = b//c\n                    c = c//a\n                    a = a//b\n        if a == 1:\n            print(a)\n        else:\n            print(a+1)\n    return a\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)-1):\n        if s[i]==s[i+1]:\n            count+=1\n        else:\n            break\n    return count\ndef count_Substrings_2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)-1):\n        if s[i]==s[i+1][0] and s[i+1]==s[i+1][1]:\n            count+=1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d={}\n    for i in s:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    res=0\n    for k in d.values():\n        res+=k\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        s = s.replace(s[i],str(i))\n    for j in range(len(s)):\n        if len(s[j]) == len(s[j+1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    p = 1\n    for i in range(n-1):\n        p = p * (i+1)\n    return p\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_count = 0\n    for i in range(len(s)):\n        count_count += (s[i:i+len(s)].count('0'))\n    return count_count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    Counter = defaultdict(int)\n    for i in range(1, len(s)+1):\n        for j in range(0, len(s)-i+1):\n            counter = 0\n            for k in range(j, j+i):\n                if (s[j:j+i]==s[k:k+i]):\n                    counter +=1\n            Counter[i] += counter\n    return Counter"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = \"\".join(str(s))\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n    #raise NotImplementedError\n    \n    '''\n    def count_Substrings(s):\n        lst = list(s)\n        count = 0\n        for i in range(len(s)-1):\n            if lst[i] == lst[i+1]:\n                count += 1\n        return count\n    '''\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i] == s[n-i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = s.replace(\" \",\"\")\n    count = 0\n    \n    # generate a dictionary to store the values of the digits in the string\n    # in the list, key is the digits and value is the count\n    dic = defaultdict(int)\n    for c in s:\n        dic[c]+=1\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # n_list = []\n    # for i in range(len(xs)):\n    #     n_list.append(xs[i])\n    # print(n_list)\n    # return min(n_list)\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = 100000\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    s_n = min(xs)\n    return s_n\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    newlist = []\n    #newlist = [1, 2, 4, 7, 8, 9, 11, 22, 33, 44]\n    for i in xs:\n        if i not in newlist:\n            newlist.append(i)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls = []\n    for x in xs:\n        ls.append(int(x))\n    return min(ls)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = 0\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #  If there are no pairs available, return 0\n    if not test_list:\n        return 0\n    #  If there are only one pair available, return that pair.\n    elif len(test_list) == 1:\n        return test_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #Variables to hold the max difference\n    max_diff_list = []\n    max_diff_sum = 0\n    #For each element in the tuple list\n    for tup in test_list:\n        #Assign the list elements to variables\n        first_num = tup[0]\n        second_num = tup[1]\n        #Create a variable to hold the difference\n        difference = 0\n        #Loop through the list\n        for i in range(len(test_list)):\n            #If the values of the first and second numbers are the same\n            if first_num == second_num:\n                difference += 1\n            #If the first number is bigger than the second number\n            elif first_num > second_num:\n                #If the first number is bigger than the second number add the difference to the max diff\n                difference += abs(first_num - second_num)\n            else:\n                #If the first number is smaller than the second number add the difference to the max diff\n                difference += abs(second_num - first_num)\n        #If the difference is greater than the max diff add the difference to the max diff list\n        if difference > max_diff_sum:\n            max_diff_list = [first_num, second_num, difference]\n            max_diff_sum = difference\n    return max_diff_list\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return abs(sum(map(abs,test_list)))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n == 1:\n        return test_list[0] - test_list[1]\n    else:\n        return max(max_difference(test_list[1:]), max_difference(test_list[:-1]))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1] - test_list[i]\n        max_diff = max(diff, max_diff)\n    return max_diff\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    a, b = sorted(test_list)\n    return (abs(b - a))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    for i in range(1, len(test_list)):\n        if test_list[i - 1] > test_list[i]:\n            return test_list[i] - test_list[i - 1]\n    return None\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for index in range(len(test_list) - 1):\n        diff = test_list[index + 1] - test_list[index]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    available = tuple()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] > test_list[j][0]:\n                max_difference = test_list[i][0] - test_list[j][0]\n                if max_difference > maximum:\n                    maximum = max_difference\n                    available = (test_list[i], test_list[j])\n    return available\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    newlist = []\n    for i in range(len(subjectmarks)):\n        newlist.append(subjectmarks[i][1])\n    newlist = sorted(newlist)\n    return newlist\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks=subjectmarks.copy()\n    marks.sort(key=lambda x:x[1], reverse=True)\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x : x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Initialize an empty list\n    marks = []\n    # Initialize an empty list\n    for subjectsmarks in subjectmarks:\n        # Add the data to the empty list\n        marks.append(subjectsmarks[1])\n    # Sort the marks\n    marks.sort()\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if len(subjectmarks) <= 1:\n        return subjectmarks\n    \n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    \n    return sorted_subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Define a function that will sort each item of a list of tuples\n    def sort_subjectmarks(subjectmarks):\n        # Sort the list of lists using the second value of each tuple\n        subjectmarks.sort(key=lambda tup: tup[1])\n        return subjectmarks\n    return sort_subjectmarks(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = []\n    for i in range(len(subjectmarks)):\n        new_list.append(subjectmarks[i][1])\n    return sorted(new_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # pass\n    marks=subjectmarks\n    marks.sort(key=lambda x: x[1])\n    return marks\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        return sum([recursive_list_sum(x) for x in data_list])\n        \n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result_list = []\n    for value in data_list:\n        if type(value) is list:\n            result_list = result_list + recursive_list_sum(value)\n        else:\n            result_list.append(value)\n    return result_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data = list(data_list)\n    total = 0\n    for elem in data:\n        total += elem\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    result = 0\n    for element in data_list:\n        result += element\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    final_result = []\n    for i in data_list:\n        if type(i) is list:\n            final_result.extend(recursive_list_sum(i))\n        else:\n            final_result.append(i)\n    return final_result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def iterate_list(data_list):\n        '''\n        Iterate through each element in the list.\n        '''\n        for element in data_list:\n            if element:\n                yield element\n                yield from iterate_list(element)\n    return sum(iterate_list(data_list))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Hint: try to make the function call recursive_list_sum(list(data_list))\n    # in the base case, we need to add an extra element to the list,\n    # since there is only one element in the list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return [val for sublist in data_list for val in sublist]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Hint: use the built-in function'sum' for this challenge\n    # https://stackoverflow.com/questions/44657901/python-sum-list-numbers-and-add-them-together\n    return sum(data_list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_numbers = []\n    \n    for i in list:\n        if i > 0:\n            positive_numbers.append(i)\n    \n    return positive_numbers\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for i in list:\n        if i>0:\n            pos=pos+1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in range(len(list)):\n        if list[x] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    print(f'Number of positive numbers in the list is: {counter}')\n    print()\n    \n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i < 0:\n            counter += 1\n    print(f'Number of negative numbers in the list is: {counter}')\n    print()\n    \n    \ndef average(list):\n    '''\n    Write a python function to compute the average of a list.\n    '''\n    average = 0\n    counter = 0\n    for i in list:\n        average += i\n        counter += 1\n    print(f'Average of the list is: {average/counter}')\n    print()\n    \n    \ndef main():\n    '''\n    Write a python function that takes a list of numbers and prints all the numbers in the list\n    in descending order.\n    '''\n    print(\"Program to find the average of all the numbers in a list.\")\n    print()\n    \n    \n    #Take the numbers from the user and store them in a list\n    print('Enter numbers separated by spaces: ')\n    list_of_numbers = []\n    for i in range(0,len(input().split())):\n        list_of_numbers.append(int(input().split()[i]))\n    \n    print(list_of_numbers)\n    \n    \n    #Sort the list according to their values\n    print('Sort the list by its values: ')\n    list_of_numbers.sort()\n    print(list_of_numbers)\n    print()\n    \n    #print('The sorted list is: ')\n    #print(list_of_numbers)\n    \n    \n    print()\n    \n    #Count the positive numbers\n    pos_count(list_of_numbers)\n    print()\n    \n    \n    #Count the negative numbers\n    neg_count(list_of_numbers)\n    print()\n    \n    \n    #Calculate the average\n    print('Calculate the average of all the numbers in the list: ')\n    average(list_of_numbers)\n    print()\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_count = 0\n    for i in list:\n        if i > 0:\n            positive_count += 1\n    return positive_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    result = 0\n    for i in list:\n        if i > 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for item in list:\n        if item > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #code here\n    #raise NotImplementedError\n    #raise NotImplementedError\n    #raise NotImplementedError\n    #raise NotImplementedError\n    \n    if(len(list)>0):\n        pos = 0\n        for i in list:\n            if(i>0):\n                pos +=1\n    else:\n        pos = 0\n    \n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    assert n >= 0, \"Input must be greater or equal to 0.\"\n    \n    # n==1 is always a valid partition\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # you can use a dict for dictonary\n    # store the value of the keys\n    # \n    # \n    # \n    # \n    #\n    # return a dict {2:2, 5:2} \n    # for a set of numbers which are at least 2 and 5\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return 0\n    dp = [0 for _ in range(n+1)]\n    dp[1] = 1\n    \n    for i in range(2, n+1):\n        # 0 = each number is in the set\n        # 1 = number only in set (does not appear)\n        # 2 = number appears in set (only appears)\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[-1]"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 4\n    if n == 4: return 8\n    if n % 2 == 0:\n        return bell_number(n//2) + bell_number(n//2 + 1)\n    else:\n        return bell_number(n//2) + bell_number(n//2) + 1\n        \n    \n    "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # your code here\n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<2:\n        return n\n    dp = [0]*(n+1)\n    dp[0], dp[1] = 0, 1\n    for i in range(2, n+1):\n        for j in range(i):\n            if dp[j] == 0:\n                dp[i] += dp[j-1]\n            else:\n                dp[i] += dp[j]\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # number of ways to partition the set of Bell numbers\n    ways_to_partition = 0\n    # binary search of the first number and the number of ways to partition the set of numbers\n    low, high = 1, 1\n    while high < n:\n        low, high = low, (low + high) // 2\n        if (high % 2) == 1:\n            if (low <= n//2) and (high <= n):\n                # binary search of the last number and the number of ways to partition the set of numbers\n                low, high = low + (low % 2), high + (high % 2)\n                ways_to_partition += (high - low)\n            else:\n                # binary search of the first number and the number of ways to partition the set of numbers\n                low, high = low + (low % 2), high + (high % 2)\n                ways_to_partition += (high - low)\n    return ways_to_partition\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    else:\n        print(\"Error\")\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    nums = list(range(1, n + 1))\n    return count_bell(n, nums)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the given array is monotonic\n    if len(A)>1:\n        for i in range(0,len(A)):\n            for j in range(0,i):\n                if A[j] > A[i]:\n                    return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n): \n        if A[i] < 0: \n            A[i] *= -1\n        if A[i+1] < A[i]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    else:\n        is_increasing = True\n        for i in range(len(A)):\n            if A[i] <= A[i+1]:\n                is_increasing = False\n        return is_increasing\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #A = input(\"enter the array to check\").split(',')\n    #A = [3,1,1,0,0,0,1,0,0]\n    A = [3,1,1,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0]\n    B = []\n    for i in range(len(A)):\n        B.append(A[i])\n    #print(B)\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] < A[j] and B[i] < B[j]:\n                return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if not isinstance(A, numpy.ndarray):\n        raise ValueError('Input should be numpy array')\n    if not len(A) == 2 or A[0]!= A[1]:\n        raise ValueError('Input array should be given as 2x2 matrix')\n    elif A[0][0]!= A[1][1] or A[0][1]!= A[1][0]:\n        raise ValueError('Columns should be from top to bottom')\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    C = np.asarray(A,dtype=float)\n    C.sort()\n    C = np.append(C,C[0])\n    while(C[-1]!= 1):\n        C = np.insert(C,0,-1)\n    if(C[-1] == 1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Init the flag.\n    flag = True\n    # Check if the values in the array are equal.\n    for i in range(0, len(A)):\n        if (A[i]!= A[i+1]):\n            flag = False\n            break\n    return flag\n    \ndef run():\n    A = [10,20,30,40,50,60,70,80,90,100]\n    if is_Monotonic(A):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # If the array is not monotonic, then it must be non-increasing\n    # for all the elements in the array.\n    \n    if (A[0] == A[1]):\n        return True\n    # If the array is monotonic, then it must be non-increasing\n    # for all the elements in the array.\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    length = len(A) \n    for i in range(length): \n        for j in range(length-1): \n            if A[j] > A[j+1]: \n                return False \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 2:\n        if A[0] > A[1]:\n            return True\n        else:\n            return False\n    \n    return is_Monotonic_2(A, 0, len(A) - 1)\n    \n    \ndef is_Monotonic_2(A, i, j):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if i < j:\n        # check if the first element is greater than the second element\n        if A[i] > A[j]:\n            return False\n        # check if the first element is smaller than the second element\n        elif A[i] < A[j]:\n            return False\n        else:\n            # check if the last element is greater than the first element\n            if A[i] > A[j - 1]:\n                return False\n            # check if the last element is smaller than the first element\n            elif A[i] < A[j - 1]:\n                return False\n            else:\n                # check if the first element is equal to the last element\n                if A[i] == A[j - 1]:\n                    return False\n                else:\n                    return True\n    else:\n        return True\n        \n    \ndef monotonic_array(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 2:\n        if A[0] > A[1]:\n            return True\n        else:\n            return False\n    \n    return monotonic_array_2(A, 0, len(A) - 1)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return False\n    if len(l) < 2:\n        return True\n    if s in l[0:len(l)-1]:\n        return is_sublist(l[1:len(l)], s)\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if all element in l are present in s\n    if len(s) == 0:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i in s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    temp = []\n    for i in range(len(s)):\n        if s[i:i+len(l)] == l:\n            temp.append(True)\n        else:\n            temp.append(False)\n    return all(temp)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l or not s:\n        return False\n    for i, item in enumerate(s):\n        if item in l[:i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if l[i] == s[i]:\n            return True\n    return False\n    \ndef update_lst(lst,new):\n    for i in lst:\n        i[1] = new\n    return lst\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    a = [i[0] for i in l]\n    return l == [i[0] for i in s] == a\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if the list is empty or not\n    if len(l)==0:\n        return False\n    # check if the given sublist is present in the list\n    for i in s:\n        if l.index(i)==s.index(i):\n            return True\n    # check if there are any duplicate items in the list\n    return len(set(l))<len(l)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if the list has all the elements\n    if not l:\n        return False\n    \n    # check if the list is empty or not\n    if not l[0]:\n        return False\n    \n    # iterate through the list\n    for i in range(1, len(l)):\n        if not l[i:i + len(s)]:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    if len(l) == len(s):\n        return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(Input)) == len(Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_size = len(Input)\n    for i in range(0,tuple_size-1):\n        for j in range(i+1,tuple_size):\n            if (Input[i] == Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Len = len(Input[0])\n    for i in range(Len):\n        for j in range(len(Input)):\n            if len(Input[j])!= len(Input[i]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return True\n    \n    elif len(Input) == 2:\n        return Input[0] == Input[1]\n    \n    else:\n        for i in range(len(Input) - 2):\n            if Input[i] == Input[i + 1] and Input[i] == Input[i + 2]:\n                return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    # function to check if the number of tuples is equal to the length of Input\n    if len(Input)==len(set(Input)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0,len(Input)):\n        for j in range(i,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    if len(Input) == 0:\n        return True\n    if len(Input) > 0:\n        for i in range(len(Input)):\n            for j in range(len(Input) - 1):\n                if Input[j] == Input[j + 1]:\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_list = []\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # get length of array\n    L = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(0,len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums\n    \nn = int(input())\nnums = list(map(int, input().split()))\nnums = comb_sort(nums)\nfor i in range(n):\n    print(nums[i]"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        \n        if min_idx!= i:\n            nums[i], nums[min_idx] = nums[min_idx], nums[i]\n            print(nums)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    for j in range(len(nums) - 1):\n        for i in range(len(nums) - 1 - j):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n    \ndef check_sort(sorted_list):\n    if len(sorted_list) <= 1:\n        return sorted_list\n    middle = len(sorted_list) // 2\n    left = sorted_list[:middle]\n    right = sorted_list[middle:]\n    return check_sort(left) + [sorted_list[middle]] + check_sort(right)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_elements = sorted(nums)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if (n-1)%2==0: # if n is even we have to use n-1 and n+1\n        return True\n    elif n<=0:\n        return False\n    else:\n        return False\ndef is_Square(n):\n    '''\n    Write a python function that returns True if the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0:\n        return True\n    if n%2==0:\n        return False\n    else:\n        return False\ndef number_Square(n):\n    '''\n    Write a python function to find the number of squares of given number.\n    '''\n    s = 0\n    while n!=0:\n        if dif_Square(n):\n            s = s + 1\n        n = n//10\n    print(s)\ndef Number_Square_Check(n):\n    '''\n    Write a python function that checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0:\n        return True\n    if n%2==0:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # your code here\n    #raise NotImplementedError\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n\n    b = n\n    if n == 0:\n        return \"No\"\n    if n == 1:\n        return \"Square\"\n    if n % 2 == 0:\n        return \"Square\"\n    if n > 1:\n        return dif_Square(n-1) + \"square\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return 'Error'\n    elif n > 100:\n        return 'Error'\n    elif n < 50:\n        return 'Not Square'\n    elif n >= 50:\n        return 'Square'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n >= 0 and n <= 3):\n        return True\n    else:\n        return False\n    \ndef dif_Square_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n >= 0 and n <= 10):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    num = [1, 1]\n    k = 1\n    while True:\n        if num[0]!= num[1]:\n            num.insert(0, num[0] - num[1])\n            k += 1\n            if k == n:\n                return True\n        else:\n            num.pop(0)\n            k = 0\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1: \n        return False\n    elif n == 2: \n        return True\n    elif n % 2 == 0: \n        return dif_Square(n/2) \n    else: \n        return dif_Square(n/2)!= dif_Square(3*n - 1) \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        print('Square of zero can not be represented')\n        return\n    if n == 1: \n        print('Square of one can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 2: \n        print('Square of 2 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 3: \n        print('Square of 3 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 4: \n        print('Square of 4 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 5: \n        print('Square of 5 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 6: \n        print('Square of 6 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 7: \n        print('Square of 7 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 8: \n        print('Square of 8 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 9: \n        print('Square of 9 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 10: \n        print('Square of 10 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 11: \n        print('Square of 11 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 12: \n        print('Square of 12 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 13: \n        print('Square of 13 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 14: \n        print('Square of 14 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 15: \n        print('Square of 15 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 16: \n        print('Square of 16 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 17: \n        print('Square of 17 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 18: \n        print('Square of 18 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 19: \n        print('Square of 19 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 20: \n        print('Square of 20 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 21: \n        print('Square of 21 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 22: \n        print('Square of 22 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 23: \n        print('Square of 23 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 24: \n        print('Square of 24 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 25: \n        print('Square of 25 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 26: \n        print('Square of 26 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 27: \n        print('Square of 27 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 28: \n        print('Square of 28 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 29: \n        print('Square of 29 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 30: \n        print('Square of 30 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 31: \n        print('Square of 31 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 32: \n        print('Square of 32 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 33: \n        print('Square of 33 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 34: \n        print('Square of 34 can be represented')\n        return\n    print('Square of', n, 'is', n, 'and it can be represented as', (n - 1) * (n - 1),'square')\n    if n == 35: \n        print("
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n): \n        if (n % i == 0) : \n            print('Not a square') \n            return False \n    print('Square') \n    return True \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq_1 = n * n\n    sq_2 = n * n\n    for i in range(1, n):\n        for j in range(n-1):\n            if (sq_1 - i) % j!= 0 and (sq_2 - i) % j!= 0:\n                print(f\"Square {i}-{j} cannot be represented as the difference of squares {sq_1 - i} and {sq_2 - i}\")\n                return False\n    print(f\"Square {n}-{n} is a valid square\")\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if pattern[0] not in colors:\n            return False\n        if pattern[1] not in colors:\n            return False\n        if pattern[1] == colors[pattern[0]]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    res = []\n    for pattern in patterns:\n        if (not all(colors[i] == pattern[i] for i in range(len(colors)))) or (len(colors)!= len(pattern)):\n            return False\n        else:\n            res.append(True)\n    return all(res)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for pattern in patterns:\n        for color in colors:\n            if(pattern == color):\n                return True\n            elif(pattern in color):\n                return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if color!= pattern:\n                return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    all_same_patterns = True\n    for pattern in patterns:\n        if not is_same_pattern(pattern, colors):\n            all_same_patterns = False\n            break\n    return all_same_patterns\n    \n    \ndef is_same_pattern(pattern, colors):\n    '''\n    The two given pattern is a sequence of colored colors.\n    '''\n    for color in colors:\n        if color!= pattern[0] and pattern[1] == color:\n            return False\n    return True\n    \n    \ndef is_matches(matches, colors):\n    '''\n    The two given patterns are a sequence of colored colors.\n    '''\n    for i in range(len(matches)):\n        if matches[i]!= colors[i]:\n            return False\n    return True\n    \n    \ndef is_just_color(color, colors):\n    '''\n    The given color is one of the given colors.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= color:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_same(colors, pattern):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return [colors[i] in patterns[i] for i in range(len(colors))]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_len = len(colors)\n    patterns_len = len(patterns)\n    for i in range(patterns_len):\n        p = patterns[i]\n        for j in range(colors_len):\n            c = colors[j]\n            if p[1] == c[0] and p[2] == c[1]:\n                if p[3] == c[2]:\n                    return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i][0]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    for tup in test_list:\n        if tup[0] % K == 0:\n            tuple_list.append(tup)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(elem % K == 0 for elem in t)]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # get list of tuples with k from the list of tuples and then check if the tuple is in the list of tuples\n    # if it is then get the index of the tuple in the list of tuples and add it to the list of tuples\n    # if it is not then return an empty list\n    # if the list is empty, return empty list\n    # if the tuple is not in the list of tuples, return a tuple with a value of -1\n    # return a tuple with only -1\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] % test_list[j][1] == 0:\n                if test_list[i][0] == test_list[j][0]:\n                    if K % test_list[i][1] == 0:\n                        test_list.append((test_list[i][0], test_list[j][0]))\n                    break\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    my_list = []\n    for i in test_list:\n        if i[0]%K!= 0:\n            my_list.append(i)\n    return my_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        if i[1] % K == 0:\n            new_list.append(i)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return tuple(filter(lambda x: x[0] % K == 0, test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # Creates a dictionary to get every element from the list.\n    d = dict()\n    for i in test_list:\n        d[i[0]] = True\n    \n    # Loops through each tuple in the list.\n    for i in test_list:\n        \n        # Counts whether each tuple is an element of the dictionary.\n        if d[i[0]]:\n            \n            # If there are no remaining tuples then the tuple is in the list.\n            if len(d) == 0:\n                return [i]\n            \n            # Otherwise, the tuple is not an element of the dictionary and it is in the list.\n            else:\n                \n                # Loops through the dictionary to find the number of elements which are also a key in the dictionary.\n                for k in d:\n                    if d[k] == False:\n                        \n                        # The tuple is an element of the dictionary and it is in the list.\n                        if i[1] in d:\n                            return [i[0], k]\n                        \n                        # The tuple is not an element of the dictionary and it is not in the list.\n                        else:\n                            return [i[0]]\n            \n        # If there is still no remaining tuples then the tuple is not an element of the dictionary and it is not in the list.\n        else:\n            return []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def is_in_tuple(tuple):\n        '''\n        Return True if tuple is in the given list of tuples.\n        '''\n        return tuple[1] % K == 0\n    \n    return list(filter(is_in_tuple, test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n < 10: \n        return n % 11 == 0\n    else:\n        return n % 10 == 11\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        print(n,\" is divisible by 11\") \n    else: \n        print(n,\" is not divisible by 11\") \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    num = n \n    def is_div(n):\n        return (num%10) == 0\n    return is_div\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%2!= 0:\n        return False\n    elif n==2:\n        return True\n    else:\n        if n%3 == 0:\n            return True\n        elif n%5 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    num = 0\n    for i in range(n):\n        num = num + 1\n        if num % 11 == 0:\n            print(num)\n            return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # your code here\n    # if len(s)%2!=0:\n    #     return False\n    # else:\n    #     return True\n    for i in range(len(s)):\n        if s[i]==s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i]=='a':\n            count+=1\n    return count==0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len = len(s)\n    if len % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        return \"Length of the word must be even\"\n    else: \n        return \"Length of the word is even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    total = 0\n    for i in range(len(s)):\n        if i == 0:\n            total += 1\n        else:\n            if s[i]!= s[i-1]:\n                total += 1\n    return total % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #Write your code here\n    word_list=s.split()\n    if len(s)%2==1:\n        return 'odd'\n    else:\n        return 'even'\n    \nword='wee'\nprint(word_len(word))\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count=0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count +=1\n        else:\n            pass\n    if count%2==0:\n        return True\n    else:\n        return False\n    \nprint(word_len(\"Hello world\"))\nprint(word_len(\"QWERTYUIOPASDFGHJKLZXCVBNM\"))\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    temp = 0\n    for i in range(len(s)):\n        if s[i] =='':\n            temp += 1\n        if temp % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sum = 0\n    for x in range(1, n + 1):\n        sum += x**3 + x**2\n    return sum\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    result = math.floor(math.sqrt(n))\n    return result\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    i = 0\n    j = 0\n    tetra_list = []\n    while i < n:\n        tetra_list.append(i)\n        i = i + 1\n    while j < n:\n        if i == j:\n            print(tetra_list[j])\n            tetra_list.remove(j)\n        j = j + 1\n    return tetra_list[0]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(1,n+1):\n        t += 1\n        t = t*(t-1)\n    return t\n    \nprint(tetrahedral_number(10)) #Should print 4 instead of 10\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    m = 0\n    for i in range(n):\n        if i % 2 == 0:\n            m = m + i\n        else:\n            m = m + (i + 1)\n    return m\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return n\n    if n < 0:\n        return 0\n    else:\n        return n**(1/3) + tetrahedral_number(n - 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 2\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    # n = 0 or 1\n    if n == 0 or n == 1: \n        return n\n    else: \n        # n + 1\n        return n + tetrahedral_number(n-1) \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=math.pi\n    return (r**3)*(math.pi)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * 3.14 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r **3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = 3.14159\n    v = (4/3)*math.pi*r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r**3*math.pi**2\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #print(type(r))\n    return r*3.14159*r*3.14159\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for i in range(len(strr)):\n        for j in range(26):\n            if(strr[i] == chr(j+97)):\n                char_list.append(j+97)\n                break\n    return(sum(char_list))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr_c = []\n    for i in strr:\n        strr_c.append(ord(i)%26)\n    return strr_c\n    \ndef get_Dic(strr):  \n    '''\n    Write a python function to find the dictionary made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr_d = {}\n    for i in strr:\n        if i in strr_d:\n            strr_d[i] += 1\n        else:\n            strr_d[i] = 1\n    return strr_d\n    \ndef main():\n    # function to convert the given string to the ASCII value of the number in the given string\n    print(get_Char(\"awesome\"))\n    # function to convert the given string to the ASCII value of the number in the given string\n    print(get_Dic(\"awesome\"))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a = ''\n    for i in strr:\n        a += i\n    return chr(int(a) % ord('a'))\n    \ndef find_last_char(strr):\n    '''\n    Write a python function to find the last character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a = ''\n    for i in strr:\n        a += i\n    a += strr[-1]\n    return a\n    \n    \ndef create_random_str():\n    '''\n    Write a python function to generate a random string.\n    '''\n    return ''.join(random.choice(string.ascii_letters + string.digits) for i in range(random.randint(5,10)))\n    \n    \ndef delete_random_char(strr):\n    '''\n    Write a python function to delete a random character of the given string.\n    '''\n    a = ''\n    for i in strr:\n        a += i\n    return a.replace('a', '')\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = ''\n    for i in strr:\n        res += chr(ord(i) % 26 + 97)\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(strr, 2) % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Create a dictionary where the key is the ASCII value of the character and the value is the character that belongs to it.\n    # Create a new dictionary where the key is the ASCII value of the character and the value is the character that belongs to it.\n    # Loop through the string to find the characters that do not sum to zero.\n    # Use the new dictionary to create a new string where each character with the character sum to one.\n    # Use this new string as the input of the function.\n    # Create a new dictionary with the value of the ASCII value of each character in the input string.\n    char_dict = {}\n    for i in range(26):\n        if strr[i] not in char_dict:\n            char_dict[chr(i)] = strr[i]\n    new_str = ''\n    for i in range(len(strr)):\n        if strr[i] in char_dict:\n            new_str += char_dict[strr[i]]\n        else:\n            new_str += strr[i]\n    return new_str\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr_list=list(strr)\n    lst=[]\n    for i in range(len(strr_list)):\n        if chr(int(strr_list[i])%26) in lst:\n            lst.remove(chr(int(strr_list[i])%26))\n        else:\n            lst.append(chr(int(strr_list[i])%26))\n    return ''.join(lst)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_list = []\n    for i in range(26):\n        ascii_list.append(chr(i))\n    char_list = []\n    for c in strr:\n        if c in ascii_list:\n            char_list.append(c)\n    return char_list\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    l = 0\n    for i in strr:\n        l += ord(i) % 26\n    return chr(l % 26 + 65)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = []\n    for i in strr:\n        res.append(ord(i) % ord('Z'))\n    return int(''.join(map(str,res)))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = n%10\n    res = ''\n    i = 0\n    while(i <= n):\n        res += str(i)\n        i += 1\n    return res[::-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #  Change the first 5 lines of the following function to\n    #  this one.\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1 or n == 2:\n        return n\n    if n == 3:\n        return 1\n    return n * sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def cycle(n): \n        ''' \n        Returns a list of the nth numbers in the newman conway sequence. \n        '''\n        num = [0, 1, 2, 3, 4, 5, 6, 7] \n        return num[n % 7] \n    for i in range(1, n): \n        print(cycle(i), end ='') \n    return '' \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0: \n        print('Illegal Input!') \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2) + sequence(n-3) \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return 5*n-3\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Write your code here\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return 2 + sequence(n-2) + sequence(n-1)\n    \ndef newman(n): \n    '''\n    Find the nth number in the newman sequence.\n    '''\n    # Write your code here\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return 1 + newman(n-2) + newman(n-1)\n    \ndef solution(n): \n    return sequence(n) + newman(n)\n    \nif __name__=='__main__':\n    print(solution(1))\n    print(solution(2))\n    print(solution(3))\n    print(solution(4))\n    print(solution(5))"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    k = 1\n    while k*2<=n: \n        if n % k == 0: \n            return k\n        k += 1\n    return 'Failure'\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*3.14159*(r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    x,y,z=r\n    return math.pi*(x*x+y*y+z*z)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    from math import pi\n    return pi*(r**2)\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return 3.14*r*r\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (a+b+c)*0.5\ndef surfacearea_parallelogram(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return abs(a+b+c)/2\ndef surfacearea_sphere_or_circle(r):\n    '''\n    Write a function to find the surface area of a sphere or a circle.\n    '''\n    if(isinstance(r,list)):\n        if(r[0]<r[1]):\n            return surfacearea_circle(r[0],r[1])\n        else:\n            return surfacearea_circle(r[1],r[0])\n    else:\n        return surfacearea_sphere(r)\ndef sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef circle_volume(r):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return 2*math.pi*r*r\ndef triangle_volume(a,b,c):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return abs(a+b+c)/2*math.pi*r**2\ndef parallelogram_volume(a,b,c):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    return abs(a+b+c)/2*math.pi*(a+b+c)/math.sqrt(2)\ndef circle_volume_or_parallelogram(r):\n    '''\n    Write a function to calculate the volume of a circle or a parallelogram.\n    '''\n    if(isinstance(r,list)):\n        if(r[0]<r[1]):\n            return parallelogram_volume(r[0],r[1])\n        else:\n            return parallelogram_volume(r[1],r[0])\n    else:\n        return circle_volume(r)\ndef volume_of_circle(r):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return surfacearea_circle(r)\ndef volume_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return abs(a+b+c)/2*surfacearea_triangle(a,b,c)\ndef volume_of_parallelogram(a,b,c):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    return abs(a+b+c)/2*surfacearea_parallelogram(a,b,c)\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return sphere_volume(r)\ndef volume_of_circle_or_triangle(r):\n    '''\n    Write a function to calculate the volume of a circle or a triangle.\n    '''\n    if(isinstance(r,list)):\n        return volume_of_circle(r[0]) + volume_of_triangle(r[0],r[1],r[2])\n    else:\n        return volume_of_circle(r) + volume_of_triangle(r)\ndef volume_of_parallelogram_or_sphere(a,b,c):\n    '''\n    Write a function to calculate the volume of a parallelogram or a sphere.\n    '''\n    if(isinstance(a,list)):\n        return volume_of_parallelogram(a[0],b,c) + volume_of_sphere(a[1])\n    else:\n        return volume_of_parallelogram(a,b,c) + volume_of_sphere(a)\ndef volume_of_circle_or_triangle_or_parallelogram(r):\n    '''\n    Write a function to calculate the volume of a circle or a triangle or a parallelogram.\n    '''\n    if(isinstance(r,list)):\n        return volume_of_circle_or_triangle(r[0]) + volume_of_parallelogram(r[0],r[1],r[2])\n    else:\n        return volume_of_circle_or_triangle(r) + volume_of_parallelogram(r)\ndef volume_of_sphere_or_circle_or_triangle(r):\n    '''\n    Write a function to calculate the volume of a sphere or a circle or a triangle.\n    '''\n    if(isinstance(r,list)):\n        return volume_of_sphere_or_circle(r[0]) + volume_of_circle_or_triangle(r[0],r[1],r[2])\n    else:\n        return volume_of_sphere_or_circle(r) + volume_of_circle_or_triangle(r)\ndef volume_of_cuboid(a,b,c,d):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return volume_of_circle_or_triangle_or_parallelogram(volume_of_cuboid_convex_form(a,b,c,d))\ndef volume_of_cuboid_convex_form(a,b,c,d):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return volume_of_circle_or_triangle_or_parallelogram(volume_of_cuboid_convex_form_convex(a,b,c,d))\ndef volume_of_cuboid_convex_form_convex(a,b,c,d):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return volume_of_circle_or_triangle_or_parallelogram(volume_of_cuboid_convex_form_convex_convex(a,b,c,d))\ndef volume_of_cuboid_convex_form_convex_convex(a,b,c,d):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return volume_of_circle_or_triangle_or_parallelogram(volume_of_cuboid_convex_form_convex_convex_convex(a,b,c,d))\ndef volume_of_cuboid_convex_form_convex_convex_convex(a,b,c,d):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return volume_of_circle_or_triangle_or_parallelogram(volume_of_cuboid_convex_form_convex_convex_convex_convex(a,b,c,d))\ndef volume_of_cuboid_convex_form_convex_convex(a,b,c,d):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return volume_of_circle_or_triangle_or_parallelogram(volume_of_cuboid_convex_form_convex_convex_convex_convex(a,b,c,d))\ndef volume_of_cuboid_convex_form_convex_convex(a,b,c,d):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return volume_of_circle_or_triangle_or_parallelogram(volume_of_cuboid_convex_form_convex_convex_convex(a,b"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    a = 4*math.pi*(r**2)\n    return a\ndef surfacearea_rectangle(width,height):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    # your code goes here\n    a = width*height\n    return a\ndef surfacearea_square(side):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    # your code goes here\n    a = (side*side)\n    return a\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    # your code goes here\n    a = (a*b)/2\n    b = (a*c)/2\n    c = (a*b)/2\n    return a+b+c\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (2/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified3(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified4(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified5(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified6(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified7(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified8(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified9(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified10(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified11(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified12(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified13(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified14(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified15(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified16(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified17(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified18(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified19(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified20(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified21(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified22(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified23(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified24(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified25(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified26(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified27(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified28(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*math.pi*r*r*(math.sin(math.radians(180-360/3))**3)\ndef surfacearea_sphere_modified29(r):\n    '''\n    Writ"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * math.pow(r, 2))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 2*math.pi*r**2\n    print(a)\n    \n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #Calculate the area of the sphere\n    area = 4/3 * math.pi * (r**3)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # write your code here\n    area = (4/3)*3.14*r*r*(math.pi**3)\n    return area\n    \n    "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * math.pow(r, 3)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n*(n+1))//2)*(n+1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 6\n    elif n==4:\n        return 10\n    elif n==5:\n        return 15\n    else:\n        return (n*(n+1))//2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x=1\n    while(x<=n):\n        print(f'{x}')\n        x+=1\n    print('x is:',x)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # n = 8\n    i = 1\n    while (i <= n):\n        if ((i % 2) == 0):\n            # nth hexagon\n            print(i, end=\" \")\n            i += 1\n        else:\n            # no hexagon\n            print(i, end=\" \")\n            i += 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal = n * 6\n    for i in range(hexagonal+1, 10*n+1, 6):\n        hexagonal = hexagonal + (i / 6)\n        if hexagonal % 6 == 0:\n            return hexagonal\n        else:\n            hexagonal = hexagonal - 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    c = n//2\n    return (((c*3)+1)//2) * 4 + (c//2) * 3 - (c//2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0 or n > 45:\n        raise ValueError(\"n should be in range [1..45].\")\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    number=0\n    while number<n:\n        number=number+1\n        if number<=10:\n            print(\"The number you entered is: \", number)\n    else:\n        print(\"The number you entered is: \", number)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 6\n    if n == 4:\n        return 8\n    if n == 5:\n        return 10\n    if n == 6:\n        return 12\n    if n == 7:\n        return 14\n    if n == 8:\n        return 16\n    if n == 9:\n        return 18\n    if n == 10:\n        return 20\n    if n == 11:\n        return 22\n    if n == 12:\n        return 24\n    if n == 13:\n        return 26\n    if n == 14:\n        return 28\n    if n == 15:\n        return 30\n    if n == 16:\n        return 32\n    if n == 17:\n        return 34\n    if n == 18:\n        return 36\n    if n == 19:\n        return 38\n    if n == 20:\n        return 40\n    if n == 21:\n        return 42\n    if n == 22:\n        return 44\n    if n == 23:\n        return 46\n    if n == 24:\n        return 48\n    if n == 25:\n        return 50\n    if n == 26:\n        return 52\n    if n == 27:\n        return 54\n    if n == 28:\n        return 56\n    if n == 29:\n        return 58\n    if n == 30:\n        return 60\n    if n == 31:\n        return 62\n    if n == 32:\n        return 64\n    if n == 33:\n        return 66\n    if n == 34:\n        return 68\n    if n == 35:\n        return 70\n    if n == 36:\n        return 72\n    if n == 37:\n        return 74\n    if n == 38:\n        return 76\n    if n == 39:\n        return 78\n    if n == 40:\n        return 80\n    if n == 41:\n        return 82\n    if n == 42:\n        return 84\n    if n == 43:\n        return 86\n    if n == 44:\n        return 88\n    if n == 45:\n        return 90\n    if n == 46:\n        return 92\n    if n == 47:\n        return 94\n    if n == 48:\n        return 96\n    if n == 49:\n        return 98\n    if n == 50:\n        return 100\n    if n == 51:\n        return 102\n    if n == 52:\n        return 104\n    if n == 53:\n        return 106\n    if n == 54:\n        return 108\n    if n == 55:\n        return 110\n    if n == 56:\n        return 112\n    if n == 57:\n        return 114\n    if n == 58:\n        return 116\n    if n == 59:\n        return 118\n    if n == 60:\n        return 120\n    if n == 61:\n        return 122\n    if n == 62:\n        return 124\n    if n == 63:\n        return 126\n    if n == 64:\n        return 128\n    if n == 65:\n        return 130\n    if n == 66:\n        return 132\n    if n == 67:\n        return 134\n    if n == 68:\n        return 136\n    if n == 69:\n        return 138\n    if n == 70:\n        return 140\n    if n == 71:\n        return 142\n    if n == 72:\n        return 144\n    if n == 73:\n        return 146\n    if n == 74:\n        return 148\n    if n == 75:\n        return 150\n    if n == 76:\n        return 152\n    if n == 77:\n        return 154\n    if n == 78:\n        return 156\n    if n == 79:\n        return 158\n    if n == 80:\n        return 160\n    if n == 81:\n        return 162\n    if n == 82:\n        return 164\n    if n == 83:\n        return 166\n    if n == 84:\n        return 168\n    if n == 85:\n        return 170\n    if n == 86:\n        return 172\n    if n == 87:\n        return 174\n    if n == 88:\n        return 176\n    if n == 89:\n        return 178\n    if n == 90:\n        return 180\n    if n == 91:\n        return 182\n    if n == 92:\n        return 184\n    if n == 93:\n        return 186\n    if n == 94:\n        return 188\n    if n == 95:\n        return 190\n    if n == 96:\n        return 192\n    if n == 97:\n        return 194\n    if n == 98:\n        return 196\n    if n == 99:\n        return 198\n    if n == 100:\n        return 200\n    if n == 101:\n        return 202\n    if n == 102:\n        return 204\n    if n == 103:\n        return 206\n    if n == 104:\n        return 208\n    if n == 105:\n        return 210\n    if n == 106:\n        return 212\n    if n == 107:\n        return 214\n    if n == 108:\n        return 216\n    if n == 109:\n        return 218\n    if n == 110:\n        return 220\n    if n == 111:\n        return 222\n    if n == 112:\n        return 224\n    if n == 113:\n        return 226\n    if n == 114:\n        return 228\n    if n == 115:\n        return 230\n    if n == 116:\n        return 232\n    if n == 117:\n        return 234\n    if n == 118:\n        return 236\n    if n == 119:\n        return 238\n    if n == 120:\n        return 240\n    if n == 121:\n        return 242\n    if n == 122:\n        return 244\n    if n == 123:\n        return 246\n    if n == 124:\n        return 248\n    if n == 125:\n        return 250\n    if n == 126:\n        return 252\n    if n == 127:\n        return 254\n    if n == 128:\n        return 256\n    if n == 129:\n        return 258\n    if n == 130:\n        return 260\n    if n == 131:\n        return 262\n    if n == 132:\n        return 264\n    if n == 133:\n        return 266\n    if n == 134:\n        return 268\n    if n == 135:\n        return 270\n    if n == 136:\n        return 272\n    if n == 137:\n        return 274\n    if n == 138:\n        return 276\n    if n == 139:\n        return 278\n    if n == 140:\n        return 280\n    if n == 141:\n        return 282\n    if n == 142:\n        return 284\n    if n == 143:\n        return 286\n    if n == 144:\n        return 288\n    if n == 145:\n        return 290\n    if n == 146:\n        return 292\n    if n == 147:\n        return 294\n    if n == 148:\n        return 296\n    if n == 149:\n        return 298\n    if n == 150:\n        return 300\n    if n == 151:\n        return 302\n    if n == 152:\n        return 304\n    if n == 153:\n        return 306\n    if n == 154:\n        return 308\n    if n == 155:\n        return 310\n    if n == 156:\n        return 312\n    if n == 157:\n        return 314\n    if n == 158:\n        return 316\n    if n == 159:\n        return 318\n    if n == 160:\n        return 320\n    if n == 161:\n        return 322\n    if n == 162:\n        return 324\n    if n == 163:\n        return 326\n    if n == 164:\n        return 328\n    if n == 165:\n        return 330\n    if n == 166:\n        return 332\n    if n == 167:\n        return 334\n    if n == 168:\n        return 336\n    if n == 169:\n        return 338\n    if n == 170:\n        return 340\n    if n == 171:\n        return 342\n    if n == 172:\n        return 344\n    if n == 173:\n        return 346\n    if n == 174:\n        return 348\n    if n == 175:\n        return 350\n    if n == 176:\n        return 352\n    if n == 177:\n        return 354\n    if n == 178:\n        return 356\n    if n == 179:\n        return 358\n    if n == 180:\n        return 360\n    if n == 181:\n        return 362\n    if n == 182:\n        return 364\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = n**2\n    for i in range(num):\n        if (i<=num):\n            print(i, end='')\n        else:\n            print('\\n', end='')\n    print()\n    print('{0}+{1}'.format(num//2, num%2))\n    print('{0}+{1}'.format(num//3, num%3))\n    print('{0}+{1}'.format(num//4, num%4))\n    print('{0}+{1}'.format(num//5, num%5))\n    print('{0}+{1}'.format(num//6, num%6))\n    print('{0}+{1}'.format(num//7, num%7))\n    print('{0}+{1}'.format(num//8, num%8))\n    print('{0}+{1}'.format(num//9, num%9))\n    print('{0}+{1}'.format(num//10, num%10))\n    print('{0}+{1}'.format(num//11, num%11))\n    print('{0}+{1}'.format(num//12, num%12))\n    print('{0}+{1}'.format(num//13, num%13))\n    print('{0}+{1}'.format(num//14, num%14))\n    print('{0}+{1}'.format(num//15, num%15))\n    print('{0}+{1}'.format(num//16, num%16))\n    print('{0}+{1}'.format(num//17, num%17))\n    print('{0}+{1}'.format(num//18, num%18))\n    print('{0}+{1}'.format(num//19, num%19))\n    print('{0}+{1}'.format(num//20, num%20))\n    print('{0}+{1}'.format(num//21, num%21))\n    print('{0}+{1}'.format(num//22, num%22))\n    print('{0}+{1}'.format(num//23, num%23))\n    print('{0}+{1}'.format(num//24, num%24))\n    print('{0}+{1}'.format(num//25, num%25))\n    print('{0}+{1}'.format(num//26, num%26))\n    print('{0}+{1}'.format(num//27, num%27))\n    print('{0}+{1}'.format(num//28, num%28))\n    print('{0}+{1}'.format(num//29, num%29))\n    print('{0}+{1}'.format(num//30, num%30))\n    print('{0}+{1}'.format(num//31, num%31))\n    print('{0}+{1}'.format(num//32, num%32))\n    print('{0}+{1}'.format(num//33, num%33))\n    print('{0}+{1}'.format(num//34, num%34))\n    print('{0}+{1}'.format(num//35, num%35))\n    print('{0}+{1}'.format(num//36, num%36))\n    print('{0}+{1}'.format(num//37, num%37))\n    print('{0}+{1}'.format(num//38, num%38))\n    print('{0}+{1}'.format(num//39, num%39))\n    print('{0}+{1}'.format(num//40, num%40))\n    print('{0}+{1}'.format(num//41, num%41))\n    print('{0}+{1}'.format(num//42, num%42))\n    print('{0}+{1}'.format(num//43, num%43))\n    print('{0}+{1}'.format(num//44, num%44))\n    print('{0}+{1}'.format(num//45, num%45))\n    print('{0}+{1}'.format(num//46, num%46))\n    print('{0}+{1}'.format(num//47, num%47))\n    print('{0}+{1}'.format(num//48, num%48))\n    print('{0}+{1}'.format(num//49, num%49))\n    print('{0}+{1}'.format(num//50, num%50))\n    print('{0}+{1}'.format(num//51, num%51))\n    print('{0}+{1}'.format(num//52, num%52))\n    print('{0}+{1}'.format(num//53, num%53))\n    print('{0}+{1}'.format(num//54, num%54))\n    print('{0}+{1}'.format(num//55, num%55))\n    print('{0}+{1}'.format(num//56, num%56))\n    print('{0}+{1}'.format(num//57, num%57))\n    print('{0}+{1}'.format(num//58, num%58))\n    print('{0}+{1}'.format(num//59, num%59))\n    print('{0}+{1}'.format(num//60, num%60))\n    print('{0}+{1}'.format(num//61, num%61))\n    print('{0}+{1}'.format(num//62, num%62))\n    print('{0}+{1}'.format(num//63, num%63))\n    print('{0}+{1}'.format(num//64, num%64))\n    print('{0}+{1}'.format(num//65, num%65))\n    print('{0}+{1}'.format(num//66, num%66))\n    print('{0}+{1}'.format(num//67, num%67))\n    print('{0}+{1}'.format(num//68, num%68))\n    print('{0}+{1}'.format(num//69, num%69))\n    print('{0}+{1}'.format(num//70, num%70))\n    print('{0}+{1}'.format(num//71, num%71))\n    print('{0}+{1}'.format(num//72, num%72))\n    print('{0}+{1}'.format(num//73, num%73))\n    print('{0}+{1}'.format(num//74, num%74))\n    print('{0}+{1}'.format(num//75, num%75))\n    print('{0}+{1}'.format(num//76, num%76))\n    print('{0}+{1}'.format(num//77, num%77))\n    print('{0}+{1}'.format(num//78, num%78))\n    print('{0}+{1}'.format(num//79, num%79))\n    print('{0}+{1}'.format(num//80, num%80))\n    print('{0}+{1}'.format(num//81, num%81))\n    print('{0}+{1}'.format(num//82, num%82))\n    print('{0}+{1}'.format(num//83, num%83))\n    print('{0}+{1}'.format(num//84, num%84))\n    print('{0}+{1}'.format(num//85, num%85))\n    print('{0}+{1}'.format(num//86, num%86))\n    print('{0}+{1}'.format(num//87, num%87))\n    print('{0}+{1}'.format(num//88, num%88))\n    print('{0}+{1}'.format(num//89, num%89))\n    print('{0}+{1}'.format(num//90, num%90))\n    print("
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    for k, v in dict1.items():\n        dict_merged[k] = v\n    for k, v in dict2.items():\n        dict_merged[k] = v\n    for k, v in dict3.items():\n        dict_merged[k] = v\n    return dict_merged\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    for k, v in dict1.items():\n        dict_merged[k] = v\n    for k, v in dict2.items():\n        dict_merged[k] = v\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if key in dict2:\n            new_dict[key] = dict2[key]\n        else:\n            new_dict[key] = dict3[key]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key, value in dict1.items():\n        if key in dict2.keys():\n            dict2[key] += value\n        else:\n            dict2[key] = value\n    for key, value in dict2.items():\n        if key in dict3.keys():\n            dict3[key] += value\n        else:\n            dict3[key] = value\n    return dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #define merge function that will merge two dictionaries\n    def merge_dicts(dict1, dict2):\n        #create a new dictionary to store the merged values\n        merged_dict = dict()\n        #loop through the dictionaries and add their keys to the merged dictionary\n        for key in dict1:\n            if key in dict2:\n                merged_dict[key] = dict1[key] + dict2[key]\n            else:\n                merged_dict[key] = dict1[key]\n        #return merged dictionary\n        return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1_d = dict1.keys()\n    dict2_d = dict2.keys()\n    dict3_d = dict3.keys()\n    dict_dict = {}\n    for key in dict1_d:\n        dict_dict[key] = dict1[key]\n    for key in dict2_d:\n        dict_dict[key] = dict2[key]\n    for key in dict3_d:\n        dict_dict[key] = dict3[key]\n    return dict_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dic = dict1.copy()\n    merged_dic.update(dict2)\n    merged_dic.update(dict3)\n    return merged_dic\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict=dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if key in dict2:\n            new_dict[key] = dict2[key]\n        elif key in dict3:\n            new_dict[key] = dict3[key]\n        else:\n            new_dict[key] = value\n    for key, value in dict2.items():\n        if key in dict3:\n            new_dict[key] = dict3[key]\n        elif key in dict1:\n            new_dict[key] = dict1[key]\n        else:\n            new_dict[key] = value\n    return new_dict\n    \ndef merge_dictionaries_four(dict1, dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if key in dict2:\n            new_dict[key] = dict2[key]\n        elif key in dict3:\n            new_dict[key] = dict3[key]\n        elif key in dict4:\n            new_dict[key] = dict4[key]\n        else:\n            new_dict[key] = value\n    for key, value in dict2.items():\n        if key in dict3:\n            new_dict[key] = dict3[key]\n        elif key in dict4:\n            new_dict[key] = dict4[key]\n        else:\n            new_dict[key] = value\n    for key, value in dict3.items():\n        if key in dict4:\n            new_dict[key] = dict4[key]\n        else:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    from collections import Counter\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = list1.count(list1[i])\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counter = collections.Counter(list1)\n    print(counter.most_common())\n    \ndef preprocess(lines):\n    '''\n    A method that takes a list of strings and returns a list of strings.\n    '''\n    l=[]\n    for line in lines:\n        line=line.lower()\n        line=line.split()\n        for word in line:\n            word=word.strip('.,!?;:')\n            l.append(word)\n    return l\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count=collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    freq = {}\n    for i in list1:\n        if i not in freq.keys():\n            freq[i] = 1\n        else:\n            freq[i] += 1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    res = collections.Counter(list1)\n    res = {key: res[key] for key in res}\n    return res\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for e in list1:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    lst = []\n    for i in list1:\n        lst.append(i)\n    dict = collections.Counter(lst)\n    print(dict)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    freq_list = []\n    for i in freq:\n        freq_list.append(i)\n    return freq_list\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #Your code here\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = float('inf')\n    smallest_num_index = 0\n    for num in range(1, N + 1):\n        if smallest_num > num:\n            smallest_num = num\n            smallest_num_index = num\n        elif smallest_num == num:\n            smallest_num = float('inf')\n    return smallest_num, smallest_num_index\n    \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return sorted(set(range(1,N+1))-set([i for i in range(1,N+1)]))[-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = -1\n    for i in range(1,N+1):\n        if closest_num(i)!= -1:\n            if res == -1:\n                res = i\n            else:\n                res = min(res,i)\n    return res\n    \n    \nN = int(input())\nprint(closest_num(N)"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = [0]*(N+1)\n    l[0] = 0\n    for i in range(1,N+1):\n        if l[i-1] > l[i]:\n            l[i] = l[i-1] + 1\n    return l[-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    low = -2\n    high = N - 1\n    closest = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if mid == 0:\n            if N < 0:\n                closest = -1\n            else:\n                closest = N\n            break\n        elif mid == N:\n            if N < 0:\n                closest = -1\n            else:\n                closest = N\n            break\n        if mid > N:\n            low = mid + 1\n        else:\n            high = mid - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for x in range(1,N+1):\n        print('Finding',x,'th smallest number...')\n        if closest_num(x)>x:\n            closest_num(x)\n            return x\n    else:\n        return x\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    return math.ceil(math.log(N, 2))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N==1:\n        return 1\n    if N<1:\n        return 1\n    if N%2==0:\n        return closest_num(N//2)\n    else:\n        return (N//2)+(closest_num(N//2)+1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = 100000000\n    for num in range(1, N + 1):\n        if num < min_num:\n            min_num = num\n    return min_num\n    "
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Your code here\n    return len(max(list1,key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    else:\n        max1 = 0\n        for x in list1:\n            if len(x) > max1:\n                max1 = len(x)\n        return max1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_list = []\n    for word in list1:\n        if len(word) > len(new_list):\n            new_list = word\n    return len(new_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) > 0:\n        max = 0\n        for i in list1:\n            if len(i) > max:\n                max = len(i)\n        return max\n    else:\n        return 0\n        \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    def remove_character(str1, character):\n        return str1.replace(character, '')\n    max_len = 0\n    for i in range(0, len(list1)-1):\n        if len(remove_character(str1, list1[i])) > max_len:\n            max_len = len(remove_character(str1, list1[i]))\n    print(max_len)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if(len(list1)==0):\n        print('No word in the list')\n        return 0\n    else:\n        for i in range(len(list1)):\n            if(list1[i]==' '):\n                pass\n            else:\n                return len(list1[i])\n    print('No word in the list')\n    return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    s = ''\n    l = 0\n    for i in list1:\n        for x in i:\n            s+=x\n        l = max(len(s),l)\n        s = ''\n    return l\n    \ndef print_list(list1):\n    '''\n    Write a python function to print a list.\n    '''\n    for i in list1:\n        print(i)\n        \ndef main():\n    '''\n    Write a python function to print an even number of lines (first 4 and 5).\n    '''\n    s = [' '*i for i in range(5)]\n    print(*s,sep='\\n')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(len(max(list1, key=len)))\n    \ndef remove_spaces(list1):\n    '''\n    Remove all spaces from the input string.\n    '''\n    str_list = []\n    for i in range(len(list1)):\n        if list1[i]!='':\n            str_list.append(list1[i])\n    return str_list\n    \ndef remove_non_chars(list1):\n    '''\n    Remove all non-alpha characters in the input string.\n    '''\n    str_list = []\n    for i in range(len(list1)):\n        if list1[i].isalpha():\n            str_list.append(list1[i])\n    return str_list\n    \ndef remove_non_word(list1):\n    '''\n    Remove all non-word characters in the input string.\n    '''\n    str_list = []\n    for i in range(len(list1)):\n        if list1[i].isalpha() and list1[i].isalpha() and list1[i].isalpha() and list1[i].isalpha() and list1[i].isalpha() and list1[i].isalpha():\n            str_list.append(list1[i])\n    return str_list\n    \ndef remove_punctuation(list1):\n    '''\n    Remove all punctuation characters in the input string.\n    '''\n    str_list = []\n    for i in range(len(list1)):\n        if list1[i].isalpha() and list1[i].isalpha() and list1[i].isalpha() and list1[i].isalpha() and list1[i].isalpha() and list1[i].isalpha() and list1[i].isalpha():\n            str_list.append(list1[i])\n    return str_list\n    \ndef clean_text(str1):\n    '''\n    Clean a text.\n    '''\n    str_list = []\n    for i in range(len(str1)):\n        if str1[i]!='':\n            str_list.append(str1[i])\n    return str_list\n    \ndef num_char_in_word(str1):\n    '''\n    Count the number of all characters in a string.\n    '''\n    str_list = []\n    for i in range(len(str1)):\n        str_list.append(str1[i])\n    return len(set(str_list))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len = 1\n    for word in list1:\n        if len(word) > len:\n            len = len\n    return len\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    else:\n        for i in range(len(str1) - len(sub_str) + 1):\n            if str1[i:i+len(sub_str)] == sub_str:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # E.g:\n    # str1 = \"abcabcbb\"\n    # sub_str = \"abc\"\n    # return \"a\" in sub_str\n    \n    # Method:\n    # Substring: return True if sub_str in string\n    # useful for longer strings\n    # also note that we need to include spaces around the substring\n    sub_str = sub_str + \" \"\n    index = 0\n    start = 0\n    end = len(str1) - 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l = len(sub_str)\n    index = 0\n    for char in str1:\n        if char == sub_str[index]:\n            index += 1\n        else:\n            break\n    return index == l\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    s = set(sub_str)\n    return any(x in s for x in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_dict = {}\n    for char in sub_str:\n        sub_str_dict[char] = sub_str_dict.get(char, 0) + 1\n    \n    for char in str1:\n        if char in sub_str_dict:\n            sub_str_dict[char] -= 1\n            if sub_str_dict[char] == 0:\n                del sub_str_dict[char]\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    for j in range(len(sub_str)):\n        if str1[i:i+len(sub_str[j])] == sub_str:\n            return i\n        i += len(sub_str)\n    return \"no match\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count=0\n    i=0\n    j=0\n    while i<len(str1):\n        j=str1[i].find(sub_str)\n        if j!=-1:\n            count=count+1\n        i=i+1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1 or not sub_str:\n        return None\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n < 10**8\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 0 and n % 2 == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        return is_undulating(n // 2)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        if n % 3 == 0 or n % 5 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return not n % 2 \ndef is_prime(num): \n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if num == 2: return True\n    if num == 3: return True if num > 1 else False\n    if num < 2 or num % 2 == 0: return False\n    if num == 1: return False\n    i = 3\n    while i <= math.sqrt(num):\n        if num % i == 0: return False\n        i += 2\n        if i > num: return False\n    return True \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    if n <= 2: \n        return True\n    if n % 2 == 0: \n        return False\n    else: \n        return is_undulating(3 * n + 1)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n%2)==0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return False\n    else: \n        if n % 2 == 0: \n            return is_undulating(n / 2) \n        else: \n            return is_undulating(3 * n)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n%2 == 0 and n>0): \n        print(\"Invalid number.\") \n        return False\n    elif (n%2!= 0 and n>0): \n        print(\"Invalid number.\") \n        return False\n    elif n%2 == 0 and n<0: \n        print(\"Invalid number.\") \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==0 or b==0:\n        return 0\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(\"The value of a to the power b is: \",a**b)\n    \npower(4,5)\npower(1,3)\npower(4,4)\npower(6,5)\npower(9,6"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(1,b+1):\n        result = a*result\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return pow(a,b)\n    except:\n        print(\"you can't do that\")\n        raise\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    a = int(a)\n    b = int(b)\n    p = 1\n    while b > 0:\n        if b % 2 == 1:\n            p = p*a\n        a = a*a\n        b = b/2\n    return p\nprint(power(5,2))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort()\n    return test_list[0]\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    test_list.sort()\n    return test_list[-1]\ndef index_all(test_list):\n    '''\n    Given a list of tuples, write a function that returns the values in test_list, in sorted order.\n    '''\n    test_list.sort()\n    return test_list\ndef value_in_range(test_list, index, range_):\n    '''\n    Given a list of tuples and an index, return True if the list values are in the range\n    '''\n    if index < range_[0] or index > range_[1]:\n        return False\n    return test_list[index] <= range_[0] or test_list[index] >= range_[1]\ndef is_in_range(test_list, index, range_):\n    '''\n    Given a list of tuples and an index, return True if the list values are in the range\n    '''\n    return value_in_range(test_list, index, range_)\ndef intersection_of_ranges(range_1, range_2):\n    '''\n    Given two ranges, return the list of indices of the values that overlap.\n    '''\n    return [x for x in range_1 if value_in_range(range_2, x, range_1)]\ndef union_of_ranges(range_1, range_2):\n    '''\n    Given two ranges, return the list of indices of the values that are in both ranges.\n    '''\n    return [x for x in range_1 if value_in_range(range_2, x, range_1)] + [x for x in range_2 if value_in_range(range_1, x, range_2)]\ndef find_intersection(list1, list2):\n    '''\n    Given two lists, return a list of indexes of any value in the first list that appears in the second.\n    '''\n    return [x for x in range(len(list1)) if value_in_range(list1, x, list2)]\ndef find_union(list1, list2):\n    '''\n    Given two lists, return a list of indexes of any value in the first list that appears in the second.\n    '''\n    return [x for x in range(len(list1)) if value_in_range(list2, x, list1)] + [x for x in range(len(list1)) if value_in_range(list1, x, list2)]\ndef find_intersect(list1, list2):\n    '''\n    Given two lists, return a list of indexes of any value in the first list that does not appear in the second.\n    '''\n    return [x for x in range(len(list1)) if value_not_in_range(list1, x, list2)] + [x for x in range(len(list1)) if value_not_in_range(list1, x, list2)]\ndef find_difference(list1, list2):\n    '''\n    Given two lists, return a list of indexes of any value in the first list that is not in the second.\n    '''\n    return [x for x in range(len(list1)) if value_not_in_range(list1, x, list2)] + [x for x in range(len(list1)) if value_not_in_range(list1, x, list2)]\ndef find_disjoint_lists(list1, list2):\n    '''\n    Given two lists, return True if they have at least one element in the second list that is also in the first list.\n    '''\n    return len([x for x in range(len(list1)) if value_not_in_range(list1, x, list2)]) == len([x for x in range(len(list1)) if value_not_in_range(list1, x, list2)])\ndef find_list_contains_index(list1, index):\n    '''\n    Given a list of numbers, return the index of the first element in the list that is greater than the given index.\n    '''\n    return [x for x in range(len(list1)) if list1[x] > index] + [x for x in range(len(list1)) if list1[x] < index]\ndef list_contains_index(list1, index):\n    '''\n    Given a list of numbers, return the index of the first element in the list that is greater than the given index.\n    '''\n    return [x for x in range(len(list1)) if list1[x] > index] + [x for x in range(len(list1)) if list1[x] < index]\ndef is_subset(list1, list2):\n    '''\n    Given two lists, return True if the first list contains the given second list, otherwise False.\n    '''\n    return [x for x in range(len(list1)) if list1[x] in list2] + [x for x in range(len(list1)) if list1[x] not in list2]\ndef is_superset(list1, list2):\n    '''\n    Given two lists, return True if the first list contains the given second list, otherwise False.\n    '''\n    return [x for x in range(len(list1)) if list1[x] in list2] + [x for x in range(len(list1)) if list1[x] not in list2]\ndef is_almost_equal(list1, list2):\n    '''\n    Given two lists, return True if the first list contains the given second list, otherwise False.\n    '''\n    return [x for x in range(len(list1)) if list1[x]!= list2[x]] + [x for x in range(len(list1)) if list1[x]!= list2[x]]\ndef list_almost_equal(list1, list2):\n    '''\n    Given two lists, return True if the first list contains the given second list, otherwise False.\n    '''\n    return [x for x in range(len(list1)) if list1[x]!= list2[x]] + [x for x in range(len(list1)) if list1[x]!= list2[x]]\ndef is_absolute(list1, list2):\n    '''\n    Given two lists, return True if the first list is an absolute list, otherwise False.\n    '''\n    return [x for x in range(len(list1)) if abs(list1[x] - list2[x]) < 1e-5] + [x for x in range(len(list1)) if abs(list1[x] - list2[x]) < 1e-5]\ndef list_absolute(list1):\n    '''\n    Given a list of numbers, return a list of absolute numbers.\n    '''\n    return [abs(x) for x in list1]\ndef sum_of_absolute(list1):\n    '''\n    Given a list of numbers, return the sum of the absolute numbers in the list.\n    '''\n    return [abs(x) for x in list1]\ndef replace_all(list1, list2, index):\n    '''\n    Given two lists, return a list of values at the given index.\n    '''\n    return [x for x in range(len(list1)) if list1[x]!= list2[x]] + [x for x in range(len(list1)) if list1[x]!= list2[x]]\ndef reverse_and_sort(list1):\n    '''\n    Given a list, return a list with the same elements in reverse order.\n    '''\n    return list1[::-1] + [list1[-1]] + list1[::-1]\ndef merge_two_lists(list1, list2):\n    '''\n    Given two lists, return a list with the elements of both lists in ascending order.\n    '''\n    return list(sorted(set(list1 + list2)))\ndef count_elements(list1):\n    '''\n    Given a list, return the number of times that any element appears in the list.\n    '''\n    return "
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Write your code here.\n    if len(test_list) == 0:\n        return None\n    if len(test_list) == 1:\n        return test_list[0][1]\n    \n    t = sorted(test_list, key=itemgetter(1))\n    return t[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_without_duplicates = sorted(test_list, key = itemgetter(1))\n    return list_without_duplicates[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_of_tuples = test_list[0]\n    list_of_tuples.sort(key=itemgetter(1), reverse=True)\n    return list_of_tuples[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # We want to return the smallest value of the tuple with the second value.\n    # This is the best way to sort a dictionary, but it only sorts by the second value.\n    # Instead of comparing the values, we sort the list of tuples.\n    return min(itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Define the returned value \n    minimum = None\n    # Iterate through the list\n    for index, values in enumerate(test_list):\n        # Compare value with the values\n        if values[1] < minimum:\n            minimum = values[1]\n        if values[1] == minimum:\n            if index!= 0:\n                # Update the value\n                if minimum == values[0]:\n                    minimum = None\n                    break\n                if index!= len(test_list) - 1:\n                    minimum = None\n                    break\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if test_list == []:\n        return None\n    if len(test_list) == 1:\n        return test_list[0][0]\n    elif len(test_list) == 2:\n        return min(test_list, key=itemgetter(1))[0]\n    else:\n        index_min = 0\n        for index, element in enumerate(test_list):\n            if index == 0:\n                if element[1] < element[0]:\n                    index_min = index\n            else:\n                if element[1] < element[0]:\n                    return None\n        return index_min\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] > test_list[j][0]:\n                break\n            elif test_list[i][0] == test_list[j][0]:\n                if test_list[i][1] > test_list[j][1]:\n                    break\n                elif test_list[i][1] == test_list[j][1]:\n                    if test_list[i][0] < test_list[j][0]:\n                        break\n    return test_list[i][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for element in test_list:\n        if element[1] < element[1]:\n            return element[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Smallest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < Smallest:\n            Smallest = lst[i]\n    return Smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLength = 10000\n    if len(lst) > 1:\n        for i in range(len(lst) - 1):\n            for j in range(i + 1, len(lst)):\n                if len(lst[i]) < len(lst[j]):\n                    minLength = len(lst[i])\n                    temp = lst[i]\n                    lst[i] = lst[j]\n                    lst[j] = temp\n    else:\n        minLength = 0\n    return minLength\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=len(lst[0])\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 100000000\n    for lst_item in lst:\n        if len(lst_item) < min_length:\n            min_length = len(lst_item)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst)\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # loop through all the lists and find the smallest\n    min_length = min(lst, key=len)\n    \n    # if the length is less than the smallest list, return it\n    if len(min_length) < len(lst):\n        return min_length\n    # else, return the first item of the smallest list\n    else:\n        return min_length[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = lst[0][0]\n    smallest_list = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i][0] < smallest_length:\n            smallest_length = lst[i][0]\n            smallest_list = lst[i]\n    return(smallest_length)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    MIN = lst[0][0]\n    for element in lst:\n        if element[0] < MIN:\n            MIN = element[0]\n    return MIN\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = sys.maxsize\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_1 = n\n    count = 1\n    while div_1 % 10!= 0:\n        count += 1\n        div_1 = div_1 // 10\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    def count_divisors(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            count = count_divisors(n-1) + count_divisors(n-2)\n            return count\n    count = count_divisors(n)\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    if n<2:\n        return n\n    elif n==2:\n        return 1\n    else:\n        return n/2-1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 0\n    while (n > 1):\n        if (n % 2 == 0):\n            n = n / 2\n            i += 1\n        else:\n            n = 3 * n + 1\n            i += 1\n    return i\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    a = 1\n    for i in range(1, int(n**(1/2)) + 1):\n        if n % i == 0:\n            a += 1\n    return a\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        divisors = 0\n        for i in range(1,n+1):\n            if n % i == 0:\n                divisors += 1\n        return divisors\n        \nprint(divisor(2))\nprint(divisor(3))\nprint(divisor(12))\nprint(divisor(100))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    while(i<=n):\n        if(n%i==0):\n            print(i)\n            n=n/i\n        else:\n            i=i+1\n    return n\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result={}\n    for i in list1:\n        if type(i)==list:\n            for element in i:\n                if element in result:\n                    result[element]+=1\n                else:\n                    result[element]=1\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counter = {}\n    for element in list1:\n        if element in counter:\n            counter[element] += 1\n        else:\n            counter[element] = 1\n    return counter\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict = {}\n    for num in list1:\n        dict[num] = list1.count(num)\n    return dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Start with an empty dictionary\n    frequency = {}\n    # Loop through the list\n    for e in list1:\n        # Check if the value of e is in the dictionary\n        if e in frequency:\n            # If yes, increment the value\n            frequency[e] = frequency[e] + 1\n        else:\n            # If not, add the new element to the dictionary\n            frequency[e] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # TODO: Create a dictionary from the first element in each list\n    freq = {}\n    # TODO: Create a second dictionary from the first element in each list\n    for i in list1:\n        if i[0] in freq:\n            freq[i[0]] += 1\n        else:\n            freq[i[0]] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary.keys():\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    new_list = []\n    for i in list1:\n        for j in i:\n            new_list.append(j)\n    new_list = set(new_list)\n    return new_list\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 0\n    for i in range(len(numbers)):\n        result += numbers[i] * (i + 1)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for n in numbers:\n        result.append(n*len(numbers))\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # start = time.time()\n    # start = start-start\n    # end = time.time()\n    # print(end-start)\n    # time.sleep(10)\n    # start = time.time()\n    # res = [1]+ [x*y for x,y in zip(numbers, numbers[1:])]\n    # end = time.time()\n    # print(end-start)\n    # print(res)\n    # print('------------------')\n    # time.sleep(10)\n    # start = time.time()\n    # res = [x*y for x,y in zip(numbers, numbers[1:])]\n    # end = time.time()\n    # print(end-start)\n    # print(res)\n    # print('------------------')\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # make an empty list\n    multiply_num = []\n    # iterate through list\n    for i in range(len(numbers)):\n        # convert the list into an integer\n        num = numbers[i]\n        # if num is a number add it to the list\n        if type(num) is int:\n            multiply_num.append(num)\n    # return the result\n    return multiply_num\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Complete the function below by adding and subtracting numbers from each of the items in the list\n    \n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    multiply = 1\n    for num in numbers:\n        multiply = multiply * num\n    print(multiply)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    lst = []\n    lst.extend(numbers)\n    for i in range(len(lst)):\n        lst[i] = lst[i] * int(len(lst)/numbers[i])\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult = 1\n    for num in numbers:\n        mult = num * mult\n    return mult\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for i in numbers:\n        multiply = multiply * i\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if n == 0: \n        return '0'\n    \n    elif n > 0: \n        ret_str = '' \n        while n: \n            ret_str = '{0:b}'.format(n % 2) + ret_str \n            n //= 2\n        return ret_str \n    else: \n        return '1' + '0' * (abs(n) - 1) \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:].zfill(64)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_string = \"\"\n    if n == 0:\n        return \"0\"\n    while n > 0:\n        rem = n % 2\n        bin_string += str(rem)\n        n = int(n / 2)\n    return bin_string\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    #converting decimal numbers to binary \n    #modulo in python by default it adds a leading zero if the number is 0 or less \n    #modulo by 6 takes only integer inputs \n    #fractions are always integers so no need to modulo the number \n    #modulo by 2 takes only integers and we want to take the fraction to the base \n    #ex:3//2 => 2 and a zero \n    #modulo by 2 is equal to the integer modulo the base \n    #modulo by 3 is equal to the fraction modulo the base \n    #modulo by 4 is equal to the integer modulo the base \n    #modulo by 5 is equal to the fraction modulo the base \n    #modulo by 6 is equal to the integer modulo the base \n    #modulo by 7 is equal to the fraction modulo the base \n    #modulo by 8 is equal to the integer modulo the base \n    #modulo by 9 is equal to the fraction modulo the base \n    #modulo by 10 is equal to the integer modulo the base \n    #modulo by 11 is equal to the fraction modulo the base \n    #modulo by 12 is equal to the integer modulo the base \n    #modulo by 13 is equal to the fraction modulo the base \n    #modulo by 14 is equal to the integer modulo the base \n    #modulo by 15 is equal to the fraction modulo the base \n    #modulo by 16 is equal to the integer modulo the base \n    #modulo by 17 is equal to the fraction modulo the base \n    #modulo by 18 is equal to the integer modulo the base \n    #modulo by 19 is equal to the fraction modulo the base \n    #modulo by 20 is equal to the integer modulo the base \n    #modulo by 21 is equal to the fraction modulo the base \n    #modulo by 22 is equal to the integer modulo the base \n    #modulo by 23 is equal to the fraction modulo the base \n    #modulo by 24 is equal to the integer modulo the base \n    #modulo by 25 is equal to the fraction modulo the base \n    #modulo by 26 is equal to the integer modulo the base \n    #modulo by 27 is equal to the fraction modulo the base \n    #modulo by 28 is equal to the integer modulo the base \n    #modulo by 29 is equal to the fraction modulo the base \n    #modulo by 30 is equal to the integer modulo the base \n    #modulo by 31 is equal to the fraction modulo the base \n    #modulo by 32 is equal to the integer modulo the base \n    #modulo by 33 is equal to the fraction modulo the base \n    #modulo by 34 is equal to the integer modulo the base \n    #modulo by 35 is equal to the fraction modulo the base \n    #modulo by 36 is equal to the integer modulo the base \n    #modulo by 37 is equal to the fraction modulo the base \n    #modulo by 38 is equal to the integer modulo the base \n    #modulo by 39 is equal to the fraction modulo the base \n    #modulo by 40 is equal to the integer modulo the base \n    #modulo by 41 is equal to the fraction modulo the base \n    #modulo by 42 is equal to the integer modulo the base \n    #modulo by 43 is equal to the fraction modulo the base \n    #modulo by 44 is equal to the integer modulo the base \n    #modulo by 45 is equal to the fraction modulo the base \n    #modulo by 46 is equal to the integer modulo the base \n    #modulo by 47 is equal to the fraction modulo the base \n    #modulo by 48 is equal to the integer modulo the base \n    #modulo by 49 is equal to the fraction modulo the base \n    #modulo by 50 is equal to the integer modulo the base \n    #modulo by 51 is equal to the fraction modulo the base \n    #modulo by 52 is equal to the integer modulo the base \n    #modulo by 53 is equal to the fraction modulo the base \n    #modulo by 54 is equal to the integer modulo the base \n    #modulo by 55 is equal to the fraction modulo the base \n    #modulo by 56 is equal to the integer modulo the base \n    #modulo by 57 is equal to the fraction modulo the base \n    #modulo by 58 is equal to the integer modulo the base \n    #modulo by 59 is equal to the fraction modulo the base \n    #modulo by 60 is equal to the integer modulo the base \n    #modulo by 61 is equal to the fraction modulo the base \n    #modulo by 62 is equal to the integer modulo the base \n    #modulo by 63 is equal to the fraction modulo the base \n    #modulo by 64 is equal to the integer modulo the base \n    #modulo by 65 is equal to the fraction modulo the base \n    #modulo by 66 is equal to the integer modulo the base \n    #modulo by 67 is equal to the fraction modulo the base \n    #modulo by 68 is equal to the integer modulo the base \n    #modulo by 69 is equal to the fraction modulo the base \n    #modulo by 70 is equal to the integer modulo the base \n    #modulo by 71 is equal to the fraction modulo the base \n    #modulo by 72 is equal to the integer modulo the base \n    #modulo by 73 is equal to the fraction modulo the base \n    #modulo by 74 is equal to the integer modulo the base \n    #modulo by 75 is equal to the fraction modulo the base \n    #modulo by 76 is equal to the integer modulo the base \n    #modulo by 77 is equal to the fraction modulo the base \n    #modulo by 78 is equal to the integer modulo the base \n    #modulo by 79 is equal to the fraction modulo the base \n    #modulo by 80 is equal to the integer modulo the base \n    #modulo by 81 is equal to the fraction modulo the base \n    #modulo by 82 is equal to the integer modulo the base \n    #modulo by 83 is equal to the fraction modulo the base \n    #modulo by 84 is equal to the integer modulo the base \n    #modulo by 85 is equal to the fraction modulo the base \n    #modulo by 86 is equal to the integer modulo the base \n    #modulo by 87 is equal to the fraction modulo the base \n    #modulo by 88 is equal to the integer modulo the base \n    #modulo by 89 is equal to the fraction modulo the base \n    #modulo by 90 is equal to the integer modulo the base \n    #modulo by 91 is equal to the fraction modulo the base \n    #modulo by 92 is equal to the integer modulo the base \n    #modulo by 93 is equal to the fraction modulo the base \n    #modulo by 94 is equal to the integer modulo the base \n    #modulo by 95 is equal to the fraction modulo the base \n    #modulo by 96 is equal to the integer modulo the base \n    #modulo by 97 is equal to the fraction modulo the base \n    #modulo by 98 is equal to the integer modulo the base \n    #modulo by 99 is equal to the fraction modulo the base \n    #modulo by 100 is equal to the integer modulo the base \n    #modulo by 101 is equal to the fraction modulo the base \n    #modulo by 102 is equal to the integer modulo the base \n    #modulo by 103 is equal to the fraction modulo the base \n    #modulo by 104 is equal to the integer modulo the base \n    #modulo by 105 is equal to the fraction modulo the base \n    #modulo by 106 is equal to the integer modulo the base \n    #modulo by 107 is equal to the fraction modulo the base \n    #modulo by 108 is equal to the integer modulo the base \n    #modulo by 109 is equal to the fraction modulo the base \n    #modulo by 110 is equal to the integer modulo the base \n    #modulo by 111 is equal to the fraction modulo the base \n    #modulo by 112 is equal to the integer modulo the base \n    #modulo by 113 is equal to the fraction modulo the base \n    #mo"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    s = bin(n)[2:]\n    s = s[-3:]\n    \n    return s\n    \n    \n    \n    \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if (n == 0): \n        return \"0\"\n    else: \n        str = \"\"\n        while n: \n            remainder = n % 2 \n            str += str(remainder)\n            n //= 2\n        return str \n    \n    \ndef find_in_s(s, word): \n    ''' \n    s: a string \n    word: a word \n    return: the position of the word \n    in s (found in s) or -1 \n    ''' \n    pos = -1 \n    for i in range(len(s)): \n        if (s[i:i + len(word)] == word): \n            pos = i \n            break\n    return pos \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n=n+1\n    binary=''\n    if(n==1): \n        binary='0'\n    elif(n==2): \n        binary='1'\n    elif(n==3): \n        binary='10'\n    elif(n==4): \n        binary='11'\n    else: \n        binary='0'\n        binary='0'*(n-5)\n        binary='1'*(n-4)\n        binary='0'*(n-3)\n        binary='10'*(n-2)\n        binary='11'*(n-1)\n        binary='1'*(n-3)\n        binary='10'*(n-4)\n        binary='11'*(n-5)\n        binary='0'*(n-6)\n        binary='1'*(n-7)\n        binary='10'*(n-8)\n        binary='11'*(n-9)\n        binary='1'*(n-10)\n        binary='10'*(n-11)\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0: \n        n = -n \n        \n    num = n \n    s = '' \n    while num!= 0: \n        s = str(num % 2) + s \n        num //= 2 \n    return s \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return '0'\n    i = 0\n    while n:\n        i = (n & 0x7F) + (i << 1)\n        n >>= 7\n    return '1' * i if n else '0' * i\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    def palindrome(a, start, end):\n        while start <= end:\n            if a[start] == a[end]:\n                start+=1\n                end-=1\n            else:\n                break\n        return start+1\n    \n    if num == 1:\n        return 1\n    \n    if num < 1:\n        return -1\n    \n    for i in range(1, num):\n        print(f\"i : {i}\")\n        smallest_palindrome = palindrome(str(i), 0, i)\n        print(f\"smallest_palindrome : {smallest_palindrome}\")\n        if smallest_palindrome >= 0 and smallest_palindrome <= i-1:\n            return smallest_palindrome\n        \n    \n    \n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    left = 0\n    right = int(num) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid % 2 == 0:\n            if num % mid == 0:\n                return mid\n            else:\n                left = mid + 1\n        else:\n            if num % mid == 0:\n                return mid\n            else:\n                right = mid - 1\n    \n    return None\n    "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Don't need to check if the number is negative\n    if num == 0:\n        return 0\n    # If it is a multiple of 5 and a palindrome\n    if (num % 5 == 0) and is_palindrome(num):\n        return num\n    # Find the next smallest palindrome of the number\n    return next_smallest_palindrome(num * 5 + 1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max = num\n    i = 0\n    while num > 0:\n        rem = num % 10\n        num = num // 10\n        if rem == 0:\n            if num > max:\n                max = num\n            i += 1\n        elif rem == 1 or rem == -1:\n            if num < max:\n                max = num\n            i += 1\n    return max\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    next_smallest = -1\n    for i in range(num + 1, int(num**0.5) + 1):\n        if is_palindrome(i):\n            if is_palindrome(i) and is_palindrome(i+1):\n                if i < num + 1:\n                    i += 1\n                return i\n            else:\n                if next_smallest == -1:\n                    next_smallest = i\n                elif next_smallest > i:\n                    next_smallest = i\n        else:\n            if next_smallest == -1:\n                next_smallest = i\n            elif next_smallest > i:\n                next_smallest = i\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #n is an int, p is a palindrome of n, and d is the palindrome with digits in that order.\n    n = num\n    p = int(str(n)[::-1])\n    d = int(str(n)[::-1][::-1])\n    #go through the digits of n\n    for i in range(n,0,-1):\n        #digits in the n have lowest values so we will use that to find the next palindrome.\n        if(d % i == 0):\n            d = d // i\n        #if the values of n and d have a single digit, then we have a palindrome.\n        if(n % i == 0):\n            n = n // i\n            break\n    return (n,d)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #loop through from the end\n    end = num\n    for i in range(end-1,0,-1):\n        if (num%i == 0):\n            #if this number isn't even, it's not a palindrome\n            if (num/i!= i):\n                #if it's not even, multiply the number by the number of the next smaller number\n                if (num/i < i):\n                    end = i\n                    break\n                #if the number is odd, multiply the number by the number of the next smaller number\n                else:\n                    end = i\n                    break\n            #if this number is even, it's a palindrome\n            else:\n                end = i\n                break\n    #if it's not even, multiply the number by the number of the next smallest number\n    if (end < num):\n        end = num\n    return end\n    "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = -1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize an array.\n    new_num = num\n    # Find the largest number among array.\n    # Is this odd or even?\n    while (num!= 0):\n        if num%2 == 0:\n            return num - 1\n        else:\n            num = num // 10\n    # Find the sum of the odd numbers.\n    # Is this odd or even?\n    new_num = 0\n    for i in range(num, 2, -1):\n        new_num += i\n    return new_num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome_count = 0\n    while num % 10!= 0:\n        palindrome_count += 1\n        num = num // 10\n    palindrome_count += 1\n    return num+1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 1\n    right = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # case 1: when arr[0] is present at index 0\n    if len(arr) <= k:\n        return arr[0]\n    else:\n        # case 2: when arr[k] is present at index k\n        if arr[k] == 0:\n            return kth_element(arr, k + 1)\n        return arr[k]\n        \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low, high = 0, len(arr) - 1\n    \n    # if the array is empty\n    if k == 0:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # If there are no elements in the array, return -1\n    if len(arr) == 0:\n        return -1\n    # Find the kth element in the array\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[int(k/2)]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    assert arr, 'The array is empty!'\n    assert k > 0, 'k must be > 0'\n    assert len(arr) > 0, 'The array is empty'\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if (k < arr[i]):\n            return i + 1\n        \n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < 1:\n        return -1\n    \n    if k > len(arr):\n        return -1\n    \n    mid = len(arr)//2\n    if arr[mid] == k:\n        return mid\n    elif arr[mid] > k:\n        return kth_element(arr[:mid], k)\n    else:\n        return kth_element(arr[mid+1:], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Code here\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if '_' not in word:\n        return word\n    else:\n        first_letter = word.split('_')[0]\n        final_word = word.split('_')[1]\n        return first_letter + final_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # TODO: convert the snake case string into camel case string\n    return word.lower().replace('-','').replace('_','')\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # If the string is empty, return the string unchanged\n    if not word:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # your code goes here\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:].lower()\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    #Base case\n    if n == m:\n        return n\n    if n < m:\n        n = m\n    if n % 2 == 0:\n        return eulerian_num(n//2, m) + m\n    else:\n        return eulerian_num(n, m-1) + m + eulerian_num(n//2, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def modpow(x, n):\n        return pow(x,n,m)\n    if m == 1:\n        return n+1\n    if m == n:\n        return 1\n    \n    if m%2==0:\n        return modpow(modpow(x, m/2),m-1)/modpow(x, m/2)\n    else:\n        return modpow(modpow(x, m/2),m-1)/modpow(x, m/2)\n    \ndef cliques(n):\n    '''\n    Find the number of cliques in a(n, n).\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n%2==0:\n        return cliques(n/2)+cliques(n/2)\n    else:\n        return cliques(n/2)+cliques(n/2)\n    \ndef cnf(n):\n    '''\n    Find the CNF in a(n, n).\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n%2==0:\n        return 1+cnf(n/2)\n    else:\n        return 1+cnf(n/2)+cnf(n/2)\n        \ndef parse(string):\n    '''\n    Parse string into a list of integers.\n    '''\n    return [int(i) for i in string.split()]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # if n<m then return none\n    if n < m : return None \n    \n    # if n==m return 1\n    if n==m: \n        return 1\n    \n    # find the smallest element in m(n) subtree\n    ans = [1]\n    for i in range(1, m) : \n        # check if i has all children\n        # if n<0, then it is the smallest element\n        if n%i == 0 : \n            ans.append(i)\n            # if n is even, then it is the \n            # smallest element since it is the \n            # largest element\n            if n//i == i : \n                return min(ans)\n    return None \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    d = n - 1\n    l = 0\n    while True:\n        l = (l + d) % m\n        d = (d + (d + l)) % m\n        if l == d:\n            return l\n    \ndef is_eulerian(m, n): \n    '''\n    Write a function that returns whether the Eulerian number \n    a(n, m) is a valid Eulerian number.\n    '''\n    if n == m:\n        return True\n    else:\n        if n == (m - 1) // 2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    total_num = n + m\n    if n == m:\n        return n\n    else:\n        mid = n + m//2\n        if mid == n or mid == m:\n            return 0\n        else:\n            if (mid - 1)%(m-1) == 0:\n                return (n*mid)%total_num\n            else:\n                return (mid*n)%total_num\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Write your code here\n    matrix = list(range(1, n+1))\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i]!= matrix[j] and matrix[j]!= matrix[i]:\n                matrix[j] = matrix[j] ^ matrix[i]\n    return matrix[-1]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    print(\"Eulerian number is:\")\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    eulerian = []\n    for i in range(0, n):\n        if i == 0:\n            eulerian.append(i)\n        else:\n            eulerian.append(eulerian[i-1] - i)\n    return eulerian\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    import math\n    \n    if n == m:\n        return n\n    else:\n        return eulerian_num(n, m) + m\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    m_prime = m\n    if(m % 2!= 0): \n        m_prime = m + 1\n    m_prime_loop = m_prime\n    modulus = 1\n    for i in range(n, m): \n        modulus = modulus * m_prime_loop % n \n        m_prime_loop = (modulus * m_prime_loop) % n\n    return modulus\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in input_list:\n        result.append(list(map(lambda x: x.strip(), sublist)))\n    result.sort(key = lambda x: len(x))\n    return result"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Your code here\n    output = []\n    sublist_length = 0\n    for sublist in input_list:\n        for sublist_item in sublist:\n            output.append(sublist_item)\n        sublist_length += 1\n    for i in range(len(output)):\n        if len(output[i]) <= sublist_length:\n            continue\n        for j in range(sublist_length):\n            output[i][j] = output[i][j].lower()\n    return output\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your code here\n    new_list=[]\n    for sublist in input_list:\n        new_list.append(sorted(sublist))\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for index, item in enumerate(input_list):\n        for element in item:\n            new_list.append(element)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        for item in sublist:\n            new_list.append(item)\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # write your code here\n    sublists = []\n    for sublist in input_list:\n        newlist = []\n        for num in sublist:\n            newlist.append(num)\n        sublists.append(newlist)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index, row in enumerate(input_list):\n        for element in row:\n            input_list[index].append(element.rstrip())\n    input_list.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not input_list:\n        return None\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not isinstance(input_list, list):\n        raise TypeError(\"'input_list' must be a list.\")\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_list(input_list):\n        for i in range(len(input_list)):\n            for j in range(len(input_list[i])):\n                if input_list[i][j] =='':\n                    input_list[i][j] = input_list[i][j].upper()\n        return input_list\n    return sort_list(input_list)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for element in lst:\n        if element:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in lst:\n        if i == True:\n            counter +=1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Need to implement this function')\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Create a loop\n    for i in range(0, len(lst)):\n        if lst[i] == True:\n            lst[i] = 't'\n            lst[lst.index(True)] = 'f'\n    return lst\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return [lst.count(x) for x in set(lst)]\n    #return len(lst)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_tup[0] == 'None':\n        print('The given list is empty!')\n    else:\n        if len(test_list) == 1:\n            test_list.append(test_tup[0])\n            print(test_list)\n        else:\n            test_tup[0] = test_list\n            test_list = []\n            test_list.append(test_tup[0])\n            print(test_list)\n            add_lists(test_list, test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_list == [] and test_tup == ():\n        return []\n    else:\n        test_list.append(tuple(test_tup))\n        return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Write your code here.\n    new_test_list = []\n    for element in test_tup:\n        new_test_list.append(element)\n    test_list.extend(new_test_list)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].append(test_tup[i])\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Write your code here\n    return (test_list, test_tup)\n    \ndef test_function(test_list, test_tup):\n    print(\"Pass\" if ((test_list, test_tup) == add_lists(test_list, test_tup)) else \"Fail\")\n    \ntest_function([1,2,3,4,5], (1,2,3,4,5))\ntest_function([1,2,3,4,5], (3,4,5,1,2))"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    # your code here\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO: Append the list to the given list using the tuple as the base\n    # and then append it to the given list.\n    # for list in test_list:\n    #     test_tup.append(list)\n    return\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not test_list:\n        raise ValueError(\"empty list\")\n    if not test_tup:\n        raise ValueError(\"empty tuple\")\n    \n    #print(\"TUP:\", test_tup)\n    #print(\"LIST:\", test_list)\n    \n    add_list = (test_tup,) + test_list\n    return add_list\n    \ndef add_lists_tuple(test_list, test_tup):\n    '''\n    Write a function to append the given tuple to the given list.\n    '''\n    if not test_list:\n        raise ValueError(\"empty list\")\n    if not test_tup:\n        raise ValueError(\"empty tuple\")\n    \n    #print(\"TUP:\", test_tup)\n    #print(\"LIST:\", test_list)\n    \n    add_list = (test_tup,) + test_list\n    return add_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(list(set(num1) | set(num2) | set(num3)) + sorted(num1 + num2 + num3))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    num1_sorted = sorted(num1)\n    num2_sorted = sorted(num2)\n    num3_sorted = sorted(num3)\n    i = 0\n    j = 0\n    k = 0\n    while(i < len(num1_sorted) and j < len(num2_sorted) and k < len(num3_sorted)):\n        if(num1_sorted[i] < num2_sorted[j] and num2_sorted[j] < num3_sorted[k]):\n            sorted_list.append(num1_sorted[i])\n            i += 1\n        elif(num1_sorted[i] > num2_sorted[j] and num2_sorted[j] > num3_sorted[k]):\n            sorted_list.append(num2_sorted[j])\n            j += 1\n        elif(num1_sorted[i] > num2_sorted[j] and num2_sorted[j] > num3_sorted[k]):\n            sorted_list.append(num2_sorted[j])\n            j += 1\n        elif(num1_sorted[i] < num2_sorted[j] and num2_sorted[j] < num3_sorted[k]):\n            sorted_list.append(num1_sorted[i])\n            i += 1\n        elif(num1_sorted[i] > num2_sorted[j] and num2_sorted[j] > num3_sorted[k]):\n            sorted_list.append(num2_sorted[j])\n            j += 1\n        else:\n            sorted_list.append(num3_sorted[k])\n            k += 1\n            i += 1\n    while(i < len(num1_sorted)):\n        sorted_list.append(num1_sorted[i])\n        i += 1\n    while(j < len(num2_sorted)):\n        sorted_list.append(num2_sorted[j])\n        j += 1\n    while(k < len(num3_sorted)):\n        sorted_list.append(num3_sorted[k])\n        k += 1\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for i in range(min(len(num1),len(num2),len(num3))):\n        if num1[i] < num2[i] and num1[i] < num3[i]:\n            merged_list.append(num1[i])\n        elif num2[i] < num1[i] and num2[i] < num3[i]:\n            merged_list.append(num2[i])\n        elif num3[i] < num1[i] and num3[i] < num2[i]:\n            merged_list.append(num3[i])\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted([num1,num2,num3])\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # define the three lists to merge\n    merged = []\n    i = 0\n    j = 0\n    k = 0\n    # calculate the result\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged.append(num2[j])\n            j += 1\n        elif num3[k] <= num1[i] and num3[k] <= num2[j]:\n            merged.append(num3[k])\n            k += 1\n    \n    # if any of the elements are in the third list\n    if i < len(num1):\n        merged += num1[i:]\n    elif j < len(num2):\n        merged += num2[j:]\n    elif k < len(num3):\n        merged += num3[k:]\n    # if any of the elements are in the third list\n    else:\n        merged += num3[i:]\n    # return the merged list\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num4=[]\n    num4.append(num1[0]+num2[0])\n    num4.append(num1[1]+num2[1])\n    num4.append(num1[2]+num2[2])\n    \n    print(num4)\n    return num4\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    merged_list=[]\n    while len(num1)!= 0 and len(num2)!= 0 and len(num3)!= 0:\n        if num1[0] < num2[0] and num3[0] < num2[0]:\n            merged_list.append(num1[0])\n            heapq.heapreplace(num1,num1[0])\n        elif num2[0] < num1[0] and num3[0] < num1[0]:\n            merged_list.append(num2[0])\n            heapq.heapreplace(num2,num2[0])\n        else:\n            merged_list.append(num3[0])\n            heapq.heapreplace(num3,num3[0])\n    if len(num1)!= 0:\n        merged_list.extend(num1[1:])\n    if len(num2)!= 0:\n        merged_list.extend(num2[1:])\n    if len(num3)!= 0:\n        merged_list.extend(num3[1:])\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    l1 = []\n    l2 = []\n    l3 = []\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num3\n    if num2 == None:\n        return num3\n    if num3 == None:\n        return num1\n    if num1 < num2:\n        num1.append(num2)\n    else:\n        num2.append(num1)\n    if num2 < num3:\n        return merge_sorted_list(num2,num3,num1)\n    else:\n        return merge_sorted_list(num1,num2,num3)\n    \ndef merge_lists(num1,num2,num3):\n    '''\n    Write a function to merge the two sorted lists into a single list.\n    '''\n    if num1 == None:\n        return num3\n    if num2 == None:\n        return num3\n    if num1 < num2:\n        num1.append(num2)\n    else:\n        num2.append(num1)\n    if num2 < num3:\n        return merge_lists(num2,num3,num1)\n    else:\n        return merge_lists(num1,num2,num3)\n        \ndef merge_list(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single list.\n    '''\n    if len(num1) <= 1:\n        return num1\n    if len(num2) <= 1:\n        return num2\n    if num1[0] < num2[0]:\n        num1[0] = num1[0]\n        num2[0] = num2[0]\n    elif num2[0] < num1[0]:\n        num1[0] = num2[0]\n        num2[0] = num1[0]\n    return merge_list(num1[1:],num2[1:])\n        \ndef merge_dicts(d1,d2):\n    '''\n    Write a function to merge the two dictionaries into a single dictionary.\n    '''\n    if len(d1) <= 1:\n        return d1\n    if len(d2) <= 1:\n        return d2\n    return {**d1,**d2}\n    \ndef merge_dicts(d1,d2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if len(d1) <= 1:\n        return d1\n    if len(d2) <= 1:\n        return d2\n    return {**d1,**d2}\n    \ndef merge_heapq(a,b):\n    '''\n    Merge two heap dictionaries into a single dictionary.\n    '''\n    if len(a) < len(b):\n        return merge_heapq(b,a)\n    if a[0] < b[0]:\n        a[0] = a[0]\n    else:\n        a[0] = b[0]\n    a.sort()\n    b.sort()\n    return a+b\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1)>len(num2) and len(num2)>len(num3):\n        num3=num1\n    elif len(num1)>len(num3):\n        num3=num1\n    elif len(num2)>len(num3):\n        num3=num2\n    else:\n        num3=num3\n    return num3\ndef merge_sorted_list_by_weight(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list using a weight\n    list. This function is similar to merge_sorted_list, but the weight list\n    is not sorted.\n    '''\n    if len(num1)>len(num2) and len(num1)>len(num3):\n        num3=num1\n    elif len(num1)>len(num3):\n        num3=num1\n    elif len(num2)>len(num3):\n        num3=num2\n    else:\n        num3=num3\n    weight=[]\n    for i in range(len(num1)):\n        if num1[i]<num3[i]:\n            weight.append(num1[i])\n        elif num1[i]>num3[i]:\n            weight.append(num3[i])\n        else:\n            weight.append(num1[i])\n    return weight\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    if(n==3):\n        return 5\n    if(n==4):\n        return 10\n    if(n==5):\n        return 20\n    if(n==6):\n        return 50\n    if(n==7):\n        return 100\n    if(n==8):\n        return 200\n    if(n==9):\n        return 500\n    if(n==10):\n        return 1000\n    if(n==11):\n        return 2000\n    if(n==12):\n        return 5000\n    if(n==13):\n        return 10000\n    if(n==14):\n        return 20000\n    if(n==15):\n        return 30000\n    if(n==16):\n        return 40000\n    if(n==17):\n        return 50000\n    if(n==18):\n        return 70000\n    if(n==19):\n        return 100000\n    if(n==20):\n        return 3000000\n    if(n==21):\n        return 4000000\n    if(n==22):\n        return 6000000\n    if(n==23):\n        return 8000000\n    if(n==24):\n        return 10000000\n    if(n==25):\n        return 3200000\n    if(n==26):\n        return 4200000\n    if(n==27):\n        return 5200000\n    if(n==28):\n        return 7200000\n    if(n==29):\n        return 1000000\n    if(n==30):\n        return 3000000000\n    if(n==31):\n        return 4000000000\n    if(n==32):\n        return 6000000000\n    if(n==33):\n        return 100000000\n    if(n==34):\n        return 3000000000\n    if(n==35):\n        return 4000000000\n    if(n==36):\n        return 6000000000\n    if(n==37):\n        return 100000000000\n    if(n==38):\n        return 3000000000\n    if(n==39):\n        return 4000000000\n    if(n==40):\n        return 6000000000\n    if(n==41):\n        return 100000000000\n    if(n==42):\n        return 3000000000\n    if(n==43):\n        return 4000000000\n    if(n==44):\n        return 6000000000\n    if(n==45):\n        return 100000000000\n    if(n==46):\n        return 3000000000\n    if(n==47):\n        return 4000000000\n    if(n==48):\n        return 6000000000\n    if(n==49):\n        return 100000000000\n    if(n==50):\n        return 3000000000\n    if(n==51):\n        return 4000000000\n    if(n==52):\n        return 6000000000\n    if(n==53):\n        return 100000000000\n    if(n==54):\n        return 3000000000\n    if(n==55):\n        return 4000000000\n    if(n==56):\n        return 6000000000\n    if(n==57):\n        return 100000000000\n    if(n==58):\n        return 3000000000\n    if(n==59):\n        return 4000000000\n    if(n==60):\n        return 6000000000\n    if(n==61):\n        return 100000000000\n    if(n==62):\n        return 3000000000\n    if(n==63):\n        return 4000000000\n    if(n==64):\n        return 6000000000\n    if(n==65):\n        return 100000000000\n    if(n==66):\n        return 3000000000\n    if(n==67):\n        return 4000000000\n    if(n==68):\n        return 6000000000\n    if(n==69):\n        return 100000000000\n    if(n==70):\n        return 3000000000\n    if(n==71):\n        return 4000000000\n    if(n==72):\n        return 6000000000\n    if(n==73):\n        return 100000000000\n    if(n==74):\n        return 3000000000\n    if(n==75):\n        return 4000000000\n    if(n==76):\n        return 6000000000\n    if(n==77):\n        return 100000000000\n    if(n==78):\n        return 3000000000\n    if(n==79):\n        return 4000000000\n    if(n==80):\n        return 6000000000\n    if(n==81):\n        return 100000000000\n    if(n==82):\n        return 3000000000\n    if(n==83):\n        return 4000000000\n    if(n==84):\n        return 6000000000\n    if(n==85):\n        return 100000000000\n    if(n==86):\n        return 3000000000\n    if(n==87):\n        return 4000000000\n    if(n==88):\n        return 6000000000\n    if(n==89):\n        return 100000000000\n    if(n==90):\n        return 3000000000\n    if(n==91):\n        return 4000000000\n    if(n==92):\n        return 6000000000\n    if(n==93):\n        return 100000000000\n    if(n==94):\n        return 3000000000\n    if(n==95):\n        return 4000000000\n    if(n==96):\n        return 6000000000\n    if(n==97):\n        return 100000000000\n    if(n==98):\n        return 3000000000\n    if(n==99):\n        return 4000000000\n    if(n==100):\n        return 6000000000\n    if(n==101):\n        return 100000000000\n    if(n==102):\n        return 3000000000\n    if(n==103):\n        return 4000000000\n    if(n==104):\n        return 6000000000\n    if(n==105):\n        return 100000000000\n    if(n==106):\n        return 3000000000\n    if(n==107):\n        return 4000000000\n    if(n==108):\n        return 6000000000\n    if(n==109):\n        return 100000000000\n    if(n==110):\n        return 3000000000\n    if(n==111):\n        return 4000000000\n    if(n==112):\n        return 6000000000\n    if(n==113):\n        return 100000000000\n    if(n==114):\n        return 3000000000\n    if(n==115):\n        return 4000000000\n    if(n==116):\n        return 6000000000\n    if(n==117):\n        return 100000000000\n    if(n==118):\n        return 3000000000\n    if(n==119):\n        return 4000000000\n    if(n==120):\n        return 6000000000\n    if(n==121):\n        return 100000000000\n    if(n==122):\n        return 3000000000\n    if(n==123):\n        return 4000000000\n    if(n==124):\n        return 6000000000\n    if(n==125):\n        return 100000000000\n    if(n==126):\n        return 3000000000\n    if(n==127):\n        return 4000000000\n    if(n==128):\n        return 6000000000\n    if(n==129):\n        return 100000000000\n    if(n==130):\n        return 3000000000\n    if(n==131):\n        return 4000000000\n    if(n==132):\n        return 6000000000\n    if(n==133):\n        return 100000000000\n    if(n==134):\n        return 3000000000\n    if(n==135):\n        return 4000000000\n    if(n==136):\n        return 6000000000\n    if(n==137):\n        return 100000000000\n    if(n==138):\n        return 3000000000\n    if(n==139):\n        return 4000000000\n    if(n==140):\n        return 6000000000\n    if(n==141):\n        return 100000000000\n    if(n==142):\n        return 3000000000\n    if(n==143):\n        return 4000000000\n    if(n==144):\n        return 6000000000\n    if(n==145):\n        return 100000000000\n    if(n==146):\n        return 3000000000"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s.replace(\"0\",\" \")\n    s=s.replace(\"1\",\" \")\n    s=s.replace(\"1\",\"x\")\n    s=s.replace(\"0\",\"x\")\n    s=s.replace(\"1\",\"0\")\n    if s[0]==\"x\":\n        s=s[1:]\n    if n%2==0:\n        print(int(s))\n    else:\n        print(int(s)+1)\n    return int(s)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i = s[0]\n    cnt = 1\n    for j in range(n):\n        if s[j] == i:\n            cnt += 1\n        else:\n            break\n    return cnt\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    o=[]\n    i=0\n    while len(s)!=n+i:\n        i+=1\n        o.append(int(s[len(s)-i:]))\n    return len(o)\n    "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) <= n:\n        return 0\n    else:\n        return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2)\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    if len(s) <= n:\n        return 0\n    else:\n        return even_Equivalent(s,n//2) + even_Equivalent(s,n//2) + 1\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return odd_numbers(s,n)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd = 0\n    for i in range(0, n+1):\n        odd += s.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans = 0\n    if s == \"\":\n        return 0\n    if len(s) == 1:\n        return 1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s_len = len(s)\n    res = 0\n    for i in range(s_len):\n        if (s[i] == '1'):\n            res += 1\n    if (res % 2 == 0):\n        return int(res/2)\n    else:\n        return int(res/2) - 1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd=0\n    for x in range(n):\n        odd+=s.count('1')\n    return odd\ndef even_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even=0\n    for x in range(n):\n        even+=s.count('0')\n    return even\ndef max_Substring(s,n):\n    '''\n    Write a python function to find the maximum substring of a given string that can be composed of any number of unique characters.\n    '''\n    chars=set(s)\n    max=0\n    for i in range(len(s)):\n        if(s[i:i+len(chars)] in chars):\n            max+=len(s[i:i+len(chars)])\n        \n    return max\ndef min_Substring(s,n):\n    '''\n    Write a python function to find the minimum substring of a given string that can be composed of any number of unique characters.\n    '''\n    chars=set(s)\n    min=0\n    for i in range(len(s)):\n        if(s[i:i+len(chars)] in chars):\n            min+=len(s[i:i+len(chars)])\n        \n    return min\n    \ndef is_valid_string(s):\n    '''\n    Write a python function to determine whether a given string is a valid string or not.\n    '''\n    valid=True\n    for i in range(len(s)):\n        if s[i]!= 'a' and s[i]!= 'e' and s[i]!= 'i' and s[i]!= 'o' and s[i]!= 'u' and s[i]!= 'y' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 'x' and s[i]!='s' and s[i]!= 't' and s[i]!= 'u' and s[i]!= 'w' and s[i]!= 'r' and s[i]!= 't' and s[i]!='m' and s[i]!= 'f' and s[i]!= 'h' and s[i]!= 'c' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'n' and s[i]!= 'b' and s[i]!= 'u' and s[i]!= 'a' and s[i]!= 't' and s[i]!='s' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 'g' and s[i]!='m' and s[i]!= 'f' and s[i]!= 'h' and s[i]!= 'c' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'n' and s[i]!= 'b' and s[i]!= 'u' and s[i]!= 'c' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'n' and s[i]!= 'b' and s[i]!= 'u' and s[i]!= 'c' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'n' and s[i]!= 'b' and s[i]!= 'u' and s[i]!= 'c' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 'w' and s[i]!= 't' and s[i]!='m' and s[i]!= 'f' and s[i]!= 'h' and s[i]!= 'c' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'n' and s[i]!= 'b' and s[i]!= 'u' and s[i]!= 'c' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'n' and s[i]!= 'b' and s[i]!= 'u' and s[i]!= 'c' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'n' and s[i]!= 'b' and s[i]!= 'u' and s[i]!= 'g' and s[i]!= 'f' and s[i]!= 'h' and s[i]!='m' and s[i]!= 'f' and s[i]!= 'h' and s[i]!= 'n' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'n' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!='m' and s[i]!= 'c' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'f' and s[i]!= 'h' and s[i]!= 'g' and s[i]!='m' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 'w' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 'r' and s[i]!= 't' and s[i]!= 'w' and s[i]!='m' and s[i]!= 'f' and s[i]!= 'h' and s[i]!='m' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 'r' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 'r' and s[i]!= 'r' and s[i]!= 'r' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 't' and s[i]!= 'w' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 't' and s[i]!='m' and s[i]!= 'f' and s[i]!= 'h' and s[i]!= 'g' and s[i]!='m' and s[i]!= 'f' and s[i]!= 'h' and s[i]!= 'g' and s[i]!= 'j' and s[i]!= 'l' and s[i]!= 'r' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 't' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 'r' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 'w' and s[i]!= 't' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 'r' and s[i]!= 't' and s[i]!= 't' and s[i]!= 'w' and s[i]!= 't' and s[i]!= 't' and s[i]!= 'r' and s[i]!= 'r' and s[i]!= 't' and s[i]!= 't' and s[i]!= 'w' and s[i]!= 't' and s[i]!='m' and s[i]!= 'f' and s[i]!= 'h' and s[i]!= 'c' and s"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for element in nestedlist:\n        if isinstance(element, list) and len(element) > 1:\n            common.append(element[0])\n        else:\n            if element not in common:\n                common.append(element)\n    return common\n    "
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist) == list:\n        # create a single list to store all the elements\n        nestedlist_1 = []\n        # traverse through each element in list\n        for elem in nestedlist:\n            # add all elem to list if not already present\n            if elem not in nestedlist_1:\n                nestedlist_1.append(elem)\n        # return only the elements that were found\n        return nestedlist_1\n    else:\n        return []\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_elements(lst1, lst2):\n        '''\n        Code to return the common elements in given nested lists.\n        '''\n        if len(lst1) == len(lst2):\n            for i in range(len(lst1)):\n                if lst1[i] == lst2[i]:\n                    return lst1[i]\n            return False\n        else:\n            return False\n    return common_elements(nestedlist, nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    \n    common_elements = []\n    nested_list = nestedlist.copy()\n    \n    for i in range(len(nested_list)):\n        if nested_list[i] == nested_list[0]:\n            common_elements.append(nested_list[i])\n        else:\n            common_elements.append(nested_list[i])\n            nested_list = nested_list[1:]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_element = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i == j:\n                common_element.append(nestedlist[i][j])\n    print(common_element)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist==None:\n        return []\n    common_list=[]\n    for sublist in nestedlist:\n        if sublist not in common_list:\n            common_list.append(sublist)\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) <= 1:\n        return []\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    nested_list_iterator = nestedlist.copy()\n    for n_list in nested_list_iterator:\n        if isinstance(n_list, list):\n            common_elements.extend(n_list)\n        else:\n            common_elements.append(n_list)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lst = []\n    for i in nestedlist:\n        lst.extend(i)\n    return lst\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = sorted(nestedlist)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Check if there's only 1 digit.\n    if text[0] in '123456789':\n        if len(text) == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text[0] in ['0','1']:\n        text = text[1:]\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if text.isdigit():\n            return True\n        else:\n            raise ValueError\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            for k in range(0, len(list1[i][j])):\n                if list1[i][j][k]!= '':\n                    return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if list1:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            for k in j:\n                if k == \"\":\n                    return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return 0\n    return 1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            if (list1[i][j] == 'None'):\n                return False\n            else:\n                pass\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if len(i) > 0:\n            empty = False\n            break\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(True if dict1 == {} else False for dict1 in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list_len = len(list1)\n    \n    if list_len == 0:\n        return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # your code here\n    return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    for num in nums:\n        num = num.lstrip(\"-+\")\n        if len(num) < 4:\n            num = \"+0\" + num\n        return int(num)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    for num in nums:\n        i += num\n    return i\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    temp = 0\n    for x in nums:\n        temp += x\n    return temp\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # for i in range(len(nums)):\n    #     nums[i] = int(nums[i])\n    return (sum(nums))\n    #     for i in range(len(nums)):\n    #         nums[i] = int(nums[i])\n    #     return int(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    temp=[]\n    for num in nums:\n        temp.append(int(num))\n    return sum(temp)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(i) for i in nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # case\n    if len(nums) == 0:\n        return 0\n    \n    # loop\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n    \n    # return\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    assert test_list, \"Please provide a list of lists.\"\n    assert type(test_list) == list, \"Must be a list of lists.\"\n    assert len(test_list) > 0, \"List must not be empty.\"\n    float_list = []\n    for item in test_list:\n        assert type(item) == list, \"List must be a list of lists.\"\n        float_list.append([float(item[i]) for i in range(len(item))])\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # pass\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #check that each item is a list\n    try:\n        for i in test_list:\n            for j in i:\n                if isinstance(j, list):\n                    for k in j:\n                        if isinstance(k, float):\n                            pass\n                        else:\n                            raise ValueError(f\"could not convert {k} to float\")\n                else:\n                    raise ValueError(f\"could not convert {j} to float\")\n    except ValueError as ve:\n        print(ve)\n        print(type(test_list))\n        print(test_list)\n        raise ValueError(f\"could not convert {i} to float\")\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in test_list:\n        for item in element:\n            if type(item) == list:\n                for item2 in item:\n                    if type(item2) == float:\n                        item = item2\n                        break\n            if type(item) == list:\n                for item3 in item:\n                    if type(item3) == float:\n                        item2 = item3\n                        break\n    return item\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_float = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(len(test_list[i][j])):\n                if type(test_list[i][j][k])!= list:\n                    test_list[i][j][k] = float(test_list[i][j][k])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # typecast\n    test_list = test_list[:]\n    for item in test_list:\n        try:\n            float(item)\n            test_list.remove(item)\n        except:\n            pass\n    # return\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # convert every string element to float\n    test_list = [float(i) for i in test_list]\n    # convert strings to floats and return\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_float = []\n    for row in test_list:\n        test_list_float += [list(map(float, row))]\n    return test_list_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(el) for el in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for lst in test_list:\n        new_list = []\n        for el in lst:\n            try:\n                float_val = float(el)\n                new_list.append(float_val)\n            except ValueError:\n                continue\n        result.append(new_list)\n    return result\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [ i for i in string.split() if i!= '' ]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split(' ')\n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split(' ')\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    #return string.split()\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    "
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = list(string.split())\n    return list\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[count]:\n            count += 1\n        else:\n            break\n    if count == len(arr):\n        return arr[count]\n    else:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    mid = len(arr) // 2\n    left = 0\n    right = mid\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid + 1]:\n            return arr[mid + 1]\n        if arr[mid] > arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return arr[mid + 1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        idx = abs(arr[i])\n        if idx == 1:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize count array\n    count = [0 for i in range(len(arr))]\n    # loop through the array\n    for i in range(len(arr)):\n        # if count[i] == 1:\n        #     print(arr[i])\n        #     print(count)\n        #     exit()\n        # count[i] += 1\n        # print(count)\n        if arr[i] == arr[i-1] and arr[i]!= arr[i-2] and arr[i]!= arr[i-3]:\n            count[i] = 1\n    # print(count)\n    for i in range(len(count)):\n        if count[i] == 1:\n            print(arr[i])\n    return arr\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            count += 1\n    if count == 1:\n        return arr[i]\n    else:\n        return -1\n    \ndef count(arr):\n    '''\n    Write a python function that returns the number of unique values in the array, sorted from low to high.\n    '''\n    count = 0\n    count_arr = []\n    for i in range(len(arr)):\n        if arr[i] not in count_arr:\n            count_arr.append(arr[i])\n    return len(count_arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    from collections import Counter\n    num_of_numbers = len(arr)\n    if num_of_numbers == 0:\n        return \"0\"\n    # arr.sort()\n    # print(arr)\n    counter = Counter(arr)\n    # print(counter)\n    # print(arr[0])\n    # for i, j in enumerate(arr):\n    #     if counter[j] == 1:\n    #         arr[i] = j\n    # return arr[0]\n    for i in range(0, num_of_numbers):\n        if counter[arr[i]] == 1:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[count]:\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # find the first occurence\n    # if the length of arr is 1, it means the length of the array is 1\n    # if the length of arr is 0, it means the array is sorted, meaning all elements are in order\n    # else, the length of arr is greater than 1, it means the length of arr is not sorted, meaning the elements are in order\n    # (this means that there are no duplicates)\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        first = arr[0]\n        occ = 0\n        for i in range(1, len(arr)):\n            if arr[i] == first:\n                occ += 1\n            else:\n                break\n        if occ == 1:\n            return first\n        else:\n            return first\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    h=[]\n    h.append(arr[0])\n    for i in range(1,len(arr)):\n        if arr[i] not in h:\n            h.append(arr[i])\n        else:\n            h.remove(arr[i])\n    for i in range(len(h)):\n        arr.remove(h[i])\n    return h[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    if len(list1) == 2:\n        return list1[0][0] * list1[1][0] + list1[1][1] * list1[0][0]\n    if len(list1) == 3:\n        return max(list1[0][0] * list1[1][0] * list1[2][0], \n            list1[0][1] * list1[1][1] * list1[2][1])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0][0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_product = 0\n    \n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)):\n            if list1[i][0] > list1[j][1]:\n                if max_product < abs(list1[i][0] - list1[j][1]):\n                    max_product = abs(list1[i][0] - list1[j][1])\n            if list1[i][1] > list1[j][0]:\n                if max_product < abs(list1[i][1] - list1[j][0]):\n                    max_product = abs(list1[i][1] - list1[j][0])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0]\n    else:\n        maximum = 0\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                if i!= j:\n                    if list1[i][0] > list1[j][0]:\n                        maximum = max(maximum, list1[j][0] * list1[i][0])\n                    elif list1[i][0] < list1[j][0]:\n                        maximum = max(maximum, list1[i][0] * list1[j][0])\n        return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_p = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][1] > list1[j][1]:\n                if list1[i][1] > max_p:\n                    max_p = list1[i][1]\n                if list1[j][1] > max_p:\n                    max_p = list1[j][1]\n            \n    return max_p"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # convert tuple to list\n    a_list = [list1[i][0] for i in range(len(list1))]\n    b_list = [list1[i][1] for i in range(len(list1))]\n    # construct list of max\n    result = [[max(a_list[i], b_list[i]), i] for i in range(len(a_list))]\n    # return max\n    return max(result, key = lambda x: x[0])[1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(list(zip(*list1)))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product *= (list1[i][0] + list1[j][0])\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in list1:\n        for j in list1:\n            if i<j:\n                if i!=j:\n                    max_product=max(i,j)\n                    break\n                else:\n                    continue\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    for i in range(1, limit + 1):\n        if i == 1 or i == 2:\n            amicable_numbers.append(i)\n        else:\n            for j in range(i + 1, limit + 1):\n                if j % i == 0:\n                    amicable_numbers.append(j)\n    amicable_numbers_sum = sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for x in range(1,limit+1):\n        if x not in amicable_numbers:\n            if is_amicable(x):\n                amicable_numbers.append(x)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def amicable_numbers(num):\n        amicable_numbers = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                amicable_numbers.append(i)\n                num = num // i\n        if num == 1:\n            amicable_numbers.append(num)\n        return amicable_numbers\n    return sum(amicable_numbers(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s=0\n    for i in range(2,limit):\n        if i % 2==0:\n            s += i\n            if i % 3==0:\n                s -= i\n        elif i % 3==0:\n            s += i\n    return s\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amigo = 0\n    for i in range(limit+1):\n        if i!= 0 and i % 5 == 0:\n            sum_amigo += i\n    return sum_amigo\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    numbers = []\n    for i in range(1,limit):\n        if sum % i == 0:\n            numbers.append(i)\n            if i % 2 == 0:\n                sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_num = 0\n    num_dict = {}\n    for n in range(1, limit):\n        if n not in num_dict:\n            num_dict[n] = 0\n        num_dict[n] = 1\n        for m in range(n):\n            if n!= m and n%m == 0:\n                num_dict[n] = num_dict[n] + num_dict[m]\n                print(num_dict[n], num_dict[m], num_dict[n-m])\n        total_num += num_dict[n]\n    print(\"The sum of all the amicable numbers is\", total_num)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) + abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_r(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_r_s(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) + abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_s(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a))\n    except:\n        return 'Error'\ndef angle_complex_s_r(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_r_q(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) + abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_q(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_s_q(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) + abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_s_q_r(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_r_z(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_z(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_z_r(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_r_u(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) + abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_u(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) + abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_u_r(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_r_v(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_v(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) + abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_v_r(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_v_r_r(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) + abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_v_r_s(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) - abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_v_s(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex(a,b)\n        a = c.real\n        b = c.imag\n        return abs(cmath.phase(a)) + abs(cmath.phase(b))\n    except:\n        return 'Error'\ndef angle_complex_v_s_r(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        c = complex("
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a==0 and b==0:\n        return 0\n    elif a==0 and b>0:\n        return (math.acos(b/a) % (2*math.pi))\n    elif a==0 and b<0:\n        return (math.acos(-b/a) % (2*math.pi))\n    elif b==0:\n        return (math.atan2(a,b))\n    else:\n        return (math.acos(a/b)-math.acos(b/a))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    \n    if(a == 0.0):\n        return 0.0\n    \n    elif(b == 0.0):\n        return acos(a/abs(a))\n    \n    else:\n        try:\n            if(cmath.pi*2*b > cmath.acos(abs(a)**0.5)):\n                return acos(a/abs(a))\n            else:\n                return acos(a/abs(b))\n        except:\n            print(\"Input is not a complex number.\")\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    phi = a.imag*b.imag\n    theta = a.real*b.imag - a.imag*b.real\n    return cmath.phase(phi + cmath.polar(theta))\ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    theta = cmath.phase(a.imag)\n    return theta\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = acos(b.real**2 + b.imag**2)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = complex(0,0)\n    angle = a + b*1j\n    angle = angle.real\n    angle = angle.imag\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    #Check whether the inputs are complex\n    if (a.imag==b.imag or a.real==b.real):\n        print(\"Complex Numbers\")\n    else:\n        c=cmath.complex(a.real,a.imag)\n        #If the inputs are real numbers, convert them to real numbers.\n        #If the inputs are complex numbers, convert them to complex numbers.\n        if (a.real==0):\n            print(\"Convert Real Numbers\")\n            c=c.real\n        if (a.imag==0):\n            print(\"Convert Imaginary Numbers\")\n            c=c.imag\n        #If both inputs are real numbers, convert them to complex numbers.\n        if (b.imag==0):\n            print(\"Convert Imaginary Numbers\")\n            c=c.imag\n        if (b.real==0):\n            print(\"Convert Real Numbers\")\n            c=c.real\n        #If the inputs are real numbers, convert them to complex numbers.\n        if (c.real==0):\n            print(\"Convert Imaginary Numbers\")\n            c=c.imag\n        if (c.imag==0):\n            print(\"Convert Real Numbers\")\n            c=c.real\n        #If the inputs are complex numbers, convert them to real numbers.\n        if (c.imag!=0):\n            print(\"Convert Imaginary Numbers\")\n            c=c.real\n        if (c.real!=0):\n            print(\"Convert Real Numbers\")\n            c=c.imag\n        #If both inputs are complex numbers, convert them to real numbers.\n        if (c.imag!=0):\n            print(\"Convert Imaginary Numbers\")\n            c=c.real\n        if (c.real!=0):\n            print(\"Convert Real Numbers\")\n            c=c.imag\n        #If both inputs are real numbers, convert them to complex numbers.\n        if (c.imag!=0):\n            print(\"Convert Imaginary Numbers\")\n            c=c.real\n        if (c.real!=0):\n            print(\"Convert Real Numbers\")\n            c=c.imag\n        #If both inputs are real numbers, convert them to complex numbers.\n        if (c.imag!=0):\n            print(\"Convert Imaginary Numbers\")\n            c=c.real\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    if (c.real==0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If the inputs are imag numbers, return the angle of the complex numbers.\n    elif (c.imag==0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If both inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real==0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If the inputs are complex numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If both inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If both inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If both inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If both inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If both inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.real!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all the inputs are real numbers, return the angle of the complex numbers.\n    elif (c.imag!=0):\n        print(\"Angle Complex\")\n        angle=angle_real(a,b)\n    #If all th"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a==b:\n        return 0\n    r1 = cmath.sqrt(a.real**2 + b.real**2)\n    r2 = cmath.sqrt(a.imag**2 + b.imag**2)\n    return acos(cmath.sqrt(r1**2 + r2**2))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a+1j*b\n    if c.imag == 0:\n        angle = 0\n    elif c.real == 0:\n        angle = 2*pi\n    else:\n        angle = acos(c.imag/c.real)*2*pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.acos(cmath.exp(1j*a*b))-1j*cmath.sin(a))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    print(string[:0:-1])\n    print(string[1:0:-1])\n    return len(string) - len(string[::-1])\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) < 2: \n        return 0\n    max = 0\n    for i in range(len(string)):\n        max = max(max, find_length(string[:i+1]))\n    return max + find_length(string[i+1:])\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == '':\n        return 0\n    #initialize first substring \n    substr = string[0]\n    count = 0\n    #loop through string and find the maximum length\n    for i in range(1,len(string)):\n        if substr[i] == '0' and string[i] == '1':\n            count+=1\n        elif substr[i] == '1' and string[i] == '0':\n            count-=1\n        else:\n            count = 0\n        #if the found length is greater than the max length\n        if count > len(substr) - 1:\n            return len(substr)\n        #increment the max length\n        count = 0\n    #no characters found, return max length\n    return len(substr)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    len_1 = 0\n    len_0 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            len_0 += 1\n        else:\n            len_1 += 1\n    return len_1 - len_0 \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    if string == \"\":\n        return \"no string\"\n    \n    length = len(string)\n    \n    count0 = 0\n    count1 = 0\n    \n    for i in range(1, length):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n    \n    max_diff = count0 - count1\n    \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diffs = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            diffs += 1\n        else:\n            diffs -= 1\n        if diffs > 0:\n            return diffs\n    return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    temp_string = string\n    temp_string = list(temp_string)\n    for i in range(len(temp_string)):\n        if temp_string[i] == \"0\":\n            temp_string[i] = \"1\"\n        else:\n            temp_string[i] = \"0\"\n    return(str(len(temp_string)) + \" - \" + str(sum(temp_string)))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    char_count = 0\n    for i in range(len(string)):\n        char = string[i]\n        if char == '0':\n            char_count += 1\n        else:\n            char_count -= 1\n    return char_count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == '': \n        return 0\n    elif string == '0': \n        return 1\n    else: \n        m = 0\n        n = 0\n        for i in range(len(string)): \n            if string[i] == '0': \n                n += 1\n            else: \n                m += 1\n        return m - n \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    elif len(string) == 1:\n        return 1\n    else:\n        # length = find_length(string[0:len(string)//2])\n        if string[0:len(string)//2] == string[::-1]:\n            length = find_length(string[0:len(string)//2]) + find_length(string[::-1])\n        else:\n            length = find_length(string[0:len(string)//2])\n        return len(string)//2 - length\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a==b):\n        return a\n    elif(a%b==0):\n        return a//b\n    else:\n        return b//a\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(a, b):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        raise TypeError(\"Invalid type\")\n    \n    else:\n        s = 0\n        for i in range(1,b+1):\n            if b % i == 0:\n                s += i\n        return s\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return None\n    a = abs(a)\n    b = abs(b)\n    if a < b:\n        a,b = b,a\n    cnt = 0\n    while a % b:\n        cnt += 1\n        a /= b\n        if cnt % 2 == 1:\n            return a + b\n    return a + b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0:\n        return 0\n    if b==0:\n        return 0\n    if a==b:\n        return 1\n    if a==b+1:\n        return 2**(a)\n    if a%2==0:\n        return sum(a//2,b)+sum(a//2,b+1)\n    if a%2==1:\n        return sum(a//2,b)+sum(a//2,b+1)+1\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def common(a,b): \n        return sum(a,b) // max(a,b)\n    return common(a,b)\n    \ndef solution(nums):\n    n=len(nums)\n    answer=[]\n    for i in range(1,n+1):\n        answer.append(sum(nums[:i]))\n    answer.sort()\n    return answer[n//2]"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if a==0 and b==0:\n        return 0\n    if b==0:\n        return a\n    if a%b==0:\n        return a//b+b+1\n    else:\n        return sum(a,b-1)+sum(a,b+1)\n        \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if not a:\n        print(\"A is not given\")\n        return False\n    if not b:\n        print(\"B is not given\")\n        return False\n    divisors = []\n    for i in range(1,a):\n        if (a % i) == 0:\n            divisors.append(i)\n    for j in range(1,b):\n        if (b % j) == 0:\n            divisors.append(j)\n    if len(divisors) == 0:\n        return False\n    for i in divisors:\n        for j in range(i, len(divisors)):\n            if divisors[j]!= i:\n                divisors[j] = False\n    sum = 0\n    for i in range(len(divisors)):\n        sum += divisors[i]\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #This function returns the sum of common divisors of two given numbers \n    #except for the numbers which are divisible by both of them. \n    \n    #If we are given two numbers as inputs, return their sum \n    #as a list, i.e. [sum(1,2), sum(3,4), sum(5,6)].\n    \n    if a>b: \n        a,b=b,a\n    \n    sum1=0\n    for i in range(1,b+1): \n        if a%i==0 and b%i==0: \n            sum1+=i \n    return sum1\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x < 0:\n        return \"Sorry, that's not an integer.\"\n    \n    elif y < 0:\n        return \"Sorry, that's not an integer.\"\n    \n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = x*y\n    return z\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Convert to ints\n    x = int(x)\n    y = int(y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    a = x\n    b = y\n    carry = 0\n    while a!= 0:\n        temp = a\n        a = b % 10\n        b = (b // 10) * 10\n        carry = a + b + carry\n        if carry > 9:\n            carry = carry % 10\n        else:\n            carry = 0\n    return carry\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for word in str:\n        if len(word) > n:\n            long.append(word)\n    return len(long)\n    \ndef add_ones(a, b):\n    '''\n    Adds a and b to a list.\n    '''\n    if type(a) is list:\n        for a1 in a:\n            if type(a1) is list:\n                for a2 in a1:\n                    a2.append(1)\n            else:\n                a.append(1)\n    elif type(a) is dict:\n        for a1 in a:\n            if type(a1) is list:\n                for a2 in a1:\n                    if type(a2) is dict:\n                        for a3 in a2:\n                            if a3 == None:\n                                a2.pop(a3)\n                            else:\n                                a2[a3] += 1\n                            if a3 not in a2:\n                                a2.pop(a3)\n                        a2 = list(a2.keys())\n                        a2.sort()\n            else:\n                if a1 == None:\n                    a1.append(1)\n                else:\n                    a1.append(1)\n    return a\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.lower().split() if len(word)>=n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = [str for str in str.split() if len(str) >= n]\n    return lst\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    letters = [char for char in str]\n    words = [word for word in letters]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # function to return a list\n    def find_words(str):\n        new_list = []\n        for i in str:\n            if len(i) >= n:\n                new_list.append(i)\n        return new_list\n    new_list = find_words(str)\n    return new_list\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Your code here\n    words = []\n    for w in str.split():\n        if len(w)>n:\n            words.append(w)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    answer = []\n    if len(str) < n:\n        return answer\n    if n == 0:\n        return answer\n    if n == 1:\n        return ['one']\n    if n == 2:\n        return ['two', 'three']\n    if n == 3:\n        return ['four', 'five','six','seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen','sixteen','seventeen', 'eighteen', 'nineteen', 'twenty', 'thirty', 'forty', 'fifty','sixty','seventy', 'eighty', 'ninety']\n    # list of words from a list of words\n    words = []\n    words.append('twenty')\n    words.append('thirty')\n    words.append('forty')\n    words.append('fifty')\n    words.append('sixty')\n    words.append('seventy')\n    words.append('eighty')\n    words.append('ninety')\n    # iterate through the given list and if a word is longer than n, add it to answer\n    # if it is, add its leteral form to the answer\n    if n == 3:\n        for i in words:\n            answer.append(i)\n    elif n == 2:\n        answer.append(str[0])\n        answer.append(str[1])\n        answer.append(str[2])\n        answer.append(str[0])\n    elif n == 1:\n        answer.append(str[0])\n        answer.append(str[1])\n        answer.append(str[0])\n        answer.append(str[1])\n    else:\n        answer.append(str[0])\n        answer.append(str[1])\n        answer.append(str[2])\n        answer.append(str[0])\n        answer.append(str[1])\n        answer.append(str[2])\n    return answer\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = list(str)\n    l.sort(key=len, reverse=True)\n    for i in l:\n        if len(i) > n:\n            return False\n    return True\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    count = {}\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # 1. Create an empty list for checking:\n    new_list = []\n    \n    # 2. Loop through the given matrix and compare it with the new empty list for testing:\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 1:\n                new_list.append((i, j))\n            elif my_matrix[i][j] == 0:\n                return False\n    # 3. If the length of the new list is 3, return true:\n    if len(new_list) == 3:\n        return True\n    # 4. If the length of the new list is 2, return false:\n    elif len(new_list) == 2:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if(i == j):\n                my_matrix[i][j] = 1\n            else:\n                my_matrix[i][j] = 0\n        \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if(my_matrix[i][j] == 1):\n                return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Write your code here\n    matrix_size = len(my_matrix)\n    \n    for i in range(0, matrix_size):\n        for j in range(0, matrix_size):\n            if my_matrix[i][j]!= 0:\n                if i == matrix_size-1 and j == matrix_size-1:\n                    return False\n                else:\n                    return True\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #code here\n    n = len(my_matrix)\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    d = n-1\n    for i in range(d,n):\n        for j in range(i+1,n):\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    counter = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == my_matrix[i][j+1]:\n                counter += 1\n    if counter == len(my_matrix):\n        return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 1:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == 0:\n                return False\n            if i == j or abs(my_matrix[i][j] - my_matrix[i][j+1]) == abs(my_matrix[i][j] - my_matrix[i][j-1]):\n                return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_count = len(my_matrix[0])\n    col_count = len(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    count = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == 0:\n                count += 1\n    if count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n=len(my_matrix)\n    if n!=n:\n        return False\n    for row in range(0,n-1):\n        for col in range(row+1,n):\n            if my_matrix[row][col]!=my_matrix[row][col-1] and my_matrix[row][col]!=my_matrix[row+1][col] and my_matrix[row][col]!=my_matrix[row][col+1]:\n                return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dictionary = defaultdict(int)\n    for number in nums:\n        dictionary[number] = dictionary.get(number, 0) + 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    return max(counts, key=counts.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #initially, we have a dict containing the frequency of each item\n    #using the help of a dict that we are not able to use for the while loop\n    freq_dict = dict()\n    freq_dict.update({i:nums.count(i) for i in nums})\n    #we can now calculate the new value by now after we've created the dict\n    #dict_items = freq_dict.items()\n    #return max(dict_items, key = lambda x:x[1])\n    #return max(dict_items, key = lambda x:x[1]/nums.count(x[0]))\n    #return max(nums, key = lambda x:freq_dict[x])\n    return max(nums, key = lambda x:freq_dict[x])\n    #return max(nums, key = lambda x:nums.count(x))\n    #return max(nums, key = lambda x:freq_dict[x])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #code here\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for n in nums:\n        freq_dict[n] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    max_freq = 0\n    max_item = None\n    for i in nums:\n        if i > max_freq:\n            max_freq = i\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # a dictionary to store count of each unique elements\n    n = len(nums)\n    counts = defaultdict(int)\n    \n    # iterate through each number in the list\n    for i in nums:\n        counts[i] = nums.count(i)\n        \n    # find the maximum value, and return the index of this value\n    max_occurrences_idx = 0\n    max_occurrences_value = 0\n    for idx, count in enumerate(counts):\n        if count > max_occurrences_value:\n            max_occurrences_value = count\n            max_occurrences_idx = idx\n            \n    return max_occurrences_idx, max_occurrences_value\n    \ndef main():\n    nums = [1,1,1,1,1]\n    print('There are no duplicates in the given array.')\n    print(max_occurrences(nums))\n    \n    nums = [1,1,2,2,2,2,3]\n    print('There are two unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [1,1,1,1,1,2]\n    print('There are two unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [2,2,2,3,3,3,3]\n    print('There are three unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [3,3,3,3,3,4,5,6,7,7,8,9,9,9,9]\n    print('There are four unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [1,2,2,3,3,4,5,6,7,7,8,9,9,9]\n    print('There are four unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [4,4,4,5,5,5,6,7,8,9,9]\n    print('There are five unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [1,1,1,2,2,2,2,3,3,3,3]\n    print('There are six unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [5,5,5,6,6,6,6,7,7,7,7,8,9]\n    print('There are seven unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [1,2,3,4,5,6,7,8,9,10,11,12]\n    print('There are ten unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [1,1,2,2,2,2,3,3,3,3,4,5,6,7,7,8,9,9,10,10,11,12]\n    print('There are eleven unique elements in given array.')\n    print(max_occurrences(nums))\n    \n    nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max([nums.count(elem) for elem in nums])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dic = defaultdict(int)\n    for num in nums:\n        freq_dic[num] += 1\n    return max(freq_dic, key=freq_dic.get)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels_set = set(['a', 'e', 'i', 'o', 'u'])\n    vowels = vowels_set.intersection(set(str1.lower()))\n    vowels_list = list(vowels)\n    vowels_list.reverse()\n    return ''.join(vowels_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if str1 == None:\n        return ''\n    if len(str1) == 1:\n        return str1\n    if str1[0] == 'y':\n        return reverse_vowels(str1[1:])\n    if str1[0]!= 'y':\n        return str1[::-1]\n    else:\n        return str1[::-1].swapcase()\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Your code here\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    return str1.translate(vowels)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    lst = []\n    for i in str1:\n        if i in \"aeiou\":\n            lst.append(i)\n    \n    str_rev = ''\n    \n    for i in lst:\n        str_rev += i\n    \n    return str_rev\n        "
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    a=[]\n    for i in range(len(str1)-1,-1,-1):\n        if str1[i] in ['a','e','i','o','u']:\n            a.append(str1[i])\n    return ''.join(a)\nprint(reverse_vowels('akevx'))\nprint(reverse_vowels('akatrv'))\nprint(reverse_vowels('a'))\nprint(reverse_vowels('akevx'))\nprint(reverse_vowels('akevx'))\nprint(reverse_vowels('akevx'))\nprint(reverse_vowels('akevx'))\nprint(reverse_vowels('aeiou'))\nprint(reverse_vowels('akevx'))\nprint(reverse_vowels('akevx'))"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    lst=[]\n    for x in str1:\n        if x in \"aeiouAEIOU\":\n            lst.append(x)\n    newstr=\"\"\n    for i in lst:\n        newstr+=i\n    return newstr\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if str1 == \"\":\n        return \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['A','E','I','O','U','a','e','i','o','u']\n    str1=str1.upper()\n    result=\"\"\n    for i in str1:\n        if i in vowels:\n            result+=i\n        else:\n            result+=\"-\"\n    return result[::-1]\nprint(reverse_vowels(\"Hello how are you doing?\"))"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = ''\n    for i in str1:\n        if i in vowels:\n            str2 += i\n        else:\n            str2 += '_'\n    return str2[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    '''\n    EASY WAY:\n    str1 = str(input(\"Enter string: \"))\n    output = \"\"\n    vowels = ['a','e','i','o','u']\n    for char in str1:\n        if char in vowels:\n            output += char\n        else:\n            output += char.lower()\n    print(output)\n    '''\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=''\n    for x in tup1:\n        s+=x\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '('+','.join(map(str, tup1))+')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = \"('\"\n    for x in range(len(tup1)):\n        str += str(tup1[x])\n        if x < len(tup1) - 1:\n            str += \"', '\"\n    str = str[:-2] + \"')\"\n    return str\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join(map(str, tup1)) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for x in range(len(tup1)):\n        str_tup = str_tup + str(tup1[x])\n    return str_tup\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + str(tuple(tup1)) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \n    \n    "
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for item in tup1:\n        str1 += str(item) + \" \"\n    str1 = str1.strip()\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = \"\"\n    for item in tup1:\n        str += str(item)\n    return str\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum = sum - num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    i = 0\n    sum_neg = 0\n    while i < len(nums):\n        if nums[i] < 0:\n            sum_neg += nums[i]\n            i += 1\n        else:\n            sum_neg += -nums[i]\n            i += 1\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = []\n    for num in nums:\n        if num < 0:\n            neg_nums.append(abs(num))\n        else:\n            neg_nums.append(num)\n    \n    return sum(neg_nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(nums, [])"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums_sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n        nums_sum += nums[i]\n    return nums_sum\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    # if n is zero\n    if n == 0: \n        return n \n    \n    # loop through to find \n    # every square\n    for i in range(0, n, 2): \n        # if square is odd \n        if i == n: \n            return n \n        # if square is even \n        elif i == 0: \n            return n - i \n        else: \n            # if square is even and odd \n            # iterate through remaining \n            # squares and if square is odd \n            # repeat for n-1 \n            return n - i - 1 "
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_size = int(n/6)\n    if n == 1:\n        return 1\n    else:\n        return hex_size*hex_size + (n-1)*hex_size + hex_size\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    s = set(range(0,n+1,2))\n    print(s)\n    for i in range(n+1):\n        print(i)\n        print(hex(i))\n        if i in s:\n            print(i)\n            print(hex(i))\n            print(i)\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex(i))\n            print(hex("
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    sum = 0\n    i = n\n    while i >= 1:\n        if i % 2 == 0:\n            sum += (i // 4)\n        else:\n            sum += ((i // 2) - 1)\n        i -= 1\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # return n * n + (n + 1) * (n + 1)\n    \n    # return n * (n + 1) * (n + 1) \n    \n    # return n * (n + 1) * (n + 1) * (n + 1)\n    \n    return n * (n + 1) * (n + 1) * (n + 1) * (n + 1)\n    "
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==0: \n        return 0\n    elif n%2==0: \n        return n//6 + 1\n    else: \n        return (n//3) + (n//6) + 1\ndef hexagonal_num_2(n): \n    '''\n    Write a function that returns the nth hexagonal number.\n    '''\n    return n*6 - (n-1)\ndef main(): \n    n=int(input('Enter the number you want to find the hexagonal number for: ')) \n    print(hexagonal_num(n)) \n    print(hexagonal_num_2(n)) \nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    s = 0\n    while n > 0: \n        n //= 3\n        s += 2\n    return s\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return hexagonal_num(n-1) + 2 * hexagonal_num(n-1) + n - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2*n + 1) - (3*n + 1))*(3*(2*n + 1) + 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    \n    elif n == 1:\n        return 1\n        \n    elif n == 2:\n        return 3\n        \n    elif n == 3:\n        return 5\n        \n    elif n == 4:\n        return 7\n        \n    elif n == 5:\n        return 11\n        \n    elif n == 6:\n        return 13\n        \n    elif n == 7:\n        return 15\n        \n    elif n == 8:\n        return 17\n        \n    elif n == 9:\n        return 19\n        \n    else:\n        return n\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    nonzeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            nonzeroes += 1\n    return nonzeroes/zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero_count = 0\n    for num in nums:\n        if num == 0:\n            num_zero_count += 1\n    return num_zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # hint: you can make an array with 0s and 1s, and get the percentage of zeros and ones\n    # use divide and conquer\n    # divide and conquer: divide and conquer\n    if len(nums) < 2:\n        return 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n        elif nums[i] == 1:\n            count += 1\n            if count > 0:\n                return count / len(nums)\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    sum_zeroes = sum(nums)\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    if zeros < sum_zeroes:\n        return 0\n    else:\n        return zeros/sum_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    \n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    \n    return nonzeros / zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # map the array values\n    count = {}\n    for value in nums:\n        count.setdefault(value,0)\n        count[value] += 1\n    # find the ratios\n    zero_ratio = {}\n    for k in count:\n        ratio = count[k] / len(nums)\n        zero_ratio[k] = ratio\n    # sort the ratios\n    sorted_zero_ratio = sorted(zero_ratio.items(),key=lambda x:x[1],reverse=True)\n    return sorted_zero_ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = sum(nums)\n    return count_zeros/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Your code here\n    count = 0\n    for i in nums:\n        if i == 0:\n            count = count + 1\n    return float(count)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    i = 0\n    count = 0\n    while i < len(nums):\n        if nums[i] == 0:\n            count += 1\n        else:\n            i += 1\n        if count == 0:\n            return 0\n    return count / float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    elif n==0 or n==1:\n        return True\n    else:\n        x = n//2\n        return is_Sum_Of_Powers_Of_Two(x) or is_Sum_Of_Powers_Of_Two(n-x)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    return is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 2\n    while i <= n:\n        if (n%i) == 0:\n            return False\n        i = i+2\n    return True\n    \ndef main():\n    number = 1225\n    if is_Sum_Of_Powers_Of_Two(number):\n        print(\"Is \" + str(number) + \" as a sum of 2^n (n > 0)?\")\n    else:\n        print(\"Is \" + str(number) + \" as a sum of 2^n (n <= 0)?\")\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2: \n        return False\n    else: \n        if n == 2: \n            return True \n        elif n == 3: \n            return False\n        else: \n            if n == (n * (n + 1) / 2): \n                return True\n            else: \n                return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(int(n/2)) and is_Sum_Of_Powers_Of_Two(int(n/2))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Brute force approach.\n    # One bit is 1.\n    # Sum of 2^n - 1 = n\n    # Sum of 2^n - 2^(n-1) = n*(n+1)/2\n    # sum of 2^n - 2^(n-1) = 2^(n-1) - 1\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n < 2): \n        return False\n    \n    if (n % 2 == 0): \n        return True\n    \n    if (n % 2!= 0): \n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #create a function to calculate sum of powers of 2\n    def is_sum_of_powers_of_two(n):\n        sum = 0\n        i = 1\n        while i <= n:\n            if n % i == 0:\n                sum += i\n                i += 1\n            else:\n                i += 1\n        return sum == n\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 0:\n        return False\n    else:\n        if n == 1:\n            return True\n        elif n % 2 == 0:\n            return is_Sum_Of_Powers_Of_Two(n//2)\n        else:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return True\n    for i in range(2, int(n ** 0.5) + 1): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*(r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circum_r = 2 * r * math.pi\n    print(circum_r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c = 2*math.pi*r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * (r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # return the circumference\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 3.14 * (r ** 2)\n    print(f\"Circumference of a circle is {circumference}\")\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c=2*(math.pi)*r\n    return c\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = []\n    \n    for i in test_list:\n        if isinstance(i, list):\n            singly.append(extract_singly(i))\n        else:\n            singly.append(i)\n    \n    return singly"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for list in test_list:\n        for item in list:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    # i = 0\n    # nested_lists = []\n    # while i < len(test_list):\n    #     if test_list[i] == 'i':\n    #         i += 1\n    #         nested_lists.append(i)\n    #     else:\n    #         i += 1\n    #     if i == len(test_list):\n    #         i = 0\n    #         break\n    #     elif test_list[i]!= 'i':\n    #         i += 1\n    # return nested_lists\n    \n    def flatten(test_list):\n        # i = 0\n        # nested_lists = []\n        # while i < len(test_list):\n        #     if test_list[i] == 'i':\n        #         i += 1\n        #         nested_lists.append(i)\n        #     else:\n        #         i += 1\n        #     if i == len(test_list):\n        #         i = 0\n        #         break\n        #     elif test_list[i]!= 'i':\n        #         i += 1\n        # return nested_lists\n        \n        return [int(i) for i in test_list if i.isdigit()]\n        \n    flattened_list = flatten(test_list)\n    return flattened_list\n    \n    '''\n    O(n)\n    '''\n    \n    # return [i for i in test_list if i == 'i']\n        \ndef main():\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    print(extract_singly(test_list))\n    flattened_list = flatten(test_list)\n    print(flattened_list)\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    numbers = []\n    for item in test_list:\n        for element in item:\n            numbers.append(element)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for num in test_list:\n        if type(num) is int:\n            flat_list.append(num)\n        elif type(num) is list:\n            flat_list.extend(num)\n    return flat_list\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            res.append(test_list[i][j])\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_set = []\n    for items in test_list:\n        for item in items:\n            if isinstance(item, list):\n                flattened_set.extend(item)\n            else:\n                flattened_set.append(item)\n    return flattened_set\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        if type(item) is list:\n            flattened = flattened + item\n        else:\n            flattened = flattened + [item]\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = [10, 20, [3, [4, 5, 6], 7], 1, 2, 3, [4, [5, 6]]]\n    result = []\n    for element in test_list:\n        if type(element) == list:\n            result += extract_singly(element)\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == []:\n        return []\n    \n    # Traverse through the array\n    pancake_arr = nums\n    i = 0\n    while i < len(pancake_arr):\n        # Check if the current element has already been sorted\n        # or if the current element is the first element\n        if pancake_arr[i] > 0:\n            # If the current element has already been sorted\n            # then go to the next index in the array\n            # and put the current element in the unsorted\n            # array\n            if i > 0 and pancake_arr[i] == pancake_arr[i-1]:\n                i += 1\n                continue\n            # Move the current element to the sorted array\n            # by putting the current element into the unsorted\n            # array\n            i += 1\n            continue\n        # If the current element is not already in the unsorted array\n        # then it is the last element\n        # and can not be sorted\n        i += 1\n        continue\n    \n    # Copy the unsorted array to the sorted array\n    # and return it\n    pancake_arr = nums.copy()\n    \n    # Traverse through the unsorted array\n    # and insert the current element\n    # into the sorted array\n    for i in range(len(pancake_arr)):\n        # If the current element has already been sorted\n        # then simply move the current element\n        # to the sorted array\n        if i > 0 and pancake_arr[i] == pancake_arr[i-1]:\n            continue\n        # Insert the current element into the sorted array\n        pancake_arr[i] = nums[i]\n    \n    # Reverse the unsorted array\n    # and return it\n    for i in range(len(pancake_arr)//2-1, -1, -1):\n        # If the current element has already been sorted\n        # then simply move the current element\n        # to the sorted array\n        if i > 0 and pancake_arr[i] == pancake_arr[i-1]:\n            continue\n        # Move the current element to the sorted array\n        # by removing the current element\n        # from the unsorted array and inserting it\n        # into the sorted array\n        pancake_arr[i] = pancake_arr[i-1]\n        pancake_arr[i-1] = nums[i]\n        \n    return pancake_ar"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    pck = nums\n    # print(nums)\n    # print(pck)\n    i = 0\n    # print(i)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Runtime: 72 ms, faster than 91.50% of Python online submissions for Pancake Sort.\n    def sort(nums):\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            while left < right and nums[left] > nums[left + 1]:\n                left += 1\n            while left < right and nums[right] < nums[left]:\n                right -= 1\n            if left < right:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n        return nums\n    return sort(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums.sort()\n    while (len(nums) > 1):\n        idx = len(nums) - 2\n        while (idx >= 0):\n            if nums[idx] > nums[idx + 1]:\n                temp = nums[idx]\n                nums[idx] = nums[idx + 1]\n                nums[idx + 1] = temp\n            idx -= 1\n    return nums\n    # Time complexity: O(n^2)\n    # Space Complexity: O(1)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def count_sort_helper(nums, start):\n        index = start\n        for i in range(start, len(nums)):\n            index = nums[index]\n            nums[index], nums[i] = nums[i], nums[index]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # find the length of the list\n    l = len(nums)\n    \n    # traverse through the list\n    for i in range(l):\n        \n        # find the largest position\n        max = 0\n        for j in range(l-i-1):\n            if nums[j] > nums[j+1]:\n                max = j\n            \n        # swap the elements\n        temp = nums[i]\n        nums[i] = nums[max]\n        nums[max] = temp\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    def sort(num, low, high):\n        if high - low <= 1:\n            return num\n        return sort(nums[(low + high) // 2], low, high)\n    return sort(nums, 0, len(nums) - 1)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Write your code here\n    if len(nums) == 0:\n        return []\n    \n    # find the length of the list\n    temp = len(nums)\n    # compare with the first element in the array\n    for i in range(len(nums)-1):\n        # check if the current element is greater than the last element\n        if nums[i] > nums[i+1]:\n            # swapping the elements\n            temp = i\n    # if the second element is greater than the last element\n    if nums[temp] > nums[temp+1]:\n        # swapping the elements\n        temp = temp + 1\n    \n    # copying the last element to the first\n    nums[temp], nums[0] = nums[0], nums[temp]\n    \n    pancake_sort(nums[:temp])\n    pancake_sort(nums[temp+1:])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    print(nums)\n    \n    \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    import bisect\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        j = bisect.bisect_left(nums, nums[i - 1])\n        nums[i - 1], nums[j] = nums[j], nums[i - 1]\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #this is a general idea. where you iterate through the lists and iterate through it until you find where you find one.\n    #the way it works is to iterate through the lists, and add the number of different items in the same position.\n    #if there are many identical numbers, we say we are counting number of repeated elements.\n    #if there are many identical numbers, we say we are counting number of duplicates.\n    #this is quite time and is not necessarily a problem.\n    #if we have to count duplicate elements of the same position, we say we are counting duplicate elements.\n    #this is time and a bit of space, but it works. \n    #So, we can start by iterating through the list and do an if statement.\n    #if we find a duplicate, we say we are counting duplicate elements.\n    #if we find not duplicate, we say we are counting duplicate elements.\n    #and if we find not duplicate, we say we are counting duplicate elements.\n    #but this is time and a lot of space, I think. \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list2[j] and list1[i]!= list3[j]:\n                count = count + 1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    i=0\n    while i<len(list1):\n        if i==len(list2):\n            count+=1\n        if list1[i]==list2[i]:\n            count+=1\n        i+=1\n    count+=len(list1)\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list3[i]==list3[j]:\n                same_pair+=1\n    return same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    m=len(list1)\n    n=len(list2)\n    for i in range(m):\n        if list1[i]==list2[i]:\n            count=list1[i]\n            if list2[i] in list3:\n                count=count\n            if count!=list2[i]:\n                count=count\n            if count in list3:\n                count=count\n            if count!=list3[i]:\n                count=count\n            if count in list3:\n                count=count\n            list3.remove(count)\n    print(list3)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i==j and k==j:\n                    same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list2[i] == list3[j]:\n                c = c + 1\n    return c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    list1_indices=[]\n    list2_indices=[]\n    list3_indices=[]\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            list1_indices.append(i)\n    for i in range(len(list1)):\n        if list1[i]==list3[i]:\n            list2_indices.append(i)\n    for i in range(len(list2)):\n        if list2[i]==list3[i]:\n            list3_indices.append(i)\n    count=0\n    for i in list1_indices:\n        for j in list2_indices:\n            if i==j:\n                count+=1\n    return count\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    for i in list3:\n        for j in list3:\n            if i == j:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # let count equal to the number of items in list1 that are identical in the same position of three lists\n    count = 0\n    # loop through all three lists and check each element\n    for i in range(3):\n        for j in range(3):\n            # if the number of elements in the list is same, count =+ 1\n            if list1[i][j] == list2[i][j] and list1[i][j] == list3[i][j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = 0\n    for i in Input:\n        if type(i) == tuple:\n            l += 1\n    return l\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def count_lists(tuple):\n        '''\n        Find number of lists present in the given tuple. \n        '''\n        # Loop through the tuple and check if list is present in the tuple\n        list = 0\n        for element in tuple:\n            if element!= '-1':\n                list += 1\n        # Return list of number of lists\n        return list\n    # Build the dictionary\n    # {\"A\": 3, \"B\": 1, \"C\": 4}\n    lst = dict()\n    # Loop through the tuple and check if list is present in the tuple\n    for element in Input:\n        # If the element is not an int and is in the dictionary\n        if element not in lst and element!= '-1':\n            # Increment the dictionary\n            lst[element] = 1\n    # Return the number of lists in the dictionary\n    return count_lists(lst)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Time complexity of the function is O(n). For\n    # the list of given elements n times, the recursive\n    # function takes O(n^2).\n    \n    # Function that returns the number of lists present in the given tuple.\n    def number_lists(T):\n        if T == ():\n            return 1\n        else:\n            return number_lists(T[1:]) + number_lists(T[1:])\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n=len(Input)\n    for i in range(0,n):\n        if type(Input[i][0])==int and Input[i][1] in (int,float):\n            return n\n    return \"List not found\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    d=0\n    for i in Input:\n        for j in i:\n            if j==' ':\n                d=d+1\n    return d\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # create a list of tuples\n    lists = list()\n    # add every tuple into a list\n    for i in Input:\n        lists.append((i[0],len(i[1])))\n    # return the number of lists\n    return len(lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    x = []\n    if len(Input) == 2:\n        for i in Input:\n            if type(i) == int:\n                x.append(i)\n        return x\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_len = 0\n    for i in Input:\n        list_len = list_len + 1\n    return list_len\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # Iterate through given tuple. \n    i = 0\n    while i < len(Input):\n        # Find number of list present in the given tuple\n        if type(Input[i]) is tuple:\n            print(len(Input[i]))\n            i = i + 1\n        else:\n            print(0)\n            "
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    if len(arr) == 1:\n        return abs(arr[0] - arr[0])\n        \n    return abs(arr[0] - arr[1])\n    \n    \n    \n    "
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_num = max(arr)\n    print(\"max_Abs_Diff\",max_num)\n    max_Abs_diff = max(arr)-max_num\n    print(\"max_Abs_Diff\",max_Abs_diff)\n    return max_Abs_diff\n    \n    \ndef main():\n    '''\n    Run the main method, defined below.\n    '''\n    # Some tests:\n    print(\"Testing max_abs_diff():\", max_abs_diff(arr=[1,2,3,4]))\n    print(\"Testing max_abs_diff():\", max_abs_diff(arr=[1,2,3,4,5,6]))\n    print(\"Testing max_abs_diff():\", max_abs_diff(arr=[5,4,3,2,1]))\n    print(\"Testing max_abs_diff():\", max_abs_diff(arr=[5,4,3,2,1,2,1]))\n    print(\"Testing max_abs_diff():\", max_abs_diff(arr=[5,4,3,2,1,2,1,3]))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2: \n        return abs(arr[0] - arr[1])\n    else:\n        Min_Diff = arr[0] - arr[1]\n        for i in range(2,len(arr)): \n            Min_Diff = max(Min_Diff, abs(arr[i] - arr[i-1]))\n        return Min_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Write your code here.\n    if(len(arr) < 2):\n        return 0\n    \n    max_x = arr[0]\n    min_x = arr[0]\n    for x in arr:\n        if(x > max_x):\n            max_x = x\n        if(x < min_x):\n            min_x = x\n    return abs(max_x - min_x)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0] \n    for i in range(1,len(arr)):\n        max = max - arr[i]\n    return max\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum = arr[0] - arr[1]\n    for i in range(len(arr) - 1):\n        maximum = max(maximum, arr[i + 1] - arr[i])\n    return maximum\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = -99999999999999999\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            diff = abs(arr[i] - arr[j])\n            if diff > max_abs_diff:\n                max_abs_diff = diff\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    lst = []\n    for i in range(len(arr)):\n        lst.append(arr[i][1] - arr[i][0])\n    \n    return max(lst)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # If there are no elements in the array, return 0\n    if len(arr) == 0:\n        return 0\n    \n    # If there is only one element, return the absolute difference\n    elif len(arr) == 1:\n        return abs(arr[0] - arr[0])\n    \n    # Find the absolute difference of all elements in the array and add it to the result\n    else:\n        result = abs(arr[0] - arr[1])\n        for i in range(2, len(arr)):\n            result = max(result, abs(arr[i] - arr[i - 1]))\n        \n        # Return the maximum difference\n        return result\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    def max_Abs_Diff_Two_Nums(arr):\n        max_diff = 0\n        max_diff_index = 0\n        for i in range(0, len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                diff = arr[i] - arr[j]\n                if diff > max_diff:\n                    max_diff = diff\n                    max_diff_index = i\n        return max_diff, max_diff_index\n    if len(arr) < 2:\n        return \"Arr must be at least two numbers\"\n    elif arr == [0, 0]:\n        return \"Invalid array\"\n    elif arr == [0, 0, 0]:\n        return \"Invalid array\"\n    else:\n        max_diff, max_diff_index = max_Abs_Diff_Two_Nums(arr)\n        if max_diff > 0:\n            return f\"{arr[max_diff_index]} - {arr[max_diff_index + 1]}\"\n        elif max_diff < 0:\n            return f\"{arr[max_diff_index]} - {arr[max_diff_index - 1]}\"\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = None\n    \n    if a == 0:\n        x = b\n        y = x + 1\n    elif b == 0:\n        x = a\n        y = x - 1\n    elif a * b == n:\n        return (a, b, x, y)\n    elif a * b > n:\n        return None\n    else:\n        for i in range(1, a * b + 1):\n            x = (x * a) + b\n            y = (y * b) + x\n            \n        return (a, b, x, y)\n    \n    return None\n        \n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # First check if there is a solution\n    if a[0] == b[0]:\n        # Then create an array of solutions\n        solutions = [(a[0], b[0]), (a[1], b[1]), (a[2], b[2])]\n        # Check if there is any solution, if yes return it\n        if len(solutions) > 0:\n            return solutions\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #if len(a)!= len(b):\n    #    return None\n    \n    x, y = a[0], b[0]\n    if x == 0:\n        x = n\n    if y == 0:\n        y = n\n    \n    x_1 = []\n    x_2 = []\n    y_1 = []\n    y_2 = []\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            x_1.append(a[i] // 2)\n        else:\n            x_1.append(a[i] * 3 + 1)\n        if b[i] % 2 == 0:\n            x_2.append(b[i] // 2)\n        else:\n            x_2.append(b[i] * 3 + 1)\n    \n    for i in range(len(b)):\n        if a[i] % 2 == 0:\n            y_1.append(a[i] // 2)\n        else:\n            y_1.append(a[i] * 3 + 1)\n        if b[i] % 2 == 0:\n            y_2.append(b[i] // 2)\n        else:\n            y_2.append(b[i] * 3 + 1)\n    \n    for i in range(len(x_1)):\n        if x_1[i] == x and y_1[i] == y:\n            return x_1[i], y_1[i]\n    \n    for i in range(len(x_2)):\n        if x_2[i] == x and y_2[i] == y:\n            return x_2[i], y_2[i]\n    \n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None, None\n    if b < 0:\n        return None\n    \n    if (a % b) == 0:\n        x, y = (a // b), (b // a)\n        return x, y\n    \n    if a < b:\n        x, y = (a // b), (b // a)\n        return x, y\n    \n    x, y = (a // b) + 1, (b // a) + 1\n    \n    return x, y\n    \ndef solve(a, b, n):\n    '''\n    Write a function that returns the first integer in the least sum possible problem that satisfies ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = find_solution(a, b, n)\n    if x is not None:\n        return x\n    \n    if b == 0:\n        return None\n    \n    if a % b == 0:\n        x, y = (a // b), (b // a)\n        return x, y\n    \n    x, y = (a // b) + 1, (b // a) + 1\n    \n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return\n    x = []\n    y = []\n    \n    for i in range(len(a)):\n        x.append(a[i])\n        y.append(b[i])\n    \n    x = list(x)\n    y = list(y)\n    \n    if a[0]!= y[0]:\n        if len(x) > len(y):\n            return None\n        x[0] = y[0]\n        x[1:] = y[1:]\n        return tuple(x)\n    \n    if a[-1]!= y[-1]:\n        if len(x) > len(y):\n            return None\n        x[-1] = y[-1]\n        x[-2:-1] = y[:-2]\n        return tuple(x)\n    \n    if a[0] == y[0]:\n        return a[0]\n    \n    return find_solution(a[1:], b[1:], n-1)\n    \n    \n    \n    \ndef generate_solution(n):\n    '''\n    Generates a random solution using n(2,3) integers.\n    '''\n    return (n*n, n*n)\n    \ndef test_solution(n, solution):\n    '''\n    Test that the given solution matches the solution found in the function find_solution.\n    '''\n    if solution is None:\n        return\n    \n    if solution[0] == solution[1]:\n        print(\"Test passed. Solution found:\", solution)\n    else:\n        print(\"Test failed. Solution found:\", solution)\n        \ndef test_solution_solution(n, solution):\n    '''\n    Test that the solution returned by find_solution matches the solution found in the function find_solution.\n    '''\n    if solution is None:\n        return\n    \n    if solution[0]!= solution[1]:\n        print(\"Test failed. Solution returned:\", solution)\n        \ndef test_valid(n, solution):\n    '''\n    Test that the function find_solution returns a solution when called with a valid (n) integer.\n    '''\n    solution = generate_solution(n)\n    \n    solution_valid = True\n    \n    if not find_solution(n, solution, n):\n        solution_valid = False\n    else:\n        solution_valid = True\n        \n    if not solution_valid:\n        print(\"Test failed. Solution returned:\", solution)\n        \ndef test_invalid(n):\n    '''\n    Test that the function find_solution raises an exception when called with a non-integer (n).\n    '''\n    with pytest.raises(ValueError):\n        find_solution(n, (3,), 0)\n    \ndef test_random():\n    '''\n    Test that the function generate_solution returns a random solution of the given (n,n) integer.\n    '''\n    n = 4\n    \n    solution = generate_solution(n)\n    \n    test_valid(n, solution)\n    \n    assert solution!= None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == n:\n        return x, y\n    if a == n:\n        return x, y\n    return find_solution(a, b, n//3)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    #if there are only two terms, return solution\n    if a * b == n:\n        return (a, b)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return (a, b)\n    for x in range(a + 1, b + 1):\n        if find_solution(a, b, x)!= None:\n            return (x, b)\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    \n    \n    #If the length of the two lists are same then remove all the elements from the other list.\n    if len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                list2.remove(x)\n                \n        return list1, list2\n    \n    #If the lengths of both lists are different then remove the first elements from the other list.\n    elif len(list1) > len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1, list2\n    \n    #If the length of both lists are same then remove the last element from the other list.\n    elif len(list1) < len(list2):\n        for x in list2:\n            if x in list1:\n                list2.remove(x)\n                \n        return list1, list2\n    \n    #If the length of both lists are same then remove the last element from the other list.\n    elif len(list1) == len(list2):\n        for x in list2:\n            if x in list1:\n                list2.remove(x)\n                \n        return list1, list2\n    \n    #If the lengths of both lists are different then remove the first element from the other list.\n    elif len(list1) < len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1, list2\n    \n    #If the length of both lists are same then remove the first element from the other list.\n    elif len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1, list2\n    \n    #If the length of both lists are different then remove the last element from the other list.\n    elif len(list1) < len(list2):\n        for x in list2:\n            if x in list1:\n                list2.remove(x)\n                \n        return list1, list2\n    \n    #If the length of both lists are different then remove the last element from the other list.\n    elif len(list1) == len(list2):\n        for x in list2:\n            if x in list1:\n                list1.remove(x)\n                \n        return list1, list2\n    \n    #If the length of both lists are different then remove the first element from the other list.\n    elif len(list1) > len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1, list2\n    \n    \n    \n    #If the length of the two lists are same then print the first element from the other list.\n    elif len(list1) == len(list2):\n        for x in list2:\n            if x in list1:\n                list1.remove(x)\n                \n        return list1\n    \n    #If the length of the two lists are different then print the first element from the other list.\n    elif len(list1) > len(list2):\n        for x in list1:\n            if x in list2:\n                list2.remove(x)\n                \n        return list1\n    \n    \n    \n    #If the length of the two lists are same then print the last element from the other list.\n    elif len(list1) == len(list2):\n        for x in list2:\n            if x in list1:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    #If the length of the two lists are different then print the last element from the other list.\n    elif len(list1) > len(list2):\n        for x in list2:\n            if x in list1:\n                list2.remove(x)\n                \n        return list1\n    \n    \n    #If the length of the two lists are same then print the first element from the other list.\n    elif len(list1) < len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    #If the length of the two lists are same then print the first element from the other list.\n    elif len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    #If the length of the two lists are different then print the first element from the other list.\n    elif len(list1) > len(list2):\n        for x in list2:\n            if x in list1:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    #If the length of the two lists are same then print the last element from the other list.\n    elif len(list1) < len(list2):\n        for x in list2:\n            if x in list1:\n                list2.remove(x)\n                \n        return list1\n    \n    \n    \n    \n    #If the length of the two lists are same then print the last element from the other list.\n    elif len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    \n    \n    #If the length of the two lists are different then print the first element from the other list.\n    elif len(list1) > len(list2):\n        for x in list2:\n            if x in list1:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    \n    #If the length of the two lists are same then print the first element from the other list.\n    elif len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    \n    \n    \n    \n    #If the length of the two lists are different then print the first element from the other list.\n    elif len(list1) < len(list2):\n        for x in list2:\n            if x in list1:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    #If the length of the two lists are different then print the last element from the other list.\n    elif len(list1) > len(list2):\n        for x in list2:\n            if x in list1:\n                list2.remove(x)\n                \n        return list1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    #If the length of the two lists are same then print the first element from the other list.\n    elif len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    #If the length of the two lists are same then print the first element from the other list.\n    elif len(list1) > len(list2):\n        for x in list2:\n            if x in list1:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    #If the length of the two lists are same then print the last element from the other list.\n    elif len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                list1.remove(x)\n                \n        return list1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    #If the length of the two lists are different then print the first element from the other list.\n    elif len(list1) < len(list2):\n        for x in list"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        list1.pop(i)\n    for j in range(len(list2)):\n        list2.pop(j)\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        list2.remove(element)\n    return list2\n    \n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(dict.fromkeys(list1))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list1.remove(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # initialize variables\n    l1 = []\n    l2 = []\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 == [] or list2 == [] or len(list1) == 0 or len(list2) == 0:\n        return []\n    for i in list1:\n        if list2.count(i) > 0:\n            list2.remove(i)\n            return remove_elements(list2, list1)\n    return list2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    a = list1.copy()\n    for i in a:\n        if i not in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1)!= len(list2):\n        raise ValueError(\"Lists must be same length\")\n    for index in range(len(list2)):\n        list1.pop(index)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    a = 1\n    b = 2\n    for i in range(n//2):\n        a,b = a+b, a+b+b\n    return a\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2+1):\n        s = s + i * (i+1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while (n > 0):\n        sum += n % 10\n        n = n // 10\n        i += 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n-sum_series(n-1) + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0 or n == 1:\n        return n\n    return n + sum_series(n - 1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    assert(n > 0), \"n must be a positive integer\"\n    return sum_series_rec(n, 1)\n    \ndef sum_series_rec(n, x):\n    if x == 0:\n        return 1\n    else:\n        return n + sum_series_rec(n-x, x+1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    if n <= 1:\n        return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n,0,-2):\n        s += i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    s = 0\n    x = n // 2\n    \n    for i in range(n, 0, -1):\n        s = i - x + x - (i // x) - 1\n        \n    return s\n        \n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    while n // 2!= 0:\n        s += n // 2\n        n -= 1\n    return s\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(pi * (i + 1) / l))\n    return round(area, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    assert type(s) == list and type(l) == int and type(l) == int, 'Invalid arguments'\n    assert len(s) == 3 and len(l) == 3, 'Invalid arguments'\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    l = float(l)\n    a = (s*s)*l\n    return a\n    \ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    a = pi*(r**2)\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def d(s):\n        # the equation with the form:\n        # 2x + 2y = z\n        # a = 2*(s/2) + 2*y\n        # s = 4*a*c + a*y\n        # y = 4*a*x + c*x\n        return 2*s*(tan(pi/l) + tan(pi/l)/2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * 2) * (l / 3)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    result = pi * s**2 * (1 / 4)\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # write your code here\n    s = int(s)\n    l = int(l)\n    \n    for i in range(1,l+1):\n        area += (i*(i+1))/(2*pi)\n    return area\n    \ndef area_circular(r):\n    '''\n    Write a function that computes the area of a circle given its radius.\n    '''\n    return (pi*r*r)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #return 0\n    t = tan(pi/l)\n    return 2*pi*(s**2)*t\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return math.sqrt(n)/math.sqrt(n-2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [2]\n    for i in range(1, n//2 + 1): \n        if (n % i) == 0:\n            divisors.append(i)\n    divisors = list(dict.fromkeys(divisors)) \n    divisors.sort(reverse = True)\n    divisors = divisors[1:len(divisors)] \n    for i in range(len(divisors)): \n        if (n % divisors[i]) == 0: \n            return False\n    return True \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 0:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1): \n        div_sum += (i*(i+1)) // 2\n    return div_sum == n \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    for i in range(2, math.sqrt(n) + 1): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    while i < n:\n        j = 2\n        sum = 0\n        while j <= i:\n            if j%i==0:\n                sum+=j\n                j+=1\n            else:\n                j+=1\n        if sum==i:\n            return i\n        else:\n            i+=1\n    return None\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2: \n        return False\n    d = int(math.sqrt(n)) + 1\n    for i in range(2, d + 1): \n        if (n % i == 0): \n            return False\n    return True\n    \ndef main(): \n    '''\n    This program is for checking if the given number is a prime number or not. \n    '''\n    N = int(input(\"Please enter a number: \"))\n    if div_sum(N) == False:\n        print(\"The number is not a prime number\")\n    else:\n        print(\"The number is a prime number\")\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # We can use divisors function to calculate the divisors\n    dividend = 0\n    divisors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors.append(i)\n            dividend += i\n    if dividend == n:\n        return True\n    else:\n        return False\n    # YOUR CODE HERE\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return div_sum(n//2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return True\n    \n    s = []\n    # Take the first term and the rest of the terms, \n    # in this way we take the consecutive divisors of the sum\n    for i in range(1, n): \n        if n % i == 0: \n            s.append(i)\n    if len(s) == 2: \n        return True\n    return False\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    cnt = 0\n    for i in str1:\n        if i in alphabet:\n            cnt += 1\n    return cnt\ndef alphabet_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the English alphabet (case insensitive).\n    '''\n    cnt = 0\n    for i in str1:\n        if i in alphabet:\n            position = str1.index(i)\n            if position == 0:\n                cnt += 1\n            else:\n                cnt += 1\n                position -= 1\n    return cnt\ndef alphabet_position_v2(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the English alphabet (case insensitive).\n    '''\n    cnt = 0\n    for i in str1:\n        if i in alphabet:\n            position = str1.index(i)\n            if position == 0:\n                cnt += 1\n            else:\n                position -= 1\n                cnt += 1\n    return cnt\ndef edit_distance(str1, str2):\n    '''\n    Write a function to compute the edit distance between two strings.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            cnt += 1\n    return cnt\ndef reverse(str1):\n    '''\n    Write a function to reverse a string using the reverse() function.\n    '''\n    return str1[::-1]\ndef remove_all(str1, char):\n    '''\n    Write a function that returns a string where all occurrences of char have been removed. If the removal does not produce any results, return the original string.\n    '''\n    return str1.replace(char, \"\")\ndef count_string_v1(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            cnt += 1\n    return cnt\ndef count_string_v2(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            cnt += 1\n            position = str1.index(str1[i])\n            if position == 0:\n                cnt += 1\n    return cnt\ndef count_string_v3(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            cnt += 1\n            position = str1.index(str1[i])\n            if position == 0:\n                cnt += 1\n                if position == len(str1)-1:\n                    cnt += 1\n            else:\n                cnt += 1\n                position -= 1\n                if position == 0:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n                    position -= 1\n                    position -= 1\n    return cnt\ndef count_string_v4(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            cnt += 1\n            position = str1.index(str1[i])\n            if position == 0:\n                cnt += 1\n                if position == len(str1)-1:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n            else:\n                position -= 1\n                if position == 0:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n                    position -= 1\n                    position -= 1\n    return cnt\ndef count_string_v5(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            cnt += 1\n            position = str1.index(str1[i])\n            if position == 0:\n                cnt += 1\n                if position == len(str1)-1:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n            else:\n                position -= 1\n                if position == 0:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n                    position -= 1\n                    position -= 1\n    return cnt\ndef count_string_v6(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            cnt += 1\n            position = str1.index(str1[i])\n            if position == 0:\n                cnt += 1\n                if position == len(str1)-1:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n            else:\n                position -= 1\n                if position == 0:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n                    position -= 1\n                    position -= 1\n    return cnt\ndef count_string_v7(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            cnt += 1\n            position = str1.index(str1[i])\n            if position == 0:\n                cnt += 1\n                if position == len(str1)-1:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n            else:\n                position -= 1\n                if position == 0:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n                    position -= 1\n                    position -= 1\n    return cnt\ndef count_string_v8(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            position = str1.index(str1[i])\n            if position == 0:\n                cnt += 1\n                if position == len(str1)-1:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n            else:\n                position -= 1\n                if position == 0:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n                    position -= 1\n                    position -= 1\n    return cnt\ndef count_string_v9(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            position = str1.index(str1[i])\n            if position == 0:\n                cnt += 1\n                if position == len(str1)-1:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n            else:\n                position -= 1\n                if position == 0:\n                    cnt += 1\n                else:\n                    cnt += 1\n                    position -= 1\n                    position -= 1\n                    position -= 1\n    return cnt\ndef count_string_v10(str1):\n    '''\n    Write a function that returns the number of times char occurs in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            position = str1.index(str1[i])\n            if position == 0:\n                cnt += 1\n                if position == len(st"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha() == True:\n            if char in alphabets:\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1: \n        if char.lower() in alphabet: \n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i]==str1[i].upper():\n            count+=1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for letter in str1:\n        if letter == str1[str1.index(letter)+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for ch in str1:\n        if ch.isalpha():\n            pos = str1.index(ch)\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # your code here\n    return len(str1)"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_count = {}\n    for c in str1: \n        if c in char_count: \n            char_count[c] += 1\n        else: \n            char_count[c] = 1\n    \n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    i = 0\n    j = len(str1)-1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            result += A[i] ^ A[j]\n    return result\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    #find pair\n    for i in range(len(A)-1):\n        for j in range(len(A)-1):\n            #if xor the two numbers\n            if A[i]^A[j]==0:\n                return 2\n    \n    #if the number is odd, return 1\n    return 1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count=0\n    for x in A:\n        if x&1==0:\n            even_count+=1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in A:\n        if (i%2) == 0:\n            even += 1\n    return even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    evens = []\n    for i in range(len(A)):\n        if A[i] % 2 == 0:\n            evens.append([A[i], i])\n    return len(evens)\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair = 0\n    for i in range(len(A)-1): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                pair += 1 \n    return pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_num = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A:\n        if (i&1)!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)-1): \n        for j in range(i+1, len(A)): \n            if (A[i]^A[j]==0): \n                even_pairs += 1\n    return even_pairs\ndef find_odd_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    odd_pairs = 0\n    for i in range(len(A)-1): \n        for j in range(i+1, len(A)): \n            if (A[i]^A[j]==1): \n                odd_pairs += 1\n    return odd_pairs\ndef find_comb(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that are equal to 2.\n    '''\n    sum = 0\n    for i in range(len(A)-1): \n        for j in range(i+1, len(A)): \n            if (A[i]==A[j]): \n                sum+=1\n    return sum\ndef is_palindrome(A): \n    '''\n    Write a function that returns whether an integer is palindrome.\n    '''\n    result = False\n    for i in range(len(A)-1): \n        for j in range(i+1, len(A)): \n            if (A[i]==A[j]): \n                if A[i]*A[j]==A[i]*A[j]: \n                    result = True\n                    break\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 1: \n        if (n & 1): \n            return 1\n        n = n >> 1\n    return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while 2**i <= n:\n        i = i+1\n    return i-1\n    \ndef next_power_of_2_till_n(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while 2**i <= n:\n        i = i+1\n    return i\n    \ndef next_power_of_2_till_n_with_prefix(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n with the suffix of 1.\n    '''\n    i = 1\n    while 2**i <= n:\n        i = i+1\n    return i\n    \ndef next_power_of_2_till_n_with_prefix_till_n(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n with the suffix of 1.\n    '''\n    i = 1\n    while 2**i <= n:\n        i = i+1\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return -1\n    if n == 1:\n        return 2\n    else:\n        return next_power_of_2(n - 1) + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(len(str(n))-1) \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # write your code here\n    while n > 0:\n        if n & 1 == 0:\n            return 2 ** (n - 1)\n        else:\n            return 2 ** (n - 1) + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n) \n    if n <= 0: \n        return 0\n    if n % 2 == 0: \n        return 1\n    while n >= 2: \n        if n % 2 == 0: \n            return 1\n        n = n // 2\n    return 0\ndef is_prime(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n < 3: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef calculate_gcd(a, b): \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a == 0: \n        return b \n    if b == 0: \n        return a \n    if a > b: \n        big = a \n        small = b \n    else: \n        big = b \n        small = a \n    for i in range(1, small + 1): \n        if (big % i == 0) and (small % i == 0): \n            gcd = i \n    return gcd \ndef is_prime(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n < 3: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef get_permutations(nums): \n    '''\n    Write a python function that returns a list of all possible permutations of nums. \n    Use recursion to return all possible permutations.\n    '''\n    if len(nums) == 0: \n        return []\n    elif len(nums) == 1: \n        return [nums]\n    else: \n        all_permutations = get_permutations(nums[:-1]) \n        next_permutations = get_permutations(nums[:-1] + [nums[-1]]) \n        return [x + [y] for y in all_permutations for x in next_permutations]\ndef linear_search(nums, target): \n    '''\n    Write a python function that returns the index of target in a list. \n    If the target is not present return -1. \n    '''\n    if len(nums) == 0: \n        return -1\n    if target in nums: \n        return nums.index(target) \n    else: \n        return -1\ndef multiple_sums(nums, k): \n    '''\n    Write a python function that returns the kth largest element in a list.\n    '''\n    def merge(nums, k): \n        nums.sort() \n        return nums[-k:] \n    return max(nums[-k:] + merge(nums[:-k] + [nums[0]], k), key = len) \ndef missing_number(nums): \n    '''\n    Return an array containing the first missing positive integer.\n    '''\n    def find_missing_positive(nums): \n        return sorted(nums)[-1] - sorted(nums)[0] + 1\n    return sorted(nums)[-1] + 1 if len(nums) > 0 else -1\ndef get_fib(n): \n    '''\n    Write a python function that returns the nth fibonacci number.\n    '''\n    def fib(n): \n        if n == 0: \n            return 0\n        if n == 1: \n            return 1\n        return fib(n - 1) + fib(n - 2) \n    return fib(n) \ndef run(): \n    '''\n    Write a python function that can sum up to n integers. \n    '''\n    print(sum_up(10)) \ndef sum_up(n): \n    '''\n    Write a python function that can sum up to n integers. \n    '''\n    def get_sum(n): \n        if n <= 0: \n            return 0\n        if n == 1: \n            return 1\n        return n + get_sum(n - 1) \n    print(get_sum(n)) \ndef jumping_stones(nums): \n    '''\n    Write a python function that can take an array of non-negative integers (nums) \n    and return all the starting indices of a sequence of jumps \n    such that the value at the destination is the length of the sequence. \n    You may assume that the end of the array is connected, \n    and you may not access the first and last element. \n    '''\n    def get_jump(nums, i): \n        if i >= len(nums): \n            return [] \n        jump = []\n        if nums[i] == 1: \n            jump.append(i) \n            i += 1\n            return get_jump(nums, i) \n        elif nums[i] == 0: \n            i += 1\n        else: \n            jump.append(i) \n            j = i \n            while j < len(nums) and nums[j] == 0: \n                j += 1\n            if j < len(nums): \n                jump.append(j) \n            j = i \n            while j < len(nums) and nums[j] == 1: \n                j += 1\n            jump.append(j) \n            j = i \n            while j < len(nums) and nums[j] == 0: \n                j += 1\n            jump.append(j) \n        return jump \n    jump = get_jump(nums, 0) \n    print(jump)\n    print(get_jump(nums, len(nums) - 1)) \ndef jump_list(nums): \n    '''\n    Write a python function that can take an array of non-negative integers (nums) \n    and return all the starting indices of a sequence of jumps \n    such that the value at the destination is the length of the sequence. \n    You may assume that the end of the array is connected, \n    and you may not access the first and last element. \n    '''\n    def get_jump(nums, i): \n        if i >= len(nums): \n            return [] \n        jump = []\n        j = i \n        while j < len(nums) and nums[j] == 0: \n            j += 1\n        jump.append(j) \n        j = i \n        while j < len(nums) and nums[j] == 1: \n            j += 1\n        jump.append(j) \n        j = i \n        while j < len(nums) and nums[j] == 0: \n            j += 1\n        jump.append(j) \n        j = i \n        while j < len(nums) and nums[j] == 1: \n            j += 1\n        jump.append(j) \n        j = i \n        while j < len(nums) and nums[j] == 0: \n            j += 1\n        jump.append(j) \n        j = i \n        while j < len(nums) and nums[j] == 1: \n            j += 1\n        jump.append(j) \n        return jump \n    jump = get_jump(nums, 0) \n    print(jump)\n    print(get_jump(nums, len(nums) - 1)) \ndef is_prime(n): \n    '''\n    Write a python function that returns whether an integer n is prime or not. \n    '''\n    def divisors(n): \n        divisors = [] \n        for i in range(1, int(math.sqrt(n)) + 1): \n            if n % i ="
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    a = 2 \n    while a <= n:\n        if n % a == 0:\n            return a\n        a += 1\n    return None\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Your code here\n    while n >= 1:\n        if n & 1 == 1:\n            n /= 2\n            # print(n)\n        else:\n            n = n * 2\n    # print(n)\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = 2**n\n    #print(\"l = {}\".format(l))\n    return l\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num = a.count(x)\n    return num\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq = {}\n    for el in a:\n        if el in freq:\n            freq[el]+=1\n        else:\n            freq[el] = 1\n    return(freq)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d=dict()\n    for i in a:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d.values()\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return [i+1 for i,v in enumerate(a) if v==x]\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    dict_a = {} # empty dictionary to initialize\n    for i in a: # loop through each element in a\n        if i not in dict_a: # if element doesn't occur in dictionary\n            dict_a[i] = 1 # set value to 1 in dictionary\n        else:\n            dict_a[i] += 1 # if it doesn't occur, increase count by 1\n    return dict_a # return dictionary with count values\n    \ndef merge(a,b):\n    '''\n    Write a function to merge two sorted linked lists and return new list.\n    The function should merge the two sorted linked lists in alternating.\n    '''\n    c = 0\n    temp = [] # temp = new list to return\n    while c < len(a): # while there is a value in a\n        if a[c].val <= b[c].val: # if the value of the two lists are equal\n            temp.append(a[c]) # add the value of first list to second list\n            a.pop(c) # remove the value from the first list\n            c -= 1 # reduce the count by 1\n        else: # if the value of the two lists are not equal\n            temp.append(b[c]) # add the value of second list to first list\n            b.pop(c) # remove the value from the second list\n            c -= 1 # reduce the count by 1\n    return temp # return new list\n    \ndef merge_sort(a):\n    '''\n    Write a function to sort a linked list.\n    '''\n    n = len(a)\n    if n == 1:\n        return a\n    mid = n//2\n    left = merge_sort(a[:mid])\n    right = merge_sort(a[mid:])\n    return merge(left,right)\n    \ndef mergesort(a):\n    '''\n    Write a function to sort a linked list.\n    '''\n    if len(a) > 1:\n        mid = len(a)//2\n        left = mergesort(a[:mid])\n        right = mergesort(a[mid:])\n        return merge(left,right)\n    return a\n    \ndef bubble_sort(a):\n    '''\n    Write a function to sort a linked list.\n    '''\n    n = len(a)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if a[j].val > a[j+1].val:\n                a[j],a[j+1] = a[j+1],a[j]\n    return a\n    \ndef radix_sort(a):\n    '''\n    Write a function to sort a linked list.\n    '''\n    base = 10\n    # initialize the digits to be sorted\n    digits = []\n    for i in a:\n        digits.append(i.val)\n        \n    # sort digits\n    digits = sorted(digits)\n    \n    # create the list with new digits\n    n = len(digits)\n    result = []\n    for i in range(n):\n        result.append(digits[i])\n        \n    # sort result\n    for i in range(n):\n        digits[i] = result[i]\n    return digits\n    \ndef bubble_sort_v2(a):\n    '''\n    Write a function to sort a linked list.\n    '''\n    for i in range(len(a)):\n        for j in range(len(a)-1-i):\n            if a[j].val > a[j+1].val:\n                a[j],a[j+1] = a[j+1],a[j]\n    return a\n    \ndef heap_sort(a):\n    '''\n    Write a function to sort a linked list.\n    '''\n    for i in range(len(a)//2-1, -1, -1):\n        heapify(a, i, len(a))\n    for i in range(len(a)):\n        a[i] = heap_sort_rec(a, i, len(a))\n    return a\n    \ndef heap_sort_rec(a, i, n):\n    '''\n    Use a heap to sort a linked list.\n    '''\n    if i >= n:\n        return a\n    if n < 1:\n        return a\n    p = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and a[l].val > a[p].val:\n        p = l\n    if r < n and a[r].val > a[p].val:\n        p = r\n    if p!= i:\n        a[i],a[p] = a[p],a[i]\n        heap_sort_rec(a, p, n)\n    return a\n    \ndef heap_sort_rec(a, i, n):\n    '''\n    Use a heap to sort a linked list.\n    '''\n    if i >= n:\n        return a\n    if n < 1:\n        return a\n    p = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and a[l].val > a[p].val:\n        p = l\n    if r < n and a[r].val > a[p].val:\n        p = r\n    if p!= i:\n        a[i],a[p] = a[p],a[i]\n        heap_sort_rec(a, p, n)\n    return a\n    \ndef heap_sort_rec_v2(a, i, n):\n    '''\n    Use a heap to sort a linked list.\n    '''\n    if i >= n:\n        return a\n    if n < 1:\n        return a\n    p = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and a[l].val > a[p].val:\n        p = l\n    if r < n and a[r].val > a[p].val:\n        p = r\n    if p!= i:\n        a[i],a[p] = a[p],a[i]\n        heap_sort_rec_v2(a, p, n)\n    return a\n    \ndef heap_sort_rec_v3(a, i, n):\n    '''\n    Use a heap to sort a linked list.\n    '''\n    if i >= n:\n        return a\n    if n < 1:\n        return a\n    p = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and a[l].val > a[p].val:\n        p = l\n    if r < n and a[r].val > a[p].val:\n        p = r\n    if p!= i:\n        a[i],a[p] = a[p],a[i]\n        heap_sort_rec_v3(a, p, n)\n    return a\n    \ndef heap_sort_v3(a, n):\n    '''\n    Use a heap to sort a linked list.\n    '''\n    for i in range(len(a)//2-1, -1, -1):\n        heapify(a, i, len(a))\n    for i in range(len(a)):\n        a[i] = heap_sort_rec_v3(a, i, len(a))\n    return a\n    \ndef heap_sort(a):\n    '''\n    Write a function to sort a linked list.\n    '''\n    for i in range(len(a)//2-1, -1, -1):\n        heap_sort_v3(a, len(a))\n    for i in range(len(a)):\n        a[i] = heap_sort_rec(a, i, len(a))\n    return a\n    \ndef merge_sort(a):\n    '''\n    Write a function to sort a linked list.\n    '''\n    if len(a) > 1:\n        mid = len(a)//2\n        left = a[:mid]\n        right = a[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i = 0\n        j = 0\n        k = 0\n        while i < len(left) and j < len(right):\n            if left[i] "
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            num += 1\n    return num\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    x=sorted(a)\n    count=0\n    for i in range(len(x)):\n        if a[i]==x[i]:\n            count+=1\n    return count\ndef sum(a):\n    '''\n    Write a function to compute the sum of the elements of a list.\n    '''\n    sum=0\n    for i in a:\n        sum=sum+i\n    return sum\ndef product(a):\n    '''\n    Write a function to compute the product of the elements of a list.\n    '''\n    pro=1\n    for i in a:\n        pro=pro*i\n    return pro\ndef reverse(a):\n    '''\n    Write a function to return the list with the first and last elements reversed.\n    '''\n    x=a[0:len(a)-1: -1]\n    x.reverse()\n    return x\ndef sumlist(a):\n    '''\n    Write a function to return the sum of all the numbers in a list.\n    '''\n    count=0\n    for i in a:\n        count=count+i\n    return count\ndef sum2(a):\n    '''\n    Write a function to return the sum of all the even numbers in a list.\n    '''\n    count=0\n    for i in a:\n        if i%2==0:\n            count=count+i\n    return count\ndef calculate(a):\n    '''\n    Write a function to calculate the sum of all the factors of a number.\n    '''\n    sum=0\n    for i in range(1,a+1):\n        if a%i==0:\n            sum+=i\n    return sum\ndef square(a):\n    '''\n    Write a function to square a number.\n    '''\n    return a*a\ndef max(a,b):\n    '''\n    Write a function to return the maximum of two numbers.\n    '''\n    if b==0:\n        return a\n    return max(b,a)\ndef min(a,b):\n    '''\n    Write a function to return the minimum of two numbers.\n    '''\n    if b==0:\n        return a\n    return min(b,a)\ndef factorial(a):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    fact=1\n    for i in range(1,a+1):\n        fact=fact*i\n    return fact\ndef prime(a):\n    '''\n    Write a function to find if a number is prime or not.\n    '''\n    if a<2:\n        return False\n    for i in range(2,int(math.sqrt(a)+1)):\n        if a%i==0:\n            return False\n    return True\ndef fun(a):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if a==2 or a==3 or a==5 or a==7 or a==11 or a==13 or a==17 or a==19 or a==23 or a==29 or a==31 or a==37 or a==41:\n        return \"Prime\"\n    else:\n        return \"Not Prime\"\ndef dot(a,b):\n    '''\n    Write a function to compute the dot product of two numbers.\n    '''\n    return a+b\ndef mean(a):\n    '''\n    Write a function to compute the mean of a list of numbers.\n    '''\n    sum=0\n    for i in a:\n        sum=sum+i\n    return sum/len(a)\ndef median(a):\n    '''\n    Write a function to compute the median of a list of numbers.\n    '''\n    list=sorted(a)\n    length=len(list)\n    if length%2==0:\n        median1=list[int(length/2)]\n        median2=list[int(length/2)-1]\n    else:\n        median1=list[int((length/2)-1)]\n        median2=list[int((length/2))]\n    return median1+median2\ndef fact(a):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    fact=1\n    for i in range(2,a+1):\n        fact=fact*i\n    return fact\ndef maximum(a,b):\n    '''\n    Write a function to return the maximum of two numbers.\n    '''\n    if b==0:\n        return a\n    return maximum(b,a)\ndef minimum(a,b):\n    '''\n    Write a function to return the minimum of two numbers.\n    '''\n    if b==0:\n        return a\n    return minimum(b,a)\ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    if a<b:\n        min=b\n    else:\n        min=a\n    for i in range(min,0,-1):\n        if a%i==0 and b%i==0:\n            return i\n    return min\ndef smallest(a,b):\n    '''\n    Write a function to find the smallest number that is greater than b.\n    '''\n    if a<b:\n        min=b\n    else:\n        min=a\n    for i in range(1,int(math.sqrt(min)+1)):\n        if a%i==0 and b%i==0:\n            return i\n    return min\ndef lcm(a,b):\n    '''\n    Write a function to find the least common multiple of a and b.\n    '''\n    return int(math.gcd(a,b))\ndef main():\n    a=int(input(\"Enter the first number: \"))\n    b=int(input(\"Enter the second number: \"))\n    print(\"The product of\",a,\"and\",b,\"is: \")\n    print(product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \")\n    print(sum(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sumlist(a,b))\n    print(\"The product of\",a,\"and\",b,\"is: \",product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum2(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The product of\",a,\"and\",b,\"is: \",product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The product of\",a,\"and\",b,\"is: \",product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The product of\",a,\"and\",b,\"is: \",product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The product of\",a,\"and\",b,\"is: \",product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The product of\",a,\"and\",b,\"is: \",product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The product of\",a,\"and\",b,\"is: \",product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The product of\",a,\"and\",b,\"is: \",product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \",sum(a,b))\n    print(\"The product of\",a,\"and\",b,\"is: \",product(a,b))\n    print(\"The sum of\",a,\"and\",b,\"is: \""
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a:\n        return 0\n    else:\n        return a.count(x)\n        \ndef max_frequency(a,x): \n    '''\n    Write a function to find the most frequent element in a given list.\n    '''\n    max_count = 0\n    for i in range(len(a)):\n        count = frequency(a,x)\n        if count > max_count:\n            max_count = count\n            max_value = a[i]\n    return max_value\n    \ndef second_most_frequent(a,x):\n    '''\n    Write a function to find the second most frequent element in a given list.\n    '''\n    second_max_count = 0\n    second_max_value = 0\n    for i in range(len(a)):\n        if frequency(a,x) > frequency(a,a[i]):\n            second_max_count = frequency(a,x)\n            second_max_value = a[i]\n    return second_max_value\n    \ndef median(a):\n    '''\n    Write a function to find the median of a given list.\n    '''\n    a.sort()\n    mid = len(a)//2\n    if len(a)%2:\n        return a[mid]\n    else:\n        return (a[mid-1] + a[mid])/2\n    \ndef quartile(a):\n    '''\n    Write a function to find the quartile of a given list.\n    '''\n    a.sort()\n    n = len(a)\n    median = median(a)\n    return ((n*median)/n)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    while (s + 1 < m):\n        s += 1\n        if list1[s] < list1[s+1]:\n            list1[s], list1[s+1] = list1[s+1], list1[s]\n    return sum(list1)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum = 0\n    for i in range(m, n):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return\n    if n == 0:\n        return sum_range_list(list1, m-1, 0)\n    if n == 1:\n        return list1[m-1]\n    return sum_range_list(list1, m-1, n-1) + list1[m-1]\nprint(sum_range_list([1,2,3,4,5,6,7], 5, 10))\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_num = 0\n    for i in range(m-1):\n        sum_num += list1[i]\n    for j in range(n):\n        sum_num -= list1[j]\n    return sum_num\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if list1 == []:\n        raise Exception(\"Invalid input\")\n    \n    if m < 0 or n < 0:\n        raise Exception(\"Invalid input\")\n    \n    if (m < 0) or (n < 0) or (len(list1) < m) or (len(list1) < n):\n        raise Exception(\"Invalid input\")\n    \n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0                                                                                                                                                                                            \n    for i in range(m, n):                                                                                                                                                                                                    \n        sum += list1[i]                                                                                                                                                                                                                                \n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum = 0                                                                                                                                                        \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (2*a*math.sqrt(3))/3\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 3 * (a*a)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    x1 = a/2\n    x2 = a/2\n    x3 = a/2\n    x4 = a/2\n    x5 = a/2\n    x6 = a/2\n    x7 = a/2\n    x8 = a/2\n    x9 = a/2\n    x10 = a/2\n    x11 = a/2\n    x12 = a/2\n    x13 = a/2\n    x14 = a/2\n    x15 = a/2\n    x16 = a/2\n    x17 = a/2\n    x18 = a/2\n    x19 = a/2\n    x20 = a/2\n    x21 = a/2\n    x22 = a/2\n    x23 = a/2\n    x24 = a/2\n    x25 = a/2\n    x26 = a/2\n    x27 = a/2\n    x28 = a/2\n    x29 = a/2\n    x30 = a/2\n    x31 = a/2\n    x32 = a/2\n    x33 = a/2\n    x34 = a/2\n    x35 = a/2\n    x36 = a/2\n    x37 = a/2\n    x38 = a/2\n    x39 = a/2\n    x40 = a/2\n    x41 = a/2\n    x42 = a/2\n    x43 = a/2\n    x44 = a/2\n    x45 = a/2\n    x46 = a/2\n    x47 = a/2\n    x48 = a/2\n    x49 = a/2\n    x50 = a/2\n    x51 = a/2\n    x52 = a/2\n    x53 = a/2\n    x54 = a/2\n    x55 = a/2\n    x56 = a/2\n    x57 = a/2\n    x58 = a/2\n    x59 = a/2\n    x60 = a/2\n    x61 = a/2\n    x62 = a/2\n    x63 = a/2\n    x64 = a/2\n    x65 = a/2\n    x66 = a/2\n    x67 = a/2\n    x68 = a/2\n    x69 = a/2\n    x70 = a/2\n    x71 = a/2\n    x72 = a/2\n    x73 = a/2\n    x74 = a/2\n    x75 = a/2\n    x76 = a/2\n    x77 = a/2\n    x78 = a/2\n    x79 = a/2\n    x80 = a/2\n    x81 = a/2\n    x82 = a/2\n    x83 = a/2\n    x84 = a/2\n    x85 = a/2\n    x86 = a/2\n    x87 = a/2\n    x88 = a/2\n    x89 = a/2\n    x90 = a/2\n    x91 = a/2\n    x92 = a/2\n    x93 = a/2\n    x94 = a/2\n    x95 = a/2\n    x96 = a/2\n    x97 = a/2\n    x98 = a/2\n    x99 = a/2\n    x100 = a/2\n    x101 = a/2\n    x102 = a/2\n    x103 = a/2\n    x104 = a/2\n    x105 = a/2\n    x106 = a/2\n    x107 = a/2\n    x108 = a/2\n    x109 = a/2\n    x110 = a/2\n    x111 = a/2\n    x112 = a/2\n    x113 = a/2\n    x114 = a/2\n    x115 = a/2\n    x116 = a/2\n    x117 = a/2\n    x118 = a/2\n    x119 = a/2\n    x120 = a/2\n    x121 = a/2\n    x122 = a/2\n    x123 = a/2\n    x124 = a/2\n    x125 = a/2\n    x126 = a/2\n    x127 = a/2\n    x128 = a/2\n    x129 = a/2\n    x130 = a/2\n    x131 = a/2\n    x132 = a/2\n    x133 = a/2\n    x134 = a/2\n    x135 = a/2\n    x136 = a/2\n    x137 = a/2\n    x138 = a/2\n    x139 = a/2\n    x140 = a/2\n    x141 = a/2\n    x142 = a/2\n    x143 = a/2\n    x144 = a/2\n    x145 = a/2\n    x146 = a/2\n    x147 = a/2\n    x148 = a/2\n    x149 = a/2\n    x150 = a/2\n    x151 = a/2\n    x152 = a/2\n    x153 = a/2\n    x154 = a/2\n    x155 = a/2\n    x156 = a/2\n    x157 = a/2\n    x158 = a/2\n    x159 = a/2\n    x160 = a/2\n    x161 = a/2\n    x162 = a/2\n    x163 = a/2\n    x164 = a/2\n    x165 = a/2\n    x166 = a/2\n    x167 = a/2\n    x168 = a/2\n    x169 = a/2\n    x170 = a/2\n    x171 = a/2\n    x172 = a/2\n    x173 = a/2\n    x174 = a/2\n    x175 = a/2\n    x176 = a/2\n    x177 = a/2\n    x178 = a/2\n    x179 = a/2\n    x180 = a/2\n    x181 = a/2\n    x182 = a/2\n    x183 = a/2\n    x184 = a/2\n    x185 = a/2\n    x186 = a/2\n    x187 = a/2\n    x188 = a/2\n    x189 = a/2\n    x190 = a/2\n    x191 = a/2\n    x192 = a/2\n    x193 = a/2\n    x194 = a/2\n    x195 = a/2\n    x196 = a/2\n    x197 = a/2\n    x198 = a/2\n    x199 = a/2\n    x200 = a/2\n    x201 = a/2\n    x202 = a/2\n    x203 = a/2\n    x204 = a/2\n    x205 = a/2\n    x206 = a/2\n    x207 = a/2\n    x208 = a/2\n    x209 = a/2\n    x210 = a/2\n    x211 = a/2\n    x212 = a/2\n    x213 = a/2\n    x214 = a/2\n    x215 = a/2\n    x216 = a/2\n    x217 = a/2\n    x218 = a/2\n    x219 = a/2\n    x220 = a/2\n    x221 = a/2\n    x222 = a/2\n    x223 = a/2\n    x224 = a/2\n    x225 = a/2\n    x226 = a/2\n    x227 = a/2\n    x228 = a/2\n    x229 = a/2\n    x230 = a/2\n    x231 = a/2\n    x232 = a/2\n    x233 = a/2\n    x234 = a/2\n    x235 = a/2\n    x236 = a/2\n    x237 = a/2\n    x238 = a/2\n    x239 = a/2\n    x240 = a/2\n    x241 = a/2\n    x242 = a/2\n    x243 = a/2\n    x244 = a/2\n    x245 = a/2\n    x246 = a/2\n    x247 = a/2\n    x248 = a/2\n    x249 = a/2\n    x250 = a/2\n    x251 = a/"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if(a<=1):\n        return a\n    else:\n        if (a%2==0):\n            return (a/2)\n        else:\n            return (a+1)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    assert a >= 0, \"Input is not a positive integer.\"\n    p = int((-1 * (math.sqrt(a / 2))) + (2 * (a / 2)))\n    print(\"The perimeter of the regular pentagon is {}.\".format(p))\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # write your code here\n    area = 4 * a ** 2\n    return area\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # write your code here\n    l=int(a*3/4)\n    p=math.sqrt(l*(l-1))\n    return p\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    # write your code here\n    # a=2*(l*(l-1))/3\n    l=int(a*3/4)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_heptaagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptaagon from the length of its sides.\n    '''\n    # write your code here\n    l=int(a*3/4)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef area_heptaagon(a):\n    '''\n    Write a function to find the area of a regular heptaagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*3/4)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_heptaagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptaagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*3/4)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # write your code here\n    # a=2*(l*(l-1))/3\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # write your code here\n    # a=2*(l*(l-1))/3\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_heptaagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptaagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*3/4)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_heptaagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptaagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*3/4)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # write your code here\n    # a=2*(l*(l-1))/3\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # write your code here\n    # a=2*(l*(l-1))/3\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_heptaagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptaagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*3/4)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_heptaagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptaagon from the length of its sides.\n    '''\n    # write your code here\n    # a=3*l*l\n    l=int(a*3/4)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    # write your code here\n    # a=2*(l*(l-1))/3\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    # write your code here\n    # a=2*(l*(l-1))/3\n    l=int(a*2/3)\n    p=l*l*math.sqrt(l*l-1)\n    return p\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regula"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # check if side lengths are even\n    if a%2 == 0:\n        side_length = round(math.sqrt(a))\n        if side_length == round(math.sqrt(2*a)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= a:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef area_pentagon(side):\n    '''\n    Write a function to find the area of a regular pentagon from the side length.\n    '''\n    # check if side lengths are even\n    if side % 2 == 0:\n        side_length = round(side)\n        if side_length == round(math.sqrt(2*side)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    # check if side lengths are even\n    if a%2 == 0:\n        side_length = round(math.sqrt(a))\n        if side_length == round(math.sqrt(3*a)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= a:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef area_hexagon(side):\n    '''\n    Write a function to find the area of a regular hexagon from the side length.\n    '''\n    # check if side lengths are even\n    if side % 2 == 0:\n        side_length = round(side)\n        if side_length == round(math.sqrt(3*side)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef perimeter_hexaagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    # check if side lengths are even\n    if a%2 == 0:\n        side_length = round(a)\n        if side_length == round(math.sqrt(4*a)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= a:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef area_hexaagon(side):\n    '''\n    Write a function to find the area of a regular hexagon from the side length.\n    '''\n    # check if side lengths are even\n    if side % 2 == 0:\n        side_length = round(side)\n        if side_length == round(math.sqrt(5*side)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    # check if side lengths are even\n    if a%2 == 0:\n        side_length = round(math.sqrt(a))\n        if side_length == round(math.sqrt(7*a)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= a:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef area_octagon(side):\n    '''\n    Write a function to find the area of a regular octagon from the side length.\n    '''\n    # check if side lengths are even\n    if side%2 == 0:\n        side_length = round(side)\n        if side_length == round(math.sqrt(8*side)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef perimeter_rectangle(a):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    # check if side lengths are even\n    if a%2 == 0:\n        side_length = round(a)\n        if side_length == round(math.sqrt(9*a)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= a:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef area_rectangle(side):\n    '''\n    Write a function to find the area of a regular rectangle from the side length.\n    '''\n    # check if side lengths are even\n    if side%2 == 0:\n        side_length = round(side)\n        if side_length == round(math.sqrt(10*side)):\n            side_length += 1\n        else:\n            side_length += 2\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    else:\n        side = 1\n        while side <= side_length:\n            print(\"{:.1f}\".format(side), end=\" \")\n            side += 1\n        print(\"\\n\")\n    return side\ndef perimeter_diamond(a):\n    '''\n    Write a function to find the perimeter of a regular diamond from the length of its sides.\n    '''\n    # chec"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here\n    peri=math.pi*a**2\n    return peri\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a regular circle from the radius.\n    '''\n    # Write your code here\n    peri=3.14*(a**2)\n    return peri\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    # Write your code here\n    peri=math.sqrt(a**2)\n    return peri\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (math.sqrt(2*a*(3*a - 1) + 4*a**2) + math.sqrt(2*a**2 + 4*a*(3*a - 1)))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    dict = {}\n    count = 0\n    for char in s:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    for key in dict.keys():\n        count += dict[key]\n    print(count)\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # raise NotImplementedError\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # Code here\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    dic = dict()\n    for i in range(len(s)):\n        if s[i] in dic.keys():\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n    for i in dic:\n        print(i,dic[i])\n    return len(dic)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    total_count = 0\n    for i in range(0, len(s)):\n        if s[i] == \"s\":\n            total_count += 1\n    return total_count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count = count + 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    result = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            result = result + 1\n    return result\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Write your code here.\n    if not isinstance(test_tuple, tuple):\n        raise TypeError('tuple expected')\n    elif not all(isinstance(x, int) or isinstance(x, float) for x in test_tuple):\n        raise TypeError('tuple element has wrong type')\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Assigning data type to all elements in tuple\n    tuple_type = []\n    for i in test_tuple:\n        tuple_type.append(type(i))\n    \n    # Checking data type of each element of tuple\n    for i in range(len(tuple_type)):\n        if tuple_type[i] is not tuple:\n            if type(test_tuple[i]) is not tuple:\n                raise TypeError('All the elements in tuple must be of the same data type')\n    \n    # Returning data type of each element of tuple\n    return tuple_type\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)!= 2:\n        raise Exception('Each element must have only 2 values')\n    try:\n        for i in test_tuple:\n            if type(i)!= int or type(i)!= float or type(i)!= str:\n                raise Exception('All the values must be integers or floats or strings')\n    except:\n        raise Exception('Values must be integers, floats, and strings')\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    if type(test_tuple) == tuple:\n        for i in test_tuple:\n            if type(i)!= int:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i, tuple):\n            return 'Your inputs are not tuple'\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_of_element = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type_of_element:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) % 2 == 0:\n        # no negative, no 0\n        if len(test_tuple)!= len(set(test_tuple)):\n            raise Exception(\"One value appears more than twice in the tuple\")\n        else:\n            # no duplicate\n            pass\n    else:\n        # no negative, no 0\n        if len(test_tuple)!= len(set(test_tuple)):\n            raise Exception(\"One value appears more than twice in the tuple\")\n        else:\n            # no duplicate\n            pass\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i) is not int and type(i) is not float and type(i) is not complex:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)!= int:\n            raise TypeError(\"Error: 'int' type expected, {} found\".format(type(i)))\n    # return True if all the elements have the same data type or not\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i]) is not test_type:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Write your code here.\n    # Your code should be in an if statement.\n    if n == 0:\n        return False\n    elif arr[0] == x:\n        return True\n    elif arr[0] < x:\n        return is_majority(arr[1:], n, x)\n    else:\n        return is_majority(arr[1:], n, x) or is_majority(arr[1:], n, x)\n    "
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    array = []\n    \n    for i in range(n):\n        array.append(arr[i])\n    \n    array.sort()\n    \n    print(array)\n    \n    nums_count = {}\n    \n    for element in array:\n        if element in nums_count:\n            nums_count[element] += 1\n        else:\n            nums_count[element] = 1\n    \n    for key, val in nums_count.items():\n        if val >= n/2:\n            return element\n    \n    return None"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Pick the first element with a majority value.\n    for i in range(n):\n        if arr[i] == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n    if count/n > 0.75:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # initialise the count of the elements\n    count = 0\n    # create a map to keep track of the count of elements\n    # since the map contains only integers and the map does not contain duplicates\n    # we can simply iterate through each element in the map\n    for element in arr:\n        count += 1\n    # if the count of elements equals the length of the array\n    if n == count:\n        return True\n    # if the count of elements is less than the length of the array\n    # then, the element is not the majority element\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Write your code here\n    for i in range(n):\n        if arr[i] == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Will be true if the number of occurrences is greater than n/2\n    \n    if len(arr) == n:\n        # Count the occurrences and return the result\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        if count > n/2:\n            return True\n        else:\n            return False\n    else:\n        return False\n    "
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n    if count/n > int(1/n*n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    while left < right:\n        if arr[left] == x:\n            return False\n        if arr[right] == x:\n            return True\n        if arr[left] < arr[right]:\n            if arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n        else:\n            if arr[left] > arr[right]:\n                right -= 1\n            else:\n                left += 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    max_count = 0\n    count = 0\n    for i in range(n):\n        if arr[i] > x:\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n            if count == n/2:\n                return True\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n):\n        if (n & 1) == 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    from collections import Counter\n    n = int(n)\n    i = 0\n    while(n!= 0):\n        d = n%2\n        i = i + (d & 1)\n        n = n >> 1\n    if i == 0:\n        return 0\n    else:\n        return (i + 1)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    for i in range(n, n + 10):\n        if bin(i)[2:] == '0b':\n            count = 0\n        elif bin(i)[2:] == '1b':\n            count += 1\n        \n        if count == 10:\n            print(\"The number \", i, \" has 10 set bits.\\n\")\n        else:\n            print(\"The number \", i, \" does not have 10 set bits.\\n\")\n            "
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n!=0):\n        if (n & 1):\n            count += 1\n        n = (n >> 1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bit_count=0\n    while n!=0:\n        bit=n&1\n        if bit==1:\n            bit_count+=1\n        n=n>>1\n    return bit_count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #counts the number of set bits\n    i = 0\n    while n!= 0: \n        i = i + 1\n        if n & 1 == 1: \n            i = i + 1\n        n = n >> 1\n    return i\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits = 0\n    for i in range(n): \n        if n & 1: \n            bits += 1\n        n >>= 1 \n    return bits \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(len(n)):\n        if (n[i] == '0'):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    counter = 0\n    for i in range(1, n + 1):\n        if (n % i == 0):\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    for i in range(0,n):\n        if(n%2==0):\n            c = c+1\n    return c"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_lst = list(str)\n    str_lst[0],str_lst[-1],str_lst[1],str_lst[2],str_lst[3],str_lst[4],str_lst[5],str_lst[6],str_lst[7],str_lst[8],str_lst[9],str_lst[10],str_lst[11],str_lst[12],str_lst[13],str_lst[14],str_lst[15],str_lst[16],str_lst[17],str_lst[18],str_lst[19],str_lst[20],str_lst[21],str_lst[22],str_lst[23],str_lst[24],str_lst[25],str_lst[26],str_lst[27],str_lst[28],str_lst[29],str_lst[30],str_lst[31],str_lst[32],str_lst[33],str_lst[34],str_lst[35],str_lst[36],str_lst[37],str_lst[38],str_lst[39],str_lst[40],str_lst[41],str_lst[42],str_lst[43],str_lst[44],str_lst[45],str_lst[46],str_lst[47],str_lst[48],str_lst[49],str_lst[50],str_lst[51],str_lst[52],str_lst[53],str_lst[54],str_lst[55],str_lst[56],str_lst[57],str_lst[58],str_lst[59],str_lst[60],str_lst[61],str_lst[62],str_lst[63],str_lst[64],str_lst[65],str_lst[66],str_lst[67],str_lst[68],str_lst[69],str_lst[70],str_lst[71],str_lst[72],str_lst[73],str_lst[74],str_lst[75],str_lst[76],str_lst[77],str_lst[78],str_lst[79],str_lst[80],str_lst[81],str_lst[82],str_lst[83],str_lst[84],str_lst[85],str_lst[86],str_lst[87],str_lst[88],str_lst[89],str_lst[90],str_lst[91],str_lst[92],str_lst[93],str_lst[94],str_lst[95],str_lst[96],str_lst[97],str_lst[98],str_lst[99],str_lst[100],str_lst[101],str_lst[102],str_lst[103],str_lst[104],str_lst[105],str_lst[106],str_lst[107],str_lst[108],str_lst[109],str_lst[110],str_lst[111],str_lst[112],str_lst[113],str_lst[114],str_lst[115],str_lst[116],str_lst[117],str_lst[118],str_lst[119],str_lst[120],str_lst[121],str_lst[122],str_lst[123],str_lst[124],str_lst[125],str_lst[126],str_lst[127],str_lst[128],str_lst[129],str_lst[130],str_lst[131],str_lst[132],str_lst[133],str_lst[134],str_lst[135],str_lst[136],str_lst[137],str_lst[138],str_lst[139],str_lst[140],str_lst[141],str_lst[142],str_lst[143],str_lst[144],str_lst[145],str_lst[146],str_lst[147],str_lst[148],str_lst[149],str_lst[150],str_lst[151],str_lst[152],str_lst[153],str_lst[154],str_lst[155],str_lst[156],str_lst[157],str_lst[158],str_lst[159],str_lst[160],str_lst[161],str_lst[162],str_lst[163],str_lst[164],str_lst[165],str_lst[166],str_lst[167],str_lst[168],str_lst[169],str_lst[170],str_lst[171],str_lst[172],str_lst[173],str_lst[174],str_lst[175],str_lst[176],str_lst[177],str_lst[178],str_lst[179],str_lst[180],str_lst[181],str_lst[182],str_lst[183],str_lst[184],str_lst[185],str_lst[186],str_lst[187],str_lst[188],str_lst[189],str_lst[190],str_lst[191],str_lst[192],str_lst[193],str_lst[194],str_lst[195],str_lst[196],str_lst[197],str_lst[198],str_lst[199],str_lst[200],str_lst[201],str_lst[202],str_lst[203],str_lst[204],str_lst[205],str_lst[206],str_lst[207],str_lst[208],str_lst[209],str_lst[210],str_lst[211],str_lst[212],str_lst[213],str_lst[214],str_lst[215],str_lst[216],str_lst[217],str_lst[218],str_lst[219],str_lst[220],str_lst[221],str_lst[222],str_lst[223],str_lst[224],str_lst[225],str_lst[226],str_lst[227],str_lst[228],str_lst[229],str_lst[230],str_lst[231],str_lst[232],str_lst[233],str_lst[234],str_lst[235],str_lst[236],str_lst[237],str_lst[238],str_lst[239],str_lst[240],str_lst[241],str_lst[242],str_lst[243],str_lst[244],str_lst[245],str_lst[246],str_lst[247],str_lst[248],str_lst[249],str_lst[250],str_lst[251],str_lst[252],str_lst[253],str_lst[254],str_lst[255],str_lst[256],str_lst[257],str_lst[258],str_lst[259],str_lst[260],str_lst[261],str_lst[262],str_lst[263],str_lst[264],str_lst[265],str_lst[266],str_lst[267],str_lst[268],str_lst[269],str_lst[270],str_lst[271],str_lst[272],str_lst[273],str_lst[274],str_lst[275],str_lst[276],str_lst[277],str_lst[278],str_lst[279],str_lst[280],str_lst[281],str_lst[282],str_lst[283]"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)%2!= 0:\n        return f\"{str[:-1]} {str[-1]}\"\n    else:\n        return f\"{str[:-1]} {str[-1]} {str[-1]}\"\n    \n    \ndef even_values_string(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    if len(str)%2 == 0:\n        return f\"{str[:-1]} {str[-1]}\"\n    else:\n        return f\"{str[:-1]} {str[-1]} {str[-1]}\"\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # split string\n    split_string = str.split(\" \")\n    # clean string\n    clean_string = []\n    for i in range(0, len(split_string)):\n        clean_string.append(split_string[i][0:2])\n    # find the odd index\n    return clean_string\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = []\n    if len(str) % 2 == 1:\n        return res\n    for i in range(0, len(str), 2):\n        if str[i] % 2 == 1:\n            res.append(str[i])\n    return \"\".join(res)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    count = 0\n    for i in str:\n        if int(i) % 2 == 1:\n            new_str += i\n            count += 1\n        else:\n            new_str += i\n    return new_str, count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = [str[i] for i in range(len(str)) if i % 2 == 0]\n    return ''.join(lst)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = str.strip()\n    odd_count = 0\n    for i in range(len(new_str)):\n        if int(new_str[i]) % 2 == 1:\n            odd_count += 1\n    if odd_count == 0:\n        return 'Odd Index'\n    else:\n        return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    new_list = []\n    for element in str.split(\",\"):\n        if int(element[0]) % 2 == 1:\n            new_list.append(element)\n    return \",\".join(new_list)"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(sorted(str, key=lambda x: str.count(x), reverse=True))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # your code here\n    odd = 0\n    for i in range(len(str)):\n        if str[i % 2] % 2 == 1:\n            str[i] = str[i] % 2\n            odd = odd + 1\n        if odd == 2:\n            break\n    return str\nprint(odd_values_string(\"hello\"))\nprint(\"hello\" + \"loudmello\" + \"soups\")"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c: \n        return a \n    elif b>a and b>c:\n        return b\n    else: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a if a<b and a<c else b if b<c else c\ndef main():\n    '''\n    Uncomment this line to run the program\n    '''\n    print(min_of_three(2,5,4))\n    print(min_of_three(1,5,7))\n    print(min_of_three(3,9,8))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c==0:\n        return 0\n    elif a>b and b>c:\n        return a\n    elif a>b and c>b:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c: \n        return a\n    elif b > a and b > c: \n        return b\n    elif c > a and c > b: \n        return c \n    else: \n        return 0 \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < c: \n        return b \n    elif c < b: \n        return c \n    else: \n        return None\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    elif b > c:\n        if b > a:\n            return b\n        else:\n            return c\n    else:\n        if c > a:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # all bits in range [l,r] are set in the given range\n    for i in range(l,r+1):\n        if i & 1 == 0:\n            print(bin(i)[2:])\n    \n    # all bits not in range are not set in the given range\n    return not any(i & 1 == 0 for i in range(l, r+1))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #add all bits in the given range\n    all_bits=0\n    for i in range(l,r+1):\n        all_bits=all_bits+i\n    return all_bits!=0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if l < 0 or l > r or r < 0 or r > n:\n        return False\n    else:\n        return True\n    \ndef all_Bits_Not_In_The_Given_Range(n,l,r): \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    if l < 0 or l > r or r < 0 or r > n:\n        return False\n    else:\n        return not all_Bits_Set_In_The_Given_Range(n,l,r)\n    \ndef check_Bits_Set_In_The_Given_Range(n,l,r): \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    if l < 0 or l > r or r < 0 or r > n:\n        return False\n    else:\n        return all_Bits_Not_In_The_Given_Range(n,l,r)\n    \ndef all_Bits_Not_Set_In_The_Given_Range(n,l,r): \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if l < 0 or l > r or r < 0 or r > n:\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l,r)\n    \ndef is_one_to_eight_bit(n): \n    '''\n    Return whether number n is one to eight bit (True or False).\n    '''\n    \n    if n == 0 or n == 1: \n        return True\n    else: \n        return False\n    \ndef is_one_to_n_bits(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_two_bits(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_four_bits(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_six_bits(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_eight_bits(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_four_bits(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_n_bits(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_two_bits_x2(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_four_bits_x2(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_six_bits_x2(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_eight_bits_x2(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_four_bits(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_n_bits_x2(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_two_bits_x3(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_four_bits_x3(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_six_bits_x3(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_eight_bits_x3(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_four_bits(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_n_bits_x3(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_two_bits_x4(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_four_bits_x4(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_six_bits_x4(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_eight_bits_x4(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_four_bits(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_n_bits_x4(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_two_bits_x5(n): \n    '''\n    Return whether number n is one to eight bit.\n    '''\n    \n    if is_one_to_eight_bit(n): \n        return True\n    else: \n        return False\n    \ndef is_one_to_four_bits_x5(n): \n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(0,l):\n        if n & (1 << i):\n            print('-', end=\"\")\n        else:\n            print('*', end=\"\")\n    print()\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<=n<=r:\n        for i in range(l,r+1):\n            if i & n == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n):\n        if n%2 == 0:\n            if (l < (l+r) and (l+r)<=n):\n                if (l < l + (l+r)//2 and (l+r)//2 <= n):\n                    print(l,r)\n                    print(l,r)\n                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                        if (l < l + (l+r)//2 and (l+r)//2 <= n):\n                            print(l,r)\n                            print(l,r)\n                            if (l < (l+r)//2 and (l+r)//2 <= n):\n                                print(l,r)\n                                print(l,r)\n                                if (l < (l+r)//2 and (l+r)//2 <= n):\n                                    print(l,r)\n                                    print(l,r)\n                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                        print(l,r)\n                                        print(l,r)\n                                        print(l,r)\n                                        print(l,r)\n                                        if (l < (l+r)//2 and (l+r)//2 <= n):\n                                            print(l,r)\n                                            print(l,r)\n                                            print(l,r)\n                                            if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                print(l,r)\n                                                print(l,r)\n                                                if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                    print(l,r)\n                                                    print(l,r)\n                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                        print(l,r)\n                                                        print(l,r)\n                                                        print(l,r)\n                                                        if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                            print(l,r)\n                                                            print(l,r)\n                                                            if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                print(l,r)\n                                                                print(l,r)\n                                                                if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                    print(l,r)\n                                                                    print(l,r)\n                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                        print(l,r)\n                                                                        print(l,r)\n                                                                        if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                            print(l,r)\n                                                                            print(l,r)\n                                                                            if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                print(l,r)\n                                                                                print(l,r)\n                                                                                if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                print(l,r)\n                                                                                print(l,r)\n                                                                                if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                    print(l,r)\n                                                                                    print(l,r)\n                                                                                    print(l,r)\n                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                        print(l,r)\n                                                                                        print(l,r)\n                                                                                        if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                            print(l,r)\n                                                                                            print(l,r)\n                                                                                            print(l,r)\n                                                                                            if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                print(l,r)\n                                                                                                print(l,r)\n                                                                                                if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                    print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < (l+r)//2 and (l+r)//2 <= n):\n                                                                                                        print(l,r)\n                                                                                                    print(l,r)\n                                                                                                    if (l < ("
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    assert(l <= r)\n    \n    #declaring a set\n    set_=set()\n    \n    #if the list is empty\n    if len(l) == 0 or len(r) == 0:\n        return \"We are set to the given range\"\n    \n    #iterating through the range\n    for i in range(l,r):\n        set_.add(bin(i)[2:].zfill(n))\n    \n    return f\"{len(set_)==n}\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if l == r:\n        print('given range: ', n, l, r,'are all set.')\n        return\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n <= 0 :\n        return False\n    if n <= 32 :\n        return l <= n <= r\n    if n > (1<<32)-1:\n        return False\n    return all(bits & (1<<i)!= 0 for i, bits in enumerate(bin(n)[2:].zfill(32)))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (l<<1)+(l<<1)+(r<<1) in range(32)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not n: return arr\n    if not arr: return arr\n    if arr[0] < 0: arr[0] = -arr[0]\n    if arr[-1] < 0: arr[-1] = -arr[-1]\n    arr[0] = arr[-1]\n    arr[-1] = arr[0]\n    arr = arr[1:n]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #Your code here\n    arr_copy = arr.copy()\n    arr_copy.reverse()\n    for i in range(0, len(arr)):\n        if arr_copy[i] < 0:\n            arr_copy[i] *= -1\n        arr_copy.insert(i, 0)\n        arr_copy.pop()\n    return arr_copy"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    positive_index = []\n    negative_index = []\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative.append(i)\n            negative_index.append(count)\n            positive.append(i)\n            positive_index.append(count)\n            count += 1\n        else:\n            positive.append(i)\n            positive_index.append(count)\n            negative.append(i)\n            negative_index.append(count)\n            count += 1\n    arr[positive_index[0]], arr[negative_index[0]] = arr[negative_index[0]], arr[positive_index[0]]\n    for i in range(count-1, -1, -1):\n        arr[negative_index[i]], arr[positive_index[i]] = arr[positive_index[i]], arr[negative_index[i]]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # find the indices of all negative elements\n    neg_indices = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_indices.append(i)\n    # rearrange positive and negative elements\n    for i in range(len(neg_indices)):\n        pos_indices = neg_indices[i:]\n        neg_indices = neg_indices[:len(pos_indices)]\n        for index in pos_indices:\n            arr[index] = -arr[index]\n        for index in neg_indices:\n            arr[index] = arr[index] * -1\n    # sort the rest of the array, and return the result\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    for elem in arr:\n        if elem > 0:\n            positive.append(elem)\n    negative = []\n    for elem in arr:\n        if elem < 0:\n            negative.append(elem)\n    rearrange_array = [negative] + positive + negative\n    if arr == negative:\n        rearrange_array = reversed(rearrange_array)\n    return list(rearrange_array)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n==1: return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr[:n]\n    arr.reverse()\n    arr.sort()\n    print(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Write your code here.\n    arr = sorted(arr)\n    arr_0 = []\n    arr_1 = []\n    flag = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr_0.append(arr[i])\n        else:\n            arr_1.append(arr[i])\n    arr_0.append(0)\n    arr_1.append(0)\n    arr_1.reverse()\n    arr_0.extend(arr_1)\n    arr_1.reverse()\n    for i in range(n):\n        if arr_0[i] > arr_1[i]:\n            arr[i] = arr_0[i]\n        else:\n            arr[i] = arr_1[i]\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    return ar"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO: create a new array for re-arranging the elements\n    # use negative and positive to preserve order\n    # use a negative to re-arrange elements in the opposite direction\n    # use an odd number to re-arrange elements in the opposite direction\n    # the new array can be created by concatenating a shorter array and the new array\n    # this is effectively to replace all negative elements with positive and all positive elements with negative\n    arr = list(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j] < 0:\n                arr[j] = -arr[j]\n            if arr[j] > 0:\n                arr[j] = -arr[j]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    a = arr[:]\n    for i in range(n):\n        if a[i] < 0:\n            a[i] *= -1\n    return a\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #Write your code here\n    newstring = ''\n    for i in str1:\n        if i =='':\n            newstring += char\n        else:\n            newstring += i\n    return newstring\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    char_list=list(char)\n    count=0\n    for char in str1:\n        if char==' ':\n            char_list[count]=char\n            count+=1\n        else:\n            count+=1\n    return ''.join(char_list)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i]==' ':\n            str1=str1.replace(' ','%20')\n    return str1\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == char:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"(\",\"\")\n    str1 = str1.replace(\")\",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,'')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            new_str += char\n        else:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largs = []\n    for x in list1:\n        if len(x)>n:\n            x = x[:n]\n            heapq.heapreplace(largs,x)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,[-i,i])\n    sorted_list = []\n    for i in range(n):\n        sorted_list.append(heapq.heappop(heap)[1])\n    return sorted_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a=list1.copy()\n    heapq.heapify(a)\n    for x in range(0,n):\n        heapq.heappush(a,-heapq.heappop(a))\n    return a\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sortedList = sorted(list1, reverse=True)\n    sortedList = sortedList[:n]\n    return sortedList\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    heapq.nlargest(n, list1)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n        \n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    numlist = []\n    for i in range(n):\n        numlist.append(list1[i])\n    numlist.sort(reverse=True)\n    return numlist\ndef num_list_largest(numlist):\n    '''\n    Given a list of numbers, return the n largest numbers in that list.\n    '''\n    num_list = []\n    for i in range(len(numlist)):\n        num_list.append(numlist[i])\n    num_list.sort()\n    return num_list\ndef num_list_num_largest(num_list):\n    '''\n    Given a list of numbers, return the n largest numbers in that list.\n    '''\n    num_list = []\n    for i in range(len(num_list)):\n        num_list.append(num_list[i])\n    num_list.sort(reverse=True)\n    return num_list\ndef move_max_end_end(num_list):\n    '''\n    Given a list of numbers, return a new list that consists of all the numbers except the largest one from the list.\n    '''\n    new_num_list = []\n    for i in range(len(num_list)):\n        if i!= 0:\n            if num_list[i] > num_list[i-1]:\n                new_num_list.append(num_list[i])\n    return new_num_list\ndef bubble_sort_num_largest(num_list):\n    '''\n    Given a list of numbers, return a new list that has the smallest numbers in the list and the largest numbers in the list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i] not in new_list:\n            new_list.append(num_list[i])\n    num_list = new_list\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if num_list[j] > num_list[i]:\n                temp = num_list[j]\n                num_list[j] = num_list[i]\n                num_list[i] = temp\n    return num_list\ndef bubble_sort_num_num_largest(num_list):\n    '''\n    Given a list of numbers, return a new list that has the smallest numbers in the list and the largest numbers in the list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i] not in new_list:\n            new_list.append(num_list[i])\n    num_list = new_list\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if num_list[j] > num_list[i]:\n                temp = num_list[j]\n                num_list[j] = num_list[i]\n                num_list[i] = temp\n    return num_list\ndef bubble_sort_num_largest_end(num_list):\n    '''\n    Given a list of numbers, return a new list that has the smallest numbers in the list and the largest numbers in the list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i] not in new_list:\n            new_list.append(num_list[i])\n    num_list = new_list\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if num_list[j] > num_list[i]:\n                temp = num_list[j]\n                num_list[j] = num_list[i]\n                num_list[i] = temp\n    return num_list\ndef bubble_sort_num_num_num_largest(num_list):\n    '''\n    Given a list of numbers, return a new list that has the smallest numbers in the list and the largest numbers in the list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i] not in new_list:\n            new_list.append(num_list[i])\n    num_list = new_list\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if num_list[j] > num_list[i]:\n                temp = num_list[j]\n                num_list[j] = num_list[i]\n                num_list[i] = temp\n    return num_list\ndef bubble_sort_num_num_num_num_largest(num_list):\n    '''\n    Given a list of numbers, return a new list that has the smallest numbers in the list and the largest numbers in the list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i] not in new_list:\n            new_list.append(num_list[i])\n    num_list = new_list\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if num_list[j] > num_list[i]:\n                temp = num_list[j]\n                num_list[j] = num_list[i]\n                num_list[i] = temp\n    return num_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # initialise heap with values in descending order\n    heap = []\n    # create empty array for new values\n    for i in list1:\n        heapq.heappush(heap,i)\n    # return list of numbers\n    return heapq.nlargest(n, heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    x=list1.copy()\n    x.sort(reverse=True)\n    return x[0:n]\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    u = r * r * 3.141592 / 4\n    A = ((2 * (r ** 2)) + (4 * r * (h ** 2)))/(4 * r * u)\n    return A\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    c_u = (3.14159*r**2)/2\n    c_r = (3.14159*h**2)/2\n    r_c = (r**2) + (h**2)\n    C_h = (c_r**2) + (c_u*r_c)\n    return (C_h)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s=0\n    #define radius and height of the cylinder\n    r=r\n    h=h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*(np.pi*r))*h*(1-np.cos(h/2))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #volume of a cylinder (m^3)\n    def volume_cylinder(r,h):\n        return 3.14 * (r*r)*h\n    #volume of the face of a cylinder\n    def volume_face(r,h):\n        return r*h\n    #volume of the other side of a cylinder\n    def volume_other_side(r,h):\n        return (r*r*h) + (r*(r*r-1))\n    #volume of the parallel side of a cylinder\n    def volume_parallel(r,h):\n        return (r*r*h) + (r*(r-1))\n    #volume of the top of a cylinder\n    def volume_top(r,h):\n        return (r*(r*r-1))\n    #volume of the bottom of a cylinder\n    def volume_bottom(r,h):\n        return (r*r*h)\n    #volume of the other side of a cylinder\n    def volume_other_side_cylinder(r,h):\n        return volume_cylinder(r,h)\n    #volume of the parallel side of a cylinder\n    def volume_parallel_cylinder(r,h):\n        return volume_face(r,h) + volume_other_side_cylinder(r,h)\n    #volume of the top of a cylinder\n    def volume_top_cylinder(r,h):\n        return volume_cylinder(r,h) + volume_other_side_cylinder(r,h)\n    #volume of the bottom of a cylinder\n    def volume_bottom_cylinder(r,h):\n        return volume_cylinder(r,h) + volume_other_side_cylinder(r,h) + volume_parallel_cylinder(r,h)\n    #volume of the other side of a cylinder\n    def volume_other_side_cylinder_cylinder(r,h):\n        return volume_cylinder(r,h) + volume_other_side_cylinder(r,h) + volume_parallel_cylinder(r,h) + volume_top_cylinder(r,h)\n    #volume of the parallel side of a cylinder\n    def volume_parallel_cylinder_cylinder(r,h):\n        return volume_cylinder(r,h) + volume_other_side_cylinder(r,h) + volume_parallel_cylinder(r,h) + volume_top_cylinder(r,h) + volume_bottom_cylinder(r,h)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #base\n    a = (4*(math.pi)*(r**2))\n    print(\"The surface area of the cylinder with radius {} and height {} is: {}\".format(r,h,a))\n    print(\"The surface area of the cylinder with radius {} and height {} is: {}\".format(r,h,2*(math.pi)*(r**2)))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    c = (3/4)*(r**2)\n    S = (3*h**2)\n    L = 3*c*S\n    return L\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*np.pi*r**2)*h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #determine the \"radius\" of the cylinder (in meters)\n    R = r*0.01\n    #define the aspect ratio of the cylinder\n    A = h*R/r\n    #define the \"slope\" of the cylinder\n    S = A/h\n    #define the \"cylinder_thickness\"\n    T = (A*0.5)/(S*S*0.5)\n    #return the area\n    return T\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (3.142*l**3)"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    n = int(l/2)\n    return n*n*n\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for x in range(l, 0, -1):\n        volume += x * x * x\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # your code goes here\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (3.141592653589793*l*l)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 4*np.pi*l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l**3)*(4*l**2)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(f'Cube volume of length {l} is {volume(l)}')\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if (n == 0): return 0\n    elif (n % 2 == 0): \n        return n\n    else: return n + 1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #Python code\n    num=0\n    while n>0:\n        if n&1==0:\n            num+=1\n        n=n//2\n    print(num)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n: \n        if n & 2 == 0:\n            print( 'even bit: ', n, '=', n | 2)\n            n = n | 2\n        else: \n            print( 'odd bit: ', n, '=', n & 2)\n            n = n & 2\n        print (n)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n: \n        if n & 1: \n            print(1, end = \"\")\n        else: \n            print(0, end = \"\")\n        n = n >> 1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = \"\"\n    i = 0\n    while i <= n:\n        if i % 2 == 0:\n            result = result + \"1\"\n        else:\n            result = result + \"0\"\n        i = i + 1\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: return 0\n    return n & (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        raise Exception(\"n must be non-negative\")\n    if n <= 0:\n        raise Exception(\"n must be positive\")\n    \n    even_bits = 0\n    while n:\n        if n & 1:\n            even_bits += 1\n        n >>= 1\n    print(even_bits)\n    "
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0xffff\n    m = n ^ 0xffff\n    return m\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # print(f\"n = {n}, even_bit_set_number(n) = {even_bit_set_number(n)}\")\n    for i in range(2**(len(str(n))-1)):\n        if i % 2 == 0:\n            even_bit_set_number(i)\n            # even_bit_set_number(i)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even = 0\n    for i in range(n): \n        if (i % 2 == 0): \n            even += 1\n    return even \n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # x = test_list\n    # x = [(1, 1), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (4, 4), (4, 2), (4, 3), (4, 1)]\n    # x = [(1, 1), (1, 2), (1, 3), (1, 4), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (4, 4), (4, 2), (4, 3), (4, 1)]\n    # x = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5), (\"f\", 6), (\"g\", 7), (\"h\", 8), (\"i\", 9), (\"j\", 10), (\"k\", 11), (\"l\", 12), (\"m\", 13), (\"n\", 14), (\"o\", 15), (\"p\", 16), (\"q\", 17), (\"r\", 18), (\"s\", 19), (\"t\", 20), (\"u\", 21), (\"v\", 22), (\"w\", 23), (\"x\", 24), (\"y\", 25), (\"z\", 26), (\"0\", 27), (\"1\", 28), (\"2\", 29), (\"3\", 30), (\"4\", 31), (\"5\", 32), (\"6\", 33), (\"7\", 34), (\"8\", 35), (\"9\", 36), (\"10\", 37), (\"11\", 38), (\"12\", 39), (\"13\", 40), (\"14\", 41), (\"15\", 42), (\"16\", 43), (\"17\", 44), (\"18\", 45), (\"19\", 46), (\"20\", 47), (\"21\", 48), (\"22\", 49), (\"23\", 50), (\"24\", 51), (\"25\", 52), (\"26\", 53), (\"27\", 54), (\"28\", 55), (\"29\", 56), (\"30\", 57), (\"31\", 58), (\"32\", 59), (\"33\", 60), (\"34\", 61), (\"35\", 62), (\"36\", 63), (\"37\", 64), (\"38\", 65), (\"39\", 66), (\"40\", 67), (\"41\", 68), (\"42\", 69), (\"43\", 70), (\"44\", 71), (\"45\", 72), (\"46\", 73), (\"47\", 74), (\"48\", 75), (\"49\", 76), (\"50\", 77), (\"51\", 78), (\"52\", 79), (\"53\", 80), (\"54\", 81), (\"55\", 82), (\"56\", 83), (\"57\", 84), (\"58\", 85), (\"59\", 86), (\"60\", 87), (\"61\", 88), (\"62\", 89), (\"63\", 90), (\"64\", 91), (\"65\", 92), (\"66\", 93), (\"67\", 94), (\"68\", 95), (\"69\", 96), (\"70\", 97), (\"71\", 98), (\"72\", 99), (\"73\", 100), (\"74\", 101), (\"75\", 102), (\"76\", 103), (\"77\", 104), (\"78\", 105), (\"79\", 106), (\"80\", 107), (\"81\", 108), (\"82\", 109), (\"83\", 110), (\"84\", 111), (\"85\", 112), (\"86\", 113), (\"87\", 114), (\"88\", 115), (\"89\", 116), (\"90\", 117), (\"91\", 118), (\"92\", 119), (\"93\", 120), (\"94\", 121), (\"95\", 122), (\"96\", 123), (\"97\", 124), (\"98\", 125), (\"99\", 126), (\"100\", 127), (\"101\", 128), (\"102\", 129), (\"103\", 130), (\"104\", 131), (\"105\", 132), (\"106\", 133), (\"107\", 134), (\"108\", 135), (\"109\", 136), (\"110\", 137), (\"111\", 138), (\"112\", 139), (\"113\", 140), (\"114\", 141), (\"115\", 142), (\"116\", 143), (\"117\", 144), (\"118\", 145), (\"119\", 146), (\"120\", 147), (\"121\", 148), (\"122\", 149), (\"123\", 150), (\"124\", 151), (\"125\", 152), (\"126\", 153), (\"127\", 154), (\"128\", 155), (\"129\", 156), (\"130\", 157), (\"131\", 158), (\"132\", 159), (\"133\", 160), (\"134\", 161), (\"135\", 162), (\"136\", 163), (\"137\", 164), (\"138\", 165), (\"139\", 166), (\"140\", 167), (\"141\", 168), (\"142\", 169), (\"143\", 170), (\"144\", 171), (\"145\", 172), (\"146\", 173), (\"147\", 174), (\"148\", 175), (\"149\", 176), (\"150\", 177), (\"151\", 178), (\"152\", 179), (\"153\", 180), (\"154\", 181), (\"155\", 182), (\"156\", 183), (\"157\", 184), (\"158\", 185), (\"159\", 186), (\"160\", 187), (\"161\", 188), (\"162\", 189), (\"163\", 190), (\"164\", 191), (\"165\", 192), (\"166\", 193), (\"167\", 194), (\"168\", 195), (\"169\", 196), (\"170\", 197), (\"171\", 198), (\"172\", 199), (\"173\", 200), (\"174\", 201), (\"175\", 202), (\"176\", 203), (\"177\", 204), (\"178\", 205), (\"179\", 206), (\"180\", 207), (\"181\", 208), (\"182\", 209), (\"183\", 210), (\"184\", 211), (\"185\", 212), (\"186\", 213), (\"187\", 214), (\"188\", 215), (\"189\", 216), (\"190\", 217), (\"191\", 218), (\"192\", 219), (\"193\", 220), (\"194\", 221), (\"195\", 222), (\"196\", 223), (\"197\", 224), (\"198\", 225), (\"199\", 226), (\"200\", 227), (\"201\", 228), (\"202\", 229), (\"203\", 230), (\"204\", 231), (\"205\", 232), (\"206\", 233), (\"207\", 234), (\"208\", 235), (\"209\", 236), (\"210\", 237), (\"211\", 238), (\"212\", 239), (\"213\", 240), (\"214\", 241), (\"215\", 242), (\"216\", 243), (\"217\", 244), (\"218\", 245), (\"219\", 246), (\"220\", 247), (\"221\", 248), (\"222\", 249), (\"223\", 250), (\"224\", 251), (\"225\", 252), (\"226\", 253), (\"227\", 254), (\"228\", 255), (\"229\", 256), (\"230\", 257), (\"231\", 258), (\"232\", 259), (\"233\", 260), (\"234\", 261), (\"235\", 262), (\"236\", 263), (\"237\", 264), (\"238\", 265), (\"239\", 266), (\"240\", 267), (\"241\", 268), (\"242\", 269), (\"243\", 270), (\"244\", 271), (\"245\", 272), (\"246\", 273), (\"247\", 274), (\"248\", 275), (\"249\", 276), (\"250\", 277), (\"251\", 278), (\"252\", 279), (\"253\", 280), (\"254\", 281), (\"255\", 282), (\"256\", 283), (\"257\", 284), (\"258\", 285), (\"259\", 286), (\"260\", 287), (\"261\", 288), (\"262\", 289), (\"263\", 290), (\"264\", 291), (\"265\", 292), (\"266\", 293), (\"267\", 294), (\"268\", 295), (\"269\", 296), (\"270\", 297), (\"271\", 298), (\"272\", 299), (\"273\", 300), (\"274\", 301), (\"275\", 302), (\"276\", 303), (\"277\", 304), (\"278\", 305), (\"279\", 306), (\"280\", 307), (\"281\", 308), (\"282\", 309), (\"283\", 310), (\"284\", 311), (\"285\", 312), (\"286\", 313), (\"287\", 314), (\"288\", 315), (\"289\", 316), (\"290\", 317), (\"291\", 318), (\"292\", 319), (\"293\", 320), (\"294\", 321), (\"295\", 322), (\"296\", 323), (\"297\", 324), (\"298\", 325), (\"299\", 326), (\"300\", 327), (\"301\", 328), (\"302\", 329), (\"303\", 330), (\"304\", 331), (\"305\", 332), (\"306\", 333), (\"307\", 334), (\"308\", 335), (\"309\", 336), (\"310\", 337), (\"311\", 338), (\"312\", 339), (\"313\", 340), (\"314\", 341), (\"315\", 342), (\"316\", 343), (\"317\", 344), (\"318\", 345), (\"319\", 346), (\"320\", 347), (\"321\", 348), (\"322\", 349), (\"323\", 350), (\"324\", 351), (\"325\", 352), (\"326\", 353), (\"327\", 354), (\"328\", 355), (\"329\", 356), (\"330\", 357), (\"331\", 358), (\"332\", 359), (\"333\", 360), (\"334\", 361), (\"335\", 362), (\"336\", 363), (\"337\", 364), (\"338\", 365), (\"339\", 366), (\"340\", 367), ("
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        d[i] = test_list.count(i)\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    all_occurences = {}\n    \n    #Iterate through the tuples and count occurences\n    for tuple in test_list:\n        all_occurences[tuple] = all_occurences.get(tuple, 0) + 1\n    \n    #Return a dictionary\n    return all_occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    def make_dict(tup):\n        return {i: tup.count(i) for i in tup}\n    test_list_of_tuples = [(x[0], make_dict(x[1])) for x in test_list]\n    d = Counter(test_list_of_tuples)\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #Your code here\n    counter = Counter(test_list)\n    return counter\n    \n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    unique_tuple = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = list(test_list)\n    d = {}\n    for i in test_list:\n        if i[0] in d.keys():\n            d[i[0]] += 1\n        else:\n            d[i[0]] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_count = Counter(tuple(map(lambda tuple: tuple[1], test_list))).most_common()\n    return occurence_count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    from collections import Counter\n    c = Counter(str)\n    count = 0\n    for i,j in c.items():\n        if j > 1:\n            count += 1\n    return count\n    \n    \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    m = n-1\n    count = 0\n    # if the len is 0 or less then it will return 0 as it is false\n    if n == 0:\n        return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_list = []\n    for index in range(1, len(str) + 1):\n        temp = 0\n        for i in range(0, len(str) - index + 1):\n            if str[i:i + index] not in substring_list:\n                temp += 1\n        substring_list.append(temp)\n    return substring_list\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code goes here\n    # initialize count as 0\n    count = 0\n    \n    # traverse string \n    for i in range(len(str)): \n        # check if each character is not blank \n        if str[i] == \" \": \n            # if char is blank, check if it's not in str \n            if str[i] not in str: \n                # if it is, increment count \n                count += 1\n            # else if it is, check for the count of non-blank \n            else: \n                # if the non-blank character is in the string, update the count \n                count += len(str[i+1:])\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    #Your code here\n    count=0\n    for i in range(len(str)-1):\n        if str[i]==str[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    c=0\n    for i in range(len(str)-1):\n        if str[i]==str[i+1] or str[i]=='a':\n            c=c+1\n    return c\n    \nstr=input(\"enter string\")\nprint(number_of_substrings(str))\n        \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(len(str)):\n        if str[i] == str[i+1] or str[i] == str[i-1]:\n            substrings+=1\n    return substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def substring_counter(str):\n        \"\"\" Returns the number of substrings of string'str' that are'str' \"\"\"\n        counter = 0\n        for i in range(0, len(str)):\n            for j in range(i+1, len(str)):\n                if (str[i:j] == str[i:j].replace('.', '')):\n                    counter += 1\n        return counter\n    \n    def is_long_string(str):\n        \"\"\" Returns True if'str' is a string longer than 10 characters \"\"\"\n        if len(str) > 10:\n            return True\n        else:\n            return False\n    \n    def substrings(str):\n        \"\"\" Returns a set of all substring pairs \"\"\"\n        substrings = set()\n        for i in range(0, len(str)):\n            for j in range(i+1, len(str)):\n                substring = str[i:j]\n                if substring_counter(substring) > 0:\n                    substrings.add((substring, substring_counter(substring)))\n        return substrings\n    \n    if is_long_string(str):\n        return 0\n    \n    else:\n        substrings = substrings(str)\n        for substring in substrings:\n            if substring[0] == str[0:10]:\n                return len(substring[1]) + len(str) - 10\n        return 0\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # create a empty list\n    list_of_substrings = []\n    count = 0\n    for i in range(0,len(str)):\n        # find the first and last characters of each substring\n        start = str[i]\n        end = str[i+1]\n        # count the number of elements in each substring\n        count_substr = str.count(str[i])\n        # if there are more than 1 characters\n        if count_substr > 1:\n            # if the substring starts from start, and end is a '.'\n            if str[i] == '.' and str[i+1] == '.':\n                count += count_substr\n                list_of_substrings.append(count_substr)\n                count = 0\n        else:\n            # if there are 1 character, append the count as a string\n            list_of_substrings.append(str[i])\n    return len(list_of_substrings)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m > n: \n        return 0 \n    else: \n        total_sequences = 0\n        for sequence in range(1,m+1): \n            if sequence%2 == 0: \n                total_sequences += m\n            else: \n                total_sequences += n\n        return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 0:\n        raise ValueError('m must be >= 0')\n    if n < 0:\n        raise ValueError('n must be >= 0')\n    return 1 + sum([1 for x in range(n) if (x - 1) % 2 == 0]) \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    counter = 0\n    for i in range(1, n + 1):\n        if m >= n:\n            break\n        if m % 2 == 1:\n            counter += 1\n        if n % 2 == 1:\n            counter += 1\n        if n % 2 == 0:\n            counter += 1\n        m = m // 2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if (m==0 or n==0):\n        return 0\n    elif (m<0 or n<0):\n        return \"Invalid Input\"\n    else:\n        if(m!=n):\n            return \"Invalid Input\"\n        else:\n            return m+n\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m * (m - 1) // 2 - (n - m) * (n - m) // 2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    \n    if m == n:\n        return 1\n    \n    for i in range(m, n+1):\n        if i <= m and (i % 2 == 1 or i % 2 == 0):\n            continue\n        else:\n            if i == 2*(m-1):\n                total_sequences += 1\n            else:\n                total_sequences += get_total_number_of_sequences(i, i+1)\n    \n    return total_sequences\n    \nprint(get_total_number_of_sequences(10, 9)) # should return 8\nprint(get_total_number_of_sequences(10, 15)) # should return 8\nprint(get_total_number_of_sequences(10, 45)) # should return 0\nprint(get_total_number_of_sequences(1, 2)) # should return 2\nprint(get_total_number_of_sequences(2, 10)) # should return 1\nprint(get_total_number_of_sequences(3, 4)) # should return 2\nprint(get_total_number_of_sequences(10, 45)) # should return 2"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Write your code here\n    count = 0\n    for i in range(m-1):\n        count += 2 * n\n    count += m - 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # to be written in real life\n    # num_possibilities = sum(range(0, m+1))\n    # num_possibilities = sum([(m - 1) * i for i in range(m+1)])\n    # num_possibilities = sum([(m - 2) * i for i in range(m+2)])\n    # num_possibilities = sum([(m - 3) * i for i in range(m+3)])\n    # num_possibilities = sum([(m - 4) * i for i in range(m+4)])\n    # num_possibilities = sum([(m - 5) * i for i in range(m+5)])\n    # num_possibilities = sum([(m - 6) * i for i in range(m+6)])\n    # num_possibilities = sum([(m - 7) * i for i in range(m+7)])\n    # num_possibilities = sum([(m - 8) * i for i in range(m+8)])\n    # num_possibilities = sum([(m - 9) * i for i in range(m+9)])\n    # num_possibilities = sum([(m - 10) * i for i in range(m+10)])\n    # num_possibilities = sum([(m - 11) * i for i in range(m+11)])\n    # num_possibilities = sum([(m - 12) * i for i in range(m+12)])\n    # num_possibilities = sum([(m - 13) * i for i in range(m+13)])\n    # num_possibilities = sum([(m - 14) * i for i in range(m+14)])\n    # num_possibilities = sum([(m - 15) * i for i in range(m+15)])\n    # num_possibilities = sum([(m - 16) * i for i in range(m+16)])\n    # num_possibilities = sum([(m - 17) * i for i in range(m+17)])\n    # num_possibilities = sum([(m - 18) * i for i in range(m+18)])\n    # num_possibilities = sum([(m - 19) * i for i in range(m+19)])\n    # num_possibilities = sum([(m - 20) * i for i in range(m+20)])\n    # num_possibilities = sum([(m - 21) * i for i in range(m+21)])\n    # num_possibilities = sum([(m - 22) * i for i in range(m+22)])\n    # num_possibilities = sum([(m - 23) * i for i in range(m+23)])\n    # num_possibilities = sum([(m - 24) * i for i in range(m+24)])\n    # num_possibilities = sum([(m - 25) * i for i in range(m+25)])\n    # num_possibilities = sum([(m - 26) * i for i in range(m+26)])\n    # num_possibilities = sum([(m - 27) * i for i in range(m+27)])\n    # num_possibilities = sum([(m - 28) * i for i in range(m+28)])\n    # num_possibilities = sum([(m - 29) * i for i in range(m+29)])\n    # num_possibilities = sum([(m - 30) * i for i in range(m+30)])\n    # num_possibilities = sum([(m - 31) * i for i in range(m+31)])\n    # num_possibilities = sum([(m - 32) * i for i in range(m+32)])\n    # num_possibilities = sum([(m - 33) * i for i in range(m+33)])\n    # num_possibilities = sum([(m - 34) * i for i in range(m+34)])\n    # num_possibilities = sum([(m - 35) * i for i in range(m+35)])\n    # num_possibilities = sum([(m - 36) * i for i in range(m+36)])\n    # num_possibilities = sum([(m - 37) * i for i in range(m+37)])\n    # num_possibilities = sum([(m - 38) * i for i in range(m+38)])\n    # num_possibilities = sum([(m - 39) * i for i in range(m+39)])\n    # num_possibilities = sum([(m - 40) * i for i in range(m+40)])\n    # num_possibilities = sum([(m - 41) * i for i in range(m+41)])\n    # num_possibilities = sum([(m - 42) * i for i in range(m+42)])\n    # num_possibilities = sum([(m - 43) * i for i in range(m+43)])\n    # num_possibilities = sum([(m - 44) * i for i in range(m+44)])\n    # num_possibilities = sum([(m - 45) * i for i in range(m+45)])\n    # num_possibilities = sum([(m - 46) * i for i in range(m+46)])\n    # num_possibilities = sum([(m - 47) * i for i in range(m+47)])\n    # num_possibilities = sum([(m - 48) * i for i in range(m+48)])\n    # num_possibilities = sum([(m - 49) * i for i in range(m+49)])\n    # num_possibilities = sum([(m - 50) * i for i in range(m+50)])\n    # num_possibilities = sum([(m - 51) * i for i in range(m+51)])\n    # num_possibilities = sum([(m - 52) * i for i in range(m+52)])\n    # num_possibilities = sum([(m - 53) * i for i in range(m+53)])\n    # num_possibilities = sum([(m - 54) * i for i in range(m+54)])\n    # num_possibilities = sum([(m - 55) * i for i in range(m+55)])\n    # num_possibilities = sum([(m - 56) * i for i in range(m+56)])\n    # num_possibilities = sum([(m - 57) * i for i in range(m+57)])\n    # num_possibilities = sum([(m - 58) * i for i in range(m+58)])\n    # num_possibilities = sum([(m - 59) * i for i in range(m+59)])\n    # num_possibilities = sum([(m - 60) * i for i in range(m+60)])\n    # num_possibilities = sum([(m - 61) * i for i in range(m+61)])\n    # num_possibilities = sum([(m - 62) * i for i in range(m+62)])\n    # num_possibilities = sum([(m - 63) * i for i in range(m+63)])\n    # num_possibilities = sum([(m - 64) * i for i in range(m+64)])\n    # num_possibilities = sum([(m - 65) * i for i in range(m+65)])\n    # num_possibilities = sum([(m - 66) * i for i in range(m+66)])\n    # num_possibilities = sum([(m - 67) * i for i in range(m+67)])\n    # num_possibilities = sum([(m - 68) * i for i in range(m+68)])\n    # num_possibilities = sum([(m - 69) * i for i in range(m+69)])\n    # num_possibilities = sum(["
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 0\n    for i in range(1,m+1):\n        if i%2:\n            result += n-2\n            n-=1\n        else:\n            result += n-1\n            n-=1\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if (n<=1): \n        print (\"Please enter a positive integer greater than 2!\") \n        return \n    elif (m<=1): \n        print (\"Please enter a positive integer greater than 2!\") \n        return \n    elif (m<=n): \n        print (\"Please enter a positive integer greater than 2!\") \n        return \n    else: \n        temp = 0\n        for i in range(1,n): \n            temp = temp + m \n            if (temp == i): \n                print (\"The possible sequences of length n are: \") \n                return \n    return 0 \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    try:\n        f = open('replacement_list.txt', 'w+')\n        for i in range(len(list1)):\n            f.write(list1[i])\n            f.write('\\n')\n        for j in range(len(list2)):\n            f.write(list2[j])\n            f.write('\\n')\n        f.close()\n    except:\n        print(\"Error! Failed to write to replacement_list.txt\")\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    print(list1)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1[-1]!=list2[0]:\n        list1[-1]=list2[0]\n        return list1\n    else:\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [list1[-1], list2[-1]]\n    \ndef main():\n    '''\n    You should write the code to create a list of strings\n    that contains the words from the instructions on the page.\n    Use your list of strings to replace the last element of each word.\n    '''\n    instructions = ['Where are my sisters?',\n                     'I saw the son of a house',\n                     'How many zombies are there on the street?',\n                     'What is the first letter of the word?',\n                     'If I were given a number, how many?'\n                     ]\n    for instruction in instructions:\n        print(instruction)\n        print(replace_list(instruction,instructions))\n    \nmain()\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list2[-1] + list1[-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for index, value in enumerate(list1):\n        if index == len(list2):\n            list2.append(value)\n        else:\n            list2[index] = value\n    return list2"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    del list2[-1]\n    return list1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list(list1)+list(list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2[i]\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in range(len(str1)):\n        if str1[i] in \"aeiouAEIOU\":\n            charac += 1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in range(len(str1)):\n        charac = charac + str1[i].count(\"c\") + str1[i].count(\"C\") + str1[i].count(\"o\") + str1[i].count(\"O\")\n    print(\"The total number of characters in a string is\", charac)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    cnt=0\n    for i in range(len(str1)):\n        if (str1[i] in \"aeiouAEIOU\"):\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_cnt = 0\n    for char in str1:\n        char_cnt += 1\n    return char_cnt\n    \n    \n    \ndef main():\n    print(\"Running the main function...\")\n    str = \"hello world\"\n    print(\"String:\", str)\n    print(\"Number of characters:\", count_charac(str))\n    print(\"String length:\", len(str))\n    print(\"String:\", str.lower())\n    print(\"String:\", str.upper())\n    print(\"String:\", str.title())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.split())\n    print(\"String:\", str.replace('l', 'o'))\n    print(\"String:\", str.replace('l', 'o', 1))\n    print(\"String:\", str.replace('l', 'o', -1))\n    print(\"String:\", str.replace('a', 'b', 2))\n    print(\"String:\", str.replace('a', 'b', -2))\n    print(\"String:\", str.replace('a', 'b', -1))\n    print(\"String:\", str.replace('a', 'b', 'last'))\n    print(\"String:\", str.isalpha())\n    print(\"String:\", str.isalnum())\n    print(\"String:\", str.isnumeric())\n    print(\"String:\", str.isdigit())\n    print(\"String:\", str.isprintable())\n    print(\"String:\", str.isspace())\n    print(\"String:\", str.istitle())\n    print(\"String:\", str.isupper())\n    print(\"String:\", str.islower())\n    print(\"String:\", str.rjust(20, '*'))\n    print(\"String:\", str.ljust(20, '*'))\n    print(\"String:\", str.center(20, '*'))\n    print(\"String:\", str.rjust(20,''))\n    print(\"String:\", str.ljust(20,''))\n    print(\"String:\", str.center(20,''))\n    print(\"String:\", str.center(20,''), end=\"\\n\\n\")\n    print(\"String:\", str.lstrip('abcdef'))\n    print(\"String:\", str.rstrip('abcdef'))\n    print(\"String:\", str.strip())\n    print(\"String:\", str.upper())\n    print(\"String:\", str.lower())\n    print(\"String:\", str.split())\n    print(\"String:\", str.split(' ', 2))\n    print(\"String:\", str.splitlines())\n    print(\"String:\", str.lstrip(''))\n    print(\"String:\", str.rstrip(''))\n    print(\"String:\", str.strip(''))\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.replace('l', 'o'))\n    print(\"String:\", str.replace('l', 'o', 1))\n    print(\"String:\", str.replace('l', 'o', -1))\n    print(\"String:\", str.replace('a', 'b', 2))\n    print(\"String:\", str.replace('a', 'b', -2))\n    print(\"String:\", str.replace('a', 'b', -1))\n    print(\"String:\", str.replace('a', 'b', 'last'))\n    print(\"String:\", str.isalpha())\n    print(\"String:\", str.isalnum())\n    print(\"String:\", str.isnumeric())\n    print(\"String:\", str.isdigit())\n    print(\"String:\", str.isprintable())\n    print(\"String:\", str.isspace())\n    print(\"String:\", str.istitle())\n    print(\"String:\", str.isupper())\n    print(\"String:\", str.islower())\n    print(\"String:\", str.rjust(20, '*'))\n    print(\"String:\", str.ljust(20, '*'))\n    print(\"String:\", str.center(20, '*'))\n    print(\"String:\", str.rjust(20,''))\n    print(\"String:\", str.ljust(20,''))\n    print(\"String:\", str.center(20,''))\n    print(\"String:\", str.center(20,''), end=\"\\n\\n\")\n    print(\"String:\", str.lstrip('abcdef'))\n    print(\"String:\", str.rstrip('abcdef'))\n    print(\"String:\", str.strip())\n    print(\"String:\", str.upper())\n    print(\"String:\", str.lower())\n    print(\"String:\", str.split())\n    print(\"String:\", str.split(' ', 2))\n    print(\"String:\", str.splitlines())\n    print(\"String:\", str.lstrip(''))\n    print(\"String:\", str.rstrip(''))\n    print(\"String:\", str.strip(''))\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.replace('l', 'o'))\n    print(\"String:\", str.replace('l', 'o', 1))\n    print(\"String:\", str.replace('l', 'o', -1))\n    print(\"String:\", str.replace('a', 'b', 2))\n    print(\"String:\", str.replace('a', 'b', -2))\n    print(\"String:\", str.replace('a', 'b', -1))\n    print(\"String:\", str.replace('a', 'b', 'last'))\n    print(\"String:\", str.isalpha())\n    print(\"String:\", str.isalnum())\n    print(\"String:\", str.isnumeric())\n    print(\"String:\", str.isdigit())\n    print(\"String:\", str.isprintable())\n    print(\"String:\", str.isspace())\n    print(\"String:\", str.istitle())\n    print(\"String:\", str.isupper())\n    print(\"String:\", str.islower())\n    print(\"String:\", str.rjust(20, '*'))\n    print(\"String:\", str.ljust(20, '*'))\n    print(\"String:\", str.center(20, '*'))\n    print(\"String:\", str.rjust(20,''))\n    print(\"String:\", str.ljust(20,''))\n    print(\"String:\", str.center(20,''))\n    print(\"String:\", str.center(20,''), end=\"\\n\\n\")\n    print(\"String:\", str.lstrip('abcdef'))\n    print(\"String:\", str.rstrip('abcdef'))\n    print(\"String:\", str.strip())\n    print(\"String:\", str.upper())\n    print(\"String:\", str.lower())\n    print(\"String:\", str.split())\n    print(\"String:\", str.split(' ', 2))\n    print(\"String:\", str.splitlines())\n    print(\"String:\", str.lstrip(''))\n    print(\"String:\", str.rstrip(''))\n    print(\"String:\", str.strip(''))\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print(\"String:\", str.strip())\n    print("
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if str1[i] in str1:\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count_charac = 0\n    for i in str1:\n        count_charac += 1\n    return count_charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for char in str1:\n        if char =='':\n            charac += 1\n        else:\n            return charac\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char == char:\n            count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while (N // 2) * 2 > N:\n        N -= 2\n        i += 1\n    return N * 2 - i\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    L = math.sqrt(N)\n    if N == (N + L):\n        return N\n    elif N < (N + L):\n        return (N - L)\n    else:\n        return (N - L) + (N + L)\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 0):\n        return N\n    return int(math.sqrt(N))+1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    p = math.sqrt(N)\n    for i in range(2,int(p/2)):\n        if N % i == 0:\n            if N / i == i:\n                return i\n            else:\n                return i + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    l=[]\n    l=N\n    for i in range(1,(int)(math.sqrt(N))+1):\n        if l%i==0:\n            if l//i>N//i:\n                l=l//i\n            else:\n                l=l//i+i\n            l=int(l)\n            break\n    if l==N:\n        return math.pow(2,int(l))\n    else:\n        l+=1\n        return next_Perfect_Square(l)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    print(next_Perfect_Square(N))\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for n in range(N + 1, N + 1, +1): \n        sqrt = math.sqrt(n)\n        if (sqrt*sqrt == int(sqrt * sqrt)):\n            return n\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Write your code here\n    if N==1:\n        return 1\n    elif N==2:\n        return 2\n    elif N%2==0:\n        return 3+N//2\n    else:\n        return N**2+3+N//2\n    \ndef find_next_Perfect_Square(n):\n    '''\n    Return the next perfect square greater than or equal to n\n    '''\n    # Write your code here\n    return find_next_Perfect_Square(math.ceil(math.sqrt(n)))\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code goes here\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    elif N > 2:\n        for i in range(3, int(math.sqrt(N))+1):\n            if N % i == 0:\n                break\n        else:\n            return i\n    else:\n        return -1"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n            max_index = i\n    return max_sum, max_index\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    l,r=0,0\n    sum,max=0,0\n    for i in range(len(arr)):\n        if arr[i]=='1':\n            l=i\n        else:\n            r=i\n    print(\"The maximum sum is: \",end=\"\")\n    for i in range(r,l-1):\n        sum=sum+arr[i]\n        print(sum,end=\"\")\n        max=max if arr[i]<=arr[i+1] else arr[i+1]\n    print(max)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1: return arr[0]\n    max_increasing = arr[0]\n    max_decreasing = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            if max_increasing < arr[i]: max_increasing = arr[i]\n            if max_decreasing > arr[i]: max_decreasing = arr[i]\n        else:\n            if max_decreasing < arr[i]: max_decreasing = arr[i]\n    return max_increasing + max_decreasing\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max(sum(arr[i:] for i in range(len(arr)) if arr[i] > arr[i-1]))\n    "
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Your code here\n    def max_sum2(arr, x):\n        \n        n = len(arr)\n        \n        arr.sort(reverse=True) # Sort the array in ascending order\n        \n        max = 0\n        i = 0\n        \n        while(i < n):\n            \n            if arr[i] <= x:\n                \n                max += arr[i]\n                i += 1\n            \n            elif arr[i] >= x:\n                \n                max += arr[i] - arr[i-1]\n                i += 1\n                \n            else:\n                \n                break\n                \n        return max\n            \n    return max_sum2(arr, 0)\n    \ndef max_sum_recursive(arr, x):\n    '''\n    You are given a bitonic array. Return the maximum sum of a sequence of numbers for which x is first increasing.\n    '''\n    \n    # Your code here\n    if len(arr) == 0:\n        return 0\n    \n    if arr[0] > x:\n        return max_sum_recursive(arr[1:], x)\n    \n    else:\n        return max(arr[0], arr[1] + x)\n    \ndef max_sum_iterative(arr, x):\n    '''\n    You are given a bitonic array.\n    Return the maximum sum of a sequence of numbers for which x is first increasing.\n    '''\n    \n    # Your code here\n    if len(arr) == 0:\n        return 0\n    \n    elif arr[0] > x:\n        return max_sum_recursive(arr[1:], x)\n    \n    else:\n        return max(arr[0], arr[1] + x)\n    \narr = [1, 2, 3, 4, 5]\nx = 2\nprint(max_sum_recursive(arr, x))\nprint(max_sum_iterative(arr, x))"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_sum_start = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] >= max_sum_start:\n                return max_sum_start\n            else:\n                if arr[i] < max_sum_start:\n                    max_sum_start = arr[i]\n        return max_sum_start\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Check if the array is empty or not\n    if len(arr) == 0 or len(arr) == 1:\n        return arr[0]\n    \n    # Initialize a temp array to store the maximum value\n    temp = -1\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Find the maximum sum\n        max_sum = max(max_sum, arr[i])\n        # Check if the current element is greater than the previous element\n        if arr[i] > max_sum:\n            # Update the maximum sum\n            max_sum = arr[i]\n            # Check if the current element is greater than the previous element\n            if arr[i] > max_sum:\n                # Update the current element\n                max_sum = arr[i]\n    \n    # Return the maximum sum\n    return max_sum\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    '''\n    returns: the maximum sum of a bitonic subsequence, which is the maximum sum of two consecutive elements of the array.\n    '''\n    # Time - O(n)\n    # Space - O(n)\n    def max_sum_helper(arr, start, end): \n        if start >= end: \n            return 0\n        if start == end: \n            return arr[start]\n        \n        left_sum = max_sum_helper(arr, start, (start + end) // 2) \n        right_sum = max_sum_helper(arr, (start + end) // 2 + 1, end) \n        return max(left_sum, right_sum) + arr[end] \n    \n    # Time - O(n)\n    # Space - O(n)\n    def max_sum(arr): \n        '''\n        Return the maximum sum of a sequence of integers arr.\n        '''\n        return max_sum_helper(arr, 0, len(arr) - 1) \n    \n    return max_sum(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_seq = 0\n    max_seq_rev = 0\n    max_rev = 0\n    for i in range(len(arr)):\n        # print('i', i)\n        # print('arr[i]', arr[i])\n        # print('max_seq', max_seq)\n        # print('max_seq_rev', max_seq_rev)\n        # print('max_rev', max_rev)\n        if arr[i] > max_seq:\n            max_seq = arr[i]\n            max_seq_rev = max_seq\n            max_rev = max_seq\n        if arr[i] > max_seq_rev:\n            max_seq_rev = arr[i]\n            max_rev = arr[i]\n    return max_seq + max_seq_rev\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    n = 0\n    m = 1\n    while number > 0:\n        n = number % 10\n        m = (m * 10) + n\n        number = number / 10\n    return m\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root_list = []\n    sqrt = number\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    while number > 0:\n        if number % 2 == 0:\n            return number ** 0.5\n        else:\n            number = number / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sum_of_square_root = 0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = babylonian(number)\n    return (root)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt = number ** 0.5\n    return sqrt\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    n = str(number)\n    temp = n[0]\n    for i in range(0, len(n)):\n        if n[i] == '0':\n            temp = temp * 10 + '0'\n        else:\n            temp = temp * 10 + n[i]\n    temp = int(temp)\n    return temp\n    \ndef is_prime(number):\n    '''\n    Write a function for checking if a number is prime or not.\n    '''\n    if number < 2:\n        return False\n    for i in range(2, number):\n        if (number % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number % 2 == 0:\n        return number // 2 + 0.5\n    else:\n        return (number // 2) + 0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 0\n    if(number > 0):\n        for i in range(1,number + 1):\n            squareroot += (number/i)\n    return squareroot\ndef find_babylonian_square_root(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 0\n    if(number > 0):\n        for i in range(1,number + 1):\n            squareroot += (number/i)\n    return squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        raise ValueError('The number must be positive')\n    square_root = 1.0\n    while square_root < number:\n        square_root *= 2\n    return square_root\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1: return len(str)\n    \n    i = 0\n    j = 0\n    \n    max_length = 1\n    \n    while i <= j:\n        if str[i]!= str[j]:\n            if i < j:\n                i += 1\n                j += 1\n            else:\n                break\n                \n            if j - i > max_length:\n                max_length = j - i\n                \n        i += 1\n        j += 1\n            \n    return max_length\n    \n    "
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # define our set of valid palindromes\n    set_of_valid_palindromes = { \n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    }\n    # get the set of all unique characters in our string\n    set_of_unique_chars = set(str)\n    # for all unique chars, if one of them is in the set of valid palindromes, then we found the longest palindrome\n    for char in set_of_unique_chars:\n        if char in set_of_valid_palindromes:\n            # if it's in the set of valid palindromes, then we return the length\n            return len(str[:str.index(char) + 1])\n    # if it wasn't found, return the longest palindrome\n    return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            temp = str[i:j]\n            if temp == temp[::-1]:\n                if j - i < length:\n                    length = j - i\n    return length"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    palindrome_array = []\n    max_substring = 0\n    \n    for i in range(len(str)):\n        substring = str[i:len(str)]\n        palindrome_array.append(substring)\n        \n        for j in range(0,len(substring)):\n            if(str[i] == substring[j]):\n                if(j == 0 or substring[j]!= str[i+1]):\n                    palindrome_array[i+1] = substring[j:len(str)]\n                    break\n                elif(j == len(substring) - 1):\n                    palindrome_array[i+1] = substring[j:]\n                    break\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    start = 0\n    end = 1\n    max_len = 1\n    \n    while (end < len(str)):\n        if str[start] == str[end]:\n            start += 1\n            end += 1\n            max_len = max(max_len, end - start)\n            \n        else:\n            start = 0\n            end += 1\n            \n    return max_len\n        \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Use both of the string lengths to calculate the length of the longest palindromic subsequence \n    lengths = [len(i) for i in str]\n    maxLength = max(lengths)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == \"\": \n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    sub_seq_lps = []\n    \n    for i in range(1,len(str)):\n        if str[i-1]!= str[i]:\n            sub_seq = str[i-1:i+1]\n            if len(sub_seq) > len(sub_seq_lps):\n                sub_seq_lps = sub_seq\n    return len(sub_seq_lps)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str=='':\n        return 0\n    if len(str)==0:\n        return 0\n    if len(str)==1:\n        return 1\n    str_len = len(str)\n    if str[0]==str[str_len-1]:\n        return 1 + lps(str[1:str_len])\n    else:\n        return max(lps(str[0:str_len//2]),lps(str[str_len//2:]))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #print(str)\n    \n    if len(str) == 0 or len(str) == 1:\n        return len(str)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([x/n for x in range(1,n+1)])\n    \n    #general idea: \n    #\n    #for i in range(1,n+1):\n    #    print(i)\n    #    for j in range(1,i+1):\n    #        print(j)\n    #    print()\n    #\n    #return sum([x/i for x in range(1,n+1)])\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # TODO: Define the function here\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 10\n    elif n == 8:\n        return 12\n    elif n == 9:\n        return 14\n    elif n == 10:\n        return 16\n    elif n == 11:\n        return 18\n    elif n == 12:\n        return 22\n    elif n == 13:\n        return 26\n    elif n == 14:\n        return 28\n    elif n == 15:\n        return 30\n    elif n == 16:\n        return 32\n    elif n == 17:\n        return 34\n    elif n == 18:\n        return 36\n    elif n == 19:\n        return 38\n    elif n == 20:\n        return 40\n    elif n == 21:\n        return 42\n    elif n == 22:\n        return 44\n    elif n == 23:\n        return 46\n    elif n == 24:\n        return 48\n    elif n == 25:\n        return 50\n    elif n == 26:\n        return 52\n    elif n == 27:\n        return 54\n    elif n == 28:\n        return 56\n    elif n == 29:\n        return 58\n    elif n == 30:\n        return 60\n    elif n == 31:\n        return 62\n    elif n == 32:\n        return 64\n    elif n == 33:\n        return 66\n    elif n == 34:\n        return 68\n    elif n == 35:\n        return 70\n    elif n == 36:\n        return 72\n    elif n == 37:\n        return 74\n    elif n == 38:\n        return 76\n    elif n == 39:\n        return 78\n    elif n == 40:\n        return 80\n    elif n == 41:\n        return 82\n    elif n == 42:\n        return 84\n    elif n == 43:\n        return 86\n    elif n == 44:\n        return 88\n    elif n == 45:\n        return 90\n    elif n == 46:\n        return 92\n    elif n == 47:\n        return 94\n    elif n == 48:\n        return 96\n    elif n == 49:\n        return 98\n    elif n == 50:\n        return 100\n    elif n == 51:\n        return 102\n    elif n == 52:\n        return 104\n    elif n == 53:\n        return 106\n    elif n == 54:\n        return 108\n    elif n == 55:\n        return 110\n    elif n == 56:\n        return 112\n    elif n == 57:\n        return 114\n    elif n == 58:\n        return 116\n    elif n == 59:\n        return 118\n    elif n == 60:\n        return 120\n    elif n == 61:\n        return 122\n    elif n == 62:\n        return 124\n    elif n == 63:\n        return 126\n    elif n == 64:\n        return 128\n    elif n == 65:\n        return 130\n    elif n == 66:\n        return 132\n    elif n == 67:\n        return 134\n    elif n == 68:\n        return 136\n    elif n == 69:\n        return 138\n    elif n == 70:\n        return 140\n    elif n == 71:\n        return 142\n    elif n == 72:\n        return 144\n    elif n == 73:\n        return 146\n    elif n == 74:\n        return 148\n    elif n == 75:\n        return 150\n    elif n == 76:\n        return 152\n    elif n == 77:\n        return 154\n    elif n == 78:\n        return 156\n    elif n == 79:\n        return 158\n    elif n == 80:\n        return 160\n    elif n == 81:\n        return 162\n    elif n == 82:\n        return 164\n    elif n == 83:\n        return 166\n    elif n == 84:\n        return 168\n    elif n == 85:\n        return 170\n    elif n == 86:\n        return 172\n    elif n == 87:\n        return 174\n    elif n == 88:\n        return 176\n    elif n == 89:\n        return 178\n    elif n == 90:\n        return 180\n    elif n == 91:\n        return 182\n    elif n == 92:\n        return 184\n    elif n == 93:\n        return 186\n    elif n == 94:\n        return 188\n    elif n == 95:\n        return 190\n    elif n == 96:\n        return 192\n    elif n == 97:\n        return 194\n    elif n == 98:\n        return 196\n    elif n == 99:\n        return 198\n    elif n == 100:\n        return 200\n    elif n == 101:\n        return 202\n    elif n == 102:\n        return 204\n    elif n == 103:\n        return 206\n    elif n == 104:\n        return 208\n    elif n == 105:\n        return 210\n    elif n == 106:\n        return 212\n    elif n == 107:\n        return 214\n    elif n == 108:\n        return 216\n    elif n == 109:\n        return 218\n    elif n == 110:\n        return 220\n    elif n == 111:\n        return 222\n    elif n == 112:\n        return 224\n    elif n == 113:\n        return 226\n    elif n == 114:\n        return 228\n    elif n == 115:\n        return 230\n    elif n == 116:\n        return 232\n    elif n == 117:\n        return 234\n    elif n == 118:\n        return 236\n    elif n == 119:\n        return 238\n    elif n == 120:\n        return 240\n    elif n == 121:\n        return 242\n    elif n == 122:\n        return 244\n    elif n == 123:\n        return 246\n    elif n == 124:\n        return 248\n    elif n == 125:\n        return 250\n    elif n == 126:\n        return 252\n    elif n == 127:\n        return 254\n    elif n == 128:\n        return 256\n    elif n == 129:\n        return 258\n    elif n == 130:\n        return 260\n    elif n == 131:\n        return 262\n    elif n == 132:\n        return 264\n    elif n == 133:\n        return 266\n    elif n == 134:\n        return 268\n    elif n == 135:\n        return 270\n    elif n == 136:\n        return 272\n    elif n == 137:\n        return 274\n    elif n == 138:\n        return 276\n    elif n == 139:\n        return 278\n    elif n == 140:\n        return 280\n    elif n == 141:\n        return 282\n    elif n == 142:\n        return 284\n    elif n == 143:\n        return 286\n    elif n == 144:\n        return 288\n    elif n == 145:\n        return 290\n    elif n == 146:\n        return 292\n    elif n == 147:\n        return 294\n    elif n == 148:\n        return 296\n    elif n == 149:\n        return 298\n    elif n == 150:\n        return 300\n    elif n == 151:\n        return 302\n    elif n == 152:\n        return 304\n    elif n == 153:\n        return 306\n    elif n == 154:\n        return 308\n    elif n == 155:\n        return 310\n    elif n == 156:\n        return 312\n    elif n == 157:\n        return 314\n    elif n == 158:\n        return 316\n    elif n == 159:\n        return 318\n    elif n == 160:\n        return 320\n    elif n == 161:\n        return 322\n    elif n == 162:\n        return 324\n    elif n == 163:\n        return 326\n    elif n == 164:\n        return 328\n    elif n == 165:\n        return 330\n    elif n == 166:\n        return 332\n    elif n == 167:\n        return 334\n    elif n == 168:"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Gets the number of terms in the series\n    n1 = 1\n    n2 = 1\n    # Appends 1 to the total value of n-1\n    for i in range(1, n+1):\n        n1 *= (1 + i/n1)\n        n2 *= (1 + (i-1)/n2)\n    return round(n1 * n2, 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum_loop(n):\n        return(n * (n - 1) * 0.5)\n    return harmonic_sum_loop(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1,n+1):\n        harmonic_sum = harmonic_sum + (1/i)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(0,n):\n        harmonic_sum = harmonic_sum + 1 / (2*i+1)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return (n-1)/(n-2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary where the values are the indices of the two arrays\n    dictionary = dict()\n    for i in range(len(array_nums1)):\n        dictionary[array_nums1[i]] = i\n    for i in range(len(array_nums2)):\n        dictionary[array_nums2[i]] = i\n    \n    # the array that the intersection is found\n    intersection_array = []\n    # the index where the intersection happens\n    index = []\n    # for all the elements of the two arrays\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in dictionary and array_nums2[i] in dictionary:\n            # append the intersection indices in the array\n            index.append(dictionary[array_nums1[i]])\n            index.append(dictionary[array_nums2[i]])\n            # if intersection is in the array, append it\n            if array_nums1[i] in intersection_array:\n                intersection_array.append(array_nums1[i])\n            else:\n                intersection_array.append(array_nums2[i])\n    return intersection_array,index\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # n*n matrix\n    mat = []\n    for i in range(len(array_nums1)):\n        mat.append([])\n        for j in range(len(array_nums2)):\n            mat[i].append(array_nums1[i][j] + array_nums2[j][j])\n    # sort the matrix\n    mat.sort(key = lambda x: x[0])\n    # get the length of matrix\n    length = len(mat)\n    # iterate from 1 to length\n    for i in range(length):\n        # if first num of matrix is less than second num\n        if mat[i][0] < mat[i][1]:\n            # for j in range(len(mat[0])):\n            #     if mat[j][0] < mat[j][1]:\n            return mat[i]\n    return -1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                intersection_list.append(array_nums1[i])\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Your code here\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    list1 = []\n    list2 = []\n    for num in array_nums1:\n        list1.append(num)\n    for num in array_nums2:\n        list2.append(num)\n    if len(list1)!= len(list2):\n        return None\n    new_list = []\n    for num in list1:\n        if num in list2:\n            new_list.append(num)\n    if len(new_list) == 0:\n        return None\n    return new_list\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                intersection.append(num1)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 == array_nums2:\n        return array_nums1\n    first = second = 0\n    res = []\n    while array_nums1!= second:\n        if array_nums1[first] < array_nums2[second]:\n            first += 1\n        elif array_nums1[first] > array_nums2[second]:\n            second += 1\n        elif array_nums1[first] == array_nums2[second]:\n            res.append(array_nums1[first])\n            first += 1\n            second += 1\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here.\n    intersection = []\n    for num in array_nums1:\n        for num2 in array_nums2:\n            if num2==num:\n                intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result=[]\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i]==array_nums2[j]:\n                result.append(array_nums1[i])\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #first get the unique numbers\n    a = list(set(array_nums1))\n    a.sort()\n    b = list(set(array_nums2))\n    b.sort()\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code here\n    # print(tup[0])\n    tup = [(i, j) for i, j in tup if i!= x]\n    # print(tup)\n    return tup\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x=tuple(x)\n    x = list(x)\n    x.sort()\n    count = 0\n    if len(tup)>0:\n        for i in x:\n            if i in tup:\n                count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0 \n    for i in range(len(tup)):\n        if tup[i] == x:\n            c += 1\n    return c\n    \ndef count_O(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0 \n    for i in range(len(tup)):\n        if tup[i] == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if x == i: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counts = {}\n    for key,value in tup:\n        if value == x:\n            counts[key] = counts.get(key,0) + 1\n    return counts\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for i in tup:\n        if i == x:\n            occ += 1\n    return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for i in tup:\n        if i == x:\n            occ = occ + 1\n    return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    total = 0\n    for element in tup:\n        if element == x:\n            total += 1\n    return total\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count = count + 1\n    return count\n    "
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if type(list) is not list:\n        raise TypeError(\"Expected a list, got: {}\".format(type(list)))\n    if len(list) == 0:\n        raise ValueError(\"List is empty\")\n    for i in range(len(list)):\n        if type(list[i]) is not int or type(list[i]) is not float or type(list[i]) is not bool:\n            raise TypeError(\"List must contain only integers, floats, and booleans\")\n    if element > list[-1]:\n        raise IndexError(\"List is not monotonically increasing\")\n    index = list.index(element)\n    list.insert(index+1,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not isinstance(list,list):\n        raise TypeError(\"the argument to the insert_element function must be a list\")\n    else:\n        list_of_elements = []\n        for elem in list:\n            list_of_elements.append(elem)\n        list.clear()\n        list_of_elements.append(element)\n        for elem in list_of_elements:\n            list.append(elem)\n    return list\n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a new list with only the element removed from the list.\n    '''\n    if not isinstance(list,list):\n        raise TypeError(\"the argument to the remove_element function must be a list\")\n    else:\n        list_of_elements = []\n        for elem in list:\n            list_of_elements.append(elem)\n        list.clear()\n        list_of_elements.remove(element)\n        for elem in list_of_elements:\n            list.append(elem)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)-1,0,-1):\n        if list[i][0]<element[0]:\n            list.insert(i,(element[0],element[1]))\n        else:\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        if element > i:\n            new_list.append(i)\n            new_list.append(element)\n            break\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for i in list:\n        if i!= element:\n            newlist.append(i)\n    return newlist\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_modified = []\n    for element in list:\n        list_modified.append(element)\n        list_modified.append(element)\n    return list_modified\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for element in list:\n        new_list.append(element)\n    for element in new_list:\n        print(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list[:]\n    index = 0\n    new_list.insert(index,element)\n    return new_list\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if (numbers==0): return None\n    try:\n        complex(numbers)\n    except ValueError:\n        print('ERROR')\n        return None\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    convert2Dlist = []\n    convert2Dlist.append([cmath.polar(x) for x in numbers])\n    return convert2Dlist\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # iterate over complex numbers and convert them to polar coordinates\n    numbers = numbers.split('+')\n    x = int(numbers[0])\n    y = int(numbers[1])\n    angle = round((cmath.phase(x) *(180/pi)) - 180, 2)\n    return angle, x, y\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(len(numbers)==2):\n        x=complex(numbers[0].real,numbers[0].imag)\n        y=complex(numbers[1].real,numbers[1].imag)\n        return (x,y)\n    elif(len(numbers)==4):\n        x=complex(numbers[0].real,numbers[0].imag)\n        y=complex(numbers[1].real,numbers[1].imag)\n        z=complex(numbers[2].real,numbers[2].imag)\n        w=complex(numbers[3].real,numbers[3].imag)\n        return (x,y,z,w)\n    else:\n        x=complex(numbers[0].real,numbers[0].imag)\n        y=complex(numbers[1].real,numbers[1].imag)\n        z=complex(numbers[2].real,numbers[2].imag)\n        w=complex(numbers[3].real,numbers[3].imag)\n        return (x,y,z,w)\n    return\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        polar = cmath.polar(numbers)\n        print(\"The real and imaginary part of \", numbers, \" are \", polar[0], \" and \", polar[1])\n    except cmath.ComplexWarning:\n        print(\"Please input a number.\")\n    finally:\n        return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar(x, y, z):\n        '''\n        Convert complex number to polar coordinates.\n        '''\n        r = cmath.sqrt(x**2 + y**2 + z**2)\n        phi = cmath.phase(x*y*z)\n        return (r, phi)\n    if type(numbers) is complex:\n        z, phi = polar(numbers.real, numbers.imag, 1)\n    else:\n        z = numbers[0]\n        phi = numbers[1]\n    return polar(z, phi)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #assuming that the numbers are given as a list of values\n    \n    #if the number of elements is less than 3, return a float value\n    if len(numbers) < 3:\n        return float(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers[0].real!= 0:\n        return complex(numbers[1].real * cmath.sqrt(1 - numbers[0].real ** 2),\n                        numbers[1].imag * cmath.sqrt(1 - numbers[0].real ** 2))\n    else:\n        return complex(numbers[1].imag * cmath.sqrt(1 - numbers[0].real ** 2),\n                        numbers[1].real * cmath.sqrt(1 - numbers[0].real ** 2))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers) == list:\n        x = [complex(numbers[i]) for i in range(len(numbers))]\n    elif type(numbers) == float:\n        x = [complex(numbers)]\n    else:\n        x = [complex(n) for n in numbers]\n    return x\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers[0].real\n    b = numbers[0].imag\n    c = numbers[1].real\n    d = numbers[1].imag\n    r = cmath.sqrt(a**2+b**2)\n    angle = cmath.phase(cmath.polar(r))\n    print(f'Real: {a} \\nImaginary: {b} \\nAngle: {angle}')\n    return angle\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if not list1:\n        return 0\n    count = 0\n    for element in list1:\n        if element.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    length=len(list1)\n    index=0\n    count=0\n    while index<length:\n        if list1[index]%2==0:\n            count=count+1\n        index=index+1\n    return count\ndef main():\n    '''\n    This program will test the count_integer function.\n    '''\n    list1=[3,1,1,3,2,3,5,3,4,5,6,7,8,9,10,4,7,3,5,9,10,5,4,6,7,8,10,2,2,1,2,2,3,4,7]\n    print(count_integer(list1))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    c = 0\n    for i in list1:\n        if type(i) == int:\n            c += 1\n    return c\n    \n    \ndef main():\n    '''\n    A very simple script to test the function.\n    '''\n    print(\"Hello!\")\n    print(\"count_integer(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']): {n:i for i in range(11) if type(i) == int}\")\n    print(count_integer(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\n    print(\"\\n\")\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i) is int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) == int:\n            list2.append(i)\n    return list2\n    \n    # list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \ndef count_even(list1):\n    '''\n    Write a python function that returns the number of even integers in a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i % 2 == 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].isnumeric():\n            count += 1\n    print(\"No. of integer elements in a given list =\", count)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # define the list of combinations\n    combos = []\n    # iterate over all the elements\n    for x in range(1, len(l)):\n        # iterate over all the combinations\n        for combination in combinations_with_replacement(l, x):\n            # append the combination to the list of combinations\n            combos.append(combination)\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n==0:\n        return [()]\n    else:\n        return combinations_colors(l, n-1) + [(l[i],i) for i in range(len(l))]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == n:\n        return l\n    else:\n        comb = []\n        for i in combinations_with_replacement(l, n-len(l)):\n            comb.append(tuple(i))\n        return comb\ndef add_x(x,y,z):\n    '''\n    Add the three points x,y,z to the list.\n    '''\n    x.append(y)\n    y.append(z)\n    z.append(x)\ndef show(l):\n    '''\n    Print out the first n elements of the list.\n    '''\n    for i in range(0,len(l),n):\n        print(l[i])\ndef display(l):\n    '''\n    Print out the first n elements of the list.\n    '''\n    for i in range(0,len(l),n):\n        print(l[i])\ndef make_array(l):\n    '''\n    Create a list of n elements with their position (1st element is the first)\n    '''\n    return [l[i]+1 for i in range(len(l))]\ndef radomick_1(l):\n    '''\n    Take a list of numbers, and print out the list of positions of the elements that are the smallest.\n    '''\n    arr = []\n    for i in l:\n        arr.append(i)\n        arr.sort()\n    print(arr)\ndef swap_1(l,i,j):\n    '''\n    Swap the two numbers at index i and index j, respectively.\n    '''\n    l[i],l[j] = l[j],l[i]\ndef circular_permutation(l,n):\n    '''\n    Given a list of n elements, return a list that has all elements in order, sorted such that the first element is the smallest.\n    '''\n    arr = []\n    for i in l:\n        arr.append(i)\n        arr.sort()\n    print(arr)\ndef n_combinations(l, n):\n    '''\n    Return the number of combinations of elements in the list that sum to n.\n    '''\n    if len(l) == 0 or n == 0:\n        return 0\n    if n <= 0:\n        return 0\n    # Get a list of all combinations that sum to n\n    combos = combinations_with_replacement(l, n)\n    # For each combination\n    for c in combos:\n        # Update the result\n        result = []\n        for i in range(len(l)):\n            # Sum the elements from all possible combinations\n            # Assume the list is sorted so the smallest number in the list is the 1st element\n            result.append(sum(c[i:])+l[i])\n        print(result)\n        # Check if the result sums to n\n        if sum(result) == n:\n            print(\"Yes\")\n            return 1\n    # If not\n    print(\"No\")\n    return 0\ndef combinations(l, n):\n    '''\n    Return the number of combinations of elements in the list that sum to n.\n    '''\n    if len(l) == 0 or n == 0:\n        return 0\n    if n <= 0:\n        return 0\n    # Get a list of all combinations that sum to n\n    combos = combinations_with_replacement(l, n)\n    # For each combination\n    for c in combos:\n        # Update the result\n        result = []\n        for i in range(len(l)):\n            # Sum the elements from all possible combinations\n            # Assume the list is sorted so the smallest number in the list is the 1st element\n            result.append(sum(c[i:])+l[i])\n        print(result)\n        # Check if the result sums to n\n        if sum(result) == n:\n            print(\"Yes\")\n            return 1\n    # If not\n    print(\"No\")\n    return 0\ndef common(l, n):\n    '''\n    Return the number of common elements of l that sum to n.\n    '''\n    if len(l) == 0 or n == 0:\n        return 0\n    # Get a list of all combinations that sum to n\n    combos = combinations_with_replacement(l, n)\n    # For each combination\n    for c in combos:\n        # Update the result\n        result = []\n        for i in range(len(l)):\n            # Sum the elements from all possible combinations\n            # Assume the list is sorted so the smallest number in the list is the 1st element\n            result.append(sum(c[i:])+l[i])\n        # Check if the result sums to n\n        if sum(result) == n:\n            print(\"Yes\")\n            return 1\n    # If not\n    print(\"No\")\n    return 0\ndef check_sum(l,n):\n    '''\n    Return the number of elements of l that sum to n\n    '''\n    if len(l) == 0 or n == 0:\n        return 0\n    # Get a list of all combinations that sum to n\n    combos = combinations_with_replacement(l, n)\n    # For each combination\n    for c in combos:\n        # Update the result\n        result = []\n        for i in range(len(l)):\n            # Sum the elements from all possible combinations\n            # Assume the list is sorted so the smallest number in the list is the 1st element\n            result.append(sum(c[i:])+l[i])\n        # Check if the result sums to n\n        if sum(result) == n:\n            print(\"Yes\")\n            return 1\n    # If not\n    print(\"No\")\n    return 0\ndef repeating(l, n):\n    '''\n    Return the number of elements of l that are the same number of times.\n    '''\n    if len(l) == 0 or n == 0:\n        return 0\n    # Get a list of all combinations that sum to n\n    combos = combinations_with_replacement(l, n)\n    # For each combination\n    for c in combos:\n        # Update the result\n        result = []\n        for i in range(len(l)):\n            # Sum the elements from all possible combinations\n            # Assume the list is sorted so the smallest number in the list is the 1st element\n            result.append(sum(c[i:])+l[i])\n        # Check if the result sums to n\n        if sum(result) == n:\n            print(\"Yes\")\n            return 1\n    # If not\n    print(\"No\")\n    return 0\ndef perm(l, n):\n    '''\n    Return the number of elements of l that are the same number of permutations.\n    '''\n    if len(l) == 0 or n == 0:\n        return 0\n    # Get a list of all combinations that sum to n\n    combos = combinations_with_replacement(l, n)\n    # For each combination\n    for c in combos:\n        # Update the result\n        result = []\n        for i in range(len(l)):\n            # Sum the elements from all possible combinations\n            # Assume the list is sorted so the smallest number in the list is the 1st element\n            result.append(sum(c[i:])+l[i])\n        # Check if the result sums to n\n        if sum(result) == n:\n            print(\"Yes\")\n            return 1\n    # If not\n    print(\"No\")\n    return 0\ndef non_negative(l):\n    '''\n    Return the number of elements of l that sum to n, where l is a list of positive integers.\n    '''\n    if len(l) == 0:\n        return 0\n    # Get a list of all combinations that sum to n\n    combos = combinations_with_replacement(l, len(l))\n    # For each combination\n    for c in combos:\n        # Update the result\n        result = []\n        for i in range(len(l)):\n            # Sum the elements from all possible combinations\n            # Assume the list is sorted so the smallest number in the list is the 1st element\n            result.append(sum(c[i:])+l[i])\n        # Check if the result sums to n\n        if sum(result) == len(l):\n            print(\"Yes\")\n            return 1\n    # If no"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # sort by frequency, so it is more likely to be an even number\n    return [list(combinations(l, i)) for i in range(n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n < 1 or n > len(l):\n        return []\n    if n == 1:\n        return [(l[0])]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # ToDo: a better solution\n    # return [tuple(t) for t in combinations(l, n)]\n    return [(tuple(l[i:i+n])) for i in range(0, len(l), n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # TODO: Complete this function!\n    return [tuple(itertools.combinations(l, r)) for r in range(n + 1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    print(list(combinations_with_replacement([i for i in range(l)], n))"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['r', 'g', 'b', 'y']\n    return [tuple(colors[i:i + n]) for i in range(n)]\ndef combinations_with_replacement(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['r', 'g', 'b', 'y']\n    return [tuple(colors[i:i + n]) for i in range(n)]\ndef get_combinations(l):\n    '''\n    Write a function that takes in a list l and returns a list of all the possible permutations.\n    '''\n    return combinations(l, len(l))\ndef get_combinations_with_replacement(l):\n    '''\n    Write a function that takes in a list l and returns a list of all the possible permutations.\n    '''\n    return combinations_with_replacement(l, len(l))\ndef unique_color_combinations(l):\n    '''\n    Write a function that takes in a list l and returns a list of all the unique color combinations.\n    '''\n    return set(combinations_colors(l, 3))\ndef unique_color_combinations_with_replacement(l):\n    '''\n    Write a function that takes in a list l and returns a list of all the unique color combinations.\n    '''\n    return set(combinations_with_replacement(l, 3))\ndef sort_color_combinations(l):\n    '''\n    Write a function that takes in a list l and returns a list of all the unique color combinations sorted in the same order as the input.\n    '''\n    return sorted(combinations(l, 3), key=lambda x: x[::-1])\ndef sort_color_combinations_with_replacement(l):\n    '''\n    Write a function that takes in a list l and returns a list of all the unique color combinations sorted in the same order as the input.\n    '''\n    return sorted(combinations_with_replacement(l, 3), key=lambda x: x[::-1])\ndef lca(x, y):\n    '''\n    Write a function that takes in two positive integers x, y, and returns the lowest common ancestor of x and y, if the lowest common ancestor exists. If they do not exist, return -1.\n    '''\n    lca_list = []\n    def dfs(x, y):\n        if x == y:\n            return []\n        if len(lca_list) == 0:\n            return [x, y]\n        \n        lca = None\n        for i in range(len(lca_list)):\n            lca_i = dfs(lca_list[i][0], lca_list[i][1])\n            if lca_i!= []:\n                lca = lca_i\n        \n        lca_list.append([x, y])\n        return lca\n    return dfs(x, y)\ndef permute_color_combinations(l):\n    '''\n    Write a function that takes in a list l, returns a list of all the permutations of the input list.\n    '''\n    return list(itertools.permutations(l))\ndef permute_color_combinations_with_replacement(l):\n    '''\n    Write a function that takes in a list l, returns a list of all the permutations of the input list.\n    '''\n    return list(itertools.permutations(l, 2))\ndef find_sum(n):\n    '''\n    Write a function that takes in a positive integer n, and returns the sum of all the even integers from 1 to n.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total += i\n    return total\ndef palindromes(n):\n    '''\n    Write a function that takes in a positive integer n and returns the n-digit palindromes that are palindromes in the input string. If a palindrome does not exist, return an empty list.\n    '''\n    palindromes = []\n    def _is_palindrome(num):\n        if len(num) == 1:\n            return num == num[::-1]\n        if len(num) < 2:\n            return False\n        elif num[1] == num[0]:\n            return _is_palindrome(num[1:])\n        else:\n            return False\n    for i in range(1, n + 1):\n        if _is_palindrome(str(i)):\n            palindromes.append(str(i))\n    return palindromes\ndef gen_combination_function(n):\n    '''\n    Write a function that takes in an integer n, and generates all combinations (with repetition) that are of length n.\n    '''\n    palindromes = palindromes(n)\n    def _combination(n):\n        if n == 0:\n            yield []\n        else:\n            for i in combinations(palindromes, n - 1):\n                yield list(i)\n                yield list(combinations(i, n - 1))\n    for i in _combination(n):\n        yield list(i)\ndef gen_combination_function_with_replacement(n):\n    '''\n    Write a function that takes in an integer n, and generates all combinations (with repetition) that are of length n.\n    '''\n    palindromes = palindromes(n)\n    def _combination(n):\n        if n == 0:\n            yield []\n        else:\n            for i in combinations_with_replacement(palindromes, n - 1):\n                yield list(i)\n                yield list(combinations_with_replacement(i, n - 1))\n    for i in _combination(n):\n        yield list(i)\ndef generate_combinations(n):\n    '''\n    Write a function that takes in an integer n and returns all combinations of length n that are of length n.\n    '''\n    palindromes = palindromes(n)\n    def _combination(n):\n        if n == 0:\n            yield []\n        else:\n            for i in combinations(palindromes, n - 1):\n                yield list(i)\n                yield list(combinations(i, n - 1))\n    for i in _combination(n):\n        yield list(i)\ndef generate_combinations_with_replacement(n):\n    '''\n    Write a function that takes in an integer n and returns all combinations of length n that are of length n.\n    '''\n    palindromes = palindromes(n)\n    def _combination(n):\n        if n == 0:\n            yield []\n        else:\n            for i in combinations_with_replacement(palindromes, n - 1):\n                yield list(i)\n                yield list(combinations_with_replacement(i, n - 1))\n    for i in _combination(n):\n        yield list(i)\ndef generate_combinations_with_replacement_ex(n):\n    '''\n    Write a function that takes in an integer n and returns all combinations of length n that are of length n.\n    '''\n    palindromes = palindromes(n)\n    def _combination(n):\n        if n == 0:\n            yield []\n        else:\n            for i in combinations_with_replacement(palindromes, n - 1):\n                yield list(i)\n                yield list(combinations_with_replacement(i, n - 1))\n    for i in _combination(n):\n        yield list(i)\ndef generate_combinations_with_replacement_ex2(n):\n    '''\n    Write a function that takes in an integer n and returns all combinations of length n that are of length n.\n    '''\n    palindromes = palindromes(n)\n    def _combination(n):\n        if n == 0:\n            yield []\n        else:\n            for i i"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple([x] * n) for x in l]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #count the prime numbers less than the given number\n    \n    count = 0\n    \n    #create a list of prime numbers\n    prime_list = list(range(2, n))\n    \n    #loop through the list of prime numbers\n    for i in prime_list:\n        #if number is divisible by any of the numbers in the list\n        if i in prime_list:\n            #add it to count\n            count += 1\n            \n            #check to see if it is a prime number\n            if i!= prime_list[count]:\n                #return the number\n                return i\n            \n            #if the loop has finished, return the number \n            else:\n                #return the number\n                return i\n            \n    #the loop does not finish, return the number\n    return count\n    "
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    l = []\n    s = set(range(2, n + 1))\n    for i in s:\n        if i < 2:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n    if n <= 1:\n        return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isprime(x):\n        for i in range(2, int(x**0.5)+1):\n            if x%i == 0:\n                return False\n        return True\n    \n    ans = 0\n    for x in range(n+1):\n        if isprime(x):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return len(list(filter(lambda num: num > 0, range(2, n))))\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num=0\n    for i in range(2,n):\n        if (isprime(i)):\n            num+=1\n    return num\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = []\n    for i in range(2, n):\n        if i < 3:\n            prime_nums.append(i)\n        elif i == 3:\n            prime_nums.append(2)\n        else:\n            for j in range(3, i):\n                if i % j == 0:\n                    break\n            else:\n                prime_nums.append(i)\n    return len(prime_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = 0\n    for i in range(2,n+1):\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            num+=1\n    return num\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    p = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            p += 1\n    return p\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a % 10\n    b = b % 10\n    \n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        b,a = a,b\n    a_prime = a%b\n    a_prime_2 = a_prime % b\n    return a_prime,a_prime_2\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp=a\n    a=b\n    b=temp\n    return(a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Use a while loop to do this\n    i = 0\n    while i < a:\n        j = 0\n        while j < b:\n            if i < j:\n                tuple = (a,i)\n                a = i\n                b = j\n            j += 1\n        i += 1\n    return tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp_list = list(a)\n    temp_list.sort()\n    return tuple(temp_list),b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    first_number = a\n    second_number = b\n    return second_number, first_number\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list2.sort(reverse=True)\n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            list1[i], list2[i] = list2[i], list1[i]\n    return tuple(list1)\n    \nif __name__ == '__main__':\n    print(maximize_elements(((1, 2), (3, 4), (2, 1)), ((1, 1), (2, 4), (3, 1))))\n    print(maximize_elements(((1, 2), (3, 4), (2, 1)), ((1, 1), (2, 4), (3, 1))))\n    print(maximize_elements(((1, 2), (3, 4), (2, 1)), ((1, 1), (2, 4), (3, 1))))"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup2\n    if test_tup1[0] < test_tup2[0]:\n        return test_tup1\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup2\n    if test_tup1[1] < test_tup2[1]:\n        return test_tup1\n    if test_tup1[2] > test_tup2[2]:\n        return test_tup2\n    if test_tup1[2] < test_tup2[2]:\n        return test_tup1\n    return test_tup1\n    \ndef check_if_duplicate_tuple(tup_1,tup_2):\n    '''\n    check if two tuples are duplicates.\n    '''\n    if tup_1[0] == tup_2[0] and tup_1[1] == tup_2[1]:\n        return tup_1\n    elif tup_1[2] == tup_2[2]:\n        return tup_1\n    elif tup_2[2] == tup_1[2]:\n        return tup_2\n    else:\n        return tup_1\n    \ndef get_elements_from_dict(dictionary):\n    '''\n    get all the elements from the dictionary.\n    '''\n    list_of_elements = []\n    for key, value in dictionary.items():\n        list_of_elements.append(key)\n    return list_of_elements\n    \ndef get_two_closest_elements(test_tup, dictionary):\n    '''\n    get the two closest elements from a tuple.\n    '''\n    min = test_tup\n    for key, value in dictionary.items():\n        if value - test_tup[0] <= 0 and value - test_tup[1] <= 0:\n            return key\n    return min\n    \ndef get_three_closest_elements(test_tup, dictionary):\n    '''\n    get the three closest elements from a tuple.\n    '''\n    min = test_tup\n    for key, value in dictionary.items():\n        if value - test_tup[0] <= 0 and value - test_tup[1] <= 0 and value - test_tup[2] <= 0:\n            return key\n    return min\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return (a, b, c, d)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup2) > len(test_tup1):\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1[0] if test_tup1[1] > test_tup2[1] else test_tup2[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elements = max(test_tup1, key=len)\n    min_elements = min(test_tup2, key=len)\n    return (max_elements, min_elements)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple_index = test_tup1[1]\n    max_tuple = test_tup1[0]\n    for test_tup in test_tup2:\n        if test_tup[1] > max_tuple_index:\n            max_tuple_index = test_tup[1]\n            max_tuple = test_tup[0]\n    return max_tuple, max_tuple_index\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    x = test_tup1[0]\n    y = test_tup1[1]\n    z = test_tup2[0]\n    w = test_tup2[1]\n    \n    if x > y and x > z and y > w:\n        return x\n    elif y > x and y > z and x > w:\n        return y\n    elif z > x and z > y and x > w:\n        return z\n    elif w > x and w > y and x > z:\n        return w\n    else:\n        return -1\n    "
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n == 2):\n        return (1)\n    elif (n == 3):\n        return (1)\n    elif (n == 4):\n        return (1)\n    else:\n        return (newman_prime(n-1)) + newman_prime(n-2) + newman_prime(n-3)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = True\n    count = 2\n    n_prime = 1\n    while count < n + 1:\n        if prime:\n            n_prime = count * n_prime + n\n            count += 1\n        if n_prime % count == 0:\n            prime = False\n            break\n    return n_prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i=2\n    while i<=n: \n        if (n % i == 0): \n            j = n // i \n            if (j == 0): \n                return i \n            else: \n                while (j > 0): \n                    if (n % j == 0): \n                        n = n // j \n                        j = 0\n                        return i \n                    j = j - 1\n        i += 1 \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    div = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            div = 0\n            break\n    \n    if div == 1:\n        return n\n    else:\n        return (n+1)\n        \ndef main():\n    n = int(input('Enter number: '))\n    print(f'Prime Number: {newman_prime(n)}')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            prime.append(i)\n            prime.append(n/i)\n            break\n    return prime[n % len(prime)]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    m = 6\n    x = 2\n    while x * x <= n:\n        if (n % x == 0):\n            m = x\n            n = n // x\n            break\n        x += 1\n    return prime[m]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2,n): \n        if (n%i==0): \n            break\n    else: \n        return False\n    return i\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n - newman_prime(n-1) \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    j = 0\n    for i in range(len(prime)):\n        if n % prime[i] == 0:\n            j += 1\n            n = n // prime[i]\n    if j == 2:\n        print(n)\n    else:\n        print(prime[j-1]+2)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 0\n    m = 1\n    for i in range(1, n):\n        a = (a + m) % n\n        m = (m + a) % n\n        if m == 0:\n            return False\n    return True\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for index, element in enumerate(test_tup1):\n        if index % 2 == 0:\n            result.append(element/test_tup2[index])\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Write your code here\n    \n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #first evaluate the strings to strings for the first and second tuples\n    first_string = ''.join([str(i) for i in test_tup1])\n    second_string = ''.join([str(i) for i in test_tup2])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [x / y for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Write your code here\n    \n    tup_1 = test_tup1\n    tup_2 = test_tup2\n    \n    i = 0\n    while(i < len(tup_1)):\n        if tup_1[i]!= tup_2[i]:\n            break\n        else:\n            tup_1[i] = 0\n        i = i + 1\n    \n    for i in range(len(tup_1)):\n        if tup_1[i]!= 0:\n            break\n        else:\n            tup_1[i] = 1\n        \n    for i in range(len(tup_1)):\n        tup_1[i] = tup_1[i] / tup_2[i]\n    \n    return tup_1\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # In this example, we are creating a tuples of ints: [5,6,7,8,9]\n    # Each element of this tuple is the sum of all the elements in the first tuple and the second tuple: [3,6,9,8,5]\n    # We are going to do a mathematical division between each element of this tuple, to get the resulting list: [1/3, 1/2, 1/3, 1/2, 1/3]\n    # The list is converted to an array in order to easily access the elements in order of the tuples: [1, 2, 3, 6, 9]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup_list1 = test_tup1[0]\n    test_tup_list2 = test_tup2[0]\n    test_tup_list3 = test_tup1[1]\n    test_tup_list4 = test_tup2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Iterate through the two tuples to get the first value and second value and split them up by the given value\n    # Start by getting the first value\n    first = test_tup1[0]\n    # Iterate through the first value and split it up by the given value\n    for i in range(0, len(test_tup1[0])):\n        test_tup1[0][i] = test_tup1[0][i].split(first)\n    # Get the second value\n    second = test_tup2[0]\n    # Iterate through the second value and split it up by the given value\n    for i in range(0, len(test_tup2[0])):\n        test_tup2[0][i] = test_tup2[0][i].split(second)\n    # Split the first value up into list, get the first element and divide by the given second value\n    # Use a list comprehension to create a list from the first value and divide by the second value\n    first_list = [int(elem) for elem in test_tup1[0]]\n    first_list = list(map(int, first_list))\n    first_list.remove(second)\n    first_list = list(map(int, first_list))\n    first_list.remove(first)\n    first_list.remove(second)\n    first_list = list(map(int, first_list))\n    # Iterate through the second value and split it up by the given value\n    for i in range(0, len(test_tup2[0])):\n        test_tup2[0][i] = test_tup2[0][i].split(second)\n    # Get the second value\n    second_val = test_tup2[0][0]\n    # If the second value is a number that can be divided by the first value\n    if int(second_val) == second:\n        # Get the first value\n        first_val = test_tup1[0][0]\n        # Get the first element and divide by the first value\n        first_val = int(first_val) / float(first)\n        # Get the second element and divide by the second value\n        second_val = int(second_val) / float(second)\n        # Get the rounded down percentage from the rounded up percentage\n        rounded_down = round(first_val, 2)\n        # Get the rounded up percentage from the rounded up percentage\n        rounded_up = round(second_val, 2)\n        # Return the rounded down percentage to the caller\n        return [rounded_down, rounded_up]\n    # Otherwise, return the second value as is\n    else:\n        # Get the first value\n        first_val = test_tup1[0][0]\n        # Get the first element and divide by the first value\n        first_val = int(first_val) / float(first)\n        # Get the second value and divide by the second value\n        second_val = int(second_val) / float(second)\n        # Get the rounded down percentage from the rounded up percentage\n        rounded_down = round(first_val, 2)\n        # Get the rounded up percentage from the rounded up percentage\n        rounded_up = round(second_val, 2)\n        # Return the rounded down percentage to the caller\n        return [rounded_down, rounded_up]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize all variables\n    num1, num2 = 0, 0\n    \n    # Convert each tuple into a number\n    for num in test_tup1:\n        num1 += num\n    for num in test_tup2:\n        num2 += num\n    \n    # Print out the numbers and divide\n    print(\"The numbers in\", test_tup1, \"and\", test_tup2, \"are\", num1/num2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #your code here\n    return (test_tup1[0]/test_tup2[0])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 0:\n        raise ValueError('Less than zero length, please.')\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return list1\n    else:\n        return split_two_parts(list1[0:L], L-1) + [list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 1:\n        return None\n    else:\n        #Split the list into parts\n        parts1 = list1[0:L]\n        parts2 = list1[L:]\n        #return parts and parts1\n        return (parts1, parts2)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return tuple()\n    elif L <= 1:\n        return list1\n    else:\n        return list1[:L-1], list1[L-1:]\n    \n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split = list1[:L//2]\n    end = list1[L//2:]\n    return split, end\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = [item for item in list1 if item < L]\n    part2 = [item for item in list1 if item >= L]\n    return tuple(part1), tuple(part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 1:\n        return list1, list1\n    else:\n        result = split_two_parts(list1[:L-1],L)\n        result += split_two_parts(list1[L-1:],L)\n        return result\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 2:\n        return (list1, list1)\n    else:\n        # Get the first part of the list\n        split_1 = list1[:L-2]\n        # Split the second part\n        split_2 = list1[L-2:]\n        # Return the result\n        return (split_1, split_2)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 1 and h_age <= 2:\n        return h_age\n    else:\n        return f'You entered an invalid age. Please try again!'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    if h_age < 1:\n        return 'Not at all.'\n    elif 1 <= h_age <= 2:\n        return '1 - 2 years'\n    elif 3 <= h_age <= 4:\n        return '3 - 4 years'\n    elif 5 <= h_age <= 6:\n        return '5 - 6 years'\n    elif h_age >= 7:\n        return '7 - 8 years'\n    \n    \n    \n    \n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 60:\n        return h_age\n    else:\n        return h_age + 1\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return(h_age*365)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age = h_age/1.0\n    print '{:.1f} years old'.format(h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=0:\n        return 'Invalid dog age'\n    elif h_age >=6:\n        return 'Old enough to drive dog'\n    elif h_age >= 4 and h_age <=8:\n        return 'Standard'\n    elif h_age >=1 and h_age <=3:\n        return 'Young'\n    else:\n        return 'Adult'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    # return the age in dog years\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 3:\n        return 'no'\n    elif 3 <= h_age <= 6:\n        return 'adult'\n    elif 6 <= h_age <= 9:\n        return'senior'\n    else:\n        return 'kid'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return \"Sorry, age cannot be less than 0.\"\n    elif h_age == 0:\n        return \"You are a young dog.\"\n    elif h_age <= 1:\n        return \"You are a dog.\"\n    elif h_age >= 2:\n        return \"You are a dad.\"\n    \nprint(dog_age(5))\nprint(dog_age(-2))\nprint(dog_age(1.5))\nprint(dog_age(0))"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_age = h_age\n    dogs_age = dogs_age * 365\n    dogs_age = dogs_age * 12\n    return dogs_age\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(0, len(S), step):\n        lst.append(S[i:i+step])\n    return lst\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i + step])\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step==0:\n        return [[]]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [[S[i:i + step]] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [list(S[i:i+step]) for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = S[0]\n    res = []\n    for i in range(1,len(S),step):\n        res.append(S[i:(i+step)])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(0, len(S), step):\n        a.append(S[i:i + step])\n    return a\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = [int(i) for i in S]\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code goes here\n    return 0.5 * l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    A = l*l\n    B = l*l*l\n    C = l*l*l*l\n    D = l*l*l*l\n    return A + B + C + D\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Get the length of the input cube\n    r = l/2\n    # Check if the length of the input cube is positive\n    if r < 0:\n        # If so, return the error message\n        return 'The length of the input cube must be positive.'\n    # Else if it is not positive, compute the absolute value\n    # of the input cube\n    else:\n        # Get the absolute value of the input cube\n        a = abs(r)\n        # Check if the absolute value of the input cube is greater than 0\n        if a > 0:\n            # If so, return the error message\n            return 'The length of the input cube must be positive.'\n        # Else, return the absolute value of the input cube\n        else:\n            # Get the absolute value of the input cube\n            b = abs(r)\n            # Check if the absolute value of the input cube is greater than 0\n            if b > 0:\n                # If so, return the error message\n                return 'The length of the input cube must be positive.'\n            # Else, return the absolute value of the input cube\n            else:\n                # Get the absolute value of the input cube\n                c = abs(r)\n                # Check if the absolute value of the input cube is greater than 0\n                if c > 0:\n                    # If so, return the error message\n                    return 'The length of the input cube must be positive.'\n                # Else, return the absolute value of the input cube\n                else:\n                    # Check if the absolute value of the input cube is greater than 0\n                    if c >= b:\n                        # If so, return the error message\n                        return 'The length of the input cube must be positive.'\n                    # Else, return the absolute value of the input cube\n                    else:\n                        # Get the absolute value of the input cube\n                        d = abs(r)\n                        # Check if the absolute value of the input cube is greater than 0\n                        if d > 0:\n                            # If so, return the error message\n                            return 'The length of the input cube must be positive.'\n                        # Else, return the absolute value of the input cube\n                        else:\n                            # Return the error message\n                            return 'The length of the input cube must be positive.'\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area=0\n    for i in range(l-1):\n        area=area+(((i+1)*(i+1)*(l-1)*(l-1)))\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l*(l**2-l)\n    return a\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code goes here\n    \n    if l == 0:\n        return 0\n    elif l > 0:\n        return l*(l*l*(l*l+1)/4)\n    elif l < 0:\n        return l*(l*l+1)*(l*l+1)/4\n    "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 1\n    while s < l:\n        s = l*s\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # define the array to store the lateral surface area of the cube\n    lateralSurfaceArea = []\n    for i in range(l):\n        lateralSurfaceArea.append(i)\n    # count the total number of side lengths\n    sideLengths = []\n    for i in range(l):\n        sideLengths.append(l-i)\n    # create a list with the lateral surface areas of each side length\n    lateralSurfaceArea_list = []\n    for i in range(len(sideLengths)):\n        lateralSurfaceArea_list.append(lateralSurfaceArea[i]*sideLengths[i])\n    # sum the lateral surface areas and add to the result\n    finalSurfaceArea = 0\n    for i in lateralSurfaceArea_list:\n        finalSurfaceArea += i\n    return finalSurfaceArea\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l > 1:\n        #l = l - 1\n        l = l + 2\n        #l = l - 2\n        l = l + 3\n        #l = l + 3\n        return l\n    else:\n        return 0\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    f = lambda l: 2*l*np.pi*(np.sin(l/2))\n    s = lambda l: f(l)*(np.cos(l/2))\n    return (s(l)*np.pi)**2\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x ** 2 for x in range(1,n+1) if x % 2 == 0])\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    square_of_odds=0\n    for i in range(1,n+1):\n        if i%2==0:\n            square_of_odds+=i**2\n            \n    return square_of_odds\n        "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    '''\n    BEGIN:\n    def square_Sum(n):\n        square = 0\n        for i in range(1, n+1, 2):\n            square = square + i\n        return square\n    END:\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if (n < 0):\n        print (\"Please enter a positive integer\")\n        return\n    elif (n == 0):\n        return 1\n    elif (n % 2) == 0:\n        return (n*n)\n    else:\n        total = (n*n)\n        if n > 1:\n            total += (square_Sum(n-1))\n        print(total)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_square = 0\n    for i in range(1, n + 1):\n        sum_square += i * i\n    return sum_square\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #Write your code here\n    return n*(n+1)*(n+2)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum = sum + (i ** 2)\n        i = i + 1\n    return sum\n    \nn = int(input(\"Enter a number: \"))\nprint(square_Sum(n))"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n    start = -math.sqrt(3) + 1\n    end = math.sqrt(3) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if find_star_num(mid) == n:\n            return mid\n        elif find_star_num(mid) > n:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_star_num(n - 1) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #n = int(input(\"Enter the number: \"))\n    i=1\n    while i<=n:\n        if i%3==0:\n            print(i)\n        i+=1\n        \n        \nfind_star_num(3)\n    "
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    \n    \n    pass "
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1):\n        if i**3 % n == 0:\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 5\n    elif n == 5: \n        return 6\n    elif n == 6: \n        return 7\n    elif n == 7: \n        return 8\n    elif n == 8: \n        return 9\n    elif n == 9: \n        return 10\n    elif n == 10: \n        return 11\n    elif n == 11: \n        return 12\n    else:\n        return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Write your code here.\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            print(i+1, end ='')\n        else:\n            print(i+1, end ='')\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    f_star_n = 1\n    for i in range(1, n + 1):\n        f_star_n = f_star_n * i\n    return f_star_n\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return n - 1\n    \n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    import string, unidecode\n    return unidecode.unidecode(string.ascii_lowercase[k])\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    if k > len(chr):\n        raise TypeError('Invalid character')\n        \n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ch = k\n    for i in range(32):\n        ch = chr(ord(ch) - 1)\n    return ch\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return''\n    elif k == '!':\n        return '! '\n    elif k == '?':\n        return '? '\n    elif k == '\"' or k == \"'\":\n        return '\"'\n    elif k == '\\\\':\n        return '\\\\ '\n    elif k == '`':\n        return '` '\n    elif k == '%':\n        return '% '\n    elif k == '+':\n        return '+ '\n    elif k == '*':\n        return '* '\n    elif k == '=':\n        return '='\n    elif k == '?':\n        return '?'\n    elif k =='':\n        return''\n    elif k == ',':\n        return ','\n    elif k == '.':\n        return '.'\n    elif k == '/':\n        return '/'\n    elif k == ':':\n        return ':'\n    elif k == ';':\n        return ';'\n    elif k == '<':\n        return '<'\n    elif k == '>':\n        return '>'\n    elif k == '?':\n        return '?'\n    elif k == '_':\n        return '_'\n    elif k == '=':\n        return '='\n    elif k == '{':\n        return '{'\n    elif k == '}':\n        return '}'\n    elif k == ',':\n        return ','\n    elif k == '}':\n        return '}'\n    elif k == '@':\n        return '@'\n    elif k == '!':\n        return '! '\n    elif k == '!':\n        return '!'\n    elif k == '?':\n        return '? '\n    elif k == '\"':\n        return '\"'\n    elif k == '~':\n        return '~ '\n    elif k == '|':\n        return '| '\n    elif k == '>':\n        return '> '\n    elif k == '&':\n        return '& '\n    elif k == '?':\n        return '?'\n    elif k == '*':\n        return '* '\n    elif k == ',':\n        return ','\n    elif k == '.':\n        return '.'\n    elif k == '%':\n        return '% '\n    elif k == '+':\n        return '+ '\n    elif k == '*':\n        return '* '\n    elif k == '=':\n        return '='\n    elif k == ';':\n        return ';'\n    elif k == '_':\n        return '_'\n    elif k == '>':\n        return '> '\n    elif k == '=':\n        return '='\n    elif k == '{':\n        return '{'\n    elif k == '}':\n        return '}'\n    elif k == ',':\n        return ','\n    elif k == '}':\n        return '}'\n    elif k == '@':\n        return '@'\n    elif k == '!':\n        return '! '\n    elif k == '!':\n        return '!'\n    elif k == '?':\n        return '? '\n    elif k == '\"':\n        return '\"'\n    elif k == '~':\n        return '~ '\n    elif k == '|':\n        return '| '\n    elif k == '>':\n        return '> '\n    elif k == '&':\n        return '& '\n    elif k == '?':\n        return '?'\n    elif k == '*':\n        return '* '\n    elif k == ',':\n        return ','\n    elif k == '.':\n        return '.'\n    elif k == '%':\n        return '% '\n    elif k == '+':\n        return '+ '\n    elif k == '*':\n        return '* '\n    elif k == '=':\n        return '='\n    elif k == ';':\n        return ';'\n    elif k == '_':\n        return '_'\n    elif k == '>':\n        return '> '\n    elif k == '=':\n        return '='\n    elif k == '{':\n        return '{'\n    elif k == '}':\n        return '}'\n    elif k == ',':\n        return ','\n    elif k == '}':\n        return '}'\n    elif k == '@':\n        return '@'\n    elif k == '!':\n        return '! '\n    elif k == '!':\n        return '!'\n    elif k == '?':\n        return '? '\n    elif k == '\"':\n        return '\"'\n    elif k == '~':\n        return '~ '\n    elif k == '|':\n        return '| '\n    elif k == '>':\n        return '> '\n    elif k == '&':\n        return '& '\n    elif k == '?':\n        return '?'\n    elif k == '*':\n        return '* '\n    elif k == ',':\n        return ','\n    elif k == '.':\n        return '.'\n    elif k == '%':\n        return '% '\n    elif k == '+':\n        return '+ '\n    elif k == '*':\n        return '* '\n    elif k == '=':\n        return '='\n    elif k == ';':\n        return ';'\n    elif k == '_':\n        return '_'\n    elif k == '>':\n        return '> '\n    elif k == '=':\n        return '='\n    elif k == '{':\n        return '{'\n    elif k == '}':\n        return '}'\n    elif k == ',':\n        return ','\n    elif k == '}':\n        return '}'\n    elif k == '@':\n        return '@'\n    elif k == '!':\n        return '! '\n    elif k == '!':\n        return '!'\n    elif k == '?':\n        return '? '\n    elif k == '\"':\n        return '\"'\n    elif k == '~':\n        return '~ '\n    elif k == '|':\n        return '| '\n    elif k == '>':\n        return '> '\n    elif k == '&':\n        return '& '\n    elif k == '?':\n        return '?'\n    elif k == '*':\n        return '* '\n    elif k == ',':\n        return ','\n    elif k == '.':\n        return '.'\n    elif k == '%':\n        return '% '\n    elif k == '+':\n        return '+ '\n    elif k == '*':\n        return '* '\n    elif k == '=':\n        return '='\n    elif k == ';':\n        return ';'\n    elif k == '_':\n        return '_'\n    elif k == '>':\n        return '> '\n    elif k == '=':\n        return '='\n    elif k == '{':\n        return '{'\n    elif k == '}':\n        return '}'\n    elif k == ',':\n        return ','\n    elif k == '}':\n        return '}'\n    elif k == '@':\n        return '@'\n    elif k == '!':\n        return '! '\n    elif k == '!':\n        return '!'\n    elif k == '?':\n        return '? '\n    elif k == '\"':\n        return '\"'\n    elif k == '~':\n        return '~ '\n    elif k == '|':\n        return '| '\n    elif k == '>':\n        return '> '\n    elif k == '&':\n        return '& '\n    elif k == '?':\n        return '?'\n    elif k == '*':\n        return '* '\n    elif "
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if not isinstance(k, str):\n        raise TypeError(f'The value of {k} must be a string')\n    \n    return unidecode(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(int(k, base=16))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Your code goes here...\n    # pass\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            evens.append(arr[i])\n    return sum(evens)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = []\n    for i in arr:\n        if i % 2 == 0:\n            evens.append(i)\n    return sum(evens)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in arr:\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0):\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in arr:\n        if i%2==0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n    return even_sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in arr:\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code goes here\n    return sum([int(x**5) for x in range(n+1)])\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    answer = 0\n    for i in range(1, n+1):\n        answer += i**(5)\n    return answer\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            result += i ** 5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return \"Please input a positive integer\"\n    elif n==1:\n        return 1\n    else:\n        first_power = n//10\n        second_power = (n%10)**2\n        third_power = (n%10)**3\n        fourth_power = (n%10)**4\n        fifth_power = (n%10)**5\n        return first_power+second_power+third_power+fourth_power+fifth_power\n    \nprint(even_Power_Sum(1))\nprint(even_Power_Sum(4))\nprint(even_Power_Sum(7))\nprint(even_Power_Sum(17))\nprint(even_Power_Sum(0))\nprint(even_Power_Sum(-1))\nprint(even_Power_Sum(-3))\nprint(even_Power_Sum(1))\nprint(even_Power_Sum(2))\nprint(even_Power_Sum(3))\nprint(even_Power_Sum(4))\nprint(even_Power_Sum(5))\nprint(even_Power_Sum(6))\nprint(even_Power_Sum(7))\nprint(even_Power_Sum(8))\nprint(even_Power_Sum(9))\nprint(even_Power_Sum(10))\nprint(even_Power_Sum(11))\nprint(even_Power_Sum(12))\nprint(even_Power_Sum(13))\nprint(even_Power_Sum(14))\nprint(even_Power_Sum(15))\nprint(even_Power_Sum(16))\nprint(even_Power_Sum(17))\nprint(even_Power_Sum(18))\nprint(even_Power_Sum(19))\nprint(even_Power_Sum(20))\nprint(even_Power_Sum(21))\nprint(even_Power_Sum(22))\nprint(even_Power_Sum(23))\nprint(even_Power_Sum(24))\nprint(even_Power_Sum(25))\nprint(even_Power_Sum(26))\nprint(even_Power_Sum(27))\nprint(even_Power_Sum(28))\nprint(even_Power_Sum(29))\nprint(even_Power_Sum(30))\nprint(even_Power_Sum(31))\nprint(even_Power_Sum(32))\nprint(even_Power_Sum(33))\nprint(even_Power_Sum(34))\nprint(even_Power_Sum(35))\nprint(even_Power_Sum(36))\nprint(even_Power_Sum(37))\nprint(even_Power_Sum(38))\nprint(even_Power_Sum(39))\nprint(even_Power_Sum(40))\nprint(even_Power_Sum(41))\nprint(even_Power_Sum(42))\nprint(even_Power_Sum(43))\nprint(even_Power_Sum(44))\nprint(even_Power_Sum(45))\nprint(even_Power_Sum(46))\nprint(even_Power_Sum(47))\nprint(even_Power_Sum(48))\nprint(even_Power_Sum(49))\nprint(even_Power_Sum(50))\nprint(even_Power_Sum(51))\nprint(even_Power_Sum(52))\nprint(even_Power_Sum(53))\nprint(even_Power_Sum(54))\nprint(even_Power_Sum(55))\nprint(even_Power_Sum(56))\nprint(even_Power_Sum(57))\nprint(even_Power_Sum(58))\nprint(even_Power_Sum(59))\nprint(even_Power_Sum(60))\nprint(even_Power_Sum(61))\nprint(even_Power_Sum(62))\nprint(even_Power_Sum(63))\nprint(even_Power_Sum(64))\nprint(even_Power_Sum(65))\nprint(even_Power_Sum(66))\nprint(even_Power_Sum(67))\nprint(even_Power_Sum(68))\nprint(even_Power_Sum(69))\nprint(even_Power_Sum(70))\nprint(even_Power_Sum(71))\nprint(even_Power_Sum(72))\nprint(even_Power_Sum(73))\nprint(even_Power_Sum(74))\nprint(even_Power_Sum(75))\nprint(even_Power_Sum(76))\nprint(even_Power_Sum(77))\nprint(even_Power_Sum(78))\nprint(even_Power_Sum(79))\nprint(even_Power_Sum(80))\nprint(even_Power_Sum(81))\nprint(even_Power_Sum(82))\nprint(even_Power_Sum(83))\nprint(even_Power_Sum(84))\nprint(even_Power_Sum(85))\nprint(even_Power_Sum(86))\nprint(even_Power_Sum(87))\nprint(even_Power_Sum(88))\nprint(even_Power_Sum(89))\nprint(even_Power_Sum(90))\nprint(even_Power_Sum(91))\nprint(even_Power_Sum(92))\nprint(even_Power_Sum(93))\nprint(even_Power_Sum(94))\nprint(even_Power_Sum(95))\nprint(even_Power_Sum(96))\nprint(even_Power_Sum(97))\nprint(even_Power_Sum(98))\nprint(even_Power_Sum(99))\nprint(even_Power_Sum(100))\nprint(even_Power_Sum(101))\nprint(even_Power_Sum(102))\nprint(even_Power_Sum(103))\nprint(even_Power_Sum(104))\nprint(even_Power_Sum(105))\nprint(even_Power_Sum(106))\nprint(even_Power_Sum(107))\nprint(even_Power_Sum(108))\nprint(even_Power_Sum(109))\nprint(even_Power_Sum(110))\nprint(even_Power_Sum(111))\nprint(even_Power_Sum(112))\nprint(even_Power_Sum(113))\nprint(even_Power_Sum(114))\nprint(even_Power_Sum(115))\nprint(even_Power_Sum(116))\nprint(even_Power_Sum(117))\nprint(even_Power_Sum(118))\nprint(even_Power_Sum(119))\nprint(even_Power_Sum(120))\nprint(even_Power_Sum(121))\nprint(even_Power_Sum(122))\nprint(even_Power_Sum(123))\nprint(even_Power_Sum(124))\nprint(even_Power_Sum(125))\nprint(even_Power_Sum(126))\nprint(even_Power_Sum(127))\nprint(even_Power_Sum(128))\nprint(even_Power_Sum(129))\nprint(even_Power_Sum(130))\nprint(even_Power_Sum(131))\nprint(even_Power_Sum(132))\nprint(even_Power_Sum(133))\nprint(even_Power_Sum(134))\nprint(even_Power_Sum(135))\nprint(even_Power_Sum(136))\nprint(even_Power_Sum(137))\nprint(even_Power_Sum(138))\nprint(even_Power_Sum(139))\nprint(even_Power_Sum(140))\nprint(even_Power_Sum(141))\nprint(even_Power_Sum(142))\nprint(even_Power_Sum(143))\nprint(even_Power_Sum(144))\nprint(even_Power_Sum(145))\nprint(even_Power_Sum(146))\nprint(even_Power_Sum(147))\nprint(even_Power_Sum(148))\nprint(even_Power_Sum(149))\nprint(even_Power_Sum(150))\nprint(even_Power_Sum(151))\nprint(even_Power_Sum(152))\nprint(even_Power_Sum(153))\nprint(even_Power_Sum(154))\nprint(even_Power_Sum(155))\nprint(even_Power_Sum(156))\nprint(even_Power_Sum(157))\nprint(even_Power_Sum(158))\nprint(even_Power_Sum(159))\nprint(even_Power_Sum(160))\nprint(even_Power_Sum(161))\nprint(even_Power_Sum(162))\nprint(even_Power_Sum(16"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    powers = []\n    for i in range(1, n):\n        power = i**5\n        powers.append(power)\n    return(sum(powers))\nprint(even_Power_Sum(7))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    while n > 0:\n        power = n % 10\n        if power == 5:\n            result += 1\n        else:\n            result += power ** 3\n        n //= 10\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # create a new list that will contain the sum of the first n even natural numbers that are raised to the fifth power\n    sum = []\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            sum.append(i ** 3)\n    # return the sum of the first n even natural numbers\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code goes here\n    return 0\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n, 0, -1):\n        sum = sum + i**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list = [(i,j) for i,j in test_list]\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list = list(test_list)\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[1] for elem in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for elem in test_list:\n        new_list.append(elem[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for x in test_list:\n        rear.append(x[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO: complete this function\n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return []\n    return test_list[0][1]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list_rear = list()\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    rear = []\n    \n    for tuple in test_list:\n        rear.append(tuple[-1])\n    \n    return rear\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    if len(test_tup1)!= len(test_tup2):\n        print(\"ERROR: test_tup1 and test_tup2 must have the same length\")\n        return\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # WRITE YOUR CODE HERE\n    if len(test_tup1)!= len(test_tup2):\n        return \"Inputs must have the same length\"\n    \n    for x in range(len(test_tup1)):\n        if x!= test_tup1[x]:\n            test_tup1[x] -= test_tup2[x]\n    return test_tup1\n    \n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list1.extend(test_list2)\n    test_list1 = tuple(test_list1)\n    return test_list1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TEST CASE 1\n    if len(test_tup1) == 0:\n        return test_tup2\n    # TEST CASE 2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    # TEST CASE 3\n    elif test_tup1[0] == test_tup2[0]:\n        return substract_elements(test_tup1[1:], test_tup2[1:])\n    # TEST CASE 4\n    elif test_tup1[0]!= test_tup2[0]:\n        return test_tup2\n    # TEST CASE 5\n    else:\n        return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Instructions\n    # Set up two different lists of numbers. The second list will contain the values of the elements in the first tuple.\n    # For each index in the second list, the first list will be the same length as the first list, and each element in the second list will be\n    # added to the first list.\n    # For example, if the second tuple is (2, 5, 4, 8, 10, 6), the result is (2, 5, 10, 8, 6, 4).\n    # Write a function that takes in a tuple, and returns a tuple with the same values but the first index of the second tuple added to the second index.\n    # You should do this for every index in the first tuple.\n    # For example, the first tuple would be (2, 5, 4, 8, 10, 6), the second tuple would be (5, 2, 4, 10, 8, 6).\n    # Hint: You can use the list function in the'sorting' section of the 'functions' course.\n    \n    # Return value (tuple): (2, 5, 6)\n    \n    #Examples\n    # test_tup1 = (2, 5, 4, 8, 10, 6)\n    # test_tup2 = (5, 2, 4, 10, 8, 6)\n    # substract_elements(test_tup1, test_tup2)\n    # output: (2, 5, 4, 6, 8, 10)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = test_tup1[0] - test_tup2[0]\n    return result\n    \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiplies the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = test_tup1[0] * test_tup2[0]\n    return result\n    \ndef length(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns its length.\n    '''\n    return len(test_tup1)\n    \ndef get_type(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns its type.\n    '''\n    if len(test_tup1) == 0:\n        return str(type(None))\n    elif len(test_tup1) == 1:\n        return str(type(test_tup1[0]))\n    elif len(test_tup1) == 2:\n        return str(type(test_tup1[0])) + \"*\" + str(type(test_tup1[1]))\n    elif len(test_tup1) == 3:\n        return str(type(test_tup1[0])) + \"*\" + str(type(test_tup1[1])) + \"*\" + str(type(test_tup1[2]))\n    elif len(test_tup1) == 4:\n        return str(type(test_tup1[0])) + \"*\" + str(type(test_tup1[1])) + \"*\" + str(type(test_tup1[2])) + \"*\" + str(type(test_tup1[3]))\n    else:\n        return str(type(test_tup1[0])) + \"*\" + str(type(test_tup1[1])) + \"*\" + str(type(test_tup1[2])) + \"*\" + str(type(test_tup1[3])) + \"*\" + str(type(test_tup1[4]))\n    \ndef remove_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and removes the elements of the first tuple with the same index from the second tuple.\n    '''\n    result = test_tup1[0:0]\n    return result\n    \ndef concatenate_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and concatenates the elements of the first tuple with the elements of the second tuple with the same index.\n    '''\n    result = test_tup1 + test_tup2\n    return result\n    \ndef str_to_float(test_tup1):\n    '''\n    Write a function that takes in a string, converts it to a float, and converts it back to a string.\n    '''\n    return float(test_tup1)\n    \ndef str_to_int(test_tup1):\n    '''\n    Write a function that takes in a string, converts it to an int, and converts it back to a string.\n    '''\n    return int(test_tup1)\n    \ndef str_to_list(test_tup1):\n    '''\n    Write a function that takes in a string, converts it to a list, and converts it back to a string.\n    '''\n    return list(test_tup1)\n    \ndef get_index_of_element(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the index of the first element in the second tuple.\n    '''\n    return test_tup1.index(test_tup2)\n    \ndef get_index_of_element_positional(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the index of the first element in the second tuple in the position of the index of the first element in the second tuple.\n    '''\n    return test_tup1.index(test_tup2, test_tup1.index(test_tup2))\n    \ndef convert_to_string(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a string.\n    '''\n    return str(test_tup1)\n    \ndef convert_to_list(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a list.\n    '''\n    return list(test_tup1)\n    \ndef convert_to_float(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a float.\n    '''\n    return float(test_tup1)\n    \ndef convert_to_int(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a int.\n    '''\n    return int(test_tup1)\n    \ndef convert_to_list_of_strings(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a list of strings.\n    '''\n    return list(str(test_tup1))\n    \ndef convert_to_float_list(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a list of floats.\n    '''\n    return list(map(float, str(test_tup1)))\n    \ndef convert_to_int_list(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a list of ints.\n    '''\n    return list(map(int, str(test_tup1)))\n    \ndef reverse_tuple(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a tuple with the first element reversed.\n    '''\n    return tuple(reversed(test_tup1[1:]))\n    \ndef reverse_tuple_list(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a list with the first element reversed.\n    '''\n    return list(reversed(test_tup1[1:]))\n    \ndef format_output_for_diff(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a formatted string with the first element in the second tuple and the second element in the first tuple.\n    '''\n    return str(test_tup1[0]) + \" \" + str(test_tup2[0])\n    \ndef format_output_for_sorted(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a formatted string with the first element in the second tuple and the second element in the first tuple.\n    '''\n    return str(test_tup1[0]) + \" \" + str(test_tup2[0]) + \" \" + str(test_tup1[1]) + \" \" + str(test_tup2[1])\n    \ndef sum_of_squares(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the sum of squares of the first tuple and the second tuple.\n    '''\n    result = test_tup1[0] * test_tup1[0]\n    return result\n    \ndef square_of_sum(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the square of the sum of squares of the first tuple and the second tuple.\n    '''\n    result = test_tup1[0] * test_tup1[0]\n    return result + test_tup2[0] * test_tup2[0]\n    \ndef reverse_string(test_tup1):\n    '''\n    Write a function that takes in a string and returns a tuple wit"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Convert to lists\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    # Check if all entries in the list are integers\n    if all(isinstance(e, int) for e in test_tup1):\n        if all(isinstance(e, int) for e in test_tup2):\n            # Check for non-negative entries\n            if all(e >= 0 for e in test_tup1):\n                # Create a new tuple\n                new_tup1 = tuple(test_tup1)\n                new_tup2 = tuple(test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1]\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s = s + ((2*i)-2) * i * math.factorial(2*i-1)\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 0\n    else:\n        return even_binomial_Coeff_Sum( n - 1) + even_binomial_Coeff_Sum(n - 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==0: \n        sum = 0\n    if n==1: \n        sum = 1\n    elif n>1: \n        for i in range(1,n+1): \n            sum = sum + (1/i) * even_binomial_Coeff_Sum(i-1) \n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += math.pow(i,2)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Create an empty list\n    odd_binomial_coeffs = []\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    i = 0\n    sum = 0\n    while (i < n):\n        sum += math.factorial(i)\n        i += 1\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<=1:\n        return 0\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*(math.factorial(i) / (math.factorial(i-2) * math.factorial(i-1)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    n = int(n)\n    num = n + 1\n    sum = 0\n    while (n!= 0):\n        if (n % 2 == 0):\n            sum += math.pow(2, num)\n        num += 1\n        n -= 1\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 10\n    if n == 4:\n        return 20\n    if n == 5:\n        return 50\n    if n == 6:\n        return 100\n    if n == 7:\n        return 200\n    if n == 8:\n        return 500\n    if n == 9:\n        return 1000\n    if n == 10:\n        return 2000\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*(4*3.141592654)/3.\n    \n    \n    \ndef volume_sierpinski(n,r,h):\n    '''\n    Write a function that takes in an integer n and a real r and a height h.\n    The function should calculate and return the volume of a sierpinski triangle,\n    where each side of the triangle is a number of circles.\n    '''\n    x = (n+1)*r\n    y = ((n+1)*r + h) + (n*h/2)\n    z = ((n+1)*r + h + (n*h/2)) + (n*h/2)\n    \n    if n == 0:\n        return 0\n    \n    if n < 0:\n        return -1\n    \n    if n > 1:\n        return volume_sierpinski(n-1,x,h/3) + volume_sierpinski(n-1,y,h/3) + volume_sierpinski(n-1,z,h/3)\n    \n    \n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r*h)/2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    print(\"\\nCylinder volume is %0.2f\"%volume(r,h))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    a = 2 * pi * r ** 2\n    b = 2 * pi * r * h\n    c = pi * r ** 2\n    d = 2 * pi * r ** 2\n    e = pi * r ** 2\n    f = 2 * pi * r ** 2\n    g = pi * r ** 2\n    h = 2 * pi * r ** 2\n    print('Volume of a cylinder with height'+ str(h) +'is:'+ str(a))\n    print('Volume of a cylinder with radius'+ str(r) +'is:'+ str(b))\n    print('Volume of a cylinder with diameter'+ str(r) +'is:'+ str(c))\n    print('Volume of a cylinder with height'+ str(h) +'is:'+ str(d))\n    print('Volume of a cylinder with radius'+ str(r) +'is:'+ str(e))\n    print('Volume of a cylinder with diameter'+ str(r) +'is:'+ str(f))\n    print('Volume of a cylinder with height'+ str(h) +'is:'+ str(g))\n    print('Volume of a cylinder with radius'+ str(r) +'is:'+ str(h))\n    print('Volume of a cylinder with diameter'+ str(r) +'is:'+ str(h))\n    return a\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r * h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3*np.pi*(r**3)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*(pi*r*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #Calculate volume\n    volume = r**3*h\n    #Return volume\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3)*pi*r*h\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = dict.copy()\n    filtered_dict = {k:v for k,v in filtered_dict.items() if v>n}\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.copy()\n    for x in dict:\n        if x >= n:\n            dict[x] = True\n    return dict\n    \ndef main():\n    '''\n    Write a function that reads in the following command-line arguments:\n    -a\n    -m\n    -o\n    -n\n    -print\n    -s\n    -t\n    -v\n    -vn\n    '''\n    \n    a = input(\"Input value: \")\n    m = int(input(\"Maximum: \"))\n    o = int(input(\"Output: \"))\n    n = int(input(\"Inputs for filter: \"))\n    t = input(\"Output filter: \")\n    v = int(input(\"Verbose: \"))\n    vn = int(input(\"Verbose output: \"))\n    \n    if v == 1:\n        print(\"Filter: \",a,\"Values are: \",dict_filter(dict,n))\n    elif vn == 1:\n        print(\"Filter: \",a,\"Values are: \",dict_filter(dict,n))\n    else:\n        print(\"Filter: \",a,\"Values are: \",dict_filter(dict,n))\n    \n    if t == \"s\":\n        print(\"Filter: \",a,\"Values are: \",dict_filter(dict,n))\n    elif t == \"t\":\n        print(\"Filter: \",a,\"Values are: \",dict_filter(dict,n))\n    elif t == \"v\":\n        print(\"Filter: \",a,\"Values are: \",dict_filter(dict,n))\n    else:\n        print(\"Filter: \",a,\"Values are: \",dict_filter(dict,n))\n        \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    def dict_filter_func(dic):\n        for key, val in dic.items():\n            if val > n:\n                del dic[key]\n    return dict_filter_func\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if dict==None:\n        return dict\n    else:\n        filtered_dict=dict.copy()\n        for key,value in dict.items():\n            if value>=n:\n                filtered_dict[key]=value\n        return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    nums = []\n    for i in dict:\n        if dict[i] > n:\n            nums.append(i)\n    return nums\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict={}\n    newdict.clear()\n    for key in dict:\n        if dict[key]>n:\n            newdict[key]=dict[key]\n    return newdict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = dict.copy()\n    for key, value in dict.items():\n        if value > n:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #your code goes here\n    count=0\n    for i in range(0,len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            if test_tup[i] < test_tup[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element < first:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[count]:\n            count += 1\n    print(\"The number of elements that occurs after the tuple element is \",count)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element < test_tup[0]:\n            count += 1\n    return count\n    \ndef count_second_elements(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns a dictionary with the \n    frequency of each tuple element. For example, if the tuple is \n    ({1, 2}, {3, 4}), then the function should return {1: 2, 3: 1}\n    '''\n    freq_dict = {}\n    for element in test_tup:\n        if element in freq_dict.keys():\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(0, len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1]:\n            print(test_tup[i] + \" occurs \" + str(i + 1) + \" times\")\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    lst = list(test_tup)\n    lst.sort()\n    for i in range(len(lst)):\n        if(lst[i] == lst[0]):\n            return i\n    return -1\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        print(f\"Found 1 element in the tuple: {test_tup[0]}\")\n    else:\n        print(f\"Found {len(test_tup)} elements in the tuple: {test_tup[0]}\")\n        for i in range(1,len(test_tup)):\n            if test_tup[i-1] < test_tup[i]:\n                print(f\"Found {i} element before the {test_tup[i-1]} element\")\n            else:\n                print(f\"Found {i} elements after the {test_tup[i-1]} element\")\n    return len(test_tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #Define the function to count the occurrences\n    #Prints out the tuple in the format\n    #\" (0, 1, 2, 3, 4) - it's a tuple\n    #0 - it's a tuple\n    #1 - it's a tuple\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for index in range(len(test_tup)):\n        if test_tup[index] == test_tup[index+1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0: \n        raise ValueError(\"Number should be a positive integer\")\n    elif n == 1: \n        return n \n    else: \n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n        \n        "
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Hint: this is a recursive function.\n    def is_num_decagonal(n, d):\n        if n==1:\n            return True\n        if n==d:\n            return False\n        if n%d==0:\n            return is_num_decagonal(n//d, d)\n        return is_num_decagonal(n-1, d)\n        \n    return is_num_decagonal(n, 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # O(n^2)\n    if n < 3:\n        return n\n    # O(n^2)\n    # check every floor of 2\n    for floor in range(2, int(n**0.5)+1):\n        # check every 2^floor in the range\n        for i in range(floor, floor**2 + 1):\n            # if this floor is even then we are at the floor\n            if i % floor == 0:\n                # break if we reach floor - 1\n                if floor - 2 == i // floor:\n                    return floor\n    # if there are no n/3 in the range then the answer is n\n    return n\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    n_th_dec = 1\n    # write your code here\n    n_th_dec = (n-1)//i\n    # if n is odd, return the number itself\n    if n%2==1:\n        return n_th_dec\n    # if n is even, return the value of n/2\n    else:\n        return (n_th_dec + n_th_dec//2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 0\n    while (i < n):\n        if (n - i > 1):\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    l=[]\n    l.append(n)\n    l.append(n+1)\n    l.append(n+2)\n    l.append(n+3)\n    l.append(n+4)\n    l.append(n+5)\n    l.append(n+6)\n    l.append(n+7)\n    l.append(n+8)\n    l.append(n+9)\n    l.append(n+10)\n    l.append(n+11)\n    l.append(n+12)\n    l.append(n+13)\n    l.append(n+14)\n    l.append(n+15)\n    l.append(n+16)\n    l.append(n+17)\n    l.append(n+18)\n    l.append(n+19)\n    l.append(n+20)\n    l.append(n+21)\n    l.append(n+22)\n    l.append(n+23)\n    l.append(n+24)\n    l.append(n+25)\n    l.append(n+26)\n    l.append(n+27)\n    l.append(n+28)\n    l.append(n+29)\n    l.append(n+30)\n    l.append(n+31)\n    l.append(n+32)\n    l.append(n+33)\n    l.append(n+34)\n    l.append(n+35)\n    l.append(n+36)\n    l.append(n+37)\n    l.append(n+38)\n    l.append(n+39)\n    l.append(n+40)\n    l.append(n+41)\n    l.append(n+42)\n    l.append(n+43)\n    l.append(n+44)\n    l.append(n+45)\n    l.append(n+46)\n    l.append(n+47)\n    l.append(n+48)\n    l.append(n+49)\n    l.append(n+50)\n    l.append(n+51)\n    l.append(n+52)\n    l.append(n+53)\n    l.append(n+54)\n    l.append(n+55)\n    l.append(n+56)\n    l.append(n+57)\n    l.append(n+58)\n    l.append(n+59)\n    l.append(n+60)\n    l.append(n+61)\n    l.append(n+62)\n    l.append(n+63)\n    l.append(n+64)\n    l.append(n+65)\n    l.append(n+66)\n    l.append(n+67)\n    l.append(n+68)\n    l.append(n+69)\n    l.append(n+70)\n    l.append(n+71)\n    l.append(n+72)\n    l.append(n+73)\n    l.append(n+74)\n    l.append(n+75)\n    l.append(n+76)\n    l.append(n+77)\n    l.append(n+78)\n    l.append(n+79)\n    l.append(n+80)\n    l.append(n+81)\n    l.append(n+82)\n    l.append(n+83)\n    l.append(n+84)\n    l.append(n+85)\n    l.append(n+86)\n    l.append(n+87)\n    l.append(n+88)\n    l.append(n+89)\n    l.append(n+90)\n    l.append(n+91)\n    l.append(n+92)\n    l.append(n+93)\n    l.append(n+94)\n    l.append(n+95)\n    l.append(n+96)\n    l.append(n+97)\n    l.append(n+98)\n    l.append(n+99)\n    l.append(n+100)\n    l.append(n+101)\n    l.append(n+102)\n    l.append(n+103)\n    l.append(n+104)\n    l.append(n+105)\n    l.append(n+106)\n    l.append(n+107)\n    l.append(n+108)\n    l.append(n+109)\n    l.append(n+110)\n    l.append(n+111)\n    l.append(n+112)\n    l.append(n+113)\n    l.append(n+114)\n    l.append(n+115)\n    l.append(n+116)\n    l.append(n+117)\n    l.append(n+118)\n    l.append(n+119)\n    l.append(n+120)\n    l.append(n+121)\n    l.append(n+122)\n    l.append(n+123)\n    l.append(n+124)\n    l.append(n+125)\n    l.append(n+126)\n    l.append(n+127)\n    l.append(n+128)\n    l.append(n+129)\n    l.append(n+130)\n    l.append(n+131)\n    l.append(n+132)\n    l.append(n+133)\n    l.append(n+134)\n    l.append(n+135)\n    l.append(n+136)\n    l.append(n+137)\n    l.append(n+138)\n    l.append(n+139)\n    l.append(n+140)\n    l.append(n+141)\n    l.append(n+142)\n    l.append(n+143)\n    l.append(n+144)\n    l.append(n+145)\n    l.append(n+146)\n    l.append(n+147)\n    l.append(n+148)\n    l.append(n+149)\n    l.append(n+150)\n    l.append(n+151)\n    l.append(n+152)\n    l.append(n+153)\n    l.append(n+154)\n    l.append(n+155)\n    l.append(n+156)\n    l.append(n+157)\n    l.append(n+158)\n    l.append(n+159)\n    l.append(n+160)\n    l.append(n+161)\n    l.append(n+162)\n    l.append(n+163)\n    l.append(n+164)\n    l.append(n+165)\n    l.append(n+166)\n    l.append(n+167)\n    l.append(n+168)\n    l.append(n+169)\n    l.append(n+170)\n    l.append(n+171)\n    l.append(n+172)\n    l.append(n+173)\n    l.append(n+174)\n    l.append(n+175)\n    l.append(n+176)\n    l.append(n+177)\n    l.append(n+178)\n    l.append(n+179)\n    l.append(n+180)\n    l.append(n+181)\n    l.append(n+182)\n    l.append(n+183)\n    l.append(n+184)\n    l.append(n+185)\n    l.append(n+186)\n    l.append(n+187)\n    l.append(n+188)\n    l.append(n+189)\n    l.append(n+190)\n    l.append(n+191)\n    l.append(n+192)\n    l.append(n+193)\n    l.append(n+194)\n    l.append(n+195)\n    l.append(n+196)\n    l.append(n+197)\n    l.append(n+198)\n    l.append(n+199)\n    l.append(n+200)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            n = n//i\n        i += 1\n    return n\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 0\n    j = n-1\n    while(i<j):\n        if(i+j == n-1):\n            return i\n        else:\n            i = i+1\n            j = j-1\n    return -1\n    "
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if (n == 1): \n        return 1\n    else: \n        n = n-1\n        if (n % 2 == 0): \n            return is_num_decagonal(n/2) \n        else: \n            return n/2\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #if the array is empty, return None\n    if not dlist:\n        return None\n    #if the element is not in the array, return None\n    elif dlist[0]!= item:\n        return None\n    # if the element is the first element of the array, return the index position of the element\n    elif 0 == len(dlist):\n        return 0, -1\n    # if the element is not the last element, return the index position of the element, and the rest of the elements\n    else:\n        index = len(dlist)-1\n        for index in range(len(dlist)-1):\n            if dlist[index] == item:\n                return index, -1\n        return None\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    while i < len(dlist):\n        if item == dlist[i]:\n            return i, i\n        i += 1\n    return -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n        else:\n            return (False, -1)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    def check_value(x):\n        return x == item\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (dlist[i],i)\n    return (-1,-1)\n    \n    \ndlist = [1, 4, 9, 16, 25, 36, 49, 64, 81]\nitem = 4\nret = check_value(item)\nprint(ret)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    \n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Write your code here\n    for i in range(len(dlist)-1):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    # Use a loop to go through the array and check for the element\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True,i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    from collections import Counter\n    counter = Counter(test_list)\n    # print(counter)\n    # print(counter.values())\n    # print(len(counter))\n    if len(counter)!= len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_with_duplicate = []\n    for i in test_list:\n        if i not in list_with_duplicate:\n            list_with_duplicate.append(i)\n    return list_with_duplicate\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #Check for uniqueness\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    \n    #Return a list of unique items\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(\"Expected: {}\".format(test_list))\n    print(\"Actual: {}\".format(list(set(test_list))))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(set(test_list))\n    print(test_list)\n    return test_list!= [''] and test_list!= []\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for element in test_list:\n        if element not in unique:\n            unique.append(element)\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list=[]\n    for i in test_list:\n        if i not in test_list:\n            test_list.append(i)\n    return len(test_list)==len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Your code here\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if i in test_list:\n            return False\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sublist=[]\n    for i in range(len(nums1)):\n        sublist.append(nums1[i]-nums2[i])\n    return sublist\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return nums1 - nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list=[]\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"List must be same length\"\n    if len(nums2) == 0:\n        return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x:x[1] - x[0],zip(nums1,nums2)))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if(nums1 == []):\n        nums1.append(0)\n        nums2.append(0)\n    if(nums2 == []):\n        nums1.append(0)\n        nums2.append(0)\n    nums1.append(nums1[0])\n    nums2.append(nums2[0])\n    return nums1,nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    output = []\n    for i in range(len(nums1)):\n        output.append(nums1[i]-nums2[i])\n    return output\n    # pass\ndef sub_list_recursive(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    output = []\n    if len(nums1) > len(nums2):\n        for i in range(len(nums1)):\n            output.append(nums1[i]-nums2[i])\n    else:\n        for i in range(len(nums2)):\n            output.append(nums2[i]-nums1[i])\n    return output\n    # pass\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!=len(nums2):\n        return \"Lengths of the two lists should be the same.\"\n    n1 = 0\n    for num in nums1:\n        n1 += num\n    n2 = 0\n    for num in nums2:\n        n2 += num\n    s = 0\n    for i in range(len(nums1)):\n        s += nums1[i] - nums2[i]\n    return n1-s\n    \ndef substract(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!=len(nums2):\n        return \"Lengths of the two lists should be the same.\"\n    s = 0\n    for num in nums1:\n        s += num\n    nums3 = []\n    for i in nums2:\n        nums3.append(s)\n    return nums3\n    \n    \ndef main():\n    print(\"Pass 1:\")\n    nums1 = [0,2,3,4,5,6,7,8,9,10]\n    nums2 = [2,4,6,8,10,12,14,16,18,20]\n    answer = substract(nums1,nums2)\n    print(answer)\n    print(\"Pass 2:\")\n    nums1 = [0,2,3,4,5,6,7,8,9,10]\n    nums2 = [2,4,6,8,10,12,14,16,18,20]\n    answer = substract(nums1,nums2)\n    print(answer)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a=[]\n    for i in nums1:\n        a.append(i)\n    for i in nums2:\n        a.append(i)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    from collections import Counter\n    \n    c = Counter(n)\n    if c[n[0]] < c[n[-1]]:\n        return False\n    else:\n        return True\n    \n    \n    \ndef solve(n): \n    if validate(n):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(10):\n            if j == int(n[i]):\n                count += 1\n    if count < int(n):\n        return \"Invalid\"\n    else:\n        return n\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num=int(n)\n    if (num<10):\n        return num == num\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # write your code here\n    for i in range(0,n):\n        if int(n[i]) <= n[i]:\n            return False\n        return True\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num=str(n)\n    number=[]\n    for i in num:\n        number.append(i)\n    for i in number:\n        if int(i)<int(i):\n            return False\n    return True\n    \n    \nprint(validate(1234))\nprint(validate(12345))\nprint(validate(54321))\nprint(validate(123))\nprint(validate(10))\nprint(validate(12345))"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Your code here\n    def isValid(num):\n        digits = []\n        for n in num:\n            digits.append(int(n))\n        return digits == list(range(10))\n    return isValid(n)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [i for i in str(n)]\n    digits.sort()\n    for i in digits:\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    result = ''\n    for i in range(0,len(n),1): \n        if int(n[i])>=int(n[i+1]):\n            result = 'not'\n        else:\n            result = 'Yes'\n            break\n    if result == 'not':\n        return 'False'\n    else:\n        return 'True'\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    if(n==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if element not in i:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element)!= len(list):\n        return False\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return element\n    else:\n        return -1\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if(i!= element):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    else:\n        for element in list:\n            if element!= element:\n                return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Do not change anything in this function.\n    pattern = r'a{1,3}\\b'\n    # Initialize the variables.\n    a = 0\n    b = 0\n    # Loop through the string.\n    for letter in text:\n        # Check if the current character is a 'a'.\n        if letter == 'a':\n            a += 1\n            # Add one to 'b'.\n            b += 1\n        # Check if the current character is two 'b'.\n        if letter == 'b':\n            b += 1\n            # Add one to 'a'.\n            a += 1\n    # If both a and b are present.\n    if a >= 1 and b >= 1:\n        # If they are more than one.\n        if a > b:\n            # And now check if the string matches.\n            if text.count(pattern) >= 2:\n                # If they are so, return True.\n                return True\n        # If they are not.\n        elif a < b:\n            # And now check if the string matches.\n            if text.count(pattern) >= 3:\n                # If they are so, return True.\n                return True\n        # If they are exactly two.\n        elif a == b:\n            # And now check if the string matches.\n            if text.count(pattern) >= 2:\n                # If they are so, return True.\n                return True\n    # If none of the above.\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # If the string contains 'a'\n    if re.search(r'a+', text):\n        # Match the first character\n        match_first_char = re.search(r'a+', text)\n        # Get the first character\n        char = match_first_char.group()\n        # Check if the first character is 'a'\n        if char == 'a':\n            # Check if the second character is 'b'\n            if re.search(r'b+', text):\n                # Match the second character\n                match_second_char = re.search(r'b+', text)\n                # Get the second character\n                char = match_second_char.group()\n                # Check if the second character is 'c'\n                if char == 'c':\n                    # Return 'True'\n                    return 'True'\n                # Return 'False'\n                return 'False'\n            # Return 'False'\n            return 'False'\n        # Return 'False'\n        return 'False'\n    # Return 'False'\n    return 'False'\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    t = text.split(' ')\n    for item in t:\n        if item[0] == 'a' and len(item) == 2:\n            return True\n        if item[0] == 'b' and len(item) == 3:\n            return True\n        if item[0] == 'a' and len(item) == 3:\n            return False\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    pattern = r'a(b(c)?a)'\n    match_2_3 = re.search(pattern, text)\n    if match_2_3:\n        print('Match 2-3')\n    else:\n        print('Match not 2-3')\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # split the string into list of words\n    pattern = re.compile('[a-zA-Z]+[a-zA-Z0-9]?')\n    if not pattern.search(text):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.findall('(a|b)',text)!= []\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_clean = ''\n    i = 0\n    while i < len(text):\n        if text[i] == 'a':\n            text_clean = text_clean + 'b'\n            i = i + 1\n        elif text[i] == 'b':\n            text_clean = text_clean + 'a'\n            i = i + 1\n        else:\n            i = i + 1\n    return text_clean == 'b'\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    reg = r'(?<=\\s)(?:[A-Z])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_three_or_four(text):\n    '''\n    Write a function that checks whether a string contains the 'b' character followed by three or four 'c' characters.\n    '''\n    reg = r'(?<=\\s)(?:[BCC])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_five_or_six(text):\n    '''\n    Write a function that checks whether a string contains the 'c' character followed by five or six 'd' characters.\n    '''\n    reg = r'(?<=\\s)(?:[CDD])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_seven_or_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'd' character followed by seven or eight 'e' characters.\n    '''\n    reg = r'(?<=\\s)(?:[EFGH])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two(text):\n    '''\n    Write a function that checks whether a string contains the 'e' character followed by one or two 'f' characters.\n    '''\n    reg = r'(?<=\\s)(?:[FGH])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_three_or_four_or_five(text):\n    '''\n    Write a function that checks whether a string contains the 'f' character followed by five or six 'g' characters.\n    '''\n    reg = r'(?<=\\s)(?:[GFH])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three(text):\n    '''\n    Write a function that checks whether a string contains the 'g' character followed by one or two 'h' characters.\n    '''\n    reg = r'(?<=\\s)(?:[GHR])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four(text):\n    '''\n    Write a function that checks whether a string contains the 'h' character followed by one or two 'i' characters.\n    '''\n    reg = r'(?<=\\s)(?:[HRI])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_four_or_five(text):\n    '''\n    Write a function that checks whether a string contains the 'i' character followed by four or five 'j' characters.\n    '''\n    reg = r'(?<=\\s)(?:[JGR])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_five_or_six(text):\n    '''\n    Write a function that checks whether a string contains the 'j' character followed by five or six 'k' characters.\n    '''\n    reg = r'(?<=\\s)(?:[KL])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five(text):\n    '''\n    Write a function that checks whether a string contains the 'k' character followed by one or two 'l' characters.\n    '''\n    reg = r'(?<=\\s)(?:[KLR])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six(text):\n    '''\n    Write a function that checks whether a string contains the 'l' character followed by one or two'm' characters.\n    '''\n    reg = r'(?<=\\s)(?:[ML])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven(text):\n    '''\n    Write a function that checks whether a string contains the'm' character followed by one or two 'n' characters.\n    '''\n    reg = r'(?<=\\s)(?:[NM])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'n' character followed by one or two 'o' characters.\n    '''\n    reg = r'(?<=\\s)(?:[NO])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'o' character followed by one or two 'p' characters.\n    '''\n    reg = r'(?<=\\s)(?:[POP])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine_or_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'p' character followed by one or two 'q' characters.\n    '''\n    reg = r'(?<=\\s)(?:[PQRS])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine_or_ten_or_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'q' character followed by one or two 'r' characters.\n    '''\n    reg = r'(?<=\\s)(?:[QRST])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine_or_ten_or_eleven_or_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'r' character followed by one or two's' characters.\n    '''\n    reg = r'(?<=\\s)(?:[RSTS])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine_or_ten_or_eleven_or_twelve_or_twenty(text):\n    '''\n    Write a function that checks whether a string contains the's' character followed by one or two 't' characters.\n    '''\n    reg = r'(?<=\\s)(?:[STT])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine_or_ten_or_eleven_or_twelve_or_twenty_or_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 't' character followed by one or two 'u' characters.\n    '''\n    reg = r'(?<=\\s)(?:[UAR])(?=\\s)'\n    return re.search(reg,text)\ndef text_match_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine_or_ten_or_eleven_or_twelve_or_twenty_or_t"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # convert text to lower case\n    text = text.lower()\n    # split the string into a list of strings\n    text = re.split(r'\\w+', text)\n    # if the list has less than two strings\n    if len(text) < 2:\n        # return False\n        return False\n    # if the first string is 'a' and the second is 'b'\n    if text[0] == 'a' and text[1] == 'b':\n        # if the second string has a 'b'\n        if text[2] == 'b':\n            # return True\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if (text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 1):\n        return True\n    else:\n        return False\ndef text_match_two_three_indexed(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2):\n        return True\n    else:\n        return False\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters, followed by 'c' and 'd', and 'e' and 'f' characters.\n    '''\n    if (text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 2):\n        return True\n    else:\n        return False\ndef text_match_two_four_indexed(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 2):\n        return True\n    else:\n        return False\ndef text_match_two_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters.\n    '''\n    if (text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 3):\n        return True\n    else:\n        return False\ndef text_match_two_three_four_indexed(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 3):\n        return True\n    else:\n        return False\ndef text_match_two_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 5):\n        return True\n    else:\n        return False\ndef text_match_two_four_five_indexed(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 5):\n        return True\n    else:\n        return False\ndef text_match_two_three_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 5):\n        return True\n    else:\n        return False\ndef text_match_two_three_four_five_indexed(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 5):\n        return True\n    else:\n        return False\ndef text_match_two_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 6):\n        return True\n    else:\n        return False\ndef text_match_two_four_five_six_indexed(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 6):\n        return True\n    else:\n        return False\ndef text_match_two_four_five_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 7):\n        return True\n    else:\n        return False\ndef text_match_two_four_five_six_seven_indexed(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' and 'd' and 'e' and 'f' characters and its index in the text.\n    '''\n    if(text == ''):\n        return False\n    elif(text.count('a') == 1 and text.count('b') == 2 and text.count('c') == 2 and text.count('d') == 2 and text.count('e') == 2 and text.count('f') == 7):\n        return True\n    else:\n        return False\ndef text_match_two_three_four_five"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # 1) Create a dictionary to store the maximum sum \n    dict_sum = {}\n    for i in range(1,n+1):\n        dict_sum[i] = dict_sum.get(i,0) + a[i-1]\n    for i in range(1,k+1):\n        dict_sum[i] = max(dict_sum[i],dict_sum[i+1])\n    max_sub_array_sum = 0\n    for i in range(1,n+1):\n        max_sub_array_sum += dict_sum[i]\n    return max_sub_array_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Code here\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, k+1):\n            sum = sum + a[0]\n            for j in range(1, n):\n                sum = sum + a[j]\n        return sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a = a + [0 for _ in range(n)]\n    for k in range(k):\n        a[0] += a[1]\n        a[1] += a[0]\n    for i in range(2, n):\n        a[i] += a[i-1]\n    return a[n-1]\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (n == 0): return 0\n    \n    if (n == 1): return a[0]\n    \n    sum = 0\n    for i in range(k):\n        sum = sum + a[i]\n    \n    return max(sum,max_sub_array_sum_repeated(a, n-1, k-1))\n    \ndef max_sub_array_sum_repeated_dp(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (n == 0): return 0\n    \n    if (n == 1): return a[0]\n    \n    dp = [0] * (k+1)\n    dp[0] = a[0]\n    for i in range(1, k+1):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n    \n    return dp[-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    left = 0\n    right = k-1\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    total_sum = 0\n    for i in range(0, k):\n        total_sum += a[i]\n    for i in range(0, k):\n        total_sum += a[i]\n    maximum = max(a)\n    for i in range(k, n):\n        total_sum -= a[i]\n        total_sum += a[i]\n        if total_sum > maximum:\n            maximum = total_sum\n            max_index = i\n    return a[max_index]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sub_array_sum_of_a = []\n    sub_array_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    max_sum_count = 0\n    \n    for i in range(0,n):\n        max_sum = max_sum + a[i]\n        max_sum_count = max_sum_count + 1\n        \n        if max_sum_count > k:\n            max_sum_count = 0\n            \n    return max_su"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    answer = []\n    \n    for i in range(k):\n        arr = a.copy()\n        \n        for j in range(n):\n            arr[j] += a[j]\n            if arr[j] == 0:\n                arr.pop(j)\n        answer.append(max(arr))\n    return answer\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    m = len(a)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if (n % 2 == 0):\n        return n*(n+1)/2\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result=0\n    for i in range(1,n+1):\n        result=result+i**2\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n        if i % 2 == 0:\n            print(sum)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sq_n = 0\n    for i in range(1, n+1):\n        sq_n += i**2\n    return sq_n\n    \nprint(square_Sum(6))"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sq = 0\n    for i in range(1,n):\n        if (i % 2 == 0):\n            sq = sq + (i**2)\n    return sq\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def sum_Squares(n):\n        '''\n        Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n        '''\n        Sum_Squares = 0\n        for i in range(1,n):\n            Sum_Squares = Sum_Squares + (i ** 2)\n        return Sum_Squares\n    return sum_Squares(n)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * n * square_Sum(n-1)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(1,n):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += (i**2)\n    return s\n    \ndef factorial(n):\n    '''\n    Return the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #print(len(list1))\n    return(max(list1, key=len))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        for el in lst:\n            if len(el) > max(max_length_list):\n                max_length_list = el\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in list1:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # find max length of list\n    # loop over all lists\n    # determine the max length\n    return max(len(l) for l in list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len,list1))\n    \ndef count_char(word):\n    '''\n    Write a function to count the frequency of characters in a given word.\n    '''\n    return len(word)\n    \ndef freq_sum(list1):\n    '''\n    Write a function to find the sum of all the frequencies in a given list.\n    '''\n    return sum(map(count_char,list1))\n    \ndef find_frequency(word):\n    '''\n    Write a function that returns the frequency of the given word.\n    '''\n    return word.count(word[0])\n    \ndef find_index(word, item):\n    '''\n    Write a function that returns the index of the given item in the given word.\n    '''\n    return word.find(item)\n    \ndef replace_letter(word, old, new):\n    '''\n    Write a function that replaces the letter at position index of the given word by a new letter.\n    '''\n    return word[:find_index(word, old)] + new + word[find_index(word, old)+1:]\n    \ndef dict_to_string(dict):\n    '''\n    Write a function that converts a dictionary to a string with each key as the index of the word and the value as a list of the frequency of each letter.\n    '''\n    list = []\n    for key in dict:\n        list.append(dict[key])\n    return ''.join(str(i) for i in list)\n    \ndef main():\n    # '''\n    # Write a function that computes the frequency of the given word.\n    # '''\n    # print(freq_sum([\"a\",\"m\",\"i\",\"s\",\"u\",\"y\"]))\n    # print(find_frequency(\"sau\"))\n    # print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    # print(replace_letter(\"a\",\"l\", \"o\"))\n    # print(find_index(\"sau\", \"l\"))\n    print(max_length([\"a\",\"m\",\"i\",\"s\",\"u\",\"y\"]))\n    print(count_char(\"mai\"))\n    print(find_frequency(\"sau\"))\n    print(freq_sum([\"a\",\"m\",\"i\",\"s\",\"u\",\"y\"]))\n    print(find_index(\"sau\", \"l\"))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\", \"ol\":\"o\", \"m\":\"m\", \"n\":\"n\", \"mai\":\"m\"}))\n    print(replace_letter(\"a\",\"l\", \"o\"))\n    print(find_index(\"sau\", \"m\"))\n    print(find_index(\"mai\", \"l\"))\n    print(dict_to_string({\"sau\":\"s\""
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(list1[i][j])>max_length:\n                max_length=len(list1[i][j])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if(list1[i][j] > max(max_length_list)):\n                max_length_list.append(list1[i][j])\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    i = 0\n    max = 0\n    \n    while i < len(list1):\n        \n        if len(list1[i]) > max:\n            max = len(list1[i])\n        \n        i += 1\n    \n    return max\n    \n    \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n == 2 and k == 2:\n        return 1\n    elif n == 2 and k < 2:\n        return 0\n    elif n < 2 and k == 2:\n        return 0\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # base cases:\n    if k == 1:\n        return n\n    if n <= 2:\n        return n\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (k < 2):\n        return 0\n    \n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    \n    elif (n < 2):\n        return 2\n    \n    else:\n        color = 0\n        for i in range(1, n):\n            if (n - i) % 2 == 0:\n                color += 1\n                \n        \n        for i in range(k - 2):\n            color -= 1\n            \n        \n        for i in range(n - k):\n            color += 1\n        \n        \n        return color\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Edge case: \n    if n < 2 or k < 2: \n        return 0\n    \n    # Base cases:\n    if n == 2 or k == 2: \n        return 1\n    \n    # function for making a queue: \n    def get_queue(): \n        res = [] \n        for i in range(n): \n            res.append(i) \n        \n        # To find the colors, we store the colors of the part that is not painted yet: \n        # first fill the color that are not painted yet: \n        que = collections.deque() \n        for i in range(n): \n            if not (que and que[0] == i): \n                que.append(i) \n                que.append(que[0]) \n        \n        # Using a stack: \n        # the first item in the queue is the current color. \n        # so we insert it in the queue and pop the last item. \n        # If the queue is empty, we return 0 \n        # Else, we take the last item in the queue and remove it from the queue. \n        # So the current color is at the top of the stack and it's its color is taken. \n        # so we return the number of ways to paint the fence. \n        res = collections.deque() \n        res.append(que[0]) \n        for i in range(n): \n            res.append(que.popleft()) \n            if not(que and que[0] == i): \n                res.append(que[0]) \n        \n        return res \n    \n    # Defining the queue\n    q = get_queue() \n    \n    # Defining variables for the colors that are used in the above algorithm. \n    # colors used: \n    # red: 0 \n    # green: 1 \n    # blue: 2 \n    # So, there are four colors in the set (red, green, blue, and black). \n    # But for this set, we can see that we have only 2 unique colors (red and blue), thus in this case the color number is 1. \n    # So we are counting number of ways to paint the fence with different colours and the number of ways to paint the fence with the same colours. \n    # This variable is used for making the algorithm. \n    count = collections.Counter(k) \n    \n    # Create a variable for the number of ways. \n    # for each color (k) we have to count how many ways of painting the fence. \n    # by using a stack we can count the colors that are used in the above algorithm. \n    # so we can stop when we have the colors we used in the previous step. \n    # We also need to keep track of the colors that are used in the next step. \n    # To calculate the number of ways to paint the fence with the same colours we have to create a queue to avoid the same colors. \n    # For that we use an array. \n    # For example, for k=2, we have to use the colors that are used in the previous step as well as the colors that are used in the next step. \n    # So the queue is red green blue. \n    # So now we can calculate the number of ways to paint the fence with different colours. \n    # so we get the total of the number of ways to paint the fence with different colours. \n    # and return this value. \n    # we return the number of ways to paint the fence with the same colours. \n    # so that the number of ways to paint the fence with different colours is the number of ways to paint the fence with the same colours. \n    # and so we return the number of ways to paint the fence with the same colours. \n    def count_ways(k, colors): \n        # Edge case: \n        if k == 2 or k == 3: \n            return count[k] \n        \n        # Base case: \n        if k == 1: \n            return count[0] \n        \n        # To find the colors, we store the colors of the part that is not painted yet: \n        # first fill the color that are not painted yet: \n        que = collections.deque() \n        for i in range(n): \n            if not (que and que[0] == i): \n                que.append(i) \n                que.append(que[0]) \n        \n        # Using a stack: \n        # the first item in the queue is the current color. \n        # so we insert it in the queue and pop the last item. \n        # If the queue is empty, we return 0 \n        # Else, we take the last item in the queue and remove it from the queue. \n        # So the current color is at the top of the stack and it's its color is taken. \n        # so we return the number of ways to paint the fence. \n        res = collections.deque() \n        res.append(que[0]) \n        for i in range(n): \n            res.append(que.popleft()) \n            if not(que and que[0] == i): \n                res.append(que[0]) \n        \n        # Defining variables for the colors that are used in the above algorithm. \n        # colors used: \n        # red: 0 \n        # green: 1 \n        # blue: 2 \n        # So, there are four colors in the set (red, green, blue, and black). \n        # But for this set, we can see that we have only 2 unique colors (red and blue), thus in this case the color number is 1. \n        # So we are counting number of ways to paint the fence with different colours and the number of ways to paint the fence with the same colours. \n        # This variable is used for making the algorithm. \n        count = collections.Counter(colors) \n        \n        # Create a variable for the number of ways. \n        # for each color (k) we have to count how many ways of painting the fence. \n        # by using a stack we can count the colors that are used in the above algorithm. \n        # so we can stop when we have the colors we used in the previous step. \n        # We also need to keep track of the colors that are used in the next step. \n        # To calculate the number of ways to paint the fence with the same colours we have to create a queue to avoid the same colors. \n        # For that we use an array. \n        # For example, for k=2, we have to use the colors that are used in the previous step as well as the colors that are used in the next step. \n        # So the queue is red green blue. \n        # So now we can calculate the number of ways to paint the fence with different colours. \n        # so we get the total of the number of ways to paint the fence with different colours. \n        # and return this value. \n        # so that the number of ways to paint the fence with different colours is the number of ways to paint the fence with the same colours. \n        # and so we return the number of ways to paint the fence with the same colours. \n        def count_ways(k, colors): \n            # Edge case: \n            if k == 2 or k == 3: \n                return count[k] \n            \n            # Base case: \n            if k == 1: \n                return count[0] \n            \n            # To find the colors, we store the colors of the part that is not painted yet: \n            # first fill the color that are not painted yet: \n            que = collections.deque() \n            for i in range(n): \n                if not (que and que[0] == i): \n                    que.append(i) \n                    que.append(que[0]) \n            \n            # Using a stack: \n            # the first item in the queue is the current color. \n            # so we insert it in the queue and pop the last item. \n            # If the queue is empty, we return 0 \n            # Else, we take the last item in the queue and remove it from the queue. \n            # So the current color is at the top of the stack and it's its color is taken. \n            # so we return the number of ways to paint the fence. \n            res = collections.deque() \n            res.append(que[0]) \n            for i in range(n): \n                res.append(que.popleft()) \n                if not"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2:\n        return 1 if k == 1 else 2\n    if k == 2:\n        return 2 if n >= 3 else 1\n    if k > n:\n        return 0\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    colors = ['r','g','b']\n    color = colors[k]\n    ret = 0\n    f = [[0 for i in range(n)] for j in range(n)]\n    f[0][0] = 1\n    for i in range(1, n):\n        for j in range(1, n):\n            if i-1 >= 0 and j-1 >= 0 and f[i-1][j-1] == 1:\n                f[i][j] = f[i-1][j-1] + f[i-1][j]\n                if color == 'r':\n                    ret = ret + f[i][j]\n                if color == 'g':\n                    ret = ret + f[i][j]\n                if color == 'b':\n                    ret = ret + f[i][j]\n            if i-1 >= 0 and j+1 < n and f[i-1][j+1] == 1:\n                f[i][j] = f[i-1][j+1] + f[i-1][j]\n                if color == 'r':\n                    ret = ret + f[i][j]\n                if color == 'g':\n                    ret = ret + f[i][j]\n                if color == 'b':\n                    ret = ret + f[i][j]\n            if i-1 >= 0 and j-1 >= 0 and f[i-1][j-1] == 1:\n                f[i][j] = f[i-1][j-1] + f[i-1][j]\n                if color == 'r':\n                    ret = ret + f[i][j]\n                if color == 'g':\n                    ret = ret + f[i][j]\n                if color == 'b':\n                    ret = ret + f[i][j]\n            if i-1 >= 0 and j+1 < n and f[i-1][j+1] == 1:\n                f[i][j] = f[i-1][j+1] + f[i-1][j]\n                if color == 'r':\n                    ret = ret + f[i][j]\n                if color == 'g':\n                    ret = ret + f[i][j]\n                if color == 'b':\n                    ret = ret + f[i][j]\n            if i-1 >= 0 and j-1 >= 0 and f[i-1][j-1] == 1:\n                f[i][j] = f[i-1][j-1] + f[i-1][j]\n                if color == 'r':\n                    ret = ret + f[i][j]\n                if color == 'g':\n                    ret = ret + f[i][j]\n                if color == 'b':\n                    ret = ret + f[i][j]\n    return ret\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if (n < k):\n        return 0\n    \n    dp = [[0] * (k + 1) for i in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if (i == 1):\n                dp[i][j] = 0\n            elif (j == 1):\n                dp[i][j] = 1\n            elif (j == 1 and i!= 2):\n                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j]) % 1000000007\n            elif (i == 2):\n                dp[i][j] = (dp[i-1][j-1] + dp[i-2][j]) % 1000000007\n            else:\n                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j-1]) % 1000000007\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Define variable to store the minimum number of ways \n    # to paint the fence \n    # (for the given value, we use memoization to ensure we \n    # have a cache of the form min(n, k) = min(\n    #     count_ways(n, k), count_ways(n - 1, k), count_ways(n - 2, k)) ) \n    # where \n    # n = number of posts, k = number of colors \n    # minimum possible value is 2 \n    # memoization is used to ensure that we \n    # have a cache of the form min(n, k) = min(\n    #     count_ways(n, k), count_ways(n - 1, k), count_ways(n - 2, k)) \n    #   which is also a more efficient way to solve a question \n    #     which has a worst case complexity of O(n * k) \n    # k is the maximum number of colours in the fence \n    \n    # Initialize memoization \n    cache = [[0 for _ in range(n+k)] for _ in range(n+k)]\n    \n    # base case \n    cache[0][0] = 1\n    \n    # Initialize 2 ways \n    # to paint the fence \n    for i in range(2, n+k): \n        cache[i][0] = cache[i-1][0] + cache[i-2][0]\n        cache[i][i] = cache[i-1][i-1] + cache[i-2][i-2]\n    \n    # Loop through the 2 ways \n    for i in range(1, n+k): \n        for j in range(1, i+k): \n            cache[i][j] = cache[i-1][j-1] + cache[i-1][j] \n    return cache[n][k]\n    "
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    n = min(n, 2*k+1)\n    n = max(n, 2*k+2)\n    if n<=2:\n        return n\n    DP = [0]*(n+1)\n    DP[0] = 1\n    DP[1] = 1\n    DP[2] = 3\n    DP[3] = 5\n    DP[4] = 7\n    DP[5] = 9\n    for i in range(1, n):\n        for j in range(0, min(i, k-2)+1):\n            DP[i+j] = DP[i-j] + DP[i-j] * DP[j]\n    return DP[n-1]%1000000007\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case if k is 1 or 2 \n    if (k == 1 or k == 2):\n        return n \n    \n    # if it can't find it for k > 3 then it must be called before the others \n    if n % 2: \n        return count_no_of_ways(n, k-1) + count_no_of_ways(n, k-2)\n    \n    # otherwise it must be called after the previous condition\n    else: \n        return count_no_of_ways(n, k-1) + count_no_of_ways(n, k-2) + 1 \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(\"finding quotient of two numbers\",n,m)\n    print(\"finding quotient of two numbers using the function\",find_quotient(n,m))\n    print(\"error : \")\n    \ndef find_quotient(n,m):\n    try:\n        return int(round(float(n)/float(m)))\n    except ZeroDivisionError:\n        print(\"You must enter a positive number\")\n        return 0\n    except ValueError:\n        print(\"You must enter a number\")\n        return 0\n    except:\n        print(\"You must enter a number\")\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m < 10**(n-1):\n        return m\n    else:\n        return m//10**(n-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0: \n        return 0\n    if n == 1:\n        return 1\n    if n > 1:\n        return find(n//2,m) + find(n//2,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if (m == 0):\n        return n\n    if (m%n==0):\n        return m//n\n    else:\n        return find(n,m//n)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < 0 or m < 0:\n        print('number of arguments must be positive')\n    elif n == 0 and m == 0:\n        print('0')\n        return 0\n    elif n < 0:\n        return -1\n    elif m < 0:\n        return -1\n    elif n == 0 and m!= 0:\n        return 0\n    elif n!= 0 and m == 0:\n        return 1\n    elif n == 0:\n        return 1\n    elif n!= 0 and m!= 0:\n        return n / m\n    else:\n        return n * n + m * m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if m==0:\n        return n\n    else:\n        return find(n,m//10) + 1\n    \ndef findElem(n,m):\n    '''\n    Write a python function to find element of a list that is divisible by n.\n    '''\n    \n    if m==0:\n        return n\n    \n    return (n%10) + findElem(n//10,m%10)\n    \ndef findRange(n,m):\n    '''\n    Write a python function to find the smallest range of numbers (at least n) that is divisible by m.\n    '''\n    \n    if m==0:\n        return n\n    \n    return findRange(n-findRange(n,m),m)\n    \ndef test():\n    '''\n    Write a python function to find the smallest range of numbers that is divisible by m.\n    '''\n    \n    n=int(input())\n    m=int(input())\n    print(findRange(n,m))\n    \nif __name__==\"__main__\":\n    test()"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return 0\n    else:\n        return find(n//m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(m==0 or n==0):\n        return 0\n    if(n<=m):\n        return n//m\n    return n%m + find(n//m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    elif n>m:\n        return (find(n//m,m))\n    else:\n        return (find(n-m,m))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #check for case when only one number is being input\n    if n == m:\n        return n\n    #check if input is positive and negative\n    if n < 0:\n        n = abs(n)\n    if m < 0:\n        m = abs(m)\n    #convert to integer\n    n = int(n)\n    m = int(m)\n    #check if there are negative numbers\n    if n < 0 or n >= n:\n        print('n must be a positive number')\n        return None\n    #check if there are negative numbers\n    if m < 0 or m >= m:\n        print('m must be a positive number')\n        return None\n    #find the quotient\n    return n // m\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    a = w\n    b = h\n    # Find the angle between each side\n    d = math.degrees(math.acos((b*b-w*w)/(2*a*b)))\n    # Create a new array of two angles\n    angles = [d, 180 - d]\n    # Find the first angle and return it\n    angle = angles[0]\n    return angle\n    \ndef angle_to_side(angle, side):\n    '''\n    Write a function to convert a triangle's angle into a right angled triangle.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    a = side\n    # Initialize a variable to store the angle between each side\n    b = angle\n    # Find the angle between each side\n    c = math.degrees(math.acos((a*a-b*b)/(2*a*b)))\n    # Create a new array of two angles\n    angles = [c, 180 - c]\n    # Find the first angle and return it\n    angle = angles[0]\n    return angle\n    \ndef side_to_angle(side, angle):\n    '''\n    Write a function to convert a triangle's side into a right angled triangle.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    a = side\n    # Initialize a variable to store the angle between each side\n    b = angle\n    # Find the angle between each side\n    c = math.degrees(math.acos((a*a-b*b)/(2*a*b)))\n    # Create a new array of two angles\n    angles = [180 - c, c]\n    # Find the first angle and return it\n    angle = angles[0]\n    return angle\n    \ndef triangle_area(a, b, c):\n    '''\n    Write a function that returns the area of a triangle\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # Return the area of the triangle\n    return angle\n    \ndef is_right_angled(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle_new = angle_to_side(angle, s)\n    # Check whether the angle is the same\n    return angle_new == 180\n    \ndef is_right_angled_triangle(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the angle between each side\n    angle_new = angle_to_side(angle, s)\n    # Check whether the angle is the same\n    return angle_new == angle\n    \ndef is_right_angled_triangle_2(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the angle between each side\n    angle_new = angle_to_side(angle, s)\n    # Check whether the angle is the same\n    return angle_new == 180\n    \ndef is_right_angled_triangle_3(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the angle between each side\n    angle_new = angle_to_side(angle, s)\n    # Check whether the angle is the same\n    return angle_new == angle\n    \ndef is_right_angled_triangle_4(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the angle between each side\n    angle_new = angle_to_side(angle, s)\n    # Check whether the angle is the same\n    return angle_new == 180\n    \ndef is_right_angled_triangle_5(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the angle between each side\n    angle_new = angle_to_side(angle, s)\n    # Check whether the angle is the same\n    return angle_new == angle\n    \ndef is_right_angled_triangle_6(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the angle between each side\n    angle_new = angle_to_side(angle, s)\n    # Check whether the angle is the same\n    return angle_new == 180\n    \ndef is_right_angled_triangle_7(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the angle between each side\n    angle_new = angle_to_side(angle, s)\n    # Check whether the angle is the same\n    return angle_new == angle\n    \ndef is_right_angled_triangle_8(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the angle between each side\n    angle_new = angle_to_side(angle, s)\n    # Check whether the angle is the same\n    return angle_new == angle\n    \ndef is_right_angled_triangle_9(a, b, c):\n    '''\n    Write a function that returns True if the triangle is right angled.\n    '''\n    # Initialize a variable to store the length of one side of the triangle\n    s = (a + b + c) / 2\n    # Initialize a variable to store the angle between each side\n    angle = otherside_rightangle(a, b)\n    # Initialize a variable to store the angle between each side\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    r = w/math.sqrt(2)\n    c = h/math.sqrt(2)\n    return r*c\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #base cases\n    if w == 0:\n        if h == 0:\n            return 0\n        else:\n            return -1\n    if w == 0:\n        return 0\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # TODO: complete this function\n    #raise NotImplementedError\n    return 0\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef otherside_toprightangle(w,h):\n    '''\n    Write a function to find the third side of a top right angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef otherside_bottomleftangle(w,h):\n    '''\n    Write a function to find the third side of a bottom left angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef otherside_bottomrightangle(w,h):\n    '''\n    Write a function to find the third side of a bottom right angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef otherside_topleftangle(w,h):\n    '''\n    Write a function to find the third side of a top leftangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef otherside_toprightangle(w,h):\n    '''\n    Write a function to find the third side of a top rightangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef otherside_bottomleftangle(w,h):\n    '''\n    Write a function to find the third side of a bottom leftangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef otherside_bottomrightangle(w,h):\n    '''\n    Write a function to find the third side of a bottom rightangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_left(w,h):\n    '''\n    Write a function to find the 3rd side of a left angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_right(w,h):\n    '''\n    Write a function to find the 3rd side of a right angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_top(w,h):\n    '''\n    Write a function to find the 3rd side of a top rightangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_bottom(w,h):\n    '''\n    Write a function to find the 3rd side of a bottom rightangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_topleft(w,h):\n    '''\n    Write a function to find the 3rd side of a top leftangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_topright(w,h):\n    '''\n    Write a function to find the 3rd side of a top rightangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_bottomleft(w,h):\n    '''\n    Write a function to find the 3rd side of a bottom leftangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_bottomright(w,h):\n    '''\n    Write a function to find the 3rd side of a bottom rightangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_bottom_left(w,h):\n    '''\n    Write a function to find the 3rd side of a bottom leftangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_bottom_right(w,h):\n    '''\n    Write a function to find the 3rd side of a bottom rightangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_left_long(w,h):\n    '''\n    Write a function to find the 3rd side of a left angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_right_long(w,h):\n    '''\n    Write a function to find the 3rd side of a right angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_top_long(w,h):\n    '''\n    Write a function to find the 3rd side of a top right angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_bottom_long(w,h):\n    '''\n    Write a function to find the 3rd side of a bottom rightangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_top_short(w,h):\n    '''\n    Write a function to find the 3rd side of a top right angled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_bottom_short(w,h):\n    '''\n    Write a function to find the 3rd side of a bottom rightangled triangle.\n    '''\n    a=w/2\n    b=h/2\n    c=math.sqrt(pow(a,2)+pow(b,2))\n    return c\n    \ndef side_top_short(w,h):\n    '''\n    Write a function to find the 3rd side of a top right angled triangle.\n    '''\n    "
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area=0.5*math.pi*w*h\n    if w==0:\n        return 0.0\n    elif h==0:\n        return math.sqrt(w*w+h*h)\n    else:\n        return area*math.sqrt(w*w+h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = w/math.tan(math.radians(45))\n    side2 = h/math.tan(math.radians(90))\n    side3 = 2*side1\n    side4 = 2*side2\n    return side3,side4\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = math.degrees(math.acos((w**2+h**2)/(2*w*h)))\n    print(angle)\n    return angle\n    \ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #angle = math.degrees(math.acos((w**2+h**2)/(2*w*h)))\n    angle = (w/h)*360\n    print(angle)\n    return angle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        return 'no triangle'\n    if w <= h:\n        return w//h\n    return math.sqrt((w+h)//2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w<h and w>0 and h>0:\n        rad = math.pi*w/2\n        x = math.cos(rad)\n        y = math.sin(rad)\n        return ((-1)*x*y)\n    else:\n        return 0\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = -1\n    for item in listval:\n        if item > maxval:\n            maxval = item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max=0\n    for i in listval:\n        if i>max:\n            max=i\n    return max\ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=listval[0]\n    for i in listval:\n        if i<min:\n            min=i\n    return min\ndef average_val(listval):\n    '''\n    Write a function to compute the average value in a given heterogeneous list.\n    '''\n    avg=0\n    for i in listval:\n        avg+=i\n    avg=avg/len(listval)\n    return avg\ndef median_val(listval):\n    '''\n    Write a function to compute the median value in a given heterogeneous list.\n    '''\n    listval.sort()\n    if len(listval)%2==0:\n        return listval[len(listval)//2]\n    else:\n        return listval[len(listval)//2-1]+listval[len(listval)//2]\ndef mode_val(listval):\n    '''\n    Write a function to compute the mode value in a given heterogeneous list.\n    '''\n    dictval=dict()\n    count=0\n    for i in listval:\n        count+=1\n        if i in dictval:\n            dictval[i]+=1\n        else:\n            dictval[i]=1\n    mode=0\n    for i in dictval:\n        if dictval[i]>mode:\n            mode=dictval[i]\n    return mode\ndef median_val_dict(listval):\n    '''\n    Write a function to compute the median value in a given heterogeneous list.\n    '''\n    dictval=dict()\n    count=0\n    for i in listval:\n        count+=1\n        if i in dictval:\n            dictval[i]+=1\n        else:\n            dictval[i]=1\n    return dictval[listval[len(listval)//2]]\ndef mode_dict(listval):\n    '''\n    Write a function to compute the mode value in a given heterogeneous list.\n    '''\n    dictval=dict()\n    count=0\n    for i in listval:\n        count+=1\n        if i in dictval:\n            dictval[i]+=1\n        else:\n            dictval[i]=1\n    return dictval[listval[len(listval)//2]]\ndef mean_dict(listval):\n    '''\n    Write a function to compute the mean value in a given heterogeneous list.\n    '''\n    dictval=dict()\n    count=0\n    for i in listval:\n        count+=1\n        if i in dictval:\n            dictval[i]+=1\n        else:\n            dictval[i]=1\n    return sum(dictval)/count\ndef add(listval,n):\n    '''\n    Write a function that takes a list and adds n elements.\n    '''\n    listval.extend(n)\n    return listval\ndef remove(listval,n):\n    '''\n    Write a function that takes a list and removes n elements.\n    '''\n    listval.pop(n)\n    return listval\ndef isin(listval,n):\n    '''\n    Write a function that takes a list and checks whether n appears in it.\n    '''\n    if n in listval:\n        return True\n    else:\n        return False\ndef isin_dict(listval,n):\n    '''\n    Write a function that takes a list and checks whether n appears in it.\n    '''\n    if n in dictval:\n        return True\n    else:\n        return False\ndef delete(listval,n):\n    '''\n    Write a function that takes a list and removes n elements.\n    '''\n    listval.pop(n)\n    return listval\ndef sort(listval):\n    '''\n    Write a function that sorts a given list in-place.\n    '''\n    listval.sort()\ndef reverse(listval):\n    '''\n    Write a function that reverses a given list.\n    '''\n    listval.reverse()\ndef remove_dup(listval):\n    '''\n    Write a function that removes duplicate elements from a given list.\n    '''\n    listval.sort()\n    listval=set(listval)\n    listval=list(listval)\n    return listval\ndef duplicate_remove(listval):\n    '''\n    Write a function that removes duplicate elements from a given list.\n    '''\n    listval=set(listval)\n    return listval\ndef remove_dup_sort(listval):\n    '''\n    Write a function that removes duplicate elements from a given list.\n    '''\n    listval=list(set(listval))\n    listval=sorted(listval)\n    return listval\ndef duplicate_remove_sort(listval):\n    '''\n    Write a function that removes duplicate elements from a given list.\n    '''\n    listval=list(set(listval))\n    listval=sorted(listval)\n    return listval\ndef duplicate_remove_sort_many(listval):\n    '''\n    Write a function that removes duplicate elements from a given list.\n    '''\n    listval=set(listval)\n    listval=sorted(listval)\n    listval=list(listval)\n    return listval\ndef duplicate_remove_sort_many_many(listval):\n    '''\n    Write a function that removes duplicate elements from a given list.\n    '''\n    listval=set(listval)\n    listval=sorted(listval)\n    listval=list(listval)\n    return listval\ndef duplicate_remove_sort_many_many_many(listval):\n    '''\n    Write a function that removes duplicate elements from a given list.\n    '''\n    listval=set(listval)\n    listval=sorted(listval)\n    listval=list(listval)\n    listval=list(set(listval))\n    return listval\ndef duplicate_remove_sort_many_many_many_many(listval):\n    '''\n    Write a function that removes duplicate elements from a given list.\n    '''\n    listval=set(listval)\n    listval=sorted(listval)\n    listval=list(listval)\n    listval=list(set(listval))\n    listval=list(set(listval))\n    return listval\ndef isin_sort(listval):\n    '''\n    Write a function that checks whether all items in a given list are present in a given list.\n    '''\n    listval.sort()\n    for i in listval:\n        if i not in listval:\n            return False\n    return True\ndef isin_sort_many(listval):\n    '''\n    Write a function that checks whether all items in a given list are present in a given list.\n    '''\n    listval.sort()\n    for i in listval:\n        if i not in listval:\n            return False\n    return True\ndef key_fn(listval):\n    '''\n    Write a function that returns the smallest key in a given list.\n    '''\n    listval.sort()\n    return listval[0]\ndef num_sort(listval):\n    '''\n    Write a function that returns the number of items in a given list.\n    '''\n    listval.sort()\n    return len(listval)\ndef avg_val_dict(listval):\n    '''\n    Write a function that returns the average value in a given list.\n    '''\n    listval.sort()\n    if len(listval)%2==0:\n        return sum(listval[int(len(listval)/2)-1:int(len(listval)/2)])/2\n    else:\n        return sum(listval)/len(listval)\ndef mode_dict(listval):\n    '''\n    Write a function that returns the mode value in a given list.\n    '''\n    listval.sort()\n    count=0\n    for i in listval:\n        if i in dictval:\n            count+=1\n        else:\n            count+=1\n    return count\ndef mode_dict_many(listval):\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = 0\n    for item in listval:\n        if item > val:\n            val = item\n    return val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for val in listval:\n        if val > max:\n            max = val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(len(listval)):\n        if listval[i]>max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def divisors(number):\n        divisors = []\n        for i in range(1, number + 1):\n            if number % i == 0:\n                divisors.append(i)\n        return divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    # YOUR CODE HERE\n    if number % 2 == 0:\n        return number + (number // 2)\n    else:\n        return number - (number // 2)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    if number == 0 or number == 1:\n        return number\n    else:\n        return number % 10 + sum_div(number//10)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return sum_div(number - 1) + sum_div(number - 2)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def divisors(num):\n        if num == 1:\n            return [1]\n        elif num % 2 == 0:\n            return [num//2] + divisors(num//2)\n        elif num % 3 == 0:\n            return [num//3] + divisors(num//3)\n        else:\n            return [num//4] + divisors(num//4)\n    \n    return sum(divisors(number))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n    return sum_div(number - 1) + sum_div(number - 2)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        return -1\n    elif number == 1:\n        return 1\n    else:\n        i = 1\n        while i <= number:\n            if number % i == 0:\n                number = number/i\n                print(i)\n            else:\n                i = i + 1\n        return number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # you can do some stuff here\n    \n    if number == 0:\n        return 0\n    \n    if number == 1:\n        return 1\n        \n    return number*(sum_div(number-1))\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    s = sum(arr)\n    if s % 2!= 0:\n        return get_Inv_Count(arr[:-1]) + get_Inv_Count(arr[-1::-1])\n    else:\n        return len(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[j] < arr[i]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    arr.sort()\n    #print(arr)\n    for i in range(1, len(arr)):\n        inv += 1\n        if arr[i] < arr[i-1]:\n            break\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = [0] * len(arr)\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            res[i] = arr[i] + 1\n            res[i + 1] = arr[i]\n    return res\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)-1):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = np.array(arr)\n    inv_count = arr.sum() // 2\n    if inv_count!= 0:\n        return inv_count\n    else:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # You may not use the same element twice in an array. \n    # Use only hash-table approach\n    # O(n) time\n    # O(1) space\n    # return number of inversions\n    inv_count = 0\n    inv_count_map = {}\n    for num in arr:\n        if num in inv_count_map:\n            inv_count_map[num] += 1\n        else:\n            inv_count_map[num] = 1\n    # print(inv_count_map)\n    for num in arr:\n        if num not in inv_count_map:\n            inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for x in range(len(arr)):\n        if arr[x] < 0:\n            inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for sublist in list1:\n        for item in sublist:\n            if type(item) is list:\n                flattened.extend(flatten_list(item))\n            else:\n                flattened.append(item)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1)==0:\n        return []\n    elif len(list1)==1:\n        return list1[0]\n    else:\n        #create a list of all values from the list of lists\n        list_of_lists = [list(map(list, sub_list)) for sub_list in list1]\n        #concatenate the lists together\n        return list(chain.from_iterable(list_of_lists))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i)!= list:\n            new_list.append(i)\n        else:\n            new_list.extend(flatten_list(i))\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        return list(map(lambda item: flatten_list(item), list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # return\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    if isinstance(list1, list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Write your code here.\n    if type(list1) is not list:\n        return list1\n    else:\n        flattened_list = []\n        for item in list1:\n            if type(item) is list:\n                flattened_list += flatten_list(item)\n            else:\n                flattened_list.append(item)\n        return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    def flatten_list_rec(elem, parent=None):\n        '''\n        Recursive function to flatten a given list of lists\n        '''\n        if parent is None:\n            parent = []\n        \n        if type(elem) is list:\n            for item in elem:\n                if type(item) is list:\n                    parent.append(flatten_list_rec(item, elem))\n                else:\n                    parent.append(item)\n        elif type(elem) is dict:\n            for key, value in elem.items():\n                if type(key) is list:\n                    parent.append(flatten_list_rec(value, parent))\n                elif type(key) is dict:\n                    parent.append(flatten_list_rec(key, parent))\n                else:\n                    parent.append(value)\n        elif type(elem) is set:\n            for item in elem:\n                if type(item) is list:\n                    parent.append(flatten_list_rec(item, parent))\n                elif type(item) is dict:\n                    parent.append(flatten_list_rec(item, parent))\n                else:\n                    parent.append(item)\n        else:\n            parent.append(elem)\n        return parent\n    \n    flattened = flatten_list_rec(list1)\n    return flattened\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = 0\n    for elem in stdata:\n        result = max(result, elem[1])\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Write your code here\n    agregate = 0\n    for i in stdata:\n        agregate = max(agregate, i[1])\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #import pdb; pdb.set_trace()\n    #print(stdata)\n    max_aggregate_list = defaultdict(int)\n    #max_aggregate_list = {}\n    #print(max_aggregate_list)\n    for (tup1, tup2) in stdata:\n        #print(tup1, tup2)\n        (tup1, tup2) = tup1 + tup2\n        #print(tup1, tup2)\n        max_aggregate_list[tup1] = max(tup2, max_aggregate_list[tup1])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for item in stdata:\n        if max_aggregate < item[1]:\n            max_aggregate = item[1]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key=lambda x: x[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(list(stdata.values()))\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_data = 0\n    for key,value in stdata.items():\n        max_aggregate_data = max(value,max_aggregate_data)\n    return max_aggregate_data\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize the dictionary that will contain the information of each cell's aggregate.\n    aggregate = defaultdict(int)\n    # The size of the list can be increased by 100.\n    max_aggregate_size = 100\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    n = len(stdata)\n    agg_record = defaultdict(int)\n    for num in range(1, n+1):\n        agg_record[num] = stdata[num][2]\n        \n    \n    print(agg_record)\n    \n    max_record = max(agg_record.values())\n    \n    return max_record\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # TODO: Write a function that accepts a list of strings and returns a tuple of floats.\n    # Don't write any other Python code.\n    data = []\n    for row in stdata:\n        for i in row:\n            data.append(float(i))\n    data.sort()\n    return (data[-1],)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = n//2\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    \n    left=0\n    right=0\n    while left<n:\n        if (right+1)<n:\n            sum=left+left+right\n            if (sum%2)!=0:\n                right+=1\n            else:\n                left+=1\n            left+=1\n        else:\n            sum=left+left+right\n            if (sum%2)!=0:\n                right+=1\n            else:\n                left+=1\n                right+=1\n    return right\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert(n > 0), 'n must be greater than 0'\n    \n    # Store the first 2^n bits\n    first_2_n_bits = bin(n)[2:]\n    \n    # Add the first 2^n bits to the sums\n    sums = []\n    sums.append(n)\n    for i in range(n):\n        sums.append(n >> i)\n    \n    # Add the sums together\n    res = sum(sums)\n    \n    # Check if the sums are equal to the whole number\n    assert(res == n), 'Sum of the first 2^n bits is not equal to n'\n    \n    # Store the sums as a list\n    first_2_sums = [sums[i] + sums[-i-1] for i in range(n)]\n    \n    # Check if the sums are equal to the second to the last\n    for i in range(n):\n        sum_first = first_2_sums[i]\n        sum_last = first_2_sums[-i-1]\n        assert(sum_first == sum_last), 'Sum of the first 2^n bits is not equal to the second to the last'\n    \n    # Print the results\n    print(f'Sum of the first 2^n bits is {first_2_sums}')\n    "
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    for i in range(2 ** n): \n        if i & 1 == 1: \n            sum = 0\n            for j in range(n): \n                sum += i >> j \n            if sum == i: \n                print(f'{i} {sum}')\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += 1 if (j - i) % 2 == 0 else 0\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    l = 0\n    r = n - 1\n    while(l < r):\n        if (binary_part(l, r, 2) == 2):\n            l += 1\n        else:\n            r -= 1\n    return l\ndef binary_part(l, r, n):\n    '''\n    Compute the complement of n as sum of first n bits and last n bits.\n    '''\n    if (l >= r):\n        return 0\n    else:\n        if (l == n):\n            return 2 ** (n - 1)\n        else:\n            return (n - binary_part(l, r, 2) - 1) * 2\ndef complement(n):\n    '''\n    Compute the complement of n as sum of first n bits and last n bits.\n    '''\n    if (n >= 2**32):\n        return 0\n    else:\n        return (2 ** (n - 1)) * (-1)\ndef generate_seq(n):\n    '''\n    Compute the complementary of n as complement of n.\n    '''\n    ans = complement(n)\n    ans += count_binary_seq(n)\n    ans = ans % 2**32\n    return ans\ndef count_complement_seq(n): \n    '''\n    Compute the complement of n as sum of first n bits and last n bits.\n    '''\n    l = 0\n    r = n - 1\n    while(l < r):\n        if (binary_part(l, r, 2) == 2):\n            l += 1\n        else:\n            r -= 1\n    return l\ndef complement_seq(l, r):\n    '''\n    Compute the complement of n as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    while(l < r):\n        ans += binary_part(l, r, 2) * 2\n        l += 1\n    ans = ans % 2**32\n    return ans\ndef count_complement_seq2(n): \n    '''\n    Compute the complement of n as sum of first n bits and last n bits.\n    '''\n    l = 0\n    r = n - 1\n    while(l < r):\n        if (binary_part(l, r, 2) == 2):\n            l += 1\n        else:\n            r -= 1\n    return l\ndef complement_seq2(l, r):\n    '''\n    Compute the complement of n as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    while(l < r):\n        ans += count_binary_seq(l) * 2\n        ans = complement(ans)\n        l += 1\n    ans = ans % 2**32\n    return ans\ndef get_l_r(n):\n    '''\n    Compute the complement of n as sum of first n bits and last n bits.\n    '''\n    ans = complement(n)\n    return count_complement_seq2(n) - ans\ndef count_l_r(n): \n    '''\n    Compute the complement of n as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    while(n >= 0):\n        ans += count_binary_seq(n)\n        n -= 1\n    ans = ans % 2**32\n    return ans\ndef count_l_r2(n): \n    '''\n    Compute the complement of n as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    while(n >= 0):\n        ans += count_binary_seq(n) * 2\n        n -= 1\n    ans = ans % 2**32\n    return ans\ndef gen_fibonacci_seq(n):\n    '''\n    Compute the composition of the fibonacci sequence as sum of first n bits and last n bits.\n    '''\n    l = 0\n    r = n - 1\n    ans = 0\n    while(l < r):\n        ans = (l + r) // 2\n        if (binary_part(l, r, 2) == 2):\n            l += 1\n        else:\n            r -= 1\n    return ans\ndef count_fibonacci_seq(n):\n    '''\n    Compute the composition of the fibonacci sequence as sum of first n bits and last n bits.\n    '''\n    l = 0\n    r = n - 1\n    ans = 0\n    while(l < r):\n        ans = (l + r) // 2\n        if (binary_part(l, r, 2) == 2):\n            l += 1\n        else:\n            r -= 1\n    return l\ndef count_fibonacci_seq2(n):\n    '''\n    Compute the composition of the fibonacci sequence as sum of first n bits and last n bits.\n    '''\n    l = 0\n    r = n - 1\n    ans = 0\n    while(l < r):\n        ans = (l + r) // 2\n        if (binary_part(l, r, 2) == 2):\n            l += 1\n        else:\n            r -= 1\n    return l\ndef count_fibonacci_seq2(n): \n    '''\n    Compute the composition of the fibonacci sequence as sum of first n bits and last n bits.\n    '''\n    l = 0\n    r = n - 1\n    ans = 0\n    while(l < r):\n        ans = (l + r) // 2\n        if (binary_part(l, r, 2) == 2):\n            l += 1\n        else:\n            r -= 1\n    return l\ndef gen_l_r_seq(n):\n    '''\n    Compute the composition of the l-r sequence as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += gen_fibonacci_seq(i)\n    return ans\ndef count_l_r_seq(n): \n    '''\n    Compute the composition of the l-r sequence as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += count_fibonacci_seq2(i)\n    return ans\ndef count_l_r_seq2(n): \n    '''\n    Compute the composition of the l-r sequence as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += count_fibonacci_seq2(i)\n    return ans\ndef count_l_r_seq3(n):\n    '''\n    Compute the composition of the l-r sequence as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += count_fibonacci_seq2(i) * 2\n    return ans\ndef count_l_r_seq4(n): \n    '''\n    Compute the composition of the l-r sequence as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += count_fibonacci_seq2(i) * 2\n    return ans\ndef count_l_r_seq5(n): \n    '''\n    Compute the composition of the l-r sequence as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += count_fibonacci_seq2(i) * 2\n    return ans\ndef gen_l_r_seq2(n):\n    '''\n    Compute the composition of the l-r sequence as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += gen_fibonacci_seq(i)\n    return ans\ndef count_l_r_seq2(n): \n    '''\n    Compute the composition of the l-r sequence as sum of first n bits and last n bits.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += count_fibonacci_seq2(i)\n    return ans"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    c=0\n    for i in range(0, n): \n        if ((i%2==1) and ((i+1)%2==0)): \n            c+=1\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    t=n\n    count=0\n    for i in range(2**t):\n        s=bin(i)[2:]\n        if '0' in s:\n            s=s[1:]\n        if len(s)==t:\n            for j in range(t):\n                if s[j]=='1':\n                    count+=1\n    return count\n    \ndef main():\n    n=int(input())\n    print(count_binary_seq(n))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # return count of first 2n bits \n    cnt = 0 \n    # run through every 8 bits of input\n    for i in range(n+1): \n        # print output \n        print(i,end=\" \") \n        # count the number of first 2n bits \n        cnt+=int(bin(i)[2:].count('1')) \n    return cnt \n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # define a function that can iterate through the keys of a dictionary\n    def dict_iter(d, n):\n        # if the dictionary is empty, return 0\n        if not n:\n            return 0\n        # if a key is present, return the depth of the dictionary\n        if d[n] is not None:\n            return 1 + dict_depth(d[n])\n        else:\n            # otherwise, return the depth of the next key\n            return 1 + dict_iter(d, n + 1)\n    return dict_iter(d, 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Write your code here\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        raise TypeError('The argument must be a dictionary.')\n    return max([len(d) for d in d.values()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return sum([len(dict(x)) for x in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    for i in d:\n        if type(d[i]) is dict:\n            dict_depth(d[i])\n        else:\n            if d[i] < 0:\n                print('Sorry, this value does not exist')\n                return -1\n    return 1\n    \nd = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\nprint('The depth of a dictionary is', dict_depth(d))"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = []\n    for key, value in d.items():\n        if value == 1:\n            if len(stack) == 0:\n                stack.append([key])\n            else:\n                if len(stack[-1]) == 0:\n                    stack.append([key])\n                else:\n                    stack[-1].append(key)\n        if value > 1:\n            stack.append(key)\n        if value > 2:\n            stack.append(key)\n    return len(stack[-1])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d, depth = 0, visited = {}):\n        # print(f\"\\nDepth: {depth}\")\n        # print(f\"Visited: {visited}\")\n        for key, value in d.items():\n            if type(value) == dict:\n                depth += depth + 1 + depth(value, depth)\n            else:\n                depth += depth + 1\n        return depth\n        pass\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def _depth(d):\n        if '__typecheck__' in d:\n            return _depth(d['__typecheck__']) + 1\n        else:\n            return 0\n    return _depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Import standard library\n    import sys\n    # Import the dictionary module\n    import json\n    # Import the json module\n    import json\n    # Create an empty dictionary\n    d_json = {}\n    # Iterate through each key\n    for key in d:\n        # Compute the depth of a key\n        depth = sys.getsizeof(d[key])\n        # Add the key to the dictionary\n        d_json[key] = depth\n    # Return the depth of the dictionary\n    return d_json\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) : \n        for j in range(ranges) :\n            arr[i][j] = arr[i][j] + arr[i][j+1] \n    return arr[ranges-1][index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for rot in range(0,rotations) :\n        ranges = (int(ranges[0]),int(ranges[1]))\n        new_arr = arr[ranges[0]:ranges[1]]\n        find = False\n        for el in new_arr :\n            if el == index :\n                count += 1\n                find = True\n                break\n        if not(find) :\n            return -1\n    return count\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index<len(ranges)) and (ranges[index][0]<arr[0] and ranges[index][1]<arr[1]) : \n        return ranges[index][2]\n    return arr[2]\ndef find_distance(arr,index) :\n    '''\n    Write a python function to find the distance of given element from the current position.\n    '''\n    dist=0\n    if arr[0]<arr[1] :\n        dist=arr[1]-arr[0]\n    else : \n        dist=arr[1]-arr[0]\n    return dist\ndef flip_array(arr) :\n    '''\n    Write a python function to flip the given array.\n    '''\n    arr[0],arr[len(arr)-1]=arr[len(arr)-1],arr[0]\ndef rotate(arr) :\n    '''\n    Write a python function to rotate a given array.\n    '''\n    arr[1],arr[len(arr)-2]=arr[len(arr)-2],arr[1]\n    arr[len(arr)-2],arr[1]=arr[1],arr[len(arr)-2]\ndef print_arr(arr) :\n    '''\n    Write a python function to print given array.\n    '''\n    for i in range(0,len(arr)-1) :\n        print(arr[i],end=\" \")\n    print(arr[len(arr)-1])\ndef main() :\n    '''\n    Write a python function to find the minimum length of a given string.\n    '''\n    print('#'*20)\n    print('Minimum Length: ',end=\"\")\n    print(find_Element(str(input()),[input(),input()],input(),1))\n    print('#'*20)\n    print('Maximum length: ',end=\"\")\n    print(find_Distance(str(input()),1))\n    print('#'*20)\n    print('Minimum Length: ',end=\"\")\n    print(find_Element(str(input()),[input(),input()],input(),0))\n    print('#'*20)\n    print('Maximum length: ',end=\"\")\n    print(find_Distance(str(input()),0))\n    print('#'*20)\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('\\n')\n    print('Test case:')\n    print('Minimum length of a given string : ',end=\"\")\n    print(find_length(str(input())))\n    print('Maximum length of a give"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index == len(arr) - 1) :\n        return arr[index]\n    if (rotations == 0) :\n        return arr[index]\n    if (rotations < 0) :\n        index -= 1\n        return find_Element(arr,ranges,rotations,index)\n    else :\n        return arr[index + rotations]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index==0) :\n        return arr[index]\n    if(index==len(arr)-1) :\n        return arr[index-1]\n    if(index+rotations<len(arr)) :\n        return find_Element(arr,ranges,rotations,index+1)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    if (index == len(arr)):\n        return arr[index-1]\n    if rotations > 0:\n        return arr[index-1]\n    if rotations == 0:\n        return arr[index]\n    \n    return find_Element(arr,ranges,rotations -1,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = 0\n    end = len(arr) - 1\n    if(end == -1):\n        end = len(arr)-1\n    while(start <= end):\n        mid = start + (end-start)//2\n        if(arr[mid] < r):\n            start = mid + 1\n        elif(arr[mid] > r):\n            end = mid - 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)) :\n        if (rotations == 0) :\n            return arr[i]\n        elif (rotations == 1) :\n            return arr[i+rotations]\n        elif (rotations == 2) :\n            return arr[i-rotations]\n        rotations = rotations -1\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1] :\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    for i in range(ranges) :\n        for j in range(rotations) :\n            if arr[index] == ranges[i] :\n                return i\n            \n    return -1\n    \ndef insert_num(arr,index,num) :  \n    '''\n    Write a python function to insert a number to a given index of the array.\n    '''\n    if arr[index]!= -1 :\n        arr.insert(index,num)\n        return arr\n    \n    for i in range(len(arr)) :\n        if arr[i] == num :\n            arr.insert(i,num)\n            return arr\n            \n    arr.append(num)\n    return arr\n    \ndef remove_num(arr,index,num) :  \n    '''\n    Write a python function to remove a number from a given index.\n    '''\n    if arr[index]!= -1 :\n        arr.pop(index)\n        return arr\n    \n    for i in range(len(arr)) :\n        if arr[i] == num :\n            arr.pop(i)\n            return arr\n    \n    return arr\n    \ndef diff(arr,ranges,rotations) :  \n    '''\n    Write a python function to find the difference between given arrays.\n    '''\n    if len(arr) < len(ranges) :\n        return -1\n    \n    arr_new = []\n    arr_diff = []\n    \n    for i in range(len(ranges)) :\n        arr_new.append(find_Element(arr,ranges,rotations,i))\n    \n    for i in range(len(ranges)) :\n        arr_diff.append(find_Element(arr,ranges,rotations,i+len(arr_new)-1))\n    \n    return arr_diff\n    \ndef find_max(arr) :  \n    '''\n    Write a python function to find the maximum number in given array.\n    '''\n    if len(arr) == 0 :\n        return 0\n        \n    else :\n        arr_new = []\n        arr_max = []\n        \n        for i in range(len(arr)) :\n            arr_new.append(find_Element(arr,arr,1,i))\n            \n        for i in range(len(arr)) :\n            arr_max.append(find_Element(arr,arr,0,i))\n        \n        return max(arr_max)\n    \ndef find_min(arr) :  \n    '''\n    Write a python function to find the minimum number in given array.\n    '''\n    if len(arr) == 0 :\n        return 0\n        \n    else :\n        arr_new = []\n        arr_min = []\n        \n        for i in range(len(arr)) :\n            arr_new.append(find_Element(arr,arr,1,i))\n            \n        for i in range(len(arr)) :\n            arr_min.append(find_Element(arr,arr,0,i))\n        \n        return min(arr_min)\n    \ndef diff_even(arr,ranges,rotations) :  \n    '''\n    Write a python function to find the difference between given arrays.\n    '''\n    if len(arr) < len(ranges) :\n        return -1\n    \n    arr_new = []\n    arr_diff = []\n    \n    for i in range(len(ranges)) :\n        arr_new.append(find_Element(arr,ranges,rotations,i))\n    \n    for i in range(len(ranges)) :\n        arr_diff.append(find_Element(arr,ranges,rotations,i+len(arr_new)-1))\n    \n    return arr_diff\n    \ndef diff_odd(arr,ranges,rotations) :  \n    '''\n    Write a python function to find the difference between given arrays.\n    '''\n    if len(arr) < len(ranges) :\n        return -1\n    \n    arr_new = []\n    arr_diff = []\n    \n    for i in range(len(ranges)) :\n        arr_new.append(find_Element(arr,ranges,rotations,i))\n    \n    for i in range(len(ranges)) :\n        arr_diff.append(find_Element(arr,ranges,rotations,i+len(arr_new)-1))\n    \n    return arr_diff\n    \ndef min_diff(arr,ranges,rotations) :  \n    '''\n    Write a python function to find the minimum difference between given arrays.\n    '''\n    if len(arr) < len(ranges) :\n        return -1\n    \n    arr_new = []\n    arr_min = []\n    \n    for i in range(len(ranges)) :\n        arr_new.append(find_Element(arr,ranges,rotations,i))\n    \n    for i in range(len(ranges)) :\n        arr_min.append(find_Element(arr,ranges,rotations,i+len(arr_new)-1))\n    \n    return min(arr_min)\n    \ndef max_diff(arr,ranges,rotations) :  \n    '''\n    Write a python function to find the maximum difference between given arrays.\n    '''\n    if len(arr) < len(ranges) :\n        return -1\n    \n    arr_new = []\n    arr_max = []\n    \n    for i in range(len(ranges)) :\n        arr_new.append(find_Element(arr,ranges,rotations,i))\n    \n    for i in range(len(ranges)) :\n        arr_max.append(find_Element(arr,ranges,rotations,i+len(arr_new)-1))\n    \n    return max(arr_max)\n    \ndef find_min_diff(arr,ranges,rotations) :  \n    '''\n    Write a python function to find the minimum difference between given arrays.\n    '''\n    if len(arr) < len(ranges) :\n        return -1\n    \n    arr_new = []\n    arr_min = []\n    \n    for i in range(len(ranges)) :\n        arr_new.append(find_Element(arr,ranges,rotations,i))\n    \n    for i in range(len(ranges)) :\n        arr_min.append(find_Element(arr,ranges,rotations,i+len(arr_new)-1))\n    \n    return min(arr_min)\n    \ndef find_max_diff(arr,ranges,rotations) :  \n    '''\n    Write a python function to find the maximum difference between given arrays.\n    '''\n    if len(arr) < len(ranges) :\n        return -1\n    \n    arr_new = []\n    arr_max = []\n    \n    for i in range(len(ranges)) :\n        arr_new.append(find_Element(arr,ranges,rotations,i))\n    \n    for i in range(len(ranges)) :\n        arr_max.append(find_Element(arr,ranges,rotations,i+len(arr_new)-1))\n    \n    return max(arr_max)\n    \ndef find_min_max_diff(arr,ranges,rotations) :  \n    '''\n    Write a python function to find the minimum difference between given arrays.\n    '''\n    if len(arr) < len(ranges) :\n        return -1\n    \n    arr_new = []\n    arr_min = []\n    \n    for i in range(len(ranges)) :\n        arr_new.append(find_Element(arr,ranges,rotations,i))\n    \n    for i in range(len(ranges)) :\n        arr_min.append(find_Element(arr,ranges,rotations,i+len(arr_new)-1))\n    \n    return min(arr_min)\n    \ndef read_input() :  \n    '''\n    Read the input file, which contains a list of numbers and a number of rotations.\n    '''\n    numbers = []\n    with open(\"Input.txt\",\"r\") as f :\n        lines = f.readlines()\n        for line in lines:\n            line = line.strip()\n            num = int(line)"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0][0],words[-1][0]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Your code here\n    # (You don't need to print anything here)\n    # returns two words, 'p' and 'q'\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0]==\"p\":\n            return word, \"p\"\n    return \"Invalid input.\", \"Invalid input.\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    count = 0\n    p = False\n    for word in words:\n        if word[0] == 'p':\n            p = True\n            count = count + 1\n        else:\n            count = count\n    if count == 1:\n        return words[0]\n    elif count == 2:\n        return words[1]\n    else:\n        return words[0] + \" \" + words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return words[:i[1]] + words[i[1]+1:]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = 'p'\n    for w in words:\n        if w[0] == p:\n            return w\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = []\n    second = []\n    for word in words:\n        if word[0] == \"p\":\n            first.append(word)\n        else:\n            second.append(word)\n    return first, second\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word[1:]\n    return ''\n    \ndef end_withp(words):\n    '''\n    Write a function that takes a list of words as an argument,\n    and returns a list with all of the words in reverse order.\n    '''\n    s = start_withp(words)\n    e = end_withp(s)\n    return e\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, 'p'\n    return None, None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return_words = []\n    for i in words:\n        if i[0] == 'p':\n            return_words.append(i[1:])\n    return return_words\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_k = max(n - index + 1, k)\n    if n == 0 or index == -1:\n        return 0\n    if a[index] > a[index + 1]:\n        return max(a[index] + max_sum_increasing_subseq(a, n-1, index+1, k), a[index+1] + max_sum_increasing_subseq(a, n-1, index, k-1))\n    else:\n        return a[index] + max_sum_increasing_subseq(a, n-1, index, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix = [0 for _ in range(n)]\n    sum = 0\n    for i in range(index, n):\n        if sum + a[i] <= k:\n            sum += a[i]\n            prefix[i] = 1\n        else:\n            sum += a[i] - k\n            prefix[i] = 1\n    prefix[index] = 1\n    for i in range(index+1, n):\n        if prefix[i] == 1:\n            sum += a[i]\n            prefix[i] = 0\n        else:\n            sum += a[i] - k\n    return sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[0]\n    elif k == 1:\n        return max(a)\n    elif index == n-1:\n        return max(a[index], a[n-1])\n    else:\n        return max(a[index], a[index]+a[index+1], a[index-1]+a[index+1])\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = a[index]\n    \n    for i in range(index, n):\n        if k == i:\n            return max_sum\n        if i < n and a[i] > a[i+1]:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i+1, k))\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_k = (n - index - k) if (n - index - k) >= 0 else 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    maximum = 0\n    i = index\n    while i < n:\n        maximum = max(maximum, (a[i] - a[index]) + max_sum_increasing_subseq(a, n, i + 1, k))\n        i += 1\n    return maximum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index == n:\n        return a[k]\n    \n    if k == 0:\n        return a[index]\n    \n    if index > n:\n        return -1\n    \n    if a[index] < a[index - 1]:\n        return max_sum_increasing_subseq(a, n, index, k-1)\n    \n    #f(i, k) = max(f(i, k-1) + a[i], a[i])\n    return a[index] + max(max_sum_increasing_subseq(a, n, index-1, k), \n                       a[index] + a[index-1])\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return a[index] + max_sum_increasing_subseq(a, n, index + k, k)\n    if k == index:\n        return a[index] + k\n    if k == index + 1:\n        return a[index] + k\n    return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    a = a[index:]\n    \n    if index < len(a):\n        if index == 0:\n            return 0\n        \n        max_plus = 0\n        \n        for i in range(index, len(a)):\n            max_plus = max(max_plus, a[i] + k * min(i, k - index + 1))\n        \n        return max_plus\n    else:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index\n    if index + 1 > n:\n        return 0\n    # 0(n)\n    # 0(n - i) + 0(i) = 0(1)\n    # 0(i) = 0(k)\n    \n    # 0(i)\n    if k == 0:\n        return a[i]\n    \n    # 0(k)\n    if k > 0:\n        return max_sum_increasing_subseq(a, n, index + 1, k - 1)\n    # 0(k)\n    # 0(k) + 0(k - i) = 0(k)\n    # 0(k) + 0(k - i) + 0(i) = 0(k)\n    # 0(i)\n    return max(0, max_sum_increasing_subseq(a, n, index + 1, k)) + a[i]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0 and n==0:\n        return tuplex\n    elif m==0 and n!=0:\n        return colon_tuplex(tuplex[1:n],m,n-1)\n    elif m!=0 and n==0:\n        return colon_tuplex(tuplex,m-1,n)\n    elif m!=0 and n!=0:\n        return colon_tuplex(tuplex[1:n],m,n-1) + colon_tuplex(tuplex[m:n],m-1,n-1)\n    else:\n        return tuplex\n    \ndef min_max(list):\n    '''\n    Write a function that returns the maximum and the minimum value of a list.\n    '''\n    max = list[0]\n    min = list[0]\n    for x in list:\n        if x>max:\n            max = x\n        if x<min:\n            min = x\n    return max,min\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(sorted(tuplex[:m],reverse = True)) + tuple(sorted(tuplex[n:],reverse = True))\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)==2 and type(tuplex[0])==tuple:\n        return tuplex\n    elif len(tuplex)==2:\n        if type(tuplex[0])==tuple:\n            return tuplex+(tuplex[0]+tuplex[1],)\n        else:\n            return tuplex+(tuplex[0],)\n    else:\n        return (tuplex[0]+tuplex[1],tuplex[2:])\n    \ndef parse_tuple_list(tuplex,m,n):\n    '''\n    Parse a list of tuples.\n    '''\n    out = []\n    for tuplex_i in tuplex:\n        tuplex_i = colon_tuplex(tuplex_i,m,n)\n        out.append(tuplex_i)\n    return out\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 1:\n        return None\n    else:\n        return colon_tuplex(tuplex[1:],m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:n] + m + tuplex[n+1:]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    temp=[]\n    for i in range(n):\n        temp.append(tuplex[i][m])\n    return tuple(temp)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == ',':\n            m=m-1\n        elif tuplex[i] == ';':\n            n=n-1\n        elif tuplex[i] == ')':\n            if m!= 0:\n                return (tuplex[0:m],tuplex[m+1:n])\n            else:\n                return tuplex[0:n]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)!= m:\n        raise Exception('tuplex is not a tuple of length {}'.format(m))\n    elif len(tuplex) == m:\n        return tuplex\n    else:\n        col = [tuplex[i+1] for i in range(m-1)]\n        col.append(tuplex[0])\n        if n == 0:\n            return col\n        else:\n            return col,col\ndef sum_tuplex(tuplex):\n    '''\n    Write a function to get the sum of a tuple.\n    '''\n    if len(tuplex) == 0:\n        return 0\n    else:\n        return tuplex[0] + sum_tuplex(tuplex[1:])\ndef main():\n    '''\n    Test the sum_tuplex function.\n    '''\n    tuplex = [1,2,3]\n    print(sum_tuplex(tuplex))\n    tuplex = [1,1,1,1,1,2,3,4]\n    print(sum_tuplex(tuplex))\n    tuplex = []\n    print(sum_tuplex(tuplex))\n    tuplex = [1,2,3,4,5,6,7]\n    print(sum_tuplex(tuplex))\n    tuplex = [1,2,3,4,5,6,7,8,9,10]\n    print(sum_tuplex(tuplex))\n    tuplex = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    print(sum_tuplex(tuplex))\n    tuplex = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,76"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + [tuplex[m] + tuplex[m + n - 1]] + tuplex[m + n:]\ndef main():\n    tuplex = ['first','second','third','fourth','fifth','sixth','seventh','eighth','ninth']\n    print(colon_tuplex(tuplex,3,3))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    def colon_tuple_method(tuplex,m,n):\n        c_col=0\n        for i in range(m):\n            for j in range(n):\n                c_col+=tuplex[i][j]\n        return c_col\n    return colon_tuple_method(tuplex,m,n)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # 1. While we haven't reached N, go through each of the lists, using the fact that the nth factor of the nth list is the largest product of the nth list and the nth list.\n    # 2. Loop through all nth lists, sum up the nth value of the largest product from each list.\n    # 3. Sort the factors of the largest product from each list.\n    # 4. Return the nth largest product.\n    # For example, if we have the following list:\n    # nums1 = [2, 3, 4, 5]\n    # nums2 = [1, 2, 3, 4]\n    # N = 2\n    # A product of the two lists is 3 because the largest product of the two lists is 3.\n    \n    def three_largest_product(nums1, nums2, N):\n        # create a new list to store the products of the two lists\n        new_list = []\n        \n        # loop through the nth list, adding each item in the nth list to the new list\n        for num in nums1:\n            new_list.append(num)\n            \n        for num in nums2:\n            new_list.append(num)\n            \n        # find the first product of the nth list\n        first_product = new_list[0]\n        \n        # loop through the list\n        for i in range(1, len(new_list)):\n            if new_list[i] > first_product:\n                first_product = new_list[i]\n                \n        # find the largest product of the nth list\n        max_product = first_product\n        \n        for i in range(len(new_list)):\n            if new_list[i] > max_product:\n                max_product = new_list[i]\n                \n        return max_product\n        \n    # Driver code\n    nums1 = [2, 3, 4, 5]\n    nums2 = [1, 2, 3, 4]\n    N = 2\n    print(three_largest_product(nums1, nums2, N))\n    \ndef max_product_recursive(nums, start_idx, end_idx, N):\n    '''\n    Use the recursive function to find the largest product.\n    '''\n    # Find the largest product of the current range\n    current_product = 0\n    for i in range(start_idx, end_idx+1):\n        current_product += nums[i]\n        \n    # Return the current product\n    return current_product\n    \n    \ndef max_product_iter(nums, start_idx, end_idx, N):\n    '''\n    Use an iterative version of the function.\n    '''\n    # For the first element, return the product.\n    if start_idx == end_idx:\n        return nums[start_idx]\n    \n    # Find the largest product from the two lists and use it to find the current product.\n    curr_product = 0\n    for i in range(start_idx, end_idx+1):\n        curr_product += nums[i]\n    \n    # Return the product of the current product and the largest product from the two lists.\n    return curr_produc"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_prod = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i]*nums2[j] > max_prod[N-1]:\n                max_prod.append(nums1[i]*nums2[j])\n    return max_prod\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import math\n    \n    # sorting the lists\n    nums1.sort()\n    nums2.sort()\n    \n    # calculating the number of products and products by summing up\n    N = math.ceil(N / len(nums1) + len(nums2) / len(nums1))\n    \n    # summing up all the products\n    sum_product = sum(map(lambda x: (x * (N ** i)), nums1 + nums2))\n    \n    # returning the products\n    return sum_product\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    m = len(nums1)\n    n = len(nums2)\n    \n    if m == 0 or n == 0:\n        return []\n    \n    dp = [[0] * (N+1) for i in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif nums1[i-1] * nums2[j-1] > nums1[i-1] * nums2[j-1]:\n                dp[i][j] = nums1[i-1] * nums2[j-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    print(dp)\n    return dp[m][n]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #TODO: use recursive to solve this. maybe any other way would be better\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    lens = len(nums1)\n    if lens == 0:\n        return 0\n    else:\n        prod = 1\n        for i in range(N):\n            prod *= (nums1[i] * nums2[i])\n        return prod\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #for i in range(len(nums1)):\n    #    for j in range(len(nums2)):\n    #        if nums1[i] > nums2[j]:\n    #            nums1[i], nums2[j] = nums2[j], nums1[i]\n    #return max(nums1), max(nums2)\n    \n    return max(nums1[:N] + nums2[:N] )\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return _find_largest_product(nums1, nums2, N, lambda x, y: (x*y, x*y))\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Step 1: find the first list of factors\n    factors = []\n    for num in nums1:\n        for i in range(len(nums2)):\n            if num > nums2[i]:\n                factors.append(nums2[i])\n                break\n    \n    # Step 2: Find the second list of factors\n    for num in nums2:\n        for i in range(len(nums1)):\n            if num > nums1[i]:\n                factors.append(nums1[i])\n                break\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    # we will iterate through the second list\n    for i in range(len(nums2)):\n        # we iterate through the first list\n        for j in range(len(nums1)):\n            # find the index of the maximum value\n            if nums2[i] * nums1[j] > N:\n                # we make a copy of the result\n                # we will use the index of the maximum value and index of the largest product\n                result.append(nums2[i])\n                result.append(nums1[j])\n                break\n    return result\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        max=a\n    else:\n        max=b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\na=int(input(\"enter a number: \"))\nb=int(input(\"enter b number: \"))\nprint(maximum(a,b))"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    c=a+b\n    d=a-b\n    if a>b:\n        return d\n    else:\n        return c\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    c=a+b\n    d=a-b\n    if a<b:\n        return d\n    else:\n        return c\n    \ndef main():\n    a=input('Enter First number : ')\n    b=input('Enter Second number : ')\n    print('The maximum of',a,'and',b,'is',maximum(a,b))\n    print('The minimum of',a,'and',b,'is',minimum(a,b))\n    \nif __name__=='__main__':\n    main()"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        greater = b\n    else:\n        greater = a\n    return greater\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    return b\ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (a+b)/2\ndef fib(n):\n    '''\n    Write a python function to find the first n Fibonacci numbers.\n    '''\n    a,b = 0,1\n    while n > 1:\n        if a == b:\n            return a\n        else:\n            a,b = b,a+b\n            \nprint(fib(8)"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        return a\n    else:\n        return b\n    \n    \n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        max = a\n    else:\n        max = b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)==str:\n        a=a.split(',')\n        a=int(a[0])\n        b=int(a)\n        if b>a:\n            print('the maximum is ',b)\n        else:\n            print('the maximum is ',b)\n    elif type(a)==int:\n        a=int(a)\n        if a>b:\n            print('the maximum is ',a)\n        else:\n            print('the maximum is ',a)\n    elif type(b)==int:\n        b=int(b)\n        if a>b:\n            print('the maximum is ',a)\n        else:\n            print('the maximum is ',a)\n    elif type(b)==float:\n        b=int(b)\n        if a>b:\n            print('the maximum is ',a)\n        else:\n            print('the maximum is ',a)\n    else:\n        print('invalid type')\n    return 'done'\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (b==0):\n        return a\n    else:\n        return maximum(a,b-1)\ndef sum_squares(a,b):\n    '''\n    Write a python function to sum up the squares of the elements of array.\n    '''\n    if (b==0):\n        return a\n    else:\n        return sum_squares(a,b-1) + a**2\ndef sum_of_squares(a,b):\n    '''\n    Write a python function to sum up the squares of the elements of array.\n    '''\n    if (b==0):\n        return a\n    else:\n        return sum_of_squares(a,b-1) + a**2 + a**3\ndef count_of_squares(a,b):\n    '''\n    Write a python function to count the number of squares in an array.\n    '''\n    if (b==0):\n        return a\n    else:\n        return count_of_squares(a,b-1) + a**2 + a**3\ndef print_string(a):\n    '''\n    Write a python function to print the elements of an array.\n    '''\n    if (a==0):\n        return a\n    else:\n        for i in range(a):\n            print(a*' ', end='')\n        for i in range(a):\n            print(a*' '+'*',end='')\n            for j in range(a):\n                print(a,end='')\ndef calculate_prime_number(a):\n    '''\n    Write a python function to calculate the next prime number.\n    '''\n    if(a==2):\n        return 2\n    if(a==4):\n        return 3\n    if(a==6):\n        return 5\n    if(a==12):\n        return 7\n    if(a==14):\n        return 9\n    if(a==16):\n        return 11\n    if(a==17):\n        return 13\n    if(a==19):\n        return 17\n    if(a==21):\n        return 19\n    if(a==23):\n        return 21\n    if(a==29):\n        return 29\n    if(a==31):\n        return 31\n    if(a==41):\n        return 41\n    if(a==43):\n        return 43\n    if(a==47):\n        return 47\n    if(a==53):\n        return 53\n    if(a==59):\n        return 59\n    if(a==61):\n        return 61\n    if(a==71):\n        return 71\n    if(a==73):\n        return 73\n    if(a==79):\n        return 79\n    if(a==83):\n        return 83\n    if(a==89):\n        return 89\n    if(a==91):\n        return 91\n    if(a==97):\n        return 97\n    if(a==99):\n        return 99\n    if(a==103):\n        return 103\n    if(a==107):\n        return 107\n    if(a==109):\n        return 109\n    if(a==113):\n        return 113\n    if(a==119):\n        return 119\n    if(a==123):\n        return 123\n    if(a==127):\n        return 127\n    if(a==131):\n        return 131\n    if(a==135):\n        return 135\n    if(a==139):\n        return 139\n    if(a==143):\n        return 143\n    if(a==147):\n        return 147\n    if(a==151):\n        return 151\n    if(a==155):\n        return 155\n    if(a==159):\n        return 159\n    if(a==163):\n        return 163\n    if(a==167):\n        return 167\n    if(a==171):\n        return 171\n    if(a==173):\n        return 173\n    if(a==179):\n        return 179\n    if(a==181):\n        return 181\n    if(a==183):\n        return 183\n    if(a==187):\n        return 187\n    if(a==191):\n        return 191\n    if(a==193):\n        return 193\n    if(a==197):\n        return 197\n    if(a==201):\n        return 201\n    if(a==203):\n        return 203\n    if(a==207):\n        return 207\n    if(a==211):\n        return 211\n    if(a==213):\n        return 213\n    if(a==219):\n        return 219\n    if(a==221):\n        return 221\n    if(a==223):\n        return 223\n    if(a==227):\n        return 227\n    if(a==231):\n        return 231\n    if(a==233):\n        return 233\n    if(a==237):\n        return 237\n    if(a==241):\n        return 241\n    if(a==243):\n        return 243\n    if(a==247):\n        return 247\n    if(a==251):\n        return 251\n    if(a==253):\n        return 253\n    if(a==257):\n        return 257\n    if(a==261):\n        return 261\n    if(a==263):\n        return 263\n    if(a==267):\n        return 267\n    if(a==271):\n        return 271\n    if(a==273):\n        return 273\n    if(a==277):\n        return 277\n    if(a==281):\n        return 281\n    if(a==283):\n        return 283\n    if(a==287):\n        return 287\n    if(a==291):\n        return 291\n    if(a==293):\n        return 293\n    if(a==297):\n        return 297\n    if(a==301):\n        return 301\n    if(a==303):\n        return 303\n    if(a==307):\n        return 307\n    if(a==311):\n        return 311\n    if(a==313):\n        return 313\n    if(a==317):\n        return 317\n    if(a==319):\n        return 319\n    if(a==323):\n        return 323\n    if(a==327):\n        return 327\n    if(a==331):\n        return 331\n    if(a==333):\n        return 333\n    if(a==337):\n        return 337\n    if(a==341):\n        return 341\n    if(a==343):\n        return 343\n    if(a==347):\n        return 347\n    if(a==351):\n        return 351\n    if(a==353):\n        return 353\n    if(a==357):\n        return 357\n    if(a==361):\n        return 361\n    if(a==363):\n        return 363\n    if(a==367):\n        return 367\n    if(a==371):\n        return 371\n    if(a==373):\n        return 373\n    if(a==377):\n        return 377\n    if(a==381):\n        return 381\n    if(a==383):\n        return 383\n    if(a==387):\n        return 387\n    if(a==391):\n        return 391\n    if(a==393):\n        return 393\n    if(a==397):\n        return 397\n    if(a==401):\n        return 401\n    if(a==403):\n        return 403\n    if(a==409):\n        return 409\n    if(a==413):\n        return 413\n    if(a==417):\n        return 417\n    if(a==421):\n        return 421\n    if(a==423):\n        return 423\n    if(a==427):\n        return 427\n    if(a==431):\n        return 431\n    if(a==433):\n        return 433\n    if(a==439):\n        return 439\n    if(a==443):\n        return 443\n    if(a==449):\n        return 449\n    if(a==453):\n        return 453\n    if(a==467):\n        return 467\n    if(a==471):\n        return 471\n    if(a==473):\n        return 473\n    if(a==479):\n        return 479\n    if(a==483):\n        return 483\n    if(a==487):\n        return 487\n    if(a==491):\n        return 491\n    if(a==493):\n        return 49"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Create a tuple.\n    characters = list(str1)\n    # Create an empty tuple.\n    return tuple(characters)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_tuple = tuple(str1)\n    return str_tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = tuple(str1)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1=[]\n    for i in str1:\n        tuple1.append(chr(ord(i)-1))\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    import re\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = []\n    tuple2 = []\n    for char in str1:\n        if char not in tuple1:\n            tuple1.append(char)\n    for i in range(len(tuple1)):\n        tuple2.append(tuple1[i])\n    return tuple2\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s = str1.split()\n    return tuple(s)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    splited = str1.split(\" \")\n    return tuple(splited)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(map(chr,list(str1)))\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 1\n    for i in range(n):\n        if n & i:\n            i = 1\n        else:\n            i = 0\n    return i\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n << 1 | 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    leftmost_unset_bit = n&~n>>1\n    return leftmost_unset_bit\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(8): \n        if n & (1 << i) == 0: \n            return i\n    return 8\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    c = np.array([0,0,0,0,0,1])\n    c[0] = n\n    c[1] = 0\n    c[2] = 1\n    c[3] = 0\n    c[4] = 0\n    c[5] = 0\n    return c\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bin_number = bin(n)\n    current_bit = bin_number[len(bin_number) - 1]\n    if current_bit == '1':\n        n = n ^ (n >> 1)\n    else:\n        n = n & (n - 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n.bit_length() - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # We will use a 0 to represent all bits are already set\n    # Set the new bit to be set if it is set and\n    # The old bit is already set\n    return bin(n).replace(\"0b\", \"0\").zfill(32)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # set the most left most unset bit to 1\n    while n <= 1:\n        n <<= 1\n    # get the bit\n    bit = n & 1\n    # if the bit is 0, it is unset\n    if bit == 0:\n        return n\n    # if the bit is 1, it is set\n    else:\n        return n | 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 1<<n \n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area=0\n    x=0\n    y=0\n    z=0\n    a=0\n    x=r*h\n    y=r*h\n    z=r*h\n    while (x>0):\n        area=area+math.pi*(r**2)*(h/2)\n        x=x-r\n        #print('x :',x)\n        if(x<0):\n            x=x*-1\n    while (y>0):\n        a=a+math.pi*(h**2)*(r/2)\n        y=y-r\n        #print('y :',y)\n        if(y<0):\n            y=y*-1\n    while (z>0):\n        z=z-r\n        #print('z :',z)\n        if(z<0):\n            z=z*-1\n    return area*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4 * math.pi * (r ** 2) * (math.acos(r ** 2 - (h ** 2)))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4/3)*math.pi*math.pow(r**3,3)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0.5 * 4 * math.pi * r**3 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    a = (2*math.pi*(r**2))\n    b = ((1/2)*(h**2))\n    c = (1/2)\n    d = (math.pi*r*h)\n    return round(a*b*c*d,3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=r**3\n    d=(h**2)/2\n    u=(-d*r*math.tan(math.pi/3))/v\n    return u\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * r * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**3 * math.pi * (h**2) * 3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (r**3)*math.pi*h*(math.sin(math.radians(45.0))**2)*math.sin(math.radians(90.0))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # TODO: complete this function\n    volume=h*(math.pi**3)*r**3\n    print(volume)\n    \ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    # TODO: complete this function\n    volume=math.sqrt(3*(a*b+c))\n    print(volume)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(1,n+1):\n        if n%2 == 0:\n            return i\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l = []\n    for i in range(1, n + 1): \n        if(i <= n):\n            l.append(i)\n    l.sort()\n    highest = 0\n    for i in l:\n        if(i > highest):\n            highest = i\n    return highest\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n**2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        return print(\"Enter a positive integer\")\n    else:\n        for x in range(2, n):\n            if n%x == 0:\n                print(x, \"is not a power of 2\")\n                return x\n        print(n, \"is a power of 2\")\n        return n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    while n!= 0:\n        if n % 2 == 1:\n            break\n        n = n//2\n        max_power+=1\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n * highest_Power_of_2(n // 2)\n    else:\n        return highest_Power_of_2(n // 2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high_power = 0\n    while n > 1:\n        if n & 1:\n            high_power += 1\n        n >>= 1\n    return high_power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = []\n    low = 0\n    high = n\n    while low <= high:\n        mid = low + (high - low) // 2\n        if mid == 0:\n            result.append(mid)\n            break\n        elif mid == n:\n            result.append(mid)\n            return result\n        elif mid ** 2 < n:\n            low = mid\n        else:\n            high = mid - 1\n    return result\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n == 0 or n == 1): \n        return n \n    if (n < 0): \n        return 0 \n    elif (n < 2): \n        return n \n    else: \n        return n * highest_Power_of_2(n // 2) \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high = 0\n    \n    if n <= 1: \n        return n \n    \n    # for n <= 1, we first check whether n is less than or equal to 1.\n    # if n is less than 1, we will use the previous value to return.\n    if n <= 1: \n        return n \n    \n    # we will take n as 1.\n    # we will iterate through 2 to n using while loop. \n    # if the number of iterations is equal to n, we will return n.\n    while n > 1: \n        \n        if n % 2 == 0:\n            n = n/2\n            high += 1\n            \n        else:\n            # we will take n/2 and n/2 - 1 as 2. \n            # if n is even, we will take 2. \n            # if n is odd, we will take 1. \n            n = n/2 - 1\n            high += 1\n    \n    return high \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n + 1):\n            if i == 2:\n                lucas = 2\n            else:\n                lucas = lucas * i\n        return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    d = [0,1,0,-1]\n    for i in range(2,n+1):\n        d.append(d[i-1]+d[i-2])\n    return d[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0: \n        return 1\n    if n==1: \n        return 2\n    if n==2: \n        return 3\n    return find_lucas(n-1) + find_lucas(n-2) + find_lucas(n-3)"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Find the firstn'th Lucas number starting from 1\n    for i in range(1, n+1):\n        if i == 1:\n            first = i\n        elif i == 2:\n            second = i\n        elif i == 3:\n            third = i\n        elif i == 4:\n            fourth = i\n        elif i == 5:\n            fifth = i\n        elif i == 6:\n            sixth = i\n        elif i == 7:\n            seventh = i\n        elif i == 8:\n            eighth = i\n        elif i == 9:\n            ninth = i\n    return first, second, third, fourth, fifth, sixth, seventh, eighth, ninth\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Your code here\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 6\n    if n==5:\n        return 15\n    if n==6:\n        return 32\n    if n==7:\n        return 49\n    if n==8:\n        return 64\n    if n==9:\n        return 81\n    if n==10:\n        return 100\n    if n==11:\n        return 121\n    if n==12:\n        return 144\n    if n==13:\n        return 169\n    if n==14:\n        return 196\n    if n==15:\n        return 225\n    if n==16:\n        return 256\n    if n==17:\n        return 329\n    if n==18:\n        return 342\n    if n==19:\n        return 441\n    if n==20:\n        return 552\n    if n==21:\n        return 651\n    if n==22:\n        return 727\n    if n==23:\n        return 873\n    if n==24:\n        return 991\n    if n==25:\n        return 1069\n    if n==26:\n        return 1171\n    if n==27:\n        return 1251\n    if n==28:\n        return 1361\n    if n==29:\n        return 1473\n    if n==30:\n        return 1581\n    if n==31:\n        return 1673\n    if n==32:\n        return 1789\n    if n==33:\n        return 1871\n    if n==34:\n        return 1925\n    if n==35:\n        return 2083\n    if n==36:\n        return 2113\n    if n==37:\n        return 2147\n    if n==38:\n        return 2217\n    if n==39:\n        return 2333\n    if n==40:\n        return 2473\n    if n==41:\n        return 2581\n    if n==42:\n        return 2633\n    if n==43:\n        return 2711\n    if n==44:\n        return 2837\n    if n==45:\n        return 2973\n    if n==46:\n        return 3061\n    if n==47:\n        return 3201\n    if n==48:\n        return 3451\n    if n==49:\n        return 3677\n    if n==50:\n        return 3743\n    if n==51:\n        return 3873\n    if n==52:\n        return 3943\n    if n==53:\n        return 4171\n    if n==54:\n        return 4461\n    if n==55:\n        return 4567\n    if n==56:\n        return 4761\n    if n==57:\n        return 4943\n    if n==58:\n        return 5063\n    if n==59:\n        return 5141\n    if n==60:\n        return 5661\n    if n==61:\n        return 5631\n    if n==62:\n        return 5793\n    if n==63:\n        return 6381\n    if n==64:\n        return 6643\n    if n==65:\n        return 6701\n    if n==66:\n        return 6753\n    if n==67:\n        return 6901\n    if n==68:\n        return 7023\n    if n==69:\n        return 7041\n    if n==70:\n        return 7073\n    if n==71:\n        return 7141\n    if n==72:\n        return 7331\n    if n==73:\n        return 7491\n    if n==74:\n        return 7643\n    if n==75:\n        return 7651\n    if n==76:\n        return 7701\n    if n==77:\n        return 7751\n    if n==78:\n        return 7901\n    if n==79:\n        return 7951\n    if n==80:\n        return 8031\n    if n==81:\n        return 8027\n    if n==82:\n        return 8041\n    if n==83:\n        return 8063\n    if n==84:\n        return 8133\n    if n==85:\n        return 8201\n    if n==86:\n        return 8251\n    if n==87:\n        return 8273\n    if n==88:\n        return 8351\n    if n==89:\n        return 8461\n    if n==90:\n        return 8563\n    if n==91:\n        return 8671\n    if n==92:\n        return 8781\n    if n==93:\n        return 8803\n    if n==94:\n        return 8891\n    if n==95:\n        return 8971\n    if n==96:\n        return 8951\n    if n==97:\n        return 8973\n    if n==98:\n        return 8993\n    if n==99:\n        return 9001\n    if n==100:\n        return 9007\n    if n==101:\n        return 9019\n    if n==102:\n        return 9031\n    if n==103:\n        return 9037\n    if n==104:\n        return 9041\n    if n==105:\n        return 9049\n    if n==106:\n        return 9063\n    if n==107:\n        return 9099\n    if n==108:\n        return 9109\n    if n==109:\n        return 9121\n    if n==110:\n        return 9143\n    if n==111:\n        return 9169\n    if n==112:\n        return 9181\n    if n==113:\n        return 9203\n    if n==114:\n        return 9237\n    if n==115:\n        return 9251\n    if n==116:\n        return 9277\n    if n==117:\n        return 9309\n    if n==118:\n        return 9311\n    if n==119:\n        return 9317\n    if n==120:\n        return 9341\n    if n==121:\n        return 9451\n    if n==122:\n        return 9497\n    if n==123:\n        return 9599\n    if n==124:\n        return 9609\n    if n==125:\n        return 9611\n    if n==126:\n        return 9621\n    if n==127:\n        return 9643\n    if n==128:\n        return 9699\n    if n==129:\n        return 9701\n    if n==130:\n        return 9703\n    if n==131:\n        return 9751\n    if n==132:\n        return 9791\n    if n==133:\n        return 9803\n    if n==134:\n        return 9801\n    if n==135:\n        return 9811\n    if n==136:\n        return 9819\n    if n==137:\n        return 9831\n    if n==138:\n        return 9841\n    if n==139:\n        return 9849\n    if n==140:\n        return 9861\n    if n==141:\n        return 9873\n    if n==142:\n        return 9879\n    if n==143:\n        return 9891\n    if n==144:\n        return 9901\n    if n==145:\n        return 9911\n    if n==146:\n        return 9923\n    if n==147:\n        return 9941\n    if n==148:\n        return 9951\n    if n==149:\n        return 9971\n    if n==150:\n        return 9983\n    if n==151:\n        return 10001\n    if n==152:\n        return 10011\n    if n==153:\n        return 10021\n    if n==154:\n        return 10041\n    if n==155:\n        return 10051\n    if n==156:\n        return 10071\n    if n==157:\n        return 10081\n    if n==158:\n        return 10091\n    if n==159:\n        return 10103\n    if n==160:\n        return 10111\n    if n==161:\n        return 10121\n    if n==162:\n        return 10141\n    if n==163:\n        return 10151\n    if n==164:\n        return 10171\n    if n==165:\n        return 10183\n    if n==166:\n        return 10199\n    if n==167:\n        return 10201\n    if n==168:\n        return 10203\n    if n==16"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 10)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += i\n        if result == n: \n            return i\n    return None\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if (n == 1):\n        return 1\n    elif (n == 2):\n        return 1\n    elif (n == 3):\n        return 2\n    elif (n == 4):\n        return 4\n    elif (n == 5):\n        return 8\n    elif (n == 6):\n        return 6\n    elif (n == 7):\n        return 9\n    elif (n == 8):\n        return 7\n    elif (n == 9):\n        return 7\n    elif (n == 10):\n        return 8\n    elif (n == 11):\n        return 9\n    elif (n == 12):\n        return 11\n    elif (n == 13):\n        return 14\n    elif (n == 14):\n        return 15\n    elif (n == 15):\n        return 16\n    elif (n == 16):\n        return 17\n    elif (n == 17):\n        return 18\n    elif (n == 18):\n        return 19\n    elif (n == 19):\n        return 20\n    elif (n == 20):\n        return 21\n    elif (n == 21):\n        return 22\n    elif (n == 22):\n        return 23\n    elif (n == 23):\n        return 24\n    elif (n == 24):\n        return 25\n    elif (n == 25):\n        return 26\n    elif (n == 26):\n        return 27\n    elif (n == 27):\n        return 28\n    elif (n == 28):\n        return 29\n    elif (n == 29):\n        return 30\n    elif (n == 30):\n        return 31\n    elif (n == 31):\n        return 32\n    elif (n == 32):\n        return 33\n    elif (n == 33):\n        return 34\n    elif (n == 34):\n        return 35\n    elif (n == 35):\n        return 36\n    elif (n == 36):\n        return 37\n    elif (n == 37):\n        return 38\n    elif (n == 38):\n        return 39\n    elif (n == 39):\n        return 40\n    elif (n == 40):\n        return 41\n    elif (n == 41):\n        return 42\n    elif (n == 42):\n        return 43\n    elif (n == 43):\n        return 44\n    elif (n == 44):\n        return 45\n    elif (n == 45):\n        return 46\n    elif (n == 46):\n        return 47\n    elif (n == 47):\n        return 48\n    elif (n == 48):\n        return 49\n    elif (n == 49):\n        return 50\n    elif (n == 50):\n        return 51\n    elif (n == 51):\n        return 52\n    elif (n == 52):\n        return 53\n    elif (n == 53):\n        return 54\n    elif (n == 54):\n        return 55\n    elif (n == 55):\n        return 56\n    elif (n == 56):\n        return 57\n    elif (n == 57):\n        return 58\n    elif (n == 58):\n        return 59\n    elif (n == 59):\n        return 60\n    elif (n == 60):\n        return 61\n    elif (n == 61):\n        return 62\n    elif (n == 62):\n        return 63\n    elif (n == 63):\n        return 64\n    elif (n == 64):\n        return 65\n    elif (n == 65):\n        return 66\n    elif (n == 66):\n        return 67\n    elif (n == 67):\n        return 68\n    elif (n == 68):\n        return 69\n    elif (n == 69):\n        return 70\n    elif (n == 70):\n        return 71\n    elif (n == 71):\n        return 72\n    elif (n == 72):\n        return 73\n    elif (n == 73):\n        return 74\n    elif (n == 74):\n        return 75\n    elif (n == 75):\n        return 76\n    elif (n == 76):\n        return 77\n    elif (n == 77):\n        return 78\n    elif (n == 78):\n        return 79\n    elif (n == 79):\n        return 80\n    elif (n == 80):\n        return 81\n    elif (n == 81):\n        return 82\n    elif (n == 82):\n        return 83\n    elif (n == 83):\n        return 84\n    elif (n == 84):\n        return 85\n    elif (n == 85):\n        return 86\n    elif (n == 86):\n        return 87\n    elif (n == 87):\n        return 88\n    elif (n == 88):\n        return 89\n    elif (n == 89):\n        return 90\n    elif (n == 90):\n        return 91\n    elif (n == 91):\n        return 92\n    elif (n == 92):\n        return 93\n    elif (n == 93):\n        return 94\n    elif (n == 94):\n        return 95\n    elif (n == 95):\n        return 96\n    elif (n == 96):\n        return 97\n    elif (n == 97):\n        return 98\n    elif (n == 98):\n        return 99\n    elif (n == 99):\n        return 100\n    elif (n == 100):\n        return 101\n    elif (n == 101):\n        return 102\n    elif (n == 102):\n        return 103\n    elif (n == 103):\n        return 104\n    elif (n == 104):\n        return 105\n    elif (n == 105):\n        return 106\n    elif (n == 106):\n        return 107\n    elif (n == 107):\n        return 108\n    elif (n == 108):\n        return 109\n    elif (n == 109):\n        return 110\n    elif (n == 110):\n        return 111\n    elif (n == 111):\n        return 112\n    elif (n == 112):\n        return 113\n    elif (n == 113):\n        return 114\n    elif (n == 114):\n        return 115\n    elif (n == 115):\n        return 116\n    elif (n == 116):\n        return 117\n    elif (n == 117):\n        return 118\n    elif (n == 118):\n        return 119\n    elif (n == 119):\n        return 120\n    elif (n == 120):\n        return 121\n    elif (n == 121):\n        return 122\n    elif (n == 122):\n        return 123\n    elif (n == 123):\n        return 124\n    elif (n == 124):\n        return 125\n    elif (n == 125):\n        return 126\n    elif (n == 126):\n        return 127\n    elif (n == 127):\n        return 128\n    elif (n == 128):\n        return 129\n    elif (n == 129):\n        return 130\n    elif (n == 130):\n        return 131\n    elif (n == 131):\n        return 132\n    elif (n == 132):\n        return 133\n    elif (n == 133):\n        return 134\n    elif (n == 134):\n        return 135\n    elif (n == 135):\n        return 136\n    elif (n == 136):\n        return 137\n    elif (n == 137):\n        return 138\n    elif (n == 138):\n        return 139\n    elif (n == 139):\n        return 140\n    elif (n == 140):\n        return 141\n    elif (n == 141):\n        return 142\n    elif (n == 142):\n        return 143\n    elif (n == 143):\n        return 144\n    elif (n == 144):\n        return 145\n    elif (n == 145):\n        return 146\n    elif (n == 146):\n        return 147\n    elif (n == 147):\n        return 148\n    elif (n == 148):\n        return 149\n    elif (n == 149):\n        return 150\n    elif (n == 150):\n        return 151\n    elif (n == 151):\n        return 152\n    elif (n == 152):\n        return 153\n    elif (n == 153):\n        return 154\n    elif (n == 154):\n        return 155\n    elif (n == 155):\n        return 156"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    if n < 2: \n        raise ValueError('n must be >= 2') \n    if n <= 10: \n        return n \n    if n > 10: \n        return n % 10\n    return (n - 1) % 10 + find_lucas(n - 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    numeros = []\n    for i in range(1, 10):\n        numeros.append(i)\n    for i in range(2, n+1):\n        t = i\n        while t in numeros:\n            t = (t + i) % 10\n        numeros.append(t)\n    return numeros[n]\n    "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for i in list_:\n        i.format = i.format.replace('{',string)\n        i.format = i.format.replace('}',string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = string.replace(\"{\", \"\").replace(\"}\", \"\").replace(\"\\n\", \"\")\n        if i!= \"\":\n            i = i.replace(\", \", \"\")\n            if i!= \"\":\n                if '\"' not in i:\n                    i = i.replace('\"', \"\")\n                elif '\"' in i:\n                    i = i.replace('\"', '\\\\\"')\n                i = i.replace('\\n', \"\")\n                i = i.replace('\\r', \"\")\n                i = i.replace('\\t', \"\")\n                i = i.replace('\\b', \"\")\n                i = i.replace('\\f', \"\")\n                i = i.replace('\\v', \"\")\n                i = i.replace('\\\\', \"\")\n                i = i.replace('[', \"\").replace(']', \"\").replace('{', \"\").replace('}', \"\").replace('\\n', \"\")\n                i = i.replace('\\'', \"\").replace('\"', \"\").replace('<', \"\").replace('>', \"\")\n                i = i.replace('[', \"\").replace(']', \"\").replace('{', \"\").replace('}', \"\").replace('\\n', \"\")\n                i = i.replace('\\u00A0', \"\").replace('\\u200B', \"\").replace('\\u200C', \"\").replace('\\u200D', \"\")\n                i = i.replace('&quot;', \"\").replace('&amp;', \"\").replace('&apos;', \"'\")\n                i = i.replace('&gt;', \"\").replace('&lt;', \"\").replace('&middot;', \"\")\n                i = i.replace('&#34;', \"\").replace('&#38;', \"\").replace('&#8217;', \"\").replace('&#8230;', \"\")\n                i = i.replace('&#8211;', \"\").replace('&#8216;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8216;', \"\").replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\")\n                i = i.replace('&#8230;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8214;', \"\").replace('&#8210;', \"\").replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8216;', \"\").replace('&#8217;', \"\").replace('&#8220;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8214;', \"\").replace('&#8210;', \"\").replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8212;', \"\").replace('&#8213;', \"\").replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8214;', \"\").replace('&#8210;', \"\").replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8216;', \"\").replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8212;', \"\").replace('&#8213;', \"\").replace('&#8214;', \"\").replace('&#8210;', \"\").replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8211;', \"\").replace('&#8216;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8220;', \"\").replace('&#8211;', \"\").replace('&#8212;', \"\").replace('&#8213;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8217;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8217;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\").replace('&#8220;', \"\")\n                i = i.replace('&#8220;', \"\").replace('&#8220;', \"\")"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_.append(element.format(string))\n    \ndef add_string2(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = element.format(string)\n        list_.append(element)\n    \ndef get_user_input():\n    '''\n    Prompt user for a list of numbers.\n    '''\n    \n    list_ = []\n    \n    while True:\n        try:\n            user_input = int(input('Enter numbers separated by spaces: '))\n            break\n        except ValueError:\n            print('Only integers allowed.')\n            continue\n        \n    for i in user_input:\n        list_.append(i)\n    \n    return list_\n    \n    \ndef get_user_string(input_list):\n    '''\n    Prompt user for a list of strings separated by spaces.\n    '''\n    \n    while True:\n        try:\n            string = input('Enter strings separated by spaces: ')\n            break\n        except ValueError:\n            print('Only strings allowed.')\n            continue\n    \n    for i in string:\n        input_list.append(i)\n    \n    return input_list\n    \n    \ndef main():\n    '''\n    The main program function that prompts the user to enter their\n    numbers, the format string, and how many items to add.\n    '''\n    \n    add_list = []\n    \n    list_ = get_user_input()\n    \n    list_ = get_user_string(list_)\n    \n    add_string(add_list,''.join(list_))\n    \n    print('Items added:')\n    \n    for item in add_list:\n        print(item)\n        \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = i.replace(string, \"\\\\\")\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string_list = list()\n    for elem in list_:\n        string_list.append(str(elem) + ':'+ str(elem))\n    return string.format(string=string_list)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = string.format(element)\n        list_.append(element)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Create list of chars\n    list_ = [char for char in string]\n    \n    # Create loop to iterate through each char\n    for index, char in enumerate(list_):\n        # Perform element iteration and update list\n        list_[index] = list(str(char))\n        \n    # Return list\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace('{','').replace('}','').replace('\\n','').replace('\\t','')\n        list_[i] = list_[i].replace(' ', '_').lower().replace('_','')\n        list_[i] = list_[i].replace('\"','').replace('\\'','').replace('\\'','')\n        list_[i] = list_[i].replace('\\r','')\n        list_[i] = list_[i].replace('\\n','')\n        list_[i] = list_[i].replace('\\t','')\n        list_[i] = list_[i].replace('  ','')\n        list_[i] = list_[i].replace(' ', '_').lower().replace('_','')\n        list_[i] = list_[i].replace('\\n','')\n        list_[i] = list_[i].replace('\\t','')\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    list_ = list(list_)\n    for element in list_:\n        result.append(str(element).replace(\"'\", '\"'))\n    return \"\".join(result)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l3 = dict(l3)\n    l1.sort()\n    l2.sort()\n    l3['_id'] = len(l3)\n    l3['_key'] = len(l3)\n    l3['_value'] = len(l3)\n    l3['id'] = len(l3)\n    l3['key'] = len(l3)\n    l3['value'] = len(l3)\n    for i in range(len(l1)):\n        l3[l1[i]] = l2[i]\n    return l3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] in result.keys():\n            result[l1[i]] = result[l1[i]] + [l2[i]]\n        else:\n            result[l1[i]] = [l2[i]]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    list1 = l1.split(\" \")\n    list2 = l2.split(\" \")\n    list3 = l3.split(\" \")\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Check type of the argument\n    if isinstance(l1, list):\n        # We need to convert the first list\n        # it is an array (l1)\n        if len(l1) == 1:\n            # Check if it is an array\n            # and if it is an empty list\n            # we do not need to convert it\n            if not isinstance(l1[0], list):\n                l1 = [l1]\n            # We need to convert the first list\n            # to an array\n            l1 = [item for sublist in l1 for item in sublist]\n            # We are using get()\n            # to return an array of the\n            # same size as the first\n            # list\n        # We need to convert the second list\n        # to an array\n        else:\n            if not isinstance(l2, list):\n                l2 = [l2]\n            # We need to convert the second list\n            # to an array\n            l2 = [item for sublist in l2 for item in sublist]\n            # We are using get()\n            # to return an array of the\n            # same size as the first\n            # list\n    # Check type of the argument\n    if isinstance(l2, dict):\n        # We need to convert the second list\n        # to an array\n        if not isinstance(l2[l3], dict):\n            l2 = {l3:l2}\n        # We need to convert the second list\n        # to an array\n        l2 = {key:value for sublist in l2[l3] for key, value in sublist.items()}\n    return l1, l2, l3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Collect the list from the user\n    l1_list = []\n    for l in l1:\n        l1_list.append(l.strip())\n    # Collect the list from the user\n    l2_list = []\n    for l in l2:\n        l2_list.append(l.strip())\n    # Collect the list from the user\n    l3_list = []\n    for l in l3:\n        l3_list.append(l.strip())\n    # Create an empty dictionary\n    d = {}\n    # Loop through the list to convert the list to dictionary\n    for l in range(len(l1_list)):\n        # Iterate through the list and transform the string to dictionary\n        d[l1_list[l]] = l3_list[l]\n    # Create a new dictionary with the nested dictionary\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    import itertools\n    return dict(zip(l1, itertools.chain.from_iterable(l2)))\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    dictionary = {}\n    for element in l1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    for element in l2:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    for element in l3:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_d = {}\n    for i in l1:\n        for j in l2:\n            new_d[i] = j\n    for i in l3:\n        new_d[i] = l3[i]\n    return new_d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {l1[i][1]: l3[i] for i in range(len(l1))}\n    d2 = {l2[i][1]: l3[i] for i in range(len(l2))}\n    d3 = {l2[i][1]: l3[i] for i in range(len(l2))}\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    if len(l1) < len(l2):\n        for i in range(0, len(l1)):\n            dictionary.update({l1[i]:l2[i]})\n    elif len(l1) < len(l2):\n        for i in range(0, len(l2)):\n            dictionary.update({l2[i]:l1[i]})\n    return dictionary\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return max(get_max_sum(n//2),get_max_sum(n//3),get_max_sum(n//4),get_max_sum(n//5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return (n//i)\n        i += 2\n    return 0\n    \ndef solve (n):\n    \"\"\"\n    Return a list of coefficients in the form [x, y,..., z]\n    such that z = n +/- f(x).\n    \"\"\"\n    coeffs = []\n    while True:\n        if n == 1:\n            return coeffs\n        elif get_max_sum(n) == n:\n            return coeffs\n        elif n > get_max_sum(n):\n            break\n        else:\n            n += 1\n    return coeffs\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return -1\n    elif n == 1:\n        return n\n    elif n == 2:\n        return n*2\n    elif n == 3:\n        return n*3\n    elif n == 4:\n        return n*4\n    elif n == 5:\n        return n*5\n    elif n == 6:\n        return n*6\n    elif n == 7:\n        return n*7\n    elif n == 8:\n        return n*8\n    elif n == 9:\n        return n*9\n    elif n == 10:\n        return n*10\n    elif n == 11:\n        return n*11\n    elif n == 12:\n        return n*12\n    elif n == 13:\n        return n*13\n    elif n == 14:\n        return n*14\n    elif n == 15:\n        return n*15\n    elif n == 16:\n        return n*16\n    elif n == 17:\n        return n*17\n    elif n == 18:\n        return n*18\n    elif n == 19:\n        return n*19\n    elif n == 20:\n        return n*20\n    elif n == 21:\n        return n*21\n    elif n == 22:\n        return n*22\n    elif n == 23:\n        return n*23\n    elif n == 24:\n        return n*24\n    elif n == 25:\n        return n*25\n    elif n == 26:\n        return n*26\n    elif n == 27:\n        return n*27\n    elif n == 28:\n        return n*28\n    elif n == 29:\n        return n*29\n    elif n == 30:\n        return n*30\n    elif n == 31:\n        return n*31\n    elif n == 32:\n        return n*32\n    elif n == 33:\n        return n*33\n    elif n == 34:\n        return n*34\n    elif n == 35:\n        return n*35\n    elif n == 36:\n        return n*36\n    elif n == 37:\n        return n*37\n    elif n == 38:\n        return n*38\n    elif n == 39:\n        return n*39\n    elif n == 40:\n        return n*40\n    elif n == 41:\n        return n*41\n    elif n == 42:\n        return n*42\n    elif n == 43:\n        return n*43\n    elif n == 44:\n        return n*44\n    elif n == 45:\n        return n*45\n    elif n == 46:\n        return n*46\n    elif n == 47:\n        return n*47\n    elif n == 48:\n        return n*48\n    elif n == 49:\n        return n*49\n    elif n == 50:\n        return n*50\n    elif n == 51:\n        return n*51\n    elif n == 52:\n        return n*52\n    elif n == 53:\n        return n*53\n    elif n == 54:\n        return n*54\n    elif n == 55:\n        return n*55\n    elif n == 56:\n        return n*56\n    elif n == 57:\n        return n*57\n    elif n == 58:\n        return n*58\n    elif n == 59:\n        return n*59\n    elif n == 60:\n        return n*60\n    elif n == 61:\n        return n*61\n    elif n == 62:\n        return n*62\n    elif n == 63:\n        return n*63\n    elif n == 64:\n        return n*64\n    elif n == 65:\n        return n*65\n    elif n == 66:\n        return n*66\n    elif n == 67:\n        return n*67\n    elif n == 68:\n        return n*68\n    elif n == 69:\n        return n*69\n    elif n == 70:\n        return n*70\n    elif n == 71:\n        return n*71\n    elif n == 72:\n        return n*72\n    elif n == 73:\n        return n*73\n    elif n == 74:\n        return n*74\n    elif n == 75:\n        return n*75\n    elif n == 76:\n        return n*76\n    elif n == 77:\n        return n*77\n    elif n == 78:\n        return n*78\n    elif n == 79:\n        return n*79\n    elif n == 80:\n        return n*80\n    elif n == 81:\n        return n*81\n    elif n == 82:\n        return n*82\n    elif n == 83:\n        return n*83\n    elif n == 84:\n        return n*84\n    elif n == 85:\n        return n*85\n    elif n == 86:\n        return n*86\n    elif n == 87:\n        return n*87\n    elif n == 88:\n        return n*88\n    elif n == 89:\n        return n*89\n    elif n == 90:\n        return n*90\n    elif n == 91:\n        return n*91\n    elif n == 92:\n        return n*92\n    elif n == 93:\n        return n*93\n    elif n == 94:\n        return n*94\n    elif n == 95:\n        return n*95\n    elif n == 96:\n        return n*96\n    elif n == 97:\n        return n*97\n    elif n == 98:\n        return n*98\n    elif n == 99:\n        return n*99\n    elif n == 100:\n        return n*100\n    elif n == 101:\n        return n*101\n    elif n == 102:\n        return n*102\n    elif n == 103:\n        return n*103\n    elif n == 104:\n        return n*104\n    elif n == 105:\n        return n*105\n    elif n == 106:\n        return n*106\n    elif n == 107:\n        return n*107\n    elif n == 108:\n        return n*108\n    elif n == 109:\n        return n*109\n    elif n == 110:\n        return n*110\n    elif n == 111:\n        return n*111\n    elif n == 112:\n        return n*112\n    elif n == 113:\n        return n*113\n    elif n == 114:\n        return n*114\n    elif n == 115:\n        return n*115\n    elif n == 116:\n        return n*116\n    elif n == 117:\n        return n*117\n    elif n == 118:\n        return n*118\n    elif n == 119:\n        return n*119\n    elif n == 120:\n        return n*120\n    elif n == 121:\n        return n*121\n    elif n == 122:\n        return n*122\n    elif n == 123:\n        return n*123\n    elif n == 124:\n        return n*124\n    elif n == 125:\n        return n*125\n    elif n == 126:\n        return n*126\n    elif n == 127:\n        return n*127\n    elif n == 128:\n        return n*128\n    elif n == 129:\n        return n*129\n    elif n == 130:\n        return n*130\n    elif n == 131:\n        return n*131\n    elif n == 132:\n        return n*132\n    elif n == 133:\n        return n*133\n    elif n == 134:\n        return n*134\n    elif n == 135:\n        return n*135\n    elif n == 136:\n        return n*136\n    elif n == 137:\n        return n*137\n    elif n == 138:\n        return n*138\n    elif n == 139:\n        return n*139\n    elif n == 140:\n        return n*140\n    elif n == 141"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n):\n        max_sum += (n-i) * f(n-i)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #Implement the equation \n    def f(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 4\n        elif n == 3:\n            return 8\n        elif n == 4:\n            return 16\n        elif n == 5:\n            return 20\n        else:\n            return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n        \n    #Check if the given n is a perfect square \n    def isPerfect(n):\n        return n == int(math.sqrt(n))\n    \n    #if n is a perfect square\n    if isPerfect(n):\n        return f(n)\n    \n    #if n is not a perfect square\n    else:\n        return -1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f_n = lambda n: (f(n/2), f(n/3), f(n/4), f(n/5))\n    \n    return max(f_n(n)[0] + f_n(n)[1] + f_n(n)[2] + f_n(n)[3], n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    s = 0\n    for x in range (2, n+1):\n        s += (f(x) + f(x/2) + f(x/3) + f(x/4) + f(x/5)) * x\n    return s\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 2\n    elif n == 6:\n        return 6\n    elif n > 6:\n        return 6\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max_length=0\n    for i in input_list:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    result = max(input_list)\n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(0,len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return []\n    elif len(input_list) == 1:\n        return input_list\n    elif len(input_list) == 2:\n        return max(input_list)\n    else:\n        return max(input_list[0], input_list[1])\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list)\n    for x in input_list:\n        if len(x) > max_length:\n            max_length = len(x)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Write your code here\n    if input_list == None:\n        return None\n    if len(input_list) == 1:\n        return input_list\n    if len(input_list) == 2:\n        if input_list[0] > input_list[1]:\n            return input_list\n        else:\n            return [input_list[0],input_list[1]]\n    if len(input_list) == 3:\n        if input_list[0] > input_list[1] > input_list[2]:\n            return input_list\n        elif input_list[0] > input_list[2] > input_list[1]:\n            return [input_list[0],input_list[1],input_list[2]]\n        else:\n            return [input_list[0],input_list[1],input_list[2]]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return []\n    \n    return max(input_list, key = lambda x: len(x))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            print(\"True\")\n        else:\n            print(\"False\")\n            exit()\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    flag = True\n    if len(test_tup) == len(set(test_tup)):\n        print(\"True\")\n        flag = False\n    else:\n        print(\"False\")\n    return flag\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # TODO: Write a function that will take in a tuple as input and return True if the tuple has no duplicates, else return False\n    test_list = tuple(test_tup)\n    for x in test_list:\n        if test_list.count(x) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    return len(new_tup) == len(set(new_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # TODO: Your code here\n    #check if any of the values is not unique and return false if found, true if found\n    \n    check = 0\n    for i in test_tup:\n        if i in test_tup:\n            check += 1\n    return check == 1\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    first = test_tup[0]\n    last = test_tup[-1]\n    return (first, last) not in tuple_list\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i]:\n            count += 1\n        elif count > 0:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #Initialize a list of tuples, which will be used to check for duplicate entries\n    tuples = []\n    #Loop through all the tuples in the test_tup list\n    for each in test_tup:\n        #If any value in the tuple is not the same as the given value, add that value to the list.\n        if each[0]!= test_tup[0]:\n            tuples.append(each)\n    #If there are no duplicates, return True\n    if len(tuples) == 0:\n        return True\n    #If there are duplicates, return False\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = []\n    for i in test_tup:\n        if i not in distinct:\n            distinct.append(i)\n    return len(distinct) == 0\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return int(str1[0])\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the characters in the string.\n    str_dict = {}\n    # Loop through each char in string.\n    for char in str1:\n        # If char is not present in dictionary add it to dictionary.\n        if char not in str_dict:\n            str_dict[char] = 0\n        # If char is present in dictionary add its count to a variable.\n        str_dict[char] += 1\n    # If a char is not present in the dictionary print the character, else return -1.\n    for char in str_dict:\n        if str_dict[char] == 1:\n            return char\n    # Otherwise return -1.\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dic = {}\n    for i in str1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    \n    for i in dic:\n        if dic[i] == 1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # the first character in the string\n    first = str1[0]\n    \n    # the characters in the string\n    first_char = set()\n    \n    # this is the looping process\n    for i in range(len(str1)):\n        # the first character\n        if str1[i] not in first_char:\n            first_char.add(str1[i])\n        # the characters\n        else:\n            first_char.remove(str1[i])\n            \n    # the total number of characters in the string\n    count = len(first_char)\n    \n    # the first character\n    if count == 0:\n        return 'Null'\n    else:\n        return first\n        "
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet_len = len(alphabet)\n    count = 0\n    for char in str1:\n        if char not in alphabet:\n            count += 1\n    if count == alphabet_len:\n        return char\n    else:\n        return 'x'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    # pass\n    for char in str1:\n        if str1.count(char)==1:\n            return char\n    return ''\nprint(first_non_repeating_character(\"geeks\"))"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i not in dict1:\n            dict1[i] = 0\n        dict1[i] += 1\n    lst = []\n    for key, value in dict1.items():\n        if value == 1:\n            lst.append(key)\n    return lst[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    def char_finder(str1):\n        for i in range(0,len(str1)):\n            if str1[i]==str1[i-1]:\n                continue\n            else:\n                return i\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Remove the spaces and punctuation marks.\n    str1 = str1.replace(' ', '').lower().replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\f', '')\n    # Create an empty dictionary for the results.\n    unique_letters = {}\n    # Initialize the loop to iterate through each element in the string.\n    for x in str1:\n        # Initialize the value for the key.\n        value = x\n        # If the current value is not in the dictionary, add it to the dictionary.\n        if value not in unique_letters:\n            unique_letters[value] = 1\n        # If it is, increment the count by 1.\n        else:\n            unique_letters[value] += 1\n    # Find the key with the highest count value.\n    return max(unique_letters, key=unique_letters.get)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # brute force approach\n    for i in range(len(str1)):\n        if str1[i] == str1[i]:\n            return str1[i]\n    return \"None\"\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]==string[-1]:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0:2] == string[-2:]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string ==''): return False\n    if(string == ''): return False\n    if(len(string)!= 1): return False\n    if(string[0] == string[-1]): return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex,string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string:\n        return False\n    for i in string:\n        if i == string[0]:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not(re.match(regex, string)):\n        return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string == \"\":\n        return True\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    for i in range(3):\n        try:\n            num1 = a[i]\n            for j in range(i, 3):\n                num2 = b[j]\n                for k in range(j, 3):\n                    num3 = c[k]\n                    lst1.append(num1)\n                    lst2.append(num2)\n                    lst3.append(num3)\n        except:\n            pass\n    \n    if lst1:\n        if len(lst1) % 3 == 0:\n            return (sum(lst1)/len(lst1), sum(lst2)/len(lst2), sum(lst3)/len(lst3))\n        elif len(lst1) % 3!= 0:\n            return (sum(lst1)/len(lst1), sum(lst2)/len(lst2), sum(lst3)/len(lst3))\n    else:\n        return(0,0,0)\n    \ndef mode(a):\n    '''\n    Write a function to find the mode of a number.\n    '''\n    lst = []\n    for i in range(len(a)):\n        lst.append(a[i])\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    for i in range(len(lst)):\n        try:\n            num = a[i]\n            for j in range(i, len(lst)):\n                num2 = a[j]\n                for k in range(j, len(lst)):\n                    num3 = a[k]\n                    if num == num2 and num == num3:\n                        lst1.append(num)\n                    elif num == num2 or num == num3:\n                        lst2.append(num)\n                    elif num == num2 or num == num3:\n                        lst3.append(num)\n        except:\n            pass\n    if lst1:\n        return(sum(lst1)/len(lst1))\n    else:\n        return(0)\n    \ndef first(a):\n    '''\n    Write a function to find the first number.\n    '''\n    lst = []\n    for i in range(len(a)):\n        lst.append(a[i])\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    for i in range(len(lst)):\n        try:\n            num = a[i]\n            for j in range(i, len(lst)):\n                num2 = a[j]\n                for k in range(j, len(lst)):\n                    num3 = a[k]\n                    if num == num2 and num == num3:\n                        lst1.append(num)\n                    elif num == num2 or num == num3:\n                        lst2.append(num)\n                    elif num == num2 or num == num3:\n                        lst3.append(num)\n        except:\n            pass\n    if lst1:\n        return(lst1[0])\n    else:\n        return(0)\n    \ndef second(a):\n    '''\n    Write a function to find the second number.\n    '''\n    lst = []\n    for i in range(len(a)):\n        lst.append(a[i])\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    for i in range(len(lst)):\n        try:\n            num = a[i]\n            for j in range(i, len(lst)):\n                num2 = a[j]\n                for k in range(j, len(lst)):\n                    num3 = a[k]\n                    if num == num2 and num == num3:\n                        lst1.append(num)\n                    elif num == num2 or num == num3:\n                        lst2.append(num)\n                    elif num == num2 or num == num3:\n                        lst3.append(num)\n        except:\n            pass\n    if lst1:\n        return(sum(lst1)/len(lst1))\n    else:\n        return(0)\n    \ndef third(a):\n    '''\n    Write a function to find the third number.\n    '''\n    lst = []\n    for i in range(len(a)):\n        lst.append(a[i])\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    for i in range(len(lst)):\n        try:\n            num = a[i]\n            for j in range(i, len(lst)):\n                num2 = a[j]\n                for k in range(j, len(lst)):\n                    num3 = a[k]\n                    if num == num2 and num == num3:\n                        lst1.append(num)\n                    elif num == num2 or num == num3:\n                        lst2.append(num)\n                    elif num == num2 or num == num3:\n                        lst3.append(num)\n        except:\n            pass\n    if lst1:\n        return(sum(lst1)/len(lst1))\n    else:\n        return(0)\n    \ndef four(a):\n    '''\n    Write a function to find the fourth number.\n    '''\n    lst = []\n    for i in range(len(a)):\n        lst.append(a[i])\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    lst4 = []\n    for i in range(len(lst)):\n        try:\n            num = a[i]\n            for j in range(i, len(lst)):\n                num2 = a[j]\n                for k in range(j, len(lst)):\n                    num3 = a[k]\n                    for l in range(k, len(lst)):\n                        num4 = a[l]\n                        if num == num2 and num == num3 and num == num4:\n                            lst1.append(num)\n                        elif num == num2 or num == num3 or num == num4:\n                            lst2.append(num)\n                        elif num == num2 or num == num3 or num == num4:\n                            lst3.append(num)\n                        elif num == num2 or num == num3 or num == num4:\n                            lst4.append(num)\n        except:\n            pass\n    if lst1:\n        return(sum(lst1)/len(lst1))\n    else:\n        return(0)\n    \ndef five(a):\n    '''\n    Write a function to find the fifth number.\n    '''\n    lst = []\n    for i in range(len(a)):\n        lst.append(a[i])\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    lst4 = []\n    lst5 = []\n    for i in range(len(lst)):\n        try:\n            num = a[i]\n            for j in range(i, len(lst)):\n                num2 = a[j]\n                for k in range(j, len(lst)):\n                    num3 = a[k]\n                    for l in range(k, len(lst)):\n                        num4 = a[l]\n                        for m in range(l, len(lst)):\n                            num5 = a[m]\n                            if num == num2 and num == num3 and num == num4 and num == num5:\n                                lst1.append(num)\n                            elif num == num2 or num == num3 or num == num4 or num == num5:\n                                lst2.append(num)\n                            elif num == num2 or num == num3 or num == num4 or num == num5:\n                                lst3.append(num)\n                            elif num == num2 or num == num3 or num == num4 or num == num5:\n                                lst4.append(num)\n                            elif num == num2 or num == num3 or num == num4 or num == num5:\n                                lst5.append(num)\n        excep"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)>0 and len(b)>0 and len(c)>0:\n        return (int(a[len(a)/2]) + int(b[len(b)/2]) + int(c[len(c)/2]))/3\n    else:\n        return None\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a,b,c]\n    num_list.sort()\n    if len(num_list) % 2 == 0:\n        first = num_list[len(num_list)//2]\n        second = num_list[len(num_list)//2-1]\n        third = num_list[(len(num_list)//2)//2]\n    else:\n        first = num_list[(len(num_list)//2)//2]\n        second = num_list[(len(num_list)//2)//2-1]\n        third = num_list[(len(num_list)//2+1)//2]\n    return round(first+second+third,2)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)<3:\n        return None\n    if len(b)<3:\n        return None\n    if len(c)<3:\n        return None\n    a.sort()\n    b.sort()\n    c.sort()\n    if len(a)==1:\n        return a[0]\n    if len(b)==1:\n        return b[0]\n    if len(c)==1:\n        return c[0]\n    return (a[len(a)//2]+b[len(b)//2]+c[len(c)//2])/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==1:\n        return a[0]\n    elif len(a)==2:\n        return sum(a)//2\n    else:\n        return (sum(a) + sum(b) + sum(c))//3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a1=a\n    b1=b\n    c1=c\n    med=median(a,b,c)\n    return med\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # a = [1,2,3,4,5,6,7,8,9]\n    # b = [4,5,6,7,8,9,10,11,12]\n    # c = [2,4,6,8,9,10,11,12,13,14]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    s = sum(a)\n    if s % 2 == 0:\n        return a[int(s/2)]\n    else:\n        return a[int(s/2) - 1]\n    \ndef mean(a):\n    '''\n    Write a function to compute the mean of a sequence.\n    '''\n    if len(a) % 2 == 1:\n        return a[int(len(a)/2)]\n    else:\n        return (a[int(len(a)/2)] + a[int(len(a)/2) - 1])/2\n    \ndef variance(a):\n    '''\n    Write a function to compute the variance of a sequence.\n    '''\n    s = 0\n    for x in a:\n        s += (x - mean(a)) ** 2\n    return s/len(a)\n    \ndef standard_deviation(a):\n    '''\n    Write a function to compute the standard deviation of a sequence.\n    '''\n    s = 0\n    for x in a:\n        s += (x - mean(a)) ** 2\n    s = (s/len(a))**0.5\n    return s\n    \ndef mode(a):\n    '''\n    Write a function to compute the mode of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    return s//len(a)\n    \ndef standard_deviation_of_mode(a):\n    '''\n    Write a function to compute the standard deviation of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    s = (s/len(a))**0.5\n    return s\n    \ndef kurtosis(a):\n    '''\n    Write a function to compute the kurtosis of a sequence.\n    '''\n    s = 0\n    for x in a:\n        s += (x - mean(a)) ** 3\n    s = 3*(s/len(a))**0.5\n    return s\n    \ndef standard_deviation_of_kurtosis(a):\n    '''\n    Write a function to compute the standard deviation of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    s = (s/len(a))**0.5\n    return s\n    \ndef median(a):\n    '''\n    Write a function to compute the median of a sequence.\n    '''\n    s = 0\n    for x in a:\n        s += x\n    return s/len(a)\n    \ndef mode_of_median(a):\n    '''\n    Write a function to compute the mode of the median of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    s = (s/len(a))**0.5\n    return s\n    \ndef sum_of_squares(a):\n    '''\n    Write a function to compute the sum of squared elements of a sequence.\n    '''\n    s = 0\n    for x in a:\n        s += (x - mean(a)) ** 2\n    return s\n    \ndef sum_of_squares_of_mode(a):\n    '''\n    Write a function to compute the sum of squared elements of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    s = (s/len(a))**0.5\n    return s\n    \ndef square_of_sum_of_squares(a):\n    '''\n    Write a function to compute the sum of squared elements of a sequence.\n    '''\n    s = 0\n    for x in a:\n        s += (x - mean(a)) ** 2\n    return s\n    \ndef standard_deviation_of_square_of_sum_of_squares(a):\n    '''\n    Write a function to compute the standard deviation of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    s = (s/len(a))**0.5\n    return s\n    \ndef quantile_range(a, q):\n    '''\n    Write a function to compute the quantile range of a sequence.\n    '''\n    n = len(a)\n    if n % 2 == 0:\n        q1 = a[int(n/2)]\n        q2 = a[int(n/2)-1]\n    else:\n        q1 = a[int(n/2)-1]\n        q2 = a[int(n/2)]\n    return q1, q2\n    \ndef quantile_range_of_mode(a, q):\n    '''\n    Write a function to compute the quantile range of a sequence.\n    '''\n    n = len(a)\n    if n % 2 == 0:\n        q1 = a[int(n/2)]\n        q2 = a[int(n/2)-1]\n    else:\n        q1 = a[int(n/2)-1]\n        q2 = a[int(n/2)]\n    return q1, q2\n    \ndef modes(a):\n    '''\n    Write a function to compute the mode of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += 1\n        else:\n            s += 0\n    return s\n    \ndef median_of_mode(a):\n    '''\n    Write a function to compute the median of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += 1\n        else:\n            s += 0\n    return s/len(a)\n    \ndef mode_of_median(a):\n    '''\n    Write a function to compute the mode of the median of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    return s\n    \ndef sum_of_squares_of_mode(a):\n    '''\n    Write a function to compute the sum of squared elements of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    return s\n    \ndef sum_of_squares_of_mode(a):\n    '''\n    Write a function to compute the sum of squared elements of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    return s\n    \ndef standard_deviation_of_sum_of_squares_of_mode(a):\n    '''\n    Write a function to compute the standard deviation of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    s = (s/len(a))**0.5\n    return s\n    \ndef variance_of_mode(a):\n    '''\n    Write a function to compute the variance of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    s = (s/len(a))**0.5\n    return s\n    \ndef standard_deviation_of_variance_of_mode(a):\n    '''\n    Write a function to compute the standard deviation of a sequence.\n    '''\n    s = 0\n    for x in a:\n        if x % 2 == 0:\n            s += x\n        else:\n            s += 1\n    s = (s/len(a))**0.5\n    return s\n    \ndef kurtosis_of_mode(a):\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and b<c:\n        return (a+b+c)/3\n    elif a<c and c<b:\n        return a\n    elif b<a and a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = (a+b+c)//3\n    if a > b and b > c:\n        if x == 0:\n            return max(a,b,c)\n        elif x == 1:\n            return a\n        elif x == 2:\n            return b\n        else:\n            return c\n    elif a > c and c > b:\n        if x == 0:\n            return max(a,c,b)\n        elif x == 1:\n            return a\n        elif x == 2:\n            return b\n        else:\n            return c\n    elif a > c and b > a:\n        if x == 0:\n            return max(a,c,b)\n        elif x == 1:\n            return a\n        elif x == 2:\n            return b\n        else:\n            return c\n    else:\n        if x == 0:\n            return max(a,b,c)\n        elif x == 1:\n            return a\n        elif x == 2:\n            return b\n        else:\n            return c"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    sum = 0\n    for i in nums:\n        sum += i % 10\n    \n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize the sum\n    sum = 0\n    # iterate through the numbers in the list and add to the sum\n    for num in nums:\n        sum = sum + int(num)\n    # return the sum\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        print(num,num % 10)\n    \nif __name__ == '__main__':\n    nums = [12, 4, 6, 2, 1]\n    sum_of_digits(nums)"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # sum = 0\n    # for i in nums:\n    #     sum += i\n    \n    # return sum\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    "
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_nums = 0\n    for i in range(len(nums)):\n        sum_of_digits_nums += int(nums[i])\n    return sum_of_digits_nums\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    num_list=[]\n    for num in nums:\n        num_list.append(int(num))\n    total=0\n    for i in num_list:\n        total+=i\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result = result + int(nums[i])\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Step 1: Return the sum of the digits of each element in the list\n    # Step 2: Return the sum of digits of the elements in the list separated by each number in the list\n    # Step 3: Return the sum of digits of the elements in the list separated by each number of the list\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += num % 10\n    return s\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    out = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            out.append(test_tup1[i] ^ test_tup2[i])\n    return out\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    for index, item in enumerate(test_tup1):\n        test_tup1[index] = item ^ test_tup2[index]\n    return test_tup1\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    def xor(x):\n        '''\n        Write a function to perform the mathematical bitwise xor operation across the given tuples.\n        '''\n        x = 1\n        for i in x:\n            x = x ^ i\n        return x\n    \n    test_tup1 = (test_tup1[0], test_tup1[1])\n    test_tup2 = (test_tup2[0], test_tup2[1])\n    \n    return (xor(test_tup1), xor(test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_list1 = []\n    test_list2 = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_list1.append(test_tup1[i] ^ test_tup2[i])\n        return test_list1\n    else:\n        print('Error: Inputs should be of equal length!')\n        return -1\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    # iterate through each element of tuples\n    for i in test_tup1:\n        result.append(i[0] ^ i[1])\n    for i in test_tup2:\n        result.append(i[0] ^ i[1])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    def bitwise_xor_tuple(tup):\n        return tuple(map(operator.xor, tup))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert to tuple to return\n    test_tup = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    for i, tup_i in enumerate(test_tup1):\n        test_tup2[i] = tup_i ^ tup_i\n    return test_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # TODO: Complete this function\n    return\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = test_tup1[::-1]\n    test_tup2 = test_tup2[::-1]\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1], test_tup1[2] ^ test_tup2[2], test_tup1[3] ^ test_tup2[3])\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    d = {}\n    for i in test_list:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    print(len(d))\n    return len(d)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = Counter(test_list)\n    freq_dict = dict(freq)\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = {}\n    for each_tuple in test_list:\n        if each_tuple in unique_list:\n            unique_list[each_tuple] += 1\n        else:\n            unique_list[each_tuple] = 1\n    return unique_list\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i][2]:\n            result = result + 1\n    return result\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = set(test_list)\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    print(\"\\nFrequency in test_list: \", end=\"\")\n    for i in range(len(test_list)):\n        if test_list[i] not in freq_list:\n            freq_list.append(test_list[i])\n    print(freq_list)\n    print(\"Total number of unique tuples: \", len(freq_list))\n    print(\"\\n\")\n    return\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # TODO: Use the csv.reader() method to open the file \"test_list.csv\" and assign the file to a variable\n    file = open('test_list.csv', 'r')\n    # Use the csv.DictReader method to assign the variable to a list of dictionaries\n    # The list of dictionaries contains the information on one pair of rows\n    line = file.readline()\n    # Use a for loop to traverse the entire file and get the lines\n    for line in file:\n        # Use the break statement to break out of the for loop\n        # The break statement breaks out of the loop\n        # Break occurs at the end of the file\n        break\n    # Use a for loop to traverse the entire file and get the lines\n    for line in file:\n        # Use the break statement to break out of the for loop\n        # The break statement breaks out of the loop\n        # Break occurs at the end of the file\n        break\n    # Use the csv.DictReader method to assign the variable to a list of dictionaries\n    # The list of dictionaries contains the information on one pair of rows\n    frequencies = []\n    # Use the csv.DictReader method to assign the variable to a list of dictionaries\n    for row in csv.DictReader(file):\n        # Use the for loop to iterate through the rows\n        # The break statement breaks out of the for loop\n        # Break occurs at the end of the file\n        for key, value in row.items():\n            # Use the csv.DictWriter method to write the dictionary to a file\n            # The csv.DictWriter method writes the information to the file\n            frequencies.append({key: value})\n    # Use the csv.writer method to write the information to a file\n    # The csv.writer method writes the information to a file\n    f = open('frequency_list.csv', 'w')\n    for row in frequencies:\n        # Use the csv.writer method to write the dictionary to a file\n        # The csv.DictWriter method writes the information to the file\n        f.write(str(row) + '\\n')\n    f.close()\n    # You should now have a file called frequency_list.csv with all the information\n    # You should now have a file called frequency_list_unique.csv which has the information\n    # You should now have a file called frequency_list_unique_freq.csv which has the frequency information\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def count_unique_tuples(test_list):\n        '''\n        Find the number of unique tuples in the given list.\n        '''\n        \n        # Create a set to store unique tuples.\n        unique_tuples = set()\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # <--- Replace this for your code --->\n    counter = 0\n    for i in test_list:\n        if i[1] not in i[0]:\n            counter += 1\n    print counter\n    # Replace this for your code --->\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get all the indices of the two tuples.\n    indices1 = tuple(test_tup1.keys())\n    indices2 = tuple(test_tup2.keys())\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1_list = []\n    for i in range(len(test_tup1)):\n        tup1_list.append(test_tup1[i])\n    tup2_list = []\n    for i in range(len(test_tup2)):\n        tup2_list.append(test_tup2[i])\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # INPUTS\n    # test_tup1, test_tup2 - Tuples to be added\n    #\n    # OUTPUTS\n    # test_sum - Returns the sum of the tuples\n    #\n    # Examples\n    # add_nested_tuples((1, 2), (3, 4))\n    # Returns\n    # 4\n    # '''\n    # test_tup1 = (1, 2)\n    # test_tup2 = (3, 4)\n    #\n    # #TODO\n    # return sum(tuple(test_tup1 + test_tup2))\n    \n    test_tup1 = test_tup1[0] + test_tup1[1]\n    test_tup2 = test_tup2[0] + test_tup2[1]\n    \n    test_tup = test_tup1 + test_tup2\n    return sum(test_tup)\n    \n    \n    \ndef main():\n    '''\n    Write a function to remove duplicates from a given list of elements.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_of_elems - The list after modification\n    #\n    # Examples\n    # remove_duplicates([1, 2, 3, 2, 2, 2])\n    # Returns\n    # [1, 2, 2, 2, 3]\n    \n    list_of_elems = [1, 2, 2, 3, 3, 3, 3, 3]\n    \n    #TODO\n    return list_of_elems\n    \n    \n    \ndef main2():\n    '''\n    Write a function to find the length of a list.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_length - The number of elements in the list\n    #\n    # Examples\n    # list_length([1, 2, 3])\n    # Returns\n    # 3\n    \n    list_of_elems = [1, 2, 3, 3, 3, 3, 3, 3]\n    \n    #TODO\n    return len(list_of_elems)\n    \n    \n    \ndef main3():\n    '''\n    Write a function that takes a list of numbers as input and returns a new list with even numbers removed.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_of_new_elems - The list after modification\n    #\n    # Examples\n    # remove_evens([1, 2, 3, 4, 5, 6, 7, 8])\n    # Returns\n    # [1, 2, 3, 6, 7]\n    \n    list_of_elems = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    #TODO\n    return list_of_elems[:]\n    \n    \n    \ndef main4():\n    '''\n    Write a function that takes a list of numbers as input and returns a new list with only even numbers.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_of_new_elems - The list after modification\n    #\n    # Examples\n    # remove_evens([1, 2, 3, 4, 5, 6, 7, 8])\n    # Returns\n    # [1, 2, 3, 7]\n    \n    list_of_elems = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    #TODO\n    return list_of_elems[:]\n    \n    \n    \ndef main5():\n    '''\n    Write a function that takes a list of numbers as input and returns a new list with only odd numbers.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_of_new_elems - The list after modification\n    #\n    # Examples\n    # remove_odds([1, 2, 3, 4, 5, 6, 7, 8])\n    # Returns\n    # [1, 2, 3, 6, 7]\n    \n    list_of_elems = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    #TODO\n    return list_of_elems[:]\n    \n    \n    \ndef main6():\n    '''\n    Write a function that takes a list of numbers as input and returns a new list with all elements of the list removed.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_of_new_elems - The list after modification\n    #\n    # Examples\n    # remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8])\n    # Returns\n    # [1, 2, 3, 6, 7]\n    \n    list_of_elems = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    #TODO\n    return list_of_elems[:]\n    \n    \n    \ndef main7():\n    '''\n    Write a function that takes a list of numbers as input and returns a new list with only numbers that are divisible by 3.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_of_new_elems - The list after modification\n    #\n    # Examples\n    # remove_divisible_3([1, 2, 3, 4, 5, 6, 7, 8])\n    # Returns\n    # [1, 2, 6, 7]\n    \n    list_of_elems = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    #TODO\n    return list_of_elems[:]\n    \n    \n    \ndef main8():\n    '''\n    Write a function that takes a list of numbers as input and returns a new list with only numbers that are divisible by 5.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_of_new_elems - The list after modification\n    #\n    # Examples\n    # remove_divisible_5([1, 2, 3, 4, 5, 6, 7, 8])\n    # Returns\n    # [1, 2, 6, 7]\n    \n    list_of_elems = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    #TODO\n    return list_of_elems[:]\n    \n    \n    \ndef main9():\n    '''\n    Write a function that takes a list of numbers as input and returns a new list with only numbers that are divisible by both 1 and 3.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_of_new_elems - The list after modification\n    #\n    # Examples\n    # remove_divisible_both( [1, 2, 3, 4, 5, 6, 7, 8])\n    # Returns\n    # [1, 2, 4, 6, 7]\n    \n    list_of_elems = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    #TODO\n    return list_of_elems[:]\n    \n    \n    \ndef main10():\n    '''\n    Write a function that takes a list of numbers as input and returns a new list with only numbers that are divisible by both 1 and 3.\n    '''\n    # INPUTS\n    # list_of_elems - The list to be modified\n    #\n    # OUTPUTS\n    # list_of_new_elems - The list after modification\n    #\n    # Examples\n    # remove_divisible_both( [1, 2, 3, 4, 5, 6, 7, 8])\n    # Returns\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # your code goes here\n    if len(test_tup1)!= len(test_tup2):\n        return\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        tup1 = test_tup1\n        tup2 = test_tup2\n    else:\n        print(\"Invalid Input\")\n        return \n    if isinstance(tup1, tuple) and isinstance(tup2, tuple):\n        # print(\"tup1=\",tup1)\n        # print(\"tup2=\",tup2)\n        temp = []\n        for i in range(0, len(tup1)):\n            temp.append(tup1[i] + tup2[i])\n            # print(\"temp=\",temp)\n        # print(\"Tup1[i] = \", tup1[i],\" \", tup2[i])\n        # print(\"Temp=\",temp)\n        return tuple(temp)\n    else:\n        print(\"Invalid Input\")\n        return \n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # return the tuple with combined elements\n    def add_tuples(tup1, tup2):\n        '''\n        add_tuples(tup1,tup2)\n        add tuples elementwise in the given two nested tuples\n        '''\n        # return the tuple\n        return tuple(sum(tup) for tup in zip(tup1, tup2))\n    # return the tuple with combined elements\n    return add_tuples(test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples(a,b):\n        tup_a = a\n        tup_b = b\n        tup_a = (tup_a[0][0] + tup_a[1][0] + tup_a[2][0], tup_a[0][1] + tup_a[1][1] + tup_a[2][1])\n        tup_b = (tup_b[0][0] + tup_b[1][0] + tup_b[2][0], tup_b[0][1] + tup_b[1][1] + tup_b[2][1])\n        return tup_a,tup_b\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    return (test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n    \nprint(add_nested_tuples([1, 2, 3], [4, 5, 6]))"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuples(tup):\n        '''\n        Iterate through the tuples and add their elements in a list and return the resulting list.\n        '''\n        new_tup = []\n        for i in range(len(tup)):\n            new_tup.append(tup[i])\n        return new_tup\n    return add_tuples(test_tup1) + add_tuples(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Check if the length of two tuples is same and if both tuples are empty then return an empty tuple\n    if len(test_tup1)!= len(test_tup2):\n        return ()\n    \n    # Check if the tuple has same elements inside and if tuple in tuple has same element or not\n    for i in range(len(test_tup1)):\n        # If elements in two tuples are same\n        if test_tup1[i] == test_tup2[i]:\n            # Increment the counter\n            test_tup1[i] += 1\n        # If element is not same\n        else:\n            # Increment the counter\n            test_tup1[i] += 1\n            # Increment the index by one\n            i += 1\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n        "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #Python 2 and 3 compatible\n    import sys\n    if sys.version_info >= (3,0):\n        #Python 3\n        import sys\n        def minimum(a,b):\n            return a if a < b else b\n    else:\n        #Python 2\n        import sys\n        def minimum(a,b):\n            return a if a < b else b\n    #minimum function that returns the smallest number\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\nprint(minimum(7,8))\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # if a < b:\n    #     return b\n    # elif a > b:\n    #     return a\n    \n    return a if a < b else b\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    while b>a:\n        if b>=a:\n            if a>=b:\n                return b\n            else:\n                return a\n        else:\n            return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #print(a,b)\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif b<a:\n        return b\n    else:\n        return a\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum = a\n    if b < minimum:\n        minimum = b\n    elif b > minimum:\n        minimum = b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a == b:\n        return a\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex_list = []\n    for i in tuplex: \n        tuplex_list.append(i)\n    if tuplex_list[0] == tuple1: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return tuple1\n    else:\n        return False\n    \ndef check_tuple(tuplex,tuple1):\n    '''\n    Write a function that checks whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n    \ndef check_string(s,string):\n    '''\n    Write a function that checks whether an element exists within a string.\n    '''\n    if string in s:\n        return True\n    else:\n        return False\n    \ndef check_list(l,list1):\n    '''\n    Write a function that checks whether an element exists within a list.\n    '''\n    if list1 in l:\n        return True\n    else:\n        return False\n    \ndef check_int(n,int1):\n    '''\n    Write a function that checks whether an element exists within a int.\n    '''\n    if int1 in n:\n        return True\n    else:\n        return False\n    \ndef check_float(n,float1):\n    '''\n    Write a function that checks whether an element exists within a float.\n    '''\n    if float1 in n:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return len(tuplex) == len(tuple1) \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1[i]:\n            return True\n        else:\n            return False\ndef tuple_existance(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if check_tuplex(tuplex,tuple1):\n        return True\n    else:\n        return False\ndef zip_tuple(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if check_tuplex(tuplex,tuple1) and check_tuple_existance(tuplex,tuple1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == len(tuple1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex_list = []\n    tuplex_list = tuplex\n    tuplex_list = tuplex_list[0]\n    for i in tuplex_list:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check_tuple = (tuplex[0],tuple1[0])\n    if check_tuple not in tuplex:\n        return False\n    if tuple1[1] in tuplex:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #print('tuplex',tuplex)\n    #print('tuple1',tuple1)\n    #print('tuplex[0]',tuplex[0])\n    #print('tuple1[0]',tuple1[0])\n    #print('tuple1[1]',tuple1[1])\n    #print('tuple1[2]',tuple1[2])\n    #print('tuplex[0]',tuplex[0])\n    #print('tuple1[0]',tuple1[0])\n    #print('tuple1[1]',tuple1[1])\n    #print('tuplex[0]',tuplex[0])\n    #print('tuple1[0]',tuple1[0])\n    #print('tuplex[1]',tuplex[1])\n    #print('tuple1[1]',tuple1[1])\n    #print('tuplex[2]',tuplex[2])\n    #print('tuple1[2]',tuple1[2])\n    #print('tuplex[0]',tuplex[0])\n    #print('tuple1[0]',tuple1[0])\n    #print('tuplex[1]',tuplex[1])\n    #print('tuple1[1]',tuple1[1])\n    #print('tuplex[2]',tuplex[2])\n    #print('tuple1[2]',tuple1[2])\n    #print('tuplex[3]',tuplex[3])\n    #print('tuple1[3]',tuple1[3])\n    #print('tuplex[4]',tuplex[4])\n    #print('tuple1[4]',tuple1[4])\n    #print('tuplex[5]',tuplex[5])\n    #print('tuple1[5]',tuple1[5])\n    #print('tuplex[6]',tuplex[6])\n    #print('tuple1[6]',tuple1[6])\n    #print('tuplex[7]',tuplex[7])\n    #print('tuple1[7]',tuple1[7])\n    #print('tuplex[8]',tuplex[8])\n    #print('tuple1[8]',tuple1[8])\n    #print('tuplex[9]',tuplex[9])\n    #print('tuple1[9]',tuple1[9])\n    #print('tuplex[10]',tuplex[10])\n    #print('tuple1[10]',tuple1[10])\n    #print('tuplex[11]',tuplex[11])\n    #print('tuple1[11]',tuple1[11])\n    #print('tuplex[12]',tuplex[12])\n    #print('tuple1[12]',tuple1[12])\n    #print('tuplex[13]',tuplex[13])\n    #print('tuple1[13]',tuple1[13])\n    #print('tuplex[14]',tuplex[14])\n    #print('tuple1[14]',tuple1[14])\n    #print('tuplex[15]',tuplex[15])\n    #print('tuple1[15]',tuple1[15])\n    #print('tuplex[16]',tuplex[16])\n    #print('tuple1[16]',tuple1[16])\n    #print('tuplex[17]',tuplex[17])\n    #print('tuple1[17]',tuple1[17])\n    #print('tuplex[18]',tuplex[18])\n    #print('tuple1[18]',tuple1[18])\n    #print('tuplex[19]',tuplex[19])\n    #print('tuple1[19]',tuple1[19])\n    #print('tuplex[20]',tuplex[20])\n    #print('tuple1[20]',tuple1[20])\n    #print('tuplex[21]',tuplex[21])\n    #print('tuple1[21]',tuple1[21])\n    #print('tuplex[22]',tuplex[22])\n    #print('tuple1[22]',tuple1[22])\n    #print('tuplex[23]',tuplex[23])\n    #print('tuple1[23]',tuple1[23])\n    #print('tuplex[24]',tuplex[24])\n    #print('tuple1[24]',tuple1[24])\n    #print('tuplex[25]',tuplex[25])\n    #print('tuple1[25]',tuple1[25])\n    #print('tuplex[26]',tuplex[26])\n    #print('tuple1[26]',tuple1[26])\n    #print('tuplex[27]',tuplex[27])\n    #print('tuple1[27]',tuple1[27])\n    #print('tuplex[28]',tuplex[28])\n    #print('tuple1[28]',tuple1[28])\n    #print('tuplex[29]',tuplex[29])\n    #print('tuple1[29]',tuple1[29])\n    #print('tuplex[30]',tuplex[30])\n    #print('tuple1[30]',tuple1[30])\n    #print('tuplex[31]',tuplex[31])\n    #print('tuple1[31]',tuple1[31])\n    #print('tuplex[32]',tuplex[32])\n    #print('tuple1[32]',tuple1[32])\n    #print('tuplex[33]',tuplex[33])\n    #print('tuple1[33]',tuple1[33])\n    #print('tuplex[34]',tuplex[34])\n    #print('tuple1[34]',tuple1[34])\n    #print('tuplex[35]',tuplex[35])\n    #print('tuple1[35]',tuple1[35])\n    #print('tuplex[36]',tuplex[36])\n    #print('tuple1[36]',tuple1[36])\n    #print('tuplex[37]',tuplex[37])\n    #print('tuple1[37]',tuple1[37])\n    #print('tuplex[38]',tuplex[38])\n    #print('tuple1[38]',tuple1[38])\n    #print('tuplex[39]',tuplex[39])\n    #print('tuple1[39]',tuple1[39])\n    #print('tuplex[40]',tuplex[40])\n    #print('tuple1[40]',tuple1[40])\n    #print('tuplex[41]',tuplex[41])\n    #print('tuple1[41]',tuple1[41])\n    #print('tuplex[42]',tuplex[42])\n    #print('tuple1[42]',tuple1[42])\n    #print('tuplex[43]',tuplex[43])\n    #print('tuple1[43]',tuple1[43])\n    #print('tuplex[44]',tuplex[44])\n    #print('tuple1[44]',tuple1[44])\n    #print('tuplex[45]',tuplex[45])\n    #print('tuple1[45]',tuple1[45])\n    #print('tuplex[46]',tuplex[46])\n    #print('tuple1[46]',tuple1[46])\n    #print('tuplex[47]',tuplex[47])\n    #print('tuple1[47]',tuple1[47])\n    #print('tuplex[48]',tuplex[48])\n    "
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0: \n        return 'Even'\n    else: \n        return 'Odd' \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def odd(num):\n        if num % 2 == 0:\n            return False\n        else:\n            return True\n    \n    if odd(x):\n        return \"Parity\"\n    else:\n        return \"No Parity\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # 1. pass the test value in x\n    if x % 2 == 0:\n        return True\n    # 2. find the modulo 2 from the number\n    elif x % 2 == 1:\n        return True\n    # 3. return False\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd = 0\n    for i in range(1, x):\n        if(x % i == 0):\n            odd += 1\n    if odd % 2 == 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x % 2!= 0:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    div=int(x)\n    for i in range(0,(div+1)): \n        if(div%2==1): \n            return (i+1)\n    return -1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0: \n        print(\"the number is not even\")\n    else: \n        print(\"the number is even\")\n    \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Your code goes here\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2) == 0:\n        return \"The number is even.\\n\"\n    else:\n        return \"The number is odd.\\n\"\n    #raise NotImplementedError\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0: \n        return x\n    elif (x % 2) == 0: \n        return 0\n    else: \n        return 1\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        x = n % 10\n        n = n // 10\n        y = n % 10\n        n = n // 10\n        z = n % 10\n        n = n // 10\n        x = n + x\n        y = n + y\n        z = n + z\n        return (x + y + z)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = n[::-1]\n    return int(n)\n    "
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 10:\n        return 10 - n\n    else:\n        res = n % 10\n        if res!= 0:\n            return 10 - res\n        else:\n            return 10 - n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    n1 = [int(x) for x in s]\n    print(n1)\n    n2 = [int(x) for x in n]\n    print(n2)\n    def fun(n1, n2):\n        if n2 == 0:\n            return 0\n        else:\n            if n2 > 10:\n                n2 = n2 + 10\n                return fun(n1, n2)\n            else:\n                return fun(n1[:-1], n2)\n    return fun(n1, n2)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(n[::-1])\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    next_bigger = []\n    for digit in list(str(n)):\n        next_bigger.append(int(digit))\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 10:\n        return n\n    else:\n        smallest_digits = n%10\n        n = (n//10)%10\n        next_smallest_digits = rearrange_bigger(n)\n        if smallest_digits < next_smallest_digits:\n            n = (n//10)%10 + smallest_digits\n        else:\n            n = next_smallest_digits\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    num = int(str(n)[1:])\n    answer = int(str(n)[:1])*(int(str(n)[1:])//10)\n    answer = answer*(int(str(n)[1:])//10)\n    answer = answer*(int(str(n)[:1])//10)\n    answer = answer + int(str(n)[1:])\n    answer = int(str(answer)[2:])\n    if answer > 2**32:\n        answer = 2**32\n    return answer\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_number = ''\n    while n!= 0:\n        new_number += str(n % 10)\n        n = n // 10\n    return new_number[::-1]\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n * 3\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_pairs = []\n    heapq.heapify(smallest_pairs)\n    for num1, num2 in zip(nums1, nums2):\n        heapq.heappush(smallest_pairs, (-num1, num2))\n    if smallest_pairs:\n        smallest_pairs.sort()\n        return smallest_pairs\n    return []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Your code goes here\n    \n    # or\n    return [list(sorted(nums1)), list(sorted(nums2))][:k]\n    \n    \ndef main():\n    '''\n    Tests:\n    python k_smallest_pairs([3,4,5,1,2], [7,6,5,4,3], 2)  => [3, 4]\n    python k_smallest_pairs([1,3,2,2,4,4,4], [3,1,4,4,2,2,3], 3) => [3, 4]\n    python k_smallest_pairs([1,2], [1,3,2,4], 4) => [1, 2, 3, 4]\n    '''\n    tests = [\n        (\n            [3,4,5,1,2], \n            [7,6,5,4,3], \n            2\n        ),\n        (\n            [1,3,2,2,4,4,4], \n            [3,1,4,4,2,2,3], \n            3\n        ),\n        (\n            [1,3,2,2,4,4,4], \n            [3,1,4,4,2,2,3], \n            4\n        )\n    ]\n    for (nums1, nums2, k) in tests:\n        print(k_smallest_pairs(nums1, nums2, k))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Take two arrays of equal length\n    # Traverse through each pair and determine the size of the smaller array\n    if not nums1 or not nums2:\n        return []\n    smallest_heap = []\n    # Construct the pair\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            # If the pair is not present in the heap\n            if not smallest_heap or nums1[i] > smallest_heap[0]:\n                smallest_heap = [nums1[i]] + smallest_heap\n            elif nums1[i] < smallest_heap[0]:\n                smallest_heap = [nums1[j]] + smallest_heap\n            else:\n                smallest_heap = [nums1[i]] + smallest_heap\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n    count = 0\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         if nums1[i] == nums2[j]:\n    #             count += 1\n    #     heapq.heappush(heap, count)\n    #     count = 0\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for num1, num2 in zip(nums1, nums2):\n        heapq.heappush(heap, (-num1, num1))\n        heapq.heappush(heap, (-num2, num2))\n    count = 0\n    while heap and heap[0][1] <= k:\n        count += 1\n        a, b = heapq.heappop(heap)\n        heapq.heappush(heap, (-b, b))\n        heapq.heappush(heap, (-a, a))\n    print(\"Count of smallest pairs of\", count, \"elements are:\", heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(i + 1, len(nums1)):\n            heapq.heappush(heap, (nums1[i] - nums2[j], nums1[i], nums2[j]))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap,(nums1[i] + nums2[i], i))\n    small = heapq.heappop(heap)\n    while k:\n        small = heapq.heappop(heap)\n        k -= 1\n        if len(small[1]) == 0:\n            return False\n        small = (small[0], [small[1][0], small[1][1] + 1])\n        heapq.heappush(heap,(small[0] + nums2[small[1][0]], small[1][0] + 1))\n    return True"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #heap = []\n    #nums1.sort()\n    #nums2.sort()\n    #print(nums1, nums2)\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    heap_size = len(nums1)\n    #print(heap_size)\n    for i in range(k):\n        #print(\"heap: \", heap_size, \" for nums1: \", nums1, \" for nums2: \", nums2)\n        if (heap_size <= k):\n            #print(heap_size)\n            #print(heap_size-i, nums1[i], nums2[i])\n            heapq.heappush(nums1, nums1[i]-heapq.heappop(nums2))\n            heapq.heappush(nums2, nums1[i]+heapq.heappop(nums2))\n        else:\n            heapq.heappush(nums1, heapq.heappop(nums2)-nums1[i])\n            heapq.heappush(nums2, heapq.heappop(nums1)-nums2[i])\n            heap_size -= 2\n    #print(nums1, nums2)\n    return nums1, nums2\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k < 2:\n        return []\n    if len(nums1) < len(nums2):\n        nums1.extend([-1 for _ in range(k-len(nums1))])\n    if len(nums2) < len(nums1):\n        nums2.extend([-1 for _ in range(k-len(nums2))])\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    p = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][0] < list1[i][1]*list1[j][1]:\n                p.append((list1[i][0], list1[j][0]))\n            if list1[i][0]*list1[j][1] > list1[i][1]*list1[j][0]:\n                p.append((list1[i][1], list1[j][1]))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product *= list1[i][0]\n            product *= list1[i][1]\n            product *= list1[j][0]\n            product *= list1[j][1]\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in list1:\n        product = product*i\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    minimum = list1[0][0] * list1[1][0]\n    for i in range(2, len(list1)):\n        minimum = min(minimum, list1[i][0] * list1[i-1][0])\n    return minimum\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #Use a queue to track the minimum element from the list\n    min_queue = []\n    #Initialize the minimum element as the first element\n    min = list1[0][0]\n    #loop through the list\n    for i in range(len(list1)):\n        #Add the two elements in the queue\n        min_queue.append(list1[i][0] + list1[i][1])\n        #Add the minimum element to the queue\n        if min == list1[i][0]:\n            min_queue.append(list1[i][0])\n        if min == list1[i][1]:\n            min_queue.append(list1[i][1])\n        #If the minimum element is greater than the current element then update the minimum element\n        if min > list1[i][0] or min > list1[i][1]:\n            min = list1[i][0]\n    return min_queue\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i]*list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    temp_list1 = []\n    min_product_tuple = []\n    for i in list1:\n        for j in list1:\n            if i[0] == j[0] and i[1] > j[1]:\n                temp_list1.append(i)\n            elif i[0] == j[0] and i[1] < j[1]:\n                temp_list1.append(j)\n    for i in list1:\n        if i[0]!= i[1]:\n            min_product_tuple.append(i)\n    return min_product_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_tuple = []\n    min_product = list1[0][0] * list1[0][1]\n    for tuple in list1:\n        if tuple[0][0] * tuple[0][1] < min_product:\n            min_product = tuple[0][0] * tuple[0][1]\n            min_tuple = tuple[0]\n    return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return(0)\n    min_product = list1[0][0]\n    min_index = 0\n    for index in range(1, len(list1)):\n        if min_product < list1[index][0]:\n            min_product = list1[index][0]\n            min_index = index\n    return(min_product)\n    #Your code here\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(list1[i][1] * list1[i+1][0] for i in range(len(list1) - 1))\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = float('inf')\n    for val in listval:\n        if val < min:\n            min = val\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = 0\n    for value in listval:\n        if value < min_val:\n            min_val = value\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for x in listval:\n        if x < min_val:\n            min_val = x\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    return min(listval[0],min_val(listval[1:]))\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    try:\n        return min(listval)\n    except ValueError:\n        print(\"ValueError: A given value was not a numerical value\")\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minval = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # First step is to strip the case of all the characters\n    temp = re.sub(r\"[^A-Za-z0-9\\-]\", \"\", word)\n    # Second step is to split the word in order to separate the letters\n    temp = temp.split(\" \")\n    # Third step is to create a list of all the alphabets\n    alphabet = []\n    for i in temp:\n        alphabet.append(i.lower())\n    # Fourth step is to split the list in order to convert the lower case to upper case\n    temp = []\n    for i in alphabet:\n        temp.append(i.upper())\n    return \"\".join(temp)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower().replace(' ', '_')\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.lower()\n    words = re.sub(\"([a-z])\", r\"\\1_\\2\", word)\n    words = re.sub(\"([A-Z])\", r\"\\1_\\2\", words)\n    return words\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0] == '_':\n        return '_' + snake_to_camel(word[1:])\n    else:\n        return word[0].upper() + snake_to_camel(word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    for char in word.upper():\n        if char not in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz':\n            return word.capitalize()\n        \n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # special cases\n    if word[0].lower() == word[1].lower():\n        return word\n    \n    # split the word into a list of words\n    l = word.split('_')\n    # iterate over the list, and convert each word to lowercase\n    for i in range(len(l)):\n        l[i] = l[i].lower()\n    # return the concatenated word\n    return ''.join(l)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Initialize the result string\n    result = \"\"\n    # Loop through each char in the word\n    for char in word:\n        # Check if a letter is uppercase (if it is, swap the next character with the previous one)\n        if char.isupper():\n            # Add an uppercase character to the result string\n            result += char.lower()\n        # Check if a letter is lowercase (if it is, swap the next character with the previous one)\n        elif char.islower():\n            # Add a lowercase character to the result string\n            result += char.upper()\n    return result\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Initialize the result string\n    result = \"\"\n    # Loop through each char in the word\n    for char in word:\n        # Check if a letter is uppercase (if it is, swap the next character with the previous one)\n        if char.isupper():\n            # Add an uppercase character to the result string\n            result += char.lower()\n        # Check if a letter is lowercase (if it is, swap the next character with the previous one)\n        elif char.islower():\n            # Add a lowercase character to the result string\n            result += char.upper()\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the string into its parts\n    parts = re.split('_|[a-z]', word)\n    # capitalize each part\n    for part in parts:\n        part = part.capitalize()\n    # return the result\n    return parts[0] + ''.join(part.split())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) < 1:\n        return word\n    if word[0] == '_':\n        word = word[1:]\n    if word[-1] == '_':\n        word = word[:-1]\n    return word.lower() + ''.join([word[0].upper(), word[1:]])\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #Initialize empty list\n    l_list = []\n    #Traverse through all elements of list.\n    for element in l:\n        if element%2 == 0:\n            #If even, remove the element.\n            l_list.append(element)\n    #Return list of even numbers\n    return l_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if i % 2!= 0:\n            l[i] = l[i]\n    return l\n    \n    \n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = l[i]\n    return l\n    \n    \n    \ndef reverse(l):\n    '''\n    Write a python function to reverse a given list of integers.\n    '''\n    l.reverse()\n    return l\n    \n    \ndef count_occurrences(l, val):\n    '''\n    Write a python function to count occurrences of a given value in a given list.\n    '''\n    l.count(val)\n    return l\n    \n    \n    \ndef max_value(l):\n    '''\n    Write a python function to get the max value of a given list of integers.\n    '''\n    l.sort()\n    return l\n    \n    \n    \ndef min_value(l):\n    '''\n    Write a python function to get the min value of a given list of integers.\n    '''\n    l.sort()\n    return l\n    \n    \n    \ndef max_occurrences(l):\n    '''\n    Write a python function to get the max occurrences of a given value.\n    '''\n    l.sort()\n    return l\n    \n    \n    \ndef min_occurrences(l):\n    '''\n    Write a python function to get the min occurrences of a given value.\n    '''\n    l.sort()\n    return l\n    \n    \n    \ndef mode(l):\n    '''\n    Write a python function to get the mode of a given list of integers.\n    '''\n    l.sort()\n    return l\n    \n    \n    \ndef mean(l):\n    '''\n    Write a python function to get the mean value of a given list of integers.\n    '''\n    l.sort()\n    return l[int(len(l) / 2)]\n    \n    \n    \ndef count_biggest_pairs(l, k):\n    '''\n    Write a python function to find the k-biggest pairs in a given list.\n    '''\n    l.sort()\n    smallest_diff = l[int(len(l) / 2)] - l[int(len(l) / 2) - k]\n    l[int(len(l) / 2) + 1 : ] = l[int(len(l) / 2)]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    l.append(smallest_diff)\n    smallest_diff = l[int(len(l) / 2)] - l[int(len(l) / 2) - k]\n    l[int(len(l) / 2) + 1 : ] = l[int(len(l) / 2)]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    l.append(smallest_diff)\n    diff = l[int(len(l) / 2)] - l[int(len(l) / 2) - k]\n    l[int(len(l) / 2) + 1 : ] = l[int(len(l) / 2)]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    l.append(diff)\n    l.sort()\n    return l\n    \n    \n    \ndef mean_biggest_pairs(l):\n    '''\n    Write a python function to get the mean value of a given list of integers.\n    '''\n    l.sort()\n    smallest_diff = l[int(len(l) / 2)] - l[int(len(l) / 2) - 3]\n    l[int(len(l) / 2) + 1 : ] = l[int(len(l) / 2)]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    l.append(smallest_diff)\n    smallest_diff = l[int(len(l) / 2)] - l[int(len(l) / 2) - 3]\n    l[int(len(l) / 2) + 1 : ] = l[int(len(l) / 2)]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    l.append(smallest_diff)\n    diff = l[int(len(l) / 2)] - l[int(len(l) / 2) - 3]\n    l[int(len(l) / 2) + 1 : ] = l[int(len(l) / 2)]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    l.append(diff)\n    l.sort()\n    return l\n    \n    \ndef sort_by_diff(l):\n    '''\n    Write a python function to sort a given list of integers using the difference function.\n    '''\n    l.sort()\n    l.append(l[int(len(l) / 2)] - l[int(len(l) / 2) - 1])\n    l[int(len(l) / 2) + 1 : ] = l[int(len(l) / 2)]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    return l\n    \n    \ndef sort_by_size(l):\n    '''\n    Write a python function to sort a given list of integers using the size function.\n    '''\n    l.sort()\n    l.append(l[int(len(l) / 2) + 1])\n    l[int(len(l) / 2) + 1 : ] = l[int(len(l) / 2)]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    return l\n    \n    \n    \ndef sort_by_sum(l):\n    '''\n    Write a python function to sort a given list of integers using the sum function.\n    '''\n    l.sort()\n    l.append(l[int(len(l) / 2) + 1] + l[int(len(l) / 2)])\n    l[int(len(l) / 2) + 1 : ] = l[int(len(l) / 2)]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    return l\n    \n    \ndef reverse_n(l):\n    '''\n    Write a python function to reverse a given list of integers.\n    '''\n    l.reverse()\n    return l\n    \n    \ndef reverse_k(l, k):\n    '''\n    Write a python function to reverse a given list of integers.\n    '''\n    l.reverse()\n    l[int(len(l) / 2) - k : int(len(l) / 2)] = l[int(len(l) / 2) + k :]\n    l[int(len(l) / 2) - k : ] = l[int(len(l) / 2) + k : ]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    return l\n    \n    \ndef reverse_k_non_repeats(l, k):\n    '''\n    Write a python function to reverse a given list of integers.\n    '''\n    l.reverse()\n    l[int(len(l) / 2) - k : int(len(l) / 2) + k : ] = l[int(len(l) / 2) + k :]\n    l[int(len(l) / 2) - k : ] = l[int(len(l) / 2) + k : ]\n    l[int(len(l) / 2) : ] = l[int(len(l) / 2)]\n    return l\n    \n    \n    \ndef get_odd_fibonacci(n):\n    '''\n    Write a python function to get the nth fibonacci number.\n    ''"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if(i % 2 == 1):\n            new_l.append(i)\n    return new_l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    count=0\n    for item in l:\n        if item%2!=0:\n            l.remove(item)\n            count+=1\n        else:\n            pass\n    return l,count\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    count=0\n    for item in l:\n        if item%2==0:\n            l.remove(item)\n            count+=1\n        else:\n            pass\n    return l,count\n    \ndef get_sum_of_list(l):\n    '''\n    Write a python function to get the sum of all numbers from a given list.\n    '''\n    l_sum=0\n    for item in l:\n        l_sum+=item\n    return l_sum\n    \ndef get_diff_sum_of_list(l):\n    '''\n    Write a python function to get the difference of all numbers from a given list.\n    '''\n    diff_sum=0\n    for item in l:\n        diff_sum+=item-item\n    return diff_sum\n    \ndef get_product_of_list(l):\n    '''\n    Write a python function to get the product of all numbers from a given list.\n    '''\n    product=1\n    for item in l:\n        product=product*item\n    return product\n    \ndef get_square_of_list(l):\n    '''\n    Write a python function to get the square of all numbers from a given list.\n    '''\n    square=[]\n    for item in l:\n        square.append(item*item)\n    return square\n    \ndef get_length_of_list(l):\n    '''\n    Write a python function to get the length of a given list.\n    '''\n    length=0\n    for item in l:\n        length+=1\n    return length\n    \ndef get_average_of_list(l):\n    '''\n    Write a python function to get the average of all numbers from a given list.\n    '''\n    sum=0\n    for item in l:\n        sum+=item\n    return sum/len(l)\n    \ndef get_minimum_of_list(l):\n    '''\n    Write a python function to get the minimum of all numbers from a given list.\n    '''\n    minimum=l[0]\n    for item in l:\n        if item<minimum:\n            minimum=item\n    return minimum\n    \ndef get_maximum_of_list(l):\n    '''\n    Write a python function to get the maximum of all numbers from a given list.\n    '''\n    maximum=l[0]\n    for item in l:\n        if item>maximum:\n            maximum=item\n    return maximum\n    \ndef get_sum_of_numbers_from_list(l):\n    '''\n    Write a python function to get the sum of all numbers from a given list.\n    '''\n    sum=0\n    for item in l:\n        sum+=item\n    return sum\n    \ndef get_product_of_numbers_from_list(l):\n    '''\n    Write a python function to get the product of all numbers from a given list.\n    '''\n    product=1\n    for item in l:\n        product*=item\n    return product\n    \ndef get_square_of_numbers_from_list(l):\n    '''\n    Write a python function to get the square of all numbers from a given list.\n    '''\n    square=[]\n    for item in l:\n        square.append(item*item)\n    return square\n    \ndef get_length_of_numbers_from_list(l):\n    '''\n    Write a python function to get the length of all numbers from a given list.\n    '''\n    length=0\n    for item in l:\n        length+=1\n    return length\n    \ndef get_average_numbers_from_list(l):\n    '''\n    Write a python function to get the average of all numbers from a given list.\n    '''\n    sum=0\n    for item in l:\n        sum+=item\n    return sum/len(l)\n    \ndef get_minimum_numbers_from_list(l):\n    '''\n    Write a python function to get the minimum of all numbers from a given list.\n    '''\n    minimum=l[0]\n    for item in l:\n        if item<minimum:\n            minimum=item\n    return minimum\n    \ndef get_maximum_numbers_from_list(l):\n    '''\n    Write a python function to get the maximum of all numbers from a given list.\n    '''\n    maximum=l[0]\n    for item in l:\n        if item>maximum:\n            maximum=item\n    return maximum\n    \ndef is_prime_number(num):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if num<=1:\n        return False\n    elif num==2:\n        return True\n    else:\n        for i in range(2,num):\n            if num%i==0:\n                return False\n        return True\n    \ndef get_factors_of_list(l):\n    '''\n    Write a python function to get the factors of all numbers from a given list.\n    '''\n    factors=[]\n    for item in l:\n        if is_prime_number(item):\n            factors.append(item)\n    return factors\n    \ndef get_odd_list(l):\n    '''\n    Write a python function to get all odd numbers from a given list.\n    '''\n    count=0\n    for item in l:\n        if item%2!=0:\n            l.remove(item)\n            count+=1\n    return l,count\n    \ndef get_even_list(l):\n    '''\n    Write a python function to get all even numbers from a given list.\n    '''\n    count=0\n    for item in l:\n        if item%2==0:\n            l.remove(item)\n            count+=1\n    return l,count\n    \ndef get_sum_of_even_numbers(l):\n    '''\n    Write a python function to get the sum of all even numbers from a given list.\n    '''\n    sum=0\n    for item in l:\n        if item%2==0:\n            sum+=item\n    return sum\n    \ndef get_sum_of_odd_numbers(l):\n    '''\n    Write a python function to get the sum of all odd numbers from a given list.\n    '''\n    sum=0\n    for item in l:\n        if item%2!=0:\n            sum+=item\n    return sum\n    \ndef get_sum_of_odd_even_numbers(l):\n    '''\n    Write a python function to get the sum of all odd even numbers from a given list.\n    '''\n    sum=0\n    for item in l:\n        if item%2==0:\n            if item%2!=0:\n                sum+=item\n    return sum\n    \ndef get_product_of_even_numbers(l):\n    '''\n    Write a python function to get the product of all even numbers from a given list.\n    '''\n    product=1\n    for item in l:\n        product*=item\n    return product\n    \ndef get_square_of_even_numbers(l):\n    '''\n    Write a python function to get the square of all odd numbers from a given list.\n    '''\n    square=[]\n    for item in l:\n        square.append(item*item)\n    return square\n    \ndef get_square_of_odd_numbers(l):\n    '''\n    Write a python function to get the square of all odd numbers from a given list.\n    '''\n    square=[]\n    for item in l:\n        if item%2!=0:\n            square.append(item*item)\n    return square\n    \ndef get_square_of_odd_even_numbers(l):\n    '''\n    Write a python function to get the square of all odd even numbers from a given list.\n    '''\n    square=[]\n    for item in l:\n        if item%2==0:\n            if item%2!=0:\n                square.append(item*item)\n    return square\n    "
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for el in l:\n        if el % 2 == 1:\n            new_list.append(el)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for element in l:\n        if element%2 == 1:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l[i] = l[i] // 2\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    a=[]\n    for i in l:\n        if i%2==1:\n            a.append(i)\n    return a\n    \n    "
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i = 0\n    while i < len(l):\n        if l[i] % 2 == 1:\n            l.pop(i)\n            break\n        i += 1\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        if i!= n:\n            lst.append(list1[i][0])\n    return lst\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n    \ndef order_dict(list1):\n    '''\n    Write a function to order the keys of a dictionary.\n    '''\n    new_dict = {}\n    for item in list1:\n        for key in item:\n            new_dict[key] = item[key]\n    return new_dict\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    else:\n        return False\n    \ndef same_subsequence(list1,list2):\n    '''\n    Write a python function to check whether the list of a given string is a subsequence of a given list of string. \n    '''\n    return list1 == list2[:-1] or list2 == list1[:-1]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count=0\n    for i in list1:\n        if i in list2:\n            count+=1\n    return count>=0\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    i = 0\n    while i < len(list1):\n        if list1[i]!= list2[i]:\n            break\n        i += 1\n    return i==len(list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    intersection = []\n    for i in list1:\n        if i in list2:\n            intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in range(len(list1)):\n        if list1[num] in list2:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print(\"overlapping is a function\")\n    for item in list1:\n        for x in list2:\n            if item == x:\n                print(\"overlapping works\")\n                return True\n    print(\"overlapping works fail\")\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(item in list2 for item in list1)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = len(arr) \n    if(l == 0): \n        return None\n    mid = int(l / 2) \n    if(mid == 0): \n        return None\n    for i in range(mid): \n        if (arr[mid - i - 1] * arr[mid - i] > arr[mid]): \n            return [mid - i - 1, mid - i] \n    return [mid - 1, mid] \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    import math\n    max_product=math.prod(max(arr))\n    max_index=arr.index(max_product)\n    return(max_index,max_product)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    for i in range(1,len(arr)):\n        if(arr[i] > max1):\n            max1 = arr[i]\n    return max1\n    \ndef min_Product(arr): \n    '''\n    Write a python function to find a pair with lowest product from a given array of integers.\n    '''\n    min1 = arr[0]\n    for i in range(1,len(arr)):\n        if(arr[i] < min1):\n            min1 = arr[i]\n    return min1\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m = []\n    l = []\n    for i in range(len(arr)):\n        m.append(arr[i][0])\n        l.append(arr[i][1])\n    m.sort()\n    l.sort()\n    for i in range(len(m)):\n        if m[i] == l[i]:\n            return(m[i],l[i])\n    return(m[-1],l[-1])\narr = [[2,2,1],[4,3,2],[7,4,2]]\nprint(max_Product(arr))"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Create a hashtable to store product\n    hashtable = {}\n    \n    for i in range(0, len(arr)):\n        product = arr[i]\n        if product in hashtable:\n            hashtable[product] += 1\n        else:\n            hashtable[product] = 1\n    \n    # Find which product is the highest\n    for i in hashtable:\n        if hashtable[i] > hashtable[hashtable[i]]:\n            return i, hashtable[i]\n    \n    return \"No product is found\"\n    "
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<3:\n        return\n    arr.sort()\n    i=0\n    n=len(arr)\n    while i<n:\n        j=i+1\n        while j<n and arr[i]*arr[j]<=arr[i]:\n            j+=1\n        if j>i:\n            return arr[i],arr[j]\n        i+=1\n    return arr[0],arr[0]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = arr[0]*arr[1]\n    for i in range(2, len(arr)):\n        max_prod = max(max_prod*arr[i], arr[i])\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if(arr[i] * arr[j]) > max_product:\n                max_product = arr[i] * arr[j]\n                max_product_index = i\n                max_product_index_index = j\n    return [max_product_index, max_product_index_index]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]*arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i]*arr[i])\n    return max_product\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0] * arr[0]\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j] > max:\n                max = arr[j]\n            if arr[i] < max:\n                max = arr[i]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 1: \n        return Input[0] \n    return find_common_first(Input) \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input_list = []\n    for i in range(len(Input)): \n        Input_list.append(Input[i])\n    return Input_list[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def f(s):\n        n = len(s)\n        i = 0\n        res = []\n        while i < n:\n            j = i\n            while j < n and s[j] == s[i]:\n                j += 1\n            res.append(s[i:j])\n            i = j\n        return res\n    return f(Input)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output = set()\n    for i in Input:\n        output.add(i)\n    return list(output)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    '''\n    input_list = [('s','m', 'c'), ('e', 'r', 'i'), ('f', 'd', 'g')]\n    return list(set(tuple(t) for t in input_list))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create two empty lists: item and index\n    item = []\n    index = []\n    # Go through the input list and append the tuple value to item list\n    for item_value in Input:\n        item.append(item_value)\n    # Go through the index and append the tuple value to index list\n    for index_value in range(0,len(item)):\n        index.append(index_value)\n    # Use zip function to group tuple value\n    return list(zip(item,index))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input:\n        return []\n    if len(Input) <= 0:\n        return []\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # input is a list of tuple\n    # output is the common first element\n    return [a for a,b in Counter(Input).items() if b==1][0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input: \n        return []\n    set1 = set(Input) \n    if len(set1) == 1: \n        return list(set1)\n    else: \n        return group_tuples(Input[:len(set1)//2]) + group_tuples(Input[len(set1)//2:])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if max < lst[i]:\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #Sort the list in Ascending order\n    lst.sort()\n    \n    #Initialize the count variable\n    count=0\n    \n    #For loop to iterate through list\n    for x in lst:\n        \n        #If the count is more than the length then move to the next element\n        if(count>len(lst)):\n            count=0\n            count+=1\n            continue\n            \n        #Check the if the element in the list is greater than the current element and add one\n        if(x>lst[count]):\n            count+=1\n            continue\n            \n        #If the element is greater than the previous element then move to the next element\n        else:\n            count+=1\n            continue\n    \n    #Return the index of the maximum element\n    return count\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    i=0\n    m=lst[0]\n    for i in range(len(lst)):\n        if m<lst[i]:\n            m=lst[i]\n    return m\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    for i in range(len(lst)):\n        if len(lst) == 1:\n            return lst[0]\n        if lst[i] >= lst[i+1]:\n            return lst[i]\n    return False\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i] > max_:\n            max_ = lst[i]\n    return max_\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(str(i)) > max:\n            max = len(str(i))\n            \n    print(max)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # use a for loop to iterate through the list and \n    # compare the length of the element of the list to the length of the longest string in the list\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                lst[i] = lst[j]\n    return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize an empty array \n    result = []\n    # Use two for loops to get the length of the list \n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            # Check if the element is less than the element in the list \n            if (lst[i] < lst[j]):\n                result = [i,j]\n                #print(\"Found in\",result)\n    return result\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    return lst[0] \n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    numbers = []\n    for i in list1:\n        numbers.append(round(i,2))\n    for j in range(len(numbers)):\n        total_sum += numbers[j]\n    print(total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    def sum_numbers(list1):\n        '''\n        Write a function to print the total sum of a given list of numbers.\n        '''\n        sum_numbers = 0\n        for item in list1:\n            sum_numbers += item\n        print(sum_numbers)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(list1)\n    list1_sum = 0\n    for number in list1:\n        list1_sum += number\n    print(f\"The total sum is {list1_sum}\")\n    print(f\"The total sum is {list1_sum/len(list1)}\")\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    tot_sum=0\n    for element in list1:\n        tot_sum += element\n    return tot_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        total_sum += list1[i]\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(round(i, 3))\n    return sum(new_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(round(list1[i]*len(list1),2))\n    return list2\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in list1:\n        i = round(i,2)\n        sum = i*len(list1)\n        print(sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    len_list = len(list1)\n    for item in list1:\n        total_sum += item\n    return total_sum * len_list\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    return n*(n*n+1)//6\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(n)\n    cube_sum = 0\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n    return total\n    \nn = int(input(\"Enter the sum of n: \"))\nprint(f\"Sum of numbers from 1 to {n} is {cube_Sum(n)}\")"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(n):\n        if i%2==0:\n            res = res + i**3\n    return res\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    # initialize the sum \n    sum = 0\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    def cubsum(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n%2 == 0:\n            return cubsum(n-1) + cubsum(n-2)\n        else:\n            return cubsum(n-1) + cubsum(n-2) + cubsum(n-3)\n    return cubsum(n)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Your code here\n    cubeSum = 0\n    for num in range(1, n+1):\n        cubeSum += num**3\n    return cubeSum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=1:\n        return n \n    else:\n        s=n*n\n        return s*3+cube_Sum(n-1)\n    pass\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return_list = []\n    for item in test_tup:\n        return_list.append(item)\n    return tuple(return_list)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    try:\n        return tuple(map(lambda x: x.lstrip(), test_tup))\n    except AttributeError:\n        return tuple(map(lambda x: x.lstrip(), test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ()\n    for el in test_tup:\n        new_tup += el\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i)\n        result += \" \"\n    result = result[:-1]\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # add parentheses to check if tuple is empty\n    if len(test_tup) == 0:\n        return None\n    else:\n        # check if the tuple is a tuple\n        if isinstance(test_tup, tuple):\n            # if it is, split the tuple and return it as a list of elements\n            return tuple(map(lambda x: x.strip(), test_tup))\n        else:\n            # if not, just return the passed tuple\n            return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # empty list\n    tuple_of_list = []\n    # iterate through each element in tuple\n    for index, element in enumerate(test_tup):\n        # write to list\n        tuple_of_list.append(element)\n    # return tuple\n    return tuple(tuple_of_list)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join([i for i in test_tup[0]] + [i for i in test_tup[1]])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    num = [int(i) for i in range(1,n+1)]\n    avg = sum(num)\n    avg = avg/n\n    return avg\n    \nif __name__ == '__main__':\n    n = 20\n    print(\"Average of cubes of first 20 natural numbers is:\", find_Average_Of_Cube(n)"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    result = 0\n    for i in range(1, n+1):\n        result += i*i*i\n    return result//(n*n*n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / (4 * n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0 or n == 1:\n        return n\n    return n*find_Average_Of_Cube(n-1)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        num = int(input())\n        sum += num\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def cube(x):\n        return x*x*x\n    \n    list_of_cubes = []\n    list_of_cubes_sum = 0\n    for i in range(n):\n        list_of_cubes.append(cube(i))\n    for j in list_of_cubes:\n        list_of_cubes_sum+=j\n    return list_of_cubes_sum/n\n    \n    \nif __name__ == '__main__':\n    print(find_Average_Of_Cube(20))"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 1\n    for i in range(n):\n        avg = avg + i\n    return avg/n\n    "
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    return sum(cubes) / (n**3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum(range(1, n + 1)) / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average\n    \n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # We want to extract all the string elements in the list, which are the tuples with the elements\n    # whose rear index is equal to the given index.\n    \n    # This function will take as input a tuple which consist of strings and returns the index\n    # where the strings are in the given index.\n    \n    # Write your code below\n    #\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    out = []\n    for i in test_tuple:\n        out.append(i[-1])\n    return out\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    rear_index = []\n    for s in test_tuple:\n        s_str = s.split(\" \")\n        for i in range(len(s_str)):\n            if i == len(s_str)-1:\n                break\n            s_str[i] = s_str[i].replace(\"\\n\", \"\")\n        rear_index.append(s_str[-1])\n    return tuple(rear_index)"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    s1,s2 = test_tuple\n    rear = \"\"\n    for s in s2:\n        rear = s + rear\n    return (s1,rear)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = []\n    for item in test_tuple:\n        if item[-1] == 'R':\n            test_list.append(item[:-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple = test_tuple[0]\n    index = []\n    for el in tuple:\n        index.append(list(reversed(list(map(lambda x: ord(x)-ord('a'), el)))) )\n    return tuple, index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if len(test_tuple) == 1:\n        return test_tuple[0]\n    else:\n        return extract_rear(test_tuple[1:])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rrear_list = []\n    test_tuple = tuple(test_tuple)\n    for index in range(0, len(test_tuple)):\n        if test_tuple[index] == 'R':\n            rrear_list.append(index)\n    return rrear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # get the length of the tuple\n    length = len(test_tuple)\n    # create empty list to store the index\n    rear_list = []\n    # iterate through all the string elements in the tuple\n    for i in range(length):\n        # check if the element is a string\n        if type(test_tuple[i]) == str:\n            # if the string is not empty\n            if len(test_tuple[i]) > 0:\n                # add it to the rear list\n                rear_list.append(test_tuple[i][0])\n    # return the list\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for i in test_tuple:\n        if i[-1] == 'x':\n            rear.append(i)\n    return rear\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in range(len(list1)): \n        if list1[i] == x:\n            c += 1\n    return c \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Your code here\n    counter = 0\n    for item in list1:\n        if item == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if x in item:\n            count += 1\n    return count\n    \ndef check_array_perms(lst):\n    '''\n    Write a function that takes a list and returns a new list with all the permutations of the list.\n    '''\n    permutations = []\n    lst_copy = list(lst)\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            permutation = [lst_copy[i], lst_copy[j]]\n            permutations.append(permutation)\n    return permutations\n    \ndef permute(list):\n    '''\n    Write a function that takes a list and returns all the permutations of the list.\n    '''\n    permutations = []\n    if len(list) <= 1:\n        return list\n    for i in range(len(list)):\n        for j in range(i+1,len(list)):\n            permutation = list[i] + list[j]\n            permutations.append(permutation)\n    return permutations\n    \ndef all_permutations(list):\n    '''\n    Write a function that takes a list and returns all permutations of the list.\n    '''\n    permutations = []\n    if len(list) <= 1:\n        return list\n    for i in range(len(list)):\n        for j in range(i+1,len(list)):\n            permutation = list[i] + list[j]\n            permutations.append(permutation)\n    return permutations\n    \ndef list_concat(lst1,lst2):\n    '''\n    Write a function that takes two lists and returns a new list with all the concatenation of the lists.\n    '''\n    concatenated = lst1+lst2\n    return concatenated\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                return len(list1[i])\n    return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        for j in range(0, len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        if list1[0] == x:\n            return 1\n        else:\n            return 0\n    for i in range(1, len(list1)):\n        if x in list1[i]:\n            return count_element_in_list(list1[:i], x) + count_element_in_list(list1[i:], x)\n    return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i[x] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            nums.remove(i)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num%2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums = list(nums)\n    nums[0] = 0\n    nums[1] = 1\n    for i in range(2, len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i] = 0\n        else:\n            nums[i] = 1\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            print(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda n: n%2!=0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    # i and j = current number, k = minimum number\n    i,j = 0, len(nums) - 1\n    \n    while i <= j:\n        mid = int((i + j) / 2)\n        # if odd, i = mid + 1, j = mid\n        if nums[mid] % 2!= 0:\n            j = mid - 1\n        else:\n            # if even, i = mid - 1, j = mid\n            i = mid + 1\n            \n    return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i] = int(nums[i])\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filter = list(filter(lambda x: x % 2!= 0, nums))\n    print(filter)\n    return filter\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    print(nums)\n    return [num for num in nums if num % 2!= 0]\n    return list(filter(lambda x: x % 2 == 0, nums))\n    #return list(filter(lambda x: x % 2 == 0, nums))\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.search('(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    year = m.group(1)\n    month = m.group(2)\n    day = m.group(3)\n    date = day+'/'+month+'/'+year\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Write your code here\n    year,month,day=dt.split('-')\n    day=day[0:2]\n    month=month[0:2]\n    if len(month)==1:\n        month='0'+month\n    if len(day)==1:\n        day='0'+day\n    return f'{month}-{day}-{year}'\ndef change_time_format(t):\n    '''\n    Write a function to convert an hour,minute,second string into a datetime format.\n    '''\n    # Write your code here\n    if t=='00:00:00':\n        return '0:0:0:0'\n    if t=='00:00:00':\n        return '0:0:0:0'\n    if t=='05:00:00':\n        return '0:0:0:0'\n    if t=='00:00:05':\n        return '0:0:0:0'\n    if t=='01:00:00':\n        return '0:0:0:0'\n    if t=='01:00:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n        return '0:0:0:0'\n    if t=='01:01:05':\n        return '0:0:0:0'\n    if t=='01:01:00':\n    "
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    # dd/mm/yyyy\n    return '{:0>2}-{:0>2}-{:0>4}'.format(int(dt[0]),int(dt[1]),int(dt[2]))\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not isinstance(dt, datetime.datetime):\n        return dt\n    \n    if dt.year % 4 == 0:\n        if dt.month == 2:\n            return dt.strftime('%d-%m-%Y')\n        elif dt.month == 12:\n            return dt.strftime('%d-%m-%Y') + '-01-01'\n        else:\n            return dt.strftime('%d-%m-%Y') + '-%s-01-01'\n    else:\n        return dt.strftime('%d-%m-%Y') + '-%s-01-01'\n    \n    \ndef is_date(data):\n    '''\n    Checks if a given datetime is a date.\n    '''\n    return isinstance(data, datetime.date)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt[-1] == '-':\n        dt = dt[:-1]\n    if dt[:2] == '00':\n        dt = dt[2:]\n    if dt[:4] == '0001':\n        dt = dt[4:]\n    if dt[:2] == '19':\n        dt = dt[2:]\n    if dt[:2] == '20':\n        dt = dt[2:]\n    if dt[:2] == '21':\n        dt = dt[2:]\n    if dt[:2] == '22':\n        dt = dt[2:]\n    if dt[:2] == '23':\n        dt = dt[2:]\n    if dt[:2] == '24':\n        dt = dt[2:]\n    if dt[:4] == '00':\n        dt = dt[4:]\n    if dt[:4] == '01':\n        dt = dt[4:]\n    if dt[:4] == '02':\n        dt = dt[4:]\n    if dt[:4] == '03':\n        dt = dt[4:]\n    if dt[:4] == '04':\n        dt = dt[4:]\n    if dt[:4] == '05':\n        dt = dt[4:]\n    if dt[:4] == '06':\n        dt = dt[4:]\n    if dt[:4] == '07':\n        dt = dt[4:]\n    if dt[:4] == '08':\n        dt = dt[4:]\n    if dt[:4] == '09':\n        dt = dt[4:]\n    if dt[:4] == '10':\n        dt = dt[4:]\n    if dt[:4] == '11':\n        dt = dt[4:]\n    if dt[:4] == '12':\n        dt = dt[4:]\n    if dt[:4] == '13':\n        dt = dt[4:]\n    if dt[:4] == '14':\n        dt = dt[4:]\n    if dt[:4] == '15':\n        dt = dt[4:]\n    if dt[:4] == '16':\n        dt = dt[4:]\n    if dt[:4] == '17':\n        dt = dt[4:]\n    if dt[:4] == '18':\n        dt = dt[4:]\n    if dt[:4] == '19':\n        dt = dt[4:]\n    if dt[:4] == '20':\n        dt = dt[4:]\n    if dt[:4] == '21':\n        dt = dt[4:]\n    if dt[:4] == '22':\n        dt = dt[4:]\n    if dt[:4] == '23':\n        dt = dt[4:]\n    if dt[:4] == '24':\n        dt = dt[4:]\n    if dt[:4] == '25':\n        dt = dt[4:]\n    if dt[:4] == '26':\n        dt = dt[4:]\n    if dt[:4] == '27':\n        dt = dt[4:]\n    if dt[:4] == '28':\n        dt = dt[4:]\n    if dt[:4] == '29':\n        dt = dt[4:]\n    if dt[:4] == '30':\n        dt = dt[4:]\n    if dt[:4] == '31':\n        dt = dt[4:]\n    if dt[:4] == '32':\n        dt = dt[4:]\n    if dt[:4] == '33':\n        dt = dt[4:]\n    if dt[:4] == '34':\n        dt = dt[4:]\n    if dt[:4] == '35':\n        dt = dt[4:]\n    if dt[:4] == '36':\n        dt = dt[4:]\n    if dt[:4] == '37':\n        dt = dt[4:]\n    if dt[:4] == '38':\n        dt = dt[4:]\n    if dt[:4] == '39':\n        dt = dt[4:]\n    if dt[:4] == '40':\n        dt = dt[4:]\n    if dt[:4] == '41':\n        dt = dt[4:]\n    if dt[:4] == '42':\n        dt = dt[4:]\n    if dt[:4] == '43':\n        dt = dt[4:]\n    if dt[:4] == '44':\n        dt = dt[4:]\n    if dt[:4] == '45':\n        dt = dt[4:]\n    if dt[:4] == '46':\n        dt = dt[4:]\n    if dt[:4] == '47':\n        dt = dt[4:]\n    if dt[:4] == '48':\n        dt = dt[4:]\n    if dt[:4] == '49':\n        dt = dt[4:]\n    if dt[:4] == '50':\n        dt = dt[4:]\n    if dt[:4] == '51':\n        dt = dt[4:]\n    if dt[:4] == '52':\n        dt = dt[4:]\n    if dt[:4] == '53':\n        dt = dt[4:]\n    if dt[:4] == '54':\n        dt = dt[4:]\n    if dt[:4] == '55':\n        dt = dt[4:]\n    if dt[:4] == '56':\n        dt = dt[4:]\n    if dt[:4] == '57':\n        dt = dt[4:]\n    if dt[:4] == '58':\n        dt = dt[4:]\n    if dt[:4] == '59':\n        dt = dt[4:]\n    if dt[:4] == '60':\n        dt = dt[4:]\n    if dt[:4] == '61':\n        dt = dt[4:]\n    if dt[:4] == '62':\n        dt = dt[4:]\n    if dt[:4] == '63':\n        dt = dt[4:]\n    if dt[:4] == '64':\n        dt = dt[4:]\n    if dt[:4] == '65':\n        dt = dt[4:]\n    if dt[:4] == '66':\n        dt = dt[4:]\n    if dt[:4] == '67':\n        dt = dt[4:]\n    if dt[:4] == '68':\n        dt = dt[4:]\n    if dt[:4] == '69':\n        dt = dt[4:]\n    if dt[:4] == '70':\n        dt = dt[4:]\n    if dt[:4] == '71':\n        dt = dt[4:]\n    if dt[:4] == '72':\n        dt = dt[4:]\n    if dt[:4] == '73':\n        dt = dt[4:]\n    if dt[:4] == '74':\n        dt = dt[4:]\n    if dt[:4] == '75':\n        dt = dt[4:]\n    if dt[:4] == '76':\n        dt = dt[4:]\n    if dt[:4] == '77':\n        dt = dt[4:]\n    if dt[:4] == '78':\n        dt = dt[4:]\n    if dt[:4] == '79':\n        dt = dt[4:]\n    if dt[:4] == '80':\n        dt = dt[4:]\n    if dt[:4] == '81':\n        dt = dt"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    my_format = '%Y-%m-%d'\n    dt = dt.split('-')\n    if dt[1] == '01':\n        return str(dt[0]) + '-' + '01-' + dt[2] + '-' + dt[4] + '-' + dt[6]\n    elif dt[1] == '02':\n        return str(dt[0]) + '-' + '02-' + dt[2] + '-' + dt[4] + '-' + dt[6]\n    elif dt[1] == '03':\n        return str(dt[0]) + '-' + '03-' + dt[2] + '-' + dt[4] + '-' + dt[6]\n    else:\n        return str(dt[0]) + '-' + '04-' + dt[2] + '-' + dt[4] + '-' + dt[6]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'^(0[1-9]|[12][0-9]|3[01])[- ](0[1-9]|1[012])$', dt):\n        return '-' + dt[:-1]\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    # create a date\n    date = date[0] + date[1] + date[2]\n    # change date format\n    date = date.replace('-','')\n    date = date.replace('-','')\n    date = date.replace('-','')\n    date = date.replace('-','')\n    date = date.replace('-','')\n    date = date.replace('-','')\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if isinstance(dt, str):\n        dt_splitted = dt.split('-')\n        if len(dt_splitted) == 2:\n            return dt_splitted\n        elif len(dt_splitted) == 3:\n            return dt_splitted[0], dt_splitted[1], dt_splitted[2]\n        else:\n            return 'Not a valid date'\n    else:\n        return 'Not a valid date'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sorted_list = sorted(my_list)\n    for i in range(len(sorted_list)):\n        j = i\n        while j>0 and sorted_list[j-1] > sorted_list[j]:\n            sorted_list[j-1], sorted_list[j] = sorted_list[j], sorted_list[j-1]\n            j -= 1\n    return sorted_list\n    \n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for step in range(1,len(my_list)):\n        for j in range(step,0, -1):\n            if my_list[j] > my_list[j-1]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-1]\n                my_list[j-1] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    x = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j] > my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_helper(my_list):\n        '''\n        Compute all the shell sort steps.\n        '''\n        pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    arr = my_list\n    print('Shell Sort - Time taken:'+ str(time.time() - start_time) +'secs')\n    # Best case, divide list into two sublists.\n    # Time complexity: O(n^2)\n    # Space complexity: O(n)\n    # This is a slow version.\n    step = len(arr) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Calculate the number of items needed to divide the array\n    n = len(my_list)\n    # Calculate the number of steps\n    steps = (n-1) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # we're going to iterate through the array, and swap every element with itself\n    # we're using half of the array as test\n    # since the time complexity of the algorithm is O(n^2), we don't need to sort the array twice\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == 1 and len(test_tup2) == 1:\n        if test_tup1[0] == test_tup2[0]:\n            return(test_tup1[0], test_tup2[0])\n        else:\n            return(\"ERROR\", \"One or more of the elements should be the same\")\n    else:\n        if len(test_tup1) == 1:\n            if test_tup2[0] == test_tup1[0]:\n                return(test_tup2[0], test_tup1[0])\n            else:\n                return(\"ERROR\", \"One or more of the elements should be the same\")\n        elif len(test_tup2) == 1:\n            if test_tup1[0] == test_tup2[0]:\n                return(test_tup1[0], test_tup2[0])\n            else:\n                return(\"ERROR\", \"One or more of the elements should be the same\")\n        else:\n            if test_tup1[0] == test_tup2[0]:\n                return(test_tup1[0], test_tup2[0])\n            else:\n                return(\"ERROR\", \"One or more of the elements should be the same\")\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [\n        (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]),\n        (test_tup1[0] + test_tup2[1], test_tup1[1] + test_tup2[0])\n    ]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(test_tup1 & test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_list = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            new_list.append(i)\n    return new_list\n    \n    \ndef list_functions(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort()\n    return test_list\n    \ndef list_functions_2(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort()\n    return test_list\n    \ndef list_functions_2_with_tuples(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[0])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[1])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_2(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[2])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_3(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[3])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_4(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[4])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_5(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[5])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_6(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[6])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_7(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[7])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_8(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[8])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_9(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[9])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_10(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[10])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_11(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[11])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_12(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[12])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_13(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[13])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_14(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[14])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_15(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[15])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_16(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[16])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_17(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[17])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_18(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[18])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_19(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list.sort(key = lambda x: x[19])\n    return test_list\n    \ndef list_functions_2_with_tuples_and_tuple_20(test_list):\n    '''\n    Write a function that takes a list and returns a list with the elements of the list\n    sorted in order from smallest to largest.\n    '''\n    test_list"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup = []\n    for i in range(len(test_tup1)):\n        test_tup.append((test_tup1[i], test_tup2[i]))\n    return test_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    ans = []\n    for i in range(len(test_tup1)):\n        ans.append(test_tup1[i] + test_tup2[i])\n    return ans"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    l_1 = len(test_tup1)\n    l_2 = len(test_tup2)\n    if l_1!= l_2:\n        return None\n    l_out = 0\n    for i in range(l_1):\n        l_out = l_out + (test_tup1[i]!= test_tup2[i])\n    return l_out\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Numbers of tuples must be the same')\n    output = []\n    for x in range(len(test_tup1)):\n        output.append(test_tup1[x] + test_tup2[x])\n    return output\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return round(a*b*c, 2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = (b**2 - 4*a*c)**(1/2)\n    if (d < 0):\n        return \"Cannot find a directrix\"\n    else:\n        return math.sqrt(d)\n        \ndef chebyshev_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a chebyshev curve.\n    '''\n    d = (b*c)/(a*c - b*a)\n    if (d < 0):\n        return \"Cannot find a directrix\"\n    else:\n        return math.sqrt(d)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = 0\n    x2 = 0\n    x3 = 0\n    x4 = 0\n    if a >= 0:\n        x1 = -b/a\n    if a < 0:\n        x2 = -b/a\n    if b >= 0:\n        x3 = -c/b\n    if b < 0:\n        x4 = -c/b\n    return [x1, x2, x3, x4]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a == 0): \n        print(\"Enter a positive number: \") \n    else: \n        if (b == 0): \n            print(\"Enter two positive numbers: \") \n        elif (c == 0): \n            print(\"Enter a positive number: \") \n        elif (b == b**2 - 4*a*c): \n            print(\"Two roots are within 1 standard deviation: \") \n        elif (b**2 - 4*a*c) >= 1: \n            print(\"Two roots are within 1 standard deviation: \") \n        else: \n            print(\"No roots exist within 1 standard deviation.\") \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return c[0]*(a**2 + b**2 + c[0]**2)**(1/2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    parabola = []\n    i = a\n    j = b\n    k = c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    n = a + b + c\n    s = n**2\n    return s\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = b**2 - (a*b) + c\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #Here, we want the equation of a parabola to be (x-b)/(c-a)\n    #To do this, we must write a function that returns the factorial of the equation of the parabola.\n    #In other words, we return the factorial of the equation of the parabola.\n    #Here we are using the factorial function, which is an operation that returns the factorial of an input number.\n    #There is also an example that is included in the article, but it was not mentioned here.\n    #https://en.wikipedia.org/wiki/Parabola_directrix\n    if a == 0:\n        return 1\n    if b == 0:\n        return 1\n    if c == 0:\n        return 1\n    else:\n        return a*parabola_directrix(a, b, c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    x = np.linspace(a, b, 1000)\n    return x*x\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Find out the number of elements in the first list.\n    length1 = len(list1)\n    # Find out the number of elements in the second list.\n    length2 = len(list2)\n    # If they have the same number of elements, return true.\n    if length1 == length2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Hint: You'll need to create two lists and compare them in order to get true or false\n    # HINT: You'll need to use the built-in function inbuilt_functions.py to do this!\n    \n    if len(list1) == len(list2):\n        return True\n    \n    for element in list1:\n        if element in list2:\n            list2.remove(element)\n    \n    return len(list2)!= 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1)) == len(set(list2))\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n    elif len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                return True\n    else:\n        return False\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n    elif len(list1) == len(list2):\n        return False\n    \n    elif len(list1) == len(set(list1)):\n        return False\n    \n    elif len(list2) == len(set(list2)):\n        return False\n    \n    elif set(list1) == set(list2):\n        return True\n    \n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                common.append(list1[i])\n    if len(common) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for element in list1:\n        if element in list2:\n            list2.remove(element)\n    return len(list2) == 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = int(base1)\n    base2 = int(base2)\n    h = int(height)\n    if base1 > 0 and base2 > 0:\n        trapezium = (base1 + base2 + abs(base1 - base2)) / 2\n        return round(trapezium,2)\n    else:\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length1 = base1*height/2\n    length2 = base2*height/2\n    lengths = [length1, length2]\n    sorted_lengths = sorted(lengths)\n    base1,base2 = sorted_lengths[0],sorted_lengths[1]\n    return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    mid=1+(height//2)\n    if height%2==0:\n        return ((base1+base2)/2)*mid\n    else:\n        return ((base1+base2)/2)*mid+height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height < base1) or (height < base2):\n        raise ValueError('The height must be greater than the base1 and base2')\n    height_trapezium = base1 + height\n    if (height_trapezium < base1) or (height_trapezium < base2):\n        raise ValueError('The height must be greater than the base1 and base2')\n    fibonacci_trapezium = [1,2]\n    for i in range(3,height_trapezium):\n        fibonacci_trapezium.append(fibonacci_trapezium[i-2]+fibonacci_trapezium[i-1])\n    return (fibonacci_trapezium[height_trapezium//2]/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    try:\n        a = base1\n        b = base2\n        h = height\n        if a+b > h:\n            return abs(a+b - h)\n        else:\n            return abs(a+b - h/2)\n    except ZeroDivisionError:\n        return \"Division by zero\"\n        \nprint(median_trapezium(3,9,5))\nprint(median_trapezium(5,7,7))\nprint(median_trapezium(3,8,10))"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height == 0):\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height % 2) == 0:\n        return base1 + (base2 + base1) / 2\n    else:\n        return base1 * height + base2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height == 0):\n        return base1\n    elif (height == 1):\n        return base2\n    else:\n        middle = (base1 + base2) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    m1 = int((height/2))\n    m2 = int((height/2) * (height/2))\n    if (m1+m2)%2 == 0:\n        return (int((m1+m2) / 2))\n    else:\n        return m1\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Your code here\n    # Check whether the height is even\n    # If it is not, return None\n    # Else, calculate the median\n    # I.e. if the height is odd, return the average\n    # If the height is even, return the value of the middle\n    # If the height is even and the height is odd, return the average\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        return True\n    elif arr[len(arr) - 1] > number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] < number < arr[j]:\n            return True\n        i += 1\n        j -= 1\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    #  Initialize the number in the range\n    number_in_range = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        \n        # Check if the number is greater than the element\n        if arr[i] > number:\n            number_in_range += 1\n            \n    # If the number is greater than the array then return false\n    if number_in_range > 0:\n        return False\n    \n    # Otherwise return true\n    return True\n    "
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[number] > arr[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) < number:\n        return False\n    else:\n        for i in range(number-1):\n            if arr[i] > arr[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        if arr[0] > number:\n            return True\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    result = []\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'b':\n            result.append(text[i-1:i+2])\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a([bcdef])', text)!= None\n    # text = re.sub('a\\[bc\\]', '', text)\n    # return bool(re.search('a\\[bc\\]', text))\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    return match\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matches = re.findall('a', text)\n    matches.remove('')\n    if len(matches) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a([bB])\\1\"\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    for match in matches:\n        print(match.start(), match.end())\n    print(\"--------\")\n    for match in matches:\n        print(match.group())\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'a(\\s+[A-Z]{1,3})\\b', text)!= None\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more c's.\n    '''\n    return re.search(r'a(\\s+[C-Z]{1,3})\\b', text)!= None\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more e's.\n    '''\n    return re.search(r'a(\\s+[E-Z]{1,3})\\b', text)!= None\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more f's.\n    '''\n    return re.search(r'a(\\s+[F-Z]{1,3})\\b', text)!= None\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more g's.\n    '''\n    return re.search(r'a(\\s+[G-Z]{1,3})\\b', text)!= None\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more h's.\n    '''\n    return re.search(r'a(\\s+[H-Z]{1,3})\\b', text)!= None\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more i's.\n    '''\n    return re.search(r'a(\\s+[I-Z]{1,3})\\b', text)!= None\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more j's.\n    '''\n    return re.search(r'a(\\s+[J-Z]{1,3})\\b', text)!= None\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more k's.\n    '''\n    return re.search(r'a(\\s+[K-Z]{1,3})\\b', text)!= None\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more l's.\n    '''\n    return re.search(r'a(\\s+[L-Z]{1,3})\\b', text)!= None\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more m's.\n    '''\n    return re.search(r'a(\\s+[M-Z]{1,3})\\b', text)!= None\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more n's.\n    '''\n    return re.search(r'a(\\s+[N-Z]{1,3})\\b', text)!= None\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more o's.\n    '''\n    return re.search(r'a(\\s+[O-Z]{1,3})\\b', text)!= None\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more p's.\n    '''\n    return re.search(r'a(\\s+[P-Z]{1,3})\\b', text)!= None\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more q's.\n    '''\n    return re.search(r'a(\\s+[Q-Z]{1,3})\\b', text)!= None\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more r's.\n    '''\n    return re.search(r'a(\\s+[R-Z]{1,3})\\b', text)!= None\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more s's.\n    '''\n    return re.search(r'a(\\s+[S-Z]{1,3})\\b', text)!= None\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more t's.\n    '''\n    return re.search(r'a(\\s+[T-Z]{1,3})\\b', text)!= None\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more u's.\n    '''\n    return re.search(r'a(\\s+[U-Z]{1,3})\\b', text)!= None\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more v's.\n    '''\n    return re.search(r'a(\\s+[V-Z]{1,3})\\b', text)!= None\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more w's.\n    '''\n    return re.search(r'a(\\s+[W-Z]{1,3})\\b', text)!= None\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more x's.\n    '''\n    return re.search(r'a(\\s+[X-Z]{1,3})\\b', text)!= None\ndef text_match_thirty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more y's.\n    '''\n    return re.search(r'a(\\s+[Y-Z]{1,3})\\b', text)!= None\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more z's.\n    '''\n    return re.search(r'a(\\s+[Z-Z]{1,3})\\b', text)!= None\ndef text_match_forty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more z's.\n    '''\n    return re.search(r'a(\\s+[Z-Z]{1,3})\\b', text)!= None\ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more u's.\n    '''\n    return re.search(r'a(\\s+[U-Z]{1,3})\\b', text)!= None\ndef text_match_fifty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more u's.\n    '''\n    return re.search(r'a(\\s+[U-Z]{1,3})\\b', text)!= None\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more v's.\n    '''\n    return re.search(r'a(\\s+[V-Z]{1,3})\\b', text)!= None\ndef text_match_sixty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more v's.\n    '''\n    return re.search(r'a(\\s+[V-Z]{1,3})\\b', text)!= None\ndef text_match_seventy(text):\n    ''"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return (re.search(r'a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(v(w(x(y(z(a(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f(g(h(i(j(k(l(m(n(p(q(r(s(t(u(x(y(z(a(b(c(d(e(f("
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_low = text.lower()\n    pattern = '\\s([a-z])(\\s)([0-9]{3})\\s\\.'\n    result = re.search(pattern, text_low)\n    if result is None:\n        return 'No match'\n    else:\n        return result.group(1) +'' + result.group(2)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    for c in text:\n        if c in 'abcd':\n            print('pass')\n            continue\n        print('error')\n        break\n    print('result')\n    return\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a\\+', text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    if n <= 10 :\n        return n%10\n    else :\n        n = n//10\n        return n%10+lastDigit(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Your code here\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lastDigit = int(str(n)[-1])\n    print(lastDigit)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    res = ''\n    for i in str(n):\n        res = i + res\n    return res[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n)!= int or n < 0 :\n        return None\n    digits = [int(x) for x in str(n)]\n    digit = digits[-1]\n    return digit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    else :\n        return last_Digit(n-1) + last_Digit(n-2)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    n = n[-1:]\n    return int(n)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code goes here\n    return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i > 0:\n            neg_nos.append(-i)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for elem in list1:\n        if elem < 0:\n            neg.append(elem)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result\n    \ndef main():\n    '''\n    Write a python program to print the first three positive numbers from a list.\n    '''\n    lst = []\n    for i in range(0, 3):\n        lst.append(int(input(\"Enter the next number \")))\n    for j in range(0, 3):\n        print(lst[j])\n        \nmain()\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(-list1[i])\n        else:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i > 0:\n            neg_list.append(-1*i)\n        else:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for item in list1:\n        if (item < 0):\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return list1[::-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg=[]\n    for i in list1:\n        if i<0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative=[]\n    for i in list1:\n        if i<0:\n            negative.append(i)\n    return negative\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    c=[]\n    for i in str1:\n        if i % 2!= 0:\n            c.append(i)\n    str2 = \"\".join(c)\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if type(str1)!= str:\n        return 'The function should be passed a string'\n    else:\n        str1 = str1.lower()\n        count = 0\n        for i in str1:\n            if i == 'o':\n                str1 = str1.replace(i,'')\n                count += 1\n        if count % 2!= 0:\n            return 'The string does not have odd characters'\n        else:\n            return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Write your code here\n    # remove character from index 0, 1, 2, 3, 4\n    if len(str1) < 3:\n        return str1\n    if str1[0] % 2!= 0:\n        return remove_odd(str1[1:]) + str1[0]\n    else:\n        return str1[1:] + str1[0]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(0, len(str1)):\n        if i % 2!= 0:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = []\n    for x in str1:\n        if x % 2 == 1:\n            new_str.append(x)\n    return ''.join(new_str)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1.isnumeric():\n        if int(str1) % 2 == 0:\n            return str(int(str1)-1)\n        else:\n            return str(int(str1)-2)\n    else:\n        return str1\n    \nprint(remove_odd('1234')"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i % 2 == 0:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace('a','z')\n    str1 = str1.replace('o','q')\n    str1 = str1.replace('m','p')\n    str1 = str1.replace('n','g')\n    str1 = str1.replace('u','y')\n    str1 = str1.replace('i','x')\n    str1 = str1.replace('t','s')\n    str1 = str1.replace('d','f')\n    str1 = str1.replace('e','r')\n    str1 = str1.replace('h','g')\n    str1 = str1.replace('v','b')\n    str1 = str1.replace('z','a')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # convert input to list\n    str_list = list(str1)\n    \n    # initialize output\n    out = []\n    \n    # iterate over list\n    for x in str_list:\n        \n        # if string contains odd characters\n        if x % 2!= 0:\n            # check if element in list is not in out\n            if x not in out:\n                # append element to out\n                out.append(x)\n            # if not append element in out\n            else:\n                # remove element from list\n                str_list.remove(x)\n                # append element to out\n                out.append(x)\n            # print the output\n            print(out)\n    \n    # return the final output\n    return out\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # your code goes here\n    list1 = list(str1)\n    list1.remove(list1[0])\n    list1.remove(list1[len(list1) - 1])\n    list1 = \"\".join(list1)\n    return list1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_bidirectional_pair = 0\n    for item in test_list:\n        if (item[1], item[0]) in bidirectional_pairs:\n            total_bidirectional_pair += 1\n    print('The total number of bidirectional pairs in list is ', total_bidirectional_pair)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = {}\n    for i in range(len(test_list)-1):\n        key = str(test_list[i][0]) + str(test_list[i+1][0])\n        if key not in bidirectional:\n            bidirectional[key] = 0\n        bidirectional[key] += 1\n    return bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_count = 0\n    for pair in test_list:\n        total_count += len(pair)\n    print total_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for idx in test_list:\n        if test_list[idx] == test_list[idx+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #Step 1: Dictize the test_list\n    test_list_dict = dict()\n    for element in test_list:\n        if element[1] in test_list_dict:\n            test_list_dict[element[1]].append(element[0])\n        else:\n            test_list_dict[element[1]] = [element[0]]\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    #map\n    bidirectional_count = {}\n    for i in test_list:\n        if i[0] in bidirectional_count:\n            bidirectional_count[i[0]] += 1\n        else:\n            bidirectional_count[i[0]] = 1\n    \n    #sorted\n    bidirectional_count_sorted = sorted(bidirectional_count.items(),key=lambda x:x[1],reverse=True)\n    bidirectional_count_sorted_sorted = sorted(bidirectional_count_sorted,key=lambda x:x[1],reverse=True)\n    \n    bidirectional_count_sorted = []\n    for i in range(len(bidirectional_count_sorted_sorted)):\n        bidirectional_count_sorted.append(bidirectional_count_sorted_sorted[i][0])\n    \n    return bidirectional_count_sorted\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward = 0\n    backward = 0\n    for i in range(len(test_list)):\n        forward += test_list[i][1]\n        backward += test_list[i][0]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    def join(L):\n        '''\n        Create a single integer out of a list of ints\n        '''\n        try:\n            return int(''.join(str(n) for n in L))\n        except:\n            return None\n    \n    return join\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    new_list = []\n    if len(L) > 1:\n        for i in range(len(L)-1, -1, -1):\n            new_list.append(L[i])\n        new_list.reverse()\n        return new_list[0] + new_list[1]\n    else:\n        return L[0]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([int(x) for x in L])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    new_list = []\n    for i in range(len(L)):\n        new_list.append(L[i])\n    return int(''.join(new_list))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Use the function to join a list of integers into a single integer\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x + y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L_len = len(L)\n    if L_len == 0:\n        return 0\n    if L_len == 1:\n        return L[0]\n    s = [0 for i in range(L_len)]\n    s[0] = L[0]\n    for i in range(1, L_len):\n        s[i] = L[i] + s[i - 1]\n    return s[-1]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # define function\n    def join(L):\n        '''\n        Generate a single int from a list of ints\n        '''\n        return int(\"\".join(map(str,L)))\n    \n    # make list of all elements\n    L = [x for x in L]\n    \n    # reduce list by splitting it by space\n    return join(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    max_val = max(L)\n    val = 0\n    for i in range(len(L)):\n        val += L[i] * (i+1)\n    return max_val * val\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #Split the text into a list of words.\n    words = text.split()\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    if \"adverb\" in text.lower():\n        regex = r'\\b([a-z]+\\.)(?=) \\b'\n        matches = re.findall(regex, text, flags = re.IGNORECASE)\n        for match in matches:\n            print(match)\n            \n    else:\n        print(\"No adverb in sentence\")\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.strip(' ')\n    m = re.match('([a-z]{2,})',text)\n    if m is not None:\n        return (m.group(0),m.start())\n    else:\n        raise ValueError('String contains an invalid character')\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'[0-9]* \\d+ (ADV)'# adverb start number\n    pattern_two = r'\\d+ (ADV)' # adverb end number\n    pattern_3 = r'\\d+ \\w*' # adverb words\n    result = []\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['possess', 'accusatively','recursively', 'appreciatively','recursively', 'irregularly', 'appreciatively', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregularly', 'irregula"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex_for_adverb = r'[aeiou]+'\n    regex_for_start = r'\\b(' + regex_for_adverb + r')\\b'\n    regex_for_end = r'\\b(' + regex_for_adverb + r')\\b(?:,\\s*' + regex_for_adverb + r')?\\b'\n    regex_for_inp = r'\\b(' + regex_for_adverb + r'\\b' + r'\\s*' + regex_for_inp + r')\\b'\n    regex_for_pos_tag = r'\\b(' + regex_for_adverb + r'\\b' + r'\\s*\\w+\\b' + r')\\b'\n    regex_for_verb = r'\\b(' + regex_for_adverb + r'\\b' + r'\\s*\\w+\\b' + r')\\b'\n    regex_for_end_of_verb = r'\\b(' + regex_for_adverb + r'\\b' + r'\\s*\\w+\\b' + r')\\b'\n    regex_for_subj_tag = r'\\b(' + regex_for_adverb + r'\\b' + r'\\s*\\w+\\b' + r')\\b'\n    regex_for_verb_tag = r'\\b(' + regex_for_adverb + r'\\b' + r'\\s*\\w+\\b' + r')\\b'\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # First adverb word\n    adverb_word = text.split(' ')[0]\n    #print('adverb_word', adverb_word)\n    \n    # Start position of adverb word\n    start = 0\n    #print('start', start)\n    \n    for i in range(0, len(text)):\n        if '{' in text[i] and text[i] == \"{\":\n            start = i\n        if '}' in text[i] and text[i] == '{':\n            end = i\n            break\n        if \"adverb\" in text[i]:\n            #print('find_adverb_position in text:', text[i])\n            if text[i] == 'adverb':\n                if start!= 0 and text[i-1] =='':\n                    #print('found start', start, 'adverb', text[i-1])\n                    if start == len(text)-2 and text[i+1] =='':\n                        #print('found end', end, 'adverb', text[i+1])\n                        start = i+2\n                        return start, end\n            if text[i] == '{':\n                if start == 0 and text[i-1] =='':\n                    #print('found start', start, 'adverb', text[i-1])\n                    if start!= 0 and text[i+1] =='':\n                        #print('found end', end, 'adverb', text[i+1])\n                        start = i+1\n                        return start, end\n            if text[i] == '}':\n                if start!= 0 and text[i-1] =='':\n                    #print('found start', start, 'adverb', text[i-1])\n                    if start!= len(text)-1 and text[i+1] =='':\n                        #print('found end', end, 'adverb', text[i+1])\n                        start = i+2\n                        return start, end\n            if text[i] == 'adverb':\n                if start == 0 and text[i-1] =='':\n                    #print('found start', start, 'adverb', text[i-1])\n                    if start!= 0 and text[i+1] =='':\n                        #print('found end', end, 'adverb', text[i+1])\n                        start = i+1\n                        return start, end\n    return start, 0\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word_list = re.findall('(?:[^\\w\\s]|\\w+)(?:\\s|(?<=[0-9])\\.)+', text)\n    adverbs = [('the', ','), ('to', ','), ('to', ','), ('to', ','), ('a', ','), ('on', ','),\n    ('a', ','), ('the', ','), ('that', ','), ('that', ','), ('that', ','), ('it', ','), ('it', ','),\n    ('it', ','), ('a', ','), ('an', ','), ('an', ','), ('an', ','), ('an', ','), ('as', ','),\n    ('an', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ','),\n    ('that', ','), ('that', ','), ('that', ','), ('that', ','), ('that', ',"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence_words = re.findall(r'\\w+', text)\n    sentence_words_long = re.findall(r'\\w+', text)\n    sentence_words_long = sentence_words_long[0:20]\n    # print(sentence_words_long)\n    adverbs_position = []\n    for i in range(len(sentence_words)):\n        if sentence_words[i] in sentence_words_long:\n            adverbs_position.append(i)\n    adverbs_position = sorted(adverbs_position, key=lambda x: sentence_words_long[x], reverse=True)\n    # print(adverbs_position)\n    adverb_positions = []\n    for i in range(len(adverbs_position)):\n        # print(adverbs_position[i])\n        adverb_positions.append(adverbs_position[i])\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    for index, elem in enumerate(text):\n        if elem == '-':\n            positions.append(index)\n    return positions\ndef get_adverb_positions(sentence, position):\n    '''\n    Return the position of the first adverb in the sentence.\n    '''\n    first_adverb_position = position[0]\n    for index, elem in enumerate(sentence):\n        if index == position:\n            return first_adverb_position\n    return None\ndef get_last_adverb_positions(sentence):\n    '''\n    Return the position of the last adverb in the sentence.\n    '''\n    last_adverb_position = sentence.index('-')\n    return last_adverb_position\ndef find_adverbs(sentence):\n    '''\n    Return all adverbs in the sentence.\n    '''\n    adverbs = []\n    for index, elem in enumerate(sentence):\n        if elem == '-':\n            adverbs.append(sentence[index+1])\n    return adverbs\ndef find_noun_positions(sentence):\n    '''\n    Return the position of the first noun in the sentence.\n    '''\n    positions = []\n    for index, elem in enumerate(sentence):\n        if elem == '-':\n            positions.append(index)\n    return positions\ndef get_noun_positions(sentence):\n    '''\n    Return the position of the first noun in the sentence.\n    '''\n    first_noun_position = sentence.index('-')\n    for index, elem in enumerate(sentence):\n        if index == first_noun_position:\n            return first_noun_position\n    return None\ndef get_past_noun(sentence):\n    '''\n    Return the position of the first past noun in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 2:\n            return position\n    return None\ndef get_past_verb(sentence):\n    '''\n    Return the position of the first past verb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position\n    return None\ndef get_past_adverb(sentence):\n    '''\n    Return the position of the first past adverb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position\n    return None\ndef get_past_noun_verb(sentence):\n    '''\n    Return the position of the first past noun and verb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 2:\n            return position, sentence[position+1]\n    return None\ndef get_past_adverb_noun(sentence):\n    '''\n    Return the position of the first past adverb and noun in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_noun_verb(sentence):\n    '''\n    Return the position of the first noun and verb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_past_verb_adverb(sentence):\n    '''\n    Return the position of the first past verb and adverb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_past_noun_verb_adverb(sentence):\n    '''\n    Return the position of the first past noun, verb and adverb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_past_adverb_noun_verb(sentence):\n    '''\n    Return the position of the first past adverb, noun and verb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_adverb_noun(sentence):\n    '''\n    Return the position of the first adverb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_past_adverb_noun_verb(sentence):\n    '''\n    Return the position of the first past adverb and noun in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_past_verb_noun_adverb(sentence):\n    '''\n    Return the position of the first past verb, noun and adverb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_adverb_adjective(sentence):\n    '''\n    Return the position of the first adverb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_past_adverb_adjective(sentence):\n    '''\n    Return the position of the first past adverb and adjective in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_past_adverb_noun_adjective(sentence):\n    '''\n    Return the position of the first past adverb, noun and adjective in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_noun_noun_adverb(sentence):\n    '''\n    Return the position of the first noun, noun and adverb in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_past_adverb_noun_adverb(sentence):\n    '''\n    Return the position of the first past adverb, noun and adjective in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)\n    for position in positions:\n        if position < len(sentence) - 1:\n            return position, sentence[position+1]\n    return None\ndef get_past_adverb_noun_adjective(sentence):\n    '''\n    Return the position of the first past adverb, noun and adjective in the sentence.\n    '''\n    positions = find_adverb_positions(sentence)"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l == 'tiny':\n        return 0.5*3.141592654*l**3\n    elif l =='small':\n        return 3.141592654*l**2\n    elif l =='medium':\n        return 6.2831853071795865*l**2\n    else:\n        return 6.2831853071795865*l**3\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def area(r, s):\n        return (r*s)*r*s\n    def surface_area(r):\n        return area(r, r)*s\n    def volume(r, s):\n        return (r*s)*r\n    def cdf(r):\n        return (1/(s*(s-1)))*(2*r-1)\n    def surfacearea_cube(r):\n        return surfacearea_cube(r)*cdf(r)\n    def surfacearea_cubes(l):\n        return surfacearea_cubes(l)*cdf(l)\n    return surfacearea_cube(l)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def area_cube(base_length, height):\n        area = base_length * height\n        return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l * l * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                s += 1\n    return s * 4\n    \ndef square(s, x, y, z):\n    '''\n    Write a function that returns the square of a given list of elements.\n    '''\n    return s * x * y * z\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # write your code here\n    a, b, c = l\n    return 4*a*b*c\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #l = list(map(int, input(\"Enter a size of a cube: \").split()))\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                if l[i]*l[j]*l[k] == l[i]*l[j]*l[k]:\n                    print(\"The surface area of a cube of size\",l[i],\"is\",l[i]*l[j]*l[k])\n                    return\n    print(\"The surface area of a cube of size\",l[0],\"is\",0)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if type(l) == list:\n        a = 0\n        for x in range(len(l)):\n            for y in range(len(l[x])):\n                for z in range(len(l[x][y])):\n                    if l[x][y][z] == 1:\n                        a += 3.14159*(l[x][y][z]**3)*(0.5)**2\n        return a\n    else:\n        print('Invalid input')\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Your code here\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum = 0\n    pos = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if nums[i] > 0:\n            pos += 1\n        if nums[i] < 0:\n            neg += 1\n    return (pos/sum)*100\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    negative = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n        else:\n            negative += 1\n    if positives > 0:\n        ratio = positives/len(nums)\n    elif negative > 0:\n        ratio = negative/len(nums)\n    else:\n        ratio = 0\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        if num >= 0:\n            total += num\n    return total / len(nums)\n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total / len(nums)\n    \ndef no_negative_count(nums):\n    '''\n    Write a function to find the ration of no-negative numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += num\n    return total / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n    # Solution 3\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i',[])\n    for item in nums:\n        if item>0:\n            arr.append(item)\n    count=len(arr)\n    return count/len(arr)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums)==0:\n        return []\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = nums[:]\n    i = 0\n    while i < len(nums):\n        if nums[i] > 0:\n            nums[i] = (nums[i]/nums[i-1])\n        i += 1\n    return nums\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    nums = nums[:]\n    i = 0\n    while i < len(nums):\n        if nums[i] < 0:\n            nums[i] = (nums[i]*-1)\n        i += 1\n    return nums\ndef positive_average(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = nums[:]\n    i = 0\n    avg = 0\n    while i < len(nums):\n        if nums[i] > 0:\n            avg = avg + nums[i]\n        i += 1\n    return avg/len(nums)\ndef negative_average(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    nums = nums[:]\n    i = 0\n    avg = 0\n    while i < len(nums):\n        if nums[i] < 0:\n            avg = avg + nums[i]\n        i += 1\n    return avg/len(nums)\ndef sort_list(l):\n    '''\n    Write a function to sort the array using bubble sort.\n    '''\n    for i in range(len(l)-1):\n        for j in range(len(l)-1-i):\n            if l[j] > l[j+1]:\n                l[j], l[j+1] = l[j+1], l[j]\n    return l\ndef sort_array(l):\n    '''\n    Write a function to sort the array using bubble sort.\n    '''\n    for i in range(len(l)):\n        for j in range(len(l)-1-i):\n            if l[j] > l[j+1]:\n                l[j], l[j+1] = l[j+1], l[j]\n    return l\ndef select_sort(l):\n    '''\n    Write a function to sort the array using selection sort.\n    '''\n    for i in range(len(l)):\n        minimum = i\n        for j in range(i+1, len(l)):\n            if l[j] < l[minimum]:\n                minimum = j\n        l[i], l[minimum] = l[minimum], l[i]\n    return l\ndef insert_sort(l):\n    '''\n    Write a function to sort the array using insertion sort.\n    '''\n    for i in range(1, len(l)):\n        current = l[i]\n        j = i-1\n        while j >= 0 and current < l[j] :\n            l[j+1] = l[j]\n            j -= 1\n        l[j+1] = current\n    return l\ndef bubble_sort(l):\n    '''\n    Write a function to sort the array using bubble sort.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if l[j] < l[j+1]:\n                l[j], l[j+1] = l[j+1], l[j]\n    return l\ndef shell_sort(l):\n    '''\n    Write a function to sort the array using shell sort.\n    '''\n    n = len(l)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and l[j] < l[j-gap]:\n                l[j], l[j-gap] = l[j-gap], l[j]\n                j -= gap\n        gap //= 2\n    return l\ndef merge_sort(l):\n    '''\n    Write a function to sort the array using merge sort.\n    '''\n    def sort(l, pivot):\n        i = j = 0\n        while i < len(l):\n            if l[i] < pivot:\n                l[j] = l[i]\n                i += 1\n            else:\n                l[j] = l[i]\n                i += 1\n            j += 1\n        l[i] = l[j]\n    def merge_array(l, low, high):\n        if low == high:\n            return l\n        pivot = l[high]\n        i, j = low, high\n        while i < j:\n            if l[i] < pivot:\n                l[i] = l[j]\n                j -= 1\n            else:\n                i += 1\n        l[i] = pivot\n        return l\n    def insert(l, new, low, high):\n        if new == 0:\n            return\n        if new > pivot:\n            pivot = new\n            i, j = low, high\n        else:\n            i, j = low, high+1\n            while i < j and l[i] < new:\n                i += 1\n            while i < j and l[j] > new:\n                j -= 1\n            if i < j:\n                l[i], l[j] = l[j], l[i]\n        l[i+1], l[pivot] = l[pivot], l[i+1]\n        sort(l, i+1)\n    def shell_sort_helper(l, low, high):\n        if low >= high:\n            return\n        gap = low\n        for i in range(low, high, 1):\n            j = high-i\n            while j >= gap:\n                insert(l, new, low, j)\n                j -= gap\n            gap = gap+1\n        return\n    l = []\n    shell_sort_helper(l, 0, len(l)-1)\n    return l\ndef shell_sort_v2(l):\n    '''\n    Write a function to sort the array using shell sort.\n    '''\n    def shell_sort_v3(l, k):\n        n = len(l)\n        gap = n//k\n        while gap > 0:\n            for i in range(gap, n):\n                j = i\n                while j >= gap and l[j] < l[j-gap]:\n                    l[j], l[j-gap] = l[j-gap], l[j]\n                    j -= gap\n                l[j] = l[j-gap]\n            gap //= k\n    def shell_sort_v4(l, k):\n        n = len(l)\n        gap = n//k\n        while gap > 0:\n            for i in range(gap, n):\n                j = i\n                while j >= gap and l[j] < l[j-gap]:\n                    l[j], l[j-gap] = l[j-gap], l[j]\n                    j -= gap\n                l[j] = l[j-gap]\n            gap //= k\n    shell_sort_v4(l, 3)\n    return l\ndef quick_sort(l):\n    '''\n    Write a function to sort the array using quick sort.\n    '''\n    def quick_sort_helper(l, low, high):\n        if low >= high:\n            return\n        i = low\n        j = high\n        pivot = l[high]\n        while i < j:\n            while i < j and l[j] < pivot:\n                j -= 1\n            while l[i] > pivot and i < j:\n                i += 1\n            if i < j:\n                l[i], l[j] = l[j], l[i]\n        l[i], l[j] = l[j], l[i]\n        quick_sort_helper(l, low, i-1)\n        quick_sort_helper(l, i+1, high)\n    def quick_sort_v1(l, low, high):\n        if low >= high:\n            return\n        i = low\n        j = high\n        pivot = l[high]\n    "
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum = 0\n    for x in nums:\n        if x > 0:\n            sum += x\n    print(sum/len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # nums = array([-1, 0, 1])\n    max_pos = max(nums)\n    # print(max_pos)\n    l = len(nums)\n    # print(l)\n    for i in range(1, l+1):\n        # print(i)\n        # print(nums[i-1])\n        # if nums[i-1] == 0:\n        #     print('negative')\n        #     continue\n        pos_num = nums[i-1]\n        if pos_num > 0:\n            # print(pos_num)\n            # print(i)\n            # print(nums[i-1])\n            # print('positive')\n            if i == 1:\n                # print(nums[i-1])\n                # print(pos_num)\n                # print('positive')\n                return i\n            else:\n                # print(nums[i-1])\n                # print(pos_num)\n                # print('positive')\n                if nums[i-1] < pos_num:\n                    # print(nums[i-1])\n                    # print(pos_num)\n                    # print('positive')\n                    return i\n                else:\n                    # print(nums[i-1])\n                    # print(pos_num)\n                    # print('positive')\n                    return i\n        elif pos_num == 0:\n            # print(nums[i-1])\n            # print(pos_num)\n            # print('positive')\n            return i\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    sum=0\n    for i in range(len(list1)):\n        if list1[i]<0:\n            sum=sum+list1[i]\n    return sum\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Find largest negative number in list\n    # Do a max on the list to find the largest negative number\n    # If the list is empty, return the largest number\n    # If the list is not empty, return None\n    # If the largest negative number is negative, return it\n    # If the largest negative number is positive, return None\n    # If the largest negative number is 0, return None\n    # if any of the numbers in the list are negative, return None\n    \n    # Remove all negative numbers\n    for item in list1:\n        if item < 0:\n            return None\n    \n    # Return the largest number in list\n    return max(list1)\n    "
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1) if list1 else 0\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg = 0\n    for i in list1:\n        if i < 0:\n            neg += 1\n    if neg > 0:\n        return neg\n    else:\n        return 0\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for i in list1: \n        neg_list.append(-i)\n    return max(neg_list)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maximum = -1\n    for x in list1:\n        if x < 0:\n            maximum = max(maximum, x)\n        else:\n            maximum = min(maximum, x)\n    return maximum\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = None\n    for num in list1:\n        if num < 0:\n            if max == None:\n                max = num\n            elif num < max:\n                max = num\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    sortedList = sorted(list1)\n    largest_num = sortedList[0]\n    for i in sortedList:\n        if i < 0:\n            largest_num = i\n    return largest_num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for i in list1:\n        if -i > max_neg:\n            max_neg = -i\n    return max_neg\n        \n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create empty list\n    trimmed_list = []\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    output_list = []\n    for item in test_list:\n        new_tuple = tuple(item[i:i+K])\n        output_list.append(new_tuple)\n    return output_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # write your code here\n    return test_list[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed = []\n    for k in range(K):\n        trimmed.append(test_list.pop(0))\n    return trimmed\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if type(test_list) == tuple:\n        return test_list\n    else:\n        print('\\nTest:')\n        print('tuple expected to be a tuple of length', K,'',\\\n            'but it is not.')\n        return None\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    temp = test_list.pop(0)\n    for i in range(len(temp)):\n        if temp[i] < temp[0]:\n            temp[i] = temp[0]\n    test_list = tuple(temp)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, x in enumerate(test_list):\n        if i >= K:\n            test_list.pop(i-K)\n        else:\n            print(x)\n    print(test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # TODO: complete this function\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    i = 0\n    for item in test_list:\n        if i >= K:\n            break\n        yield item\n        i += 1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"Performing index wise multiplication of\", test_tup1, \"and\", test_tup2)\n    return test_tup1[0] * test_tup2[0]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #create a dictionary of indexes from first tuple and the second tuple\n    index_dict = {'first_index':0,'second_index':1}\n    index_dict_list = []\n    #create a list of the first tuple elements of the second tuple\n    index_list = [0]*len(test_tup2[0])\n    #create a list of the second tuple elements of the first tuple\n    index_list_second = [0]*len(test_tup1[0])\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    i=0\n    mult_tuple=()\n    while i<len(test_tup1):\n        mult_tuple=(mult_tuple[0]*test_tup1[i][0],mult_tuple[1]*test_tup1[i][1],mult_tuple[2]*test_tup1[i][2],mult_tuple[3]*test_tup1[i][3],mult_tuple[4]*test_tup1[i][4],mult_tuple[5]*test_tup1[i][5],mult_tuple[6]*test_tup1[i][6],mult_tuple[7]*test_tup1[i][7],mult_tuple[8]*test_tup1[i][8],mult_tuple[9]*test_tup1[i][9],mult_tuple[10]*test_tup1[i][10])\n        i+=1\n    \n    return mult_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    for i in range(len(test_list1)):\n        test_list1[i] = test_list1[i] * test_list2[i]\n    return tuple(test_list1)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index = 0\n    result = 0\n    while index < len(test_tup1):\n        result += test_tup1[index]*test_tup2[index]\n        index += 1\n    print(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    # get both tuples, remove spaces and convert to list\n    tup1 = []\n    for i in test_tup1:\n        if(type(i) == type('string')):\n            i = i.split()\n            i = list(i)\n        elif (type(i) == type([])) or (type(i) == type({})):\n            i = [i]\n        elif (type(i) == type(int)) or (type(i) == type(float)) or (type(i) == type(complex)):\n            i = list(i)\n        elif (type(i) == type(bool)) or (type(i) == type(str)):\n            i = list(i)\n        elif (type(i) == type(tuple(i))) or (type(i) == type(set(i))):\n            i = list(i)\n        else:\n            print(\"\\nInvalid input type for index multiplication\")\n    for i in range(len(tup1)):\n        for j in range(len(tup1)):\n            # print(tup1[i], tup1[j])\n            tup1[i] *= tup1[j]\n    return tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"Index Multiplication of Tuple elements\")\n    for i in range(len(test_tup1)):\n        print(i, test_tup1[i], end = \", \")\n    print()\n    for i in range(len(test_tup2)):\n        print(i, test_tup2[i], end = \", \")\n    print()\n    return test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1], test_tup1[2] * test_tup2[2]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] * test_tup2[i]))\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # write your code here\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1]"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index1 = 0\n    index2 = 0\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for i in range(len(lst)):\n        if(tup[i] in lst):\n            count+=1\n    print(\"Total occurence of any element in a tuple is: \",count)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    for i in lst:\n        cnt[i]+=1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    Counter_obj = Counter(lst)\n    occur = Counter_obj.values()\n    return occur\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    a = Counter(tup)\n    b = []\n    for i in a.values():\n        b.append(i)\n    if len(lst) < 1:\n        return 0\n    else:\n        return sum(b)/len(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        count += lst[i] in tup\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for i in tup:\n        if i in lst:\n            count+=1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    return counter.get(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    occ = 0 \n    for i in lst:\n        occ += lst.count(i)\n        \n    return occ \ndef check_Bag():\n    '''\n    Write a python function that returns the bag size of all of the elements of a list.\n    '''\n    \n    count = 0\n    bag = [] \n    for i in tup: \n        bag.append(i) \n        \n    for j in bag: \n        count += 1 \n        \n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    cnt_tup = Counter(lst)\n    return cnt.update(cnt_tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = tuple(tup)\n    lst = list(lst)\n    occurence = Counter(lst)\n    # print(occurence.values())\n    for key, value in occurence.items():\n        occurence[key] = occurence[key] / len(tup)\n    # print(occurence)\n    return occurence\ndef average(tup):\n    '''\n    Write a python function to calculate the average of a tuple.\n    '''\n    total_list = 0\n    for i in tup:\n        total_list += i\n    return total_list/len(tup)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if len(nums) == 1:\n        return nums[0]**3\n    else:\n        return cube_nums(nums[1:]) + nums[0]**3\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    if len(nums)==0:\n        return result\n    for i in range(len(nums)):\n        result.append(nums[i]**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube for i, cube in enumerate(nums) if i % 3 == 2]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube(num):\n        return num*num*num\n    if len(nums) == 1:\n        return 1\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                yield cube(nums[i]) + cube(nums[j]) + cube(nums[k])\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_num = [nums[i]**3 for i in range(len(nums))]\n    return cube_num\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = [num ** 3 for num in nums]\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        res.append(cube(nums[i]))\n    return res\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_dict = {\n        0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,\n        10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1,\n        19: 1, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1,\n        28: 1, 29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1, 36: 1,\n        37: 1, 38: 1, 39: 1, 40: 1, 41: 1, 42: 1, 43: 1, 44: 1, 45: 1,\n        46: 1, 47: 1, 48: 1, 49: 1, 50: 1, 51: 1, 52: 1, 53: 1, 54: 1,\n        55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 61: 1, 62: 1, 63: 1,\n        64: 1, 65: 1, 66: 1, 67: 1, 68: 1, 69: 1, 70: 1, 71: 1, 72: 1,\n        73: 1, 74: 1, 75: 1, 76: 1, 77: 1, 78: 1, 79: 1, 80: 1, 81: 1,\n        82: 1, 83: 1, 84: 1, 85: 1, 86: 1, 87: 1, 88: 1, 89: 1, 90: 1,\n        91: 1, 92: 1, 93: 1, 94: 1, 95: 1, 96: 1, 97: 1, 98: 1, 99: 1,\n        100: 1, 101: 1, 102: 1, 103: 1, 104: 1, 105: 1, 106: 1, 107: 1,\n        108: 1, 109: 1, 110: 1, 111: 1, 112: 1, 113: 1, 114: 1, 115: 1,\n        116: 1, 117: 1, 118: 1, 119: 1, 120: 1, 121: 1, 122: 1, 123: 1,\n        124: 1, 125: 1, 126: 1, 127: 1, 128: 1, 129: 1, 130: 1, 131: 1,\n        132: 1, 133: 1, 134: 1, 135: 1, 136: 1, 137: 1, 138: 1, 139: 1,\n        140: 1, 141: 1, 142: 1, 143: 1, 144: 1, 145: 1, 146: 1, 147: 1,\n        148: 1, 149: 1, 150: 1, 151: 1, 152: 1, 153: 1, 154: 1, 155: 1,\n        156: 1, 157: 1, 158: 1, 159: 1, 160: 1, 161: 1, 162: 1, 163: 1,\n        164: 1, 165: 1, 166: 1, 167: 1, 168: 1, 169: 1, 170: 1, 171: 1,\n        172: 1, 173: 1, 174: 1, 175: 1, 176: 1, 177: 1, 178: 1, 179: 1,\n        180: 1, 181: 1, 182: 1, 183: 1, 184: 1, 185: 1, 186: 1, 187: 1,\n        188: 1, 189: 1, 190: 1, 191: 1, 192: 1, 193: 1, 194: 1, 195: 1,\n        196: 1, 197: 1, 198: 1, 199: 1, 200: 1, 201: 1, 202: 1, 203: 1,\n        204: 1, 205: 1, 206: 1, 207: 1, 208: 1, 209: 1, 210: 1, 211: 1,\n        212: 1, 213: 1, 214: 1, 215: 1, 216: 1, 217: 1, 218: 1, 219: 1,\n        220: 1, 221: 1, 222: 1, 223: 1, 224: 1, 225: 1, 226: 1, 227: 1,\n        228: 1, 229: 1, 230: 1, 231: 1, 232: 1, 233: 1, 234: 1, 235: 1,\n        236: 1, 237: 1, 238: 1, 239: 1, 240: 1, 241: 1, 242: 1, 243: 1,\n        244: 1, 245: 1, 246: 1, 247: 1, 248: 1, 249: 1, 250: 1, 251: 1,\n        252: 1, 253: 1, 254: 1, 255: 1, 256: 1, 257: 1, 258: 1, 259: 1,\n        260: 1, 261: 1, 262: 1, 263: 1, 264: 1, 265: 1, 266: 1, 267: 1,\n        268: 1, 269: 1, 270: 1, 271: 1, 272: 1, 273: 1, 274: 1, 275: 1,\n        276: 1, 277: 1, 278: 1, 279: 1, 280: 1, 281: 1, 282: 1, 283: 1,\n        284: 1, 285: 1, 286: 1, 287: 1, 288: 1, 289: 1, 290: 1, 291: 1,\n        292: 1, 293: 1, 294: 1, 295: 1, 296: 1, 297: 1, 298: 1, 299: 1,\n        300: 1, 301: 1, 302: 1, 303: 1, 304: 1, 305: 1, 306: 1, 307: 1,\n        308: 1, 309: 1, 310: 1, 311: 1, 312: 1, 313: 1, 314: 1, 315: 1,\n        316: 1, 317: 1, 318: 1, 319: 1, 320: 1, 321: 1, 322: 1, 323: 1,\n        324: 1, 325: 1, 326: 1, 327: 1, 328: 1, 329: 1, 330: 1, 331: 1,\n        332: 1, 333: 1, 334: 1, 335: 1, 336: 1, 337: 1, 338: 1, 339: 1,\n        340: 1, 341: 1, 342: 1, 343: 1, 344: 1, 345: 1, 346: 1, 347: 1,\n        348: 1, 349: 1, 350: 1, 351: 1, 352: 1, 353: 1, 354: 1, 355: 1,\n        356: 1, 357: 1, 358: 1, 359: 1, 360: 1, 361: 1, 362: 1, 363: 1,\n        364: 1, 365: 1, 366: 1, 367: 1, 368: 1, 369: 1, 370: 1, 371: 1,\n        372: 1, 373: 1, 374: 1, 375: 1, 376: 1, 377: 1, 378: 1, 379: 1,\n        380: 1, 381: 1, 382: 1, 383: 1, 384: 1, 385: 1, 386: 1, 387: 1,\n        388: 1, 389: 1, 390: 1, 391: 1, 392: 1, 393: 1, 394: 1, 395: 1,\n        396: 1, 397: 1, 398: 1, 399: 1, 400: 1, 401: 1, 402: 1, 403: 1,\n        404: 1, 405: 1, 406: 1, 407: 1, 408: 1, 409: 1, 410: 1, 411: 1,\n        412: 1, 413: 1, 414: 1, 415: 1, 416: 1, 417: 1, 418: 1, 419: 1,\n        420: 1, 421: 1, 422: 1, 423: 1, 424: 1, 425: 1, 426: 1, 427: 1,\n        428: 1, 429: 1, 430: 1, 431: 1, 432: 1, 433: 1, 434: 1, 435: 1,\n        436: 1, 437: 1, 438: 1, 439: 1, 440: 1, 441: 1, 442: 1, 443: 1,\n        444: 1, 445: 1, 446: 1, 447: 1, 448: 1, 449: 1, 450: 1, 451: 1,\n        452: 1, 453: 1, 454: 1, 455: 1, 456: 1, 457: 1, 458: 1, 459: 1,\n        460: 1, 461: 1, 462: 1, 463: 1, 464: 1, 465: 1, 466: 1, "
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # DFS\n    def cube(lst, n):\n        if len(lst) == n:\n            return [lst[0]**3] + [lst[1]**3] + [lst[2]**3]\n        else:\n            return [lst[0]**3] + [lst[1]**3] + [lst[2]**3] + [lst[3]**3]\n    \n    result = []\n    for i in nums:\n        result += cube(i, len(nums))\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num ** 3 for num in nums]\n    return cubes\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if(n==0):\n        return 0\n    return n+cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return None\n    else:\n        for i in l:\n            if i[-1] == 'M':\n                str[0] = str[0][:-1]\n            elif i[-1] == 'K':\n                str[0] = str[0][:-1]\n            else:\n                str[0] = str[0]\n        return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        return str[l[0]:l[1]]\n    except IndexError:\n        return None\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    def extract_numbers(str):\n        '''\n        Write a function to extract the numbers in a string.\n        '''\n        def is_number(s):\n            try:\n                float(s)\n                return True\n            except ValueError:\n                return False\n        numbers = map(is_number, str)\n        return reduce(lambda x, y: x and y, numbers)\n    \n    def replace_strings(str):\n        '''\n        Write a function to replace the specified size of strings with appropriate\n        characters.\n        '''\n        def replace_text(s, char, count):\n            '''\n            Write a function to replace the specified size of strings with\n            appropriate characters.\n            '''\n            def get_char(s, count):\n                if count == 0:\n                    return s\n                else:\n                    return s[:count] + char + s[count:]\n            return get_char(s, count)\n        \n        replace_strings = map(replace_text, str, \"1234567890\")\n        return reduce(lambda x, y: x and y, replace_strings)\n    \n    def replace_numbers(str):\n        '''\n        Write a function to replace the specified size of strings with appropriate\n        characters.\n        '''\n        replace_strings = map(replace_text, str, \"1234567890\")\n        return reduce(lambda x, y: x and y, replace_strings)\n    \n    return extract_string(str, l), extract_numbers, replace_numbers\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pos = 0\n    if not isinstance(str, list):\n        str = [str]\n    str = [x for x in str if len(x) == l]\n    while pos < len(str):\n        yield str[pos]\n        pos += 1\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    out = ''\n    for el in str:\n        out += el\n    \n    return out\n    \ndef print_result(result, size):\n    '''\n    Print the specified size of strings in the list.\n    '''\n    \n    for i in range(len(result)):\n        print(extract_string(result[i], size))\n        \ndef main():\n    result = []\n    size = int(input('Enter the size of the list: '))\n    \n    for i in range(size):\n        result.append(input('Enter the string: '))\n        \n    print_result(result, size)\n    \nmain()"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    while(len(str) > l):\n        yield str[:l]\n        str = str[l:]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for char in l:\n        if str.count(char):\n            print(str[:l.index(char)], end=\"\")\n            str = str[l.index(char)+1:]\n            print(str, end=\"\")\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    index = 0\n    while i < len(str):\n        j = 0\n        while j < l and index + l <= len(str):\n            if str[i:index+l] == str[index:index+l]:\n                if len(str[index:index+l]) < l:\n                    str[index:index+l] = str[index:index+l].rstrip()\n                else:\n                    index += l\n            else:\n                j += 1\n        index = 0\n        i += 1\n    return st"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        return str[l:l + l]\n    except IndexError as e:\n        return None\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.replace(\" \",\"\")\n    text1=text1.replace(\"\\t\",\"\")\n    text1=text1.replace(\"\\n\",\"\")\n    text1=text1.replace(\"\\r\",\"\")\n    return text1\ndef remove_newline(text1):\n    '''\n    Write a function to remove all newline from the given string.\n    '''\n    text1=text1.replace(\"\\n\",\"\")\n    text1=text1.replace(\"\\r\",\"\")\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    text1=text1.replace(\"-\",\"\")\n    text1=text1.replace(\"_\",\"\")\n    text1=text1.replace(\".\",\"\")\n    text1=text1.replace(\",\",\"\")\n    text1=text1.replace(\";\",\"\")\n    text1=text1.replace(\"(\",\"\")\n    text1=text1.replace(\")\",\"\")\n    text1=text1.replace(\"=\",\"\")\n    text1=text1.replace(\"!\",\"\")\n    text1=text1.replace(\";\",\"\")\n    text1=text1.replace(\"(\",\"\")\n    text1=text1.replace(\")\",\"\")\n    text1=text1.replace(\"_\",\"\")\n    text1=text1.replace(\".\",\"\")\n    text1=text1.replace(\",\",\"\")\n    text1=text1.replace(\";\",\"\")\n    text1=text1.replace(\"(\",\"\")\n    text1=text1.replace(\")\",\"\")\n    text1=text1.replace(\"_\",\"\")\n    text1=text1.replace(\".\",\"\")\n    text1=text1.replace(\",\",\"\")\n    text1=text1.replace(\";\",\"\")\n    text1=text1.replace(\"(\",\"\")\n    text1=text1.replace(\")\",\"\")\n    text1=text1.replace(\"_\",\"\")\n    text1=text1.replace(\".\",\"\")\n    text1=text1.replace(\",\",\"\")\n    text1=text1.replace(\";\",\"\")\n    return text1\ndef convert_to_lowercase(text1):\n    '''\n    Write a function to convert all characters to lowercase.\n    '''\n    text1=text1.lower()\n    return text1\ndef convert_to_uppercase(text1):\n    '''\n    Write a function to convert all characters to uppercase.\n    '''\n    text1=text1.upper()\n    return text1\ndef convert_to_number(text1):\n    '''\n    Write a function to convert all characters to numbers.\n    '''\n    text1=text1.replace(\" \",\"\")\n    text1=text1.replace(\"-\",\"\")\n    text1=text1.replace(\"_\",\"\")\n    text1=text1.replace(\".\",\"\")\n    text1=text1.replace(\",\",\"\")\n    text1=text1.replace(\";\",\"\")\n    text1=text1.replace(\"(\",\"\")\n    text1=text1.replace(\")\",\"\")\n    text1=text1.replace(\"_\",\"\")\n    text1=text1.replace(\".\",\"\")\n    text1=text1.replace(\",\",\"\")\n    text1=text1.replace(\";\",\"\")\n    text1=text1.replace(\"(\",\"\")\n    text1=text1.replace(\")\",\"\")\n    text1=text1.replace(\"_\",\"\")\n    text1=text1.replace(\".\",\"\")\n    text1=text1.replace(\",\",\"\")\n    text1=text1.replace(\";\",\"\")\n    text1=text1.replace(\"(\",\"\")\n    text1=text1.replace(\")\",\"\")\n    text1=text1.replace(\"_\",\"\")\n    text1=text1.replace(\".\",\"\")\n    text1=text1.replace(\",\",\"\")\n    text1=text1.replace(\";\",\"\")\n    text1=text1.replace(\"(\",\"\")\n    text1=text1.replace(\")\",\"\")\n    text1=text1.replace(\"_\",\"\")\n    text1=text1.replace(\".\",\"\")\n    text1=text1.replace(\",\",\"\")\n    text1=text1.replace(\";\",\"\")\n    return text1\ndef remove_stopwords(text1):\n    '''\n    Write a function to remove stopwords from the given string.\n    '''\n    stopwords=['a','about','above','after','again','against','all','am','an','and','any','are','as','at','be','because','been','before','being','below','between','both','both','but','by','can','cannot','could','couldn','couldn\\'t','couldn\\'t','did','didn','didn\\'t','doesn','doesn\\'t','doing','don\\'t','done','don\\'t','couldn\\'t','couldn\\'t',\n    'doesn\\'t','doesn\\'t','doesn\\'t','don\\'t','doing','don\\'t','hadn\\'t','hadn\\'t','hasn\\'t','hasn\\'t', 'hasn\\'t', 'haven\\'t','haven\\'t','he','he\\'ll','he\\'re','he\\'s','her','here','here\\'s','hers','herself','him','himself','in','into','isn\\'t','isn\\'t',\n    'isn\\'t','it','it\\'s','its','itself','let','me','me\\'s','mightn\\'t','mightn\\'t','more','mustn\\'t','mustn\\'t','my','myself','needn\\'t','needn\\'t','needn\\'t', 'oughtn\\'t','oughtn\\'t','our','ours','ourselves','out','over','own','own','same','same','shan\\'t','shalln\\'t','shan\\'t','she','she\\'ll','she\\'re','she\\'s','shouldn\\'t','shouldn\\'t','shouldn\\'t','shouldn\\'t','so','some','somebody','somehow','someone','something','sometime','sometimes','somewhat','somehow','something','still','still','such','until','unlike','unlikely','unset']\n    result=[]\n    for i in range(0,len(text1)):\n        if text1[i] in stopwords:\n            result.append(text1[i])\n    return result\ndef create_frequencies_dict(filename):\n    '''\n    Create a dictionary mapping each word in the inputted file to its frequency.\n    '''\n    dict=defaultdict(int)\n    infile=open(filename, 'r')\n    for line in infile:\n        for word in line.split():\n            dict[word]=dict[word]+1\n    infile.close()\n    return dict\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''\n    for i in text1:\n        if(i!=''):\n            text = text + i\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #brute force\n    def remove_whitespaces_2(s):\n        i = 0\n        while i < len(s):\n            if s[i] =='' or s[i] == '\\n' or s[i] == '\\t':\n                s = s[:i] + s[i+1:]\n                i -= 1\n            i += 1\n        return s\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    list1 = re.split(r'\\s+',text1)\n    for item in list1:\n        if item:\n            list1.remove(item)\n    text1 = \" \".join(list1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # text1 = str(text1)\n    # print(text1)\n    # text1 = re.sub(r'\\s+','', text1)\n    # text1 = re.sub(r'\\s+','', text1).lower()\n    # print(text1)\n    # text1 = text1.split()\n    # print(text1)\n    # print(len(text1))\n    text2 =''.join(text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    text1 = text1.replace('!','')\n    text1 = text1.replace('#','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    text1 = text1.replace('!','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    text1 = text1.replace('!','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    text1 = text1.replace('!','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    text1 = text1.replace('!','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    text1 = text1.replace('!','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    text1 = text1.replace('!','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    text1 = text1.replace('!','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    text1 = text1.replace('!','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    text1 = text1.replace('!','')\n    text1 = text1.replace('\"','')\n    text1 = text1.replace('$','')\n    text1 = text1.replace('%','')\n    text1 = text1.replace('&','')\n    text1 = text1.replace('(','')\n    text1 = text1.replace(')','')\n    text1 = text1.replace('*','')\n    text1 = text1.replace(',','')\n    text1 = text1.replace(';','')\n    text1 = text1.replace(':','')\n    text1 = text1.replace('-','')\n    text1 = text1.replace('+','')\n    text1 = text1.replace('.','')\n    tex"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = ''\n    for i in text1:\n        if i.isspace():\n            text2 +=''\n        else:\n            text2 += i\n    return text2.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # List of all whitespaces\n    whitespaces = [' ']\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = \"\"\n    for letter in text1:\n        if letter!= \" \":\n            new_text = new_text + letter\n    return new_text\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return 0\n    else:\n        return sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount> actual_cost:\n        return sale_amount- actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<=actual_cost:\n        return sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > 0:\n        if actual_cost < sale_amount:\n            return sale_amount - actual_cost\n        else:\n            return 0\n    else:\n        return actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == 0:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == 0:\n        return 0\n    else:\n        return actual_cost * sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of work as you have to repair. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of work as you have to repair to work. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair_to_consumption(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption as you have to repair. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair_to_consumption_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption as you have to repair to work to work. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair_to_consumption_to_consumption(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption as you have to repair to work to consumption. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \ndef calculate_amount_to_repair_to_consumption_to_works_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption to work as you have to repair to work to work. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair_to_consumption_to_consumption_to_works_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption to work to work to work to work. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \ndef calculate_amount_to_repair_to_consumption_to_consumption_to_works_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption to work to work to work to work to work. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \ndef calculate_amount_to_repair_to_consumption_to_consumption_to_works_to_consumption_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption to work to work to work to work to work to work to work. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair_to_consumption_to_consumption_to_works_to_consumption_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption to work to work to work to work to work to work to work to work. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair_to_consumption_to_consumption_to_works_to_consumption_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption to work to work to work to work to work to work to work to work to work to work to work to work. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair_to_consumption_to_consumption_to_works_to_consumption_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption to work to work to work to work to work to work to work to work to work to work to work to work to work to work. \n    '''\n    \n    # if the sale amount is less than or equal to the actual amount\n    if sale_amount<=actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n    \n    \ndef calculate_amount_to_repair_to_consumption_to_consumption_to_works_to_works_to_works(actual_cost,sale_amount): \n    '''\n    Write a function that gives amount of consumption to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to work to wor"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n%i == 0 : \n            sum += i\n    if sum!= 0:\n        print(sum)\n    else:\n        print('No even factors')\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1) :\n        return 1\n    if (n < 0) :\n        return 0\n    if (n%2 == 0) :\n        return sumofFactors(n//2)\n    else :\n        return sumofFactors(n*3)+1\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    if n%2==0:\n        for i in range(math.floor(n/2),0,-1):\n            if n%i==0:\n                factors.append(i)\n    return sum(factors)\ndef sumofNumbers(n) : \n    '''\n    Write a python function that takes a number as input. \n    The function should return the sum of all the even numbers in that number. \n    '''\n    sum = 0\n    while n!=0:\n        if n%2==0:\n            sum+=n\n            n=n//2\n        else:\n            sum+=n\n            n=n*3\n    return sum\ndef sqsum(n) : \n    '''\n    Write a python function that takes a number as input. \n    The function should return the square of the number.\n    '''\n    square=0\n    if n==0:\n        return 0\n    while n!=0:\n        square+=n**2\n        n=n//2\n    return square\ndef sqsum1(n) : \n    '''\n    Write a python function that takes a number as input. \n    The function should return the square of the number.\n    '''\n    square=0\n    while n!=0:\n        square+=n**2\n        n=n//2\n    return square\ndef gcd(x,y):\n    while x!=0 and y!=0:\n        if x>y:\n            x=x%y\n        else:\n            y=y%x\n    return x+y\ndef gcd1(x,y):\n    if x==y:\n        return x\n    if y==0:\n        return x\n    else:\n        while x!=0 and y!=0:\n            if x>y:\n                x=x%y\n            else:\n                y=y%x\n        return y\ndef findN(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+sumofFactors(n)\ndef findN1(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return sqsum1(n)\ndef findN2(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return sqsum(n)\ndef findN3(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(n,findN(n))\ndef findN4(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN2(n),findN(n))\ndef findN5(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN3(n),findN(n))\ndef findN6(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN4(n),findN(n))\ndef findN7(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN5(n),findN(n))\ndef findN8(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN6(n),findN(n))\ndef findN9(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN7(n),findN(n))\ndef findN10(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN8(n),findN(n))\ndef findN11(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN9(n),findN(n))\ndef findN12(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN10(n),findN(n))\ndef findN13(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN11(n),findN(n))\ndef findN14(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN12(n),findN(n))\ndef findN15(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN13(n),findN(n))\ndef findN16(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN14(n),findN(n))\ndef findN17(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN15(n),findN(n))\ndef findN18(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN16(n),findN(n))\ndef findN19(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN17(n),findN(n))\ndef findN20(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN18(n),findN(n))\ndef findN21(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN19(n),findN(n))\ndef findN22(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN20(n),findN(n))\ndef findN23(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN21(n),findN(n))\ndef findN24(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN22(n),findN(n))\ndef findN25(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN23(n),findN(n))\ndef findN26(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN24(n),findN(n))\ndef findN27(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN25(n),findN(n))\ndef findN28(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN26(n),findN(n))\ndef findN29(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN27(n),findN(n))\ndef findN30(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN28(n),findN(n))\ndef findN31(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n    '''\n    return gcd(findN29(n),findN(n))\ndef findN32(n):\n    '''\n    Return the sum of all the even numbers in a natural number.\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    ans = 0\n    for i in range(1,n) : \n        if (n%i) == 0 : \n            ans += i \n    return ans\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    if(n>2):\n        for i in range(3,n):\n            if(n%i==0):\n                return i\n    return 1\ndef divisors(n) : \n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    if(n==0):\n        return []\n    if(n==1):\n        return [1]\n    if(n==2):\n        return [2]\n    if(n>2):\n        for i in range(3,n):\n            if(n%i==0):\n                return [i] + divisors(i)\n    return [n]\ndef isprime(n) : \n    '''\n    Write a python function to determine whether a number is a prime number or not.\n    '''\n    if(n==1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    for i in range(3,n,2):\n        if(n%i==0):\n            return False\n    return True\ndef primeFactors(n) : \n    '''\n    Write a python function to find all prime factors of a number.\n    '''\n    if(n==1):\n        return []\n    if(n==2):\n        return [2]\n    if(n>2):\n        prime = []\n        if(n%2==0):\n            prime = [1]\n            while(n!=2):\n                if(n%2==0):\n                    prime.append(2)\n                    n=n/2\n                else:\n                    n=n//2\n                    if(n==2):\n                        break\n        prime = [pow(n,0.5) for p in prime]\n        for p in prime:\n            if(p>1):\n                if(p%2==0):\n                    prime.remove(p)\n        if(prime):\n            return prime\n    return []\ndef divisorFactors(n) : \n    '''\n    Write a python function to find all prime factors of a number.\n    '''\n    if(n==1):\n        return []\n    if(n==2):\n        return [2]\n    if(n>2):\n        divisor = []\n        if(n%2==0):\n            divisor = [1]\n            while(n!=2):\n                if(n%2==0):\n                    divisor.append(2)\n                    n=n/2\n                else:\n                    n=n//2\n                    if(n==2):\n                        break\n        divisor = [pow(n,0.5) for p in divisor]\n        for p in divisor:\n            if(p>1):\n                if(p%2==0):\n                    divisor.remove(p)\n        if(divisor):\n            return divisor\n    return []\ndef fib(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if(n==1):\n        return 0\n    if(n==2):\n        return 1\n    if(n>2):\n        return fib(n-1) + fib(n-2)\ndef Fibonacci(n) : \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if(n==1):\n        return 0\n    if(n==2):\n        return 1\n    if(n>2):\n        return Fibonacci(n-1) + Fibonacci(n-2)\ndef qnsum(n) : \n    '''\n    Write a python function to find the nth (Pentagonal) number.\n    '''\n    if(n==1):\n        return 0\n    if(n==2):\n        return 1\n    if(n>2):\n        q = 1\n        a = 1\n        for i in range(3,n,2):\n            q = q * i\n            a = a + (2*i)\n        return q+a\ndef qnfib(n) : \n    '''\n    Write a python function to find the nth (Fibonacci) number.\n    '''\n    if(n==1):\n        return 0\n    if(n==2):\n        return 1\n    if(n>2):\n        q = 1\n        a = 1\n        for i in range(3,n,2):\n            q = q * i\n            a = a + (2*i)\n        return q+a\ndef log(x) : \n    '''\n    Write a python function to print the natural logarithm of a number.\n    '''\n    if(x==0):\n        return 0\n    if(x==1):\n        return 1\n    if(x>1):\n        return log(x-1) + math.log(x,2)\ndef sqrt(n) : \n    '''\n    Write a python function to find the square root of a number.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    if(n>1):\n        return n**0.5\ndef fibsum(n): \n    '''\n    Write a python function to find the nth (Pentagonal) number.\n    '''\n    if(n==1):\n        return 0\n    if(n==2):\n        return 1\n    if(n>2):\n        q = 1\n        a = 1\n        for i in range(3,n,2):\n            q = q * i\n            a = a + (2*i)\n        return q+a\ndef quad(n) : \n    '''\n    Write a python function to find the nth (Quadrilateral) number.\n    '''\n    if(n==1):\n        return 0\n    if(n==2):\n        return 1\n    if(n>2):\n        a = 0\n        b = 1\n        for i in range(3,n,2):\n            a = a + (2*i)\n            b = b + i\n        return a+b\ndef evalfib(n): \n    '''\n    Write a python function to find the nth (Evaluable) Fibonacci number.\n    '''\n    if(n==1):\n        return 0\n    if(n==2):\n        return 1\n    if(n>2):\n        a = 0\n        b = 1\n        for i in range(3,n,2):\n            a = a + (2*i)\n            b = b + i\n        return a+b\ndef gcd(n) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    if(n>2):\n        for i in range(2,n):\n            if(n%i==0):\n                return i\ndef isprime(n) : \n    '''\n    Write a python function to determine whether a number is prime or not.\n    '''\n    if(n==1):\n        return False\n    if(n==2):\n        return True\n    if(n>2):\n        prime = []\n        if(n%2==0):\n            prime = [1]\n            while(n!=2):\n                if(n%2==0):\n                    prime.append(2)\n                    n=n/2\n                else:\n                    n=n//2\n                    if(n==2):\n                        break\n        prime = [pow(n,0.5) for p in prime]\n        for p in prime:\n            if(p>1):\n                if(p%2==0):\n                    prime.remove(p)\n        if(prime):\n            return prime\n    return []\ndef primeFactors(n) : \n    '''\n    Write a python function to find all prime factors of a number.\n    '''\n    if(n==0):\n        return []\n    if(n==1):\n        return [1]\n    if(n>2):\n        factor"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n % 2 == 0 : \n        return (n / 2)\n    else : \n        return (n*3)\n    \ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(range(1,int(n/2) + 1))\n    \ndef fibonacci(n) : \n    '''\n    Return the nth Fibonacci number.\n    '''\n    if n == 1 : \n        return 1\n    elif n == 2 : \n        return 1\n    else : \n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef factorial(n) : \n    '''\n    Return the nth Fibonacci number.\n    '''\n    if n == 1 : \n        return 1\n    elif n == 2 : \n        return 1\n    else : \n        return n * factorial(n-1) \n        \ndef fibonacci2(n) : \n    '''\n    Return the nth Fibonacci number.\n    '''\n    if n == 1 : \n        return 1\n    elif n == 2 : \n        return 1\n    else : \n        return fibonacci2(n-1) + fibonacci2(n-2)\n    \ndef primes(n):\n    '''\n    Return a list of all the prime numbers from 0 to n.\n    '''\n    prime = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            prime.append(i)\n            if n / i!= i :\n                prime.append(n/i)\n    return prime\n        \ndef primes2(n):\n    '''\n    Return a list of all the prime numbers from 0 to n.\n    '''\n    prime = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            prime.append(i)\n            if n / i!= i :\n                prime.append(n/i)\n    return prime\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n % 2 == 0 : \n        return n \n    else : \n        return sumofFactors(n-1) + sumofFactors(n-2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return 0\n    if n % 3 == 0: \n        return 1\n    else: \n        return sumofFactors(n // 2) + sumofFactors(n - 1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    n = n % 10\n    if n == 0:\n        return 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n            return n\n        i = i + 1\n    else:\n        return n\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    if n == 0 : \n        return 0\n    else : \n        for i in range(1,int(math.sqrt(n)) + 1) :\n            if n % i == 0 : \n                return n // i \n    return 0\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word1(text):\n    '''\n    Write a function that matches a word containing '1'.\n    '''\n    pattern = re.compile(r'1')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word2(text):\n    '''\n    Write a function that matches a word containing '2'.\n    '''\n    pattern = re.compile(r'2')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word3(text):\n    '''\n    Write a function that matches a word containing '3'.\n    '''\n    pattern = re.compile(r'3')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word4(text):\n    '''\n    Write a function that matches a word containing '4'.\n    '''\n    pattern = re.compile(r'4')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word5(text):\n    '''\n    Write a function that matches a word containing '5'.\n    '''\n    pattern = re.compile(r'5')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word6(text):\n    '''\n    Write a function that matches a word containing '6'.\n    '''\n    pattern = re.compile(r'6')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word7(text):\n    '''\n    Write a function that matches a word containing '7'.\n    '''\n    pattern = re.compile(r'7')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word8(text):\n    '''\n    Write a function that matches a word containing '8'.\n    '''\n    pattern = re.compile(r'8')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word9(text):\n    '''\n    Write a function that matches a word containing '9'.\n    '''\n    pattern = re.compile(r'9')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word0(text):\n    '''\n    Write a function that matches a word containing '0'.\n    '''\n    pattern = re.compile(r'0')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word1_1(text):\n    '''\n    Write a function that matches a word containing '1' and '1'.\n    '''\n    pattern = re.compile(r'1\\s+1')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word1_2(text):\n    '''\n    Write a function that matches a word containing '1' and '2'.\n    '''\n    pattern = re.compile(r'1\\s+2')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word1_3(text):\n    '''\n    Write a function that matches a word containing '1' and '3'.\n    '''\n    pattern = re.compile(r'1\\s+3')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word2_1(text):\n    '''\n    Write a function that matches a word containing '2' and '1'.\n    '''\n    pattern = re.compile(r'2\\s+1')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word2_2(text):\n    '''\n    Write a function that matches a word containing '2' and '2'.\n    '''\n    pattern = re.compile(r'2\\s+2')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word2_3(text):\n    '''\n    Write a function that matches a word containing '2' and '3'.\n    '''\n    pattern = re.compile(r'2\\s+3')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word3_1(text):\n    '''\n    Write a function that matches a word containing '3' and '1'.\n    '''\n    pattern = re.compile(r'3\\s+1')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word3_2(text):\n    '''\n    Write a function that matches a word containing '3' and '2'.\n    '''\n    pattern = re.compile(r'3\\s+2')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word3_3(text):\n    '''\n    Write a function that matches a word containing '3' and '3'.\n    '''\n    pattern = re.compile(r'3\\s+3')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word4_1(text):\n    '''\n    Write a function that matches a word containing '4' and '1'.\n    '''\n    pattern = re.compile(r'4\\s+1')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word4_2(text):\n    '''\n    Write a function that matches a word containing '4' and '2'.\n    '''\n    pattern = re.compile(r'4\\s+2')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word4_3(text):\n    '''\n    Write a function that matches a word containing '4' and '3'.\n    '''\n    pattern = re.compile(r'4\\s+3')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word5_1(text):\n    '''\n    Write a function that matches a word containing '5' and '1'.\n    '''\n    pattern = re.compile(r'5\\s+1')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word5_2(text):\n    '''\n    Write a function that matches a word containing '5' and '2'.\n    '''\n    pattern = re.compile(r'5\\s+2')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word5_3(text):\n    '''\n    Write a function that matches a word containing '5' and '3'.\n    '''\n    pattern = re.compile(r'5\\s+3')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word6_1(text):\n    '''\n    Write a function that matches a word containing '6' and '1'.\n    '''\n    pattern = re.compile(r'6\\s+1')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word6_2(text):\n    '''\n    Write a function that matches a word containing '6' and '2'.\n    '''\n    pattern = re.compile(r'6\\s+2')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word6_3(text):\n    '''\n    Write a function that matches a word containing '6' and '3'.\n    '''\n    pattern = re.compile(r'6\\s+3')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word7_1(text):\n    '''\n    Write a function that matches a word containing '7' and '1'.\n    '''\n    pattern = re.compile(r'7\\s+1')\n    \n    return pattern.search(text)!= None\n    \ndef text_match_word7_2(text):\n    '''\n    Write a function that matches a word containing '7' and '2'.\n    '''\n    pattern = re.compile(r'7\\s+2')"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # First create a regular expression for matching\n    p = re.compile(r'z')\n    # Now loop through the string\n    for c in text:\n        if c in p.pattern:\n            # Return 1 if the match is found\n            # Otherwise, return 0\n            return 1\n    # If no match is found, return 0\n    return 0\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #print(text)\n    for i in range(len(text)):\n        if text[i] == 'z':\n            return True\n    return False\ndef text_match_wordz_3(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #print(text)\n    for i in range(len(text)):\n        if 'z' in text[i]:\n            return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text = text.replace(' ','')\n    text = text.replace('.','')\n    text = re.sub('[0-9]','',text)\n    text = re.sub('[A-Z]','',text)\n    text = re.sub('[!@#$%^&*()_+-=|]', '', text)\n    text = re.sub('[^a-zA-Z0-9]+',' ',text)\n    text = re.sub('\\s+','',text)\n    return text\n    \n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    new_text = text.replace('z', '')\n    print(\"NEW TEXT\", new_text)\n    if new_text == 'z':\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for ch in text:\n        if ch not in '!#$%&*()_+-./:;<=>?@[\\]^_`{|}~':\n            return False\n    return True\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(\"z\",text))\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.count('z')\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Find all the words in text\n    # Letter-remove whitespace\n    # Remove the trailing zs\n    # Create the wordlist\n    wordlist = []\n    for letter in text:\n        if letter == 'z':\n            wordlist.append(letter)\n        else:\n            continue\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 2:\n        return True\n    elif monthnum2 == 3 or monthnum2 == 4:\n        return True\n    elif monthnum2 == 5 or monthnum2 == 6:\n        return True\n    elif monthnum2 == 7 or monthnum2 == 8:\n        return True\n    elif monthnum2 == 9 or monthnum2 == 10:\n        return True\n    elif monthnum2 == 11 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not isinstance(monthnum2, int):\n        raise TypeError('monthnum2 must be an integer.')\n    elif monthnum2 > 12 or monthnum2 < 1:\n        raise ValueError('monthnum2 must be between 1 and 12.')\n    elif monthnum2 == 1 or monthnum2 == 2:\n        raise ValueError('monthnum2 must be between 1 and 3.')\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = monthnum2.replace(\"-\", \"\")\n    if monthnum2 == \"\":\n        monthnum2 = \"0\"\n        return False\n    try:\n        monthnum = int(monthnum2)\n    except ValueError:\n        monthnum = 0\n        return False\n    if monthnum >= 12:\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >12 or monthnum2<=1:\n        return False\n    elif monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 < 1 or monthnum2 > 12):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = monthnum2\n    while monthnumb <= 0:\n        monthnumb = monthnumb + 1\n        if monthnumb == 31:\n            return True\n        return False\n    if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 % 31 == 0\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 in range(1,13)\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    elif monthnum2 in (4, 6, 9, 11):\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # Make sure the given month number is between 1 and 12\n    if not 1 <= monthnum2 <= 12:\n        raise ValueError('Month number out of range')\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for word in stringlist:\n        result.append(word[::-1])\n    return result\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    revstring = \"\"\n    for i in stringlist:\n        revstring = revstring + i + \" \"\n    return revstring.rstrip(\" \")\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    revlist = []\n    for el in stringlist:\n        revlist.append(el[::-1])\n    return revlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop over the string values\n    for string in stringlist:\n        # reverse each string\n        for i in range(len(string)-1, -1, -1):\n            print(string[i], end=\" \")\n        print()\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for item in stringlist:\n        print(item, end=\" \")\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    '''\n    Given:\n    [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_strings = list()\n    for string in stringlist:\n        reverse_strings.append(string[::-1])\n    return reverse_strings\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    l=[]\n    for string in stringlist:\n        l.append(string[::-1])\n    return l\n    \n    "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    l = len(stringlist)\n    for i in range(l//2):\n        stringlist[i], stringlist[l-i-1] = stringlist[l-i-1], stringlist[i]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0] \n    for i in range(1, len(lst)): \n        if min > lst[i]: \n            min = lst[i] \n    return min \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # def find_min(lst, sub_list):\n    #     return [val for (key, val) in sub_list.items() if key in lst]\n    # return find_min(lst, sub_list)\n    return [val for (key, val) in lst.items() if key in lst]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j]) < len(lst[i:j][::-1]):\n                min = lst[i:j]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0] \n    for i in range(1, len(lst)): \n        if lst[i] < min: \n            min = lst[i] \n            min_index = i \n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = []\n    for i in lst:\n        if len(i) < len(l):\n            l = i\n    return l\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(0,len(lst)-1):\n        for j in range(0,len(lst)-1):\n            if (lst[j] < lst[j+1]):\n                minimum = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = minimum\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)-1):\n        j = i+1\n        l = len(lst[i])\n        while j < len(lst):\n            if lst[i][j]<lst[i][0]:\n                l = j\n                break\n            j+=1\n        lst[i] = lst[i][:l]\n    return(lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum=lst[0]\n    for i in range(1,len(lst)): \n        if lst[i] < minimum: \n            minimum=lst[i] \n    return minimum \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    lst2=lst[1:]\n    if len(lst)==len(lst2):\n        return min(lst,key=len)\n    else:\n        return lst2\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i=0\n    min_length=1\n    min_val=lst[0]\n    \n    while i < len(lst):\n        if lst[i]<min_val:\n            min_val=lst[i]\n            min_length=i+1\n        i=i+1\n        \n    return min_length,min_val\n    \ndef Sort_min_length(lst):\n    '''\n    Write a python function to sort the list in place.\n    '''\n    while True:\n        for i in range(len(lst)-1):\n            if lst[i]<lst[i+1]:\n                temp=lst[i]\n                lst[i]=lst[i+1]\n                lst[i+1]=temp\n                \n        if len(lst)==1:\n            break\n        \n    return lst\n    \ndef Sort_decreasing(lst):\n    '''\n    Write a python function to sort the list in place.\n    '''\n    for i in range(len(lst)-1):\n        for j in range(i+1,len(lst)):\n            if lst[i]>lst[j]:\n                temp=lst[i]\n                lst[i]=lst[j]\n                lst[j]=temp\n                \n    return lst\n    \ndef main():\n    '''\n    Write a python program to find the sublist having maximum length.\n    '''\n    lst=[int(i) for i in input().split()]\n    length,min_val=Find_Min(lst)\n    print(length)\n    print(min_val)\n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print('The area of rectangle is %.2f' %area)\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)/2\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(f'The area of the rectangle is: {l * b}.')\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print('Rectangle area is: ', l * b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef square_area(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return l*l\ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (l*b)*(b/2)\ndef factorial(n):\n    '''\n    Write a function that takes an integer and returns the factorial of that number.\n    '''\n    return factorial\ndef factorial2(n):\n    '''\n    Write a function that takes a number n and returns the factorial of n!\n    '''\n    return factorial(n)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = (l*b)//2\n    print(area)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\w*\\d', '', str1).upper()\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'(.)\\1{2,}', r'\\1', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if type(str1)!= str:\n        return str1\n    else:\n        out = ''\n        for char in str1:\n            if char.isupper():\n                out += char.lower()\n            else:\n                out += char\n        return out\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.strip()\n    str1 = re.sub(r'[^A-Z]','', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex_string = r\"[a-zA-Z]+[^a-zA-Z]\"\n    return re.sub(regex_string, '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = r'[A-Z]'\n    regex = r'[a-z]'\n    regex = r'[A-Z]'\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def remove_upper(str1):\n        '''\n        Given a string, this function will remove uppercase letters from it.\n        '''\n        str2 = str1.upper()\n        print(\"Str1: \" + str1)\n        print(\"Str2: \" + str2)\n        return str2\n    str1 = str1.lower()\n    str2 = remove_upper(str1)\n    print(\"After remover uppercase: \" + str1)\n    print(\"After remover uppercase: \" + str2)\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Return the string without the uppercase characters\n    str2 = str1.lower()\n    # get the length of the string\n    length = len(str2)\n    # for every character\n    for i in range(length):\n        if (str2[i] == \"a\"):\n            # if the character is a vowel, remove it\n            if (str2[i] == \"e\"):\n                str2 = str2[:i] + str2[i + 1] + str2[i + 2] + str2[i + 3]\n            # if the character is a consonant, remove it\n            elif (str2[i] == \"i\"):\n                str2 = str2[:i] + str2[i + 1] + str2[i + 2] + str2[i + 3]\n        # if the character is not a vowel, ignore it\n        else:\n            continue\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    # initialize dictionary to store all uppercase characters and their counts\n    uppercase_dict = {}\n    count_dict = {}\n    \n    # iterate through each character in string\n    for i in str1:\n        if i.isupper():\n            # if the character is uppercase and not already seen\n            if i not in uppercase_dict.keys():\n                # increment uppercase_dict and count_dict\n                uppercase_dict[i] = 0\n                count_dict[i] = 0\n            # increment uppercase_dict and count_dict\n            uppercase_dict[i] += 1\n            count_dict[i] += 1\n    \n    # remove the uppercase characters from the dictionary\n    for i in uppercase_dict.keys():\n        if uppercase_dict[i]!= 0:\n            # if there are non-zero uppercase characters\n            uppercase_dict[i] = 0\n            count_dict[i] = 0\n    \n    # create a new string of all the uppercase characters\n    new_str = ''\n    for i in str1:\n        if i.isupper():\n            new_str += i\n    \n    # return the new string\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    pattern = r\"[a-zA-Z]*\"\n    regex = re.compile(pattern)\n    result = regex.sub('', str1)\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # For loop to iterate over each list sublist\n    for i in range(len(lst)):\n        # If the number of items is less than 5, return the first item of the list\n        if len(lst[i]) < 5:\n            return lst[i][0]\n    # Otherwise return \"No valid values\"\n    return \"No valid values\""
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    element=lst[0]\n    return element\nlst=[1,2,3,4,5]\nprint(Extract(lst)"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i].sort()\n        print(lst[i][0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0][0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_val = lst[0]\n    for i in range(1,len(lst)):\n        if (lst[i] < first_val):\n            first_val = lst[i]\n    return first_val\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.upper() == i:\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # your code here\n    print(str.upper())\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for ch in str:\n        if ch.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize count and string\n    ctr = 0\n    str = str.upper()\n    # loop through string\n    for i in str:\n        # if char is uppercase\n        if i.isupper():\n            ctr += 1\n    # return the count\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('U')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    print(f'The number of upper case characters in the given string is : {upper_count}')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in range(len(str)-1):\n        if(str[i].isupper()):\n            count=count+1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    lower = 0\n    for ch in str:\n        if ch >= 'A' and ch <= 'Z':\n            upper += 1\n        elif ch >= 'a' and ch <= 'z':\n            lower += 1\n    return upper, lower\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for letter in str:\n        if letter.isupper():\n            upper_count += 1\n    return upper_count\n    "
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    x = 0\n    for i in str:\n        if i.isupper():\n            x += 1\n    print(x)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    possible_combinations = []\n    list_of_elements = []\n    for i in range(1, len(list1) + 1):\n        if list_of_elements == []:\n            list_of_elements.append(i)\n        else:\n            list_of_elements.append(list1[list_of_elements[-1]])\n    for i in list_of_elements:\n        if i not in possible_combinations:\n            possible_combinations.append(i)\n            if i not in possible_combinations:\n                possible_combinations.append(i)\n    return possible_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1,len(list1)))\n    \ndef combinations_list_2(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return list(itertools.combinations(list1,len(list1)))\n    \n    else:\n        output = []\n        for k in range(len(list1)):\n            output += combinations_list_2(list1[:k] + list1[k+1:])\n        return output\n    \ndef combinations_list_3(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    for i in range(len(list1)+1):\n        output += combinations_list_3(list1[:i])\n    return output\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #Base Case\n    if len(list1) == 1:\n        return []\n    #Recursive case\n    else:\n        return combinations_list(list1[1:]) + combinations_list(list1[:-1])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1:\n        list2 = []\n        for i in range(len(list1)):\n            if list1[i] not in list2:\n                list2.append(list1[i])\n        list3 = []\n        for i in range(len(list1)):\n            if len(list1) == 1:\n                list3.append(list1[i])\n            elif len(list1) == 2:\n                list3.append(list1[i])\n            else:\n                list3.append(list1[i] + list1[i+1])\n        return list3\n    else:\n        return []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result.extend([list1[x:x+i] for x in range(0, len(list1), i)])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i],list1[j]])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    return list(combinations(list1, len(list1)))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combinations = []\n    for i in range(1, len(list1) + 1):\n        all_combinations.append(list1[i-1:i+1])\n    return all_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # define helper function\n    def combinations(l):\n        result = []\n        for i in range(len(l)):\n            for j in combinations(l[i:]):\n                result.append(l[:i] + j + l[i+1:])\n        return result\n    # return list of possible combinations\n    return combinations(list1)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    # For every element in the list\n    for i in range(len(list1)):\n        # For every other element\n        for j in range(len(list1)):\n            # Print the result\n            print(list1[i], list1[j])\n            # Append the combinations\n            combinations.append(list1[i]+list1[j])\n    return combinations\n    "
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod_sub = -1\n    max_sum = 0\n    left = 0\n    right = 0\n    n = len(arr)\n    while right < n:\n        max_sum += arr[right]\n        while max_sum < 0:\n            max_sum -= arr[left]\n            left += 1\n        if max_prod_sub < max_sum:\n            max_prod_sub = max_sum\n            right = 0\n        else:\n            right += 1\n        max_sum = 0\n    return max_prod_sub\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    largest_product = 0\n    max_product = float('-inf')\n    index = 0\n    for i in range(len(arr)):\n        product = 1\n        for j in range(index, len(arr)):\n            product *= arr[j]\n            if product > largest_product:\n                largest_product = product\n                max_product = arr[j]\n            elif product == largest_product:\n                product /= arr[j]\n            else:\n                break\n        index += 1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    res = []\n    if len(arr) <= 1:\n        return arr[0]\n    \n    curr = max_subarray_product(arr[1:])\n    \n    curr = curr if curr < arr[0] else arr[0]\n    \n    for i in range(len(arr)):\n        \n        for j in range(i+1):\n            if arr[i] <= arr[j]:\n                curr = max(arr[i], curr * arr[j])\n            else:\n                curr = max(arr[i], curr)\n        \n        res.append(curr)\n    \n    return max(res)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = 1\n    max_prod = arr[0]\n    curr_prod = arr[0]\n    \n    for i in range(1,len(arr)):\n        product = product * arr[i]\n        if product > max_prod:\n            max_prod = product\n        curr_prod = curr_prod * arr[i]\n        \n        if curr_prod > max_prod:\n            max_prod = curr_prod\n        \n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # sort the array and update a new array\n    arr.sort()\n    max_sub = 1\n    max_sub_product = 1\n    for i in range(1, len(arr)):\n        # if the last element of the current subarray is greater than the last element in the previous subarray,\n        # then the maximum subarray of the previous subarray is not longer than the current subarray.\n        if arr[i] > arr[i-1] and arr[i] > arr[i-2]:\n            # update the maximum subarray product\n            max_sub = arr[i]\n            max_sub_product = max_sub_product * arr[i]\n        else:\n            # update the subarray product\n            max_sub_product = arr[i] * arr[i]\n            # update the maximum subarray\n            max_sub = arr[i]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    max_prod = -1\n    left, right = 0, 0\n    cur_prod = 1\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            left += arr[i]\n        else:\n            arr[i] = -arr[i]\n            left += arr[i]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    subarray_pairs = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0],arr[1])\n    elif len(arr) == 3:\n        return max(arr[0],arr[1],arr[2])\n    else:\n        cur_product = arr[0]\n        product = 1\n        for i in range(len(arr)-1):\n            product = product * arr[i]\n            cur_product = max(cur_product, product)\n        return cur_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    p, max_product = 0, arr[0]\n    for i in range(len(arr)):\n        p = max(p, arr[i] * (i + 1))\n        max_product = max(p, max_product)\n    return max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(0,len(dict)):\n        if len(dict[i])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= n:\n            print(dict[i])\n            return False\n    print(dict[i])\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_keys = list(dict.keys())\n    for key in all_keys:\n        if key not in dict.keys():\n            print(f'{key} is not in the dictionary. Try again.')\n            return False\n        else:\n            if dict[key]!= dict[all_keys[dict.keys().index(key)]]:\n                print(f'{key} is not the same as the dictionary. Try again.')\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key] == n:\n            return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    if len(dict)!= n:\n        return False\n    for i in dict:\n        if dict[i]!= i:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = True\n    if n == 1:\n        return check\n    \n    for i in range(n-1):\n        if dict[i]!= dict[i+1]:\n            check = False\n    return check\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if k!= n:\n            return False\n        if dict[k] == 'nan':\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if isinstance(i, dict):\n            check_value(i, n)\n        else:\n            if i!= n:\n                print('Error!')\n                return\n    return\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n <= 0:\n        return False\n    if n in dict:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    list1 = dict1.items()\n    list2 = []\n    for k, v in list1:\n        if v == '':\n            del list1[k]\n        else:\n            list2.append((k, v))\n    return list2"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            del(dict1[key])\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if not dict1[key]:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1:\n        if len(dict1[k])==0:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Write your code here\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for k in dict1:\n        if dict1[k] == '':\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.clear()\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Write your code here.\n    res = {}\n    for i in dict1.values():\n        if len(i) == 0:\n            res.update({i: None})\n        else:\n            res.update({i: None})\n    return res\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if dict1[item] == '':\n            del dict1[item]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Brute Force Approach\n    # Time = O(N^2)\n    # Space = O(N)\n    # List of possible inputs = 1 * N\n    # List of possible inputs = 2 * N\n    # O(N)\n    \n    def sequence(arr, n):\n        if n == 0:\n            return arr\n        \n        else:\n            if n % 2 == 0:\n                return [max_product(arr[:n//2])] + sequence(arr, n//2)\n            else:\n                return [max_product(arr[:n//2])] + [arr[n//2]] + sequence(arr, n//2)\n    \n    return max(sequence(arr, len(arr)))\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    answer = [1 for _ in range(len(arr) + 1)]\n    answer[0] = 0\n    for i in range(1, len(arr) + 1):\n        for j in range(i):\n            if arr[j] < arr[i - 1]:\n                answer[i] = max(answer[i], answer[j] + arr[i - 1])\n    return answer[len(arr) + 1]"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_p = arr[0]\n    for i in range(1, len(arr)):\n        max_p = max(arr[i], max_p * arr[i])\n    return max_p\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr_copy = arr.copy()\n    max_product = 0\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # initialize output\n    output = []\n    # start at arr[1], then increment to the next number\n    # until we find the maximum product, then return it\n    for i in range(1, len(arr)):\n        product = arr[i-1] * arr[i]\n        output.append(product)\n    return max(output)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = arr[0]\n    for i in range(len(arr)):\n        result = max(result, arr[i] * result)\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    current_product = arr[0]\n    max_product = arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #arr=[3,4,7,5,8,2,1,9,6]\n    #arr=[3,4,7,2,2,3,4,1,3,3,2,1,1,5,1,3,4,5,5,7]\n    max_product=0\n    length=len(arr)\n    for i in range(length):\n        for j in range(i,length):\n            product=arr[i]*arr[j]\n            if(product>max_product):\n                max_product=product\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_product = arr[i] * max_product\n        else:\n            max_product = arr[i] * arr[i-1]\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    num1,num2 = test_tup\n    num1 = int(num1)\n    num2 = int(num2)\n    n = len(test_tup)\n    m = len(test_tup[0])\n    return num1,num2,n,m\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup[0])\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if test_tup[j][i]!= test_tup[i][j]:\n                return test_tup[j][i] + test_tup[i][j]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def add_two_lists(list1, list2):\n        '''\n        Function to add two lists.\n        '''\n        new_list = []\n        i = 0\n        j = 0\n        while i < len(list1) and j < len(list2):\n            if list1[i] == list2[j]:\n                new_list.append(list1[i])\n                i = i + 1\n                j = j + 1\n            elif list1[i] < list2[j]:\n                i = i + 1\n            elif list1[i] > list2[j]:\n                j = j + 1\n        new_list.extend(list1[i:])\n        new_list.extend(list2[j:])\n        return new_list\n    return add_two_lists(test_tup[0], test_tup[1])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Assertion\n    assert isinstance(test_tup, tuple), 'add_pairwise: tuple argument is not a tuple'\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    return tuple(add_pairwise(tuple(sorted(tuple(test_tup) + tuple(tuple(sorted(tuple(set(test_tup) + tuple(tuple(sorted(tuple(test_tup) + tuple(tuple(sorted(tuple(set(test_tup) + tuple(tuple(sorted(test_tup) + tuple(tuple(test_tup) + tuple(sorted(test_tup)))))))))))))))))))))))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup\n    if x > y:\n        return test_tup\n    else:\n        return (-1, -1)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n    z = test_tup[2]\n    #print(test_tup)\n    return [x, y, z]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Find the first element in the tuple\n    n = test_tup[1]\n    # Find the first element in the second tuple\n    m = test_tup[0]\n    # Find the first element in the third tuple\n    k = test_tup[2]\n    # Find the first element in the fourth tuple\n    l = test_tup[3]\n    # Make a copy of the tuple so we can return it to it's original position\n    tup = test_tup[0:3]\n    # Make the sum of the two elements\n    s = (n * m) + (k * l) + (k * n) + (k * m) + (l * n) + (l * m) + (l * k) + (l * l)\n    # Return the new tuple to the caller\n    return (s, tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    s = str(test_tup[0])\n    e = str(test_tup[1])\n    return s, e\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0, len(arr)): \n        prod = prod * arr[i] % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr_2d = np.array(arr).reshape(len(arr), 1)\n    remainder = np.matmul(arr_2d,arr_2d) % n\n    return np.round(remainder).astype(int)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) < n:\n        return None\n    total_product = 1\n    for i in arr:\n        total_product = total_product * i\n    return total_product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(n):\n        arr[i] = (arr[i]*i) % n\n    return arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # We have 2 lists, arr1 and arr2. For arr1 we have n elements and for arr2 we have\n    # n elements. If we find a value for the remainder of the product, then it is\n    # the product of arr1 and arr2. Return arr1 if we find the product.\n    # If not return arr2, as the products of arr1 and arr2 are not equal to 0.\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n-1):\n        prod = prod*arr[i]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # The new array must be a multiple of n and will have the same sign as the original array.\n    new_arr = []\n    for i in range(0, len(arr), 1):\n        new_arr.append(arr[i]*arr[i])\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for x in range(0, len(arr)):\n        prod = prod * arr[x]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    left, right, result = 0, 1, 1\n    while result!= n:\n        left, right = right, left*right % n\n        result = left\n    return right\n    \ndef main():\n    n = int(input(\"Enter the integer: \"))\n    arr = [int(x) for x in input().split()]\n    print(find_remainder(arr, n))\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 0\n    for i in range(0, len(arr)):\n        result = result*arr[i]\n    return result % n\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c = 0\n    for i in l:\n        if i%2 == 0:\n            c +=1\n    return c==len(l)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i=0\n    while i < len(l): \n        if l[i] == l[i+1]: \n            i+=1\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # loop to find the maximum value \n    max_value = -9999999999 \n    for i in l: \n        if i > max_value and i % 5 == 0: \n            max_value = i \n    # returning True if the length of l is greater than 5 \n    if len(l) > 5: \n        return True\n    # returning False if the length of l is less than 5 \n    else: \n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 5:\n        print(\"Not a valid list\")\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # find if the number is a multiple of 3\n    # find if the number is a multiple of 5\n    # if all conditions are met, return True\n    # Else return False\n    \n    def is_multiple_of_3(number):\n        for each in number:\n            if each % 3!= 0:\n                return False\n        return True\n    \n    def is_multiple_of_5(number):\n        for each in number:\n            if each % 5!= 0:\n                return False\n        return True\n    \n    # check if the number is a multiple of 3 or 5\n    if is_multiple_of_3(l):\n        return \"3 is a multiple of 3\"\n    elif is_multiple_of_5(l):\n        return \"5 is a multiple of 5\"\n    else:\n        return \"No number is a multiple of 3 or 5\"\n    \n    \n    \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if(l[0] == l[1] and l[0]!= l[2]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    if l[0]!= l[len(l)-1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if (len(l) % 2 == 0): \n        i = 0\n        while i < len(l) - 1:\n            if l[i] + l[i+1] in l[i+2::]:\n                i += 1\n            else:\n                return False\n    else:\n        i = 0\n        while i < len(l) - 1:\n            if l[i] + l[i+1] in l[i+2::]:\n                i += 1\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l[-1] - l[0] == 0:\n        return True\n    elif l[0] == l[1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_tuple = tuple(test_list1)\n    test_list2_tuple = tuple(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1 == []:\n        return ()\n    if test_list2 == []:\n        return ()\n    if len(test_list1) > len(test_list2):\n        return test_list1\n    if len(test_list2) > len(test_list1):\n        return test_list2\n    return test_list1[0]\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) < len(test_list2):\n        test_list2 = test_list2[:len(test_list1)]\n    elif len(test_list1) > len(test_list2):\n        test_list1 = test_list1[:len(test_list2)]\n    \n    result = []\n    for el in test_list1:\n        if el in test_list2:\n            result.append(el)\n    \n    return tuple(result)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    test_list1.sort()\n    test_list2.sort()\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection.append(test_list1[i])\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(filter(lambda tup1, tup2: tup1[0] == tup2[0], test_list1, test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            if test_list1[i] not in intersection:\n                intersection = test_list1[i]\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_sorted = sorted(test_list1)\n    test_list2_sorted = sorted(test_list2)\n    intersect_list = []\n    for i in range(len(test_list1_sorted)):\n        for j in range(len(test_list2_sorted)):\n            if test_list1_sorted[i] == test_list2_sorted[j]:\n                intersect_list.append(test_list2[j])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    result_list_2 = []\n    result_list_3 = []\n    for element in test_list1:\n        if element in test_list2:\n            result_list.append(element)\n    for element in test_list2:\n        if element in test_list1:\n            result_list_2.append(element)\n    for element in test_list1:\n        if element not in test_list2:\n            result_list_3.append(element)\n    result = tuple(result_list)\n    result_2 = tuple(result_list_2)\n    result_3 = tuple(result_list_3)\n    return result, result_2, result_3\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_list1 = []\n    intersect_list2 = []\n    i = 0\n    j = 0\n    while i < len(test_list1):\n        if test_list1[i] in test_list2:\n            intersect_list1.append(test_list1[i])\n            i += 1\n        else:\n            intersect_list2.append(test_list2[j])\n            j += 1\n    return intersect_list1, intersect_list2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #keep track of where we are in the string\n    i = 0\n    #loop through string\n    while i < len(str1):\n        #check if current char is equal to char\n        if str1[i] == ch:\n            #if so, we replace it\n            str1 = str1.replace(str1[i],newch)\n        #check if current char is not equal to char\n        else:\n            #if not, keep moving\n            i = i+1\n    #print string after replacement\n    print(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        str1[i] = newch\n    return(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in str1:\n        str2+=replace_char(ch,i,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.lower()\n    str1=str1.replace(ch,newch)\n    return str1\ndef main():\n    file1=input('Enter file name: ')\n    file2=input('Enter file name: ')\n    try:\n        infile=open(file1,'r')\n    except:\n        print('File not found')\n        return\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res = ''\n    for ch in str1:\n        if ch == chr(newch):\n            res+=ch\n        else:\n            res+=chr(ch)\n    return res\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return ''.join(c if c == newch else c.replace(ch,newch) for c in str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    char_array = list(str1)\n    char_array[int(ch)-1] = newch\n    str1 = \"\".join(char_array)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if ch == str1[i]:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # your code goes here\n    newstr=''\n    for i in range(0,len(str1)):\n        if(str1[i]==ch):\n            newstr=newstr+newch\n        else:\n            newstr=newstr+str1[i]\n    return(newstr)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict1 = {}\n    for k, v in dict1.items():\n        new_dict1[v] = k\n    dict1 = new_dict1\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1_sorted = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return dict1_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key = lambda x : x[1])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict1.copy()\n    dict2 = dict2.items()\n    dict2 = sorted(dict2, key = lambda x: x[1])\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict1.copy()\n    for k, v in dict2.items():\n        if isinstance(v, Counter):\n            dict2[k] = sorted(v.elements(), reverse=True, key=lambda x: x[1])\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.values(), key=lambda x: x)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for k, v in dict1.items():\n        print(k,v)\n    print(\"\\n\")\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in dict1.keys():\n        dict1[key] = sorted(dict1[key])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    l = len(nums)\n    if l == 0:\n        return 0\n    for i in range(l):\n        s += nums[i]\n    if s >= max(nums):\n        return max(nums)\n    else:\n        return s"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in nums:\n        sum = max(sum, i)\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    def calculate_sum(array):\n        res = 0\n        for item in array:\n            res += item\n        return res\n    \n    def get_max_and_min(array):\n        min = array[0]\n        max = array[0]\n        for item in array:\n            if item < min:\n                min = item\n            elif item > max:\n                max = item\n        return min, max\n    \n    def find_largest_and_smallest(array):\n        largest = 0\n        smallest
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    # if n is 0 then return 0\n    if n == 0:\n        return 0\n    # base case - no sum\n    if nums[0] == 0:\n        return nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_num = nums[0]\n    min_num = nums[0]\n    for item in nums:\n        if item > max_num:\n            max_num = item\n        if item < min_num:\n            min_num = item\n    return max_num+min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #sorting the list\n    nums.sort()\n    \n    # Finding the largest value\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for i in range(1, len(nums)):\n        \n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    return largest + smallest\n    \n    # Running loop for checking sum\n    #for i in nums:\n        \n    #return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_ = max(nums)\n    min_ = min(nums)\n    return max_ - min_\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        elif i < smallest:\n            smallest = i\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # First we need to check if all the numbers are positive\n    if nums == None or len(nums) == 0:\n        return 0\n    \n    # Now we need to do some \n    if nums[0] < 0:\n        print('False')\n        return 0\n    \n    # For all the numbers except the last, we need to check if the number has a \n    # larger or smaller value\n    if nums[0] == 0:\n        print('False')\n        return 0\n    \n    # We have a sorted array, so we need to find the sum of each number\n    # Then we need to create a set to keep track of the maximum and minimum value\n    # and then we can use the max_value and min_value to get the sum\n    max_value = -sys.maxsize\n    min_value = sys.maxsize\n    \n    for num in nums[0:len(nums) - 1]:\n        if num < 0:\n            # It is a negative number so we need to update the min and max value\n            if min_value > num:\n                min_value = num\n            elif max_value < num:\n                max_value = num\n            \n        elif num > 0:\n            # It is a positive number so we need to update the max and min values\n            if max_value < num:\n                max_value = num\n            elif min_value > num:\n                min_value = num\n    \n    # Now we are sure the number is positive so we need to return the sum\n    return max_value + min_value\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.isupper():\n        return string.lower()\n    else:\n        return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = ''\n    for char in string:\n        new_string += char.lower()\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new = ''\n    for i in string:\n        if i.islower():\n            new += i.lower()\n        else:\n            new += i\n    return new\n    \n    "
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new = ''\n    for x in string:\n        if x.isupper():\n            new += x.lower()\n        elif x.islower():\n            new += x.upper()\n        else:\n            new += x\n    return new\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) is not str:\n        raise TypeError('string must be of type string')\n    else:\n        return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if len(string) == 0:\n        return None\n    if string[0] == string[-1]:\n        return string[0].lower()+string[1:]\n    return string[0].lower()+string[1:-1]+string[-1].lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    p=re.compile('(.)')\n    ans=[]\n    for i in str1:\n        if i.lower() in p.sub('',str1):\n            ans.append(i)\n        else:\n            ans.append(i)\n    return ''.join(ans)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=''\n    for i in str1:\n        if(i.islower()==False):\n            str2+=i\n    return str2\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str2=''\n    for i in str1:\n        if(i.isdigit()==True):\n            str2+=i\n    return str2\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    str2=''\n    for i in str1:\n        if(i.isalnum()==False):\n            str2+=i\n    return str2\n    \ndef remove_extra_spaces(str1):\n    '''\n    Write a function to remove extra spaces from a given string.\n    '''\n    str2=''\n    for i in str1:\n        if(i!=' '):\n            str2+=i\n    return str2\n    \ndef clean_input(input):\n    '''\n    Takes a string as input and returns a new string where all lowercase, \n    numbers, punctuation and extra spaces have been removed. \n    '''\n    str1=''\n    for i in input:\n        if(i.islower()==False):\n            str1+=i\n    return str1\n    \ndef clean_output(input):\n    '''\n    Takes a string as input and returns a new string where all digits \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i.isdigit()==False):\n            str1+=i\n    return str1\n    \ndef clean_output_2(input):\n    '''\n    Takes a string as input and returns a new string where all numbers \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i.isdigit()==True):\n            str1+=i\n    return str1\n    \ndef clean_output_3(input):\n    '''\n    Takes a string as input and returns a new string where all punctuation \n    is removed.\n    '''\n    str1=''\n    for i in input:\n        if(i.isalnum()==True):\n            str1+=i\n    return str1\n    \ndef clean_output_4(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    is removed.\n    '''\n    str1=''\n    for i in input:\n        if(i==' '):\n            str1+=i\n    return str1\n    \ndef clean_output_5(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_6(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i==' '):\n            str1+=i\n    return str1\n    \ndef clean_output_7(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_8(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_9(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_10(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_11(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_12(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_13(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_14(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_15(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_16(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_17(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_18(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_19(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_20(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_21(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+=i\n    return str1\n    \ndef clean_output_22(input):\n    '''\n    Takes a string as input and returns a new string where all extra spaces \n    are removed.\n    '''\n    str1=''\n    for i in input:\n        if(i!=' '):\n            str1+"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = []\n    for i in range(len(str1)):\n        if str1[i].islower():\n            new_str.append(str1[i].lower())\n        else:\n            new_str.append(str1[i])\n    return ''.join(new_str)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return str1\n    return ''.join([i.lower() if i.isalpha() else i for i in str1])\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r\"\\W+\", \"\", str1)\n    str1 = re.sub(r\"\\w+\\W+\", \"\", str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern1 = re.compile(r'[a-z]')\n    pattern2 = re.compile(r'[A-Z]')\n    pattern3 = re.compile(r'[a-zA-Z]')\n    pattern4 = re.compile(r'[!#$%&' '()*+,-./:;<=>?@[\\\\]^_`{|}~]')\n    str1 = pattern1.sub('', str1)\n    str2 = pattern2.sub('', str1)\n    str3 = pattern3.sub('', str1)\n    str4 = pattern4.sub('', str1)\n    return str2, str3, str4\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError('Input must be a string.')\n    \n    lowercase = [str1[i:i+2].lower() for i in range(len(str1)-1)]\n    lowercase = [i.replace('.', '') for i in lowercase]\n    lowercase = [i.replace(' ', '') for i in lowercase]\n    lowercase = [i for i in lowercase if len(i) > 1]\n    lowercase = [i for i in lowercase if i]\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l1 = []\n    # find the longest word in str1\n    maxword = ''\n    for i in range(len(str1)):\n        word = str1[i]\n        if word.isalpha():\n            if word == word.lower():\n                if len(word) > len(maxword):\n                    maxword = word\n            else:\n                l1.append(word)\n    l1 =''.join(l1)\n    return l1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = re.sub('[a-z]+', '', str1)\n    return result\ndef remove_word(str1):\n    '''\n    Write a function that takes a string and returns a string that has all lowercase characters.\n    '''\n    result = re.sub('[A-Z]', '', str1)\n    return result\ndef remove_lower(str1):\n    '''\n    Write a function that takes a string and returns a string with all lowercase characters.\n    '''\n    result = re.sub('[a-z]', '', str1)\n    return result\ndef remove_upper(str1):\n    '''\n    Write a function that takes a string and returns a string with all upper case characters.\n    '''\n    result = re.sub('[A-Z]', '', str1)\n    return result\ndef remove_special_characters(str1):\n    '''\n    Write a function that takes a string and returns a string with all special characters removed.\n    '''\n    result = re.sub('[^A-Za-z0-9-]', '', str1)\n    return result\ndef remove_numbers(str1):\n    '''\n    Write a function that takes a string and returns a string with all numbers removed.\n    '''\n    result = re.sub('[0-9]', '', str1)\n    return result\ndef remove_punctuation(str1):\n    '''\n    Write a function that takes a string and returns a string with all punctuation removed.\n    '''\n    result = re.sub('[!\\\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]', '', str1)\n    return result\ndef remove_hyphen(str1):\n    '''\n    Write a function that takes a string and returns a string with all hyphens removed.\n    '''\n    result = re.sub('-', '', str1)\n    return result\ndef remove_stops(str1):\n    '''\n    Write a function that takes a string and returns a string with all stopwords removed.\n    '''\n    result = re.sub('\\s', '', str1)\n    return result\ndef remove_links(str1):\n    '''\n    Write a function that takes a string and returns a string with all links removed.\n    '''\n    result = re.sub('<a href=.*>', '', str1)\n    return result\ndef remove_emails(str1):\n    '''\n    Write a function that takes a string and returns a string with all emails removed.\n    '''\n    result = re.sub('<a href=\"mailto:.*\">', '', str1)\n    return result\ndef remove_newline(str1):\n    '''\n    Write a function that takes a string and returns a string with all newline characters removed.\n    '''\n    result = re.sub('\\n', '', str1)\n    return result\ndef remove_dash_m(str1):\n    '''\n    Write a function that takes a string and returns a string with all dash-m symbols removed.\n    '''\n    result = re.sub('-{2}', '', str1)\n    return result\ndef remove_dash_r(str1):\n    '''\n    Write a function that takes a string and returns a string with all dash-r symbols removed.\n    '''\n    result = re.sub('-{3}', '', str1)\n    return result\ndef remove_dash_e(str1):\n    '''\n    Write a function that takes a string and returns a string with all dash-e symbols removed.\n    '''\n    result = re.sub('-{4}', '', str1)\n    return result\ndef remove_dot(str1):\n    '''\n    Write a function that takes a string and returns a string with all dot symbols removed.\n    '''\n    result = re.sub('\\.{2}', '', str1)\n    return result\ndef remove_bullet(str1):\n    '''\n    Write a function that takes a string and returns a string with all bullet symbols removed.\n    '''\n    result = re.sub('\\u2212', '', str1)\n    return result\ndef remove_non_ascii_char(str1):\n    '''\n    Write a function that takes a string and returns a string with all non-ascii characters removed.\n    '''\n    result = re.sub('[^A-Za-z0-9]', '', str1)\n    return result\ndef remove_slash(str1):\n    '''\n    Write a function that takes a string and returns a string with all slashes removed.\n    '''\n    result = re.sub('//', '', str1)\n    return result\ndef remove_spaces(str1):\n    '''\n    Write a function that takes a string and returns a string with all spaces removed.\n    '''\n    result = re.sub('\\s', '', str1)\n    return result\ndef remove_all_spaces(str1):\n    '''\n    Write a function that takes a string and returns a string with all spaces removed.\n    '''\n    result = re.sub('\\s', '', str1)\n    return result\ndef remove_all_non_alphanumeric(str1):\n    '''\n    Write a function that takes a string and returns a string with all non-alphanumeric characters removed.\n    '''\n    result = re.sub('[^A-Za-z0-9]', '', str1)\n    return result\ndef remove_all_special_characters(str1):\n    '''\n    Write a function that takes a string and returns a string with all special characters removed.\n    '''\n    result = re.sub('[!\\\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]', '', str1)\n    return result\ndef remove_all_numbers(str1):\n    '''\n    Write a function that takes a string and returns a string with all non-numbers removed.\n    '''\n    result = re.sub('[0-9]', '', str1)\n    return result\ndef remove_all_punctuation(str1):\n    '''\n    Write a function that takes a string and returns a string with all punctuation removed.\n    '''\n    result = re.sub('[!\\\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]', '', str1)\n    return result\ndef remove_all_hyphens(str1):\n    '''\n    Write a function that takes a string and returns a string with all hyphens removed.\n    '''\n    result = re.sub('-{2}', '', str1)\n    return result\ndef remove_all_stopwords(str1):\n    '''\n    Write a function that takes a string and returns a string with all stopwords removed.\n    '''\n    result = re.sub('\\W+','', str1)\n    return result\ndef remove_all_links(str1):\n    '''\n    Write a function that takes a string and returns a string with all links removed.\n    '''\n    result = re.sub('<a href=.*>', '', str1)\n    return result\ndef remove_all_emails(str1):\n    '''\n    Write a function that takes a string and returns a string with all emails removed.\n    '''\n    result = re.sub('<a href=\"mailto:.*\">', '', str1)\n    return result\ndef remove_all_newline(str1):\n    '''\n    Write a function that takes a string and returns a string with all newline characters removed.\n    '''\n    result = re.sub('\\n', '', str1)\n    return result\ndef remove_all_dash_m(str1):\n    '''\n    Write a function that takes a string and returns a string with all dash-m symbols removed.\n    '''\n    result = re.sub('-{2}', '', str1)\n    return result\ndef remove_all_dash_r(str1):\n    '''\n    Write a function that takes a string and returns a string with all dash-r symbols removed.\n    '''\n    result = re.sub('-{3}', '', str1)\n    return result\ndef remove_all_dash"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 : \n        return n \n    else : \n        return 10 ** (len(str(n)) - 1) - n % 10 \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :  \n        return n % 10  \n    else :  \n        return firstDigit(int(n / 10))  \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #code here\n    num = n\n    num_in_digits = 0\n    while num > 0 :\n        digit = num % 10\n        num = int(num/10)\n        num_in_digits += 1\n    return num_in_digits\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = len(str(n)) - 1\n    while i >= 0:\n        if int(n % 10) == 0 :\n            return n // 10\n        i -= 1\n    return -1\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Write your code here\n    if n == 0:\n        return 0\n    else:\n        return n % 10\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    if n % 10 == 0 :\n        return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    list = []\n    list2 = []\n    list3 = []\n    for i in n :\n        if(i == '0') :\n            break\n        list.append(i)\n    for i in range (len(list) - 1) :\n        if(list[i] == list[i+1]) :\n            list3.append(list[i])\n        else :\n            list2.append(list[i])\n    return list2[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 if n % 10 == 0 else int(str(n)[-1])\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return first_Digit(n//10) + (n%10)\n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # print(f\"The first digit of {n} is {n%10}\")\n    if n % 10 == 0 :\n        return n // 10\n    else :\n        return n % 10\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    # print(f\"The second digit of {n} is {n%100}\")\n    if n % 100 == 0 :\n        return n // 100\n    else :\n        return n % 100\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in range(len(list)):\n        if (list[i] % 2 == 1):\n            list[i] = list[i]\n            break\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list.sort(reverse = True)\n    return list[:5]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    Even=[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            Even.append(list[i])\n    return Even\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return odd\n    \n    "
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2 == 1:\n            odd.append(i)\n    return odd \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    \n    for number in list: \n        if number % 2!= 0: \n            odd.append(number) \n        \n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Find the length of the list\n    length = len(list)\n    # Find the odd values in the list\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    # Return the odd values\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2] \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in list:\n        if i%2!= 0:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(n,0,-1) :\n        s += i ** 3\n    return s\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [n**3 for n in range(1,n+1)]\n    result = 0\n    for i in range(n):\n        result += cubes[i]\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n * (n + 1) * (n - 1)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cube1 = 1\n    cube2 = 1\n    while n > 0 :\n        cube1 = cube1 + cube1 * cube2\n        cube2 = cube2 + cube2 * cube2\n        n = n - 1\n    return cube1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube(n) :  \n        '''\n        Write a python function to find the cube of the first n natural numbers.\n        '''\n        cube_list = []\n        for i in range(n) :\n            cube_list.append(i**3)\n        cube_sum = 0\n        for j in cube_list :\n            cube_sum += j\n        return cube_sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n+1) :\n        cube_sum += (i**3)\n    return cube_sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n<=0 :\n        return None\n    else :\n        cubes = 0\n        for i in range(1,n+1) :\n            cubes = cubes + (i**3)\n        return cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    if n <= 0:\n        print('Invalid Input')\n        return\n    elif n == 1:\n        return n\n    else:\n        return n*(n+1)*(n-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum += i**3\n    return sum - sum**3\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 :\n        return None\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(0,N):\n        if A[i]&1 == 1 :\n            odd += 1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N-1) : \n        if A[i] == A[i-1] ^ A[i+1] :\n            count += 1\n    return count\n    \ndef find_Odd_Pair_1(A) :\n    '''\n    Write a python function to find the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,len(A)-1) : \n        if A[i] == A[i-1] ^ A[i+1] :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N) : \n        for j in range(N) : \n            if(A[i]^A[j]==0) :\n                if(A[i]==A[j]) : \n                    count=count+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    result = 0\n    i = 0\n    while(i<N):\n        if(A[i]%2!=0):\n            result += 1\n        i+=1\n    return result\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(0,i+1):\n            if A[i] ^ A[j]!= 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    xor_odd_count = 0\n    for i in range(N) :\n        if A[i]&1 == 0 :\n            xor_odd_count += 1\n        elif A[i]&1 == 1 :\n            xor_odd_count += 1\n            \n    return xor_odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) % 2 == 1 : \n                c += 1\n    return c\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c = 0\n    for i in range(N):\n        if (A[i]&1)!= 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N): \n        for j in range(N) : \n            if A[i] ^ A[j] == 0 : \n                count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    a=A.count(N)\n    b=0\n    for i in range(len(A)) :\n        if A[i]&1!= 0 :\n            b+=1\n    return a,b\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for letter in string:\n        if letter.islower():\n            new_string += letter.upper()\n        else:\n            new_string += letter.lower()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower() + \" \"\n        else:\n            new_string += char.upper() + \" \"\n    return new_string[:-1]\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string[0]==' ':\n        print(\"It is the first character of the string!\")\n    else:\n        print(\"It is not the first character of the string!\")\n    string = string.split()\n    for i in range(1,len(string)):\n        string[i] = string[i].capitalize()\n    print(f\"This string has been capitalized! New String: {string}\")\n    \ndef add_string(string, string2):\n    '''\n    Write a function to add two strings together without using the + operator.\n    '''\n    string = string.split()\n    string2 = string2.split()\n    string_list = []\n    for i in range(0,len(string2)):\n        string_list.append(string2[i])\n    for i in range(0,len(string)):\n        string_list.append(string[i])\n    for i in range(0,len(string_list)):\n        string_list[i] = string_list[i].lower()\n    final_string = string_list[0]\n    print(f\"Add two strings in one line is: {final_string}\")\n    for i in range(1,len(string_list)):\n        final_string = final_string + string_list[i]\n    print(f\"Add two strings in one line is: {final_string}\")\n    return final_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    print(string)\n    \n    def toggle_chars(char_list):\n        '''\n        Toggles all characters in a list of strings.\n        '''\n        \n        print(char_list)\n        \n        def toggle_string(string_list):\n            '''\n            Toggles all characters in a list of strings.\n            '''\n            \n            print(string_list)\n            \n            def toggle_chars(chars_list):\n                '''\n                Toggles all characters in a list of strings.\n                '''\n                \n                print(chars_list)\n                \n                def toggle_string(string_list):\n                    '''\n                    Toggles all characters in a list of strings.\n                    '''\n                    \n                    print(string_list)\n                    \n                    def toggle_chars(chars_list):\n                        '''\n                        Toggles all characters in a list of strings.\n                        '''\n                        \n                        print(chars_list)\n                        \n                        def toggle_string(string_list):\n                            '''\n                            Toggles all characters in a list of strings.\n                            '''\n                            \n                            print(string_list)\n                            \n                            def toggle_chars(chars_list):\n                                '''\n                                Toggles all characters in a list of strings.\n                                '''\n                                \n                                print(chars_list)\n                                \n                                def toggle_string(string_list):\n                                    '''\n                                    Toggles all characters in a list of strings.\n                                    '''\n                                    \n                                    print(string_list)\n                                    \n                                    def toggle_chars(chars_list):\n                                        '''\n                                        Toggles all characters in a list of strings.\n                                        '''\n                                        \n                                        print(chars_list)\n                                        \n                                        def toggle_string(string_list):\n                                            '''\n                                            Toggles all characters in a list of strings.\n                                            '''\n                                            \n                                            print(string_list)\n                                            \n                                            def toggle_chars(chars_list):\n                                                '''\n                                                Toggles all characters in a list of strings.\n                                                '''\n                                                \n                                                print(chars_list)\n                                                \n                                                def toggle_string(string_list):\n                                                    '''\n                                                    Toggles all characters in a list of strings.\n                                                    '''\n                                                    \n                                                    print(string_list)\n                                                    \n                                                    def toggle_chars(chars_list):\n                                                        '''\n                                                        Toggles all characters in a list of strings.\n                                                        '''\n                                                        \n                                                        print(chars_list)\n                                                        \n                                                        def toggle_string(string_list):\n                                                        '''\n                                                        Toggles all characters in a list of strings.\n                                                        '''\n                                                        \n                                                        print(string_list)\n                                                        \n                                                        def toggle_chars(chars_list):\n                                                            '''\n                                                            Toggles all characters in a list of strings.\n                                                            '''\n                                                            \n                                                            print(chars_list)\n                                                            \n                                                            def toggle_string(string_list):\n                                                                '''\n                                                                Toggles all characters in a list of strings.\n                                                                '''\n                                                                \n                                                                print(string_list)\n                                                                \n                                                                def toggle_chars(chars_list):\n                                                                    '''\n                                                                    Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(chars_list)\n                                                                    \n                                                                    def toggle_string(string_list):\n                                                                        '''\n                                                                    Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(string_list)\n                                                                    \n                                                                    def toggle_chars(chars_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(chars_list)\n                                                                    \n                                                                    def toggle_string(string_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(string_list)\n                                                                    \n                                                                    def toggle_chars(chars_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(chars_list)\n                                                                    \n                                                                    def toggle_string(string_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(string_list)\n                                                                    \n                                                                    def toggle_chars(chars_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(chars_list)\n                                                                    \n                                                                    def toggle_string(string_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(string_list)\n                                                                    \n                                                                    def toggle_chars(chars_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(chars_list)\n                                                                    \n                                                                    def toggle_string(string_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(string_list)\n                                                                    \n                                                                    def toggle_chars(chars_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(chars_list)\n                                                                    \n                                                                    def toggle_string(string_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(string_list)\n                                                                    \n                                                                    def toggle_chars(chars_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(chars_list)\n                                                                    \n                                                                    def toggle_string(string_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(string_list)\n                                                                    \n                                                                    def toggle_chars(chars_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(chars_list)\n                                                                    \n                                                                    def toggle_string(string_list):\n                                                                        '''\n                                                                        Toggles all characters in a list of strings.\n                                                                    '''\n                                                                    \n                                                                    print(string_list)\n                                                                "
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle(string):\n        new_string = ''\n        for ch in string:\n            if ch.isupper():\n                new_string +=''\n            new_string += ch.lower()\n        return new_string.strip()\n    return toggle\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.replace(\" \",\"\")\n    new_string = \"\"\n    for letter in string:\n        if letter == letter.upper():\n            new_string += letter.lower()\n        else:\n            new_string += letter.upper()\n    print(new_string)\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # your code goes here\n    if string[0].isalpha():\n        if string[0].isupper():\n            string = string.swapcase()\n        else:\n            string = string.swapcase().lower()\n    return string\n    \ndef main():\n    '''\n    Test your program with the string test_string.\n    '''\n    # pass\n    test_string = \"Hello\"\n    print(\"String: {}\".format(test_string))\n    print(\"Toggle case: {}\".format(toggle_string(test_string)))\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def swap_case(string):\n        '''\n        Swap all lower and upper case of the given string.\n        '''\n        swap_dict = {\n            'a': '4',\n            'b': '5',\n            'c': '6',\n            'd': '7',\n            'e': '8',\n            'f': '9',\n            'g': '10',\n            'h': 'j',\n            'i': 'j',\n            'j': 'i',\n            'k': 'i',\n            'l': 'j',\n            'm':'m',\n            'n':'m',\n            'o':'m',\n            'p':'m',\n            'q':'m',\n            'r':'m',\n            's':'m',\n            't':'m',\n            'u': 'i',\n            'v': 'j',\n            'w': 'k',\n            'x': 'l',\n            'y':'m',\n            'z': 'n',\n        }\n        return ''.join([swap_dict.get(c, c) for c in string])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # range(1, 10): n1, n2\n    digit_distance = [abs(n1 - n2), abs(n2 - n1), abs(n1 - n2 - n1), abs(n1 - n2 - n2)]\n    return sum(digit_distance)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0:\n        return n2\n    elif n2 == 0:\n        return n1\n    elif n1 > n2:\n        return n1 - digit_distance_nums(n1, n2 - n1)\n    else:\n        return n2 - digit_distance_nums(n2, n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # create a dictionary of digits and digits to numbers and vice versa\n    dictionary = {'1': [1, 1], '2': [2, 1], '3': [3, 2], '4': [4, 3], '5': [5, 4], '6': [6, 5], '7': [7, 6], '8': [8, 7], '9': [9, 8], '0': [0, 9]}\n    # loop through digits and compare it with numbers stored in dictionary\n    for digit in digit_combinations:\n        # get the number of digits and then find the difference between two digits\n        num_digit = dictionary.get(digit)\n        if n1 < num_digit[0] < n2:\n            # if n1 is greater than n2, then we need to subtract that number from the total\n            n1 -= num_digit[0]\n            n2 -= num_digit[0]\n        elif n1 < num_digit[1] < n2:\n            # if n1 is less than n2, then we need to add that number to the total\n            n1 += num_digit[0]\n            n2 += num_digit[0]\n    # return the differences\n    return n1-n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = []\n    for i in range(10):\n        diff.append(abs(n1 - n2 - i))\n    return sum(diff)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return (n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(digits(n1+n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    dig = int(str(n1)[0])\n    if not dig <= 9:\n        raise ValueError(\"Digit count must be >= 1 and < 10\")\n    if dig >= 10:\n        dig = 1\n    diff = 0\n    for digit in str(n2):\n        diff += int(digit) - int(digit.zfill(dig))\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if (n1+n2) % 10 == 0:\n        return (n1 - n2)\n    else:\n        return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the sum of the per-digit difference between two integers.\n    sum_per_digit = 0\n    for i in range(len(n1)):\n        sum_per_digit += (int(n1[i]) - int(n2[i]))\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Code here\n    res = []\n    \n    def recur(a, index, sub_sum, n):\n        if index == n:\n            sum = sub_sum\n            res.append(sum)\n            return\n        \n        for i in range(index, n):\n            sub_sum += a[i]\n            recur(a, i + 1, sub_sum, n)\n    \n    recur(a, 0, 0, size)\n    return max(res)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # base case\n    if size == 0:\n        return 0\n    \n    # if sum of largest sublist is > 0, then return sum of largest sublist\n    if a[size - 1] < 0:\n        return max(a[size - 1] - a[size], 0)\n    \n    # iterate over list and return sum of largest sublist\n    result = 0\n    for i in range(size):\n        # update sum of current sublist to the sum of current sublist plus number\n        # of the largest sublist\n        result += max(a[i] - a[size - 1], 0)\n        # if current sublist is empty\n        if i == size - 1:\n            result -= max(a[i] - a[size - 1], 0)\n    \n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = 0\n    i = 0\n    while i < size:\n        s += a[i]\n        i += 1\n        if s > size - size:\n            break\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    a = sorted(a, reverse=True)\n    index = 0\n    sum = a[index]\n    count = 1\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # The idea here is to initialize the list of the length of the first list.\n    # This is the length of the longest contiguous sublist.\n    # We will keep the index of the largest contiguous sublist, and add it to the sum.\n    # Repeat this until we reach the length of the first list.\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Base case\n    if size == 1:\n        return a[0]\n    \n    # Recursive case\n    return max(\n        max_sub_array_sum(a, size - 1),\n        a[size] + a[size - 1]\n    )\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    res = 0\n    curr_sum = 0\n    index = 0\n    for i in range(len(a)):\n        curr_sum += a[i]\n        if i==index:\n            res = max(res, curr_sum)\n        else:\n            if curr_sum == res:\n                index += 1\n            curr_sum = 0\n    return res\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_list = []\n    \n    for i in range(0, size):\n        sub_list.append(a[i])\n    \n    sub_list.sort()\n    sub_list_sum = sum(sub_list[i:i+1])\n    \n    return sub_list_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Complete this function to do the same.\n    l = len(a)\n    sub_sum = 0\n    for i in range(l):\n        sub_sum = max(sub_sum, a[i])\n    return sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    \n    max_sum = 0\n    for i in range(1, n):\n        max_sum += max(a[i-1], a[i])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Write your code here.\n    # The function expects two tuples as arguments:\n    #   tup1 - a tuple of elements\n    #   tup2 - another tuple of elements\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = ()\n    for i in test_tup1:\n        new_tup += i\n    for i in test_tup2:\n        new_tup += i\n    new_tup += (sorted(set(test_tup2) - set(test_tup1)))\n    return new_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    assert (isinstance(test_tup1, tuple))\n    assert (isinstance(test_tup2, tuple))\n    assert ((len(test_tup1) == len(test_tup2)) and (len(test_tup1) > 0))\n    new_tup = tuple(sorted(set(test_tup1) | set(test_tup2)))\n    return new_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    res = []\n    i, j = 0, 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            res.append(test_tup1[i])\n            i += 1\n        else:\n            res.append(test_tup2[j])\n            j += 1\n    if i < len(test_tup1):\n        res += test_tup1[i:]\n    elif j < len(test_tup2):\n        res += test_tup2[j:]\n    return res\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    output = []\n    list_1 = list(test_tup1)\n    list_2 = list(test_tup2)\n    list_1.extend(list_2)\n    list_1.sort()\n    return tuple(list_1)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    i = 0\n    j = 0\n    while i < len(tup1) and j < len(tup2):\n        if tup1[i] < tup2[j]:\n            tup1[i] += tup2[j]\n            i += 1\n        else:\n            tup1[j] += tup1[i]\n            j += 1\n    while i < len(tup1):\n        tup1[i] += tup2[j]\n        i += 1\n    while j < len(tup2):\n        tup2[j] += tup1[i]\n        j += 1\n    return tup1, tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # Create a list to store the union\n    unions = []\n    \n    # Check if the tuple is already in the union\n    # If it is, return the tuple in sorted order\n    if test_tup1[0] in test_tup2:\n        return tuple(sorted(test_tup1 + test_tup2))\n    \n    # If it is not, append the tuple in the union\n    # And append the tuple in the union\n    else:\n        unions.append(test_tup1)\n        unions.append(test_tup2)\n    \n    # Return the union\n    return tuple(sorted(unions)"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #Create an empty list to store the elements of the given tuples.\n    union_elements = []\n    #Create a flag to keep the elements in the given tuples.\n    union_elements_flag = 0\n    #For loop to find all the elements in both the given tuples\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                union_elements.append(test_tup1[i])\n                union_elements_flag = 1\n    #If the elements in the tuples are not equal to the first element in the first list, add the first element to the union_elements.\n    if union_elements_flag!= 0:\n        union_elements.append(test_tup1[0])\n    #If the elements in the tuples are equal to the first element in the second list, add the first element to the union_elements.\n    if union_elements_flag!= 0:\n        union_elements.append(test_tup2[0])\n    #Return the union of the list\n    return union_elements\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    t1, t2 = test_tup1, test_tup2\n    if len(t1) > len(t2):\n        t1, t2 = t2, t1\n    return tup(sorted(t1), sorted(t2))\n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    t1, t2 = test_tup1, test_tup2\n    if len(t1) > len(t2):\n        t1, t2 = t2, t1\n    return tup(t1, sorted(t2))\n    \ndef difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the difference of the elements of two given tuples and output them in sorted order.\n    '''\n    t1, t2 = test_tup1, test_tup2\n    if len(t1) > len(t2):\n        t1, t2 = t2, t1\n    return tup(t1, t2)\n    \ndef maximum_element(test_tup):\n    '''\n    Write a function to find the maximum element in a tuple.\n    '''\n    return test_tup[0]\n    \ndef minimum_element(test_tup):\n    '''\n    Write a function to find the minimum element in a tuple.\n    '''\n    return test_tup[-1]\n    \ndef product(test_tup, test_tup2):\n    '''\n    Write a function to find the product of the elements of two given tuples.\n    '''\n    return test_tup[0]*test_tup[1]\n    \ndef sum_of_elements(test_tup):\n    '''\n    Write a function to find the sum of the elements in a tuple.\n    '''\n    return sum(test_tup)\n    \ndef sum_of_elements2(test_tup1, test_tup2):\n    '''\n    Write a function to find the sum of the elements in a tuple.\n    '''\n    return sum(test_tup1+test_tup2)\n    \ndef length_of_tuple(tup):\n    '''\n    Return the length of a tuple.\n    '''\n    return len(tup)\n    \ndef get_first_element(tup):\n    '''\n    Return the first element of a tuple.\n    '''\n    return tup[0]\n    \ndef get_last_element(tup):\n    '''\n    Return the last element of a tuple.\n    '''\n    return tup[-1]\n    \ndef get_length(tup):\n    '''\n    Return the length of a tuple.\n    '''\n    return len(tup)\n    \ndef get_min(tup):\n    '''\n    Return the minimum element of a tuple.\n    '''\n    return min(tup)\n    \ndef get_max(tup):\n    '''\n    Return the maximum element of a tuple.\n    '''\n    return max(tup)\n    \ndef get_sum(tup):\n    '''\n    Return the sum of a tuple.\n    '''\n    return sum(tup)\n    \ndef get_product(tup):\n    '''\n    Return the product of a tuple.\n    '''\n    return product(tup)\n    \ndef get_product2(tup1, tup2):\n    '''\n    Return the product of two tuples.\n    '''\n    return product(tup1,tup2)\n    \ndef get_sum2(tup1, tup2):\n    '''\n    Return the sum of two tuples.\n    '''\n    return sum(tup1)+sum(tup2)\n    \ndef get_sum_of_tuples(tup1,tup2):\n    '''\n    Return the sum of two tuples.\n    '''\n    return sum_of_tuples(tup1,tup2)\n    \ndef count_elements(tup1,tup2):\n    '''\n    Return the number of elements in the two given tuples.\n    '''\n    return len(tup1) + len(tup2)\n    \ndef count_of_elements(tup1,tup2):\n    '''\n    Return the number of elements in the two given tuples.\n    '''\n    return len(tup1) - len(tup2)\n    \ndef count_of_elements2(tup1,tup2):\n    '''\n    Return the number of elements in the two given tuples.\n    '''\n    return len(tup1) + len(tup2)\n    \ndef count_of_elements3(tup1,tup2):\n    '''\n    Return the number of elements in the two given tuples.\n    '''\n    return len(tup1) + len(tup2)\n    \ndef count_of_elements4(tup1,tup2):\n    '''\n    Return the number of elements in the two given tuples.\n    '''\n    return len(tup1) - len(tup2)\n    \ndef sort_tuples(tup1,tup2):\n    '''\n    Return a new tuple with the elements of the given two tuples sorted in non-decreasing order.\n    '''\n    return sorted(tup1+tup2)\n    \ndef split_tuples(tup1,tup2):\n    '''\n    Return a new tuple that contains the first half and the second half of a given two tuples.\n    '''\n    return tup1[0:-1],tup2[1:]\n    \ndef sort_tuples2(tup1,tup2):\n    '''\n    Return a new tuple with the elements of the given two tuples sorted in non-decreasing order.\n    '''\n    return sorted(tup1), sorted(tup2)\n    \ndef sorted_tuples(tup1,tup2):\n    '''\n    Return a new tuple with the elements of the given two tuples sorted in non-decreasing order.\n    '''\n    return sorted(tup1), sorted(tup2)\n    \ndef union_tuples(tup1,tup2):\n    '''\n    Return a new tuple with the elements of the given two tuples unioned in non-decreasing order.\n    '''\n    return tuple(sorted(tup1+tup2))\n    \ndef intersection_tuples(tup1,tup2):\n    '''\n    Return a new tuple with the elements of the given two tuples intersected in non-decreasing order.\n    '''\n    return tuple(sorted(tup1))\n    \ndef difference_tuples(tup1,tup2):\n    '''\n    Return a new tuple with the elements of the given two tuples differenceed in non-decreasing order.\n    '''\n    return tuple(sorted(tup1))\n    \ndef maximum_tuples(tup1,tup2):\n    '''\n    Return a new tuple with the elements of the given two tuples that are the maximum of the elements of two given tuples.\n    '''\n    return tuple(sorted(tup1, key=max, reverse=True))\n    \ndef minimum_tuples(tup1,tup2):\n    '''\n    Return a new tuple with the elements of the given two tuples that are the minimum of the elements of two given tuples.\n    '''\n    return tuple(sorted(tup1, key=min, reverse=True))\n    \ndef product_tuples(tup1,tup2):\n    '''\n    Return the product of the elements of two tuples.\n    '''\n    return tup(sorted(tup1), sorted(tup2))\n    \ndef sum_of_tuples(tup1,tup2):\n    '''\n    Return the sum of the elements of two tuples.\n    '''\n    return sum(tup1) + sum(tup"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    start_idx = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            start_idx = i\n    return max_len, start_idx\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    '''\n    This function will take an unsorted list and find the longest sublist and return the length of the longest sublist.\n    '''\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n                sub_list = lst[i:j+1]\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == None or len(lst) == 0:\n        return None\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return len(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = len(lst)\n    m = 0\n    if l == 0:\n        return m\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Traverse through the list and make a dictionary of the lengths\n    # and return it in a dictionary with a key being the length\n    # and a value being the longest sublist\n    longest = {}\n    for i in range(len(lst)):\n        # We can calculate the length of a list in a dictionary\n        # because of the subtrees, so we can calculate it with a loop\n        # we can use two pointers\n        # One for traversing through the list\n        # Second for traversing through the list\n        # and we can calculate the length of each item\n        # and we can then loop through the sublist and\n        # calculate the length\n        currentLength = 0\n        for j in range(len(lst[i])):\n            if j!= lst[i][j]:\n                currentLength += 1\n            else:\n                currentLength = 0\n            if currentLength in longest:\n                longest[currentLength].append(lst[i][j])\n            else:\n                longest[currentLength] = [lst[i][j]]\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst) - 1):\n        if len(lst[i]) > len(lst[i+1]):\n            max_len = i+2\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    tokens = re.findall(r'[\\\"\\']{2,}', text)\n    for i in tokens:\n        text = text.replace(i, '')\n    return text.strip()\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return [val.strip() for val in re.split(r'\\([^)]+\\)', text) if val]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    list_of_strings = []\n    for i in text:\n        if i == '\"':\n            list_of_strings.append('\"')\n        elif i == \"'\":\n            list_of_strings.append('\"')\n        elif i == ',' or i == '(' or i == '{' or i == '[' or i == '{':\n            list_of_strings.append(i)\n        elif i == ')' or i == '}':\n            if list_of_strings.count(i)!= 1:\n                list_of_strings.append(i)\n        elif i == ',' or i == '(' or i == '{':\n            list_of_strings.append(i)\n            list_of_strings.append(i)\n            list_of_strings.append(i)\n            list_of_strings.append(i)\n    return list_of_strings\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\\(([^\\(]+)\\)', text)\n    return result[0]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    t = re.findall('[^\\s\\\"]+', text)\n    return t\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern_pairs = [\n        (r'[\\\"\\']+', r'\\1'),\n        (r'[\u201c\u201d]+', r'\\1'),\n        (r'[\u201c\u201d]+', r'\\1'),\n    ]\n    return re.sub('(?<!\\\\)[\\\"\\']+|(?<![^\\\\\\\"])[\u201c\u201d]+', '', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.strip()\n    # check if the string contains quotation marks\n    if text[0]!= '\"' and text[-1]!= '\"':\n        return False\n    # check if the string ends with closing quotation marks\n    elif text[0] == '\"' and text[-1]!= '\"':\n        return False\n    # if not the string ends with quotation marks, the check if the last char in the string is not '\"', that is then it is considered as not quotation mark\n    elif text[-1] == '\"' or text[-1] == \" \":\n        return False\n    # remove white space from the end of the string\n    text = text[:len(text)-1]\n    # remove the quotes\n    text = text[1:len(text)-1]\n    # extract the values between quotation marks\n    return text.split(\" \")\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', text)\n    if values:\n        return values\n    else:\n        return []\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]+)', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.split('?')\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr = list(set(arr))\n    arr.sort()\n    arr.append(0)\n    pairs = 0\n    for i in range(len(arr)-1):\n        j = i + 1\n        while j < len(arr):\n            if arr[j] == arr[i] and arr[j]!= 0:\n                pairs += 1\n            j+= 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    arr.sort()\n    for i in range(n-1):\n        j=i+1\n        while j<n:\n            if arr[i]==arr[j]:\n                count+=1\n            j+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    pairCount = 0\n    \n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if (arr[i] > arr[j]):\n                pairCount = pairCount + 1\n    return pairCoun"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs_list = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            pairs_list.append((arr[i],arr[j]))\n    for pair in pairs_list:\n        if pair not in arr:\n            arr.remove(pair)\n    return len(arr)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return count_Pairs_rec(arr,n,[])\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if (arr[i]==arr[j]):\n                c+=1\n    return c\narr=[3,4,6,2,5]\nprint(\"Number of pairs in the array\", count_Pairs(arr,len(arr)))"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = []\n    pairs_count = []\n    for i in range(n):\n        for j in range(i,n):\n            if arr[i]!=arr[j]:\n                pairs.append(arr[i]+arr[j])\n                pairs_count.append(len(pairs))\n    print(pairs)\n    print(pairs_count)\n    return(pairs,pairs_count)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0, n):\n        for j in range(i+1,n):\n            if(arr[i]!= arr[j]):\n                if(arr[i] < arr[j]):\n                    count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # create an empty array to store the sum of all possible pairs \n    sum = []\n    for i in range(n):\n        for j in range(i,n):\n            if(arr[i]==arr[j] and i!=j):\n                sum.append(i)\n                sum.append(j)\n    return sum\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pair = {}\n    count = 0\n    for i in range(n-1):\n        if arr[i] in arr[i+1:]:\n            count+=1\n    pair[arr[n-1]] = count\n    for i in range(n-2, -1, -1):\n        if arr[i] in arr[i+1:]:\n            count+=1\n    pair[arr[0]] = count\n    return pair\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    splited = word.split()\n    return splited\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \ndef convert(number): \n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    return int(number)\n    \n    \ndef add(a, b): \n    '''\n    Write a python function to add two numbers.\n    '''\n    return a + b\n    \n    \ndef subtract(a, b): \n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return a - b\n    \n    \ndef multiply(a, b): \n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a * b\n    \n    \ndef divide(a, b): \n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a / b\n    \n    \ndef modulo(a, b): \n    '''\n    Write a python function to find the remainder after dividing two numbers.\n    '''\n    return a % b\n    \n    \ndef exponentiation(a, b): \n    '''\n    Write a python function to perform an exponentiation operation.\n    '''\n    return a ** b\n    \n    \ndef concat(a, b): \n    '''\n    Write a python function to concatenate two strings.\n    '''\n    return a + b\n    \n    \ndef capitalize(word): \n    '''\n    Write a python function to capitalize a single word.\n    '''\n    return word.capitalize()\n    \n    \ndef lower(word): \n    '''\n    Write a python function to change all letter to lowercase.\n    '''\n    return word.lower()\n    \n    \ndef strip(word): \n    '''\n    Write a python function to remove spaces from beginning and end of a string.\n    '''\n    return word.strip()\n    \n    \ndef is_palindrome(word): \n    '''\n    Write a python function to check if a given word is palindrome.\n    '''\n    return word == word[::-1]\n    \n    \ndef make_bold(word): \n    '''\n    Write a python function to make all letters bold.\n    '''\n    return word.bold()\n    \n    \ndef make_italic(word): \n    '''\n    Write a python function to make all letters italic.\n    '''\n    return word.italic()\n    \n    \ndef is_symbol(word): \n    '''\n    Write a python function to check if a given word is a symbol.\n    '''\n    return word.isupper()\n    \n    \ndef is_word(word): \n    '''\n    Write a python function to check if a given word is a word.\n    '''\n    return word.isalpha()\n    \n    \ndef is_word_digits(word): \n    '''\n    Write a python function to check if a given word is a word in digits.\n    '''\n    return word.isdigit()\n    \n    \ndef word_case(word): \n    '''\n    Write a python function to check if a given word is a word in words.\n    '''\n    return word.lower() in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n    \n    \ndef word_capitalize(word): \n    '''\n    Write a python function to change all letters to uppercase.\n    '''\n    return word.capitalize()\n    \n    \ndef word_capitalize_letters(word): \n    '''\n    Write a python function to change all letters to uppercase.\n    '''\n    return [char.upper() for char in word]\n    \n    \ndef word_lower(word): \n    '''\n    Write a python function to change all letters to lowercase.\n    '''\n    return word.lower()\n    \n    \ndef word_upper(word): \n    '''\n    Write a python function to change all letters to uppercase.\n    '''\n    return word.upper()\n    \n    \ndef word_swap(word): \n    '''\n    Write a python function to swap two words.\n    '''\n    return word[1] + word[0]\n    \n    \ndef word_swap_letters(word): \n    '''\n    Write a python function to swap two words.\n    '''\n    return [word[1], word[0]] + word[2:]\n    \n    \ndef word_normalize(word): \n    '''\n    Write a python function to normalize a word.\n    '''\n    return word.capitalize()\n    \n    \ndef word_replace(word, old, new): \n    '''\n    Write a python function to replace a word with a new word.\n    '''\n    return word.replace(old, new)\n    \n    \ndef word_count(word): \n    '''\n    Write a python function to count the number of times the word appears.\n    '''\n    return word.count(word)\n    \n    \ndef word_count_with_spaces(word): \n    '''\n    Write a python function to count the number of times the word appears.\n    '''\n    return word.count(word.replace(' ', ''))\n    \n    \ndef word_is_numeric(word): \n    '''\n    Write a python function to check if the given word is numeric.\n    '''\n    return word.isnumeric()\n    \n    \ndef word_is_punctuation(word): \n    '''\n    Write a python function to check if the given word is punctuation.\n    '''\n    return word.isalnum()\n    \n    \ndef word_is_symbol(word): \n    '''\n    Write a python function to check if the given word is a symbol.\n    '''\n    return word.isupper()\n    \n    \ndef word_is_space(word): \n    '''\n    Write a python function to check if the given word is a space.\n    '''\n    return word.isspace()\n    \n    \ndef is_capitalized(word): \n    '''\n    Write a python function to check if the given word is capitalized.\n    '''\n    return word.isupper()\n    \n    \ndef is_capitalized(word): \n    '''\n    Write a python function to check if the given word is capitalized.\n    '''\n    return word.islower()\n    \n    \ndef word_is_word(word): \n    '''\n    Write a python function to check if the given word is a word.\n    '''\n    return word.isupper()\n    \n    \ndef word_is_word_without_number(word): \n    '''\n    Write a python function to check if the given word is a word without a number.\n    '''\n    return word.isupper()\n    \n    \ndef word_is_word_with_number(word): \n    '''\n    Write a python function to check if the given word is a word without a number.\n    '''\n    return word.isupper()\n    \n    \ndef word_is_number(word): \n    '''\n    Write a python function to check if the given word is a number.\n    '''\n    return word.isdigit()\n    \n    \ndef word_is_word_with_symbol(word): \n    '''\n    Write a python function to check if the given word is a word without a symbol.\n    '''\n    return word.isupper()\n    \n    \ndef word_is_digit(word): \n    '''\n    Write a python function to check if the given word is a digit.\n    '''\n    return word.isdigit()\n    \n    \ndef word_is_word_with_lowercase(word): \n    '''\n    Write a python function to check if the given word is a word with lowercase letters.\n    '''\n    return word.islower()\n    \n    \ndef word_is_word_with_uppercase(word): \n    '''\n    Write a python function to check if the given word is a word with uppercase letters.\n    ''"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.strip().split(' ') \n    return word \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    split = word.split(' ')\n    return split\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    chars = []\n    for i in range(len(word)):\n        chars.append(word[i:i+3])\n    return chars\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s = '' \n    if word == '': \n        return s \n    for char in word: \n        s = s + char \n    return s\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(\" \")\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n:\n        result += n % 10\n        n = n // 10\n    return result\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum=0\n    while(n!=0):\n        sum=sum+(n%10)\n        n=n//10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while(n):\n        sum += n % 10\n        n = int(n / 10)\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n!= 0:\n        total += n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s = s*10 + n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum=0\n    while(n>0):\n        digit=n%10\n        sum=sum+digit\n        n=n//10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    pass"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n >= 10:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list2 = []\n    for x in range(0, len(list1)):\n        list2.append(list1[x])\n    if len(list2) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Create a new variable to keep track of sorted or not\n    is_sorted = False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0,len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    l_len = len(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == []:\n        return False\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return list()\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [dict() for _ in range(length)"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    d = []\n    for i in range(length):\n        d.append({})\n    return d\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Approach 1: Using Counter\n    cnt = Counter(list1)\n    sorted_list = []\n    for key in cnt:\n        sorted_list.append(cnt[key])\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            list1[i][j] = list1[i][j].lower()\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        sub_list = []\n        for j in range(0, len(list1[i])):\n            sub_list.append(list1[i][j])\n        list2.append(sub_list)\n    return(list2)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) <= 1:\n        return list1\n    \n    # Swap first and last sub-list\n    temp = list1[0]\n    list1[0] = list1[-1]\n    list1[-1] = temp\n    \n    # Sort sub-lists\n    sort_sublists(list1[1:])\n    sort_sublists(list1[:-1])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not list1:\n        print(\"There are no sublists in your list\")\n    else:\n        size = len(list1)\n        if size < 2:\n            return list1\n        elif size == 2:\n            if list1[0] == list1[1]:\n                list1 = list1[::-1]\n            return list1\n        else:\n            if list1[0][0] == list1[1][0]:\n                list1 = list1[::-1]\n            else:\n                list1 = [list1[i][::-1] for i in range(len(list1))]\n            return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort sublists\n    for i in range(len(list1)):\n        # sort the sublists\n        list1[i] = sorted(list1[i])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    arr = []\n    for list1 in list1:\n        arr.append(list(map(str, list1)))\n    \n    arr = sorted(arr, key=lambda x:x.count(' '))\n    return arr\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for index,item in enumerate(list1):\n        if not isinstance(item,list):\n            item = [item]\n        else:\n            item = item\n        sublists.append(item)\n    \n    #print(sublists)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = []\n    for i in range(len(list1)):\n        sub = []\n        for j in range(len(list1[i])):\n            sub.append(list1[i][j])\n        l.append(sub)\n    return l\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_to_sort = []\n    nums_to_sort.sort()\n    nums_to_sort.append(nums[-1])\n    nums_to_sort.append(nums[-2])\n    nums_to_sort.append(nums[-3])\n    nums_to_sort.append(nums[-4])\n    nums_to_sort.append(nums[-5])\n    nums_to_sort.append(nums[-6])\n    nums_to_sort.append(nums[-7])\n    nums_to_sort.append(nums[-8])\n    nums_to_sort.append(nums[-9])\n    nums_to_sort.append(nums[-10])\n    nums_to_sort.append(nums[-11])\n    nums_to_sort.append(nums[-12])\n    return nums_to_sort\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # list_nums = []\n    # for i in range(len(nums)):\n    #     if nums[i] not in list_nums:\n    #         list_nums.append(nums[i])\n    # return list_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicates\n    # First check all lists of ints\n    # Repeat all unique numbers in all lists in a list of ints\n    # Remove duplicates from the lists\n    # Return the list of unique numbers\n    # TODO: add test cases\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Hash Map\n    # d is the dictionary\n    d = {}\n    # iterate over the list\n    for n in nums:\n        # If key is not present, add it\n        if n not in d.keys():\n            # If key is present\n            d[n] = 1\n        else:\n            # If key is not present, check if value is not same\n            if n!= d[n]:\n                # If so, remove it\n                d[n] = 1\n    # Return the number of unique elements\n    return len(d.values())\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Implement\n    # Note: We will not be writing the function \"remove_duplicate_numbers\" because we don't want to remove any numbers that are already in the output\n    # We will also remove the duplicates, if they exist\n    return\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #Pass a list of numbers to the function\n    \n    #Use a set to store the unique numbers\n    \n    return set(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_hash = {}\n    for num in nums:\n        if num not in nums_hash:\n            nums_hash[num] = 1\n        else:\n            nums_hash[num] += 1\n    for key, val in nums_hash.items():\n        if val == 1:\n            nums.remove(key)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = set(nums)\n    return list(result)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniq_nums = []\n    for num in nums:\n        if num not in uniq_nums:\n            uniq_nums.append(num)\n    return uniq_nums\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    counter = 0\n    for number in list_data:\n        if number in list_data:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # pass\n    unique_data = []\n    for each_list in list_data:\n        if each_list not in unique_data:\n            unique_data.append(each_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # TODO: Write your solution here\n    if list_data:\n        return list(map(lambda x: x*x, list_data))\n    else:\n        return None\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    uniq_list=list()\n    for i in list_data:\n        if i not in uniq_list:\n            uniq_list.append(i)\n    print(uniq_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print(\"\\n[1] Addition\")\n    print(\"[2] Multiplication\")\n    print(\"[3] Division\")\n    print(\"[4] Sum of all the numbers\")\n    print(\"[5] Subtraction\")\n    print(\"[6] Absolute value of a number\")\n    print(\"[7] Square root of a number\")\n    print(\"[8] Square root of a number\")\n    print(\"[9] Square root of a number\")\n    print(\"[10] Square root of a number\")\n    print(\"[99] Back\")\n    print(\"[99] Back\\n\")\n    index = input(\"Enter a option: \")\n    if index == \"1\":\n        try:\n            result = list_data[0] + list_data[1]\n        except IndexError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"2\":\n        try:\n            result = list_data[0] * list_data[1]\n        except ValueError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"3\":\n        try:\n            result = list_data[0] / list_data[1]\n        except ZeroDivisionError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"4\":\n        try:\n            result = list_data[0] - list_data[1]\n        except TypeError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"5\":\n        try:\n            result = list_data[0] ** list_data[1]\n        except TypeError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"6\":\n        try:\n            result = list_data[0] // list_data[1]\n        except ZeroDivisionError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"7\":\n        try:\n            result = list_data[0] ** list_data[1]\n        except TypeError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"8\":\n        try:\n            result = list_data[0] ** list_data[1]\n        except TypeError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"9\":\n        try:\n            result = list_data[0] ** list_data[1]\n        except TypeError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"10\":\n        try:\n            result = list_data[0] ** list_data[1]\n        except TypeError:\n            print(\"Invalid input\")\n        else:\n            print(f\"\\nResult: {result}\")\n    elif index == \"99\":\n        print(\"Goodbye!\")\n    elif index == \"99\":\n        print(\"Goodbye!\")\n    else:\n        print(\"Invalid input\")\n    \n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return sum(set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=0\n    for i in list_data:\n        product+=i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for data in list_data:\n        if data not in unique_list:\n            unique_list.append(data)\n    return (sum(unique_list))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if type(list_data)!= list:\n        raise TypeError('Parameter must be of type list')\n    else:\n        count = 1\n        for element in list_data:\n            if element in list_data:\n                list_data[list_data.index(element)] = count\n                count += 1\n        return list_data\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    print(list_data)\n    unique_data=[]\n    for i in range(0, len(list_data)):\n        if list_data[i] not in unique_data:\n            unique_data.append(list_data[i])\n    print(unique_data)\n    print(\"Count of each number:\", len(unique_data))\n    print(unique_data)\n    return(list(set(unique_data)))\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*math.pi*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*np.pi*h*r*r)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the area of the cylinder\n    area = 4 * r * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = (r**2) * (h**3)\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3*(np.pi*r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r**2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #--\n    from math import pi,cos,sin\n    \n    #-\n    r=float(r)\n    h=float(h)\n    \n    #-\n    A=pi*r**2\n    B=2*pi*r*h\n    C=sin(h)*r*h\n    \n    #-\n    S=A*B\n    S=S+C\n    \n    #-\n    S=S*(S-A*C)\n    return S\n    "
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = r*3.14*h\n    print(f\"Surface area of the cylinder with radius {r} and height {h} is {area}\")\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3)*np.pi*(r**3)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return sorted(A)== sorted(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    from itertools import permutations \n    # Check if length of B is equal to the length of A \n    # if B is greater than length of A then \n    # B cannot be a sublist of A \n    # so it is not a sublist of another \n    # Solution : \n    # this is a code to check if a list is a sublist of another \n    # if length of B is greater than length of A then \n    # B cannot be a sublist of A \n    # so it is not a sublist of another \n    # and both are sublist of another \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)==0:\n        return True\n    else:\n        if (A[0]==B[0]):\n            for i in range(1,len(A)):\n                if A[i]!=B[i]:\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A==B or B==A or A[0:B]==A[0:B][::-1]\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # your code here\n    l1=[1,2,3,4,5,6,7]\n    l2=[1,2,3,4,5,6]\n    if l1==l2:\n        print(\"all elements are same\")\n    elif A in l1 or B in l2:\n        print(\"element is present\")\n    else:\n        print(\"element not present\")\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # write your code here\n    if len(A)!= len(B):\n        return False\n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    c = 0\n    for i in A:\n        if i in B:\n            c += 1\n    if c == len(A):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == len(B):\n        return True\n    elif len(A) < len(B):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = set(A)\n    B = set(B)\n    if A.intersection(B): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(A)==type([]):\n        for i in range(0,len(A)):\n            if A[i] in B:\n                return True\n    else:\n        if A in B:\n            return True\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        temp = last_Digit_Factorial(n//2)\n        if n % 2!= 0:\n            temp *= 2\n        return temp\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    else: \n        return (n*last_Digit_Factorial(n-1)) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # your code here\n    return factorial_array[n]\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 1:\n        return 1\n    return n % 10 * last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        n = abs(n)\n        fact = 1\n        while n >= 1:\n            if n % 10!= 0:\n                fact *= 10\n                fact = fact * n\n            n = n / 10\n        return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 0):\n        return None\n    elif(n == 0):\n        return 1\n    elif(n == 1):\n        return 1\n    elif(n == 2):\n        return 1\n    else:\n        i = 1\n        while(i <= n):\n            i = i * (i + 1)\n        return i - 1\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1,i+1):\n            factorial = factorial * j\n        print(factorial)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n    \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial = 1\n    for i in range(1, n + 1):\n        Factorial = Factorial * i\n    return Factorial \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial_Digit_Number = 1\n    if n <= 1:\n        print('Factorial of'+ str(n) +'is ', end = '')\n        print(Factorial_Digit_Number)\n    else:\n        for x in range(n):\n            if x == 0:\n                print('1', end = '')\n            elif x == 1:\n                print('1', end = '')\n            else:\n                print('1', end ='')\n            Factorial_Digit_Number *= x\n        print('is', Factorial_Digit_Number)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    if len(list1)!= len(list3):\n        return False\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # if lists are the same length\n    if len(list1) == len(list2) == len(list3):\n        print('interleave lists')\n        print(list1)\n        print(list2)\n        print(list3)\n        # if the lists are the same length\n        if len(list1) == len(list2) == len(list3):\n            print('empty lists')\n        else:\n            # interleave lists\n            i = 0\n            while i < len(list1):\n                temp = list1[i]\n                list1[i] = list2[i]\n                list2[i] = temp\n                i += 1\n            print(list1)\n            print(list2)\n    else:\n        print('wrong lists')\n        return\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list3=[]\n    if len(list1)<len(list2):\n        if len(list1)<len(list3):\n            list3=list1+list2\n        else:\n            list3=list1+list2\n    else:\n        list3=list2+list1\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for element in list1:\n        new_list.append(element)\n    for element in list2:\n        new_list.append(element)\n    for element in list3:\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    \n    list5 = []\n    \n    for i in range(0, len(list1)):\n        list5.append(list1[i]+list2[i]+list3[i])\n        \n    for i in range(0, len(list4)):\n        list4.append(list5[i])\n        \n    return list4\n    \nlist1 = [1,2,3,4,5,6,7,8,9]\nlist2 = [8,9,5,6,4,7,3,2,1]\nlist3 = [2,3,5,4,6,8,7,9,1]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    if (len(list1) == len(list2) == len(list3)):\n        for i in range(len(list1)):\n            result.append(list1[i])\n        for j in range(len(list2)):\n            result.append(list2[j])\n        for k in range(len(list3)):\n            result.append(list3[k])\n        return result\n    else:\n        print(\"ERROR: inputs must be of same length\")\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1.append(list3)\n    list2.append(list3)\n    list3.append(list1)\n    list3.append(list2)\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            list3[i].append(list1[j])\n    for k in range(len(list3)):\n        list3[k].append(list2[k])\n    list3.append([])\n    list3.append([])\n    list3.append([])\n    list3.append([])\n    list3.append([])\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return list1\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list3[i]!= 0:\n            list1[i] = list3[i]\n        elif list1[i]!= list2[i] and list3[i]!= 0:\n            list1[i] = list3[i]\n        elif list1[i] == list2[i] and list3[i] == 0:\n            list1[i] = list3[i]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # get unique values in both tuples\n    dict1 = {}\n    for key in test_tup1:\n        if test_tup1[key] not in dict1:\n            dict1[test_tup1[key]] = 1\n        else:\n            dict1[test_tup1[key]] += 1\n    \n    dict2 = {}\n    for key in test_tup2:\n        if test_tup2[key] not in dict2:\n            dict2[test_tup2[key]] = 1\n        else:\n            dict2[test_tup2[key]] += 1\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for element in test_tup1:\n        if element not in test_list2:\n            test_list1.append(element)\n    for element in test_tup2:\n        if element not in test_list1:\n            test_list2.append(element)\n    test_list3 = test_list1 + test_list2\n    return test_list3\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        raise TypeError(\"The first argument must be a tuple\")\n    elif type(test_tup2)!= tuple:\n        raise TypeError(\"The second argument must be a tuple\")\n    elif type(test_tup1[0])!= int:\n        raise TypeError(\"The first argument must contain only integers\")\n    elif type(test_tup2[0])!= int:\n        raise TypeError(\"The second argument must contain only integers\")\n    elif len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same size\")\n    elif test_tup1[0] >= test_tup2[0]:\n        raise TypeError(\"The first argument must contain only elements in the tuple\")\n    elif test_tup1[1] >= test_tup2[1]:\n        raise TypeError(\"The second argument must contain only elements in the tuple\")\n    elif test_tup1[1] == test_tup2[1]:\n        raise TypeError(\"The second argument cannot be the same as the first argument\")\n    elif test_tup1[0] < test_tup2[0]:\n        raise TypeError(\"The first argument must contain only elements that are in the tuple\")\n    else:\n        if test_tup1[0] == test_tup2[0]:\n            return test_tup1[1], test_tup1[0]\n        else:\n            return test_tup1[0], test_tup2[0]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    for i in range(0, len(test_tup1)):\n        list1.append(test_tup1[i][1])\n        list2.append(test_tup2[i][1])\n        if test_tup1[i][0]!= test_tup2[i][0]:\n            list3.append(test_tup1[i][0])\n            list3.append(test_tup2[i][0])\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_tup = set()\n    \n    # Add the first element as the first element of the tuple\n    dissim_tup.add(test_tup1[0])\n    \n    # Add all the elements of the first tuple of the second tuple\n    for i in range(1, len(test_tup1)):\n        dissim_tup.add(test_tup1[i])\n        \n    # Add the last element as the last element of the tuple\n    dissim_tup.add(test_tup2[-1])\n    \n    # Add all the elements of the second tuple of the first tuple\n    for i in range(1, len(test_tup2)):\n        dissim_tup.add(test_tup2[i])\n        \n    # Sort the elements from the first tuple and return the elements from the second tuple\n    return dissim_tup\n    "
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = test_tup1[1]\n    b = test_tup2[1]\n    return [a,b]\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    if len(test_tup1)!= len(test_tup2):\n        return\n    \n    for i in range(len(test_tup1)):\n        if i!= test_tup1[i] and i!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l1 = []\n    l2 = []\n    for i in test_tup1:\n        if i not in l1:\n            l1.append(i)\n    for i in test_tup2:\n        if i not in l2:\n            l2.append(i)\n    l = l1 + l2\n    #print(l)\n    return len(l)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    even_list = list(even_tuple)\n    for element in even_list: \n        if even_fnc(element) == True:\n            even_tuple = even_tuple[1:]\n            even_list.remove(element)\n    return tuple(even_list)\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    even_ele_count = 0\n    for ele in test_tuple:\n        if ele % 2 == 0:\n            even_ele_count += 1\n            even_list.append(ele)\n        else:\n            continue\n    even_list = tuple(even_list)\n    if even_fnc(even_list) == even_list:\n        even_list = tuple(even_list)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = tuple(tuple(i for i in test_tuple if i % 2 == 0))\n    return even_fnc(even_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = [] \n    for x in test_tuple: \n        if x % 2!= 0: \n            even_list.append(x) \n    even_list = list(set(even_list)) \n    even_list.sort() \n    return even_fnc(even_list) \n    \n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_list = [] \n    for x in test_tuple: \n        if x % 2 == 0: \n            odd_list.append(x) \n    odd_list = list(set(odd_list)) \n    odd_list.sort() \n    return odd_fnc(odd_list) \n    \ndef mixed_ele(test_tuple, mixed_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    mixed_list = [] \n    for x in test_tuple: \n        if x % 2!= 0 and x % 2!= 0: \n            mixed_list.append(x) \n    mixed_list = list(set(mixed_list)) \n    mixed_list.sort() \n    return mixed_fnc(mixed_list) \n    \n    \ndef lowest(test_tuple): \n    '''\n    Write a function to return the lowest number in the nested mixed tuple.\n    '''\n    lowest_ele = min(test_tuple) \n    return lowest_ele \n    \ndef highest(test_tuple): \n    '''\n    Write a function to return the highest number in the nested mixed tuple.\n    '''\n    highest_ele = max(test_tuple) \n    return highest_ele \n    \ndef mixed_numbers(test_tuple): \n    '''\n    Write a function to return the mixed number in the nested mixed tuple.\n    '''\n    mixed_list = [] \n    for x in test_tuple: \n        if x % 2!= 0 and x % 2!= 0: \n            mixed_list.append(x) \n    mixed_list = list(set(mixed_list)) \n    mixed_list.sort() \n    return mixed_fnc(mixed_list) \n    \ndef sum_numbers(test_tuple): \n    '''\n    Write a function to return the sum in the nested mixed tuple.\n    '''\n    sum = 0 \n    for x in test_tuple: \n        sum += x \n    return sum \n    \ndef average(test_tuple): \n    '''\n    Write a function to return the average in the nested mixed tuple.\n    '''\n    sum = 0 \n    for x in test_tuple: \n        sum += x \n    return sum / len(test_tuple) \n    \ndef mixed_sum_numbers(test_tuple): \n    '''\n    Write a function to return the mixed sum in the nested mixed tuple.\n    '''\n    mixed_sum = 0 \n    for x in test_tuple: \n        if x % 2!= 0 and x % 2!= 0: \n            mixed_sum += x \n    return mixed_sum \n    \ndef mean(test_tuple): \n    '''\n    Write a function to return the mean in the nested mixed tuple.\n    '''\n    mean = 0 \n    sum = 0 \n    for x in test_tuple: \n        sum += x \n    sum = sum / len(test_tuple) \n    mean = sum / len(test_tuple) \n    return mean \n    \ndef median(test_tuple): \n    '''\n    Write a function to return the median in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2 == 0: \n        middle = (len(test_tuple) / 2) \n        middle = middle + 1 \n        for x in range(middle): \n            if test_tuple[x] > test_tuple[x + 1]: \n                test_tuple[x], test_tuple[x + 1] = test_tuple[x + 1], test_tuple[x] \n    return test_tuple[len(test_tuple) / 2] \n    \ndef median_numbers(test_tuple): \n    '''\n    Write a function to return the median in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2 == 0: \n        middle = (len(test_tuple) / 2) \n        middle = middle + 1 \n        for x in range(middle): \n            if test_tuple[x] > test_tuple[x + 1]: \n                test_tuple[x], test_tuple[x + 1] = test_tuple[x + 1], test_tuple[x] \n    return test_tuple[len(test_tuple) / 2] \n    \ndef mode(test_tuple): \n    '''\n    Write a function to return the mode in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2 == 0: \n        middle = (len(test_tuple) / 2) \n        middle = middle + 1 \n        for x in range(middle): \n            if test_tuple[x] == test_tuple[x + 1]: \n                test_tuple[x], test_tuple[x + 1] = test_tuple[x + 1], test_tuple[x] \n    return test_tuple[len(test_tuple) / 2] \n    \ndef mode_numbers(test_tuple): \n    '''\n    Write a function to return the mode in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2 == 0: \n        middle = (len(test_tuple) / 2) \n        middle = middle + 1 \n        for x in range(middle): \n            if test_tuple[x] == test_tuple[x + 1]: \n                test_tuple[x], test_tuple[x + 1] = test_tuple[x + 1], test_tuple[x] \n    return test_tuple[len(test_tuple) / 2] \n    \ndef mode_recursive(test_tuple): \n    '''\n    Write a function to return the mode in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2 == 0: \n        middle = (len(test_tuple) / 2) \n        middle = middle + 1 \n        for x in range(middle): \n            if test_tuple[x] == test_tuple[x + 1]: \n                test_tuple[x], test_tuple[x + 1] = test_tuple[x + 1], test_tuple[x] \n    return test_tuple[len(test_tuple) / 2] \n    \ndef mode_recursive_numbers(test_tuple): \n    '''\n    Write a function to return the mode in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2 == 0: \n        middle = (len(test_tuple) / 2) \n        middle = middle + 1 \n        for x in range(middle): \n            if test_tuple[x] == test_tuple[x + 1]: \n                test_tuple[x], test_tuple[x + 1] = test_tuple[x + 1], test_tuple[x] \n    return test_tuple[len(test_tuple) / 2] \n    \ndef mode_recursive_numbers_elements(test_tuple): \n    '''\n    Write a function to return the mode in the nested mixed tuple.\n    '''\n    if len(test_tuple) % 2 == 0: \n        middle = (len(test_tuple) / 2) \n        middle = middle + 1 \n        for x in range(middle): \n            if test_tuple[x] % 2!= 0: \n                test_tuple[x], test_tuple[x + "
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for tup in test_tuple:\n        if tup % 2 == 0:\n            even_list.append(tup)\n    even_list.sort()\n    if even_fnc(even_list):\n        return False\n    return True\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[:]\n    odd_tuple = even_tuple[::2]\n    even_tuple = even_tuple[::2]\n    if even_fnc(odd_tuple, even_tuple) == None:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    odd_list = []\n    # iterate through all the elements in the tuple\n    for x in test_tuple:\n        # if the element is odd \n        if x % 2 == 1:\n            odd_list.append(x)\n        # if the element is even \n        else:\n            even_list.append(x)\n    # if the even list contains a value greater than the odd list \n    # add that element to the even_list\n    if len(even_list) > len(odd_list):\n        even_list = even_list + odd_list\n    else:\n        odd_list = odd_list + even_list\n    return even_list, odd_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even = []\n    for i in test_tuple:\n        if i % 2 == 0:\n            even.append(i)\n    even_fnc(even, even)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print('\\nPrinting the nested mixed tuple: \\n', test_tuple)\n    print('\\nPrinting the even elements: \\n', even_fnc(test_tuple))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    if (b == 0): \n        return 0\n    else: \n        area = (s/b) * (1 + (b/2)) * (1 + (s/b))\n    return area\ndef area_of_rectangle(a, b):\n    '''\n    Write a python function that calculates the area of a rectangle.\n    '''\n    area = a*b\n    return area\ndef area_of_triangle(a, b, c):\n    '''\n    Write a python function that calculates the area of a triangle.\n    '''\n    area = a*(b+c)\n    return area\ndef area_of_square(a):\n    '''\n    Write a python function that calculates the area of a square.\n    '''\n    area = (a*a)\n    return area\ndef area_of_cube(a):\n    '''\n    Write a python function that calculates the area of a cube.\n    '''\n    area = (a*3)**2\n    return area\ndef volume_of_cylinder(r, h):\n    '''\n    Write a python function that calculates the volume of a cylinder with radius r, height h.\n    '''\n    volume = (4/3)*r*h\n    return volume\ndef volume_of_cube_3d(r, h):\n    '''\n    Write a python function that calculates the volume of a cube with radius r, height h.\n    '''\n    volume = (r**3)*h\n    return volume\ndef volume_of_cylinder_2d(r, h):\n    '''\n    Write a python function that calculates the volume of a cylinder with radius r, height h.\n    '''\n    volume = (2*(r**2))*(h**2)\n    return volume\ndef volume_of_circle(r):\n    '''\n    Write a python function that calculates the volume of a circle with radius r.\n    '''\n    volume = ((4/3)*(3.14))*(r**3)\n    return volume\ndef volume_of_square(a):\n    '''\n    Write a python function that calculates the volume of a square.\n    '''\n    volume = ((a**2))*((2*a))\n    return volume\ndef volume_of_triangle(a, b, c):\n    '''\n    Write a python function that calculates the volume of a triangle.\n    '''\n    volume = ((a**2)*(b**2))\n    return volume\ndef volume_of_rectangle(a, b):\n    '''\n    Write a python function that calculates the volume of a rectangle.\n    '''\n    volume = ((a**2)*(b**2))\n    return volume"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    l=len(b)\n    l2=l//2\n    if s%2==0:\n        l3=l//4\n    else:\n        l3=l//4+1\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    m = 0\n    for i in range(b):\n        for j in range(b-i):\n            m += s[i][j]\n    return m\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)*((b-1)/2)*(s-1)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if (b==0 or s==0):\n        return 0\n    area=0\n    while (b>0):\n        area=area+b*s/2\n        s=s-1\n        b=b-1\n    return(area)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = (s*b)\n    return (2*b + (A*(b**2)))\n    "
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = int(s)\n    if not b > 0:\n        raise Exception('The base edge must be positive!')\n    if not s > 0:\n        raise Exception('The height must be positive!')\n    b = int(b)\n    s = int(s)\n    return s*b*(b+1)/2"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s>0:\n        for i in range(1,s):\n            print(i)\n            b=b+i\n        print(b)\n        return b*b\n    else:\n        print(\"Invalid Input\")\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # difensive formula\n    area = (4 * s * (b ** 2)) / (b ** 2 - 2 * s)\n    return area\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\ndef empty_dict(dict1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if len(dict1) == 0:\n        dict1['key'] = None\n        dict1['val'] = None\n    else:\n        return False\ndef my_set(set1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if len(set1) == 0:\n        set1['key'] = None\n        set1['val'] = None\n    else:\n        return False\ndef emptyset(set1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if len(set1) == 0:\n        set1['key'] = None\n        set1['val'] = None\n    else:\n        return False\ndef my_dict(dict1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(dict1):\n        my_set(dict1)\n    return dict1\ndef empty_set(set1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_set(set1):\n        my_dict(set1)\n    return set1\ndef my_set(set1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(set1):\n        set1['key'] = None\n        set1['val'] = None\n    else:\n        return False\ndef emptyset(set1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_set(set1):\n        set1['key'] = None\n        set1['val'] = None\n    else:\n        return False\ndef my_list(list1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(list1):\n        list1['key'] = None\n        list1['val'] = None\n    else:\n        return False\ndef emptylist(list1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(list1):\n        list1['key'] = None\n        list1['val'] = None\n    else:\n        return False\ndef my_str(str1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(str1):\n        str1['key'] = None\n        str1['val'] = None\n    else:\n        return False\ndef emptyset(str1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(str1):\n        str1['key'] = None\n        str1['val'] = None\n    else:\n        return False\ndef my_int(int1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(int1):\n        int1['key'] = None\n        int1['val'] = None\n    else:\n        return False\ndef emptylist(int1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(int1):\n        int1['key'] = None\n        int1['val'] = None\n    else:\n        return False\ndef emptystr(str1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(str1):\n        str1['key'] = None\n        str1['val'] = None\n    else:\n        return False\ndef my_set(set1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_set(set1):\n        set1['key'] = None\n        set1['val'] = None\n    else:\n        return False\ndef emptyset(set1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_set(set1):\n        set1['key'] = None\n        set1['val'] = None\n    else:\n        return False\ndef my_dict(dict1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(dict1):\n        dict1['key'] = None\n        dict1['val'] = None\n    else:\n        return False\ndef emptydict(dict1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(dict1):\n        dict1['key'] = None\n        dict1['val'] = None\n    else:\n        return False\ndef my_int(int1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(int1):\n        int1['key'] = None\n        int1['val'] = None\n    else:\n        return False\ndef emptylist(int1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(int1):\n        int1['key'] = None\n        int1['val'] = None\n    else:\n        return False\ndef emptystr(str1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(str1):\n        str1['key'] = None\n        str1['val'] = None\n    else:\n        return False\ndef my_int(int1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(int1):\n        int1['key'] = None\n        int1['val'] = None\n    else:\n        return False\ndef my_float(float1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(float1):\n        float1['key'] = None\n        float1['val'] = None\n    else:\n        return False\ndef my_str(str1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(str1):\n        str1['key'] = None\n        str1['val'] = None\n    else:\n        return False\ndef my_list(list1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(list1):\n        list1['key'] = None\n        list1['val'] = None\n    else:\n        return False\ndef emptylist(list1):\n    '''\n    Write a function that takes in a dictionary\n    and adds a new key-value pair to the dictionary.\n    '''\n    if not my_dict(list1):\n        list1['key'] = None\n        list1['val'] = None\n    else:\n        retur"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is {}:\n        return True\n    else:\n        return False\n    \nmy_dict({'a':1,'b':2})\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return type(dict1) == dict\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def num_in_fibo(num):\n        '''\n        Takes the number as an argument.\n        Returns the value of the function for that number.\n        '''\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            return num_in_fibo(num-1) + num_in_fibo(num-2)\n    \n    return num_in_fibo(num)"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def sum_nth(num,n):\n        if n<=0:\n            return 1\n        elif n==1:\n            return num\n        else:\n            return num + sum_nth(num-1,n-1)\n    return sum_nth(num,n)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return (num+1) * catalan_number(num-1)"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = int(math.log2(num))\n    if c > 0:\n        return ((2**c) * math.gamma(c + 1)\n            / math.gamma(c + 2)\n            / math.gamma(c + 3))\n    else:\n        return 0\n    \ndef binomial(n, k):\n    '''\n    Write a function which returns the number of ways of\n    n! equals to k.\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Logic for numbers less than 1.\n    if num <= 0:\n        return 0\n    # Logic for numbers more than 1.\n    if num > 0:\n        return 1\n    \n    # If the num is greater than 2,\n    # then it will not be catalan\n    if num < 3:\n        return num\n    # num == 3\n    return catalan_number(num - 3) + catalan_number(num - 2) + catalan_number(num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Declare two variables\n    # n is the length of nth_catalan_number_problem\n    # n is the number of elements in the problem\n    #\n    # This function is to return nth_catalan_number_problem[i].\n    def catalan_number_problem(n):\n        # Declare an array\n        # catalan_number_problem will be the nth element\n        # in the problem.\n        #\n        # This function is to return nth_catalan_number_problem[i].\n        def catalan_number_problem(n):\n            # If n is equal to 0 then return 0\n            # Else, the number of catsalan number is the\n            # number of fibonacci numbers.\n            #\n            # This function is to return nth_catalan_number_problem[i].\n            if n == 0:\n                return 0\n            elif n == 1:\n                return 1\n            else:\n                return catalan_number_problem(n - 1) + catalan_number_problem(n - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<0:\n        raise ValueError(\"n must be a positive number\")\n    elif num==0:\n        return 1\n    elif num==1:\n        return 1\n    elif num==2:\n        return 2\n    elif num==3:\n        return 4\n    elif num==4:\n        return 8\n    else:\n        return catalan_number(num-1)*catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return 1 + catalan_number(num - 1)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find adverbs in text\n    pattern = re.compile(r\"^.*ly|ly$\")\n    positions = []\n    adverbs = []\n    # find adverbs\n    for match in re.finditer(pattern,text):\n        positions.append(match.start())\n        adverbs.append(match.group())\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly = \"ly\"\n    lypos = text.find(ly)\n    if lypos!= -1:\n        if (lypos-len(ly)) % 2 == 0:\n            adverb = ly + \".ly\"\n            lypos = lypos - len(ly) + 1\n            if lypos == len(text):\n                lypos = lypos - len(ly)\n        else:\n            adverb = ly + \".ly\"\n            lypos = lypos - len(ly) + 1\n            if lypos == len(text):\n                lypos = lypos - len(ly)\n    else:\n        adverb = ly + \".ly\"\n        lypos = lypos - len(ly)\n        if lypos == len(text):\n            lypos = lypos - len(ly)\n    return adverb,lypos\ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with pl and its positions in a given string.\n    '''\n    pl = \"pl\"\n    plpos = text.find(pl)\n    if plpos!= -1:\n        if (plpos-len(pl)) % 2 == 0:\n            verb = pl + \".pl\"\n            plpos = plpos - len(pl) + 1\n            if plpos == len(text):\n                plpos = plpos - len(pl)\n        else:\n            verb = pl + \".pl\"\n            plpos = plpos - len(pl) + 1\n            if plpos == len(text):\n                plpos = plpos - len(pl)\n    else:\n        verb = pl + \".pl\"\n        plpos = plpos - len(pl)\n        if plpos == len(text):\n            plpos = plpos - len(pl)\n    return verb,plpos\ndef find_noun(text):\n    '''\n    Write a function to find the first noun ending with rl and its positions in a given string.\n    '''\n    rl = \"rl\"\n    rlpos = text.find(rl)\n    if rlpos!= -1:\n        if (rlpos-len(rl)) % 2 == 0:\n            noun = rl + \".rl\"\n            rlpos = rlpos - len(rl) + 1\n            if rlpos == len(text):\n                rlpos = rlpos - len(rl)\n        else:\n            noun = rl + \".rl\"\n            rlpos = rlpos - len(rl) + 1\n            if rlpos == len(text):\n                rlpos = rlpos - len(rl)\n    else:\n        noun = rl + \".rl\"\n        rlpos = rlpos - len(rl)\n        if rlpos == len(text):\n            rlpos = rlpos - len(rl)\n    return noun,rlpos\ndef find_number(text):\n    '''\n    Write a function to find the first number ending with sm and its positions in a given string.\n    '''\n    sm = \"sm\"\n    smpos = text.find(sm)\n    if smpos!= -1:\n        if (smpos-len(sm)) % 2 == 0:\n            number = sm + \".sm\"\n            smpos = smpos - len(sm) + 1\n            if smpos == len(text):\n                smpos = smpos - len(sm)\n        else:\n            number = sm + \".sm\"\n            smpos = smpos - len(sm) + 1\n            if smpos == len(text):\n                smpos = smpos - len(sm)\n    else:\n        number = sm + \".sm\"\n        smpos = smpos - len(sm)\n        if smpos == len(text):\n            smpos = smpos - len(sm)\n    return number,smpos\ndef find_phrase(text):\n    '''\n    Write a function to find the first phrase ending with hl and its positions in a given string.\n    '''\n    hl = \"hl\"\n    hlpos = text.find(hl)\n    if hlpos!= -1:\n        if (hlpos-len(hl)) % 2 == 0:\n            phrase = hl + \".hl\"\n            hlpos = hlpos - len(hl) + 1\n            if hlpos == len(text):\n                hlpos = hlpos - len(hl)\n        else:\n            phrase = hl + \".hl\"\n            hlpos = hlpos - len(hl) + 1\n            if hlpos == len(text):\n                hlpos = hlpos - len(hl)\n    else:\n        phrase = hl + \".hl\"\n        hlpos = hlpos - len(hl)\n        if hlpos == len(text):\n            hlpos = hlpos - len(hl)\n    return phrase,hlpos\ndef find_location(text):\n    '''\n    Write a function to find the first location ending with pl and its positions in a given string.\n    '''\n    pl = \"pl\"\n    plpos = text.find(pl)\n    if plpos!= -1:\n        if (plpos-len(pl)) % 2 == 0:\n            location = pl + \".pl\"\n            plpos = plpos - len(pl) + 1\n            if plpos == len(text):\n                plpos = plpos - len(pl)\n        else:\n            location = pl + \".pl\"\n            plpos = plpos - len(pl) + 1\n            if plpos == len(text):\n                plpos = plpos - len(pl)\n    else:\n        location = pl + \".pl\"\n        plpos = plpos - len(pl)\n        if plpos == len(text):\n            plpos = plpos - len(pl)\n    return location,plpos\ndef find_edges(text):\n    '''\n    Write a function to find the first edge ending with lr and its positions in a given string.\n    '''\n    lr = \"lr\"\n    lrpos = text.find(lr)\n    if lrpos!= -1:\n        if (lrpos-len(lr)) % 2 == 0:\n            edges = lr + \".lr\"\n            lrpos = lrpos - len(lr) + 1\n            if lrpos == len(text):\n                lrpos = lrpos - len(lr)\n        else:\n            edges = lr + \".lr\"\n            lrpos = lrpos - len(lr) + 1\n            if lrpos == len(text):\n                lrpos = lrpos - len(lr)\n    else:\n        edges = lr + \".lr\"\n        lrpos = lrpos - len(lr)\n        if lrpos == len(text):\n            lrpos = lrpos - len(lr)\n    return edges,lrpos\ndef find_exits(text):\n    '''\n    Write a function to find the first exit ending with rl and its positions in a given string.\n    '''\n    rl = \"rl\"\n    rlpos = text.find(rl)\n    if rlpos!= -1:\n        if (rlpos-len(rl)) % 2 == 0:\n            exit = rl + \".rl\"\n            rlpos = rlpos - len(rl) + 1\n            if rlpos == len(text):\n                rlpos = rlpos - len(rl)\n        else:\n            exit = rl + \".rl\"\n            rlpos = rlpos - len(rl) + 1\n            if rlpos == len(text):\n                rlpos = rlpos - len(rl)\n    else:\n        exit = rl + \".rl\"\n        rlpos = rlpos - len(rl)\n        if rlpos == len(text):\n            rlpos = rlpos - len(rl)\n    return exit,rlpos\ndef find_adj(text):\n    '''\n    Write a function to find the first adjective ending with pl and its positions in a given string.\n    '''\n    pl = \"pl\"\n    plpos = text.find(pl)\n    if plpos!= -1:\n        if (plpos-len(pl)) % 2 == 0:\n            adj = pl + \".pl\"\n            plpos = plpos - len(pl) + 1\n            if plpos == len(text):\n                plpos = plpos - len(pl)\n        else:\n            adj = pl + \".pl\"\n            plpos = plpos - len(pl) "
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            adverb = m.group()\n            adverb_pos = text.find(adverb)\n            return adverb, adverb_pos\n    return None, None\ndef find_adjective(text):\n    '''\n    Write a function to find the first adjective ending with xl and its positions in a given string.\n    '''\n    patterns = ['xl', 'xlm', 'xlmm', 'xlpm']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            adjective = m.group()\n            adjective_pos = text.find(adjective)\n            return adjective, adjective_pos\n    return None, None\ndef find_preposition(text):\n    '''\n    Write a function to find the first preposition ending with xl and its positions in a given string.\n    '''\n    patterns = ['xl', 'xlm', 'xlmm', 'xlpm']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            preposition = m.group()\n            preposition_pos = text.find(preposition)\n            return preposition, preposition_pos\n    return None, None\ndef find_postposition(text):\n    '''\n    Write a function to find the first postposition ending with xl and its positions in a given string.\n    '''\n    patterns = ['xl', 'xlm', 'xlmm', 'xlpm']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            postposition = m.group()\n            postposition_pos = text.find(postposition)\n            return postposition, postposition_pos\n    return None, None\ndef find_preposition_noun(text):\n    '''\n    Write a function to find the first preposition ending with xl and its nouns.\n    '''\n    patterns = ['xl', 'xlm', 'xlmm', 'xlpm']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            preposition = m.group()\n            preposition_pos = text.find(preposition)\n            return preposition, preposition_pos\n    return None, None\ndef find_noun(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            noun = m.group()\n            noun_pos = text.find(noun)\n            return noun, noun_pos\n    return None, None\ndef find_number(text):\n    '''\n    Write a function to find the first number ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            number = m.group()\n            number_pos = text.find(number)\n            return number, number_pos\n    return None, None\ndef find_numbers(text):\n    '''\n    Write a function to find the first number ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            number = m.group()\n            number_pos = text.find(number)\n            return number, number_pos\n    return None, None\ndef find_singular(text):\n    '''\n    Write a function to find the first singular ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            singular = m.group()\n            singular_pos = text.find(singular)\n            return singular, singular_pos\n    return None, None\ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            verb = m.group()\n            verb_pos = text.find(verb)\n            return verb, verb_pos\n    return None, None\ndef find_word(text):\n    '''\n    Write a function to find the first word ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            word = m.group()\n            word_pos = text.find(word)\n            return word, word_pos\n    return None, None\ndef find_words(text):\n    '''\n    Write a function to find the first word ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            word = m.group()\n            word_pos = text.find(word)\n            return word, word_pos\n    return None, None\ndef find_title(text):\n    '''\n    Write a function to find the first title ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i]))\n        m = regex.search(text)\n        if m:\n            title = m.group()\n            title_pos = text.find(title)\n            return title, title_pos\n    return None, None\ndef find_original(text):\n    '''\n    Write a function to find the first original ending with ly and its positions in a given string.\n    '''\n    patterns = ['ly', 'lyy', 'lyp', 'lypp', 'lypp']\n    for i in range(len(patterns)-1):\n        regex = re.compile('[%s]' % (patterns[i])"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # For every character in the string\n    for c in text:\n        # If the character is ly then we have found the first ly ending and return the position of it\n        if c.lower() == 'ly':\n            start = 0\n            for i in range(len(text)):\n                if c == text[i] and (i+1 < len(text) and text[i+1]!= c):\n                    start = i\n            return start, start+1\n    # If there are no ly ending found then we return -1\n    return -1\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    lst = []\n    for i in range(len(text)):\n        if text[i:i+3] == \"ly\":\n            lst.append(i)\n        else:\n            continue\n    return lst\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    num_ly = []\n    end_ly = []\n    ly_num = []\n    ly_end = []\n    ly_num_list = []\n    ly_end_list = []\n    ly_num_len = []\n    end_ly_len = []\n    ly_num_len_list = []\n    ly_num_end_len = []\n    ly_len_list = []\n    ly_len_end_list = []\n    for char in text:\n        if re.search('ly', char) and re.search('a', char):\n            num_ly.append(char)\n            ly_num.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            end_ly.append(char)\n            ly_end.append(char)\n        elif re.search('ly', char) and re.search('n', char):\n            ly_num_list.append(char)\n        elif re.search('ly', char) and re.search('end', char):\n            ly_num_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('end', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and re.search('ly', char):\n            ly_len_end_list.append(char)\n        elif re.search('ly', char) and not re.search('ly', char):\n            ly_len_end_list.append"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.replace('(', '').replace(')', '').replace('ly', '')\n    #print(text)\n    adverbs = []\n    #print(text[-1])\n    for i in range(len(text) - 1):\n        if text[i] == text[i + 1] and text[i]!= 'ly':\n            adverbs.append(text[i])\n    #print(adverbs)\n    #print(text[-1])\n    adverbs.append(text[-1])\n    #print(adverbs)\n    #adverbs.append(text[-1])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    positions = []\n    lst = []\n    while True:\n        for i, ch in enumerate(text):\n            if ch == 'ly' and i > 0:\n                positions.append(i)\n        if len(positions) > 0:\n            break\n    for i, ch in enumerate(text):\n        if ch == 'ly' and i > 0:\n            lst.append(positions[i-1]+2)\n    return lst\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    for m in re.finditer(r'ly\\w+', text):\n        adverb = m.group(0)\n        if adverb[-1] == 'y':\n            text = text[:m.start()] + text[m.end():]\n            break\n    return text, adverb\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall('ly|lyl|lyr|lym|lyn|lyr|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|lyr|lyl|lym|lyn|ly"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(n):\n        heapq.heappop(items)\n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    \n    \n    #print(\"items=\",items)\n    for i in range(len(items)):\n        if items[i][0]>0:\n            heapq.heappush(heap,-items[i][1])\n            #print(\"heap=\",heap)\n            #print(\"heapq=\",heapq)\n    #print(heap)\n    \n    heapq.heapify(heap)\n    \n    \n    count=0\n    for i in range(len(items)):\n        \n        if heapq.heappop(heap)>=0:\n            count+=1\n            #print(\"\\nheap=\",heap)\n            #print(\"heap=\",heapq)\n        \n        #print(\"heap=\",heap)\n        #print(\"heapq=\",heapq)\n    \n    \n    return count\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items, reverse=True)\n    h = []\n    for i in range(n):\n        heapq.heappush(h,(-items[i],i))\n    \n    return h\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = [(0,item) for item in items] #put this here\n    heapq.heapify(heap) #heapify to make it a list\n    i=1\n    while heap and i*n<len(items):\n        cost, item = heapq.heappop(heap)\n        for j in range(i*n,len(items),i): #extend the size of the heap\n            heapq.heappush(heap,(cost+item[j],item[j]))\n        i+=1\n    return [(cost, item) for cost, item in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(n):\n        if items[0][0]<items[0][1]:\n            return items[0][0]\n    return items[0][1]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    items.sort(key=lambda x:x[1],reverse=True)\n    most = []\n    for item in items:\n        if len(most) < n:\n            heapq.heappush(most,item)\n        elif len(most) == n:\n            heapq.heappushpop(most,item)\n        else:\n            item = heapq.heappop(most)\n            heapq.heappush(most,item)\n    return most\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #stores the index of the n most expensive items in the dataset\n    heap = []\n    #stores the keys of the n most expensive items\n    for i in range(n):\n        heapq.heappush(heap,(items[i][1],i))\n    #stores the index of the n most expensive items in the dataset\n    heapq.heapify(heap)\n    #stores the items of the n most expensive items in the dataset\n    for i in range(n,0,-1):\n        #pop the item from the heap, and remove it from the dataset\n        item = heapq.heappop(heap)\n        items[i] = item\n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #For the n largest items\n    #heapq.nlargest(k, the_list)\n    #heapq.nsmallest(k, the_list)\n    \n    #Create an empty list\n    #the_list = []\n    \n    #Iterate over the items, adding the items to the list and if the current number of items is equal to the n, then\n    #we add it to the list.\n    #else:\n    #    the_list.append(item)\n    #    if len(the_list) == k:\n    #        heapq.heappop(the_list)\n    #    else:\n    #        heapq.heappush(the_list, item)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    for i in range(n):\n        heapq.heappush(h,items[i][2])\n    if(len(h) == 1):\n        return items[0][:2]\n    return heapq.nlargest(n, h)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_weights=[]\n    item_weights.append(len(items[items[:,0] == 0])) #initialize the first row with the number of zero items\n    for i in range(1,len(items)): #add the rest of the rows to the list\n        item_weights.append(len(items[items[:,0] == items[i,0]])) #increase the number of items by 1 for each new row\n        item_weights.append(len(items[items[:,0] == items[i,1]])) #increase the number of items by 1 for each new row\n    item_weights.sort() #sort the list in descending order\n    index=item_weights.index(n) #find the n most expensive items\n    return items[index,:] #return the n most expensive items\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n]\n    \n    \ndef copy_Arr(l, n):\n    '''\n    Write a python function to copy the first n elements in a list to another list.\n    '''\n    return l[0:n]\n    \n    \ndef remove_duplicates(l):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    return list(set(l))\n    \n    \ndef remove_Reverse(l):\n    '''\n    Write a python function to remove any duplicate elements in a list.\n    '''\n    return list(reversed(l))\n    \n    \ndef reverse(l):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    return l[::-1]\n    \n    \ndef split_list(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n]\n    \n    \ndef get_length(l):\n    '''\n    Write a python function to get the length of a list.\n    '''\n    return len(l)\n    \n    \ndef remove_Duplicates(l):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    return list(set(l))\n    \n    \ndef remove_Reverse(l):\n    '''\n    Write a python function to remove any duplicate elements in a list.\n    '''\n    return list(reversed(l))\n    \n    \ndef create_List(l):\n    '''\n    Write a python function to create a new list with only the first element from a list.\n    '''\n    return l[0]\n    \n    \ndef get_Lenght(l):\n    '''\n    Write a python function to get the length of a list.\n    '''\n    return len(l)\n    \n    \ndef my_print(l):\n    '''\n    Write a python function to print all items in a list.\n    '''\n    for elem in l:\n        print(elem)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.append(l[0])\n    for i in range(len(l) - n - 1):\n        l.append(l[i + n])\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Write your code here\n    return l[:n] + l[n:]\n    raise NotImplementedError\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_len = len(l)\n    temp = l[:n]\n    \n    if (l_len!= n):\n        temp += l[n:]\n    \n    return temp\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return(l[0:n])\ndef merge_list(l):\n    '''\n    Write a python function to merge two lists of lists.\n    '''\n    temp = []\n    for i in l:\n        temp.append(i)\n    return temp\ndef get_array_from_file(file_name):\n    '''\n    Write a python function that takes a file name and returns a list of lists.\n    '''\n    try:\n        f = open(file_name)\n        content = f.readlines()\n        f.close()\n        return(content)\n    except:\n        return(\"file does not exist\")"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return(l[:n])\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #TODO: Implement this function!\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in listx:\n        tup += (i,)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplelist = ()\n    for item in listx:\n        tuplelist = tuplelist + (item,)\n    return tuplelist\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # create a tuple from a list\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tupley = ()\n    for i in listx:\n        tupley = tupley + (i,)\n    return tupley\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplelist = list(listx)\n    tuplelist.sort()\n    return tuplelist\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    for i in range(len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        if nums[i] < min_val:\n            min_val = nums[i]\n    return max_val - min_val\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < nums[i+1]:\n            return nums[i]\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0] - nums[0]\n    diff = nums[0] - nums[1]\n    for i in range(len(nums)):\n        if nums[i]!= nums[i+1]:\n            diff = max(diff, nums[i+1] - nums[i])\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # compare first element to it's largest element\n    first_largest = max(nums)\n    # compare second element to it's smallest element\n    first_smallest = min(nums)\n    # return the differences\n    return (first_smallest - first_largest)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return smallest - largest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = len(nums)\n    if l==1:\n        return nums[0]\n    elif l==2:\n        if nums[0]>nums[1]:\n            return nums[1]\n        else:\n            return nums[0]\n    else:\n        if nums[0]>nums[1]:\n            return nums[1]\n        else:\n            return nums[0]\n        \ndef make_list(nums):\n    '''\n    Write a python function to return a list with all the elements of the given list sorted.\n    '''\n    new_list = list()\n    for i in range(len(nums)):\n        new_list.append(nums[i])\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) <= 1:\n        return nums[0] - nums[0]\n    else:\n        # find largest and smallest value in the list\n        largest = max(nums)\n        smallest = min(nums)\n        # find difference between largest and smallest value\n        smallest_diff = largest - smallest\n        # add difference to result\n        result = smallest_diff + (smallest - largest)\n        # return result\n        return result\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    small = max(nums)\n    large = min(nums)\n    sum = 0\n    for num in nums:\n        sum += num\n    diff = large - small\n    return sum - diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    def binary_search(nums, low, high):\n        mid = (low + high) // 2\n        if nums[mid] == 0:\n            return mid\n        elif nums[mid] > nums[high]:\n            return binary_search(nums, mid, high)\n        else:\n            return binary_search(nums, low, mid-1)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Your code here\n    return a**2 + b**2 == (a**2 + b**2)**2\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Corner cases\n    if a > b:\n        return (a + b) // 2\n    elif a < b:\n        return (b + a) // 2\n    else:\n        return a + "
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create an empty list\n    ls = []\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i for i in range(b) if a**2 + (i**2) == b**2]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    a_sq = a**2\n    b_sq = b**2\n    \n    perfect_squares = []\n    \n    for i in range(a_sq, b_sq+1):\n        if a_sq % i == 0 and b_sq % i == 0:\n            perfect_squares.append(i)\n            \n    return perfect_squares\n    \n    "
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # your code goes here\n    return\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square = 0\n    while b > 0:\n        b = b // a\n        square += 1\n    return squar"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return 1\n    if a < b:\n        a, b = b, a\n    for i in range(2, b):\n        if ((b % i) == 0):\n            return False\n    return True\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sum = 0\n    for i in range(a, b+1):\n        if i == int(i**(1/2)):\n            sum += 1\n    return sum\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square_a = a ** 2\n    square_b = b ** 2\n    square_sum = square_a + square_b\n    square_sum_up_to_n = 0\n    count = 0\n    for i in range(1, square_sum + 1):\n        if square_sum_up_to_n == i:\n            count += 1\n        else:\n            square_sum_up_to_n = i\n    if square_sum_up_to_n == square_sum:\n        return square_sum\n    else:\n        return count\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x < 0:\n        x = -x\n    if y < 0:\n        y = -y\n    return (x, y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #TODO: Write a function to convert polar coordinates to rectangular coordinates.\n    #x = x * pi / 180.0\n    #y = y * pi / 180.0\n    #return (x,y)\n    try:\n        x = cmath.polar(x)\n        y = cmath.polar(y)\n        return (x[0],y[0])\n    except TypeError:\n        return False\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    '''\n    You are given a polar coordinates in the form of x-axis and y-axis,\n    and return a rectangle containing the coordinates.\n    '''\n    return [ round(x,3), round(y,3) ]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    t = (y+x)/math.cos(cmath.radians(90))\n    b = math.cos(cmath.radians(90))*math.sin(cmath.radians(t))\n    r = math.sin(cmath.radians(90))*math.cos(cmath.radians(t))\n    x = x*b\n    y = y*r\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # normalize x and y\n    x = x / (2*math.pi)\n    y = y / (2*math.pi)\n    # calculate the polar coordinates\n    r = cmath.rect(x,y)\n    return r\ndef polar_vector(r1,r2):\n    '''\n    Write a function to calculate the vector from polar coordinates to rectangular coordinates.\n    '''\n    # normalize the vector\n    v = ((2*r1)/(r2))*((r1 - r2)**2)\n    return v\ndef convert(coords):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # normalize the vector\n    v = ((2*coords)/(coords+1))*((coords + 1)**2)\n    return v\ndef cos(x):\n    '''\n    Write a function to calculate the cosine of a polar coordinate.\n    '''\n    r = polar_rect(x,x)\n    # return r[0]*cmath.cos(x[0])+r[1]*cmath.cos(x[1])\n    return r[0]*cmath.cos(x[0])\ndef sin(x):\n    '''\n    Write a function to calculate the sine of a polar coordinate.\n    '''\n    r = polar_rect(x,x)\n    # return r[0]*cmath.sin(x[0])+r[1]*cmath.sin(x[1])\n    return r[0]*cmath.sin(x[0])\ndef arctangent(x):\n    '''\n    Write a function to calculate the arctangent of a polar coordinate.\n    '''\n    r = polar_rect(x,x)\n    # return r[0]*cmath.arctan(r[1])\n    return r[0]*cmath.arctan(r[1])\ndef norm(x):\n    '''\n    Write a function to calculate the norm of a polar coordinate.\n    '''\n    r = polar_rect(x,x)\n    # return r[0]*cmath.sqrt(r[1])\n    return r[0]*cmath.sqrt(r[1])\ndef norm2(x):\n    '''\n    Write a function to calculate the norm of a polar coordinate.\n    '''\n    r = polar_rect(x,x)\n    # return r[0]*(r[1]+r[2])\n    return r[0]*(r[1]+r[2])\ndef polar_cubic_root(r1,r2,r3):\n    '''\n    Write a function to calculate the cubic root of a polar coordinate.\n    '''\n    # normalize x and y\n    x = norm(r1)\n    y = norm(r2)\n    # calculate the polar coordinates\n    r = cmath.rect(x,y)\n    # return r[0]*cmath.sqrt(r[1])\n    return r[0]*cmath.sqrt(r[1])\ndef vector_cross(x,y):\n    '''\n    Write a function to calculate the cross product of a polar coordinate and a vector.\n    '''\n    # normalize x and y\n    x = norm(x)\n    y = norm(y)\n    # calculate the vector coordinates\n    v = (r2*x-r1*y-r3)/(r2*x+r1*y+r3)\n    return v\ndef vector_dot(x,y):\n    '''\n    Write a function to calculate the dot product of a polar coordinate and a vector.\n    '''\n    # normalize x and y\n    x = norm(x)\n    y = norm(y)\n    # calculate the vector coordinates\n    v = (r2*x-r1*y-r3)/(r2*x+r1*y+r3)\n    return v\ndef angle(v):\n    '''\n    Write a function to calculate the angle of a polar coordinate.\n    '''\n    # normalize the vector\n    v = norm(v)\n    # return r[0]*cmath.arccos(v[0])\n    return r[0]*cmath.arccos(v[0])\ndef angle_parallel(v):\n    '''\n    Write a function to calculate the angle of a polar coordinate with a vector parallel to it.\n    '''\n    # normalize the vector\n    v = norm(v)\n    # return r[0]*cmath.arccos(v[0])\n    return r[0]*cmath.arccos(v[0])\ndef angle_perpendicular(v):\n    '''\n    Write a function to calculate the angle of a polar coordinate with a vector perpendicular to it.\n    '''\n    # normalize the vector\n    v = norm(v)\n    # return r[0]*cmath.arccos(v[0])\n    return r[0]*cmath.arccos(v[0])\ndef normal(x,y):\n    '''\n    Write a function to calculate the normal of a polar coordinate.\n    '''\n    # normalize the vector\n    x = norm(x)\n    y = norm(y)\n    # calculate the vector coordinates\n    v = vector_cross(r1,vector_cross(r1,y))\n    # calculate the unit vector perpendicular to the normal\n    v_perp = vector_cross(vector_cross(v,r1),vector_cross(r1,v))\n    # return the vector normal\n    return v_perp\ndef normal2(x,y):\n    '''\n    Write a function to calculate the normal of a polar coordinate.\n    '''\n    # normalize the vector\n    x = norm(x)\n    y = norm(y)\n    # calculate the vector coordinates\n    v = vector_cross(r1,vector_cross(r1,y))\n    # calculate the unit vector perpendicular to the normal\n    v_perp = vector_cross(vector_cross(v,r1),vector_cross(r1,v))\n    # return the vector normal\n    return v_perp\ndef normal3(x,y,z):\n    '''\n    Write a function to calculate the normal of a polar coordinate.\n    '''\n    # normalize the vector\n    x = norm(x)\n    y = norm(y)\n    z = norm(z)\n    # calculate the vector coordinates\n    v = vector_cross(r1,vector_cross(r1,z))\n    # calculate the unit vector perpendicular to the normal\n    v_perp = vector_cross(vector_cross(v,r1),vector_cross(r1,v))\n    # return the vector normal\n    return v_perp\ndef unit_vector(v):\n    '''\n    Write a function to calculate the unit vector of a polar coordinate.\n    '''\n    # normalize the vector\n    v = norm(v)\n    # return r[0]*cmath.sqrt(r[1])\n    return r[0]*cmath.sqrt(r[1])\ndef cross_prod(v1,v2):\n    '''\n    Write a function to calculate the cross product of a vector v1 and v2.\n    '''\n    # normalize the vector\n    v1 = norm(v1)\n    v2 = norm(v2)\n    # calculate the cross product\n    return r2*v1[0]*v2[1]+(r1[0]*r2[1]*v1[1]-(r1[1]*r2[0]*v1[0])*v2[0])\ndef cross_angle(v1,v2):\n    '''\n    Write a function to calculate the cross angle of two vectors.\n    '''\n    # normalize the vector\n    v1 = norm(v1)\n    v2 = norm(v2)\n    # calculate the cross angle\n    return cmath.acos(cross_prod(v1,v2)/(r2*r1))\ndef direction(v):\n    '''\n    Write a function to calculate the direction of a vector.\n    '''\n    # normalize the vector\n    v = norm(v)\n    # return r[0]*cmath.arccos(v[0])\n    return r[0]*cmath.arccos("
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = cmath.phase(x,y)\n    a = cmath.polar(phi)\n    b = cmath.rect(a,a)\n    return a, b\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    try:\n        return (cmath.pi*(x**2)+cmath.atan2(y,x))*180/cmath.pi\n    except ZeroDivisionError:\n        return \"ZERO\"\ndef polar_rect_str(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    try:\n        return f\"({polar_rect(x,y)}\u00b0)\"\n    except ZeroDivisionError:\n        return \"ZERO\"\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radians = cmath.atan2(y,x)\n    return round(radians,3)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x>0 and y>0:\n        x = x*math.pi\n        y = y*math.pi\n        return x,y\n    elif x>0 and y<0:\n        y = y*math.pi\n        x = x*math.pi\n        return x,y\n    elif x<0 and y>0:\n        x = x*math.pi\n        y = y*math.pi\n        return x,y\n    elif x<0 and y<0:\n        x = x*math.pi\n        y = y*math.pi\n        return x,y\n    else:\n        return -1,-1\ndef polar_rect_sigmoid(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x>0 and y>0:\n        x = x*math.pi\n        y = y*math.pi\n        return x,y\n    elif x>0 and y<0:\n        y = y*math.pi\n        x = x*math.pi\n        return x,y\n    elif x<0 and y>0:\n        x = x*math.pi\n        y = y*math.pi\n        return x,y\n    elif x<0 and y<0:\n        x = x*math.pi\n        y = y*math.pi\n        return x,y\n    else:\n        return -1,-1\ndef distance_in_circle(r,phi):\n    '''\n    Write a function to compute the distance from a circle with radius r, and angle phi.\n    '''\n    if r>0 and phi>0:\n        phi = phi*cmath.pi/180\n        r = r*cmath.sqrt(1-((r*r)/(2*r)))\n        return r*cmath.exp(1j*phi)\n    else:\n        return -1\ndef normalize_vector(v):\n    '''\n    Write a function to normalize a vector.\n    '''\n    v = v.norm()\n    return v\ndef normalize_matrix(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.norm()\n    return M\ndef normalize_matrix_sigmoid(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.norm()\n    return M\ndef unit_vector(vector):\n    '''\n    Write a function to compute the unit vector of a vector.\n    '''\n    return vector/vector.norm()\ndef unit_vector_sigmoid(vector):\n    '''\n    Write a function to compute the unit vector of a vector.\n    '''\n    v = unit_vector(vector)\n    return v/v.norm()\ndef angle_between(v1,v2):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    v1 = v1.norm()\n    v2 = v2.norm()\n    if v1==0 and v2==0:\n        return 0\n    return (v1*v2)/(v1+v2)\ndef angle_between_2_vectors(v1,v2):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    v1 = v1.norm()\n    v2 = v2.norm()\n    if v1==0 and v2==0:\n        return 0\n    return (v1*v2)/(v1+v2)\ndef angle_between_vectors(v1,v2):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    v1 = v1.norm()\n    v2 = v2.norm()\n    if v1==0 and v2==0:\n        return 0\n    return (v1*v2)/(v1+v2)\ndef normalize_matrix_normalized(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.norm()\n    return M\ndef normalize_matrix_normalized_sigmoid(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.norm()\n    return M\ndef normalize_matrix_exponential(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.exp()\n    return M\ndef normalize_matrix_exponential_sigmoid(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.exp()\n    return M\ndef normalize_matrix_exponential_2_vectors(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.exp()\n    return M\ndef normalize_matrix_square_root(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.norm()\n    return M\ndef normalize_matrix_square_root_sigmoid(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.norm()\n    return M\ndef normalize_matrix_square_root_2_vectors(M):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M = M.norm()\n    return M\ndef compute_tangent_vector(v1,v2):\n    '''\n    Write a function to compute the tangent vector of two vectors.\n    '''\n    v1 = v1.norm()\n    v2 = v2.norm()\n    if v1==0 and v2==0:\n        return 0\n    return (v1*v2)/(v1+v2)\ndef compute_tangent_vector_sigmoid(v1,v2):\n    '''\n    Write a function to compute the tangent vector of two vectors.\n    '''\n    v1 = v1.norm()\n    v2 = v2.norm()\n    if v1==0 and v2==0:\n        return 0\n    return (v1*v2)/(v1+v2)\ndef compute_tangent_vector_2_vectors(v1,v2):\n    '''\n    Write a function to compute the tangent vector of two vectors.\n    '''\n    v1 = v1.norm()\n    v2 = v2.norm()\n    if v1==0 and v2==0:\n        return 0\n    return (v1*v2)/(v1+v2)\ndef normalize_matrix_sigmoid_2_vectors(M1):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M1 = M1.norm()\n    return M1\ndef normalize_matrix_sigmoid_2_vectors(M1):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M1 = M1.norm()\n    return M1\ndef normalize_matrix_sigmoid_2_vectors(M1):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M1 = M1.norm()\n    return M1\ndef normalize_matrix_exponential_2_vectors(M1):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M1 = M1.norm()\n    return M1\ndef normalize_matrix_exponential_2_vectors(M1):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M1 = M1.norm()\n    return M1\ndef normalize_matrix_square_root_2_vectors(M1):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M1 = M1.norm()\n    return M1\ndef normalize_matrix_square_root_2_vectors(M1):\n    '''\n    Write a function to normalize a matrix.\n    '''\n    M1 = M1.norm()\n    return M1\ndef normalize_matrix_square_root_2_vectors(M1):\n    '''\n    Write a functio"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList)==0:\n        return None\n    if len(newList)==1:\n        return newList\n    # if newList[0]==newList[len(newList)-1]:\n    #     newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    #     return newList\n    # if len(newList)>1:\n    #     return swap_List(newList[0:len(newList)//2]) + swap_List(newList[len(newList)//2:])\n    temp=newList[0]\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    newList[len(newList)-1], temp = temp, newList[len(newList)-1]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.insert(0,newList.pop())\n    newList.append(newList.pop())\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # your code goes here\n    newList.reverse()\n    newList.append(newList[0])\n    newList.pop(0)\n    newList.append(newList[-1])\n    newList.pop(-1)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList.reverse()\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = len(newList)\n    i = l-1\n    j = l-1\n    temp = newList[i]\n    newList[i] = newList[j]\n    newList[j] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    result = newList[1:] + newList[:1]\n    return result\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp_var=newList[-1];\n    newList[-1]=newList[0];\n    newList[0]=temp_var;\n    return newList\n    \nnewList=[1,2,3,4,5,6,7]\nprint(swap_List(newList)"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert type(n) == int and n >= 0\n    assert type(k) == int and k >= 0\n    # n_2^n x k_2^k\n    return int(binomial_coeff(n,k) / binomial_coeff(n-1,k-1) * n)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    elif k == 0:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    m = binomial_coeff(n,k)\n    a = n\n    b = k\n    if m:\n        a = m * a\n        b = b - 1\n    return a*b\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    for i in range(n):\n        s += (-1)**i * (binomial(n,i) / (binomial(i,k) * binomial(n-i,k)))\n    return s\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return ((n*(k+1))//2)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    n_0 = binomial_coefficient(1,0)\n    n_1 = binomial_coefficient(1,1)\n    return n_0 * n_1\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial_Coeff_wrapper(n, k):\n        if(k == 0):\n            return 1\n        elif(k == 1):\n            return n\n        else:\n            return binomial_Coeff_wrapper(n-1, k-1) * n * (k-1)\n    return binomial_Coeff_wrapper(n,k)\n    \ndef binomial_coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n < 0):\n        return 0\n    if(k < 0):\n        return 0\n    if(k == 0):\n        return 1\n    if(k == 1):\n        return n\n    else:\n        return binomial_coeff(n-1, k-1) * n * (k-1)\n    \ndef binomial_coeff_2(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n < 0):\n        return 0\n    if(k < 0):\n        return 0\n    if(k == 0):\n        return 1\n    if(k == 1):\n        return 1\n    else:\n        return binomial_coeff(n-1, k-1) * (k-1) * (n-1)\n    \ndef binomial_coeff_3(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n < 0):\n        return 0\n    if(k < 0):\n        return 0\n    if(k == 0):\n        return 1\n    if(k == 1):\n        return 1\n    else:\n        return binomial_coeff(n-1, k-1) * (k-1) * (n-1) * n * (k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    m = n+1\n    if k==0:\n        return 1\n    elif k==1:\n        return m\n    elif k>1:\n        return binomial_Coeff(n-1,k-1)\n    else:\n        return 0\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum=0\n    for i in range(k):\n        sum=sum+np.prod([(i+1)*(x)**(i) for x in range(n+1)])\n    return sum\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    mask = 32\n    print(\"the input is: {}\".format(ip))\n    while len(ip) > mask:\n        if ip[:mask] == '0' * mask:\n            print(\"the input is: {}\".format(ip))\n            return ip\n        else:\n            print(\"the input is: {}\".format(ip))\n            mask -= 1\n            ip = ip[1:]\n    print(\"the input is: {}\".format(ip))\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_with_zeros = re.sub(r'(0+)([1-9]|[1-9][0-9]|1[0-2])(\\.(0+)){3}', '', ip)\n    return ip_with_zeros\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        ip = ip.replace('.','')\n        if ip.find('.')>-1:\n            return '0.'+ip[ip.find('.')+1:]\n        else:\n            return ip\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    print(ip)\n    ip = ip.replace('0.','')\n    print(ip)\n    ip = ip.replace('.','')\n    print(ip)\n    ip = ip.replace('-','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('!','.')\n    print(ip)\n    ip = ip.replace('?','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*','.')\n    print(ip)\n    ip = ip.replace('(','.')\n    print(ip)\n    ip = ip.replace(')','.')\n    print(ip)\n    ip = ip.replace('_','.')\n    print(ip)\n    ip = ip.replace(' ','.')\n    print(ip)\n    ip = ip.replace('#','.')\n    print(ip)\n    ip = ip.replace('$','.')\n    print(ip)\n    ip = ip.replace('%','.')\n    print(ip)\n    ip = ip.replace('^','.')\n    print(ip)\n    ip = ip.replace('&','.')\n    print(ip)\n    ip = ip.replace('*',"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"\\b[0-9]{1,3}\\b\", \"\", ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    return re.sub(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_s = ''\n    if '.' in ip:\n        for i in range(len(ip)):\n            if ip[i] == '.':\n                continue\n            else:\n                ip_s += ip[i]\n    \n    # We make sure to replace the '.' with 0\n    return ip_s.replace('.', '0')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.replace( '.', '' )\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_regex = re.compile('^0+')\n    ip_str = ip\n    ip_list = ip_str.split('.')\n    new_list = []\n    for i in ip_list:\n        try:\n            new_list.append(float(i))\n        except ValueError:\n            new_list.append(i)\n    ip_list = new_list\n    ip_list = list(set(ip_list))\n    ip_list.remove(0)\n    ip_list.sort(reverse = True)\n    ip_str = '.'.join(ip_list)\n    return ip_str\ndef replace_symbols(ip):\n    '''\n    Write a function to replace all symbols with their abbreviations.\n    '''\n    ip_str = ip\n    replace_regex = re.compile('[^a-zA-Z]')\n    for i in range(len(ip_str)):\n        if ip_str[i] == '-':\n            ip_str = ip_str.replace('-', '.')\n        elif ip_str[i] == '.':\n            ip_str = ip_str.replace('.', '-').replace('-', '')\n    return ip_str\ndef parse_list_to_int(ip_list):\n    '''\n    Use a regular expression to parse a list of strings into an integer list.\n    '''\n    for i in range(0, len(ip_list)):\n        ip_list[i] = int(ip_list[i])\n    return ip_list\ndef parse_list_to_float(ip_list):\n    '''\n    Use a regular expression to parse a list of strings into a float list.\n    '''\n    for i in range(0, len(ip_list)):\n        ip_list[i] = float(ip_list[i])\n    return ip_list\ndef merge_list(l1, l2):\n    '''\n    A function that merges two lists into a single list.\n    '''\n    l3 = []\n    for i in l1:\n        if i not in l3:\n            l3.append(i)\n    for i in l2:\n        if i not in l3:\n            l3.append(i)\n    return l3\ndef get_int_from_float(f):\n    '''\n    Write a function to parse a float into an int.\n    '''\n    return int(f)\ndef get_int_from_int(i):\n    '''\n    Write a function to parse an integer into an int.\n    '''\n    return int(i)\ndef int_to_ip(ip):\n    '''\n    Write a function to convert an ip address to a network address.\n    '''\n    split_ip = ip.split('.')\n    for i in range(len(split_ip)):\n        if split_ip[i]!= '0':\n            split_ip[i] = '.'\n    return '.'.join(split_ip)\ndef get_float_from_ip(ip):\n    '''\n    Write a function to parse an ip address into a float.\n    '''\n    return float(ip)\ndef get_float_from_int(i):\n    '''\n    Write a function to parse an integer into a float.\n    '''\n    return float(i)\ndef ip_to_str(ip):\n    '''\n    Write a function to convert an ip address to a string.\n    '''\n    return str(ip)\ndef get_number_from_ip(ip):\n    '''\n    Write a function to parse an ip address into a number.\n    '''\n    return int(ip)\ndef get_number_from_int(i):\n    '''\n    Write a function to parse an integer into a number.\n    '''\n    return int(i)\ndef test_function(ip):\n    '''\n    Write a function to test the function for valid ip addresses.\n    '''\n    print(removezero_ip(ip))\n    print(replace_symbols(ip))\n    print(parse_list_to_int(ip))\n    print(parse_list_to_float(ip))\n    print(get_int_from_float(ip))\n    print(get_int_from_ip(ip))\n    print(get_float_from_ip(ip))\n    print(get_float_from_int(ip))\ndef get_valid_ip_addresses(ip_list):\n    '''\n    Write a function that uses a regular expression to get a list of valid ip addresses.\n    '''\n    if len(ip_list) == 0:\n        return 'No Valid IP Addresses'\n    if len(ip_list) == 1:\n        return ip_list[0]\n    if len(ip_list) == 2:\n        return ip_list[0] + '.' + ip_list[1]\n    if len(ip_list) == 3:\n        return ip_list[0] + '.' + ip_list[1] + '.' + ip_list[2]\ndef get_valid_ip_addresses_by_ip(ip_list):\n    '''\n    Write a function that uses a regular expression to get a list of valid ip addresses.\n    '''\n    if len(ip_list) == 0:\n        return 'No Valid IP Addresses'\n    if len(ip_list) == 1:\n        return ip_list[0]\n    if len(ip_list) == 2:\n        return ip_list[0] + '.' + ip_list[1]\n    if len(ip_list) == 3:\n        return ip_list[0] + '.' + ip_list[1] + '.' + ip_list[2]\ndef get_valid_ip_addresses_by_int(i):\n    '''\n    Write a function that uses a regular expression to get a list of valid ip addresses.\n    '''\n    if len(i) == 0:\n        return 'No Valid IP Addresses'\n    if len(i) == 1:\n        return i[0]\n    if len(i) == 2:\n        return i[0] + '.' + i[1]\n    if len(i) == 3:\n        return i[0] + '.' + i[1] + '.' + i[2]\ndef get_valid_ip_addresses_by_int_ip(ip_list):\n    '''\n    Write a function that uses a regular expression to get a list of valid ip addresses.\n    '''\n    if len(ip_list) == 0:\n        return 'No Valid IP Addresses'\n    if len(ip_list) == 1:\n        return ip_list[0]\n    if len(ip_list) == 2:\n        return ip_list[0] + '.' + ip_list[1]\n    if len(ip_list) == 3:\n        return ip_list[0] + '.' + ip_list[1] + '.' + ip_list[2]\ndef get_valid_ip_addresses_by_float(f):\n    '''\n    Write a function that uses a regular expression to get a list of valid ip addresses.\n    '''\n    return f\ndef get_valid_ip_addresses_by_float_ip(f):\n    '''\n    Write a function that uses a regular expression to get a list of valid ip addresses.\n    '''\n    if len(f) == 0:\n        return 'No Valid IP Addresses'\n    if len(f) == 1:\n        return f[0]\n    if len(f) == 2:\n        return f[0] + '.' + f[1]\n    if len(f) == 3:\n        return f[0] + '.' + f[1] + '.' + f[2]\ndef get_valid_ip_addresses_by_int_float(i):\n    '''\n    Write a function that uses a regular expression to get a list of valid ip addresses.\n    '''\n    return i\ndef get_valid_ip_addresses_by_int_float_ip(i):\n    '''\n    Write a function that uses a regular expression to get a list of valid ip addresses.\n    '''\n    if len(i) == 0:\n        return 'No Valid IP Addresses'\n    if len(i) == 1:\n        return i[0]\n    if le"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0', '', ip).upper()\ndef remove_blank(s):\n    '''\n    write a function to remove a string from a list of strings\n    '''\n    return ''.join(x for x in s if x.isalnum())\ndef remove_num(s):\n    '''\n    remove a string from a list of strings\n    '''\n    return re.sub('\\d+', '', s)\ndef is_number(s):\n    '''\n    check if a string is a number\n    '''\n    if s.isdigit() or re.search('^[a-zA-Z]+', s) is None:\n        return True\n    else:\n        return False\ndef is_alphabet(s):\n    '''\n    check if a string is an alphabet\n    '''\n    return all(i.isalnum() for i in s)\ndef is_zero(s):\n    '''\n    check if a string is a zero\n    '''\n    return re.search(r'^0*', s) is not None\ndef is_number(s):\n    '''\n    check if a string is a number\n    '''\n    return is_number(remove_blank(remove_num(s)))\ndef is_alphabet(s):\n    '''\n    check if a string is an alphabet\n    '''\n    return is_alphabet(remove_blank(remove_num(remove_blank(remove_zero_ip(s)))))\\\n            and is_alphabet(remove_blank(remove_blank(remove_num(remove_blank(remove_zero_ip(remove_blank(remove_blank(s))))))))\ndef is_empty(s):\n    '''\n    check if a string is an empty\n    '''\n    return len(remove_blank(s)) == 0\ndef is_num(s):\n    '''\n    check if a string is a number\n    '''\n    return is_number(remove_blank(s))\ndef is_alphabet_zero(s):\n    '''\n    check if a string is an alphabet zero\n    '''\n    return is_alphabet(remove_blank(remove_num(remove_blank(remove_zero_ip(s)))))\\\n            and is_alphabet(remove_blank(remove_blank(remove_num(remove_blank(remove_zero_ip(remove_blank(remove_blank(s))))))))\ndef is_alphabet_zero_num(s):\n    '''\n    check if a string is a alphabet zero number\n    '''\n    return is_alphabet(remove_blank(remove_num(remove_blank(remove_zero_ip(remove_blank(remove_zero_ip(remove_blank(remove_num(remove_blank(remove_blank(remove_num(remove_blank(remove_blank(remove_blank(s))))))))))))))))\ndef is_zero_num(s):\n    '''\n    check if a string is a zero number\n    '''\n    return is_zero(remove_blank(remove_num(remove_blank(remove_zero_ip(remove_blank(remove_zero_ip(remove_blank(remove_num(remove_blank(remove_blank(remove_blank(remove_blank(remove_zero_ip(remove_blank(remove_blank(remove_blank(remove_num(remove_blank(remove_blank(remove_blank(remove_num(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank(remove_blank"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return 'The given list is empty'\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)==0:\n        return 'Empty list'\n    elif len(list1)<2:\n        return list1\n    else:\n        list1.sort()\n        list_odd=[]\n        list_even=[]\n        for i in list1:\n            if i%2==0:\n                list_even.append(i)\n            else:\n                list_odd.append(i)\n        return list_even-list_odd\n        \n        \nlist1=[1,2,4,5,8,2,5]\nprint(diff_even_odd(list1))"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Your code here\n    return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for number in list1:\n        if number % 2 == 0:\n            even_list.append(number)\n        else:\n            odd_list.append(number)\n    return even_list + odd_list\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[:int(len(list1)/2)]\n    odd = list1[int(len(list1)/2):]\n    for i in range(len(even)):\n        if even[i] % 2 == 0:\n            even.remove(even[i])\n        else:\n            break\n    for i in range(len(odd)):\n        if odd[i] % 2 == 0:\n            odd.remove(odd[i])\n        else:\n            break\n    print('The difference of the first even and first odd number of list is: ')\n    print(', '.join(list(map(str, even))))\n    print(', '.join(list(map(str, odd))))\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    result = []\n    result.append(list1[0])\n    for i in range(1,len(list1)):\n        if list1[i]%2 == 0:\n            result.append(list1[i])\n        else:\n            result.append(list1[i]-1)\n    return result\n    # return [list1[0],list1[1],list1[2],list1[3],list1[4],list1[5],list1[6],list1[7]]"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    num=0\n    num_2=0\n    \n    for i in list1:\n        if i%2==0:\n            num_2+=i\n        else:\n            num+=i\n    \n    return num_2-num\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [x for x in list1 if x % 2 == 0]\n    odd = [x for x in list1 if x % 2!= 0]\n    if len(even) > 0:\n        return (sum(even)-sum(odd))\n    else:\n        return (sum(odd)-sum(even))\n        \n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    lst = [list1[i] for i in range(len(list1)) if i % 2 == 0]\n    print(lst)\n    return lst\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    for i in range(len(str1)) : \n        if str1[i]=='1' : \n            c+=1\n        elif str1[i]=='0' : \n            if str1[i+1]=='0' : \n                c+=1\n            elif str1[i+1]=='1' : \n                c+=1\n    for i in range(len(str2)) : \n        if str2[i]=='1' : \n            c+=1\n        elif str2[i]=='0' : \n            if str2[i+1]=='0' : \n                c+=1\n            elif str2[i+1]=='1' : \n                c+=1\n    return min(c,len(str1)-c)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #Step 1: Input\n    #Step 2: Input\n    #Step 3: Output\n    #Solution:\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    if n < 1 : raise ValueError(\"str1 can't be empty\")\n    if n < 2 : return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if str1[i]==str1[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    min_swaps = 0\n    if n1 > n2 : \n        min_swaps = n1 - n2 \n    else : \n        min_swaps = n2 - n1\n    return min_swaps\n    "
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)-1):\n        if str1[i]!=str2[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if not str1 : return 0\n    if not str2 : return 0\n    if str1[0]!= str2[0] : return 0\n    if str1[1:] == str2 : return 1\n    if str1[1:] == \"1\" : return 2\n    if str1[1:] == \"00\" : return 3\n    if str1[0] == \"0\" : return 4\n    return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Define helper variables \n    \n    # create two dictionaries, one for the number of swaps that are being done, and other for the number of digits that have been swapped\n    \n    swaps = {}\n    digits = {}\n    swaps2 = {}\n    digits2 = {}\n    for i in range(10):\n        swaps[i] = 0\n        digits[i] = 0\n        swaps2[i] = 0\n        digits2[i] = 0\n    \n    # iterate through the string and count the number of swaps\n    \n    #loop through the string (converting to base 10)\n    \n    for i in range(len(str1)):\n        if(str1[i] == str2[i]):\n            swaps[int(str1[i])] += 1\n            digits[int(str1[i])] += 1\n            swaps[int(str2[i])] -= 1\n            digits[int(str2[i])] -= 1\n        else:\n            swaps[int(str1[i])] += 1\n            digits[int(str1[i])] += 1\n            swaps2[int(str2[i])] += 1\n            digits2[int(str2[i])] += 1\n    \n    # print(swaps)\n    # print(digits)\n    # print(swaps2)\n    # print(digits2)\n    \n    # if the number of swaps that have been done is 0, it means the number of digits swapped is 0\n    # print(swaps)\n    # print(digits)\n    \n    # if the number of swaps that have been done is 1, it means the number of digits swapped is 1\n    # print(swaps2)\n    # print(digits2)\n    \n    # create a list of the minimum swaps\n    \n    return min(swaps.values()),min(swaps.keys()),min(swaps2.values()),min(swaps2.keys())\n    \n    '''\n    Write a python function to check if two binary numbers represented as a string are one another.\n    '''\n    \n    # Define helper variables \n    \n    # create two dictionaries, one for the number of swaps that are being done, and other for the number of digits that have been swapped\n    \n    swaps = {}\n    digits = {}\n    swaps2 = {}\n    digits2 = {}\n    for i in range(10):\n        swaps[i] = 0\n        digits[i] = 0\n        swaps2[i] = 0\n        digits2[i] = 0\n    \n    # iterate through the string and count the number of swaps\n    \n    #loop through the string (converting to base 10)\n    \n    for i in range(len(str1)):\n        if(str1[i] == str2[i]):\n            swaps[int(str1[i])] += 1\n            digits[int(str1[i])] += 1\n            swaps[int(str2[i])] -= 1\n            digits[int(str2[i])] -= 1\n        else:\n            swaps[int(str1[i])] += 1\n            digits[int(str1[i])] += 1\n            swaps2[int(str2[i])] += 1\n            digits2[int(str2[i])] += 1\n    \n    # print(swaps)\n    # print(digits)\n    # print(swaps2)\n    # print(digits2)\n    \n    # if the number of swaps that have been done is 0, it means the number of digits swapped is 0\n    # print(swaps)\n    # print(digits)\n    \n    # if the number of swaps that have been done is 1, it means the number of digits swapped is 1\n    # print(swaps2)\n    # print(digits2)\n    \n    # create a list of the minimum swaps\n    \n    return min(swaps.values()),min(swaps.keys()),min(swaps2.values()),min(swaps2.keys())\n    \n    '''\n    Write a python function to check if two binary numbers represented as a string are one another.\n    '''\n    \n    # Define helper variables \n    \n    # create two dictionaries, one for the number of swaps that are being done, and other for the number of digits that have been swapped\n    \n    swaps = {}\n    digits = {}\n    swaps2 = {}\n    digits2 = {}\n    for i in range(10):\n        swaps[i] = 0\n        digits[i] = 0\n        swaps2[i] = 0\n        digits2[i] = 0\n    \n    # iterate through the string and count the number of swaps\n    \n    #loop through the string (converting to base 10)\n    \n    for i in range(len(str1)):\n        if(str1[i] == str2[i]):\n            swaps[int(str1[i])] += 1\n            digits[int(str1[i])] += 1\n            swaps[int(str2[i])] -= 1\n            digits[int(str2[i])] -= 1\n        else:\n            swaps[int(str1[i])] += 1\n            digits[int(str1[i])] += 1\n            swaps2[int(str2[i])] += 1\n            digits2[int(str2[i])] += 1\n    \n    # print(swaps)\n    # print(digits)\n    # print(swaps2)\n    # print(digits2)\n    \n    # if the number of swaps that have been done is 0, it means the number of digits swapped is 0\n    # print(swaps)\n    # print(digits)\n    \n    # if the number of swaps that have been done is 1, it means the number of digits swapped is 1\n    # print(swaps2)\n    # print(digits2)\n    \n    # create a list of the minimum swaps\n    \n    return min(swaps.values()),min(swaps.keys()),min(swaps2.values()),min(swaps2.keys())\n    \n    '''\n    Write a python function to check if two binary numbers represented as a string are one another.\n    '''\n    \n    # Define helper variables \n    \n    # create two dictionaries, one for the number of swaps that are being done, and other for the number of digits that have been swapped\n    \n    swaps = {}\n    digits = {}\n    swaps2 = {}\n    digits2 = {}\n    for i in range(10):\n        swaps[i] = 0\n        digits[i] = 0\n        swaps2[i] = 0\n        digits2[i] = 0\n    \n    # iterate through the string and count the number of swaps\n    \n    #loop through the string (converting to base 10)\n    \n    for i in range(len(str1)):\n        if(str1[i] == str2[i]):\n            swaps[int(str1[i])] += 1\n            digits[int(str1[i])] += 1\n            swaps[int(str2[i])] -= 1\n            digits[int(str2[i])] -= 1\n        else:\n            swaps[int(str1[i])] += 1\n            digits[int(str1[i])] += 1\n            swaps2[int(str2[i])] += 1\n            digits2[int(str2[i])] += 1\n    \n    # print(swaps)\n    # print(digits)\n    # print(swaps2)\n    # print(digits2)\n    \n    # if the number of swaps that have been done is 0, it means the number of digits swapped is 0\n    # print(swaps)\n    # print(digits)\n    \n    # if the number of swaps that have been done is 1, it means the number of digits swapped is 1\n    # print(swaps2)\n    # print(digits2)\n    \n    # create a list of the minimum swaps\n    \n    return min(swaps.values()),min(swaps.keys()),min(swaps2.values()),min(swaps2.key"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1 = []\n    l2 = []\n    for i in str1:\n        if i == '0':\n            l1.append(1)\n        else:\n            l1.append(0)\n    for i in str2:\n        if i == '0':\n            l2.append(1)\n        else:\n            l2.append(0)\n    i = 0\n    j = 0\n    minSwaps = 0\n    for i in range(len(l1)):\n        if l1[i] == l2[j]:\n            minSwaps = minSwaps + 1\n        else:\n            i = i + 1\n            j = j + 1\n    return minSwaps\n    \n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(str(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    def tuple_size_subset(tuple):\n        '''\n        Return a tuple with the size of the elements in the given tuple subset.\n        '''\n        subset_size = 0\n        for item in tuple:\n            subset_size += item\n        return (subset_size, len(tuple))\n    \n    if tuple_list == ():\n        return 0\n    elif tuple_list[0] == tuple_list[-1]:\n        return tuple_size_subset(tuple_list[1:-1])\n    elif len(tuple_list) == 1:\n        return tuple_size(tuple_list)\n    else:\n        return tuple_size_subset(tuple_list[:-1]) + tuple_size(tuple_list[1:])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_bytes = 0\n    for value in tuple_list:\n        total_bytes += value.__sizeof__()\n    return total_bytes\ndef find_value(item, values):\n    '''\n    Write a function to find the index in the given list of values and return that index.\n    '''\n    for index in range(len(values)):\n        if values[index] == item:\n            return index\ndef find_index(value, array_list):\n    '''\n    Write a function to find the index in the given list of values and return that index.\n    '''\n    for index in range(len(array_list)):\n        if array_list[index] == value:\n            return index\ndef find_index_2(value, array_list):\n    '''\n    Write a function to find the index in the given list of values and return that index.\n    '''\n    for index in range(len(array_list)):\n        if array_list[index] == value:\n            return index\ndef count(item, array_list):\n    '''\n    Write a function to find the count of the given value in the given list of values.\n    '''\n    count = 0\n    for index in range(len(array_list)):\n        if array_list[index] == item:\n            count += 1\n    return count\ndef index(item, array_list):\n    '''\n    Write a function to find the index of the given value in the given list of values.\n    '''\n    for index in range(len(array_list)):\n        if array_list[index] == item:\n            return index\ndef two_list(list1, list2):\n    '''\n    Write a function to add two lists at the same index.\n    '''\n    list1.append(list2)\n    return list1\ndef insert(item, array_list):\n    '''\n    Write a function to add an item to the end of the list and return that list.\n    '''\n    last_list = array_list[-1]\n    array_list.append(item)\n    return array_list\ndef remove(item, array_list):\n    '''\n    Write a function to remove an item from the list and return that list.\n    '''\n    array_list.pop()\n    return array_list\ndef insert_at_index(item, array_list, index):\n    '''\n    Write a function to insert an item at the given index in the list and return that list.\n    '''\n    if index == 0:\n        item = two_list(item, array_list[0])\n    elif index == len(array_list):\n        item = two_list(item, array_list[index-1])\n    else:\n        item = two_list(item, array_list[index])\n    array_list.insert(index, item)\n    return array_list\ndef pop(array_list):\n    '''\n    Write a function to remove the item at the end of the list and return that list.\n    '''\n    return remove(array_list.pop(), array_list)\ndef insert_at_index_2(item, array_list, index):\n    '''\n    Write a function to insert an item at the given index in the list and return that list.\n    '''\n    if index == 0:\n        item = two_list(item, array_list[index])\n    elif index == len(array_list):\n        item = two_list(item, array_list[index-1])\n    else:\n        item = two_list(item, array_list[index])\n    array_list.insert(index, item)\n    return array_list\ndef remove_2(array_list):\n    '''\n    Write a function to remove the item at the beginning of the list and return that list.\n    '''\n    return remove(array_list.pop(0), array_list)\ndef set(array_list, value):\n    '''\n    Write a function to set an item in the list and return that list.\n    '''\n    array_list[find_index(value, array_list)] = value\n    return array_list\ndef remove_1(array_list):\n    '''\n    Write a function to remove an item from the list and return that list.\n    '''\n    index = find_index_2(array_list[0], array_list)\n    return remove_2(array_list[1:index+1])\ndef remove_3(array_list):\n    '''\n    Write a function to remove an item from the list and return that list.\n    '''\n    index = find_index_2(array_list[0], array_list)\n    return remove_2(array_list[1:index+1])\ndef insert_3(array_list, value):\n    '''\n    Write a function to insert an item in the list and return that list.\n    '''\n    index = find_index(value, array_list)\n    array_list.insert(index, value)\n    return array_list\ndef insert_index(array_list, value, index):\n    '''\n    Write a function to insert an item at the given index in the list and return that list.\n    '''\n    array_list.insert(index, value)\n    return array_list\ndef print_all(array_list):\n    '''\n    Write a function to print all the items of the list and return that list.\n    '''\n    for element in array_list:\n        print(element)\ndef remove_index(array_list, value):\n    '''\n    Write a function to remove an item at the given index in the list and return that list.\n    '''\n    index = find_index_2(value, array_list)\n    array_list.pop(index)\n    return array_list\ndef remove_2_index(array_list, value):\n    '''\n    Write a function to remove an item at the given index in the list and return that list.\n    '''\n    index = find_index_2(value, array_list)\n    array_list.pop(index)\n    return array_list\ndef insert_index_2(array_list, value, index):\n    '''\n    Write a function to insert an item at the given index in the list and return that list.\n    '''\n    array_list.insert(index, value)\n    return array_list\ndef delete_index(array_list, value, index):\n    '''\n    Write a function to delete an item at the given index in the list and return that list.\n    '''\n    if index == 0:\n        array_list.pop(index)\n        return array_list\n    if index == len(array_list):\n        index = len(array_list) - 1\n    array_list.pop(index)\n    return array_list\ndef delete_index_2(array_list, value, index):\n    '''\n    Write a function to delete an item at the given index in the list and return that list.\n    '''\n    array_list.pop(index)\n    return array_list\ndef count_index(array_list, value):\n    '''\n    Write a function to count the number of occurrences of the given value in the given list and return that list.\n    '''\n    count = 0\n    for item in array_list:\n        if item == value:\n            count += 1\n    return count\ndef find_index_3(array_list, value):\n    '''\n    Write a function to find the index of the given value in the given list.\n    '''\n    count = 0\n    for index in range(len(array_list)):\n        if array_list[index] == value:\n            count += 1\n    return count\ndef remove_index_3(array_list, value):\n    '''\n    Write a function to remove an item from the given index in the list and return that list.\n    '''\n    index = find_index_3(array_list, value)\n    array_list.pop(index)\n    return array_list\ndef remove_index_2(array_list, value):\n    '''\n    Write a function to remove an item from the given index in the list and return that list.\n    '''\n    index = find_index_2(value, array_list)\n    array_list.pop(index)\n    return array_list\ndef set_index(array_list, value, inde"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for x in tuple_list:\n        x = list(x)\n        x.sort()\n    return len(tuple_list)\n    \n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for i in range(len(tuple_list)):\n        tuple_size = tuple_size + sys.getsizeof(tuple_list[i])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return reduce(lambda a, b: a + b, map(len, tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Your code here\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    else:\n        return find_kth(arr1, arr2, k) if k == 0 else find_kth(arr2, arr1, k - 1"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Write your code here.\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 < n2:\n        return find_kth(arr1, arr2, k)\n    else:\n        return arr2[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k == 1:\n        return arr1[k - 1]\n    elif arr1[k] > arr2[k - 1]:\n        return find_kth(arr1, arr2, k - 1)\n    else:\n        return find_kth(arr2, arr1, k - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l, r = 0, len(arr1) - 1\n    while l <= r:\n        if arr1[l] <= arr2[k-1]:\n            l += 1\n            k -= 1\n        elif arr2[k-1] > arr1[l]:\n            r -= 1\n            k -= 1\n        else:\n            l += 1\n            k -= 1\n    return arr1[l + k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return -1\n    elif len(arr2) == 0:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr1) - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if arr1[middle] <= arr2[middle]:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return arr1[left]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the kth element in the array\n    def find_kth(arr1, arr2, k):\n        # find the kth element in the array\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                return arr1[i]\n        return arr2[i]\n    if len(arr1) > len(arr2):\n        return find_kth(arr1, arr2, k)\n    return find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l = 0\n    r = len(arr1) - 1\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Not Armstrong number\n    if number == 0:\n        return False\n    # Armstrong number\n    elif number < 0:\n        return False\n    else:\n        count = 0\n        temp = number\n        while temp:\n            count = count + 1\n            temp = temp // 10\n        if count == number:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    for num in str(number):\n        total = total + int(num)\n    if total == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    from math import sqrt\n    d = int(sqrt(number))+1\n    for i in range(1, d):\n        if number % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    for number in str(number):\n        total += int(number)\n    result = []\n    num = total\n    for num in str(num):\n        result.append(int(num))\n    i = 0\n    while len(result) > 0:\n        j = 0\n        for i in range(len(result)):\n            if result[i] % 10 == 0:\n                result.pop(i)\n                break\n            else:\n                j = i + 1\n        if j == len(result):\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = int(number)\n    sum = 0\n    for i in range(1,number + 1):\n        if(i % 5 == 0):\n            sum += i\n        else:\n            sum += 10*i\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    value = number\n    # check that the number is not negative\n    if value < 0:\n        return False\n    for i in range(len(str(value))):\n        num = str(value)[i]\n        cnt = 0\n        for j in range(len(num)):\n            cnt += int(num[j]) * len(str(value))\n        cnt = (cnt * cnt) % 10\n        if cnt == value:\n            return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if type(number) == int:\n        if len(str(number)) > 1:\n            digits = [int(d) for d in str(number)]\n            numbers_list = []\n            for d in digits:\n                numbers_list.append(d)\n            temp_list = []\n            temp_list.extend(numbers_list)\n            temp_list.sort()\n            for number in temp_list:\n                if number == int(number):\n                    return True\n            return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    sum = 0\n    while number!= 0:\n        rem = number % 10\n        count += 1\n        sum += rem ** count\n        number = number // 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    numbers = []\n    for i in range(1, number + 1):\n        numbers.append(i)\n    if number == sum(numbers):\n        return True\n    else:\n        return False\n    \ndef main():\n    number = int(input(\"Enter any number: \"))\n    print(armstrong_number(number))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = int(number)\n    if (number == 0):\n        return False\n    s = str(number)\n    if (len(s) % 2 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for n in range(1,number+1):\n        total += n\n    average = total/number\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_number = 0\n    for n in range(number):\n        sum_number += n\n    average = sum_number/number\n    return sum_number, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += i\n    average = total/number\n    print(f\"The average is {average}.\")\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum+=i\n    return sum/number\ndef sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number+1):\n        sum+=i\n    average = sum/number\n    return average\ndef stdev(number):\n    '''\n    Write a function that calculates the standard deviation of a number.\n    '''\n    s = sum_average(number) - average\n    #print(s)\n    return s\n    #return sum_average(number)/number\n    #return sum_average(number) - average\n    #return sum_average(number)/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum/n\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for number in range(1, number+1):\n        sum += number\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Find sum of n natural numbers\n    sum = 0\n    for num in range(1, n+1):\n        sum = sum + num\n    # Calculate sum of all natural numbers\n    sum = sum % 100\n    # Return the average\n    return sum/n\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    avg = sum / number\n    print(f\"Sum of {number} numbers is {sum} and Average of {number} numbers is {avg}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    summ = 0\n    ave = 0\n    if number >= 0:\n        for i in range(number):\n            summ += number\n            ave += 1\n        ave /= number\n        ave = round(ave, 2)\n        return f'The average of {number} natural numbers is {ave}'\n    else:\n        return f'No natural numbers were entered'\n    # Should return the sum and average of the numbers\n    # between 1 and n."
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    print(number)\n    sum = 0\n    for i in range(1,number+1):\n        print(i)\n        sum = sum + i\n    average = sum/number\n    print(\"sum = {}\".format(sum))\n    print(\"average = {}\".format(average))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n % 2 == 1 : \n        return True\n    else : \n        return False\n    \ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    if n == int(n*(n+1)/2) : \n        return True\n    else : \n        return False\n    "
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : \n        print(n,\"is even\")\n    else : \n        print(n,\"is odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(n % 2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #test_case = n % 2 == 0\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : return True\n    else : return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 1 : return True\n    else : return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2,n+1) :\n        if n%i == 0 : return False\n        \n    return True\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # dictionary to keep track of which character occurs in the string\n    chars_dic = {}\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i == str1[count]:\n            count += 1\n        else:\n            count = 0\n    return count\n    "
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # declaring a list to store the character\n    freq = []\n    # iterating through each char\n    for i in str1:\n        if i in freq:\n            # adding the char with the occurence\n            freq.append(i)\n            # updating the list\n            freq.remove(i)\n        else:\n            # adding the char with the occurance to the list\n            freq.append(i)\n    # printing the first repeated char\n    return freq[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            lst.remove(str1[i])\n            lst.append(str1[i-1])\n            break\n        if len(lst) == 0:\n            break\n    return lst[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # set variables\n    repeated = []\n    repeated_count = 0\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if(str1[i] == str1[i+1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Your code here\n    num_occurence = 0\n    for i in str1:\n        if i in str1:\n            num_occurence += 1\n    return num_occurence\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # get the length of the string\n    len = len(str1)\n    \n    # set the variable to be the first repeating character\n    # repeat the loop through the string\n    first_repeating_char = ''\n    \n    # start looping through the string\n    for char in str1:\n        \n        # check if the character is repeated\n        # if it is, then set the first repeating character\n        # to the value\n        if char in str1:\n            first_repeating_char = char\n            \n            # end looping through the string\n            break\n    \n    # return the first repeating character\n    return first_repeating_char"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucas_numbers = []\n    for i in range(1, n+1):\n        if (i ** 2) <= n:\n            lucas_numbers.append(i)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    out = []\n    for i in range(2,n+1):\n        if i%2 == 0:\n            out.append(i)\n    return out\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    ludic = []\n    \n    def luc(n):\n        if n < 0:\n            return -1\n        elif n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return n * luc(n-1)\n    \n    for i in range(1, n):\n        ludic.append(luc(i))\n    \n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            luc.append(i)\n        else:\n            luc.append(n-i)\n    return luc\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    import math\n    import functools\n    ludic = []\n    for i in range(n,1,-1):\n        if i >= math.floor(math.sqrt(i)):\n            ludic.append(i)\n    ludic.sort()\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    ludic = []\n    for i in range(1, n+1):\n        if i < int(n**0.5) + 1:\n            ludic.append(i)\n    return ludic\n    \nludic = get_ludic(100)\nprint(ludic)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lud = [x for x in range(1, n+1) if x%10==0 or x%10==1]\n    return lud\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if i<10 or i%2==0:\n            ludic.append(i)\n        else:\n            for j in range(i+1,n+1,2):\n                if j<10 or j%2==0:\n                    ludic.append(j)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic=[]\n    for i in range(1,n+1):\n        if i < n:\n            if i % 5 == 0:\n                ludic.append(i)\n            else:\n                continue\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return s\n    \n    else:\n        # split list of words into a list of lists\n        ls = s.split(' ')\n        \n        # reverse each word in the list\n        for word in ls:\n            print(reverse(word))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print(s)\n    a=''\n    b=''\n    c=''\n    d=''\n    for i in range(len(s)):\n        if(s[i]==\" \"):\n            if(i==0):\n                a=a[:i]+\" \"+b\n                b=b+\" \"+a[-1]\n            elif(i==len(s)-1):\n                c=c[:i]+\" \"+b\n                b=b+\" \"+a[-1]\n            else:\n                d=d[:i]+\" \"+a[-1]\n                a=a[:-1]\n                b=b+\" \"+d[-1]\n        elif(s[i]==\" \"):\n            a=a+\" \"+s[i]\n        else:\n            a=a+s[i]\n    print(a)\n    print(b)\n    print(c)\n    print(d)\n    s=a+b+c+d\n    print(s)\n    return s\n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pas"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_string(s):\n        return \" \".join(s.split()[::-1])\n    return reverse_string(s)"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    temp = s.split()\n    for i in range(len(temp)):\n        temp[i] = temp[i].rstrip()\n    print(temp)\n    return temp\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join([s[i:(i+2)] for i in range(len(s)) if i%2==0 and i!= 0])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print('Function: reverse_words')\n    print('Argument: s')\n    print('Return: the reverse of the given string')\n    \n    s = s.lower()\n    s = s.split()\n    print('\\n')\n    \n    #s = s[::-1]\n    \n    s = ''.join(s)\n    print(s)\n    print('\\n')\n    \n    return s\n    \ndef reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print('Function: reverse_words')\n    print('Argument: s')\n    print('Return: the reverse of the given string')\n    \n    s = s.lower()\n    s = s.split()\n    print('\\n')\n    \n    #s = s[::-1]\n    \n    s = ''.join(s)\n    print(s)\n    print('\\n')\n    \n    return s\n    \ndef reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print('Function: reverse_words')\n    print('Argument: s')\n    print('Return: the reverse of the given string')\n    \n    s = s.lower()\n    s = s.split()\n    print('\\n')\n    \n    #s = s[::-1]\n    \n    s = ''.join(s)\n    print(s)\n    print('\\n')\n    \n    return s\n    "
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def split_string(s):\n        return s.split()\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    rev_s = s\n    rev_s = rev_s[::-1]\n    #print(rev_s)\n    rev_s = rev_s.split()\n    rev_s = rev_s[::-1]\n    #print(rev_s)\n    return rev_s\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    splitted_words = s.split(\" \")\n    print(splitted_words)\n    reverse_words = splitted_words\n    reverse_words[::-1]\n    print(reverse_words)\n    return \" \".join(reverse_words)\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for x in range(2,num):\n        if (num % x == 0):\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num > 2:\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    i = 2\n    while i <= num/2:\n        if num % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, int(num**0.5)):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Set all prime numbers to 1\n    prime = [True for i in range(num + 1)]\n    # Create a boolean list for the 2-loop\n    for i in range(2, int(num**0.5) + 1):\n        # Test if the number is not equal to 1\n        if num % i == 0:\n            prime[i] = False\n    return prime[2]\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0 or degree == 90:\n        return 0\n    elif degree == 90:\n        return math.pi/180\n    elif degree == 180:\n        return math.pi\n    elif degree == 180+math.pi:\n        return math.pi\n    else:\n        print(\"Error\")\n    \ndef degrees_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0 or degree == 90:\n        return math.pi\n    elif degree == 90:\n        return math.pi/180\n    elif degree == 180:\n        return 0\n    elif degree == 180+math.pi:\n        return 0\n    else:\n        print(\"Error\")\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    return degree * (3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679)\ndef d(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef deg2rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef h(hour, minute, second):\n    '''\n    Write a function to convert hour, minute and second into radians.\n    '''\n    return (hour * 3600) + (minute * 60) + second\ndef hr(hour):\n    '''\n    Write a function to convert hour into radians.\n    '''\n    return (hour * 3600)\ndef min(minute):\n    '''\n    Write a function to convert minutes into radians.\n    '''\n    return (minute * 60)\ndef sec(second):\n    '''\n    Write a function to convert seconds into radians.\n    '''\n    return (second * 60)\ndef radians(radian):\n    '''\n    Write a function to convert radians into degrees.\n    '''\n    return radian * (180/math.pi)\ndef deg(degree):\n    '''\n    Write a function to convert degrees into radians.\n    '''\n    return degree * (180/math.pi)\ndef radians_to_deg(radian):\n    '''\n    Write a function to convert radians into degrees.\n    '''\n    return radian/math.pi*180\ndef get_intersection_area(polygon1, polygon2):\n    '''\n    Write a function to calculate the intersection area of two 2-dimensional polygons.\n    '''\n    if polygon1.is_empty():\n        raise ValueError(\"Polygon 1 is empty.\")\n    if polygon2.is_empty():\n        raise ValueError(\"Polygon 2 is empty.\")\n    if polygon1.get_area() == 0:\n        raise ValueError(\"Polygon 1 is empty.\")\n    if polygon2.get_area() == 0:\n        raise ValueError(\"Polygon 2 is empty.\")\n    if polygon1.get_area() > polygon2.get_area():\n        polygon1, polygon2 = polygon2, polygon1\n    return polygon1.get_area()*polygon2.get_area()/math.gcd(polygon1.get_area(), polygon2.get_area())\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    return degree*(3.14159*180/360)\ndef deg_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    return degree*(3.14159*180/360)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef num_to_radian(num):\n    '''\n    Convert a number from a string to radians.\n    '''\n    return radian_degree(int(num))\ndef degree_to_num(degree):\n    '''\n    Convert a degree from radians to number.\n    '''\n    return degree * 180/math.pi\ndef deg_to_degree(degree):\n    '''\n    Convert a degree from radians to degrees.\n    '''\n    return degree * 180/math.pi\ndef distance_between_two_points(point_a, point_b):\n    '''\n    Compute the distance between two points on the map.\n    '''\n    return math.sqrt((point_a[0] - point_b[0])**2 + (point_a[1] - point_b[1])**2)\ndef get_north(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_south(origin, point):\n    '''\n    Compute the previous point in the path given the origin point and the destination point.\n    '''\n    return origin - [(origin[0] + point[0], origin[1] + point[1])]\ndef get_west(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] - point[1])]\ndef get_east(origin, point):\n    '''\n    Compute the previous point in the path given the origin point and the destination point.\n    '''\n    return origin - [(origin[0] + point[0], origin[1] - point[1])]\ndef get_up(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] - point[0], origin[1] - point[1])]\ndef get_down(origin, point):\n    '''\n    Compute the previous point in the path given the origin point and the destination point.\n    '''\n    return origin - [(origin[0] - point[0], origin[1] - point[1])]\ndef get_pos(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_nearest_point(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_nearest_point_on_path(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_nearest_point_on_path_on_map(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_distance(origin, point):\n    '''\n    Compute the distance between two points on the map.\n    '''\n    return distance_between_two_points(origin, point)\ndef get_nearest_point_on_path_on_map_on_map(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_nearest_point_on_path_on_map_on_map_on_map(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_path(origin, point):\n    '''\n    Compute the path between two points on the map.\n    '''\n    return [(origin[0] + point[0], origin[1] + point[1])]\ndef get_path_on_map(origin, point):\n    '''\n    Compute the path between two points on the map.\n    '''\n    return [(origin[0] + point[0], origin[1] + point[1])]\ndef get_nearest_point_on_path_on_map_on_map_on_map(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_nearest_point_on_path_on_map_on_map_on_map_on_map(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_distance_on_path(origin, point):\n    '''\n    Compute the distance between two points on the map.\n    '''\n    return distance_between_two_points(origin, point)\ndef get_nearest_point_on_path_on_map_on_map_on_map(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_distance_on_path_on_map(origin, point):\n    '''\n    Compute the distance between two points on the map.\n    '''\n    return distance_between_two_points(origin, point)\ndef get_nearest_point_on_path(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_nearest_point_on_path_on_map(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_distance_on_path_on_map_on_map(origin, point):\n    '''\n    Compute the distance between two points on the map.\n    '''\n    return distance_between_two_points(origin, point)\ndef get_nearest_point_on_path_on_map_on_map_on_map(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1])]\ndef get_path_on_map_on_map_on_map_on_map_on_map_on_map(origin, point):\n    '''\n    Compute the path between two points on the map.\n    '''\n    return [(origin[0] + point[0], origin[1] + point[1])]\ndef get_path_on_map(origin, point):\n    '''\n    Compute the path between two points on the map.\n    '''\n    return [(origin[0] + point[0], origin[1] + point[1])]\ndef get_nearest_point_on_path_on_map_on_map(origin, point):\n    '''\n    Compute the next point in the path given the origin point and the destination point.\n    '''\n    return origin + [(origin[0] + point[0], origin[1] + point[1]"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literal = re.compile(pattern)\n    #re.match() will return the matched text, but the match() will return the unmatched match.\n    start = literal.search(text).start()\n    end = literal.search(text).end()\n    return (text[start:end], start, end)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    sub = pattern.search(text)\n    if sub is None:\n        return None\n    else:\n        match = sub.group()\n        return match\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # base case: empty string\n    if text.strip() == '':\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    length = len(text)\n    index = 0\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substr = re.findall(pattern, text)\n    if len(substr) > 1:\n        return substr[1], substr[0].find('\\n')\n    elif len(substr) == 0:\n        return '', 0\n    elif len(substr) == 1:\n        return substr[0], 0\n    else:\n        return '', None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #regex = r'\\w+'\n    #pattern = r'\\w+'\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match is not None:\n        substring = match.group(0)\n        index = match.start()\n        end = match.end()\n        return substring, index, end\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # First, create the list of pattern patterns\n    pattern_list = []\n    if type(pattern) == str:\n        pattern_list.append(pattern)\n    elif type(pattern) == list:\n        pattern_list.extend(pattern)\n    # Now, add each pattern to the list\n    for pattern in pattern_list:\n        pattern = re.compile(pattern)\n        if pattern.search(text)!= None:\n            start = pattern.search(text).start()\n            end = pattern.search(text).end()\n            yield start, end, pattern\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # <---Converting pattern to a regular expression--->\n    # Text = 'This is a Python script that takes arguments of day 1.py and calls another one.'\n    # pattern = 'Hello'\n    # In this case the pattern is 'Hello.'\n    # If it's not a pattern, the return value is just the string itself, which is what we want.\n    # If it's not a pattern, the return value is the index at which the pattern starts.\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.finditer(pattern, text)\n    result = []\n    start = 0\n    end = 0\n    for match in match:\n        result.append(match.group())\n        end = match.end()\n    return result, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text_index = 0\n    index = 0\n    max_match = 0\n    min_match = 100\n    start = -1\n    end = -1\n    \n    for char in text:\n        if char in pattern:\n            if len(pattern) < max_match:\n                max_match = len(pattern)\n            if len(pattern) > min_match:\n                min_match = len(pattern)\n            if start == -1:\n                start = index\n                end = index\n            elif index < start:\n                start = index\n            elif index > end:\n                end = index\n            index += 1\n    return start, end, max_match, min_match\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1 + 2 + 3 + 4 + 5\n    elif n == 3:\n        return 2 + 3 + 4 + 5 + 6\n    elif n == 4:\n        return 3 + 4 + 5 + 6 + 7\n    elif n == 5:\n        return 4 + 5 + 6 + 7 + 8 + 9 + 10\n    elif n == 6:\n        return 5 + 6 + 7 + 8 + 9 + 10 + 11\n    elif n == 7:\n        return 6 + 7 + 8 + 9 + 10 + 11 + 12\n    elif n == 8:\n        return 7 + 8 + 9 + 10 + 11 + 12 + 13\n    elif n == 9:\n        return 8 + 9 + 10 + 11 + 12 + 13 + 14\n    elif n == 10:\n        return 9 + 10 + 11 + 12 + 13 + 14 + 15\n    elif n == 11:\n        return 10 + 11 + 12 + 13 + 14 + 15 + 16\n    elif n == 12:\n        return 11 + 12 + 13 + 14 + 15 + 16 + 17\n    elif n == 13:\n        return 12 + 13 + 14 + 15 + 16 + 17 + 18\n    elif n == 14:\n        return 13 + 14 + 15 + 16 + 17 + 18 + 19\n    elif n == 15:\n        return 14 + 15 + 16 + 17 + 18 + 19 + 20\n    elif n == 16:\n        return 15 + 16 + 17 + 18 + 19 + 20 + 21\n    elif n == 17:\n        return 16 + 17 + 18 + 19 + 20 + 21 + 22\n    elif n == 18:\n        return 17 + 18 + 19 + 20 + 21 + 22 + 23\n    elif n == 19:\n        return 18 + 19 + 20 + 21 + 22 + 23 + 24\n    elif n == 20:\n        return 19 + 20 + 21 + 22 + 23 + 24 + 25\n    elif n == 21:\n        return 20 + 21 + 22 + 23 + 24 + 25 + 26\n    elif n == 22:\n        return 21 + 22 + 23 + 24 + 25 + 26 + 27\n    elif n == 23:\n        return 22 + 23 + 24 + 25 + 26 + 27 + 28\n    elif n == 24:\n        return 23 + 24 + 25 + 26 + 27 + 28 + 29\n    elif n == 25:\n        return 24 + 25 + 26 + 27 + 28 + 29 + 30\n    elif n == 26:\n        return 25 + 26 + 27 + 28 + 29 + 30 + 31\n    elif n == 27:\n        return 26 + 27 + 28 + 29 + 30 + 31 + 32\n    elif n == 28:\n        return 27 + 28 + 29 + 30 + 31 + 32 + 33\n    elif n == 29:\n        return 28 + 29 + 30 + 31 + 32 + 33 + 34\n    elif n == 30:\n        return 29 + 30 + 31 + 32 + 33 + 34 + 35\n    elif n == 31:\n        return 30 + 31 + 32 + 33 + 34 + 35 + 36\n    elif n == 32:\n        return 31 + 32 + 33 + 34 + 35 + 36 + 37\n    elif n == 33:\n        return 32 + 33 + 34 + 35 + 36 + 37 + 38\n    elif n == 34:\n        return 33 + 34 + 35 + 36 + 37 + 38 + 39\n    elif n == 35:\n        return 34 + 35 + 36 + 37 + 38 + 39 + 40\n    elif n == 36:\n        return 35 + 36 + 37 + 38 + 39 + 40 + 41\n    elif n == 37:\n        return 36 + 37 + 38 + 39 + 40 + 41 + 42\n    elif n == 38:\n        return 37 + 38 + 39 + 40 + 41 + 42 + 43\n    elif n == 39:\n        return 38 + 39 + 40 + 41 + 42 + 43 + 44\n    elif n == 40:\n        return 39 + 40 + 41 + 42 + 43 + 44 + 45\n    elif n == 41:\n        return 40 + 41 + 42 + 43 + 44 + 45 + 46\n    elif n == 42:\n        return 41 + 42 + 43 + 44 + 45 + 46 + 47\n    elif n == 43:\n        return 42 + 43 + 44 + 45 + 46 + 47 + 48\n    elif n == 44:\n        return 43 + 44 + 45 + 46 + 47 + 48 + 49\n    elif n == 45:\n        return 44 + 45 + 46 + 47 + 48 + 49 + 50\n    elif n == 46:\n        return 45 + 46 + 47 + 48 + 49 + 50 + 51\n    elif n == 47:\n        return 46 + 47 + 48 + 49 + 50 + 51 + 52\n    elif n == 48:\n        return 47 + 48 + 49 + 50 + 51 + 52 + 53\n    elif n == 49:\n        return 48 + 49 + 50 + 51 + 52 + 53 + 54\n    elif n == 50:\n        return 49 + 50 + 51 + 52 + 53 + 54 + 55\n    elif n == 51:\n        return 50 + 51 + 52 + 53 + 54 + 55 + 56\n    elif n == 52:\n        return 51 + 52 + 53 + 54 + 55 + 56 + 57\n    elif n == 53:\n        return 52 + 53 + 54 + 55 + 56 + 57 + 58\n    elif n == 54:\n        return 53 + 54 + 55 + 56 + 57 + 58 + 59\n    elif n == 55:\n        return 54 + 55 + 56 + 57 + 58 + 59 + 60\n    elif n == 56:\n        return 55 + 56 + 57 + 58 + 59 + 60 + 61\n    elif n == 57:\n        return 56 + 57 + 58 + 59 + 60 + 61 + 62\n    elif n == 58:\n        return 57 + 58 + 59 + 60 + 61 + 62 + 63\n    elif n == 59:\n        return 58 + 59 + 60 + 61 + 62 + 63 + 64\n    elif n == 60:\n        return 59 + 60 + 61 + 62 + 63 + 64 + 65\n    elif n == 61:\n        return 60 + 61 + 62 + 63 + 64 + 65 + 66\n    elif n == 62:\n        return 61 + 62 + 63 + 64 + 65 + 66 + 67\n    elif n == 63:\n        return 62 + 63 + 64 + 65 + 66 + 67 + 68\n    elif n == 64:\n        return 63 + 64 + 65 + 66 + 67 + 68 + 69\n    elif n == 65:\n        return 64 + 65 + 66 + 67 + 68 + 69 + 70\n    elif n == 66:\n        return 65 + 66 + 67 + 68 + 69 + 70 + 71\n    elif n == 67:\n        return 66 + 67 + 68 + 69 + 70 + 71 + 72\n    elif n == 68:\n        return 67 + 68 + 69 + 70 + 71 + 72 + 73\n    elif n == 69:\n        return 68 + 69 + 70 + 71 + 72 + 73 + 74\n    elif n == 70:\n        return 69 + 70 + 71 + 72 + 73 + 74 + 75\n    elif n == 71:\n        return 70 + 71 + 72 + 73 + 74 + 75 + 76\n    elif n == 72:\n        return 71 + 72 + 73 + 74 + 75 + 76 + 77\n    elif n == 73:\n        return 72 + 73 + 74 + 75 + 76 + 77 + 78\n    elif n == 74:\n        return 73 + 74 + 75 + 76 + 77 + 78 + 79\n    elif n == 75:\n        return 74 + 75 + 76 + 77 + 78 + 79 + 80\n    elif n == 76:\n        return 75 + 76 + 77 + 78 + 79 + 80 + 81\n    elif n == 77:\n        return 76 + 77 + 78 + 79 + 80 + 81 + 82\n    elif n == 78:\n        return 77 + 78 + 79 + 80 + 81 + 82 + 83\n    elif n == 79:\n        return 78 + 79 + 80 + 81 + 82 + 83 + 84\n    elif n == 80:\n        return 79 + 80 + 81 + 82 + 83 + 84 + 85\n    elif n == 81:\n        return 80 + 81 + 82 + 83 + 84 + 85 + 86\n    elif n == 82:\n        return 81 + 82 + 83 + 84 + 85 + 86 + 87\n    elif n == 83:\n        return 82 + 83 + 84 + 85 + 86 + 87 + 88\n    elif n == 84:\n        return 83 + 84 + 85 + 86 + 87 + 88 + 89\n    elif n == 85:\n        return 84 + 85 + 8"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # if n<2:\n    #     print(n)\n    # else:\n    #     print(int(n/2)+1)\n    \n    if n%2==0:\n        print(int(n/2)+1)\n    else:\n        print(int(n/2)+1)\n    \n    "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    nums = []\n    for i in range(0,n+1):\n        nums.append(i)\n    return nums[n % len(nums)]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if (n==0): \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return (1+bell_Number(n-1))\nprint(bell_Number(10)"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    x = n\n    for i in range(x,0,-1):\n        if n%i == 0:\n            return i\n    return 0\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    number=1\n    for i in range(1, n+1):\n        number = number*(i+1)\n    return number\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell(n):\n        return ( (n+1) * (n+1) + 1) // 2\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    nth_bell = (n*(n+1))//2\n    print(nth_bell)\n    return nth_bell\n    # return (n*(n+1))//2\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def nth_bell(n):\n        if n==0:\n            return 1\n        else:\n            return nth_bell(n-1)+nth_bell(n-1)+nth_bell(n-1)\n    return nth_bell(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    arr = []\n    for i in range(0,n+1):\n        arr.append(math.factorial(i))\n    for i in range(0,math.factorial(n)):\n        if (i+1) % n == 0:\n            arr.pop()\n    return arr[n-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list_size = len(list1)\n    kth_element_to_remove = list1[list_size - L]\n    list1.remove(kth_element_to_remove)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L.pop(L.index(L[-1])+1)\n    \n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1)==0:\n        return []\n    else:\n        return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    if len(list1)<=L:\n        return []\n    else:\n        temp = []\n        for i in range(len(list1)):\n            temp.append(list1.pop(i))\n        return temp\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n    temp_list = []\n    for i in list1:\n        temp_list.append(i)\n        temp_list.pop(len(temp_list)-L)\n    return temp_list\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n    return list1\n    #end of your code\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    def remove_kth_element_2(list1, L, k):\n        '''\n        Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n        '''\n        \n        # Base Case\n        if len(list1) < k:\n            return None\n        \n        # 1. Store the value of list1[1]\n        val = list1[1]\n        # 2. Remove the value of list1[1]\n        list1[1] = list1[0]\n        # 3. Return the updated list\n        return list1\n        \n    \n    return remove_kth_element_2(list1, L, k)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    index = len(list1) - 1\n    L.pop(index)\n    print(list1)\n    return L\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # find the k'th element\n    k = len(list1) - 1\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth_list = []\n    for row in test_list:\n        max_of_nth_list.append(max(row))\n    return max_of_nth_list[N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = test_list[0][N-1]\n    for i in range(1, N):\n        if test_list[i][N-1] > max:\n            max = test_list[i][N-1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = test_list[0][N - 1]\n    for i in test_list:\n        if i[N - 1] > max_num:\n            max_num = i[N - 1]\n    return max_num\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = test_list[0][N]\n    for i in range(1, len(test_list)):\n        result = max(result, test_list[i][N])\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # NOTE: Input/Output Example\n    #\n    # The first line contains an integer T, denoting the number of test cases. Then T lines follow. Each line contains an integer N, denoting the size of matrix.\n    #\n    # Output Format\n    #\n    # For each test case, print the maximum of the matrix.\n    #\n    # Constraints\n    #\n    # 1 <= T <= 10^5\n    # 0 <= N <= 10^5\n    #\n    # Sample Input\n    #\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    # 9\n    # 10\n    # 11\n    #\n    # Sample Output\n    #\n    # 1\n    # 5\n    #\n    \n    import sys\n    sys.setrecursionlimit(10 ** 9)\n    class Matrix:\n        def __init__(self, rows, cols, data):\n            self.rows = rows\n            self.cols = cols\n            self.data = data\n            self.n = len(data)\n        def __str__(self):\n            result = []\n            for row in range(self.rows):\n                row_data = []\n                for col in range(self.cols):\n                    row_data.append(str(self.data[row][col]))\n                result.append(' '.join(row_data))\n            return '\\n'.join(result)\n    def findMax(self, x):\n        '''\n        Returns the max of the given matrix.\n        '''\n        # NOTE: input/output example\n        #\n        # The first line contains an integer T, denoting the number of test cases. Then T lines follow. Each line contains an integer N, denoting the size of matrix.\n        #\n        # Output Format\n        #\n        # For each test case, print the maximum of the matrix.\n        #\n        # Constraints\n        #\n        # 1 <= T <= 10^5\n        # 0 <= N <= 10^5\n        #\n        # Sample Input\n        #\n        # 1\n        # 2\n        # 3\n        # 4\n        # 5\n        # 6\n        # 7\n        # 8\n        # 9\n        # 10\n        # 11\n        #\n        # Sample Output\n        #\n        # 5\n        #\n        def max_of_nth(test_list, N):\n            matrix = Matrix(N, N, [0] * N)\n            for i in range(N):\n                for j in range(N):\n                    matrix.data[i][j] = test_list[i][j]\n            print(matrix)\n            return max(matrix.data)\n        return max_of_nth(self.data, self.n)\n    \n    def min_of_nth(test_list, N):\n        '''\n        Returns the min of the given matrix.\n        '''\n        # NOTE: Input/Output Example\n        #\n        # The first line contains an integer T, denoting the number of test cases. Then T lines follow. Each line contains an integer N, denoting the size of matrix.\n        #\n        # Output Format\n        #\n        # For each test case, print the minimum of the matrix.\n        #\n        # Constraints\n        #\n        # 1 <= T <= 10^5\n        # 0 <= N <= 10^5\n        #\n        # Sample Input\n        #\n        # 1\n        # 2\n        # 3\n        # 4\n        # 5\n        # 6\n        # 7\n        # 8\n        # 9\n        # 10\n        # 11\n        #\n        # Sample Output\n        #\n        # 1\n        # 3\n        #\n        \n        import sys\n        sys.setrecursionlimit(10 ** 9)\n        class Matrix:\n            def __init__(self, rows, cols, data):\n                self.rows = rows\n                self.cols = cols\n                self.data = data\n                self.n = len(data)\n            def __str__(self):\n                result = []\n                for row in range(self.rows):\n                    row_data = []\n                    for col in range(self.cols):\n                        row_data.append(str(self.data[row][col]))\n                    result.append(' '.join(row_data))\n                return '\\n'.join(result)\n        def findMin(self, x):\n            '''\n            Returns the min of the given matrix.\n            '''\n            # NOTE: input/output example\n            #\n            # The first line contains an integer T, denoting the number of test cases. Then T lines follow. Each line contains an integer N, denoting the size of matrix.\n            #\n            # Output Format\n            #\n            # For each test case, print the minimum of the matrix.\n            #\n            # Constraints\n            #\n            # 1 <= T <= 10^5\n            # 0 <= N <= 10^5\n            #\n            # Sample Input\n            #\n            # 1\n            # 2\n            # 3\n            # 4\n            # 5\n            # 6\n            # 7\n            # 8\n            # 9\n            # 10\n            # 11\n            #\n            # Sample Output\n            #\n            # 1\n            # 3\n            #\n            \n            matrix = Matrix(self.rows, self.cols, [0] * self.rows)\n            for i in range(self.rows):\n                for j in range(self.cols):\n                    matrix.data[i][j] = test_list[i][j]\n            print(matrix)\n            return min(matrix.data)\n        return findMin(self, x)\n    \n    def sum_of_nth(test_list, N):\n        '''\n        Returns the sum of the given matrix.\n        '''\n        # NOTE: Input/Output Example\n        #\n        # The first line contains an integer T, denoting the number of test cases. Then T lines follow. Each line contains an integer N, denoting the size of matrix.\n        #\n        # Output Format\n        #\n        # For each test case, print the sum of the matrix.\n        #\n        # Constraints\n        #\n        # 1 <= T <= 10^5\n        # 0 <= N <= 10^5\n        #\n        # Sample Input\n        #\n        # 1\n        # 2\n        # 3\n        # 4\n        # 5\n        # 6\n        # 7\n        # 8\n        # 9\n        # 10\n        # 11\n        #\n        # Sample Output\n        #\n        # 16\n        #\n        sum = 0\n        for row in range(N):\n            sum += test_list[row][0]\n        return sum\n    \n    def all_of_nth(test_list, N):\n        '''\n        Returns the sum of the given matrix.\n        '''\n        # NOTE: Input/Output Example\n        #\n        # The first line contains an integer T, denoting the number of test cases. Then T lines follow. Each line contains an integer N, denoting the size of matrix.\n        #\n        # Output Format\n        #\n        # For each test case, print the sum of the matrix.\n        #\n        # Constraints\n        #\n        # 1 <= T <= 10^5\n        # 0 <= N <= 10^5\n        #\n        # Sample Input\n        #\n        # 1\n        # 2\n        # 3\n        # 4\n        # 5\n        # 6\n        # 7\n        # 8\n        # 9\n        # 10\n        # 11\n        #\n        # Sample Output\n        #\n        # 16\n        #\n        sum = 0\n        for row in range(N):\n            row = test_list[row][0]\n            sum += row\n        return sum\n    \n    def most_of_nth(test_list, N):\n        '''\n        Returns the sum of the given matrix.\n        '''\n        # NOTE: Input/Output Example\n        #\n        # The first line contains an integer T, denoting the number of test cases. Then T lines follow. Each line contains an integer N, denoting the size of matrix.\n        #\n        # Output Format\n        #\n        # For each test case, print the sum of the matrix.\n        #\n        # Constraints\n        #\n        # 1 <= T <= 10^5\n        # 0 <= N <= 10^5\n        #\n        # Sample Inpu"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    lst = []\n    for x in test_list:\n        lst.append(list(x))\n    \n    return max(lst[N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][0]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    assert len(test_list) > N, \"Matrix does not have enough rows\"\n    \n    for row in test_list:\n        assert len(row) > 0, \"Matrix does not have any elements\"\n        \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == 1:\n                test_list[i][j] = -1\n    \n    return max(test_list[0][N-1:])"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    i = 0\n    for i in range(len(test_list)):\n        row = test_list[i]\n        for j in range(len(row)):\n            if j == N:\n                return row[j]\n    return None\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # note that the indices of the sublists need to be adjusted accordingly\n    # remember to use the lambda operator (x) for the indices\n    # (the lambda means that you are using a function in Python)\n    return list(map(lambda x,y: [y[0],x[1]],lst,lst[1:]))\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_two_lists(lst_1, lst_2):\n        '''\n        Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n        '''\n        result = []\n        for i in range(len(lst_1)):\n            result.append([])\n            for j in range(len(lst_2)):\n                if lst_1[i] == lst_2[j]:\n                    result[i].append(lst_1[i])\n                else:\n                    result[i].append(lst_2[j])\n        return result\n    \n    result = []\n    for i in range(len(lst)):\n        result.append([])\n        for j in range(len(lst)):\n            result[i].append(lst[i][0])\n            result[i].append(lst[j][1])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_two_lists(lst1,lst2):\n        i = 0\n        while i<len(lst1):\n            if lst1[i]==lst2[i]:\n                i+=1\n            else:\n                lst1[i] = lst2[i]\n                i+=1\n        lst1.sort()\n    lst1 = lst[0]\n    lst2 = lst[1]\n    lst = []\n    if len(lst1)>len(lst2):\n        lst = lst1\n        lst.extend(lst2)\n    else:\n        lst = lst2\n        lst.extend(lst1)\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # create an empty list\n    out = []\n    # go through the lists\n    for i in lst:\n        # append each item to the empty list\n        out.append(i[0])\n        # append each item to the empty list\n        out.append(i[1])\n    # return the list\n    return out\n    \n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pas"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Step 1: Sort the lists\n    lst.sort(key = lambda x: x[0])\n    # Step 2: Split the lists into two lists\n    first_list, second_list = [], []\n    for i in range(len(lst)):\n        first_list.append(lst[i][0])\n        second_list.append(lst[i][1])\n    # Step 3: Return the two lists\n    return first_list, second_list\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new = []\n    for i in lst:\n        new.append([i[0][0], i[0][1]])\n    return new\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for x in test_list:\n        total = total + x\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for element in test_list:\n        cummulative_sum = cummulative_sum + element\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for element in test_list:\n        sum += element\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(t[1] for t in test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n    \ndef new_sum(test_list):\n    '''\n    Write a function to find the sum of the last element of a tuple list.\n    '''\n    return test_list[-1]\n    \ndef find_index(test_list, value):\n    '''\n    Write a function to find the index of the first occurrence of a given value in the tuple list.\n    '''\n    index = 0\n    for i in range(len(test_list)):\n        if test_list[i] == value:\n            return index\n        index += 1\n    return index\n    \ndef find_index_string(test_list, value):\n    '''\n    Write a function to find the index of the first occurrence of a given value in the tuple list.\n    '''\n    index = 0\n    for i in range(len(test_list)):\n        if test_list[i] == value:\n            return index\n        index += 1\n    return index\n    \ndef reverse_string(string):\n    '''\n    Write a function that reverses the contents of the string in the format (reversed string).\n    '''\n    reverse_string = \"\"\n    for i in range(len(string)):\n        reverse_string += string[len(string)-1-i]\n    return reverse_string\n    \ndef reverse_string_multiply(string):\n    '''\n    Write a function that reverses the contents of the string in the format (reversed string).\n    '''\n    return string[::-1]\n    \ndef length_string(string):\n    '''\n    Write a function that returns the length of the string in the format (len of string).\n    '''\n    return len(string)\n    \ndef swap(string1, string2):\n    '''\n    Write a function that returns the string in the format (reversed string) where the first and second characters are swapped.\n    '''\n    return string2 + string1\n    \ndef swap_string(string1, string2):\n    '''\n    Write a function that swaps the first and second characters of the string in the format (reversed string).\n    '''\n    string1 = string2[::-1]\n    return string1\n    \ndef remove(string1, string2):\n    '''\n    Write a function that returns the string in the format (reversed string) where the first and second characters are removed.\n    '''\n    return string2[1:-1]\n    \ndef remove_string(string1, string2):\n    '''\n    Write a function that returns the string in the format (reversed string) where the first and second characters are removed.\n    '''\n    return string2[1:len(string1)]\n    \ndef join_string(list_of_strings):\n    '''\n    Write a function that joins the string in the format (reversed string).\n    '''\n    return \"\".join(list_of_strings)\n    \ndef reverse_string_join(list_of_strings):\n    '''\n    Write a function that joins the string in the format (reversed string).\n    '''\n    return \"\".join(reversed(list_of_strings))\n    \ndef string_list(list_of_strings):\n    '''\n    Write a function that returns the string list in the format (reversed string).\n    '''\n    return list(reversed(list_of_strings))\n    \ndef string_list_join(list_of_strings):\n    '''\n    Write a function that returns the string list in the format (reversed string).\n    '''\n    return \"\".join(list_of_strings)\n    \ndef count_occurences(string, list_of_strings):\n    '''\n    Write a function that returns the number of occurrences of a given string in the list of strings.\n    '''\n    return len(list(filter(lambda x: x == string, list_of_strings)))\n    \ndef string_list_join_counter(list_of_strings):\n    '''\n    Write a function that returns the string list in the format (reversed string).\n    '''\n    return \"\".join(list(filter(lambda x: x == string, list_of_strings)))\n    \ndef index_of_first_occurrence(string, list_of_strings):\n    '''\n    Write a function that returns the index of the first occurrence of a given string in the list of strings.\n    '''\n    return list_of_strings.index(string)\n    \ndef index_of_first_occurrence_string(string, list_of_strings):\n    '''\n    Write a function that returns the index of the first occurrence of a given string in the list of strings.\n    '''\n    return list_of_strings.index(string)\n    \ndef reversed_string(string):\n    '''\n    Write a function that reverses the contents of the string in the format (reversed string).\n    '''\n    return string[::-1]\n    \ndef remove_words(string, list_of_words):\n    '''\n    Write a function that returns the string in the format (reversed string) where the first and second words are removed.\n    '''\n    return string[1:-1]\n    \ndef remove_words_word(string, list_of_words):\n    '''\n    Write a function that returns the string in the format (reversed string) where the first and second words are removed.\n    '''\n    return string[1:len(string)-1]\n    \ndef count_substring_count(string, list_of_strings):\n    '''\n    Write a function that returns the number of occurrences of a given substring in the list of strings.\n    '''\n    return len(list(filter(lambda x: x == string, list_of_strings)))\n    \ndef check_string_only(string):\n    '''\n    Write a function that returns the string only if it is a string in the list.\n    '''\n    return string == string\n    \ndef check_string_only_count(string):\n    '''\n    Write a function that returns the string only if it is a string in the list.\n    '''\n    return string == string\n    \ndef count_string_count(string):\n    '''\n    Write a function that returns the number of occurrences of a given substring in the string.\n    '''\n    return string.count(string)\n    \ndef contains_string(string, list_of_strings):\n    '''\n    Write a function that returns true if a given string is a substring of a list of strings.\n    '''\n    for s in list_of_strings:\n        if string == s:\n            return True\n    return False\n    \ndef contains_string_list(list_of_strings):\n    '''\n    Write a function that returns true if a given string is a substring of a list of strings.\n    '''\n    return any(string == s for s in list_of_strings)\n    \ndef count_string_list(list_of_strings):\n    '''\n    Write a function that returns the number of occurrences of a given substring in the list of strings.\n    '''\n    return sum(list(filter(lambda x: string == x, list_of_strings)))\n    \ndef is_string_in_list(list_of_strings, string):\n    '''\n    Write a function that returns true if a given string is a substring of a list of strings.\n    '''\n    return string in list_of_strings\n    \ndef is_string_in_list_count(list_of_strings, string):\n    '''\n    Write a function that returns true if a given string is a substring of a list of strings.\n    '''\n    return string in list_of_strings\n    \ndef is_string_in_list_count_list(list_of_strings, string):\n    '''\n    Write a function that returns true if a given string is a substring of a list of strings.\n    '''\n    return string in list_of_strings[1:]\n    \ndef is_string_in_list_list(list_of_strings, string):\n    '''\n    Write a function that returns true if a given string is a substring of a list of strings.\n    '''\n    return strin"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    for i in range(len(test_list)):\n        test_list[i] += test_list[i+1]\n    return test_list[-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # write your code here\n    return [sum(n) / len(n) for n in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for nums_tuple in nums:\n        nums_tuple = list(nums_tuple)\n        nums_tuple.sort()\n        total = 0\n        for item in nums_tuple:\n            total += item\n        average.append(total/len(nums_tuple))\n    return average\n    \n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for a,b in nums:\n        total.append(a+b)\n    return total/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    return [sum(t) / len(t) for t in zip(*nums)]"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # your code goes here\n    return [tuple for row in nums for tuple in row]\n    # hint: use tuple comprehension to create a list from the list of tuples\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(num) / len(num))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # your code goes here\n    return [sum(nums[i])/len(nums[i]) for i in range(len(nums))]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    return sum(nums)/len(nums)"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num1, num2 in nums:\n        result.append((num1+num2)/2)\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = list(map(lambda x,y: (x[0]-y[0])%(y[1]-x[1]), test_tup1, test_tup2))\n    print(mod)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #Write your code here\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Tuples of different length')\n    else:\n        mod = 0\n        for x in range(len(test_tup1)):\n            mod += test_tup1[x] * test_tup2[x]\n        return mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup1 = 0\n    modulo_tup2 = 0\n    \n    for i in range(len(test_tup1)):\n        modulo_tup1 += test_tup1[i]\n    \n    for i in range(len(test_tup2)):\n        modulo_tup2 += test_tup2[i]\n    \n    return modulo_tup1, modulo_tup2\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(map(lambda x, y: x%y, test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # take input from user\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    print(\"\\n\")\n    print(\"Element wise modulo is :\")\n    print(test_tup1)\n    print(test_tup2)\n    \n    # finding the modulo\n    mod = 0\n    for i in range(l1):\n        if test_tup1[i][0] % test_tup2[i][0] == 0:\n            mod += test_tup1[i][0]\n    \n    return mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda tup: tup[0] % tup[1], zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(f\"The modulo of the tuples {test_tup1} and {test_tup2} is {tuple_modulo(test_tup1, test_tup2)}.\")\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check for all steps\n    for i in range(steps):\n        # Check for each point\n        for j in range(d):\n            # If point is on the right side of a grid, check if the point is inside the grid\n            if j == d - 1:\n                # Check if point is inside the grid\n                if i == 0 or steps - 1!= i:\n                    # If not, then check if point is the origin\n                    if steps - 1!= i:\n                        return False\n            # If point is on the left side of a grid, check if the point is inside the grid\n            elif j == 0:\n                # Check if point is inside the grid\n                if i == 0 or steps - 1!= i:\n                    # If not, then check if point is the origin\n                    if steps - 1!= i:\n                        return False\n            else:\n                # If point is in the grid, check if point is on the left side of it\n                if j == d - 1:\n                    # Check if point is on the grid\n                    if i == 0 or steps - 1!= i:\n                        return False\n                else:\n                    # If point is not in the grid, check if point is on the right side of it\n                    if j == d - 1:\n                        return False\n    # If the function returned the desired number of jumps, return true\n    return True\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check the number of jumps\n    jump_steps = 0\n    for step in steps:\n        if step[0] <= d and step[1] <= d:\n            jump_steps += 1\n    \n    return jump_steps \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    f = lambda x: 0 if x == 0 else x - 1\n    # d = int(d)\n    # j = int(steps)\n    if d == 0:\n        return J\n    if d == 1:\n        return 1\n    j = f(steps) + f(steps - d) + f(steps - 2*d)\n    return j \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Write your code here\n    if steps == 0:\n        return 0\n    if d == 0:\n        return 1\n    return min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d)) + 1"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # YOUR CODE GOES HERE\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d <= 0):\n        print(\"Invalid Input\")\n    else:\n        i = 0\n        j = 0\n        count = 0\n        while i < len(steps) - 1:\n            j = 0\n            while j < len(steps) - 1:\n                if steps[i + j] == steps[i] + d:\n                    count = count + 1\n                j = j + 1\n            i = i + 1\n        print(count)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: return 1\n    if steps < 0: return -1\n    if d == 0: return 0\n    if d < 0: return -1\n    if steps == 0: return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump = 0\n    for i in range(steps):\n        curr_point = (0, 0)\n        for x in range(steps):\n            if d[x][0] == d[x][1] + 1:\n                curr_point = (x, 1)\n        if curr_point == (d[0], d[1] + 1):\n            jump += 1\n    return jump"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == (1, 0): return 0\n    elif d == (0, 1): return 1\n    elif d == (0, -1): return 1\n    elif d == (-1, 0): return 1\n    elif d == (-1, -1): return 2\n    else:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # increment the step size\n    d += 1\n    steps += 1\n    # check if the current point is not the goal point\n    if d == len(steps):\n        return steps\n    else:\n        # if the point is on the line then return the number of jumps\n        if d >= len(steps) or steps[d]!= steps[d-1]:\n            return steps\n        else:\n            # if the point is on the line then return the number of jumps from point (d+1, 0) to the current point\n            if d + 1 < len(steps) and steps[d + 1]!= steps[d + 1 - 1] and steps[d + 1]!= steps[d + 1 - 2]:\n                return steps\n            else:\n                # if the point is not on the line return the number of jumps from point (d+1, 1) to the current point\n                if d + 1 < len(steps) and steps[d + 2]!= steps[d + 2 - 1] and steps[d + 2]!= steps[d + 2 - 2]:\n                    return steps\n                else:\n                    # if the point is not on the line return the number of jumps from point (d, 1) to the current point\n                    if steps[d]!= steps[d - 1]:\n                        return steps\n                    else:\n                        # if the point is not on the line return the number of jumps from point (d, 2) to the current point\n                        if d + 2 < len(steps) and steps[d + 3]!= steps[d + 3 - 1] and steps[d + 3]!= steps[d + 3 - 2]:\n                            return steps\n                        else:\n                            # if the point is not on the line return the number of jumps from point (d, 2) to the current point\n                            if steps[d]!= steps[d + 2]:\n                                return steps\n                            else:\n                                # if the point is not on the line return the number of jumps from point (d, 3) to the current point\n                                if d + 3 < len(steps) and steps[d + 4]!= steps[d + 4 - 1] and steps[d + 4]!= steps[d + 4 - 2]:\n                                    return steps\n                                else:\n                                    # if the point is not on the line return the number of jumps from point (d, 3) to the current point\n                                    return min_Jumps(steps, d + 3)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(nums1)):\n        if nums1[i] not in list1:\n            list1.append(nums1[i])\n    for i in range(len(nums2)):\n        if nums2[i] not in list2:\n            list2.append(nums2[i])\n    return list1,list2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    return list(map(lambda x: list(map(lambda y: int(y), x)), zip(nums1,nums2)))\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    if len(nums1)>0:\n        nums1.sort()\n        div_nums = [x for x in nums1 if x % 2 == 0]\n        nums2.sort()\n        div_nums2 = [x for x in nums2 if x % 2 == 0]\n        return nums1 == div_nums or nums2 == div_nums2\n    else:\n        return False\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Common way of dividing two lists\n    #It will merge lists\n    #It will assign the the 2nd element to the first element\n    #This will bring the 2nd list to the first position\n    #Then it will add the 2nd element to the end position\n    #And after the end position the 2nd element to the first position\n    #Then it will remove the second element from the list\n    def merge(nums1,nums2):\n        if len(nums1)<=1:\n            return nums2\n        if len(nums2)<=1:\n            return nums1\n        return merge(nums1[1:],nums2[1:])+[nums1[0]]+nums2[1:]\n    #We will be adding the 2nd element to the first element\n    return merge(nums1,nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [a/b for a,b in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    elif len(nums2) == 0:\n        return nums1\n    elif nums1[0] == nums2[0]:\n        return nums1\n    else:\n        max_val = max(nums1[0],nums2[0])\n        min_val = min(nums1[0],nums2[0])\n        temp_list = []\n        temp_list.append(min_val)\n        temp_list.append(max_val)\n        nums2.remove(min_val)\n        nums1.remove(max_val)\n        temp_list[0] = nums1[0]\n        temp_list[1] = nums2[0]\n        return temp_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    newlist=[]\n    for i in range(len(nums1)):\n        newlist.append(nums1[i]/nums2[i])\n    return newlist\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #write your code here\n    \n    \n    \n    #return the elements in the lists as a list\n    return nums1,nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result_list=[]\n    for i in range(len(nums1)):\n        result_list.append(nums1[i]/nums2[i])\n    return result_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l=len(nums1)\n    r=len(nums2)\n    s=[]\n    for i in range(l):\n        s.append(nums1[i]//nums2[i])\n    for i in range(r):\n        s.append(nums2[i]//nums1[i])\n    return s\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str.count('0') == 0:\n        return test_str\n    else:\n        test_str = test_str.replace('0', '6')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '8')\n        test_str = test_str.replace('6', '9')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '8')\n        test_str = test_str.replace('6', '9')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '8')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '6')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '9')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '6')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '6')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '9')\n        test_str = test_str.replace('6', '8')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '6')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '9')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '8')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '9')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '6')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '8')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '6')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '6')\n        test_str = test_str.replace('6', '8')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '9')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '9')\n        test_str = test_str.replace('6', '6')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '8')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '8')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '3')\n        test_str = test_str.replace('6', '2')\n        test_str = test_str.replace('6', '4')\n        test_str = test_str.replace('6', '6')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '0')\n        test_str = test_str.replace('6', '9')\n        test_str = test_str.replace('6', '7')\n        test_str = test_str.replace('6', '5')\n        test_str = test_str.replace('6', '1')\n        test_str = test_str.replace('6', '2'"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('$','0')\n    test_str = test_str.replace('&','1')\n    test_str = test_str.replace('%','2')\n    test_str = test_str.replace('(','3')\n    test_str = test_str.replace(')','4')\n    test_str = test_str.replace('*','5')\n    test_str = test_str.replace('+','6')\n    test_str = test_str.replace('-','7')\n    test_str = test_str.replace('.','8')\n    test_str = test_str.replace(',','9')\n    test_str = test_str.replace('_','0')\n    test_str = test_str.replace('!','1')\n    test_str = test_str.replace('?','2')\n    test_str = test_str.replace('<','3')\n    test_str = test_str.replace('>','4')\n    test_str = test_str.replace('.','5')\n    test_str = test_str.replace('-','6')\n    test_str = test_str.replace(' ','7')\n    test_str = test_str.replace('.','8')\n    test_str = test_str.replace('!','9')\n    test_str = test_str.replace('*','0')\n    test_str = test_str.replace('+','1')\n    test_str = test_str.replace('%','2')\n    test_str = test_str.replace('(','3')\n    test_str = test_str.replace(')','4')\n    test_str = test_str.replace('*','5')\n    test_str = test_str.replace('+','6')\n    test_str = test_str.replace('-','7')\n    test_str = test_str.replace('.','8')\n    test_str = test_str.replace('!','9')\n    test_str = test_str.replace('/','0')\n    test_str = test_str.replace('*','1')\n    test_str = test_str.replace('+','2')\n    test_str = test_str.replace('%','3')\n    test_str = test_str.replace('(','4')\n    test_str = test_str.replace(')','5')\n    test_str = test_str.replace('*','6')\n    test_str = test_str.replace('+','7')\n    test_str = test_str.replace('-','8')\n    test_str = test_str.replace('.','9')\n    test_str = test_str.replace(',','0')\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res = 0\n    for i in range(len(test_str)):\n        if test_str[i] == '0':\n            res += 1\n            break\n    return res + len(test_str) - 2\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in test_str:\n        if not i.isdigit():\n            new_str = new_str + i\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('1', '').replace('0', '')\n    result = ''\n    count = 0\n    for num in test_str:\n        if num == '0':\n            result += '1'\n        elif num == '1':\n            result += '0'\n        else:\n            count += 1\n            result += num\n        if count == len(test_str):\n            result += '0'\n            break\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str=''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            new_str+=test_str[i]\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('+', '1')\n    test_str = test_str.replace('-', '2')\n    test_str = test_str.replace('*', '3')\n    test_str = test_str.replace('/', '4')\n    test_str = test_str.replace('&', '5')\n    test_str = test_str.replace('(', '6')\n    test_str = test_str.replace(')', '7')\n    test_str = test_str.replace('*', '8')\n    test_str = test_str.replace('+', '9')\n    test_str = test_str.replace('-', '0')\n    test_str = test_str.replace('%', '9')\n    test_str = test_str.replace('x', '9')\n    test_str = test_str.replace('#', '9')\n    test_str = test_str.replace('D', '9')\n    test_str = test_str.replace('E', '9')\n    test_str = test_str.replace('F', '9')\n    test_str = test_str.replace('G', '9')\n    test_str = test_str.replace('H', '9')\n    test_str = test_str.replace('I', '9')\n    test_str = test_str.replace('J', '9')\n    test_str = test_str.replace('K', '9')\n    test_str = test_str.replace('L', '9')\n    test_str = test_str.replace('M', '9')\n    test_str = test_str.replace('N', '9')\n    test_str = test_str.replace('O', '9')\n    test_str = test_str.replace('P', '9')\n    test_str = test_str.replace('Q', '9')\n    test_str = test_str.replace('R', '9')\n    test_str = test_str.replace('S', '9')\n    test_str = test_str.replace('T', '9')\n    test_str = test_str.replace('U', '9')\n    test_str = test_str.replace('V', '9')\n    test_str = test_str.replace('W', '9')\n    test_str = test_str.replace('X', '9')\n    test_str = test_str.replace('Y', '9')\n    test_str = test_str.replace('Z', '9')\n    test_str = test_str.replace('0', '9')\n    test_str = test_str.replace('1', '8')\n    test_str = test_str.replace('2', '7')\n    test_str = test_str.replace('3', '6')\n    test_str = test_str.replace('4', '5')\n    test_str = test_str.replace('5', '4')\n    test_str = test_str.replace('6', '3')\n    test_str = test_str.replace('7', '2')\n    test_str = test_str.replace('8', '1')\n    test_str = test_str.replace('9', '0')\n    return test_str\n    \ndef main():\n    '''\n    Write your function here.\n    '''\n    test_str = input(\"Enter a string: \")\n    \n    test_str = test_str.replace(\" \", \"\")\n    test_str = test_str.replace(\",\", \"\")\n    test_str = test_str.replace(\".\", \"\")\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.replace(\"+\", \"\")\n    test_str = test_str.replace(\"-\", \"\")\n    test_str = test_str.replace(\"*\", \"\")\n    test_str = test_str.replace(\"/\", \"\")\n    test_str = test_str.replace(\"&\", \"\")\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.replace(\"*\", \"\")\n    test_str = test_str.replace(\"+\", \"\")\n    test_str = test_str.replace(\"-\", \"\")\n    test_str = test_str.replace(\"%\", \"\")\n    test_str = test_str.replace(\"x\", \"\")\n    test_str = test_str.replace(\"#\", \"\")\n    test_str = test_str.replace(\"D\", \"\")\n    test_str = test_str.replace(\"E\", \"\")\n    test_str = test_str.replace(\"F\", \"\")\n    test_str = test_str.replace(\"G\", \"\")\n    test_str = test_str.replace(\"H\", \"\")\n    test_str = test_str.replace(\"I\", \"\")\n    test_str = test_str.replace(\"J\", \"\")\n    test_str = test_str.replace(\"K\", \"\")\n    test_str = test_str.replace(\"L\", \"\")\n    test_str = test_str.replace(\"M\", \"\")\n    test_str = test_str.replace(\"N\", \"\")\n    test_str = test_str.replace(\"O\", \"\")\n    test_str = test_str.replace(\"P\", \"\")\n    test_str = test_str.replace(\"Q\", \"\")\n    test_str = test_str.replace(\"R\", \"\")\n    test_str = test_str.replace(\"S\", \"\")\n    test_str = test_str.replace(\"T\", \"\")\n    test_str = test_str.replace(\"U\", \"\")\n    test_str = test_str.replace(\"V\", \"\")\n    test_str = test_str.replace(\"W\", \"\")\n    test_str = test_str.replace(\"X\", \"\")\n    test_str = test_str.replace(\"Y\", \"\")\n    test_str = test_str.replace(\"Z\", \"\")\n    test_str = test_str.replace(\"0\", \"\")\n    test_str = test_str.replace(\"1\", \"\")\n    test_str = test_str.replace(\"2\", \"\")\n    test_str = test_str.replace(\"3\", \"\")\n    test_str = test_str.replace(\"4\", \"\")\n    test_str = test_str.replace(\"5\", \"\")\n    test_str = test_str.replace(\"6\", \"\")\n    test_str = test_str.replace(\"7\", \"\")\n    test_str = test_str.replace(\"8\", \"\")\n    test_str = test_str.replace(\"9\", \"\")\n    \n    test_str = test_str.replace(\"+\", \"\")\n    test_str = test_str.replace(\"-\", \"\")\n    test_str = test_str.replace(\"*\", \"\")\n    test_str = test_str.replace(\"/\", \"\")\n    test_str = test_str.replace(\"&\", \"\")\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.replace(\"+\", \"\")\n    test_str = test_str.replace(\"-\", \"\")\n    test_str = test_str.replace(\"*\", \"\")\n    test_str = test_str.replace(\"+\", \"\")\n    test_str = test_str.replace(\"-\", \"\")\n    test_str = test_str.replace(\"%\", \"\")\n    test_str = test_str.replace(\"x\", \"\")\n    test_str = test_str.replace(\"#\", \"\")\n    test_str = test_str.replace(\"D\", \"\")\n    test_str = test_str.replace(\"E\", \"\")\n    test_str = test_str.replace(\"F\", \"\")\n    test_str = test_str.replace(\"G\", \"\")\n    test_str = test_str.replace(\"H\", \"\")\n    test_str = test_str.replace(\"I\", \"\")\n    test_str = test_str.replace(\"J\", \"\")\n    test_str = test_str.replace(\"K\", \"\")\n    test"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == '':\n        return test_str\n    else:\n        for index in range(len(test_str)):\n            if test_str[index].isdigit():\n                test_str = test_str[0:index]+test_str[index+1:len(test_str)]\n        return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"-\",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\",\",\"\")\n    test_str = test_str.replace(\".\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"-\",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\".\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\"-\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"-\",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\"-\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_str = test_str.replace(\" \",\"\")\n    test_str = test_str.replace(\"+\",\"\")\n    test_st"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into a list of digits\n    digits = test_str.split()\n    # iterate over the list of digits\n    for i in range(len(digits)):\n        # update the digits list\n        digits[i] = int(digits[i])\n        # append the index value to the end of the list\n        digits.append(i)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    b = [x for x in a if a.count(x)>1]\n    if len(b) == 0:\n        return len(a)\n    else:\n        return len(b)\n    \n    \na = [10, 20, 10, 30, 10, 40, 50]\nprint(largest_subset(a))"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = []\n    numbers = []\n    for i in range(len(a)):\n        numbers.append(a[i])\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[j] % numbers[i] == 0 and a[j] not in result:\n                result.append(a[j])\n    return len(result)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = []\n    s = 0\n    max_index = len(a)\n    for i in range(len(a)):\n        if s < max_index:\n            if a[i] % a[s] == 0:\n                s += 1\n            else:\n                max_index = max(max_index, s)\n                subsets.append(a[s])\n                s = 0\n        else:\n            s = 0\n    return len(subsets)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_sum = 0\n    max_size = 0\n    last = a[0]\n    for i in range(1, len(a)):\n        if a[i] % last == 0:\n            last = a[i]\n        else:\n            max_sum += last\n            max_size = max(max_size, a[i])\n            last = a[i]\n    max_sum += last\n    max_size = max(max_size, a[-1])\n    return max_sum, max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = []\n    s = set()\n    for x in range(len(a)):\n        for y in range(len(a)):\n            if a[x]%a[y]==0:\n                if (a[x],a[y]) not in result:\n                    result.append((a[x],a[y]))\n    for x in result:\n        s.add(x)\n    return max(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 1:\n        return a\n    result = []\n    for i in range(1, len(a)+1):\n        for j in range(0, len(a)):\n            if a[j] % i == 0:\n                result.append(i)\n                break\n    return result\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    nums = []\n    nums_count = {}\n    for i in range(len(a)):\n        nums.append(a[i])\n        nums_count[a[i]] = nums_count.get(a[i],0) + 1\n        if nums_count[a[i]] % 2 == 1:\n            return len(nums) - 1\n    return len(nums) - 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    arr = []\n    result = []\n    \n    def check_numbers(a):\n        size = 0\n        for i in a:\n            if i in arr:\n                size += 1\n        return size\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = 0\n    l2 = 0\n    if len(arr1) == 0 or len(arr2) == 0:\n        return\n    if len(arr1) > len(arr2):\n        l1, l2 = arr2, arr1\n    if len(arr1) < len(arr2):\n        l2, l1 = arr1, arr2\n    if len(arr1) == 0:\n        return(l2)\n    if len(arr2) == 0:\n        return(l1)\n    if len(arr1) > len(arr2):\n        l1, l2 = arr2, arr1\n    if len(arr1) < len(arr2):\n        l1, l2 = arr1, arr2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n % 2 == 0:\n        return (arr1[int(n/2)] + arr2[int(n/2)])/2\n    else:\n        return arr1[int(n/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    size1 = len(arr1)\n    size2 = len(arr2)\n    if size1 == 0 or size2 == 0:\n        return None\n    elif size1 == 1 and size2 == 1:\n        return arr2[0]\n    elif size1 > size2:\n        return get_median(arr2, arr1, size2)\n    else:\n        return get_median(arr1, arr2, size1)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 2:\n        return (arr1[0] + arr2[0]) / 2\n    # define the array to be sorted\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    # define the index of the first element in each array\n    mid = int(n / 2)\n    # if the index is less than the sum of 2 elements\n    if n > 2:\n        # define the index of the element to be used as the pivot\n        pivot_index = mid\n        # find the index of the first element in the sorted array\n        pivot = sorted_arr1[mid]\n        # divide the sorted array by the pivot element\n        sorted_arr1 = sorted_arr1[0:mid] + sorted_arr2[mid:]\n        # find the index of the element to be used as the pivot\n        pivot_index = sorted_arr2.index(pivot)\n        # calculate the median of the sorted array\n        return get_median(sorted_arr1, sorted_arr2, n - pivot_index - 1)\n    else:\n        return sorted_arr1[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    median = (arr1 + arr2) // 2\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    l = len(arr1)\n    if l == 0 or l == 1:\n        return (None)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return arr1[0] if arr1[0] < arr2[0] else arr2[0]\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort the array\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    if len(arr1) == 0 or len(arr2) == 0:\n        return 0\n    # define the index\n    l1 = 0\n    l2 = 0\n    while (l1 < len(arr1) and l2 < len(arr2)):\n        if arr1[l1] < arr2[l2]:\n            l1 += 1\n        else:\n            l2 += 1\n    # if len(arr1) > len(arr2)\n    if l1 > len(arr1) - 1:\n        l1 -= 1\n    if l2 > len(arr2) - 1:\n        l2 -= 1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0:\n        return -1\n    if len(arr2) == 0:\n        return -1\n    if n == 1:\n        return arr1[0]\n    if n % 2 == 1:\n        return (arr1[n//2] + arr2[n//2])/2\n    else:\n        return (arr1[n//2] + arr2[n//2])/2\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [1]\n    for i in range(1,n):\n        result.append(result[i-1] * nums[i])\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**i for i in range(len(nums))"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #if len(nums)==0:\n        #return []\n    #else:\n    #    return [nth_nums(x,n-1)**x for x in nums]\n    #return nth_nums(nums,n-1)\n    return [nth_nums(x,n-1) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(x,n) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    power=[]\n    if len(nums)<=n:\n        return nums\n    elif n==1:\n        power.append(nums[0])\n    for i in range(len(nums)-1,-1,-1):\n        if nums[i]!=0:\n            power.append(nums[i]**i)\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for i in range(0,n):\n        power = power * nums[i]\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    ans = [1]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==1:\n        return [1]\n    elif n==2:\n        return [1,1]\n    elif n>2:\n        result=[]\n        for i in range(len(nums)):\n            result.append(nums[i]**n)\n        return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Base case\n    if n == 0:\n        return [1]\n    \n    # Exponentiation of the list and the base case\n    res = [1]\n    for i in range(2,n+1):\n        res.append(res[i-1] * nums[i-1])\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # If number is a sum of its digits\n    if len(nums) == n:\n        return [int(''.join(map(str, numbers))) for numbers in nums]\n    else:\n        # if it is not a sum, return the sum as a power of the numbers\n        return nums*nth_nums(nums,n-1)"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = string.upper()\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Check if the string is empty.\n    if len(string) == 0:\n        return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = string.upper()\n    return new_string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string=string.upper()\n    return string\n    "
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[1], newList[-1] = newList[-1], newList[1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    temp = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = temp\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #remove spaces\n    #convert list into string and remove spaces\n    str_new_list =''.join(str(i) for i in newList)\n    #convert string into list\n    list_new_list = list(str_new_list)\n    #swap first and last element\n    list_new_list[0], list_new_list[-1] = list_new_list[-1], list_new_list[0]\n    #convert list back into string\n    str_new_list =''.join(str(i) for i in list_new_list)\n    return str_new_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        temp = newList.pop(0)\n        newList.insert(0, temp)\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    \n    newList.pop(0)\n    newList.pop(len(newList) - 1)\n    \n    return newList\n    \ndef bubbleSort(newList):\n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    for i in range(len(newList) - 1):\n        for j in range(len(newList) - 1 - i):\n            if newList[j] > newList[j + 1]:\n                newList[j], newList[j + 1] = newList[j + 1], newList[j]\n                \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = newList[::-1]\n    #newList = list(newList)\n    #newList = newList[::-1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list= newList[1:len(newList)]\n    new_list.reverse()\n    return new_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList[0])\n    newList.pop(0)\n    newList.pop(len(newList)-1)\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    newList.reverse()\n    #print(newList)\n    #print(newList[0])\n    newList.remove(newList[0])\n    newList.remove(newList[-1])\n    #print(newList)\n    newList.reverse()\n    #print(newList)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        return 0\n    elif r == 1 :\n        return 1\n    else :\n        x = int(r / 2)\n        return triangle_area(x) + triangle_area(r-x)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    import math\n    a=r*math.pi*3\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1,r+1):\n        if i >= 3:\n            if (i%2!= 0):\n                a = (3*r**2 - i**2)/2\n                area = (area + a)\n            else:\n                a = (2*r**2 - i**2)/2\n                area = (area + a)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r * r * 3)**0.5\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #TODO\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r > 0) :\n        a = (r**2 + r)/2\n        if (a>r**2) :\n            return 'It is impossible to inscribed a triangle that is greater than the given radius'\n        elif (a==r**2):\n            return a\n        else:\n            return a/2\n    else :\n        return 'Invalid parameter'\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(r) :\n        return math.sqrt(4 * math.pi * r * r)\n    if r < 0 :\n        return 0\n    elif r == 0 :\n        return 1\n    else :\n        return area(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi * (r ** 2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    from math import sqrt, pow\n    area = 0\n    for i in range(1, r):\n        area = area + pow(r - sqrt((r - i)**2)**2, 0.5)\n    return area\n    \ndef area_of_tetrahedron(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a tetrahedron with a given radius.\n    '''\n    area = 0\n    for i in range(1, r+1):\n        area = area + pow(r - i**2, 0.5)\n    return area\n    \ndef area_of_circle(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a circle with a given radius.\n    '''\n    area = 0\n    for i in range(1, r+1):\n        area = area + pow(i, 2)\n    return area\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start > end:\n        return -1\n    else:\n        mid = (start+end)//2\n        if array[mid]==mid:\n            return mid\n        elif array[mid]<mid:\n            return find_First_Missing(array,mid,end)\n        elif array[mid]>mid:\n            return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end==None):\n        end = len(array)\n    if start < 0:\n        start = 0\n    if start >= len(array):\n        return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    \n    if start >= end:\n        return None\n    \n    start += 1\n    if end == start:\n        return 0\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return None\n    mid = (start + end)//2\n    if mid == len(array) or array[mid]!=array[mid-1] and array[mid]!=array[mid+1]:\n        return array[mid]\n    return find_First_Missing(array,start,mid-1) if array[mid] == array[mid-1] else find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    left_pos = start\n    right_pos = end\n    while left_pos <= right_pos:\n        mid = left_pos + (right_pos - left_pos) // 2\n        if array[mid] == mid:\n            right_pos = mid - 1\n        elif array[mid] > mid:\n            right_pos = mid - 1\n        else:\n            left_pos = mid + 1\n    return array[left_pos]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    while start < end:\n        mid = (start+end)//2\n        if array[mid] == mid:\n            return mid\n        else:\n            if array[mid] > array[mid+1]:\n                start = mid+1\n            else:\n                end = mid\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array) -1\n    if start >= end:\n        return end\n    if end == start:\n        return start\n    mid = (start+end) //2\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start==end:\n        return start\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    if array[start]==array[end]:\n        return end\n    mid=(start+end)//2\n    if array[mid]==array[start]:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid]==array[end]:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start > end:\n        return\n    middle = (start+end)//2\n    if array[middle] == middle:\n        return find_First_Missing(array,start,middle-1)\n    elif array[middle] > middle:\n        return find_First_Missing(array,middle+1,end)\n    else:\n        return middle\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # fill_value = string.split(\" \")\n    fill_value = string.replace(\" \", \"%20\")\n    # print(fill_value)\n    return fill_value\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    def replace_char(string, char, new_char):\n        return string.replace(char, new_char)\n    \n    result = \"\"\n    for char in string:\n        result += replace_char(string, char, '%')\n    \n    return result\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Define functions to do replacements\n    # Replace any word in string with '%20'\n    replace_count = 0\n    replacement_word = \" %20\"\n    \n    # Loop through string\n    for char in string:\n        # If char is space, replace word with replacement\n        # char should always be a space\n        if char =='':\n            replace_count = replace_count + 1\n        # If char is not a space, add %20 to it\n        else:\n            # Substitute the '%' with the '%'\n            if char == '%':\n                replace_count = replace_count + 1\n                char = replacement_word\n            # If char is not a %, add it to the string\n            else:\n                # Add char to the string and put into a variable\n                string = string + char\n    # Replace the %20 from the string\n    string = string.replace('%', replacement_word)\n    \n    # Return string\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # complete the solution here\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n    \ndef main():\n    '''\n    Execute the program.\n    '''\n    string = input('Input the string: ')\n    string = replace_spaces(string)\n    print(string)\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.replace(' ', '%20'))\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    \n    for number in list: \n        if number%2 == 0: \n            even_numbers.append(number)\n    return even_numbers\n    \ndef main():\n    print('#%d: %s' % (3, Split(range(0, 20))))\n    print('#%d: %s' % (4, Split(range(10, 20))))\n    print('#%d: %s' % (5, Split(range(11, 20))))\n    print('#%d: %s' % (6, Split(range(12, 20))))\n    print('#%d: %s' % (7, Split(range(13, 20))))\n    print('#%d: %s' % (8, Split(range(0, 20))))\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for item in list: \n        if item%2 == 0: \n            even_list.append(item) \n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if (i % 2 == 0):\n            even_num.append(i)\n    return even_num\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Hint: you can use 'list comprehension' to create a list of only even numbers\n    # from a given list of numbers.\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_2=[]\n    for i in range(len(list)): \n        if list[i]%2==0: \n            list_2.append(list[i]) \n    return list_2\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n    \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n    \n    \ndef Reverse_List(list):\n    '''\n    Write a python function to get a list in reverse order.\n    '''\n    for i in range(len(list) - 1, -1, -1):\n        print(list[i], end ='')\n    \n    \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if len(sub) == 2:\n        return sub\n    elif len(sub) > 2:\n        return adjac(sub[1], sub[1:])\n    else:\n        return sub\n        \ndef adjac(sub, global_list = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(sub)):\n        if sub[i] in global_list:\n            if i == 0:\n                sub[i:i+2] = global_list[:]\n            else:\n                sub[i:i+2] = global_list[:]\n                sub[i-1] = sub[i]\n        else:\n            global_list.append(sub[i])\n            global_list = adjac(sub[i+1:], global_list)\n    return global_list\n    \ndef my_path(coord_tuple):\n    '''\n    Write a function to find the shortest path from starting node to the end node.\n    '''\n    if coord_tuple in adjac(coord_tuple[1:]):\n        return adjac(coord_tuple, [coord_tuple[0]])\n    else:\n        return adjac(coord_tuple, [coord_tuple[0], coord_tuple[2]])\n    \ndef my_path_to_end(coord_tuple):\n    '''\n    Write a function to find the shortest path from the end node to the starting node.\n    '''\n    if coord_tuple in adjac(coord_tuple[1:]):\n        if coord_tuple == coord_tuple[:2]:\n            return [[coord_tuple[2]]]\n        else:\n            return [[coord_tuple[2], coord_tuple[1:]]]\n    else:\n        return [[coord_tuple[1:]]]\n    "
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (0, 0): return (0, 0)\n    elif ele == (0, 1): return (0, 1)\n    elif ele == (0, 2): return (0, 2)\n    elif ele == (0, 3): return (0, 3)\n    elif ele == (1, 0): return (1, 0)\n    elif ele == (1, 1): return (1, 1)\n    elif ele == (1, 2): return (1, 2)\n    elif ele == (1, 3): return (1, 3)\n    elif ele == (2, 0): return (2, 0)\n    elif ele == (2, 1): return (2, 1)\n    elif ele == (2, 2): return (2, 2)\n    elif ele == (2, 3): return (2, 3)\n    elif ele == (3, 0): return (3, 0)\n    elif ele == (3, 1): return (3, 1)\n    elif ele == (3, 2): return (3, 2)\n    elif ele == (3, 3): return (3, 3)\n    else: return None\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return sub\n    else:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # defining a temp variables to store all the coordinates of the coordinates of the given tuple\n    temp = []\n    # iterating through the tuple\n    for i in ele:\n        # checking if the tuple already exists, then we set the value of the temp variable to 0, and store the corresponding coordinate tuple in temp.\n        # if it does not exist, we add the coordinate tuple to temp\n        if i not in temp:\n            temp.append(i)\n            # setting the value of the temp variable to 1, and store the corresponding coordinate tuple in temp\n            sub.append(tuple(temp))\n            temp = []\n        else:\n            # if it does exist, we set the value of the temp variable to 1, and store the corresponding coordinate tuple in temp\n            temp.append(i)\n    # returning the list of all the coordinates of the coordinates of the tuple\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(sub)):\n        if ele < sub[i]:\n            ele = ele + sub[i]\n        if ele > sub[i]:\n            ele = ele - sub[i]\n    return ele\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [ele[1]] + adjac(ele[1:], sub + [ele[0]])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele, sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return tuple(map(lambda x, y: (x, y), ele[0], ele[1]))\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == -1: \n        return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return sub\n    elif ele not in sub:\n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub)\n    else:\n        return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split()\n    result = ''\n    for word in words:\n        if word[0] =='':\n            word = '_' + word[1:]\n        result += word +''\n    return result.strip()\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ',' ').replace('  ',' ').replace('\\n','').replace('\\t','')\n    text = text.replace('\\n','').replace('\\t','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for i in text:\n        if i in string.whitespace:\n            result += '_'\n        else:\n            result += i\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n    #return text.replace('  ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_replaced = ''\n    for i in text:\n        if i =='':\n            i = '_'\n        text_replaced += i\n    return text_replaced\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ',' ').replace('_',' ').replace(' ','_').replace('  ',' ')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('.', '_')\n    text = text.replace('-', '_')\n    text = text.replace(' ', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n','_').replace('\\t','_').replace('\\r','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('  ', '_').replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('.', '_')\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while num_list[i] == 0:\n        num_list[i+1] = num_list[i]\n        i += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Keep going until there is nothing left to move\n    for item in num_list:\n        if item == 0:\n            continue\n        # Count how many zeroes the item contains\n        n = 0\n        while item > 0:\n            if item % 10 == 0:\n                item -= n\n                n = 0\n            else:\n                n += 1\n                item = item / 10\n    # Remove the last number\n    num_list.pop()\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #Your code here\n    copy = num_list\n    for i in range(len(copy)):\n        if copy[i] == 0:\n            copy.pop(i)\n            copy.append(0)\n    return copy\n    \ndef main():\n    '''\n    Main function to run the program.\n    '''\n    print('Enter a list of integers:')\n    input_list = input().split(',')\n    num_list = [int(i) for i in input_list]\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    try:\n        num_list[0] = 0\n    except IndexError:\n        pass\n    else:\n        num_list.reverse()\n    num_list[::-1] = num_list[0:len(num_list):-1]\n    return num_list\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i] = num_list[i] * -1\n            num_list[i] = num_list[i] * -1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            pass\n        else:\n            pass\n            # print('i:', i)\n    # num_list.pop(num_list.index(0))\n    # num_list.pop(num_list.index(0))\n    # num_list.pop(num_list.index(0))\n    # print('num_list:', num_list)\n    # num_list = num_list[:0]\n    # print('num_list:', num_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return num_list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n    return num_list\n    \ndef modify_list(input_list):\n    '''\n    Write a python function to modify the elements of the given list by removing all\n    zeroes and adding all zeroes.\n    '''\n    output_list = []\n    for i in range(len(input_list)):\n        if input_list[i] == 0:\n            output_list.append(input_list[i])\n            input_list.pop(i)\n    return output_list\n    \ndef find_start_and_end(input_list):\n    '''\n    Write a python function to find the first and last position of a given list.\n    '''\n    if len(input_list) == 0:\n        return 0, 0\n    for i in range(len(input_list)):\n        if input_list[i] == 0:\n            return i, len(input_list) - 1\n    return -1, -1\n    \ndef reverse(input_list):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    output_list = []\n    for i in range(len(input_list)):\n        output_list.append(input_list[len(input_list) - i - 1])\n    return output_list\n    \ndef is_palindrome(input_list):\n    '''\n    Write a python function to check if a given list is a palindrome or not.\n    '''\n    input_list_2 = input_list[::-1]\n    if input_list == input_list_2:\n        return True\n    else:\n        return False\n    \ndef main():\n    '''\n    Write a python function to remove all zeroes from the given list.\n    '''\n    input_list = [1, 0, 0, 3, 6, 0, 0, 0, 0, 2]\n    return print(modify_list(input_list))\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i<len(num_list):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n        i+=1\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    zero_count = 0\n    for i in num_list:\n        if i == 0:\n            zero_count = zero_count + 1\n        else:\n            new_list.append(i)\n    \n    if zero_count > 0:\n        new_list.append(0)\n        return new_list\n    else:\n        return num_list\n    \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # declare a array of integers (not using a tuple) \n    xor_arr = []\n    # loop through the given numbers \n    for i in range(0,n): \n        # calculate the xor value \n        xor_value = 0 \n        # loop through the array \n        for j in range(i, n): \n            xor_value = xor_value ^ arr[j] \n        # add the xor value to the array \n        xor_arr.append(xor_value) \n    # return the sum of all xor values \n    return sum(xor_arr) \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #create a list of pairs\n    pair=[]\n    #for loop to add pairs to the list\n    for i in range(n) :\n        for j in range(i,n) :\n            #if the pair is not present append it to the list\n            if i!=j :\n                pair.append((i,j))\n    #calculate the sum of pairs\n    sum=0\n    for pair in pair :\n        sum+=arr[pair[0]][pair[1]]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_s = sum(arr)\n    arr_s = list(map(int,str(arr_s)))\n    arr_s.sort()\n    print(arr_s)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum += arr[i]^arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += arr[i]^arr[j]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    c = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]^arr[j]) == 0:\n                c += 1\n    return c\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            sum=sum+arr[i]^arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if n<=1 : \n        return 0\n    \n    x = 1\n    while (x<=n//2):\n        x+=1\n        y = arr[x]\n        arr[x] = arr[n-x]\n        arr[n-x] = y\n        x = (x+n//2)%n\n        if (x == n-1) : \n            x = 0\n            y = arr[x]\n            arr[x] = arr[n-x]\n            arr[n-x] = y\n            x = (x+n//2)%n\n            if (x == n-1) : \n                x = 0\n                y = arr[x]\n                arr[x] = arr[n-x]\n                arr[n-x] = y\n    return arr[0]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr=arr.copy()\n    xor_list=[]\n    for i in range(len(arr)) :\n        for j in range(i,len(arr)) :\n            if arr[i]&arr[j]==0 :\n                xor_list.append(arr[i])\n    xor_sum=sum(xor_list)\n    return xor_sum\n    \ndef xor_sum_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr=arr.copy()\n    xor_list=[]\n    for i in range(len(arr)) :\n        for j in range(i,len(arr)) :\n            if arr[i]&arr[j]==0 :\n                xor_list.append(arr[i])\n    xor_sum=sum(xor_list)\n    return xor_sum\n    \ndef sum_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr=arr.copy()\n    xor_list=[]\n    for i in range(len(arr)) :\n        for j in range(i,len(arr)) :\n            if arr[i]&arr[j]==0 :\n                xor_list.append(arr[i])\n    xor_sum=sum(xor_list)\n    return xor_sum\n    \ndef odd_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of odd numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_odd=0\n    for i in range(len(arr)) :\n        if(arr[i]&1)!=0 :\n            sum_odd+=arr[i]\n    return sum_odd\n    \ndef even_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of even numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_even=0\n    for i in range(len(arr)) :\n        if(arr[i]&1==0) :\n            sum_even+=arr[i]\n    return sum_even\n    \ndef odd_Sum_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of odd numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_odd=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_odd+=arr[i]\n    return sum_odd\n    \ndef even_Sum_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of even numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_even=0\n    for i in range(len(arr)) :\n        if(arr[i]&1==0) :\n            sum_even+=arr[i]\n    return sum_even\n    \ndef odd_Sum_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of odd numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_odd=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_odd+=arr[i]\n    return sum_odd\n    \ndef even_Sum_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of even numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_even=0\n    for i in range(len(arr)) :\n        if(arr[i]&1==0) :\n            sum_even+=arr[i]\n    return sum_even\n    \ndef odd_Sum_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of odd numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_odd=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_odd+=arr[i]\n    return sum_odd\n    \ndef even_Sum_xor_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of even numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_even=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_even+=arr[i]\n    return sum_even\n    \ndef odd_Sum_xor_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of odd numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_odd=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_odd+=arr[i]\n    return sum_odd\n    \ndef even_Sum_xor_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of even numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_even=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_even+=arr[i]\n    return sum_even\n    \ndef odd_Sum_xor_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of odd numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_odd=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_odd+=arr[i]\n    return sum_odd\n    \ndef even_Sum_xor_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of even numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_even=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_even+=arr[i]\n    return sum_even\n    \ndef odd_Sum_xor_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of odd numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_odd=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_odd+=arr[i]\n    return sum_odd\n    \ndef even_Sum_xor_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of even numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_even=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_even+=arr[i]\n    return sum_even\n    \ndef odd_Sum_xor_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of odd numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_odd=0\n    for i in range(len(arr)) :\n        if(arr[i]&1!=0) :\n            sum_odd+=arr[i]\n    return sum_odd\n    \ndef even_Sum_xor_xor_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of even numbers in the given list.\n    '''\n    arr=arr.copy()\n    sum_even=0\n    for i in range(len(ar"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n) :\n        result += arr[i]\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h, val)\n    return sorted(hq.heappop(h), reverse=True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in range(len(iterable)):\n        heapq.heappush(h, (iterable[i][1], iterable[i]))\n    return sorted(hq.heappop(h), reverse=True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: x.id)\ndef k_smallest(k,iterable):\n    '''\n    Write a function to return a new list, sorted in ascending order by the smallest k elements.\n    '''\n    return heapq.nsmallest(k, iterable)\ndef get_k(iterable):\n    '''\n    Write a function to get the k smallest elements of the given iterable.\n    '''\n    return heapq.nsmallest(1, iterable)\ndef k_largest(k,iterable):\n    '''\n    Write a function to return a new list, sorted in ascending order by the largest k elements.\n    '''\n    return heapq.nlargest(k, iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def heapify(arr, n, i):\n        '''\n        Call this function to recursively sort a\n        given list.\n        '''\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    result = []\n    for item in iterable:\n        result.append(item)\n        result = sorted(result)\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for i in iterable:\n        hq.append([i,0])\n    \n    while len(hq) > 1:\n        hq[0][1] = hq.pop(0)\n        hq[1][1] = hq.pop(0)\n        i = 0\n        j = 1\n        while i < len(hq[0][0]) and j < len(hq[1][0]):\n            if hq[0][0][i] < hq[1][0][j]:\n                hq[0] = [hq[0][0][i],hq[0][1]+1]\n                i += 1\n            else:\n                hq[1] = [hq[1][0][j],hq[1][1]+1]\n                j += 1\n        hq[0] = [hq[0][0],hq[0][1]]\n        hq[1] = [hq[1][0],hq[1][1]]\n    return hq[0]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, reverse=True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sorted = []\n    for item in iterable:\n        heapq.heappush(sorted, item)\n    return sorted\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    for i in range(len(h)-1, 0, -1):\n        hq.heapreplace(h, hq.heappop(h) + hq.heappop(h))\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1,0,-1):\n        hq.heappop(iterable)\n        hq.heapify(iterable)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit > 0:\n        return profit <= 0\n    else:\n        return profit <= 0 and profit >=0\n    \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_margin = actual_cost*0.1\n    profit_loss_margin = sale_amount*0.1\n    return profit_margin + profit_loss_margin\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost/sale_amount<=0.00001:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_amount = 0.0\n    for i in range(len(actual_cost)):\n        profit_amount += actual_cost[i] - sale_amount[i]\n    if profit_amount >= 0.0:\n        profit_amount = profit_amount / actual_cost[len(actual_cost)-1]\n    else:\n        profit_amount = 0.0\n    return profit_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Append the costs in an array\n    cost_array = []\n    for i in range(len(actual_cost)):\n        cost_array.append(actual_cost[i] + sale_amount[i])\n    \n    # Calculate the sum of the profit\n    profit = 0\n    for i in range(len(actual_cost)):\n        if actual_cost[i] > 0:\n            profit += actual_cost[i] - sale_amount[i]\n    \n    # Return the profit, profit, and sale amount\n    return profit, profit, actual_cost, sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    cost_list=[]\n    sale_list=[]\n    for i in range(len(actual_cost)):\n        cost_list.append(actual_cost[i])\n        sale_list.append(sale_amount[i])\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=sale_amount*2\n    #Your code here\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"Sorry, your original sale amount is bigger than the products cost!\")\n    else:\n        print(\"Your profit/loss of \" + str(actual_cost - sale_amount) + \" is \" + str(actual_cost - sale_amount) + \". That's nice!\")\n    print(\"\\n\\n\")\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if(actual_cost > sale_amount):\n        return actual_cost - sale_amount\n    else:\n        return actual_cost\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #return\n    wc = 9 * (v**(1/5)) + 35 * (v**(1/10)) - 70 * (v**(1/5)) + 32 * (v**(1/10))\n    return round(wc,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #v=float(input(\"Enter the wind velocity in km/h:\"))\n    #t=float(input(\"Enter the temperature in celsius:\"))\n    def wind_chill_calc(v,t):\n        chill_index = (v * math.log(v/200)) + (t * math.log(t/100))\n        return round(chill_index,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 0.621371 # W = (1.62 + 0.1604) / (1 + 0.0275)\n    h = 1.4499 # H = (1.4499 + 0.1143) / (1 + 0.0838)\n    C = 20 # C = (20 + 0.0475) / (1 + 0.0552)\n    \n    if t > 0.3:\n        v = round(v*1000, 2) # km/h => k\n        w = round(w*1000, 2) # k => c\n        C = round(C*1000, 2) # c => d\n    \n    return round(math.log((C * w)/(h * v),10),2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):\n        try:\n            float(x)\n            return True\n        except ValueError:\n            return False\n        \n    if not is_float(v):\n        raise ValueError(\"Must be a number\")\n    \n    wind_temp = v*0.01 # in celsius\n    if t <= 0:\n        wind_temp = 0\n    \n    wind_chill = (1.8*math.log((t+273.15)/(t-273.15)))-32.0 # in celsius\n    \n    return round(wind_temp + wind_chill,2)\n    \ndef wind_chill_low(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):\n        try:\n            float(x)\n            return True\n        except ValueError:\n            return False\n        \n    if not is_float(v):\n        raise ValueError(\"Must be a number\")\n        \n    wind_temp = v*0.01 # in celsius\n    if t <= 0:\n        wind_temp = 0\n        \n    wind_chill = (1.8*math.log((t+273.15)/(t-273.15)))-32.0 # in celsius\n        \n    return round(wind_temp + wind_chill,2)\n    \ndef wind_chill_increase(v,t,p,b,d):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):\n        try:\n            float(x)\n            return True\n        except ValueError:\n            return False\n        \n    if not is_float(v):\n        raise ValueError(\"Must be a number\")\n        \n    wind_temp = v*0.01 # in celsius\n    if t <= 0:\n        wind_temp = 0\n    \n    wind_chill = (1.8*math.log((t+273.15)/(t-273.15)))-32.0 # in celsius\n        \n    return round(wind_temp + wind_chill + p*(math.exp(math.pow((b-wind_temp)/d,1/p))),2)\n    \ndef wind_chill_decrease(v,t,p,b,d):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):\n        try:\n            float(x)\n            return True\n        except ValueError:\n            return False\n        \n    if not is_float(v):\n        raise ValueError(\"Must be a number\")\n        \n    wind_temp = v*0.01 # in celsius\n    if t <= 0:\n        wind_temp = 0\n    \n    wind_chill = (1.8*math.log((t+273.15)/(t-273.15)))-32.0 # in celsius\n        \n    return round(wind_temp + wind_chill + p*(math.exp(-math.pow((b-wind_temp)/d,1/p))),2)\n    \ndef wind_chill_median(v,t,p,b,d):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):\n        try:\n            float(x)\n            return True\n        except ValueError:\n            return False\n        \n    if not is_float(v):\n        raise ValueError(\"Must be a number\")\n        \n    wind_temp = v*0.01 # in celsius\n    if t <= 0:\n        wind_temp = 0\n        \n    wind_chill = (1.8*math.log((t+273.15)/(t-273.15)))-32.0 # in celsius\n    \n    return round(wind_temp + wind_chill + p*(math.exp((b-wind_temp)/d)),2)\n    \ndef wind_chill_mean(v,t,p,b,d):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):\n        try:\n            float(x)\n            return True\n        except ValueError:\n            return False\n        \n    if not is_float(v):\n        raise ValueError(\"Must be a number\")\n        \n    wind_temp = v*0.01 # in celsius\n    if t <= 0:\n        wind_temp = 0\n        \n    wind_chill = (1.8*math.log((t+273.15)/(t-273.15)))-32.0 # in celsius\n        \n    return round(wind_temp + wind_chill + p*(math.exp((b-wind_temp)/d)),2)\n    \ndef wind_chill_kurtosis(v,t,p,b,d):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):\n        try:\n            float(x)\n            return True\n        except ValueError:\n            return False\n        \n    if not is_float(v):\n        raise ValueError(\"Must be a number\")\n        \n    wind_temp = v*0.01 # in celsius\n    if t <= 0:\n        wind_temp = 0\n        \n    wind_chill = (1.8*math.log((t+273.15)/(t-273.15)))-32.0 # in celsius\n        \n    return round(wind_temp + wind_chill + p*(math.exp((b-wind_temp)/d)),2)\n    \ndef wind_chill_skewness(v,t,p,b,d):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):\n        try:\n            float(x)\n            return True\n        except ValueError:\n            return False\n        \n    if not is_float(v):\n        raise ValueError(\"Must be a number\")\n        \n    wind_temp = v*0.01 # in celsius\n    if t <= 0:\n        wind_temp = 0\n        \n    wind_chill = (1.8*math.log((t+273.15)/(t-273.15)))-32.0 # in celsius\n        \n    return round(wind_temp + wind_chill + p*(math.exp(math.pow((b-wind_temp)/d,1/p))),2)\n    \ndef wind_chill_kurtosis_skewness(v,t,p,b,d):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):\n        try:\n            float(x)\n            return True\n        except ValueError:\n            return False\n        \n    if not is_float(v):\n        raise ValueError(\"Must be a number\")\n        \n    wind_temp = v*0.01 # in celsius\n    if t <= 0:\n        wind_temp = 0\n        \n    wind_chill = (1.8*math.log((t+273.15)/(t-273.15)))-32.0 # in celsius\n        \n    return round(wind_temp + wind_chill + p*(math.exp((b-wind_temp)/d)),2)\n    \ndef wind_chill_low_skewness(v,t,p,b,d):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def is_float(x):"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Check the wind speed in km/h\n    v_check = v*3.6/3.6\n    \n    # Check the temperature in celsius\n    t_check = t\n    \n    # If the wind speed is greater than 3.6 km/h\n    if v_check > 3.6:\n        # calculate the wind chill index using relation\n        C = (9.0/5.0) + (v_check**5.0)\n        # If wind chill index is below -10, then use 3.5 to get an better result\n        if C < -10.0:\n            C = -10.0\n            t_check = 3.5\n        # Calculate the temperature\n        t_check = ((C*(9.0/5.0)) + t_check)\n        \n    # If the wind speed is less than 3.6 km/h\n    elif v_check < 3.6:\n        # calculate the wind chill index using relation\n        C = (7.0/4.0) + (v_check**4.0)\n        # If wind chill index is below -10, then use 3.5 to get an better result\n        if C < -10.0:\n            C = -10.0\n            t_check = 3.5\n        # Calculate the temperature\n        t_check = ((C*(7.0/4.0)) + t_check)\n    \n    # Return the wind chill index rounded to the next integer\n    return round(C)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return ((v**5)+(t-32)**5)**(1/5)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = math.pow(v/2.237,2) + 5.652*t + 2.506*math.pow(v/4096,2) - 11.0*math.pow(v/16384,2)\n    return round(wind_chill_index)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # do the calculation\n    c = v*(9/5) + 32\n    # print(\"v = \" + str(v))\n    # print(\"c = \" + str(c))\n    # print(\"t = \" + str(t))\n    \n    # get the number of intervals\n    n = (t/1000) # convert celsius to kelvin\n    # print(\"n = \" + str(n))\n    \n    # get the next interval\n    c_next = c + (n*(c**2))/n\n    # print(\"c_next = \" + str(c_next))\n    \n    # return the wind chill index\n    return round(c_next)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<=0:\n        return 0\n    elif v<=10:\n        return v*(10.0/5.0+32.0/296.0)\n    elif v<=20:\n        return (v-5)*(1.0+(6.0/5.0))\n    elif v<=30:\n        return (v-5)*(1.0+(6.0/5.0)+32.0/296.0)\n    elif v<=40:\n        return (v-5)*(1.0+(6.0/5.0)+64.0/296.0)\n    elif v<=50:\n        return (v-5)*(1.0+(6.0/5.0)+128.0/296.0)\n    elif v<=60:\n        return (v-5)*(1.0+(6.0/5.0)+320.0/296.0)\n    elif v<=70:\n        return (v-5)*(1.0+(6.0/5.0)+480.0/296.0)\n    elif v<=80:\n        return (v-5)*(1.0+(6.0/5.0)+760.0/296.0)\n    elif v<=90:\n        return (v-5)*(1.0+(6.0/5.0)+960.0/296.0)\n    elif v<=100:\n        return (v-5)*(1.0+(6.0/5.0)+1080.0/296.0)\n    else:\n        return (v-5)*(1.0+(6.0/5.0)+2080.0/296.0)\ndef wind_speed(t,v,r):\n    '''\n    Write a function to calculate the wind speed rounded to the next integer given the time in seconds and wind speed in km/h\n    '''\n    if t<=0:\n        return 0\n    elif v<=1:\n        return t*v\n    elif v<=5:\n        return r*v\n    elif v<=10:\n        return t*(r/5.0+r*5.0/35.0)\n    elif v<=20:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=30:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=40:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=50:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=60:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=70:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=80:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=90:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=100:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    else:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\ndef wind_direction(t,v,r):\n    '''\n    Write a function to calculate the wind direction rounded to the next integer given the time in seconds and wind speed in km/h\n    '''\n    if t<=0:\n        return 0\n    elif v<=1:\n        return math.degrees(math.acos(v/r))\n    elif v<=5:\n        return math.degrees(math.acos(v/r))\n    elif v<=10:\n        return math.degrees(math.acos(v/r))\n    elif v<=20:\n        return math.degrees(math.acos(v/r))\n    elif v<=30:\n        return math.degrees(math.acos(v/r))\n    elif v<=40:\n        return math.degrees(math.acos(v/r))\n    elif v<=50:\n        return math.degrees(math.acos(v/r))\n    elif v<=60:\n        return math.degrees(math.acos(v/r))\n    elif v<=70:\n        return math.degrees(math.acos(v/r))\n    elif v<=80:\n        return math.degrees(math.acos(v/r))\n    elif v<=90:\n        return math.degrees(math.acos(v/r))\n    elif v<=100:\n        return math.degrees(math.acos(v/r))\n    else:\n        return math.degrees(math.acos(v/r))\ndef wind_gust(t,v,r):\n    '''\n    Write a function to calculate the wind gust rounded to the next integer given the time in seconds and wind speed in km/h\n    '''\n    if t<=0:\n        return 0\n    elif v<=1:\n        return t*v\n    elif v<=5:\n        return r*v\n    elif v<=10:\n        return t*(r/5.0+r*5.0/35.0)\n    elif v<=20:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=30:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=40:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=50:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=60:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)\n    elif v<=70:\n        return t*(r/5.0+r*5.0/35.0+r*5.0/35.0+r*5.0/35.0)"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #convert temperature to C\n    c = (1.8*10**(5/2))+273.15\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    output = \"\"\n    for name in sample_names:\n        output += name.lower()\n        # if name.startswith('a') or name.startswith('b') or name.startswith('c'):\n        #     continue\n        # else:\n        #     output += name\n    return len(output)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_names = []\n    for name in sample_names:\n        if not name.startswith('a') and not name.startswith('A'):\n            new_names.append(name)\n    return new_names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # define empty list for output\n    namelist=[]\n    \n    # open the file and read it\n    f = open(\"names.txt\", \"r\")\n    \n    # loop through file\n    for line in f:\n        \n        # remove all letters\n        name=line.split()\n        # remove all letters\n        if not name[0].isupper():\n            namelist.append(name[0])\n        else:\n            namelist.append(name[0].lower())\n    \n    # close the file\n    f.close()\n    \n    # loop through names and check to see if name starts with lowercase letter\n    for name in namelist:\n        if name.lower() in sample_names:\n            namelist.remove(name.lower())\n    \n    # return the sum\n    return sum(namelist)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_string = ''.join(sample_names)\n    sample_names_list = list(sample_names_string)\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in letters:\n        if char in sample_names_list:\n            sample_names_list.remove(char)\n            count += 1\n    return sample_names_list\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    output_file = open(\"sorted_names.txt\", 'w')\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for name in sample_names:\n        if name[0].islower():\n            s = s + len(name)\n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #Find the name with the lowest length in name\n    #If the name length is greater than the number of characters in the name,\n    #then use the last character of the name to fill the blank string.\n    #If the number of characters in the name is less than the number of characters in the name,\n    #then use the last character of the name to fill the blank string.\n    '''\n    Sample Input :\n        [ 'Perry', 'Brad', 'Will', 'Larry', 'Mark', 'Sam']\n        [ 'Perry', 'Brad', 'Will', 'Larry', 'Mark', 'Sam']\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if name[0].isupper():\n            name = name.replace(\" \", \"\")\n            name = name.lstrip()\n            break\n    return name\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        name = name.lower()\n        if name[0] == 'a' or name[0] == 'b' or name[0] == 'c' or name[0] == 'd' or name[0] == 'e' or name[0] == 'f' or name[0] == 'g' or name[0] == 'h' or name[0] == 'i' or name[0] == 'j' or name[0] == 'k' or name[0] == 'l' or name[0] =='m' or name[0] == 'n' or name[0] == 'o' or name[0] == 'p' or name[0] == 'q' or name[0] == 'r' or name[0] =='s' or name[0] == 't' or name[0] == 'u' or name[0] == 'v' or name[0] == 'w' or name[0] == 'x' or name[0] == 'y' or name[0] == 'z':\n            pass\n        else:\n            names.append(name)\n    return names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for sample_name in sample_names:\n        sample_name = sample_name.lower()\n        if sample_name[0]!= 'a' or len(sample_name) == 0:\n            return ''\n    return len(sample_names)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # enumerate is used to iterate over a list\n    index = 0\n    for item in items:\n        # check if the item is a parenthesis\n        if item == '(' or item == ')':\n            # delete the paranthesis\n            if item == '(':\n                items[index] = ')'\n            # delete the paranthesis\n            elif item == ')':\n                items[index] = '('\n            index += 1\n        # if the item is not a parenthesis\n        else:\n            index += 1\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string_output = []\n    items = items.replace('(','')\n    items = items.replace(')','')\n    items = items.replace('{','')\n    items = items.replace('}','')\n    items = items.split(',')\n    for i in items:\n        if len(i) == 0:\n            continue\n        if re.match(r'\\{.+\\}', i):\n            i = i[1:]\n        string_output.append(i)\n    return string_output\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis\n    new_item = items[0]\n    count = 1\n    for x in range(1, len(items)):\n        if items[x][-1] == \"(\":\n            count += 1\n        else:\n            count -= 1\n        new_item += str(count) + items[x]\n    return new_item\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if not items:\n        return []\n    elif items[-1] == \"(\":\n        parenthesis = items[-1]\n        #remove the parenthesis\n        items.pop()\n        items.pop()\n        items.pop()\n        #append the parenthesis again\n        items.append(parenthesis)\n        return items\n    else:\n        return items\n        \ndef is_parenthesis(item):\n    if item[0] == \"(\":\n        return True\n    else:\n        return False\n        \ndef is_balanced(items):\n    '''\n    Write a function to check if the parentheses are balanced.\n    '''\n    #if parentheses are balanced\n    if len(items) < 2:\n        return True\n    else:\n        item = remove_parenthesis(items)\n        #add parentheses again\n        item.append(\"(\")\n        #if parentheses are balanced\n        if is_balanced(item) == True:\n            return False\n        #remove parentheses again\n        item.pop()\n        return False\n        \ndef is_balanced_for_func(items):\n    '''\n    Write a function to check if the parentheses are balanced.\n    '''\n    #if parentheses are balanced\n    if len(items) < 2:\n        return True\n    else:\n        item = remove_parenthesis(items)\n        #add parentheses again\n        item.append(\"(\")\n        #if parentheses are balanced\n        if is_balanced(item) == True:\n            return False\n        #remove parentheses again\n        item.pop()\n        return True\n        \ndef func_1(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_2(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced_for_func(remove_parenthesis(func_name)))\n    \ndef func_3(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced_for_func(remove_parenthesis(func_name)))\n    \ndef func_4(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_5(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_6(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_7(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_8(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_9(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_10(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_11(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_12(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_13(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_14(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_15(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_16(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_17(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_18(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_19(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_20(func_name):\n    '''\n    This function is to check if the parentheses are balanced.\n    '''\n    print(\"Enter parentheses to check :\")\n    print(\"1. Function name: \", func_name)\n    print(\"2. Function is balanced: \", is_balanced(remove_parenthesis(func_name)))\n    \ndef func_21(func_name):\n    '''\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    with open('C:/Users/Hewlett/Documents/Python/Coding/Python/excercise/excercise_1.txt') as file:\n        text = file.read()\n    print(text)\n    \n    words = re.split('[\\s\\,]+', text)\n    print(words)\n    ans = []\n    for item in words:\n        if item[-1] == \"()\":\n            ans.append(item[:-1])\n        elif item[-1] == \"(\":\n            ans.append(item[:-2])\n    print(ans)\n    text_2 = \"\"\n    for item in ans:\n        if item!= ans[0] and item!= ans[-1]:\n            text_2 += item + \" \"\n        if item == ans[0]:\n            text_2 += \")\"\n        if item == ans[-1]:\n            text_2 += \")\"\n    print(text_2)\n    return text_2\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output_string = ''\n    output_string_2 = ''\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = list(filter(lambda x: x!= '(' and x!= ')', items))\n    res = ''.join(res)\n    return res\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string_items = \"\"\n    for item in items:\n        if item == \"(\":\n            string_items += \")\"\n        else:\n            string_items += item\n    return string_items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    text = ''.join(map(lambda item: item[1], items))\n    return text\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if item[0] == '(':\n            result.append(item)\n        else:\n            if item[-1] == '(':\n                result.append(item[:-1])\n            else:\n                result.append(item)\n    return result\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Corner Case\n    if n == 1:\n        return n\n    # Check for 1, 3, 6,..., n-1\n    if n > 0:\n        for i in range(n, 1, -1):\n            # Check if the last diagonal of a 2D matrix\n            # has a value equal to i\n            if i == 1:\n                if n - i == i:\n                    return i\n            # Check if the last diagonal of a 2D matrix\n            # has a value greater than i\n            elif n - i > i:\n                return i\n        return n\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n<0: return None\n    if n==0: return 1\n    if n==1: return 2\n    if n==2: return 3\n    if n==3: return 4\n    if n==4: return 5\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_nonagonally_diagonal(n): \n        '''\n        Write a function to find the nth nonagonal number.\n        '''\n        if n%2 == 0: \n            return True\n        else: \n            return False\n    \n    if n == 1: \n        return 1\n    \n    if n == 2: \n        return 2\n        \n    if n == 3: \n        return 3\n        \n    if n == 4: \n        return 4\n        \n    if n == 5: \n        return 5\n    \n    if n == 6: \n        return 6\n        \n    if n == 7: \n        return 7\n        \n    if n == 8: \n        return 8\n        \n    if n == 9: \n        return 9\n        \n    if n == 10: \n        return 10\n    \n    if n == 11: \n        return 11\n        \n    if n == 12: \n        return 12\n        \n    if n == 13: \n        return 13\n        \n    if n == 14: \n        return 14\n        \n    if n == 15: \n        return 15\n    \n    if n == 16: \n        return 16\n        \n    if n == 17: \n        return 17\n    \n    if n == 18: \n        return 18\n        \n    if n == 19: \n        return 19\n        \n    if n == 20: \n        return 20\n    \n    if n == 21: \n        return 21\n        \n    if n == 22: \n        return 22\n    \n    if n == 23: \n        return 23\n    \n    if n == 24: \n        return 24\n        \n    if n == 25: \n        return 25\n    \n    if n == 26: \n        return 26\n    \n    if n == 27: \n        return 27\n    \n    if n == 28: \n        return 28\n    \n    if n == 29: \n        return 29\n        \n    if n == 30: \n        return 30\n        \n    if n == 31: \n        return 31\n    \n    if n == 32: \n        return 32\n    \n    if n == 33: \n        return 33\n    \n    if n == 34: \n        return 34\n    \n    if n == 35: \n        return 35\n    \n    if n == 36: \n        return 36\n    \n    if n == 37: \n        return 37\n    \n    if n == 38: \n        return 38\n    \n    if n == 39: \n        return 39\n    \n    if n == 40: \n        return 40\n    \n    if n == 41: \n        return 41\n    \n    if n == 42: \n        return 42\n    \n    if n == 43: \n        return 43\n    \n    if n == 44: \n        return 44\n    \n    if n == 45: \n        return 45\n    \n    if n == 46: \n        return 46\n    \n    if n == 47: \n        return 47\n    \n    if n == 48: \n        return 48\n    \n    if n == 49: \n        return 49\n    \n    if n == 50: \n        return 50\n    \n    if n == 51: \n        return 51\n    \n    if n == 52: \n        return 52\n    \n    if n == 53: \n        return 53\n    \n    if n == 54: \n        return 54\n    \n    if n == 55: \n        return 55\n    \n    if n == 56: \n        return 56\n    \n    if n == 57: \n        return 57\n    \n    if n == 58: \n        return 58\n    \n    if n == 59: \n        return 59\n    \n    if n == 60: \n        return 60\n    \n    if n == 61: \n        return 61\n    \n    if n == 62: \n        return 62\n    \n    if n == 63: \n        return 63\n    \n    if n == 64: \n        return 64\n    \n    if n == 65: \n        return 65\n    \n    if n == 66: \n        return 66\n    \n    if n == 67: \n        return 67\n    \n    if n == 68: \n        return 68\n    \n    if n == 69: \n        return 69\n    \n    if n == 70: \n        return 70\n    \n    if n == 71: \n        return 71\n    \n    if n == 72: \n        return 72\n    \n    if n == 73: \n        return 73\n    \n    if n == 74: \n        return 74\n    \n    if n == 75: \n        return 75\n    \n    if n == 76: \n        return 76\n    \n    if n == 77: \n        return 77\n    \n    if n == 78: \n        return 78\n    \n    if n == 79: \n        return 79\n    \n    if n == 80: \n        return 80\n    \n    if n == 81: \n        return 81\n    \n    if n == 82: \n        return 82\n    \n    if n == 83: \n        return 83\n    \n    if n == 84: \n        return 84\n    \n    if n == 85: \n        return 85\n    \n    if n == 86: \n        return 86\n    \n    if n == 87: \n        return 87\n    \n    if n == 88: \n        return 88\n    \n    if n == 89: \n        return 89\n    \n    if n == 90: \n        return 90\n    \n    if n == 91: \n        return 91\n    \n    if n == 92: \n        return 92\n    \n    if n == 93: \n        return 93\n    \n    if n == 94: \n        return 94\n    \n    if n == 95: \n        return 95\n    \n    if n == 96: \n        return 96\n    \n    if n == 97: \n        return 97\n    \n    if n == 98: \n        return 98\n    \n    if n == 99: \n        return 99\n    \n    if n == 100: \n        return 100\n    \n    if n == 101: \n        return 101\n    \n    if n == 102: \n        return 102\n    \n    if n == 103: \n        return 103\n    \n    if n == 104: \n        return 104\n    \n    if n == 105: \n        return 105\n    \n    if n == 106: \n        return 106\n    \n    if n == 107: \n        return 107\n    \n    if n == 108: \n        return 108\n    \n    if n == 109: \n        return 109\n    \n    if n == 110: \n        return 110\n    \n    if n == 111: \n        return 111\n    \n    if n == 112: \n        return 112\n    \n    if n == 113: \n        return 113\n    \n    if n == 114: \n        return 114\n    \n    if n == 115: \n        return 115\n    \n    if n == 116: \n        return 116\n    \n    if n == 117: \n        return 117\n    \n    if n == 118: \n        return 118\n    \n    if n == 119: \n        return 119\n    \n    if n == 120: \n        return 120\n    \n    if n == 121: \n        return 121\n    \n    if n == 122: \n        return 122\n    \n    if n == 123: \n        return 123\n    \n    if n == 124: \n        return 124\n    \n    if n == 125: \n        return 125\n    \n    if n == 126: \n        return 126\n    \n    if n == 127: \n        return 127\n    \n    if n == 128: \n        return 128\n    \n    if n == 129: \n        return 129\n    \n    if n == 130: \n        return 130\n    \n    if n == 131: \n        return 131\n    \n    if n == 132: \n        return 132\n    \n    if n == 133: \n        return 133\n    \n    if n == 134: \n        return 134\n    \n    if n == 135: \n        return 135\n    \n    if n == 136: \n        return 136\n    \n    if n == 137: \n        return 137\n    \n    if n == 138: \n        return 138\n    \n    if n == 139: \n        return 139\n    \n    if n == 140: "
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    return False\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2!= 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    row = 0\n    while row <= n - 2: \n        col = row\n        while col < n: \n            if (col!= row) and (col!= n - row - 1): \n                return col \n            col += 1\n        row += 1\n    return None\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    if n%2 == 0:\n        return n//2\n    else:\n        return n//2 + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 3\n    \n    if n % 4 == 0:\n        return 2*(n-1) + 1\n    if n % 4 == 1:\n        return n + 1\n    if n % 4 == 2:\n        return n - 3\n    if n % 4 == 3:\n        return n - 2\n    \n    return -1"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # print(n)\n    for i in range(n, n+n):\n        # print(i)\n        if is_triangular(i):\n            # print(i)\n            return True\n    # print(\"nothin\")\n    return False\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    row = 0\n    while row < n:\n        if row == (n - 1):\n            return n\n        row = row + 1\n    return 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_start_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_end_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_end_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_start_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_end_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_start_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_end_middle_start_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_end_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the middle of the word.\n    '''\n    text = text.lower()\n    m = re.search(r'z', text)\n    return m!= None\ndef text_match_word"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # a = text.split(' ')\n    a = []\n    for i in text.split(' '):\n        if i!= '' and i[0]!= 'z':\n            a.append(i)\n    return a\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[z]([^z]+[^z])(.*)?'\n    text = re.sub(pattern, r'\\1 \\2 \\3', text)\n    text = re.sub(pattern, r'\\1 \\2', text)\n    text = re.sub(pattern, r'\\2 ', text)\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # text = re.sub('[^a-z]','', text)\n    text = text.lower()\n    text = re.sub('^[a-z]','', text)\n    text = re.sub('[a-z]$', '', text)\n    text = re.sub('[^a-z]','', text)\n    text = text.strip()\n    text = text.split()\n    count = 0\n    for word in text:\n        if word == 'z':\n            count += 1\n    if count > 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # get the words in the text as a list\n    text_words = text.split(' ')\n    # find the word 'z' and return it\n    word_z = text_words[0]\n    return word_z\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z':\n        text = text[1:]\n    if text == '':\n        return True\n    if text.startswith('z') and not text.endswith('z'):\n        return True\n    if text.endswith('z') and not text.startswith('z'):\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[:3] == 'z':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0:2] == 'z':\n        return True\n    if text[0:4] == 'z':\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz = re.compile('z')\n    wordz_middle = re.compile('z')\n    wordz_middle_start = re.compile('z')\n    wordz_middle_end = re.compile('z')\n    text = text.lower()\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z = 0\n    if text.startswith(\"z\"):\n        z = 1\n    if text.endswith(\"z\"):\n        z = 2\n    if text[:z].lower() in [\"z\", \"t\", \"e\", \"s\", \"o\", \"u\"]:\n        return 1\n    if text[z:].lower() in [\"z\", \"t\", \"e\", \"s\", \"o\", \"u\"]:\n        return 2\n    return 3\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    temp = []\n    for i in range(0,k):\n        temp.append(input[i])\n    for i in range(k,length):\n        temp.append(input[i])\n    temp.reverse()\n    return temp\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # code here\n    # modified from https://www.geeksforgeeks.org/reverse-array-in-python-using-only-numbers-in-python/\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # write your code here\n    k=int(k)\n    n=len(input)\n    new_arr=[]\n    for i in range(n-k,n):\n        new_arr.append(input[i])\n    return new_arr\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input) \n    output = [] \n    for i in range(l): \n        output.append(input[l-1-i]) \n    for i in range(l-k): \n        output.append(input[i+k]) \n    return output \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input)-k):\n        output.append(input[i+k-1])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = input[::-1]\n    reverse_array[k], reverse_array[-k-1] = reverse_array[-k-1], reverse_array[k]\n    return reverse_array\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    left = 0\n    right = len(input) - 1\n    \n    while right > left:\n        # print(left)\n        # print(right)\n        # print(input[left] + input[right])\n        \n        temp = input[left] + input[right]\n        input[left] = input[right]\n        input[right] = temp\n        \n        left += 1\n        right -= 1\n    return input\n    \ndef reverse_Array_Upto_K_v2(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    left = 0\n    right = len(input) - 1\n    \n    while right > left:\n        # print(left)\n        # print(right)\n        # print(input[left] + input[right])\n        \n        temp = input[left] + input[right]\n        input[left] = input[right]\n        input[right] = temp\n        \n        right -= 1\n        left += 1\n    return input\n    \ndef insert_at_k_2_array(input,k,arr):\n    '''\n    Insert at the position k elements in the array at position k.\n    '''\n    \n    # if arr is empty or k >= len(arr)\n    if arr == [] or k > len(arr):\n        arr.append(1)\n        arr.append(1)\n        return arr\n    \n    # if k is greater than len(arr)\n    elif k >= len(arr):\n        for i in range(len(arr)):\n            arr.append(1)\n            arr.append(1)\n        arr.append(1)\n        return arr\n    \n    # if arr[k] is greater than arr[k+1]\n    if arr[k] > arr[k+1]:\n        for i in range(k+1,len(arr)):\n            arr.append(1)\n            arr.append(1)\n        arr.append(1)\n        return arr\n    \n    # if arr[k] is greater than arr[k+1]\n    elif arr[k] > arr[k+1]:\n        for i in range(k,len(arr)):\n            arr.append(1)\n            arr.append(1)\n        arr.append(1)\n        return arr\n    \n    else:\n        for i in range(k,len(arr)):\n            arr.append(1)\n            arr.append(1)\n        arr.append(1)\n        return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # init prev as None\n    prev = None\n    # loop through array\n    for i in range(0, len(input)):\n        # get the next position in array\n        next_position = (i+k)%len(input)\n        # populate prev to be used to compare\n        prev = input[next_position]\n        # make next_position become current position\n        input[i] = prev\n    # return input\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input) - 1, -1, -1):\n        output.append(input[i])\n    output = output[::-1]\n    for i in range(k):\n        output.append(input[-1])\n    return output\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup[key] = value\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for i, val in enumerate(test_dict):\n        test_tup[i] = val\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for i in test_tup:\n        test_dict[i] = test_dict.get(i, 0) + 1\n    return test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = dict(test_dict)\n    test_tup += tuple(test_dict.items())\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    return test_tup, test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Initialize a tuple\n    final_tuple = ()\n    # For each key in the dictionary, add the key to the tuple\n    for key in test_dict:\n        final_tuple = final_tuple + (key,)\n    # Return the tuple\n    return final_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if len(test_dict) > 0:\n        tuple_ = (tuple(test_dict.values()), tuple(test_dict.keys()))\n        return tuple_\n    else:\n        return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup.append((key, value))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k,v in test_dict.items():\n        test_tup = test_tup + (v,k)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_dict) == dict:\n        test_tup = tuple(test_dict.values())\n    elif type(test_dict) == tuple:\n        pass\n    else:\n        return \"Wrong type of dict provided\"\n    if type(test_tup) == tuple:\n        return test_tup + test_dict\n    else:\n        return test_tup + test_dict\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxSum = 0\n    maxPath = []\n    # You will be given the following information:\n    # Cost of each cell, total number of cells visited, and the current position of the cells.\n    \n    # Fill this in with a recursive function to calculate the maximum average of the path.\n    \n    # Hint: You will need to write the following steps:\n    # 1. Collect the current cost, total number of cells visited, and the current position of the current cell.\n    # 2. Make sure to subtract the cell with the current position, before computing the sum.\n    # 3. If the current position is the last cell in the path, then add the cell to the path.\n    # 4. If the current position is not the last cell in the path, then add the cell to the path.\n    # 5. If the current position is the last cell in the path, then you should return the total cost of the path.\n    # 6. Else you should return the maximum average of the path.\n    \n    # Note: The following array is used in your solution.\n    \n    path = [[0,0],[0,0],[0,0]]\n    \n    def printPath(path):\n        print(path)\n        \n    def updatePath(path):\n        if len(path) == 0:\n            return 0\n        if len(path) == 1:\n            return path[0][0]\n        currentPosition = path[0][0]\n        count = 0\n        for cell in path:\n            if cell[0]!= currentPosition:\n                count += 1\n        return (count/len(path))\n    \n    def calculateAverage(path):\n        currentPosition = path[0][0]\n        count = 0\n        for cell in path:\n            if cell[0]!= currentPosition:\n                count += 1\n        totalCount = len(path)\n        return totalCount/count\n    \n    def updatePaths(path, currentPosition):\n        path.append([currentPosition,0])\n        path[len(path)-1][1] += 1\n        currentPosition = path[len(path)-1][0]\n        \n    def removePath(path, currentPosition):\n        del path[len(path)-1]\n        \n    def findPath(currentPosition, path):\n        if currentPosition == path[-1][0]:\n            path.append([currentPosition,path[len(path)-1][1]])\n            print(path)\n            return path[len(path)-1][1]\n        elif currentPosition == path[0][0]:\n            path.append([currentPosition,path[len(path)-1][1]])\n            return path[len(path)-1][1]\n        else:\n            nextPosition = calculateAverage(path)\n            removePath(path, currentPosition)\n            updatePaths(path, nextPosition)\n            currentPosition = findPath(nextPosition, path)\n            return currentPosition\n        \n    print(\"Given the cost of each cell, total number of cells visited, and the current position of the current cell.\\n\")\n    totalCost = cost[0][0]\n    print(\"Total number of cells visited: \", totalCost)\n    \n    currentPosition = 0\n    print(\"\\nYour path:\")\n    while currentPosition!= -1:\n        print(path[currentPosition][0])\n        currentPosition = findPath(currentPosition, path)\n        print(\"\\n\\n\")\n    print(\"\\nThe path with the maximum average is:\")\n    printPath(path)\n    \n    print(\"\\nThe path is a valid path:\")\n    print(calculateAverage(path))\n        \n    return totalCost,pat"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Your Code Here\n    if len(cost) == 0:\n        return 0\n    avg = 0\n    lenOfPath = 0\n    for i in range(len(cost)):\n        lenOfPath += len(cost[i])\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if j == len(cost[i]) - 1:\n                break\n            avg += cost[i][j]/lenOfPath\n    return avg\n    \n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Find the number of rows and columns\n    n = len(cost)\n    \n    # Find the height and width of the matrix\n    m = len(cost[0])\n    \n    # Initialize the matrix\n    result = [[0 for i in range(m)] for j in range(n)]\n    \n    # Traverse through the matrix\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0:\n                result[i][j] = cost[i][j]\n            elif j > 0 and i > 0:\n                result[i][j] = cost[i][j] + result[i - 1][j - 1]\n            elif i == 0 or j == 0:\n                result[i][j] = 0\n            else:\n                result[i][j] = result[i - 1][j] + result[i][j - 1]\n                \n    return result[n - 1][m - 1] / n\n    \n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    assert N == N*N\n    return sum(cost[i][i] for i in range(N))//len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost[0][0] == cost[-1][-1]:\n        return cost[0][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maximum = 0\n    for r in range(len(cost)):\n        for c in range(len(cost[0])):\n            if c!= len(cost[0])-1:\n                if cost[r][c+1]!= -1:\n                    total = cost[r][c] + cost[r][c+1]\n                    if total > maximum:\n                        maximum = total\n            if c!= len(cost[0])-1:\n                if cost[r][c-1]!= -1:\n                    total = cost[r][c] + cost[r][c-1]\n                    if total > maximum:\n                        maximum = total\n    return maximum / float(len(cost))\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Calculate path cost\n    totalCost = 0\n    for path in cost:\n        for cell in path:\n            totalCost += cell\n    # Calculate path average\n    pathAverage = totalCost / len(cost)\n    return pathAverage\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            cost[i][j] /= i\n            cost[i][j-1] /= j\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    s = []\n    for i in range(N):\n        for j in range(N):\n            s.append(cost[i][j])\n    d = {}\n    for i in range(N):\n        for j in range(N):\n            d[s[i]+str(j+1)] = cost[i][j]\n    #print(d)\n    def trace(x, y, z):\n        if not z:\n            print(x, y, end=' ')\n            return\n        if not x:\n            return\n        print(x+1, end=' ')\n        trace(x-1, y, z-1)\n        print(y+1, end=' ')\n        trace(x, y-1, z)\n    trace(0, 0, 1)\n    return sum(d.values()) / N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_cost = 0\n    path = []\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #Find the students with height and weight above the minimum\n    for student in students:\n        if student[1][1] > h:\n            students.remove(student)\n        elif student[1][1] == h:\n            students.remove(student)\n            \n    #Find the students with height and weight above the minimum\n    for student in students:\n        if student[1][1] < w:\n            students.remove(student)\n        elif student[1][1] == w:\n            students.remove(student)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    final_students = []\n    for student in students:\n        if all(h >= student[1] for h in student[0]):\n            final_students.append(student)\n    return final_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        height,weight = student[0],student[1]\n        if weight >= h and height >= w:\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height, weight = w\n    if not h:\n        return students\n    elif height < h:\n        return filter_data(students,h,weight)\n    else:\n        return filter_data(students,h - height,weight)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for name in students:\n        if students[name][0] > h and students[name][1] > w:\n            students.pop(name)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students.values():\n        if student[2] >= h and student[3] >= w:\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if student[1] > (h*w/100):\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create a variable to hold the minimum values\n    minimum_value = min(students.values())\n    # create a dictionary of students with their height and weight\n    filtered_students = {}\n    for (k,v) in students.items():\n        if v[1] >= minimum_value:\n            filtered_students[k] = (v[0], v[1])\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for student in students:\n        student_height = student[1][0]\n        student_weight = student[1][1]\n        if student_height >= h and student_weight >= w:\n            filtered_data[student[0]] = student\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for key,value in students.items():\n        if value[0] < h and value[1] < w:\n            new_dict[key] = value\n    return new_dict\ndef top_battleships(w,h):\n    '''\n    The input is given as - the dictionary of students - the minimum height and the minimum weight.\n    Write a function to find the top 3 battleships of the maximum height and minimum weight.\n    '''\n    # Create a list to store the names of the battleships\n    battleships = []\n    # Make a list of tuples\n    all_tuple = []\n    # Loop through the dictionary\n    for key,value in students.items():\n        # Create a list of tuples\n        all_tuple.append((value[0], value[1]))\n    all_tuple.sort()\n    # Loop through the tuple\n    for tuple in all_tuple:\n        # Add the name of the tuple to the list\n        battleships.append(tuple[0])\n    # Loop through the dictionary\n    for key,value in students.items():\n        # Create a list of tuples\n        all_tuple = []\n        # Loop through the dictionary\n        for i in range(0,len(students)):\n            if value[0] == students[i][0]:\n                all_tuple.append((value[1], value[1]))\n        # Remove the tuples that are in the list\n        all_tuple = [all_tuple[i] for i in range(len(all_tuple)) if i not in battleships]\n    # Remove the names of the battleships\n    battleships = []\n    for tuple in all_tuple:\n        if tuple[0] not in battleships:\n            battleships.append(tuple[0])\n    # Return the top 3 battleships\n    return battleships[:3]"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    # YOUR CODE HERE\n    dict = {}\n    for i in nums1:\n        if i in dict:\n            dict[i] = dict[i] + 1\n        else:\n            dict[i] = 1\n    for i in nums2:\n        if i in dict:\n            dict[i] = dict[i] - 1\n        else:\n            dict[i] = 0\n    return dict\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_count = 0\n    nums2_count = 0\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count1 = 0\n    count2 = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count1 += 1\n        else:\n            count2 += 1\n    return count1, count2\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                result += 1\n    return result\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2)\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # edge case for first list,\n    if len(nums1)!= len(nums2):\n        return 0\n    sums = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            sums += 1\n    return sums\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set1 = set(nums1)\n    set2 = set(nums2)\n    return len(set1 & set2)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #return the number of same values in two lists\n    if not nums1 and not nums2:\n        return 0\n    count1 = 0\n    count2 = 0\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count1 += 1\n            else:\n                count2 += 1\n    else:\n        count1 = nums1.count(nums2[0])\n        count2 = nums2.count(nums1[0])\n    return count1 + count2\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    s = sum(nums1)\n    if s!= sum(nums2):\n        return len(nums1)\n    return 0\ndef swap(nums1, i, j):\n    '''\n    The input is defined as two lists of the same length. Write a function to swap the values at indexes i and j.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    nums1[i], nums2[j] = nums2[j], nums1[i]\n    for k in range(n):\n        if nums1[k]!= nums2[k]:\n            nums1[k], nums2[k] = nums2[k], nums1[k]\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len(set(nums1)) == len(set(nums2))\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 10:\n        return base + power\n    else:\n        return base + power - 10\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(base_digit) for base_digit in str(base)]) + power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert base>=10 and base<=9, f\"base is out of range {base}\"\n    assert power>=1 and power<=3, f\"power is out of range {power}\"\n    \n    def power_base(num, power):\n        if power==1:\n            return num\n        else:\n            return num*power_base(num,power-1)\n    \n    return power_base(base,power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    elif base == 0:\n        return 0\n    elif base == 1:\n        return 1\n    else:\n        return power_base_sum(base - 1, power - 1) + power_base_sum(base - 1, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n    def power_1(base, power):\n        result = 0\n        while base:\n            result += int(base)\n            base = int(base) // 10\n        return result\n    return power_1(base, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power > len(base):\n        return 0\n    elif power == 0:\n        return 1\n    elif base == '10':\n        return base\n    else:\n        return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = int(base)\n    power = int(power)\n    if power > base:\n        return power_base_sum(base, power-1)\n    else:\n        return base + power_base_sum(base, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n    base = int(base)\n    \n    def sum_digits(digits):\n        '''\n        Write a function that takes the digits of a base 10 number and calculates the sum of all the digits of the base to the power specified by power.\n        '''\n        \n        def is_digit(digit):\n            '''\n            Helper function for checking if a digit is a digit in a base 10 number\n            '''\n            return int(digit) < base\n        \n        def power_num(digit, power):\n            '''\n            Write a function that takes a digit and a power and calculates the number multiplied by the power.\n            '''\n            if power == 1:\n                return int(digit)\n            else:\n                return digit + power_base_sum(digit, power-1)\n        \n        digit = 0\n        while digit < base:\n            digit = power_num(digit, power)\n        \n        return digit\n        \n    def power_base_sum_with_solution(digits, base):\n        '''\n        Write a function that takes the digits of a base 10 number and calculates the sum of all the digits of the base to the power specified by power and then adds the result to the original number.\n        '''\n        if digits == '0':\n            return 0\n        digit = int(digits)\n        return sum_digits(digit)\n        \n    return power_base_sum(base, power)\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # TODO: Write the function\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base ** power\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub('\\'', '', text1)\n    text = re.sub('\\\"', '', text)\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\w+\\s[1-9][0-9]\\w+', text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # TODO: define a function to extract the value of the quotation marks \n    # and return the string.\n    # Print the result.\n    return text1.strip()\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    lst = []\n    quotes = [\"'\", '\"', '`', '`']\n    lst = []\n    text = re.split(r'[\\s\\(\\)\\[\\]]+', text1)\n    for i in range(len(text)):\n        if text[i] == '\\n' or text[i] == '\\r' or text[i] == '\\t':\n            continue\n        if text[i] in quotes:\n            if text[i-1] in quotes:\n                lst.append(text[i])\n            if text[i+1] in quotes:\n                lst.append(text[i+1])\n        if text[i]!='':\n            lst.append(text[i])\n    return lst\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    # I need to remove all of the quotation marks from the text\n    text1 = re.sub(r'[^\\w\\s]', '', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    #regular expression for possible quotation marks\n    quotation_pattern = r\"(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')?(?:[^\\s])(?:'')"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_value = text1.split()\n    quotation_value = [i.strip() for i in quotation_value]\n    quotation_value = \" \".join(quotation_value)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    import re\n    import operator\n    quotation = r'(\\\".+?\\\"'\n    quotation_list = re.findall(quotation, text1)\n    return quotation_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    pattern = r'\\[\\]\\{.*?\\}(.*?)\\n'\n    result = re.findall(pattern,text1)\n    \n    if len(result)>1:\n        raise ValueError('More than one quotation marks found!')\n        \n    else:\n        quot = result[0]\n        \n    return quot\ndef extract_title_of_quote(quote):\n    '''\n    Write a function to extract the title of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0]\ndef extract_author(quote):\n    '''\n    Write a function to extract the author of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0]\ndef extract_subject(quote):\n    '''\n    Write a function to extract the subject of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0]\ndef extract_description(quote):\n    '''\n    Write a function to extract the description of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0]\ndef extract_price(quote):\n    '''\n    Write a function to extract the price of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)(?<= )(.*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0][3:6]+result[0][9:]\ndef extract_price_range(quote):\n    '''\n    Write a function to extract the price of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)(?<= )(.*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0][3:6]+result[0][9:]\ndef extract_stock_name(quote):\n    '''\n    Write a function to extract the stock name of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)(?<= )(.*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0][4:]\ndef extract_company_name(quote):\n    '''\n    Write a function to extract the company name of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)(?<= )(.*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0][5:]\ndef extract_address(quote):\n    '''\n    Write a function to extract the address of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)(?<= )(.*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0][6:]\ndef extract_type(quote):\n    '''\n    Write a function to extract the type of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)(?<= )(.*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0][7:]\ndef extract_currency(quote):\n    '''\n    Write a function to extract the currency of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)(?<= )(.*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0][8:]\ndef extract_currency_rate(quote):\n    '''\n    Write a function to extract the currency rate of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)(?<= )(.*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote))\n        \n    else:\n        return result[0][9:]\ndef extract_product_name(quote):\n    '''\n    Write a function to extract the product name of the quotation from a given string.\n    '''\n    \n    pattern = r'(^[^\\s]*)(?<= )(.*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})(\\w*)(\\d{1,3})'\n    result = re.findall(pattern,quote)\n    \n    if len(result)==1:\n        raise ValueError('\"{}\" cannot be found in the quote.'.format(quote)"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\"\u201c\",'\"')\n    text1 = text1.replace('\u201d','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\t','', text1)\n    text1 = re.sub('\\n','', text1)\n    text1 = re.sub('\\r','', text1)\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\u2028','')\n    text1 = text1.replace('\\u2029','')\n    text1 = re.sub(' +',' ',text1)\n    return text1\ndef extract_quotation1(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\"\u201c\",'\"')\n    text1 = text1.replace('\u201d','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\t','', text1)\n    text1 = re.sub('\\n','', text1)\n    text1 = re.sub('\\r','', text1)\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\u2028','')\n    text1 = text1.replace('\\u2029','')\n    text1 = re.sub(' +',' ',text1)\n    return text1\ndef extract_time(text1):\n    '''\n    Write a function to extract values between time or time- and time-words \" \" in the given string.\n    '''\n    text1 = text1.replace(\"'\",'\"')\n    text1 = text1.replace('\"','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = text1.replace('\\n','')\n    text1 = re.sub(' +',' ',text1)\n    text1 = text1.replace('\\t','')\n    return text1\ndef extract_time1(text1):\n    '''\n    Write a function to extract values between time or time- and time-words \" \" in the given string.\n    '''\n    text1 = text1.replace(\"'\",'\"')\n    text1 = text1.replace('\"','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\n','', text1)\n    text1 = re.sub('\\r','', text1)\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\u2028','')\n    text1 = text1.replace('\\u2029','')\n    text1 = re.sub(' +',' ',text1)\n    return text1\ndef extract_date(text1):\n    '''\n    Write a function to extract values between date or date-words \" \" in the given string.\n    '''\n    text1 = text1.replace(\"'\",'\"')\n    text1 = text1.replace('\"','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\n','', text1)\n    text1 = re.sub('\\r','', text1)\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\u2028','')\n    text1 = text1.replace('\\u2029','')\n    text1 = re.sub(' +',' ',text1)\n    return text1\ndef extract_date1(text1):\n    '''\n    Write a function to extract values between date or date-words \" \" in the given string.\n    '''\n    text1 = text1.replace(\"'\",'\"')\n    text1 = text1.replace('\"','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\n','', text1)\n    text1 = re.sub('\\r','', text1)\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\u2028','')\n    text1 = text1.replace('\\u2029','')\n    text1 = re.sub(' +',' ',text1)\n    return text1\ndef extract_money(text1):\n    '''\n    Write a function to extract values between money or money-words \" \" in the given string.\n    '''\n    text1 = text1.replace(\"'\",'\"')\n    text1 = text1.replace('\"','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\n','', text1)\n    text1 = re.sub('\\r','', text1)\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\u2028','')\n    text1 = text1.replace('\\u2029','')\n    text1 = re.sub(' +',' ',text1)\n    return text1\ndef extract_money1(text1):\n    '''\n    Write a function to extract values between money or money-words \" \" in the given string.\n    '''\n    text1 = text1.replace(\"'\",'\"')\n    text1 = text1.replace('\"','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\n','', text1)\n    text1 = re.sub('\\r','', text1)\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\u2028','')\n    text1 = text1.replace('\\u2029','')\n    text1 = re.sub(' +',' ',text1)\n    return text1\ndef extract_date2(text1):\n    '''\n    Write a function to extract values between date or date-words \" \" in the given string.\n    '''\n    text1 = text1.replace(\"'\",'\"')\n    text1 = text1.replace('\"','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\n','', text1)\n    text1 = re.sub('\\r','', text1)\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\u2028','')\n    text1 = text1.replace('\\u2029','')\n    text1 = re.sub(' +',' ',text1)\n    return text1\ndef extract_date3(text1):\n    '''\n    Write a function to extract values between date or date-words \" \" in the given string.\n    '''\n    text1 = text1.replace(\"'\",'\"')\n    text1 = text1.replace('\"','\"')\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\n','', text1)\n    text1 = re.sub('\\r','', text1)\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\xa0','')\n    text1 = text1.replace('\\u2028','')\n    text1 = text1.replace('\\u2029','')\n    text1 = re.sub(' +',' ',text1)\n    return text1\ndef extract_money2(text1):\n    '''\n    Write a function to extract values between money or money-words \" \" in the given string.\n    '''\n    text1 = text1.replac"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    x=0\n    for t in test_tup:\n        x=x*t\n    return x\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = test_tup[0] * test_tup[1] #Doesn't work because of the tuple, it's returned as a list of numbers, and there are N elements\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = (0,) * (len(test_tup) - 1) # new tuple with a tuple of 0s\n    for i in range(len(test_tup) - 1): # for every element in the tuple, divide by the previous element, multiply by a factor, and add it to the new tuple\n        new_tup[i] = test_tup[i] * test_tup[i+1]\n    return new_tup # returns a tuple of numbers\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    temp = 1\n    for i in range(len(test_tup)-1):\n        temp = temp * test_tup[i]\n    return(temp)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_sum = 0\n    for i in range(len(test_tup)-1):\n        t_sum += test_tup[i] * test_tup[i+1]\n    return (t_sum, )\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    lst = []\n    for i in range(len(test_tup)):\n        lst.append(test_tup[i] * test_tup[i + 1])\n    return lst\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        return None\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_N = len(test_tup)\n    t_i = 1\n    for i in range(1,t_N):\n        t_i *= test_tup[i]\n    return t_i,t_1\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    '''\n    Use: return sum_list([a_1,b_1,...,b_n],[a_2,...,a_n],...,[b_1,...,b_n])\n    '''\n    #put your code here\n    return 0\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in range(len(lst1)):\n        sum += lst1[i] + lst2[i]\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res=[]\n    for i in range(len(lst1)):\n        res.append(lst1[i]+lst2[i])\n    return(res)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum=0\n    for i in lst1:\n        sum+=i\n    for j in lst2:\n        sum+=j\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    a_1 = 0\n    b_1 = 0\n    for i in range(0,len(lst1)):\n        a_1 += lst1[i]\n        b_1 += lst2[i]\n    return a_1+b_1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    total_sum = 0\n    for i in range(len(lst1)):\n        total_sum = total_sum + lst1[i] + lst2[i]\n    return total_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res=0\n    for i in lst1:\n        for j in lst2:\n            res+=i+j\n    return res\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = 0\n    for i in range(len(lst1)):\n        s += lst1[i]\n    for i in range(len(lst2)):\n        s += lst2[i]\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_result = []\n    for x in range(len(lst1)):\n        for y in range(len(lst2)):\n            sum_result.append(lst1[x]+lst2[y])\n    return sum_result\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums).keys())\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # this is a list of lists\n    consec_dup = []\n    dup_idx = []\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys([item for sublist in groupby(nums) for item in sublist]))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    group_pairs = groupby(sorted(nums), key=lambda x: x[0])\n    for k,v in group_pairs:\n        if len(v) > 1:\n            v.sort()\n            new_list = v[1:]\n            if v[0]!= new_list[0]:\n                return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    temp_nums = []\n    temp_list = []\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    l = list(nums)\n    for k, g in groupby(l):\n        if len(list(g)) > 1:\n            return nums\n    return []\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Your code here\n    return list(set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    indexes = {}\n    for i, element in enumerate(nums):\n        if element in indexes:\n            indexes[element] = i\n        else:\n            indexes[element] = i\n    return [indexes[el] for el in sorted(indexes.keys())]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\ndef merge(list1, list2):\n    '''\n    Given two lists, return a new list that contains all items that are both present in both lists, but not both.\n    '''\n    output = []\n    for item in list1:\n        if item not in list2:\n            output.append(item)\n    for item in list2:\n        if item not in list1:\n            output.append(item)\n    return output\ndef remove_if_in(list, list_to_remove):\n    '''\n    Given a list of items, return a new list with all items not in the list_to_remove removed.\n    '''\n    return [item for item in list if item not in list_to_remove]\ndef count_duplicates(list):\n    '''\n    Return the number of items in the list.\n    '''\n    count = 0\n    for items in list:\n        if items == list[0]:\n            count += 1\n    return count\ndef find_triplets(nums):\n    '''\n    Given a sorted array, return all possible triplets in the array.\n    '''\n    result = []\n    def helper(nums, index):\n        if index == len(nums):\n            result.append(nums[:])\n            return\n        if nums[index] == nums[index+1]:\n            helper(nums, index+2)\n        else:\n            helper(nums, index+1)\n    helper(nums, 0)\n    return result\ndef count_subsets(nums):\n    '''\n    Given a sorted array, return the number of unique subsets.\n    '''\n    result = 0\n    for subset in find_triplets(nums):\n        result += len(subset)\n    return result\ndef remove_if_dup(list):\n    '''\n    Given a list of items, return a new list that contains all items that are duplicated, but not both.\n    '''\n    return [item for item in list if item not in list[0:len(list)-1] and item not in list[-1::-1]]\ndef create_sorted_list(nums):\n    '''\n    Given a sorted list of numbers, return a new sorted list.\n    '''\n    return sorted(nums)\ndef sort_numbers(nums):\n    '''\n    Given a list of numbers, return a new list sorted in ascending order.\n    '''\n    return sorted(nums)\ndef add_to_stack(stack, num):\n    '''\n    Given a list of numbers, return a new list that has all numbers in the stack appended to it.\n    '''\n    return stack + [num]\ndef remove_from_stack(stack, num):\n    '''\n    Given a list of numbers, return a new list that contains all numbers in the stack without the one specified.\n    '''\n    return stack.remove(num)\ndef check_duplicate(nums):\n    '''\n    Given a list of numbers, return True if any duplicate numbers are present.\n    '''\n    for num in nums:\n        if num in nums:\n            return True\n    return False\ndef is_even(n):\n    '''\n    Given a number, return True if it is even.\n    '''\n    return n%2 == 0\ndef is_odd(n):\n    '''\n    Given a number, return True if it is odd.\n    '''\n    return n%2!= 0\ndef is_palin(n):\n    '''\n    Given a number, return True if it is a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\ndef is_power_of_two(n):\n    '''\n    Given a number, return True if it is a power of two.\n    '''\n    return all([n%2==0, n%10==0])\ndef sum_digits(n):\n    '''\n    Given a number, return the sum of all its digits.\n    '''\n    sum = 0\n    while n:\n        sum += n%10\n        n = n//10\n    return sum\ndef reverse_string(s):\n    '''\n    Given a string, return the string with its characters reversed.\n    '''\n    rev_s = ''\n    for char in s:\n        rev_s += char\n    return rev_s\ndef is_palindrome(n):\n    '''\n    Given a number, return True if it is a palindrome.\n    '''\n    return str(n)[::-1] == str(n)\ndef is_palindrome_with_consecutive_duplicates(n):\n    '''\n    Given a number, return True if it is a palindrome.\n    '''\n    return consecutive_duplicates(str(n))\ndef is_palindrome_with_list(n):\n    '''\n    Given a number, return True if it is a palindrome.\n    '''\n    return remove_if_in(str(n), consecutive_duplicates(str(n)))\ndef is_palindrome_with_list_of_numbers(n):\n    '''\n    Given a number, return True if it is a palindrome.\n    '''\n    return remove_if_in(str(n), consecutive_duplicates(str(n)))\ndef is_palindrome_with_list_of_numbers_and_duplicates(n):\n    '''\n    Given a number, return True if it is a palindrome.\n    '''\n    return remove_if_in(str(n), consecutive_duplicates(str(n)))\ndef is_palindrome_with_list_of_numbers_and_duplicates_and_list(n):\n    '''\n    Given a number, return True if it is a palindrome.\n    '''\n    return remove_if_in(str(n), consecutive_duplicates(str(n)))\ndef find_greater_than_k(n, k):\n    '''\n    Given a number, return the number of elements greater than the number of elements less than or equal to the number of elements.\n    '''\n    return len([num for num in range(1, k+1) if num > num for num in range(n)])\ndef find_greater_than_k_and_even(n, k):\n    '''\n    Given a number, return the number of even elements greater than the number of elements less than or equal to the number of elements.\n    '''\n    return len([num for num in range(1, k+1) if num % 2 == 0 and num > num for num in range(n)])\ndef find_greater_than_k_and_odd(n, k):\n    '''\n    Given a number, return the number of even elements greater than the number of elements less than or equal to the number of elements.\n    '''\n    return len([num for num in range(1, k+1) if num % 2 == 1 and num > num for num in range(n)])\ndef find_greater_than_k_and_odd_and_even(n, k):\n    '''\n    Given a number, return the number of even elements greater than the number of elements less than or equal to the number of elements.\n    '''\n    return len([num for num in range(1, k+1) if num % 2 == 1 and num > num for num in range(n)])\ndef is_subsequence(n, k):\n    '''\n    Given a number, return True if it is a subsequence of the number.\n    '''\n    return len(find_greater_than_k_and_odd_and_even(n, k)) >= 1\ndef is_subsequence_and_even(n, k):\n    '''\n    Given a number, return True if it is a subsequence of the number and it is even.\n    '''\n    return len(find_greater_than_k_and_even(n, k)) >= 1\ndef is_subsequence_and_odd(n, k):\n    '''\n    Given a number, return True if it is a subsequence of the number and it is odd.\n    '''\n    return len(find_greater_than_"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Mark duplicate indices to avoid index out of bounds error.\n    duplicate_indices = {}\n    \n    for i, j in groupby(enumerate(nums), key = lambda pair: pair[0]):\n        for pair in list(j):\n            if pair[0] not in duplicate_indices:\n                duplicate_indices[pair[0]] = [pair[1]]\n            else:\n                duplicate_indices[pair[0]].append(pair[1])\n        \n    # Remove duplicates from the given list.\n    nums = list(set(nums))\n    for i, j in duplicate_indices.items():\n        nums[i] = j[0]\n    \n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r**2)*h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # define a variables to store the lateral surface area\n    A=0\n    # calculate the area of the surface in each direction\n    for i in range(4):\n        A += h*math.sin(math.radians(i*180/3))*math.sin(math.radians(180/3))\n    # calculate the lateral surface area\n    A /= 2\n    return math.floor(A)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    y = r*math.sin(math.pi/2-h/2)\n    x = r*math.cos(math.pi/2-h/2)\n    return y*x\ndef lateralsurface_cone_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    y = r*math.sin(math.pi/2-h/2)\n    x = r*math.cos(math.pi/2-h/2)\n    return (y+x*math.sin(h/2))*math.cos(h/2)\ndef geometric_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #if the height is less than 0.5 then the cone is solid.\n    if(h<0.5):\n        return r*math.cos(math.pi/2-h/2)\n    else:\n        return r*math.cos(math.pi/2-h/2)\ndef geometric_surface_cone_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #if the height is less than 0.5 then the cone is solid.\n    if(h<0.5):\n        return (r*math.cos(math.pi/2-h/2))*math.cos(h/2)\n    else:\n        return (r*math.cos(math.pi/2-h/2))*math.cos(h/2)\ndef vertices_of_surface_cone(r,h):\n    '''\n    Write a function to find the vertices of the surface of a cone given the radius r and the height h.\n    '''\n    return (r*math.cos(math.pi/2-h/2),r*math.sin(math.pi/2-h/2),h)\ndef points_of_surface_cone(r,h):\n    '''\n    Write a function to find the points of the surface of a cone given the radius r and the height h.\n    '''\n    return (r*math.cos(math.pi/2-h/2),r*math.sin(math.pi/2-h/2),h)\ndef edge_angle_between_two_lines(p1,p2,p3,p4):\n    '''\n    Write a function to find the angle of the two edges between two lines\n    '''\n    d = math.sqrt((p2[0]-p1[0])**2+(p2[1]-p1[1])**2)\n    if d == 0:\n        return math.pi/2\n    if d == 1:\n        return math.pi\n    if d == -1:\n        return math.pi/2\n    return math.acos((d**2 - 1)/d)\ndef intersection_angle(line1, line2):\n    '''\n    Write a function to calculate the angle between two lines.\n    '''\n    a = (line1[0]-line2[0])*(line1[1]-line2[1]) - (line1[1]-line2[1])*(line1[0]-line2[0])\n    b = line1[0]-line2[0]\n    c = line2[1]-line1[1]\n    d = a**2 - b**2 + c**2\n    if d!= 0:\n        return math.acos(a/(d**0.5))\n    else:\n        return math.pi/2\ndef make_sphere(r, h):\n    '''\n    Write a function to create a mesh for a sphere with the given radius r and height h.\n    '''\n    y = r*math.sin(math.pi/2-h/2)\n    x = r*math.cos(math.pi/2-h/2)\n    return (y,x)\ndef test_mesh(mesh):\n    '''\n    Write a function to generate a mesh for a sphere with the given radius r and height h.\n    '''\n    nx = len(mesh)\n    ny = len(mesh[0])\n    x, y = mesh\n    return (x, y, nx, ny)\ndef read_mesh(filename):\n    '''\n    Read a mesh from a text file and return a list of lists.\n    '''\n    with open(filename, \"r\") as f:\n        lines = f.readlines()\n    mesh = []\n    for line in lines:\n        l = line.split()\n        mesh.append([float(elem) for elem in l])\n    return mesh\ndef point_cloud(mesh, scale):\n    '''\n    Write a function to create a point cloud from a mesh.\n    '''\n    x, y, z = mesh\n    return (x*scale, y*scale, z*scale)\ndef volume_of_cone(r, h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    return (math.pi/4)*math.pow(math.pow(r,2)+math.pow(math.pow(h,2),2),0.5)\ndef surface_volume(r, h):\n    '''\n    Write a function to find the surface volume of a cone given radius r and height h.\n    '''\n    return math.pi/4*(r**2)*math.pow(math.pow(r,2)+math.pow(math.pow(h,2),2),0.5)\ndef surface_area_of_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone given radius r and height h.\n    '''\n    return (math.pi/4)*math.pow(math.pow(r,2)+math.pow(math.pow(h,2),2),0.5)*(r**2)*(r**2)\ndef max_area_of_cone(r, h):\n    '''\n    Write a function to find the maximum area of a cone given radius r and height h.\n    '''\n    return (math.pi/4)*math.pow(math.pow(r,2)+math.pow(math.pow(h,2),2),0.5)*(r**2)*(r**2)*(r**2)\ndef perimeter_of_cone(r, h):\n    '''\n    Write a function to find the perimeter of a cone given radius r and height h.\n    '''\n    return (math.pi/4)*math.pow(math.pow(r,2)+math.pow(math.pow(h,2),2),0.5)*(r**2)*(r**2)\ndef rectangular_surface_cone(r, h):\n    '''\n    Write a function to find the rectangular surface area of a cone given radius r and height h.\n    '''\n    return (math.pi/4)*math.pow(math.pow(r,2)+math.pow(math.pow(h,2),2),0.5)*(r**2)*(r**2)*(r**2)*(r**2)\ndef plane_area_of_cone(r, h):\n    '''\n    Write a function to find the plane area of a cone given radius r and height h.\n    '''\n    return (math.pi/4)*math.pow(math.pow(r,2)+math.pow(math.pow(h,2),2),0.5)*(r**2)*(r**2)*(r**2)\ndef surface_area_of_cylindrical_cone(r, h, phi):\n    '''\n    Write a function to find the surface area of a cone given radius r and height h.\n    '''\n    return (math.pi/4)*math.pow(math.pow(r,2)+math.pow(math.pow(h,2),2),0.5)*(r**2)*(r**2)*(r**2)*(r**2)*(r**2)\ndef surface_area_of_polygonal_cone(r, h"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Get the length of the cone\n    L = r * h\n    #Get the circumference of the cone\n    C = 2 * math.pi * (r ** 2) * h\n    #Find the area of the cone\n    A = L * C\n    return A\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A_cone = (math.pi*(r**2)*h)/3\n    return A_cone\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # set variables\n    max_radius = 1\n    max_height = 1\n    max_volume = 0\n    min_radius = 0\n    min_height = 0\n    min_volume = r**2\n    \n    # calculate the number of layers\n    n_layers = math.ceil(math.log(r,2) + 1)\n    \n    # iterate through number of layers\n    for _ in range(n_layers):\n        if min_radius < r:\n            min_radius = r\n        if min_height < h:\n            min_height = h\n        if max_radius > r:\n            max_radius = r\n        if max_height > h:\n            max_height = h\n    \n    # calculate volume of cone\n    volume = 0\n    for z in range(h):\n        # calculate the area of the surface\n        volume += math.pi * (r**2) * (r**2 * h/6)\n        # calculate the depth of surface\n        depth = math.sqrt(r**2 * (r**2 + h**2))\n        # calculate the number of layers\n        n_layers = math.ceil(math.log(depth,2) + 1)\n        \n        # iterate through the number of layers\n        for _ in range(n_layers):\n            # calculate the surface area\n            surface_area = math.pi * (r**2) * (r**2 * h/6) * (z/h)\n            # calculate the number of layers\n            n_layers = math.ceil(math.log(surface_area,2) + 1)\n            \n            # calculate the volume of the surface\n            volume += surface_area * n_layers * h\n        \n    # return the volume\n    return volume\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pow(math.sin(math.radians(45 - math.degrees(h))) * math.pow(math.cos(math.radians(45 - math.degrees(h))),2) + math.pow(math.cos(math.radians(45 - math.degrees(h))) * math.pow(math.sin(math.radians(45 - math.degrees(h))),2),2),1)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*h\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    h2 = h * h\n    return (r * (1 - (h / h2)))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*(math.sqrt(2/3)*(1-math.cos(h*math.pi/180))/(1-math.cos(r*math.pi/180)))\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\W_]+', r'\\1:', text)\n    text = re.sub(r'[.,]+', r':', text)\n    text = re.sub(r'[\\,]+', r':', text)\n    text = re.sub(r'[.]+', r':', text)\n    text = re.sub(r'\\s+', r' ', text)\n    text = re.sub(r'^\\s+', r':', text)\n    text = re.sub(r'\\s+$', r':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(' ',':')\n    text=text.replace('.',':')\n    text=text.replace(',','::')\n    text=text.replace('!','::')\n    text=text.replace('!',':')\n    text=text.replace('?','::')\n    text=text.replace('?',':')\n    text=text.replace('.','::')\n    text=text.replace('!','::')\n    text=text.replace('!',':')\n    text=text.replace('?','::')\n    text=text.replace('?',':')\n    text=text.replace('&','::')\n    text=text.replace('&',':')\n    return text\ndef get_root(text):\n    '''\n    Write a function to get the root of a string.\n    '''\n    text=text.replace(' ','')\n    if ',' in text:\n        return text.split(',')[0]\n    elif'' in text:\n        return text.split(' ')[0]\n    elif '.' in text:\n        return text.split('.')[0]\n    else:\n        return text.split(' ')[0]\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\,+', r':', text)\n    text = re.sub(r'\\;+', r':', text)\n    text = re.sub(r'\\,+', r':', text)\n    text = re.sub(r'\\;+', r':', text)\n    text = re.sub(r'\\s+', r':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':\\n')\n    text = text.replace('.',':\\n')\n    text = text.replace('[',':\\n')\n    text = text.replace(']',':\\n')\n    text = text.replace('-',':\\n')\n    text = text.replace('!',':\\n')\n    text = text.replace('$',':\\n')\n    text = text.replace('@',':\\n')\n    text = text.replace('!',':\\n')\n    text = text.replace('#',':\\n')\n    text = text.replace('&',':\\n')\n    text = text.replace('$',':\\n')\n    text = text.replace('@',':\\n')\n    text = text.replace('%',':\\n')\n    text = text.replace('*',':\\n')\n    text = text.replace('\"',':\\n')\n    text = text.replace('_',':\\n')\n    text = text.replace('/',':\\n')\n    text = text.replace('(',':\\n')\n    text = text.replace(')',':\\n')\n    text = text.replace('=',':\\n')\n    text = text.replace('+',':\\n')\n    text = text.replace('[',':\\n')\n    text = text.replace(']',':\\n')\n    text = text.replace('{',':\\n')\n    text = text.replace('}',':\\n')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':').replace('.',':').replace('#',':').replace('-',':')\\\n        .replace('!',':').replace('?',':').replace('=',':').replace('+',':')\\\n        .replace(';',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # ^ not a regex, and we don't want to get the whole string\n    # after it's processed.\n    regex_regex = r'\\s|,|\\(|\\)'\n    text = re.sub(regex_regex, \":\", text)\n    text = re.sub(regex_regex, \".\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re.sub(' +',' :', text)\n    text = re"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #replace spaces with a colon, commas with a comma, and dots with a dot\n    text = text.replace(' ',':\\n')\n    text = text.replace(' ',':\\n:')\n    text = text.replace(' ',':\\n,')\n    text = text.replace(' ',':\\n.)')\n    text = text.replace(' ',':\\n,.')\n    text = text.replace(' ',':\\n.,')\n    text = text.replace(' ',':\\n.;;')\n    text = text.replace(' ',':\\n.,;')\n    text = text.replace(' ',':\\n.,;,')\n    text = text.replace(' ',':\\n.,;;,')\n    text = text.replace(' ',':\\n.,;;;')\n    text = text.replace(' ',':\\n.,;;;')\n    text = text.replace(' ',':\\n.,;;;,')\n    text = text.replace(' ',':\\n.,;;;;')\n    text = text.replace(' ',':\\n.,;;;,,')\n    text = text.replace(' ',':\\n.,;;;,,')\n    text = text.replace(' ',':\\n.,;;;,,:')\n    text = text.replace(' ',':\\n.,;;;,,,')\n    text = text.replace(' ',':\\n.,;;;,,,')\n    text = text.replace(' ',':\\n.,;;;,,,')\n    text = text.replace(' ',':\\n.,;;;,,:')\n    text = text.replace(' ',':\\n.,;;;,,,')\n    text = text.replace(' ',':\\n.,;;;,,,')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;;;,,;')\n    text = text.replace(' ',':\\n.,;"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r\"[\\s,;.\\.\\!\\?\\\"\\'\\&\\-_=\\{\\}]\"\n    text = re.sub(pattern, \":\", text)\n    pattern = r\"[\\s,;.\\.\\!\\?\\\"\\'\\&\\-_=\\{\\}]\"\n    text = re.sub(pattern, \" \", text)\n    pattern = r\"[\\s,;.\\.\\!\\?\\\"\\'\\&\\-_=\\{\\}]\"\n    text = re.sub(pattern, \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\"_\", \":\")\n    text = text.replace(\"+\", \":\")\n    text = text.replace(\"%\", \":\")"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        raise Exception('List is empty')\n    if len(A) == 1:\n        return A.index(x)\n    else:\n        low = 0\n        high = len(A) - 1\n        while low <= high:\n            mid = int((low + high) / 2)\n            if A[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return low\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    left_index = 0\n    right_index = len(A)-1\n    \n    while left_index <= right_index:\n        middle_index = (left_index + right_index) // 2\n        \n        if A[middle_index] == x:\n            return middle_index\n        \n        elif A[middle_index] > x:\n            right_index = middle_index - 1\n        \n        else:\n            left_index = middle_index + 1\n    \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while A[i]!= x:\n        i += 1\n    return i\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    d = dict()\n    for i,v in enumerate(A):\n        if v == x:\n            return i\n        d[x] = i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    i = 0\n    for j in range(n):\n        if A[j] == x:\n            return j\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n    while start <= end:\n        mid = (start+end)//2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A):\n        if A[i] == x:\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            res += arr[i] * arr[j]\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_ = 0\n    sub_arr = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i]+arr[j]!=0):\n                sum_+=arr[i]*arr[j]\n                sub_arr.append(arr[i]*arr[j])\n    if sub_arr == []:\n        sum_=0\n    else:\n        sum_=sum(sub_arr)\n    return sum_"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total=0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            total+=sum(arr[i:j+1])\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            s+=arr[j]*(j-i+1)\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    sum = 0\n    size = len(arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    prod = 1\n    # A naive way\n    # for i in range(l):\n    #     for j in range(i,l):\n    #         prod = prod * arr[j]\n    #         # print(prod)\n    #         # print(arr[i])\n    #         # print(arr[j])\n    #         # print('----------')\n    #     # print()\n    #     prod = prod * arr[i]\n    # return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    max_val = -1\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(i, len(arr)):\n            temp += arr[j] * (i - j)\n        if temp > max_val:\n            max_val = temp\n    return max_val\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    # If array is 0 elements, return 0\n    if l == 0:\n        return 0\n    # If array is odd number, return 0\n    if l % 2 == 1:\n        return 0\n    # Find the product for each subarray\n    dp = [[0]*l for i in range(l)]\n    # Initialize first subarray with zeros\n    dp[0][0] = arr[0]\n    # For each non-empty subarray, find product of all subarrays of same length\n    for i in range(1, l):\n        dp[i][0] = dp[i-1][0]*arr[i]\n    # For each subarray of same length, find product of all subarrays\n    for i in range(1, l):\n        for j in range(i):\n            dp[i][j] = dp[i-1][j]*dp[i-1][j+1]*arr[i]\n    # return product\n    return sum(dp[l-1])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Your code here\n    s=[]\n    if len(arr)==0:\n        return 0\n    \n    for i in range(0,len(arr)):\n        s.append(arr[i])\n        \n    for i in range(1,len(arr)):\n        for j in range(0,i):\n            if arr[i]>arr[j]:\n                s[i]=arr[i]-arr[j]\n        s.append(arr[i])\n    \n    return sum(s)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle(x):\n        if x & 1 == 1:\n            x = x - 1\n            return x\n        elif x & 1 == 0:\n            x = x + 1\n            return x\n        else:\n            return 0\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    \n    if n < 0:\n        n = -n\n        \n    i = n % 4\n    while i!= 0:\n        n = toggle(n)\n        i = i - 1\n        \n    if n % 2 == 0:\n        return n\n    else:\n        return n + 1\n    \n    \ndef solution(A, B):\n    return set_middle_bits(A) * set_middle_bits(B)"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 1 << n # mask value\n    return mask ^ (1 << n - 1) # mask value \n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    if (n>0):\n        n=n&1\n        n=n|1\n        \n        print (\"The numbers are equal: \"+str(n))\n    elif (n<0):\n        n=n&1\n        n=n|1\n        \n        print (\"The numbers are equal: \"+str(n))\n    else:\n        print (\"The numbers are equal: \"+str(n))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # 1-bit:\n    if n & 0x80!= 0:\n        n ^= 0x80\n    # 2-bit:\n    if n & 0x40!= 0:\n        n ^= 0x40\n    # 3-bit:\n    if n & 0x20!= 0:\n        n ^= 0x20\n    # 4-bit:\n    if n & 0x10!= 0:\n        n ^= 0x10\n    # 5-bit:\n    if n & 0x08!= 0:\n        n ^= 0x08\n    # 6-bit:\n    if n & 0x04!= 0:\n        n ^= 0x04\n    # 7-bit:\n    if n & 0x02!= 0:\n        n ^= 0x02\n    # 8-bit:\n    if n & 0x01!= 0:\n        n ^= 0x01\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | (n >> 1) \n    n = n & (n - 1)\n    return n\n    \ndef set_bit(n,b):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ b) & (n ^ (n >> 1)) \n    return n\n    \ndef set_last_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    return n\n    \ndef set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = n >> 2\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_last_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = n >> 2\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = n >> 2\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_first_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_last_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = n >> 2\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_last_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = n >> 2\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_first_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_first_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_last_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_first_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) & ((n ^ (n >> 1)) - 1)\n    n = set_bit(n, (n >> 1))\n    n = set_bit(n, (n >> 2))\n    n = set_bit(n, (n >> 3))\n    return n\n    \ndef set_last_bit(n):  \n    '''\n    Write a python function to toggle bits of the number except the first bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-firs"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    assert type(n)==int\n    if n:\n        n = 1-n\n    else:\n        n = -1-n\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return bin(n)[2:].replace(\"0b\", \"\")\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    i=0\n    while(n):\n        if(n&1):\n            n=n&1\n            i=i+1\n        else:\n            n=n>>1\n            i=i+1\n    if(i==0):\n        return n\n    else:\n        n=n&(1<<i)\n        return n\n    \n    \n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    global number\n    bit_on = n & 0b
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    from math import log2\n    l = n\n    o = n\n    if n == 1:\n        return l\n    if l == 1:\n        l = l - 1\n    else:\n        l = l - 1\n    l = l - 1\n    if o == 1:\n        o = o - 1\n    else:\n        o = o - 1\n    if l == 0:\n        return o\n    else:\n        if l > 0:\n            return l\n        else:\n            if l < 0:\n                return l + 2\n            else:\n                return l + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x == a:\n        return a\n    \n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return a[-1]\n    else:\n        return a[i]\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i > 0:\n        return i - 1\n    else:\n        return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: Implement this function\n    left_idx = None\n    # if the key is not in the dictionary, insert it\n    if a[0] > x:\n        left_idx = bisect.bisect_left(a, x)\n        a[left_idx] = x\n        return (a,left_idx)\n    # if the key is in the dictionary, return the position of the key\n    else:\n        return (a,a.index(x))\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    j = 0\n    for i in range(len(a)):\n        if a[i] <= x:\n            j = i\n            break\n    return j\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: Write your code here\n    i = 0\n    j = len(a)\n    while i < j:\n        if a[i] < x:\n            i += 1\n            # If the value found is the value in its place, we return it. Otherwise, we insert it into the back of the list.\n            # Therefore, we find the index of the value and insert it to its place\n            if a[i] == x:\n                return i\n            else:\n                a[i], a[j] = a[j], a[i]\n        else:\n            i += 1\n            # If the value found is not the value in its place, we remove it from the front of the list.\n            # Therefore, we find the index of the value and remove it from the front of the list\n            if a[i] == x:\n                a[i], a[j] = a[j], a[i]\n            else:\n                j -= 1\n    # If we did not find the value in the list, return -1.\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    l = len(a)\n    while left < l and a[left] < x:\n        left += 1\n    if left < l:\n        a.insert(left, x)\n        return left\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return len(a)\n    if x > a[0]:\n        return 0\n    i = 0\n    j = len(a)-1\n    while i<j:\n        mid = (i + j)/2\n        if a[mid] < x:\n            i = mid + 1\n        elif a[mid] > x:\n            j = mid\n        else:\n            return mid\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while(True):\n        if a[i] < x:\n            break\n        else:\n            i += 1\n    a[i] = x\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return 0\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].islower():\n        return string[0].lower() in 'aeiouAEIOU'\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'aeiouAEIOU'\n    # VOWELS = 'aeiouAEIOU'\n    # VOWELS_RE = re.compile(VOWELS)\n    # check if string is start with vowels and not with whitespaces\n    match = re.match(regex,string)\n    if match!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'aeiouAEIOU'\n    s = string\n    t = s\n    m = 0\n    if len(string) >= 3:\n        while m < len(string) and string[m] not in vowels:\n            t = string[m]\n            m += 1\n    return t == s\ndef check_str2(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    vowels = 'aeiouAEIOU'\n    s = string\n    t = s\n    m = 0\n    if len(string) >= 3:\n        while m < len(string) and string[m] not in vowels:\n            t = string[m]\n            m += 1\n    return t == s\ndef check_str3(string):\n    '''\n    Write a function to check whether the given string is a valid phone number without format such as +44-99-999-1111 or 123-456-7890 or 123-456-7890.\n    '''\n    def check_str4(string):\n        return len(string) == 10 and all(char.isdigit() or char.isalpha() for char in string)\n    if string[-5] == '-' or string[-5] == '+':\n        if string[-5] == '-':\n            if string[-6] == '-' or string[-6] == '+':\n                return True\n        else:\n            if string[-4] == '-':\n                if string[-5] == '+':\n                    return True\n        if string[-5] == '+':\n            if string[-4] == '+':\n                return True\n    if check_str3(string) or check_str4(string):\n        if check_str4(string):\n            return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not using regex.\n    '''\n    if strin"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if not re.search(regex,string):\n        return False\n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.findall(regex, string)\n    if len(match) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try:\n        re.search(regex, string)\n        return True\n    except AttributeError:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string.startswith('A'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['A','E','I','O','U']\n    if len(string) == 1:\n        return True\n    for i in string:\n        if i in vowels:\n            return True\n        else:\n            return False\ndef check_str_r(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['A','E','I','O','U']\n    if len(string) == 1:\n        return False\n    for i in string:\n        if i in vowels:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match_vowels = re.findall(vowels, string)\n    if len(match_vowels) == 0: \n        return True\n    return False\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n+geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def function_1(n, sum_1, sum_2):\n        '''\n        Write a function that returns the sum of the numbers in the range 1, 2, 3,..., n.\n        '''\n        if n == 0:\n            return sum_1\n        else:\n            return sum_1 + function_1(n-1, sum_1+function_1(n-1, sum_2), sum_2)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 1\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geom_sum(n):\n        '''\n        Write your function here.\n        '''\n        if n <= 0:\n            return 0\n        else:\n            return n * geom_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    x = 1\n    while n > x:\n        x = math.pow(x, 2)\n        n -= 1\n    if n == 1:\n        print(x)\n    else:\n        print(math.pow(x, 2) - math.pow(2, n))\n    return x\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, 10):\n        for j in range(1, i + 1):\n            if (i % j == 0) and (i / j == int(math.log(i, j))):\n                return i \n    return -1\n    "
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # returns the index of the smallest triangular number with n digits\n    # your code goes here\n    return math.ceil(n/3) + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #your code\n    #n = 5\n    #print(find_Index(5))\n    #if you run your code with a string of 4 digit numbers (eg. 1234), your index will be 4\n    #if you run your code with a string of 10 digit numbers (eg. 123456), your index will be 10\n    #print(find_Index('123456'))\n    \n    #if you ran the code with a string of 4 digit numbers (eg. 1234), your index will be 4\n    #if you ran the code with a string of 10 digit numbers (eg. 123456), your index will be 10\n    #print(find_Index('1234'))\n    \n    #if you ran the code with a string of 10 digit numbers (eg. 123456), your index will be 10\n    #print(find_Index('123456123456'))\n    \n    #if you ran the code with a string of 10 digit numbers (eg. 123456), your index will be 10\n    #print(find_Index('1234123456123456'))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    d = 2\n    while n!= 0:\n        if n % d == 0:\n            n //= d\n        else:\n            n -= 1\n        d += 1\n    return d-1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n%2==0:\n        return find_Index(n/2)+1\n    elif n%2==1:\n        return find_Index(n-1)+1\n    else:\n        return (find_Index(n-1)+find_Index(n/2))/2\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n<=0:\n        return -1\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n%2==0:\n        return 1+(find_Index(n-1)//2)\n    else:\n        return find_Index(n-1)+(find_Index(n-2))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Get the number of digits to the left and right \n    # of the number n.\n    left_right_digits = math.ceil(math.log(n, 10))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 1: \n        return 0\n    index = math.floor(n/3) - 1\n    if (n % 3 == 0): \n        index = index - 1\n    if (n % 3 == 1): \n        index = index - 1\n    if (n % 3 == 2): \n        index = index - 1\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize a variable to store the index.\n    n_index = n\n    # Initialize a variable to store the result.\n    result = n\n    # Initialize an accumulator to store the length of the loop.\n    loop = 0\n    # Loop to iterate through the number.\n    while(loop < n):\n        # Subtract the value of current index from the previous index.\n        n_index -= 1\n        # Check for a duplicate.\n        if n_index == n_index - 1:\n            # If a duplicate, set the index to 0.\n            result = 0\n            break\n        # If not, increment the index.\n        else:\n            # If the current index is less than the previous index.\n            if n_index < loop:\n                # Increment the index.\n                loop += 1\n            # If the current index is greater than the previous index.\n            else:\n                # Add the current index to the previous index.\n                result += 1\n                # Check for a duplicate.\n                if result == loop:\n                    # If a duplicate, set the index to 0.\n                    result = 0\n                    # Increment the index.\n                    loop += 1\n    # Return the result.\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0,len(test_tup)-1):\n        if i!=len(test_tup)-2:\n            result[test_tup[i]] = test_tup[i+1]\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    # TODO: Write your function here\n    my_dict = dict()\n    \n    my_tup = test_tup[0]\n    my_key = test_tup[1]\n    my_val = test_tup[2]\n    \n    my_dict[my_key] = my_val\n    \n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(test_tup)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dic = {}\n    for i in test_tup:\n        dic[i] = 1\n    return dic\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key, value = test_tup\n    return {key : value}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize the key-value dictionary\n    key_val_dict = {}\n    # Iterate through the tuple\n    for tup in test_tup:\n        # Convert to string\n        tup_str = str(tup)\n        # Check if the tuple is in the key-value dictionary\n        if tup_str in key_val_dict:\n            # Update the key-value dictionary\n            key_val_dict[tup_str] += 1\n        else:\n            # Add the new key-value pair to the key-value dictionary\n            key_val_dict[tup_str] = 1\n    return key_val_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict((test_tup[i], test_tup[i + 1]) for i in range(0, len(test_tup) - 1))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # save the argument tuple into a variable\n    test_tuple = list(test_tup)\n    # iterate through all the elements in the tuple\n    for index, element in enumerate(test_tuple):\n        # if the current element is not a tuple\n        if element not in (\"(\", \")\"):\n            # assign the current element to a new variable\n            test_tuple[index] = element\n    # return the result\n    return test_tuple\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for el in test_tup:\n        test_dict[el[0]] = el[1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    for i in test_tup:\n        d[i] = []\n    for i in test_tup:\n        d[i].append(i)\n    return d\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # for element in s :\n    #     print(element, end=\"\")\n    #     if element not in a :\n    #         print(\"is not a character\")\n    #         exit()\n    #     if element not in b :\n    #         print(\"is not a character\")\n    #         exit()\n    #     if element == b[0] :\n    #         print(\"same\")\n    #     else :\n    #         print(\"not same\")\n    #         exit()\n    return s == s[::-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    f = open(\"data/sample.txt\", \"r\")\n    f1 = open(\"data/sample_output.txt\", \"a+\")\n    line = f.readline()\n    while line!= '':\n        print(line)\n        for char in line:\n            if char == s:\n                f1.write(char)\n                f1.write(\"\\n\")\n            else:\n                f1.write(char)\n        line = f.readline()\n    f.close()\n    f1.close()\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    from collections import Counter\n    occur = Counter(s)\n    for k in occur.keys():\n        if occur[k]!= occur[s]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #pass\n    if s.isalpha() :\n        if len(s) % 2 == 0 :\n            return True\n        else :\n            return False\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i]==s[i+1]:\n            count+=1\n        else:\n            return False\n    return count==len(s)-2\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i not in s.lower():\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if type(s)!= str :\n        return 0\n    count = 0\n    for char in s :\n        count += s.count(char)\n    return count == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # create dictionary to store character\n    list_characters = list(s)\n    char_dict = {}\n    # loop through the characters in dictionary\n    for ch in list_characters:\n        if ch in char_dict.keys():\n            char_dict[ch] += 1\n        else:\n            char_dict[ch] = 1\n    # loop through the characters in list\n    for i in char_dict.keys():\n        # if the key is a number, add the value in the dictionary\n        if char_dict[i] > 1:\n            if i not in list_characters:\n                return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    myList = []\n    for i in s :\n        myList.append(i)\n    for j in range(len(myList)) :\n        if (myList[j]!= myList[j+1]):\n            return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side > 0:\n        if side == 1:\n            return 1\n        else:\n            return side*side\n    else:\n        return 0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side * (3.141592 / 6)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1.0/6 * side ** 3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'p':\n        return 0.25*side**3\n    elif side =='s':\n        return 0.5*side**2\n    else:\n        return side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a1 = side / 4\n    a2 = side / 2\n    a3 = side / 4\n    a4 = side / 3\n    a5 = side / 6\n    a6 = side / 3\n    a7 = side / 3\n    a8 = side / 3\n    a9 = side / 6\n    a10 = side / 3\n    a11 = side / 6\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    phi = (math.pi)/4\n    a2 = b2 = c2 = 0\n    s1 = s2 = s3 = 0\n    u1 = u2 = u3 = 0\n    v1 = v2 = v3 = 0\n    u3 = 0\n    v3 = 1\n    v1 = v2 = v3 = 1\n    s1 = math.sqrt(a**2 - b**2)\n    s2 = math.sqrt(a**2 - c**2)\n    s3 = math.sqrt(b**2 - c**2)\n    if side == 1:\n        if s1 == b or s1 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s2 == b or s2 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s3 == c or s3 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s1 == a or s1 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s1 == c or s1 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s2 == a or s2 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s3 == c or s3 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n    elif side == 2:\n        if s1 == b or s1 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s2 == b or s2 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s3 == c or s3 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s1 == a or s1 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s2 == a or s2 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s3 == c or s3 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n    elif side == 3:\n        if s1 == a or s1 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s2 == b or s2 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s3 == c or s3 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s1 == a or s1 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s2 == a or s2 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s3 == c or s3 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n    elif side == 4:\n        if s1 == a or s1 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s2 == b or s2 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s3 == c or s3 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s1 == a or s1 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s2 == a or s2 == b:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n        if s3 == c or s3 == a:\n            a2 = math.sqrt((a*a*a)+(b*b*b))\n            c2 = a2*2\n    u2 = u3 = 0\n    if side == 1:\n        if s1 == b or s1 == a:\n            u1 = b2*b2\n        if s2 == b or s2 == a:\n            u1 = b2*b2\n        if s3 == c or s3 == a:\n            u1 = b2*b2\n        if s1 == a or s1 == b:\n            u1 = b2*b2\n        if s2 == a or s2 == b:\n            u1 = b2*b2\n        if s3 == c or s3 == a:\n            u1 = b2*b2\n        if s1 == a or s1 == b:\n            u1 = b2*b2\n        if s2 == a or s2 == b:\n            u1 = b2*b2\n        if s3 == c or s3 == a:\n            u1 = b2*b2\n    elif side == 2:\n        if s1 == b or s1 == a:\n            u1 = b2*b2\n        if s2 == b or s2 == a:\n            u1 = b2*b2\n        if s3 == c or s3 == a:\n            u1 = b2*b2\n        if s1 == a or s1 == b:\n            u1 = b2*b2\n        if s2 == a or s2 == b:\n            u1 = b2*b2\n        if s3 == c or s3 == a:\n            u1 = b2*b2\n    elif side == 3:\n        if s1 == a or s1 == b:\n            u1 = b2*b2\n        if s2 == b or s2 == a:\n            u1 = b2*b2\n        if s3 == c or s3 == a:\n            u1 = b2*b2\n        if s1 == a or s1 == b:\n            u1 = b2*b2\n        if s2 == a or s2 == b:\n            u1 = b2*b2\n        if s3 == c or s3 == a:\n            u1 = b2*b2\n    elif side == 4:\n        if s1 == a or s1 == b:\n            u1 = b2*b2\n        if s2 == b or s2 == a:\n            u1 = b2*b2\n        if s3 == c or s3 == a:\n            u1 = b2*b2\n        if s1 == a or s1 == b:\n            u1 = b2*b2\n        if s2 == a or s2 == b:\n            u1 = b2*b2\n        if s3 == c or s3 == a:\n            u1 = b2*b2\n    if u2 == 0:\n        u2 = u1\n    return u2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 0.5 * math.pow(side,3)\n    elif side == 2:\n        return 0.5 * math.pow(side,2)\n    elif side == 3:\n        return 0.25 * math.pow(side,2)\n    elif side == 4:\n        return 0.125 * math.pow(side,2)\n    elif side == 5:\n        return 0.0625 * math.pow(side,2)\n    elif side == 6:\n        return 0.03125 * math.pow(side,2)\n    elif side == 7:\n        return 0.04375 * math.pow(side,2)\n    elif side == 8:\n        return 0.0625 * math.pow(side,3)\n    elif side == 9:\n        return 0.0625 * math.pow(side,3)\n    elif side == 10:\n        return 0.0625 * math.pow(side,3)\n    elif side == 11:\n        return 0.0625 * math.pow(side,3)\n    elif side == 12:\n        return 0.0625 * math.pow(side,3)\n    elif side == 13:\n        return 0.0625 * math.pow(side,3)\n    elif side == 14:\n        return 0.0625 * math.pow(side,3)\n    elif side == 15:\n        return 0.0625 * math.pow(side,3)\n    elif side == 16:\n        return 0.0625 * math.pow(side,3)\n    elif side == 17:\n        return 0.0625 * math.pow(side,3)\n    elif side == 18:\n        return 0.0625 * math.pow(side,3)\n    elif side == 19:\n        return 0.0625 * math.pow(side,3)\n    elif side == 20:\n        return 0.0625 * math.pow(side,3)\n    elif side == 21:\n        return 0.0625 * math.pow(side,3)\n    elif side == 22:\n        return 0.0625 * math.pow(side,3)\n    elif side == 23:\n        return 0.0625 * math.pow(side,3)\n    elif side == 24:\n        return 0.0625 * math.pow(side,3)\n    elif side == 25:\n        return 0.0625 * math.pow(side,3)\n    elif side == 26:\n        return 0.0625 * math.pow(side,3)\n    elif side == 27:\n        return 0.0625 * math.pow(side,3)\n    elif side == 28:\n        return 0.0625 * math.pow(side,3)\n    elif side == 29:\n        return 0.0625 * math.pow(side,3)\n    elif side == 30:\n        return 0.0625 * math.pow(side,3)\n    elif side == 31:\n        return 0.0625 * math.pow(side,3)\n    elif side == 32:\n        return 0.0625 * math.pow(side,3)\n    elif side == 33:\n        return 0.0625 * math.pow(side,3)\n    elif side == 34:\n        return 0.0625 * math.pow(side,3)\n    elif side == 35:\n        return 0.0625 * math.pow(side,3)\n    elif side == 36:\n        return 0.0625 * math.pow(side,3)\n    elif side == 37:\n        return 0.0625 * math.pow(side,3)\n    elif side == 38:\n        return 0.0625 * math.pow(side,3)\n    elif side == 39:\n        return 0.0625 * math.pow(side,3)\n    elif side == 40:\n        return 0.0625 * math.pow(side,3)\n    elif side == 41:\n        return 0.0625 * math.pow(side,3)\n    elif side == 42:\n        return 0.0625 * math.pow(side,3)\n    elif side == 43:\n        return 0.0625 * math.pow(side,3)\n    elif side == 44:\n        return 0.0625 * math.pow(side,3)\n    elif side == 45:\n        return 0.0625 * math.pow(side,3)\n    elif side == 46:\n        return 0.0625 * math.pow(side,3)\n    elif side == 47:\n        return 0.0625 * math.pow(side,3)\n    elif side == 48:\n        return 0.0625 * math.pow(side,3)\n    elif side == 49:\n        return 0.0625 * math.pow(side,3)\n    elif side == 50:\n        return 0.0625 * math.pow(side,3)\n    elif side == 51:\n        return 0.0625 * math.pow(side,3)\n    elif side == 52:\n        return 0.0625 * math.pow(side,3)\n    elif side == 53:\n        return 0.0625 * math.pow(side,3)\n    elif side == 54:\n        return 0.0625 * math.pow(side,3)\n    elif side == 55:\n        return 0.0625 * math.pow(side,3)\n    elif side == 56:\n        return 0.0625 * math.pow(side,3)\n    elif side == 57:\n        return 0.0625 * math.pow(side,3)\n    elif side == 58:\n        return 0.0625 * math.pow(side,3)\n    elif side == 59:\n        return 0.0625 * math.pow(side,3)\n    elif side == 60:\n        return 0.0625 * math.pow(side,3)\n    elif side == 61:\n        return 0.0625 * math.pow(side,3)\n    elif side == 62:\n        return 0.0625 * math.pow(side,3)\n    elif side == 63:\n        return 0.0625 * math.pow(side,3)\n    elif side == 64:\n        return 0.0625 * math.pow(side,3)\n    elif side == 65:\n        return 0.0625 * math.pow(side,3)\n    elif side == 66:\n        return 0.0625 * math.pow(side,3)\n    elif side == 67:\n        return 0.0625 * math.pow(side,3)\n    elif side == 68:\n        return 0.0625 * math.pow(side,3)\n    elif side == 69:\n        return 0.0625 * math.pow(side,3)\n    elif side == 70:\n        return 0.0625 * math.pow(side,3)\n    elif side == 71:\n        return 0.0625 * math.pow(side,3)\n    elif side == 72:\n        return 0.0625 * math.pow(side,3)\n    elif side == 73:\n        return 0.0625 * math.pow(side,3)\n    elif side == 74:\n        return 0.0625 * math.pow(side,3)\n    elif side == 75:\n        return 0.0625 * math.pow(side,3)\n    elif side == 76:\n        return 0.0625 * math.pow(side,3)\n    elif side == 77:\n        return 0.0625 * math.pow(side,3)\n    elif side == 78:\n        return 0.0625 * math.pow(side,3)\n    elif side == 79:\n        return 0.0625 * math.pow(side,3)\n    elif side == 80:\n        return 0.0625 * math.pow(side,3)"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area=side*side\n    print(\"The area of a tetrahedron is {}\".format(area))\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    area=math.sqrt(side*side)\n    print(\"The area of a cube is {}\".format(area))\ndef area_cube_2(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    area=side**2\n    print(\"The area of a cube is {}\".format(area))\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    volume=side**3\n    print(\"The volume of a tetrahedron is {}\".format(volume))\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume=math.sqrt(side**2)\n    print(\"The volume of a cube is {}\".format(volume))\ndef volume_cube_2(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume=side**3\n    print(\"The volume of a cube is {}\".format(volume))\ndef main():\n    print(\"1.Area of a tetrahedron.\")\n    print(\"2.Area of a cube.\")\n    print(\"3.Volume of a tetrahedron.\")\n    print(\"4.Volume of a cube.\")\n    print(\"5.Area of a cube (side2).\\n\")\n    option=int(input(\"Enter the option:\"))\n    if option == 1:\n        side=int(input(\"Enter the side of a tetrahedron: \"))\n        area_tetrahedron(side)\n    elif option == 2:\n        side=int(input(\"Enter the side of a cube: \"))\n        area_cube(side)\n    elif option == 3:\n        side=int(input(\"Enter the side of a cube: \"))\n        area_cube_2(side)\n    elif option == 4:\n        side=int(input(\"Enter the side of a cube: \"))\n        volume_tetrahedron(side)\n    elif option == 5:\n        side=int(input(\"Enter the side of a cube: \"))\n        volume_cube(side)\n    else:\n        print(\"Wrong option number\")\n    \nmain()\n    \ndef triangle_area(x):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    area=math.sqrt(x*x)\n    print(\"The area of a triangle is {}\".format(area))\ndef triangle_area_2(x):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    area=math.sqrt(x*x+x*x)\n    print(\"The area of a triangle is {}\".format(area))\ndef triangle_volume(x):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    volume=math.sqrt(x*x)\n    print(\"The volume of a triangle is {}\".format(volume))\ndef triangle_volume_2(x):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    volume=math.sqrt(x*x+x*x)\n    print(\"The volume of a triangle is {}\".format(volume))\ndef triangle_side(x):\n    '''\n    Write a function to calculate the side of a triangle.\n    '''\n    side=math.sqrt(x*x)\n    print(\"The side of a triangle is {}\".format(side))\ndef triangle_side_2(x):\n    '''\n    Write a function to calculate the side of a triangle.\n    '''\n    side=math.sqrt(x*x+x*x)\n    print(\"The side of a triangle is {}\".format(side))\ndef triangle_area_or_volume(x):\n    '''\n    Write a function to calculate the area or volume of a triangle.\n    '''\n    if x==0:\n        print(\"{} is a triangle with sides of {}\".format(x,x))\n    elif x==1:\n        print(\"{} is a triangle with sides of {} and its volume is {}\".format(x,x,x*x))\n    elif x==2:\n        print(\"{} is a triangle with sides of {} and its volume is {}\".format(x,x,x*x*x))\n    else:\n        print(\"{} is not a triangle\".format(x))\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    sides = 0\n    for i in range(3):\n        for j in range(3):\n            if i == j:\n                sides += 1\n            else:\n                side_aux = sides - (i+1)\n                area += side_aux*side_aux\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    sides = 0\n    # compute the perimeter\n    if side > 0:\n        sides = 4 * side\n        area = sides * 3.14 * 2\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    for i in range(l-1, m):\n        t = list[i]\n        j = i\n        while j > 0:\n            j -= 1\n            list[j] = list[j+1]\n        list[i] = t\n        \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return rotate_right_helper(list, m, 1, len(list))\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > len(list):\n        return list\n    left, right, pos = 0, len(list) - 1, 0\n    while pos < right:\n        if list[pos] > list[right]:\n            list[pos], list[right] = list[right], list[pos]\n        pos += 1\n    list[0], list[pos] = list[pos], list[0]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    m_index = l - m\n    for i in range(m_index):\n        list.append(list[i])\n        \n    return list\n    \ndef test_rotate_right():\n    list = [1,2,3,4,5,6]\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    list = rotate_right(list, 1)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    list = rotate_right(list, -1)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    list = rotate_right(list, 2)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    list = rotate_right(list, 3)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    list = rotate_right(list, 4)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    list = rotate_right(list, 5)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    list = rotate_right(list, 6)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    \ndef main():\n    list = [1,2,3,4,5,6]\n    print(\"\\n\")\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    rotate_right(list, 1)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    rotate_right(list, -1)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    rotate_right(list, 2)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    rotate_right(list, 3)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    rotate_right(list, 4)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    rotate_right(list, 5)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    rotate_right(list, 6)\n    print(\"rotate_right: \" + str(list))\n    print(\"\\n\")\n    \n    \n    \nmain()"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = []\n    for i in range(len(list)):\n        temp.append(list[i])\n    for i in range(len(list) - 1, -1, -1):\n        list[i] = temp[i]\n    return list\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    temp = ''\n    for i in range(len(string)):\n        temp += string[i]\n    return temp\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = [elem for elem in list for i in range(m, 0, -1)]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        j = n - i - 1\n        temp = list[j]\n        list[j] = list[i]\n        list[i] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0, len(list)):\n        index = len(list) - i - 1\n        list[index], list[i] = list[i], list[index]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in range(len(list) - 1, -1, -1):\n        new_list.append(list[i])\n    list = new_list\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    for i in range(length//2):\n        j = length-i-1\n        temp = list[i]\n        list[i] = list[j]\n        list[j] = temp\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup is None or len(test_tup) == 0\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[1] == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        if test_tup[0] is None:\n            print(\"The tuple is None\")\n        else:\n            print(\"The tuple is not None\")\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for el in test_tup:\n        if el is None:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return test_tup\n    else:\n        return None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None or len(test_tup) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test = False\n    if type(test_tup) is tuple:\n        for i in test_tup:\n            if i is None:\n                test = True\n    else:\n        if test_tup is None:\n            test = True\n    return test\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for x in test_tup:\n        if x is not None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    for i in range(startnum, endnum + 1):\n        if (i % 10) == 0:\n            numbers.append(i)\n        else:\n            pass\n    return numbers\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    # startnum > endnum\n    if startnum >= endnum:\n        raise ValueError('Startnum must be less than endnum')\n    if startnum == 0 or endnum == 0:\n        raise ValueError('Startnum and endnum must be nonzero')\n    # startnum = 999999999\n    # endnum = 999999999\n    for x in range(startnum, endnum+1):\n        if x % 10 == 0:\n            yield x\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits=[]\n    for i in range(10):\n        if i%3==0:\n            digits.append(i)\n    return digits\nprint(divisible_by_digits(2,3))\nprint(divisible_by_digits(2,10))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisiblebydigits = [i for i in range(10) if (startnum % 10 == i % 10 and endnum % 10 == i % 10)]\n    return divisiblebydigits\n    \ndef divisiblebyfactor(num, factor):\n    '''\n    Write a function to return a list of numbers whose factors are divisible by the factors given.\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # define a function that takes a number and returns the remainder of the number\n    def remainder(num):\n        rem = 0\n        for i in range(num + 1):\n            rem = rem + i\n        return rem\n    def is_prime(num):\n        if num == 1 or num == 2:\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    # find the range of all the numbers\n    x = list(range(startnum, endnum + 1))\n    # if there is only one element in the list, it's a prime number\n    if len(x) == 1:\n        return True\n    # find all the divisors of the element\n    divs = [x[i] for i in range(len(x)) if is_prime(x[i])]\n    # find all the prime numbers and find their remainder\n    rem_divs = [remainder(i) for i in divs]\n    # if the modulo of the number divs[i] is zero, it's not a prime number\n    if all(rem_divs[i] == 0 for i in range(len(rem_divs))):\n        return True\n    # if the modulo of the number divs[i] is not zero, it's a prime number\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    counter = 0\n    x = startnum\n    y = endnum\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # create a variable for the start and end number\n    start_number = int(startnum)\n    end_number = int(endnum)\n    \n    # find all the numbers that are divisible by every digit in the range\n    list_of_numbers = list(range(start_number, end_number + 1))\n    \n    # use a for loop to print the numbers\n    for number in list_of_numbers:\n        print(number)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def digits(x):\n        return x % 10\n    \n    def is_divisible_by_digits(startnum, endnum, num):\n        return startnum + num in range(endnum)\n    \n    if is_divisible_by_digits(startnum, endnum, digits(startnum)):\n        print(f'The numbers {startnum} and {endnum} are divisible by the digits {digits(startnum)}')\n    else:\n        print(f'The numbers {startnum} and {endnum} are NOT divisible by the digits {digits(startnum)}')\n        \nif __name__ == '__main__':\n    divisible_by_digits(1, 20, 3)\n    divisible_by_digits(8, 25, 9)\n    divisible_by_digits(19, 34, 3)\n    divisible_by_digits(10000, 100, 9)\n    divisible_by_digits(0, 0, 0"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for i in range(startnum, endnum+1):\n        result.append(i)\n    return result\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    n = int(math.log(r,2))\n    if n % 1!= 0:\n        n += 1\n    return math.pi*(a*n)/2\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a%360==0:\n        return round(r**2*math.sin(math.radians(a))**2)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r <= 0 or a <= 0:\n        return None\n    else:\n        return a*math.pi*(r**2)*math.sin(a)\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>0:\n        angle = math.acos((math.pow(r,2)-math.pow(a,2))/(2*r))\n        if angle>=0:\n            return r*math.sin(angle)\n        else:\n            print(\"Angle out of range\")\n    else:\n        angle = math.acos((math.pow(r,2)-math.pow(a,2))/(2*r))\n        if angle>=0:\n            return r*math.sin(angle)\n        else:\n            print(\"Angle out of range\")\ndef sector_volume(a):\n    '''\n    Write a function to calculate volume of a sector. The function should return None if the sector has no children.\n    '''\n    s = sector_area(a,a)\n    if s is None:\n        return None\n    else:\n        return math.pi*a*(s*s)\ndef sector_height(r,a):\n    '''\n    Write a function to calculate height of a sector. The function should return None if the sector has no children.\n    '''\n    if r>0:\n        h = math.sin(math.pi/2*a)*sector_volume(r)\n        if h>0:\n            return r*math.cos(math.pi/2*a)*h\n        else:\n            print(\"Height out of range\")\n    else:\n        h = math.sin(math.pi/2*a)*sector_volume(r)\n        if h>0:\n            return r*math.cos(math.pi/2*a)*h\n        else:\n            print(\"Height out of range\")\ndef sector_volume_2(r,a):\n    '''\n    Write a function to calculate volume of a sector. The function should return None if the sector has no children.\n    '''\n    if r>0:\n        volume = (sector_height(r,a)*sector_volume(r))/(sector_area(r,a))\n        if volume>0:\n            return volume\n        else:\n            print(\"Volume out of range\")\n    else:\n        volume = (sector_height(r,a)*sector_volume(r))/(sector_area(r,a))\n        if volume>0:\n            return volume\n        else:\n            print(\"Volume out of range\")\ndef sector_height_2(r,a):\n    '''\n    Write a function to calculate height of a sector. The function should return None if the sector has no children.\n    '''\n    if r>0:\n        height = math.sin(math.pi/2*a)*sector_volume(r)\n        if height>0:\n            return height\n        else:\n            print(\"Height out of range\")\n    else:\n        height = math.sin(math.pi/2*a)*sector_volume(r)\n        if height>0:\n            return height\n        else:\n            print(\"Height out of range\")\ndef sector_height_3(r,a):\n    '''\n    Write a function to calculate height of a sector. The function should return None if the sector has no children.\n    '''\n    if r>0:\n        height = math.sin(math.pi/2*a)*sector_volume(r)\n        if height>0:\n            return height\n        else:\n            print(\"Height out of range\")\n    else:\n        height = math.sin(math.pi/2*a)*sector_volume(r)\n        if height>0:\n            return height\n        else:\n            print(\"Height out of range\")\ndef sector_volume_3(r,a):\n    '''\n    Write a function to calculate volume of a sector. The function should return None if the sector has no children.\n    '''\n    if r>0:\n        volume = (sector_volume_2(r,a)*sector_height_2(r,a))/(sector_area_2(r,a))\n        if volume>0:\n            return volume\n        else:\n            print(\"Volume out of range\")\n    else:\n        volume = (sector_volume_2(r,a)*sector_height_2(r,a))/(sector_area_2(r,a))\n        if volume>0:\n            return volume\n        else:\n            print(\"Volume out of range\")\ndef sector_height_3_2(r,a):\n    '''\n    Write a function to calculate height of a sector. The function should return None if the sector has no children.\n    '''\n    if r>0:\n        height = math.sin(math.pi/2*a)*sector_volume_3(r,a)\n        if height>0:\n            return height\n        else:\n            print(\"Height out of range\")\n    else:\n        height = math.sin(math.pi/2*a)*sector_volume_3(r,a)\n        if height>0:\n            return height\n        else:\n            print(\"Height out of range\")\ndef sector_height_3_3(r,a):\n    '''\n    Write a function to calculate height of a sector. The function should return None if the sector has no children.\n    '''\n    if r>0:\n        height = math.sin(math.pi/2*a)*sector_volume_3(r,a)\n        if height>0:\n            return height\n        else:\n            print(\"Height out of range\")\n    else:\n        height = math.sin(math.pi/2*a)*sector_volume_3(r,a)\n        if height>0:\n            return height\n        else:\n            print(\"Height out of range\")\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<180:\n        a=a*math.pi\n    return 2*r*math.sin(a)/math.tan(a)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    while r>0 and a>0:\n        r,a = r/2,a-180\n        if a>360:\n            a -= 360\n        # print(a)\n        # print(r)\n        r,a = math.radians(r),math.radians(a)\n        # print(r,a)\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # angle = angle of the sector\n    angle = ((math.pi/180)*r)\n    # area of the sector\n    area = r*math.sin(angle)\n    #print(area)\n    #print(angle)\n    #print(area)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>1:\n        if r==2:\n            return math.pi*a*(a-math.pi)\n        elif r==3:\n            return math.pi*a*(a-math.pi)*math.sin(math.radians(a))\n        elif r==4:\n            return math.pi*a*(a-math.pi)*math.sin(math.radians(a-math.pi))\n        elif r==5:\n            return a*math.sin(math.radians(a))\n        elif r==6:\n            return math.pi*a*(a-math.pi)*math.cos(math.radians(a))\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #math.pi is 3.141592\n    angle = math.pi*r/2\n    #sector area is math.pi*r*math.cos(angle)\n    sector_area = math.pi*r*a*math.cos(angle)\n    return sector_area\n    \ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #math.pi is 3.141592\n    angle = math.pi*r/2\n    #sector area is math.pi*r*math.cos(angle)\n    sector_volume = math.pi*r*a*math.sin(angle)\n    return sector_volume\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>0:\n        phi=math.pi/180*a\n        return (r**2*math.sin(phi))\n    elif r<0:\n        phi=math.pi/180*a\n        return (r**2*math.cos(phi))\n    else:\n        return None\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Initialize LCS as a dictionary\n    # Use the variable names for our algorithm and the dictionary values as the keys\n    LCS = {'a':'','b':'','c':''}\n    # Iterate through every word in sequence X\n    for i in range(len(X)): \n        # Iterate through every word in sequence Y\n        for j in range(len(Y)): \n            # If a letter appears in X but not in Y, the LCS will be invalid\n            if X[i] not in LCS.keys() or Y[j] not in LCS.keys(): \n                LCS[X[i]] = '*'\n            # If a letter appears in X and Y, \n            # LCS will be valid\n            else: \n                LCS[X[i]] = LCS[X[i]] + Y[j]\n        # If a letter occurs in Y, LCS will be valid\n        if j == len(Y) - 1: \n            LCS[Y[j]] = LCS[Y[j]] + X[i] \n        # If a letter occurs in X, LCS will be valid\n        else: \n            LCS[Y[j]] = LCS[Y[j]] + LCS[X[i]] \n    # Return the longest common subsequence\n    return LCS['a'] + LCS['b'] + LCS['c']\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = [[0 for x in range(n+1)] for y in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                l[i][j] = l[i-1][j-1] + 1\n            else:\n                l[i][j] = max(l[i-1][j], l[i][j-1])\n    LCS = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if l[i][j] >= 2:\n            LCS.append(l[i][j])\n            i -= 1\n            j -= 1\n        elif l[i][j] == 1:\n            i -= 1\n        else:\n            j -= 1\n    LCS = sorted(LCS)\n    return LCS[-2]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    x = [0 for i in range(len(X) + 1)]\n    y = [0 for i in range(len(Y) + 1)]\n    z = [0 for i in range(len(Z) + 1)]\n    \n    for i in range(1, len(X) + 1):\n        x[i] = x[i - 1] + 1\n    \n    for i in range(1, len(Y) + 1):\n        y[i] = y[i - 1] + 1\n    \n    for i in range(1, len(Z) + 1):\n        z[i] = z[i - 1] + 1\n        \n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                x[i] = max(x[i - 1], x[i - 1] + 1)\n            elif X[i - 1] == Z[j - 1]:\n                y[j] = max(y[j - 1], y[j - 1] + 1)\n    \n    max_x = x[-1]\n    \n    for i in range(len(X) - 1, -1, -1):\n        if x[i] == max_x:\n            max_x = x[i]\n            index = i\n    \n    for i in range(len(Y) - 1, -1, -1):\n        if y[i] == max_x:\n            max_x = y[i]\n            index = i\n    \n    for i in range(len(Z) - 1, -1, -1):\n        if z[i] == max_x:\n            max_x = z[i]\n            index = i\n        \n    return index\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # s = list(set(X) | set(Y) | set(Z))\n    # m, n, o = len(X), len(Y), len(Z)\n    #\n    # # find the longest common subsequence for each of the given strings\n    # for i in range(m):\n    #     for j in range(n):\n    #         for k in range(o):\n    #             if (X[i] == Z[k] or Y[j] == Z[k] or X[i] == Y[j] or Y[j] == Z[k]):\n    #                 pass\n    #             else:\n    #                 break\n    #         else:\n    #             pass\n    #     else:\n    #         pass\n    #     return max(i,j,k)\n    \n    # s = list(set(X) | set(Y) | set(Z))\n    \n    # m, n, o = len(X), len(Y), len(Z)\n    #\n    # def lcs_of_three(X, Y, Z):\n    #     '''\n    #     Write a function to find the longest common subsequence for the given three string sequence.\n    #     https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings-python/\n    #     '''\n    #     s = [0] * (n + 1)\n    #     for i in range(m):\n    #         for j in range(n):\n    #             for k in range(o):\n    #                 if X[i] == Z[k] or Y[j] == Z[k] or X[i] == Y[j] or Y[j] == Z[k]:\n    #                     s[j + 1] = max(s[j + 1], s[j])\n    #                 else:\n    #                     break\n    #             else:\n    #                 s[j + 1] = max(s[j + 1], s[j])\n    #     else:\n    #         pass\n    #     return max(s)\n    \n    # s = list(set(X) | set(Y) | set(Z))\n    \n    # m, n, o = len(X), len(Y), len(Z)\n    #\n    # def lcs_of_three(X, Y, Z):\n    #     '''\n    #     Write a function to find the longest common subsequence for the given three string sequence.\n    #     https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings-python/\n    #     '''\n    #     s = []\n    #     for i in range(m):\n    #         for j in range(n):\n    #             for k in range(o):\n    #                 if (X[i] == Z[k] or Y[j] == Z[k] or X[i] == Y[j] or Y[j] == Z[k]):\n    #                     s.append(i + 1)\n    #                 else:\n    #                     break\n    #             else:\n    #                 pass\n    #         else:\n    #             pass\n    #     return max(s)\n    \n    # s = list(set(X) | set(Y) | set(Z))\n    \n    # m, n, o = len(X), len(Y), len(Z)\n    #\n    # def lcs_of_three(X, Y, Z):\n    #     '''\n    #     Write a function to find the longest common subsequence for the given three string sequence.\n    #     https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings-python/\n    #     '''\n    #     s = []\n    #     for i in range(m):\n    #         for j in range(n):\n    #             for k in range(o):\n    #                 if (X[i] == Z[k] or Y[j] == Z[k] or X[i] == Y[j] or Y[j] == Z[k]):\n    #                     s.append(i + 1)\n    #                 else:\n    #                     break\n    #             else:\n    #                 pass\n    #         else:\n    #             pass\n    #     else:\n    #         pass\n    #     return max(s)\n    \n    # s = list(set(X) | set(Y) | set(Z))\n    \n    # m, n, o = len(X), len(Y), len(Z)\n    #\n    # def lcs_of_three(X, Y, Z):\n    #     '''\n    #     Write a function to find the longest common subsequence for the given three string sequence.\n    #     https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings-python/\n    #     '''\n    #     s = []\n    #     for i in range(m):\n    #         for j in range(n):\n    #             for k in range(o):\n    #                 if (X[i] == Z[k] or Y[j] == Z[k] or X[i] == Y[j] or Y[j] == Z[k]):\n    #                     s.append(i + 1)\n    #                 else:\n    #                     break\n    #             else:\n    #                 pass\n    #         else:\n    #             pass\n    #     else:\n    #         pass\n    #     return max(s)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    l = len(X)\n    c = [[-1 for _ in range(l)] for _ in range(l)]\n    for i in range(l):\n        for j in range(l):\n            if i == 0 or j == 0: \n                c[i][j] = 0\n            elif X[i] == Y[j] and c[i-1][j]!= -1:\n                c[i][j] = c[i-1][j]\n            elif X[i] == Z[j] and c[i-1][j] == -1:\n                c[i][j] = 1 + c[i-1][j-1]\n            else: \n                c[i][j] = max(c[i-1][j], c[i-1][j-1])\n    return c[-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    l = []\n    m = 0\n    n = 0\n    while m < len(X) and n < len(Y):\n        if X[m] == Y[n]:\n            l.append(X[m])\n            m += 1\n            n += 1\n        elif X[m] < Y[n]:\n            m += 1\n        else:\n            n += 1\n    return \"\".join(l)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if (len(X) <= 0 or len(Y) <= 0 or len(Z) <= 0):\n        return -1\n    if (X == Y == Z):\n        return len(X)\n    if (X[0] == Y[0] == Z[0]):\n        return lcs_of_three(X[1:], Y, Z[1:]) + lcs_of_three(X[1:], Z, Y[1:])\n    else:\n        return max(lcs_of_three(X, Y, Z), lcs_of_three(X, Z, Y), lcs_of_three(Y, X, Z))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs_of_three_set(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        dp = [[0] * (n+1) for i in range(m+1)]\n        for i in range(m+1):\n            for j in range(n+1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif X[i-1] == Y[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]\n    \n    def lcs_of_three_rec(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        dp = [[0] * (n+1) for i in range(m+1)]\n        for i in range(m+1):\n            for j in range(n+1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif X[i-1] == Y[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    L = [[None] * (n+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X)\n    N = len(Y)\n    \n    if M == 0 or N == 0 or M == N:\n        return 0\n    \n    # Initialize the result\n    # dp[i][j] = dp[i-1][j-1] + 1 (m, n)\n    # In case m == 1 and n == 1, dp[0][0] = 1\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + 1)\n    \n    # Initilize dp[i][j]\n    dp = [[0]*(N+1) for _ in range(M+1)]\n    \n    for i in range(1, M+1):\n        for j in range(1, N+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # Find the result\n    i, j = M, N\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        else:\n            if dp[i-1][j] > dp[i][j-1]:\n                i -= 1\n            else:\n                j -= 1\n    \n    # Return the result\n    return dp[M][N]\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex_lower = re.compile(\"[a-zA-Z]+\")\n    regex_upper = re.compile(\"[A-Z]+\")\n    regex_digit = re.compile(\"[0-9]+\")\n    \n    lower_count = 0\n    upper_count = 0\n    digit_count = 0\n    \n    str_list = str1.split()\n    for item in str_list:\n        lower = regex_lower.findall(item)\n        upper = regex_upper.findall(item)\n        digit = regex_digit.findall(item)\n        if len(lower) > 0 and len(upper) > 0 and len(digit) > 0:\n            for i in range(len(lower)):\n                if i == 0:\n                    lower_count += 1\n                elif lower[i]!= lower[i-1]:\n                    lower_count += 1\n                if i == len(lower) - 1:\n                    upper_count += 1\n                elif upper[i]!= upper[i-1]:\n                    upper_count += 1\n                if i == len(lower) - 1:\n                    digit_count += 1\n                elif digit[i]!= digit[i-1]:\n                    digit_count += 1\n    return lower_count, upper_count, digit_count\n        \ndef find_count(str1, str2):\n    '''\n    Write a function that takes two strings, and returns the number of times that one string appears in the other.\n    '''\n    lower_count, upper_count, digit_count = capital_words_spaces(str1)\n    if str2.lower().count(str1.lower()) > str1.lower().count(str2.lower()):\n        return lower_count\n    return upper_count\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    # Write your code here\n    str1 = str1.lower()\n    result = re.findall(r'^([A-Z]+)(?:\\s|$)', str1)\n    for i in result:\n        if i[0] =='s':\n            result = i[1] + i[0] + i[2:]\n            str1 = str1.replace(i[0], result)\n    return str1\ndef space_convert_to_number(str1):\n    '''\n    Write a function to convert a string of space to the number of characters.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'\\s+', str1)\n    for i in result:\n        result = len(i)\n    return result\n    \ndef lowercase_letters(str1):\n    '''\n    Write a function that replaces all lowercase letters with uppercase.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[a-z]+', str1)\n    for i in result:\n        result = i.upper()\n    str1 = str1.replace(result, i)\n    return str1\ndef replace_non_cap(str1):\n    '''\n    Write a function that replaces all non-capital letters with their\n    replaced_letter function.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[^a-z]+', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef replace_non_num(str1):\n    '''\n    Write a function that replaces all non-number symbols with their replaced_symbol function.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[^0-9]+', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef concatenate_strings(str1, str2):\n    '''\n    Write a function that concatenates two strings of numbers.\n    '''\n    \n    # Write your code here\n    str1 = str1 + str2\n    result = re.findall(r'[0-9]+', str1)\n    for i in result:\n        result = i.upper()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef spaces_to_numbers(str1):\n    '''\n    Write a function that converts string to an array of numbers.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'\\d+', str1)\n    for i in result:\n        result = i.upper()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef numbers_to_numbers(str1):\n    '''\n    Write a function that converts an array of numbers to string.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'\\d+', str1)\n    for i in result:\n        result = i.upper()\n    str1 = str1.replace(result, i)\n    return str1\ndef split_numbers(str1):\n    '''\n    Write a function that splits the numbers in a string.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'\\d+', str1)\n    for i in result:\n        result = i.split(',')\n    str1 = str1.replace(result, result.replace(',',''))\n    return str1\ndef fix_words(str1):\n    '''\n    Write a function that converts a string to a list of strings.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[a-z]+', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef list_to_string(str1):\n    '''\n    Write a function that converts a list of strings to a string.\n    '''\n    \n    # Write your code here\n    str1 =''.join(str1)\n    return str1\ndef add_space(str1):\n    '''\n    Write a function that adds spaces between words starting with capital letters in a given string.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[^a-z]+', str1)\n    for i in result:\n        result = i.upper()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef re_replace_non_num(str1):\n    '''\n    Write a function that replaces all non-number symbols with their replaced_symbol function.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[^0-9]+', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef remove_special_char(str1):\n    '''\n    Write a function that replaces special characters with their replaced_symbol function.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[^\\\\]', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef remover_punctuation(str1):\n    '''\n    Write a function that replaces all punctuation symbols with their replaced_symbol function.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[^\\w\\s]', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function that replaces all punctuation symbols with their replaced_symbol function.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[^\\w\\s]', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef remover_whitespace(str1):\n    '''\n    Write a function that replaces all whitespace symbols with their replaced_symbol function.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[\\s]+', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef remove_extra_spaces(str1):\n    '''\n    Write a function that replaces all spaces with its spaces replaced by their replaced_symbol function.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'\\s+', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef capitalize_words(str1):\n    '''\n    Write a function that capitalizes each word in a given string.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'[A-Z]+', str1)\n    for i in result:\n        result = i.upper()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef normalize_spaces(str1):\n    '''\n    Write a function that replaces all space symbols with their replaced_symbol function.\n    '''\n    \n    # Write your code here\n    result = re.findall(r'\\s+', str1)\n    for i in result:\n        result = i.lower()\n    str1 = str1.replace(result, result.upper())\n    return str1\ndef first_convert_to_number(str1):\n    '''\n    Write "
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # initialize empty string\n    str2 = ''\n    # find all words with capital letters\n    for word in str1.split():\n        # if word starts with capital letter, add spaces to end of word\n        if re.search(r'^[A-Z]', word):\n            str2 += word +''\n        # if word does not start with capital letter, add spaces to end of word\n        elif word[0].isupper():\n            str2 += word[0] +''\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = str1.split()\n    str1 = ''\n    for i in words:\n        if re.match('(.)\\\\1{1}',i):\n            str1 +='' + i +''\n        else:\n            str1 += i +''\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1_clean = str1.strip()\n    str1_clean = str1_clean.replace('\\n','').replace('\\r','').replace('\\t','')\n    str1_clean = str1_clean.split(' ')\n    str1_clean = [x.capitalize() if 'A' <= x <= 'Z' else x for x in str1_clean]\n    str1_clean =''.join(str1_clean)\n    return str1_clean\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.split('[A-Z]', str1)\n    for i in range(len(str2)):\n        str2[i] = str2[i].capitalize()\n    str3 = \" \".join(str2)\n    return str3\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    n=0\n    t=''\n    while n<len(str1):\n        if str1[n]==' ':\n            t=t+' '\n            n=n+1\n        elif str1[n]=='.':\n            t=t+'.'\n            n=n+1\n        elif str1[n]=='?':\n            t=t+'?'\n            n=n+1\n        elif str1[n]=='!':\n            t=t+'!'\n            n=n+1\n        elif str1[n]=='?' or str1[n]=='.' or str1[n]=='!':\n            t=t+str1[n]\n            n=n+1\n        else:\n            t=t+str1[n]\n            n=n+1\n    return t"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex = re.compile(r'(\\W|^)([a-zA-Z\\']+)(?=[A-Z])')\n    list_of_words = regex.findall(str1)\n    new_str = ''\n    for word in list_of_words:\n        new_str += word[1] +''\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.strip()\n    words = str1.split()\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if words[i][0].isupper() and words[j][0].isupper():\n                words[i] = words[i] + \" \" + words[j]\n    str1 = \" \".join(words)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.strip() # removes whitespace\n    str1 = str1.replace('  ','') # remove spaces between words\n    str1 = str1.replace('...','') # remove words after spaces\n    str1 = str1.replace('   ','') # remove spaces after words\n    str1 = str1.replace('\\'','') # remove spaces before words\n    str1 = str1.replace('!','') # remove spaces before words\n    str1 = str1.replace('#','') # remove spaces before words\n    str1 = str1.replace('$','') # remove spaces before words\n    str1 = str1.replace('%','') # remove spaces before words\n    str1 = str1.replace('&','') # remove spaces before words\n    str1 = str1.replace('*','') # remove spaces before words\n    str1 = str1.replace('(','') # remove spaces before words\n    str1 = str1.replace(')','') # remove spaces before words\n    str1 = str1.replace('-','') # remove spaces before words\n    str1 = str1.replace('_','') # remove spaces before words\n    str1 = str1.replace('+','') # remove spaces before words\n    str1 = str1.replace('+','') # remove spaces before words\n    str1 = str1.replace('[','') # remove spaces before words\n    str1 = str1.replace(']','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('}','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('\\'','') # remove spaces before words\n    str1 = str1.replace('!','') # remove spaces before words\n    str1 = str1.replace('#','') # remove spaces before words\n    str1 = str1.replace('$','') # remove spaces before words\n    str1 = str1.replace('%','') # remove spaces before words\n    str1 = str1.replace('&','') # remove spaces before words\n    str1 = str1.replace('*','') # remove spaces before words\n    str1 = str1.replace('(','') # remove spaces before words\n    str1 = str1.replace(')','') # remove spaces before words\n    str1 = str1.replace('-','') # remove spaces before words\n    str1 = str1.replace('_','') # remove spaces before words\n    str1 = str1.replace('+','') # remove spaces before words\n    str1 = str1.replace('+','') # remove spaces before words\n    str1 = str1.replace('[','') # remove spaces before words\n    str1 = str1.replace(']','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('}','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('\\'','') # remove spaces before words\n    str1 = str1.replace('!','') # remove spaces before words\n    str1 = str1.replace('#','') # remove spaces before words\n    str1 = str1.replace('$','') # remove spaces before words\n    str1 = str1.replace('%','') # remove spaces before words\n    str1 = str1.replace('&','') # remove spaces before words\n    str1 = str1.replace('*','') # remove spaces before words\n    str1 = str1.replace('(','') # remove spaces before words\n    str1 = str1.replace(')','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('}','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('\\'','') # remove spaces before words\n    str1 = str1.replace('!','') # remove spaces before words\n    str1 = str1.replace('#','') # remove spaces before words\n    str1 = str1.replace('$','') # remove spaces before words\n    str1 = str1.replace('%','') # remove spaces before words\n    str1 = str1.replace('&','') # remove spaces before words\n    str1 = str1.replace('*','') # remove spaces before words\n    str1 = str1.replace('(','') # remove spaces before words\n    str1 = str1.replace(')','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('}','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('\\'','') # remove spaces before words\n    str1 = str1.replace('!','') # remove spaces before words\n    str1 = str1.replace('#','') # remove spaces before words\n    str1 = str1.replace('$','') # remove spaces before words\n    str1 = str1.replace('%','') # remove spaces before words\n    str1 = str1.replace('&','') # remove spaces before words\n    str1 = str1.replace('*','') # remove spaces before words\n    str1 = str1.replace('(','') # remove spaces before words\n    str1 = str1.replace(')','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('}','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('\\'','') # remove spaces before words\n    str1 = str1.replace('!','') # remove spaces before words\n    str1 = str1.replace('#','') # remove spaces before words\n    str1 = str1.replace('$','') # remove spaces before words\n    str1 = str1.replace('%','') # remove spaces before words\n    str1 = str1.replace('&','') # remove spaces before words\n    str1 = str1.replace('*','') # remove spaces before words\n    str1 = str1.replace('(','') # remove spaces before words\n    str1 = str1.replace(')','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('}','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('\\'','') # remove spaces before words\n    str1 = str1.replace('!','') # remove spaces before words\n    str1 = str1.replace('#','') # remove spaces before words\n    str1 = str1.replace('$','') # remove spaces before words\n    str1 = str1.replace('%','') # remove spaces before words\n    str1 = str1.replace('&','') # remove spaces before words\n    str1 = str1.replace('*','') # remove spaces before words\n    str1 = str1.replace('(','') # remove spaces before words\n    str1 = str1.replace(')','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('}','') # remove spaces before words\n    str1 = str1.replace('{','') # remove spaces before words\n    str1 = str1.replace('\\'', "
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if len(nums_str) == 0:\n        return []\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: (x.split()))\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    numbers = list(map(int, nums_str))\n    numbers.sort()\n    return numbers\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        if type(num) == int or type(num) == float:\n            nums.append(num)\n        else:\n            nums.append(num.lower())\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # import time\n    \n    # start_time = time.time()\n    \n    # nums_str = list(nums_str)\n    \n    # for i in range(0,len(nums_str)):\n    #     num_char = nums_str[i]\n    #     nums_char = nums_str[i]\n    #     if num_char == '.':\n    #         nums_str[i] = \"0\"\n    #     elif num_char == ',':\n    #         nums_str[i] = \".\"\n    #     elif num_char == '-':\n    #         nums_str[i] = \"-1\"\n    #     else:\n    #         pass\n    #     nums_str[i] = int(nums_str[i])\n    #     nums_str[i] = num_char\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char.replace(\"-\", \"\")\n    #     nums_str[i] = num_char.replace(\"(\", \"\")\n    #     nums_str[i] = num_char.replace(\")\", \"\")\n    #     nums_str[i] = num_char.replace(\".\", \"\")\n    #     nums_str[i] = num_char.replace(\" \", \"\")\n    #     nums_str[i] = str(nums_str[i])\n    #     nums_str[i] = num_char.replace(\",\", \"\")\n    #     nums_str[i] = num_char"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = nums_str.split()\n    nums.sort()\n    return''.join(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Add extra space in between each item in the list\n    for i in range(len(nums_str)):\n        nums_str[i] += \" \"\n    # Sort numeric strings based on their length\n    nums_str.sort()\n    # Sort numeric strings based on their values\n    nums_str = list(map(lambda x: int(x) if x.isnumeric() else x, nums_str))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums_str.sort()\n    \n    #print(nums_str)\n    \n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: abs(int(x)) if x.isnumeric() else x)\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_list == None or test_tup == None:\n        return\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    tup_list = []\n    for elem in test_tup:\n        tup_list.append(elem)\n    tup_list.append(test_list)\n    return tup_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    if arr[i] < arr[-1]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i == 0:\n        return True\n    \n    # check if the heap at index i is not modified\n    # if it is, then it is not a min heap\n    if arr[i] < arr[i//2]:\n        return False\n    \n    # call again recursively for all the elements in the subheap\n    # compare with the min element of the heap\n    # if the heap is not modified, then we have found a min heap\n    return check_min_heap_helper(arr, i//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i] < arr[i//2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    return arr[i] < arr[i//2] and check_min_heap_helper(arr, i//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i//2] < arr[i] and arr[i//2] > arr[(i*2)//2]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr):\n        return False\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    else:\n        if arr[i] < arr[2 * i] and arr[2 * i + 1] < arr[2 * i]:\n            return False\n        else:\n            return check_min_heap_helper(arr, 2 * i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i == len(arr):\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    from math import log, sqrt\n    L = len(n)\n    if L == 0:\n        return 1\n    elif L == 1:\n        return int(n[0])\n    elif L == 2:\n        return int(n[0]) + int(n[1])\n    else:\n        if n[0] == n[1]:\n            return int(n[0]) + int(n[1]) + int(n[2])\n        elif n[0] == n[2]:\n            return int(n[0]) + int(n[2]) + int(n[3])\n        elif n[0] == n[3]:\n            return int(n[0]) + int(n[3]) + int(n[4])\n        elif n[0] == n[4]:\n            return int(n[0]) + int(n[4]) + int(n[5])\n        elif n[0] == n[5]:\n            return int(n[0]) + int(n[5]) + int(n[6])\n        elif n[0] == n[6]:\n            return int(n[0]) + int(n[6]) + int(n[7])\n        elif n[0] == n[7]:\n            return int(n[0]) + int(n[7]) + int(n[8])\n        elif n[0] == n[8]:\n            return int(n[0]) + int(n[8]) + int(n[9])\n        elif n[0] == n[9]:\n            return int(n[0]) + int(n[9]) + int(n[10])\n        elif n[0] == n[10]:\n            return int(n[0]) + int(n[10]) + int(n[11])\n        elif n[0] == n[11]:\n            return int(n[0]) + int(n[11]) + int(n[12])\n        elif n[0] == n[12]:\n            return int(n[0]) + int(n[12]) + int(n[13])\n        elif n[0] == n[13]:\n            return int(n[0]) + int(n[13]) + int(n[14])\n        elif n[0] == n[14]:\n            return int(n[0]) + int(n[14]) + int(n[15])\n        elif n[0] == n[15]:\n            return int(n[0]) + int(n[15]) + int(n[16])\n        elif n[0] == n[16]:\n            return int(n[0]) + int(n[16]) + int(n[17])\n        elif n[0] == n[17]:\n            return int(n[0]) + int(n[17]) + int(n[18])\n        elif n[0] == n[18]:\n            return int(n[0]) + int(n[18]) + int(n[19])\n        elif n[0] == n[19]:\n            return int(n[0]) + int(n[19]) + int(n[20])\n        elif n[0] == n[20]:\n            return int(n[0]) + int(n[20]) + int(n[21])\n        elif n[0] == n[21]:\n            return int(n[0]) + int(n[21]) + int(n[22])\n        elif n[0] == n[22]:\n            return int(n[0]) + int(n[22]) + int(n[23])\n        elif n[0] == n[23]:\n            return int(n[0]) + int(n[23]) + int(n[24])\n        elif n[0] == n[24]:\n            return int(n[0]) + int(n[24]) + int(n[25])\n        elif n[0] == n[25]:\n            return int(n[0]) + int(n[25]) + int(n[26])\n        elif n[0] == n[26]:\n            return int(n[0]) + int(n[26]) + int(n[27])\n        elif n[0] == n[27]:\n            return int(n[0]) + int(n[27]) + int(n[28])\n        elif n[0] == n[28]:\n            return int(n[0]) + int(n[28]) + int(n[29])\n        elif n[0] == n[29]:\n            return int(n[0]) + int(n[29]) + int(n[30])\n        elif n[0] == n[30]:\n            return int(n[0]) + int(n[30]) + int(n[31])\n        elif n[0] == n[31]:\n            return int(n[0]) + int(n[31]) + int(n[32])\n        elif n[0] == n[32]:\n            return int(n[0]) + int(n[32]) + int(n[33])\n        elif n[0] == n[33]:\n            return int(n[0]) + int(n[33]) + int(n[34])\n        elif n[0] == n[34]:\n            return int(n[0]) + int(n[34]) + int(n[35])\n        elif n[0] == n[35]:\n            return int(n[0]) + int(n[35]) + int(n[36])\n        elif n[0] == n[36]:\n            return int(n[0]) + int(n[36]) + int(n[37])\n        elif n[0] == n[37]:\n            return int(n[0]) + int(n[37]) + int(n[38])\n        elif n[0] == n[38]:\n            return int(n[0]) + int(n[38]) + int(n[39])\n        elif n[0] == n[39]:\n            return int(n[0]) + int(n[39]) + int(n[40])\n        elif n[0] == n[40]:\n            return int(n[0]) + int(n[40]) + int(n[41])\n        elif n[0] == n[41]:\n            return int(n[0]) + int(n[41]) + int(n[42])\n        elif n[0] == n[42]:\n            return int(n[0]) + int(n[42]) + int(n[43])\n        elif n[0] == n[43]:\n            return int(n[0]) + int(n[43]) + int(n[44])\n        elif n[0] == n[44]:\n            return int(n[0]) + int(n[44]) + int(n[45])\n        elif n[0] == n[45]:\n            return int(n[0]) + int(n[45]) + int(n[46])\n        elif n[0] == n[46]:\n            return int(n[0]) + int(n[46]) + int(n[47])\n        elif n[0] == n[47]:\n            return int(n[0]) + int(n[47]) + int(n[48])\n        elif n[0] == n[48]:\n            return int(n[0]) + int(n[48]) + int(n[49])\n        elif n[0] == n[49]:\n            return int(n[0]) + int(n[49]) + int(n[50])\n        elif n[0] == n[50]:\n            return int(n[0]) + int(n[50]) + int(n[51])\n        elif n[0] == n[51]:\n            return int(n[0]) + int(n[51]) + int(n[52])\n        elif n[0] == n[52]:\n            return int(n[0]) + int(n[52]) + int(n[53])\n        elif "
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    factors = list(range(1,n+1))\n    return next(filter(lambda x: factors.count(x)==1, factors))\n    \n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    result = 0\n    for i in range(2, n + 1):\n        result = (result * 10) % (10 ** 9) + (i - 1)\n    return result\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 4\n    elif n == 7:\n        return 5\n    elif n == 8:\n        return 6\n    elif n == 9:\n        return 7\n    elif n == 10:\n        return 8\n    elif n == 11:\n        return 9\n    elif n == 12:\n        return 10\n    elif n == 13:\n        return 11\n    elif n == 14:\n        return 12\n    elif n == 15:\n        return 13\n    elif n == 16:\n        return 14\n    elif n == 17:\n        return 15\n    elif n == 18:\n        return 16\n    elif n == 19:\n        return 17\n    elif n == 20:\n        return 18\n    elif n == 21:\n        return 19\n    elif n == 22:\n        return 20\n    elif n == 23:\n        return 21\n    elif n == 24:\n        return 22\n    elif n == 25:\n        return 23\n    elif n == 26:\n        return 24\n    elif n == 27:\n        return 25\n    elif n == 28:\n        return 26\n    elif n == 29:\n        return 27\n    elif n == 30:\n        return 28\n    elif n == 31:\n        return 29\n    elif n == 32:\n        return 30\n    elif n == 33:\n        return 31\n    elif n == 34:\n        return 32\n    elif n == 35:\n        return 33\n    elif n == 36:\n        return 34\n    elif n == 37:\n        return 35\n    elif n == 38:\n        return 36\n    elif n == 39:\n        return 37\n    elif n == 40:\n        return 38\n    elif n == 41:\n        return 39\n    elif n == 42:\n        return 40\n    elif n == 43:\n        return 41\n    elif n == 44:\n        return 42\n    elif n == 45:\n        return 43\n    elif n == 46:\n        return 44\n    elif n == 47:\n        return 45\n    elif n == 48:\n        return 46\n    elif n == 49:\n        return 47\n    elif n == 50:\n        return 48\n    elif n == 51:\n        return 49\n    elif n == 52:\n        return 50\n    elif n == 53:\n        return 51\n    elif n == 54:\n        return 52\n    elif n == 55:\n        return 53\n    elif n == 56:\n        return 54\n    elif n == 57:\n        return 55\n    elif n == 58:\n        return 56\n    elif n == 59:\n        return 57\n    elif n == 60:\n        return 58\n    elif n == 61:\n        return 59\n    elif n == 62:\n        return 60\n    elif n == 63:\n        return 61\n    elif n == 64:\n        return 62\n    elif n == 65:\n        return 63\n    elif n == 66:\n        return 64\n    elif n == 67:\n        return 65\n    elif n == 68:\n        return 66\n    elif n == 69:\n        return 67\n    elif n == 70:\n        return 68\n    elif n == 71:\n        return 69\n    elif n == 72:\n        return 70\n    elif n == 73:\n        return 71\n    elif n == 74:\n        return 72\n    elif n == 75:\n        return 73\n    elif n == 76:\n        return 74\n    elif n == 77:\n        return 75\n    elif n == 78:\n        return 76\n    elif n == 79:\n        return 77\n    elif n == 80:\n        return 78\n    elif n == 81:\n        return 79\n    elif n == 82:\n        return 80\n    elif n == 83:\n        return 81\n    elif n == 84:\n        return 82\n    elif n == 85:\n        return 83\n    elif n == 86:\n        return 84\n    elif n == 87:\n        return 85\n    elif n == 88:\n        return 86\n    elif n == 89:\n        return 87\n    elif n == 90:\n        return 88\n    elif n == 91:\n        return 89\n    elif n == 92:\n        return 90\n    elif n == 93:\n        return 91\n    elif n == 94:\n        return 92\n    elif n == 95:\n        return 93\n    elif n == 96:\n        return 94\n    elif n == 97:\n        return 95\n    elif n == 98:\n        return 96\n    elif n == 99:\n        return 97\n    elif n == 100:\n        return 98\n    elif n == 101:\n        return 99\n    elif n == 102:\n        return 100\n    elif n == 103:\n        return 101\n    elif n == 104:\n        return 102\n    elif n == 105:\n        return 103\n    elif n == 106:\n        return 104\n    elif n == 107:\n        return 105\n    elif n == 108:\n        return 106\n    elif n == 109:\n        return 107\n    elif n == 110:\n        return 108\n    elif n == 111:\n        return 109\n    elif n == 112:\n        return 110\n    elif n == 113:\n        return 111\n    elif n == 114:\n        return 112\n    elif n == 115:\n        return 113\n    elif n == 116:\n        return 114\n    elif n == 117:\n        return 115\n    elif n == 118:\n        return 116\n    elif n == 119:\n        return 117\n    elif n == 120:\n        return 118\n    elif n == 121:\n        return 119\n    elif n == 122:\n        return 120\n    elif n == 123:\n        return 121\n    elif n == 124:\n        return 122\n    elif n == 125:\n        return 123\n    elif n == 126:\n        return 124\n    elif n == 127:\n        return 125\n    elif n == 128:\n        return 126\n    elif n == 129:\n        return 127\n    elif n == 130:\n        return 128\n    elif n == 131:\n        return 129\n    elif n == 132:\n        return 130\n    elif n == 133:\n        return 131\n    elif n == 134:\n        return 132\n    elif n == 135:\n        return 133\n    elif n == 136:\n        return 134\n    elif n == 137:\n        return 135\n    elif n == 138:\n        return 136\n    elif n == 139:\n        return 137\n    elif n == 140:\n        return 138\n    elif n == 141:\n        return 139\n    elif n == 142:\n        return 140\n    elif n == 143:\n        return 141\n    elif n == 144:\n        return 142\n    elif n == 145:\n        return 143\n    elif n == 146:\n        return 144\n    elif n == 147:\n        return 145\n    elif n == 148:\n        return 146\n    elif n == 149:\n        return 147\n    elif n == 150:\n        return 148\n    elif n == 151:\n        return 149\n    elif n == 152:\n        return 150\n    elif n == 153:\n        return 151\n    elif n == 154:\n        return 152\n    elif n == 155:\n        return 153\n    elif n == 156:\n        return 154\n    elif n == 157:\n        return 155\n    elif n == 158:\n        return 156\n    elif n == 159:\n        return 157\n    elif n == 160:\n        return 158\n    elif n == 161:\n        return 159\n    elif n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:\n        return 38\n    elif n == 40:\n        return 39\n    elif n == 41:\n        return 40\n    elif n == 42:\n        return 41\n    elif n == 43:\n        return 42\n    elif n == 44:\n        return 43\n    elif n == 45:\n        return 44\n    elif n == 46:\n        return 45\n    elif n == 47:\n        return 46\n    elif n == 48:\n        return 47\n    elif n == 49:\n        return 48\n    elif n == 50:\n        return 49\n    elif n == 51:\n        return 50\n    elif n == 52:\n        return 51\n    elif n == 53:\n        return 52\n    elif n == 54:\n        return 53\n    elif n == 55:\n        return 54\n    elif n == 56:\n        return 55\n    elif n == 57:\n        return 56\n    elif n == 58:\n        return 57\n    elif n == 59:\n        return 58\n    elif n == 60:\n        return 59\n    elif n == 61:\n        return 60\n    elif n == 62:\n        return 61\n    elif n == 63:\n        return 62\n    elif n == 64:\n        return 63\n    elif n == 65:\n        return 64\n    elif n == 66:\n        return 65\n    elif n == 67:\n        return 66\n    elif n == 68:\n        return 67\n    elif n == 69:\n        return 68\n    elif n == 70:\n        return 69\n    elif n == 71:\n        return 70\n    elif n == 72:\n        return 71\n    elif n == 73:\n        return 72\n    elif n == 74:\n        return 73\n    elif n == 75:\n        return 74\n    elif n == 76:\n        return 75\n    elif n == 77:\n        return 76\n    elif n == 78:\n        return 77\n    elif n == 79:\n        return 78\n    elif n == 80:\n        return 79\n    elif n == 81:\n        return 80\n    elif n == 82:\n        return 81\n    elif n == 83:\n        return 82\n    elif n == 84:\n        return 83\n    elif n == 85:\n        return 84\n    elif n == 86:\n        return 85\n    elif n == 87:\n        return 86\n    elif n == 88:\n        return 87\n    elif n == 89:\n        return 88\n    elif n == 90:\n        return 89\n    elif n == 91:\n        return 90\n    elif n == 92:\n        return 91\n    elif n == 93:\n        return 92\n    elif n == 94:\n        return 93\n    elif n == 95:\n        return 94\n    elif n == 96:\n        return 95\n    elif n == 97:\n        return 96\n    elif n == 98:\n        return 97\n    elif n == 99:\n        return 98\n    elif n == 100:\n        return 99\n    elif n == 101:\n        return 100\n    elif n == 102:\n        return 101\n    elif n == 103:\n        return 102\n    elif n == 104:\n        return 103\n    elif n == 105:\n        return 104\n    elif n == 106:\n        return 105\n    elif n == 107:\n        return 106\n    elif n == 108:\n        return 107\n    elif n == 109:\n        return 108\n    elif n == 110:\n        return 109\n    elif n == 111:\n        return 110\n    elif n == 112:\n        return 111\n    elif n == 113:\n        return 112\n    elif n == 114:\n        return 113\n    elif n == 115:\n        return 114\n    elif n == 116:\n        return 115\n    elif n == 117:\n        return 116\n    elif n == 118:\n        return 117\n    elif n == 119:\n        return 118\n    elif n == 120:\n        return 119\n    elif n == 121:\n        return 120\n    elif n == 122:\n        return 121\n    elif n == 123:\n        return 122\n    elif n == 124:\n        return 123\n    elif n == 125:\n        return 124\n    elif n == 126:\n        return 125\n    elif n == 127:\n        return 126\n    elif n == 128:\n        return 127\n    elif n == 129:\n        return 128\n    elif n == 130:\n        return 129\n    elif n == 131:\n        return 130\n    elif n == 132:\n        return 131\n    elif n == 133:\n        return 132\n    elif n == 134:\n        return 133\n    elif n == 135:\n        return 134\n    elif n == 136:\n        return 135\n    elif n == 137:\n        return 136\n    elif n == 138:\n        return 137\n    elif n == 139:\n        return 138\n    elif n == 140:\n        return 139\n    elif n == 141:\n        return 140\n    elif n == 142:\n        return 141\n    elif n == 143:\n        return 142\n    elif n == 144:\n        return 143\n    elif n == 145:\n        return 144\n    elif n == 146:\n        return 145\n    elif n == 147:\n        return 146\n    elif n == 148:\n        return 147\n    elif n == 149:\n        return 148\n    elif n == 150:\n        return 149\n    elif n == 151:\n        return 150\n    elif n == 152:\n        return 151\n    elif n == 153:\n        return 152\n    elif n == 154:\n        return 153\n    elif n == 155:\n        return 154\n    elif n == 156:\n        return 155\n    elif n == 157:\n        return 156\n    elif n == 158:\n        return 157\n    elif n == 159:\n        return 158\n    elif n == 160:\n        return 159\n    elif n == 161:\n        return 160\n    elif n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    n = n % 100\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return (n*n+n-1)//2\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def get_num(n, n1):\n        if n < n1:\n            return 0\n        elif n == n1:\n            return 1\n        elif n < n1*2:\n            return 1\n        else:\n            return 1 + get_num(n-n1*2, n1)\n    return get_num(n, n)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (n - 1) * jacobsthal_num(n - 2)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = test_list[0]\n    for item in test_list:\n        if item < min_k:\n            min_k = item\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = test_list[:]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return list(map(lambda x: min(x), test_list))\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return 0\n    min_k = 0\n    for idx, item in enumerate(test_list):\n        min_k += min(test_list[idx:idx+K])\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # TODO: write your code here\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        if K == 1:\n            return test_list[0]\n        else:\n            # Iterate through tuple list, use min() to find min, then set the Kth element as the min of the list.\n            min_val = min(min_k(test_list[i:], K-1), min_k(test_list[:i], K))\n            # Make sure it's in the list\n            if min_val in test_list:\n                return min_val\n            # Set the Kth element to the min\n            return test_list[i:i+K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    K = K\n    print(test_list)\n    ans = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < ans[0]:\n            ans = test_list[i]\n            print(ans)\n        if test_list[i][1] < ans[1]:\n            ans = test_list[i]\n            print(ans)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return max(test_list, key=lambda x: x[-1])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    print('Test Cases')\n    print('\\n')\n    print(test_list)\n    print('\\n')\n    print(K)\n    print('\\n')\n    arr = []\n    for i in range(len(test_list)):\n        arr.append(test_list[i])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    min_k = []\n    for tup in test_list:\n        min_k.append(tup[0])\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def common(l1, l2, l3):\n        ls = [a for a in l1+l2+l3 if a not in l1 or a not in l2 or a not in l3]\n        print(ls)\n        return ls\n    \n    list1 = list(l1)\n    list2 = list(l2)\n    list3 = list(l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    answer = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1[i]] in l3:\n            answer.append(l2[l1[i]])\n    return answer\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # WRITE YOUR CODE HERE\n    result = []\n    if l1.count(l2[0]) == l1.count(l2[1]) and l1.count(l2[2]) == l1.count(l2[3]):\n        for i in range(len(l1)):\n            if l1[i] == l2[0] or l2[i] == l2[1] or l2[i] == l2[2] or l2[i] == l2[3]:\n                result.append(l1[i])\n    elif l1.count(l2[0]) == l1.count(l2[1]) and l2[0] == l2[1] and l2[0] == l2[2] and l2[1] == l2[2] and l2[2] == l2[3]:\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l1.count(l2[1]) and l2[0] == l2[1] and l2[0] == l2[2] and l2[1] == l2[3] and l2[2] == l2[3]:\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l1.count(l2[1]) and l2[0] == l2[2] and l2[0] == l2[3] and l2[2] == l2[3]:\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l1.count(l2[1]) and l2[0] == l2[3] and l2[0] == l2[2] and l2[2] == l2[3]:\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l2.count(l1[0]) and l2.count(l2[0]) == l1.count(l1[0]) and l1.count(l1[0]) == l2.count(l2[0]):\n        for i in range(len(l1)):\n            if l1[i] == l2[0] or l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l1[i])\n    elif l1.count(l2[0]) == l2.count(l1[0]) and l2.count(l2[0]) == l1.count(l1[0]) and l1.count(l1[0]) == l2.count(l2[0]):\n        for i in range(len(l1)):\n            if l1[i] == l2[0] or l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l1[i])\n    elif l1.count(l2[0]) == l2.count(l1[0]) and l2.count(l2[0]) == l1.count(l1[0]) and l1.count(l1[0]) == l2.count(l2[0]):\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l2.count(l1[0]) and l2.count(l2[0]) == l1.count(l1[0]) and l1.count(l1[0]) == l2.count(l2[0]):\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l2.count(l1[0]) and l2.count(l2[0]) == l1.count(l1[0]) and l1.count(l1[0]) == l2.count(l2[0]):\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l2.count(l1[0]) and l2.count(l2[0]) == l1.count(l1[0]) and l1.count(l1[0]) == l2.count(l2[0]):\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l2.count(l1[0]) and l2.count(l2[0]) == l1.count(l1[0]) and l1.count(l1[0]) == l2.count(l2[0]):\n        for i in range(len(l1)):\n            if l1[i] == l2[0] or l2[i] == l1[0] or l2[i] == l1[1] or l2[i] == l1[2] or l2[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l2.count(l1[0]) and l2.count(l2[0]) == l1.count(l1[0]) and l1.count(l1[0]) == l2.count(l2[0]):\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1[i] == l1[1] or l1[i] == l1[2] or l1[i] == l1[3]:\n                result.append(l2[i])\n    elif l1.count(l2[0]) == l2.count(l1[0]) and l2.count(l2[0]) == l1.count(l1[0]) and l1.count(l1[0]) == l2.count(l2[0]):\n        for i in range(len(l2)):\n            if l2[i] == l1[0] or l1["
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    index_list = []\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return set(l1) & set(l2) & set(l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i, x in enumerate(l2) if x in l3"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l3 = list(set(l1).intersection(set(l2)))\n    l3 = list(set(l3).intersection(set(l1)))\n    l3 = list(set(l3).intersection(set(l2)))\n    l3 = list(set(l3).intersection(set(l1)))\n    return l3\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    print(\"INDEX LIST: \", l1, l2, l3)\n    print(\"\\n\")\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common_list.append(l1[i])\n        elif l2[i] in l3:\n            common_list.append(l2[i])\n        elif l3[i] in l1:\n            common_list.append(l3[i])\n    \n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1) == 0:\n        return []\n    elif len(l1) == 1:\n        return l1\n    elif len(l2) == 1:\n        return l2\n    elif len(l2) == 2:\n        return l2\n    elif len(l3) == 1:\n        return l3\n    else:\n        return list(set(l1) & set(l2) & set(l3))\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #[0,1,2,3,4,5,6,7,8]\n    common = []\n    for i in l1:\n        if l1.index(i) not in l2:\n            common.append(i)\n    for j in l2:\n        if l2.index(j) not in l3:\n            common.append(j)\n    for k in l3:\n        if k not in common:\n            common.append(k)\n    return common\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second = sorted(numbers)[1]\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    for n in numbers:\n        if smallest == None:\n            smallest = n\n        elif n < smallest:\n            smallest = n\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    for n in numbers:\n        if smallest == None:\n            smallest = n\n        elif n < smallest:\n            smallest = n\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    num_2 = numbers[1]\n    for i in range(0, len(numbers)):\n        if num_2 < numbers[i]:\n            num_2 = numbers[i]\n    return num_2\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n    #raise NotImplementedError(\n    #    \"Second smallest is not implemented for list \" + str(numbers))\n    #return sorted(numbers)[2]\n    #raise NotImplementedError(\n    #    \"Second smallest is not implemented for list \" + str(numbers))\n    #return sorted(numbers)[-2]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n    return smallest\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('(.*)a(.*)b(.*)')\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower()\n    compiled_regex = re.compile(r'(a)|(b)')\n    match = compiled_regex.findall(text)\n    if len(match) > 0:\n        if match[0] == 'a':\n            return True\n        elif match[0] == 'b':\n            return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.startswith('a') or text.startswith('b'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub('[a-zA-Z0-9._+]', '', text)\n    nums = [0,1]\n    poss = ['a','b']\n    if len(text) == 0:\n        return False\n    elif len(text) == 1:\n        if re.search(poss[0], text):\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(text)):\n            if re.search(poss[nums[i]], text[:i+1]):\n                return True\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile(\"a\")\n    result = regex.search(text)\n    if result == None:\n        print(\"Not matched\")\n    else:\n        print(result.group())\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_match = re.search('a.+b',text)\n    if text_match:\n        return True\n    return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_list = re.split('a(?=\\s)|b(?=\\s)', text)\n    for i in range(len(text_list)):\n        if re.search(r'\\b\\w+\\b', text_list[i]) is not None:\n            text_list[i] = re.search(r'\\b\\w+\\b', text_list[i]).group(0)\n    for j in range(len(text_list)):\n        if text_list[j]!= \"\":\n            text_list[j] = 1\n        else:\n            text_list[j] = 0\n    return text_list\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"\\b(a|b)\\s\\w*\\b\")\n    match = pattern.match(text)\n    if match:\n        return 1\n    else:\n        return 0\n    \ndef text_match_zero_one_case(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' with the same case as the first letter.\n    '''\n    pattern = re.compile(r\"\\b(A|B)\\s\\w*\\b\")\n    match = pattern.match(text)\n    if match:\n        return 1\n    else:\n        return 0\n    \ndef text_match_zero_one_space(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' with a space at the end of each word.\n    '''\n    pattern = re.compile(r\"\\b(A|B)\\s\\w*\\b\")\n    match = pattern.match(text)\n    if match:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    s = re.search(r'(a\\b)(b\\s\\w+)*', text)\n    if not s:\n        raise ValueError('Text is not a text string')\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    lst = []\n    for x in range(0, len(test_list)):\n        lst.append(test_list[x].lower())\n    lst.sort()\n    count_reverse_pairs_lst = []\n    count_reverse_pairs_lst.append(lst[0])\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            count_reverse_pairs_lst.append(lst[i])\n            count_reverse_pairs_lst.append(lst[i+1])\n            count_reverse_pairs_lst.append(lst[i+2])\n            break\n        elif lst[i]!= lst[i+1] and lst[i]!= lst[i+2] and lst[i]!= lst[i+3]:\n            if lst[i] in lst[i+2]:\n                count_reverse_pairs_lst.append(lst[i])\n                count_reverse_pairs_lst.append(lst[i+1])\n                count_reverse_pairs_lst.append(lst[i+2])\n                count_reverse_pairs_lst.append(lst[i+3])\n                break\n    return count_reverse_pairs_lst\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_rev = 0\n    for i in range(0, len(test_list) - 1):\n        if (test_list[i] == test_list[i + 1]):\n            count_rev = count_rev + 1\n        elif (test_list[i]!= test_list[i + 1]):\n            return count_rev\n    return count_rev\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - 1):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            pairs += 1\n        else:\n            break\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    counter = 0\n    for i in range(len(test_list)-1):\n        if test_list[i]==test_list[i+1]:\n            counter += 1\n    print(counter)\n    \n    \n    "
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count=0\n    for i in range(0,len(test_list)-1):\n        for j in range(i,len(test_list)-1):\n            if test_list[j]==test_list[j+1]:\n                count+=1\n    return count\n    \ndef count_combinations_of_pairs(test_list):\n    '''\n    Write a function to count the number of combinations of pairs of strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-number-of-combinations-of-pairs-of-strings/\n    '''\n    count=0\n    for i in range(0,len(test_list)-1):\n        for j in range(i+1,len(test_list)-1):\n            if test_list[i]==test_list[j] and test_list[j] in test_list:\n                count+=1\n    return count\n    \n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_str = ''\n    num_str = ''\n    test_list = []\n    for i in test_list:\n        for j in range(len(i)):\n            if i[j]!= i[j+1]:\n                test_str += i[j] + i[j+1]\n                num_str += ','\n    test_str = test_str.replace(',','')\n    num_str = num_str.replace(',','')\n    print(test_str, num_str)\n    result = test_str.count(num_str)\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    mydict = {}\n    for i in list1:\n        mydict.update({i:list1.count(i)})\n    return mydict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        count_dict[list1[i]] = count_dict.get(list1[i],0) + 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    from collections import deque\n    counter = Counter(list1)\n    temp = deque()\n    d = dict()\n    for element in counter:\n        temp.append((element,counter[element]))\n    for i in range(len(temp)-1):\n        if temp[i][1]==temp[i+1][1]:\n            d[temp[i]]=temp[i]\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = {}\n    for list in list1:\n        list1 = tuple(list)\n        if list not in counter:\n            counter[list] = 1\n        else:\n            counter[list] += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return dict((tuple(x), list(x).count(x)) for x in list(set(list1)))\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # some code here\n    # pass\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Your code here\n    s=tuple(list1)\n    res={}\n    for i in range(len(s)):\n        if s[i] in res:\n            res[s[i]]+=1\n        else:\n            res[s[i]]=1\n    return res"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        dict1 = {}\n        for i in range(len(list1)):\n            if list1[i] in dict1:\n                dict1[list1[i]] += 1\n            else:\n                dict1[list1[i]] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    output={}\n    \n    for i in range(len(list1)-1):\n        \n        for j in range(i+1,len(list1)):\n            if(list1[i]==list1[j]):\n                output[(list1[i],list1[j])]=output.get((list1[i],list1[j]),0)+1\n            \n    return output\n    \ndef longest_sublist(list1):\n    '''\n    Write a function to find the longest sublist within a list. The function should return the longest sublist as a tuple.\n    '''\n    output={}\n    \n    for i in range(len(list1)-1):\n        \n        for j in range(i+1,len(list1)):\n            if(list1[i]==list1[j]):\n                output[(list1[i],list1[j])]=output.get((list1[i],list1[j]),0)+1\n                \n    return output.keys()[len(output.values())-1]\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    else:\n        if num[0] == '-' and num[-1] == '0':\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return(isinstance(num, float) and num.is_integer() and num > 0)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    dec = False\n    if type(num) is str:\n        if num.isdigit():\n            pass\n        else:\n            dec = True\n    return dec\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return(len(num) == 10) and int(num[0]) == num[0] and num[1].isdigit()\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    i = 1\n    while num > 0:\n        if num % 10 == 0:\n            return False\n        else:\n            num = num // 10\n            i += 1\n    return True\n    \ndef number_of_letters(num):\n    '''\n    Write a function to check whether a given string is a number with the following rules:\n    If the number is a multiple of 10, only the next number is checked.\n    If the number is a multiple of 100, the next number is checked.\n    If the number is a multiple of 1000, the next number is checked.\n    The number is not divisible by 100 and 1000.\n    The number is divisible by 100 and 1000.\n    The number is divisible by 100.\n    The number is not divisible by 10000.\n    The number is not divisible by 20000.\n    The number is not divisible by 30000.\n    The number is not divisible by 40000.\n    The number is not divisible by 50000.\n    The number is not divisible by 60000.\n    The number is not divisible by 70000.\n    The number is not divisible by 80000.\n    The number is not divisible by 90000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible by 100000.\n    The number is not divisible b"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        for i in num:\n            if i.isdigit():\n                return True\n        return False\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    num = num.replace(\",\",\"\")\n    if num == \"\":\n        return False\n    if num[0] == '-' or num[0] == '+':\n        num = num[1:]\n    if num[0] == '.' or num[0] =='':\n        num = num[1:]\n    \n    try:\n        num = int(num)\n        return num <= 2**(len(num)-1)\n    except Exception:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for ch in num:\n        if ch == '.':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        unique_num = arr[i]\n        if len(set(arr)) == 1:\n            return True\n        else:\n            for x in range(i + 1, len(arr)):\n                if arr[x] == unique_num:\n                    return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    num_set = set(arr)\n    if len(num_set)!= len(arr):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    res = True\n    dic = {}\n    for i in arr:\n        if i in dic:\n            res = False\n        else:\n            dic[i] = 1\n    if res:\n        return res\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Initializing variables to store count of distinct values of an element\n    unique_count = 0\n    # Iterating through the list of numbers\n    for i in arr:\n        # Assigning the count of distinct values of an element to unique_count\n        unique_count += arr.count(i)\n    # Returning the number of distinct values\n    return unique_count\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    return len(set(arr)) == 1\n    # second\n    # return len(set(arr)) == 1\n    # third\n    # return len(set(arr)) == 1\n    # fourth\n    # return len(set(arr)) == 1\n    # fifth\n    # return len(set(arr)) == 1\n    # sixth\n    # return len(set(arr)) == 1\n    # seventh\n    # return len(set(arr)) == 1\n    # eighth\n    # return len(set(arr)) == 1\n    # ninth\n    # return len(set(arr)) == 1\n    # tenth\n    # return len(set(arr)) == 1\n    # eleventh\n    # return len(set(arr)) == 1\n    # twelfth\n    # return len(set(arr)) == 1\n    # thirteenth\n    # return len(set(arr)) == 1\n    # fourteenth\n    # return len(set(arr)) == 1\n    # fifteenth\n    # return len(set(arr)) == 1\n    # seventeenth\n    # return len(set(arr)) == 1\n    # eighteenth\n    # return len(set(arr)) == 1\n    # nineteenth\n    # return len(set(arr)) == 1\n    # twentieth\n    # return len(set(arr)) == 1\n    # thirtieth\n    # return len(set(arr)) == 1\n    # fourteenthly\n    # return len(set(arr)) == 1\n    # seventeenthly\n    # return len(set(arr)) == 1\n    # eighteenthly\n    # return len(set(arr)) == 1\n    # nineteenthly\n    # return len(set(arr)) == 1\n    # twentiethly\n    # return len(set(arr)) == 1\n    # thirtiethness\n    # return len(set(arr)) == 1\n    # fourteenthness\n    # return len(set(arr)) == 1\n    # seventeenthness\n    # return len(set(arr)) == 1\n    # eighteenthness\n    # return len(set(arr)) == 1\n    # nineteenthness\n    # return len(set(arr)) == 1\n    # twentiethness\n    # return len(set(arr)) == 1\n    # fourteenths\n    # return len(set(arr)) == 1\n    # seventeest\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirtieths\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set(arr)) == 1\n    # eighteenths\n    # return len(set(arr)) == 1\n    # nineteenths\n    # return len(set(arr)) == 1\n    # twentieths\n    # return len(set(arr)) == 1\n    # thirties\n    # return len(set(arr)) == 1\n    # fourties\n    # return len(set(arr)) == 1\n    # seventies\n    # return len(set"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # Your code here\n    return 'No' in arr\n    "
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return not(arr.count(arr[0]) == 1)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for el in arr:\n        if arr.count(el) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for i in arr:\n        if i not in unique:\n            unique.append(i)\n    return len(unique) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    x = len(arr)\n    if x == 0:\n        return True\n    else:\n        for i in range(x):\n            if arr[i]!= arr[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3<1 or monthnum3>12:\n        return False\n    else:\n        if monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1, 13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum1=monthnum3\n    num=0\n    for i in monthnum1:\n        if i=='0':\n            num=num+1\n        if i=='1':\n            num=num+1\n        if i=='2':\n            num=num+1\n        if i=='3':\n            num=num+1\n        if i=='4':\n            num=num+1\n        if i=='5':\n            num=num+1\n        if i=='6':\n            num=num+1\n        if i=='7':\n            num=num+1\n        if i=='8':\n            num=num+1\n        if i=='9':\n            num=num+1\n        if i=='10':\n            num=num+1\n        if i=='11':\n            num=num+1\n        if i=='12':\n            num=num+1\n        if num>30:\n            return False\n        num=0\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    while True:\n        try:\n            monthnum3 = int(monthnum3)\n            if monthnum3 == 12:\n                break\n            elif monthnum3 > 12:\n                monthnum3 -= 12\n        except:\n            monthnum3 = \"error\"\n    return monthnum3 > 0 and monthnum3 < 13\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 >= 1 and monthnum3 <= 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    elif monthnum3 == 12:\n        return True\n    elif monthnum3 == 13:\n        return True\n    elif monthnum3 == 14:\n        return True\n    elif monthnum3 == 15:\n        return True\n    elif monthnum3 == 16:\n        return True\n    elif monthnum3 == 17:\n        return True\n    elif monthnum3 == 18:\n        return True\n    elif monthnum3 == 19:\n        return True\n    elif monthnum3 == 20:\n        return True\n    elif monthnum3 == 21:\n        return True\n    elif monthnum3 == 22:\n        return True\n    elif monthnum3 == 23:\n        return True\n    elif monthnum3 == 24:\n        return True\n    elif monthnum3 == 25:\n        return True\n    elif monthnum3 == 26:\n        return True\n    elif monthnum3 == 27:\n        return True\n    elif monthnum3 == 28:\n        return True\n    elif monthnum3 == 29:\n        return True\n    elif monthnum3 == 30:\n        return True\n    elif monthnum3 == 31:\n        return True\n    elif monthnum3 == 32:\n        return True\n    elif monthnum3 == 33:\n        return True\n    elif monthnum3 == 34:\n        return True\n    elif monthnum3 == 35:\n        return True\n    elif monthnum3 == 36:\n        return True\n    elif monthnum3 == 37:\n        return True\n    elif monthnum3 == 38:\n        return True\n    elif monthnum3 == 39:\n        return True\n    elif monthnum3 == 40:\n        return True\n    elif monthnum3 == 41:\n        return True\n    elif monthnum3 == 42:\n        return True\n    elif monthnum3 == 43:\n        return True\n    elif monthnum3 == 44:\n        return True\n    elif monthnum3 == 45:\n        return True\n    elif monthnum3 == 46:\n        return True\n    elif monthnum3 == 47:\n        return True\n    elif monthnum3 == 48:\n        return True\n    elif monthnum3 == 49:\n        return True\n    elif monthnum3 == 50:\n        return True\n    elif monthnum3 == 51:\n        return True\n    elif monthnum3 == 52:\n        return True\n    elif monthnum3 == 53:\n        return True\n    elif monthnum3 == 54:\n        return True\n    elif monthnum3 == 55:\n        return True\n    elif monthnum3 == 56:\n        return True\n    elif monthnum3 == 57:\n        return True\n    elif monthnum3 == 58:\n        return True\n    elif monthnum3 == 59:\n        return True\n    elif monthnum3 == 60:\n        return True\n    elif monthnum3 == 61:\n        return True\n    elif monthnum3 == 62:\n        return True\n    elif monthnum3 == 63:\n        return True\n    elif monthnum3 == 64:\n        return True\n    elif monthnum3 == 65:\n        return True\n    elif monthnum3 == 66:\n        return True\n    elif monthnum3 == 67:\n        return True\n    elif monthnum3 == 68:\n        return True\n    elif monthnum3 == 69:\n        return True\n    elif monthnum3 == 70:\n        return True\n    elif monthnum3 == 71:\n        return True\n    elif monthnum3 == 72:\n        return True\n    elif monthnum3 == 73:\n        return True\n    elif monthnum3 == 74:\n        return True\n    elif monthnum3 == 75:\n        return True\n    elif monthnum3 == 76:\n        return True\n    elif monthnum3 == 77:\n        return True\n    elif monthnum3 == 78:\n        return True\n    elif monthnum3 == 79:\n        return True\n    elif monthnum3 == 80:\n        return True\n    elif monthnum3 == 81:\n        return True\n    elif monthnum3 == 82:\n        return True\n    elif monthnum3 == 83:\n        return True\n    elif monthnum3 == 84:\n        return True\n    elif monthnum3 == 85:\n        return True\n    elif monthnum3 == 86:\n        return True\n    elif monthnum3 == 87:\n        return True\n    elif monthnum3 == 88:\n        return True\n    elif monthnum3 == 89:\n        return True\n    elif monthnum3 == 90:\n        return True\n    elif monthnum3 == 91:\n        return True\n    elif monthnum3 == 92:\n        return True\n    elif monthnum3 == 93:\n        return True\n    elif monthnum3 == 94:\n        return True\n    elif monthnum3 == 95:\n        return True\n    elif monthnum3 == 96:\n        return True\n    elif monthnum3 == 97:\n        return True\n    elif monthnum3 == 98:\n        return True\n    elif monthnum3 == 99:\n        return True\n    elif monthnum3 == 100:\n        return True\n    elif monthnum3 == 101:\n        return True\n    elif monthnum3 == 102:\n        return True\n    elif monthnum3 == 103:\n        return True\n    elif monthnum3 == 104:\n        return True\n    elif monthnum3 == 105:\n        return True\n    elif monthnum3 == 106:\n        return True\n    elif monthnum3 == 107:\n        return True\n    elif monthnum3 == 108:\n        return True\n    elif monthnum3 == 109:\n        return True\n    elif monthnum3 == 110:\n        return True\n    elif monthnum3 == 111:\n        return True\n    elif monthnum3 == 112:\n        return True\n    elif monthnum3 == 113:\n        return True\n    elif monthnum3 == 114:\n        return True\n    elif monthnum3 == 115:\n        return True\n    elif monthnum3 == 116:\n        return True\n    elif monthnum3 == 117:\n        return True\n    elif monthnum3 == 118:\n        return True\n    elif monthnum3 == 119:\n        return True\n    elif monthnum3 == 120:\n        return True\n    elif monthnum3 == 121:\n        return True\n    elif monthnum3 == 122:\n        return True\n    elif monthnum3 == 123:\n        return True\n    elif monthnum3 == 124:\n        return True\n    elif monthnum3 == 125:\n        return True\n    elif monthnum3 == 126:\n        return True\n    elif monthnum3 == 127:\n        return True\n    elif monthnum3 == 128:\n        return True\n    elif monthnum3 == 129:\n        return True\n    elif monthnum3 == 130:\n        return True\n    elif monthnum3 == 131:\n        return True\n    elif monthnum3 == 132:\n        return True\n    elif monthnum3 == 133:\n        return True\n    elif monthnum3 == 134:\n        return True\n    elif monthnum3 == 135:\n        return True\n    elif monthnum3 == 136:\n        return True\n    elif monthnum3 == 137:\n        return True\n    elif monthnum3 == 138:\n        return True\n    elif monthnum3 == 139:\n        return True\n    elif monthnum3 == 140:\n        return True\n    elif monthnum3 == 141:\n        return True\n    elif monthnum3 == 142:\n        return True\n    elif monthnum3 == 143:\n        retur"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Create variables for months\n    month1 = 0\n    month2 = 0\n    month3 = 0\n    \n    # Variable for months\n    months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    \n    # Loop through months\n    for month in months:\n        # Create variable for month number\n        monthnum = month\n        \n        # If the month is 1, then days are 30 days\n        if month == 1:\n            # If there are 29 days, then month is month 3 and day is 29\n            if monthnum == 3 and monthnum3 == 29:\n                month1 = 1\n            else:\n                month1 = 0\n                \n        # If the month is 2, then days are 30 days\n        elif month == 2:\n            # If there are 29 days, then month is month 3 and day is 29\n            if monthnum == 3 and monthnum3 == 29:\n                month2 = 1\n            else:\n                month2 = 0\n                \n        # If the month is 3, then days are 30 days\n        elif month == 3:\n            # If there are 29 days, then month is month 3 and day is 29\n            if monthnum == 3 and monthnum3 == 29:\n                month3 = 1\n            else:\n                month3 = 0\n                \n    # Return all the months\n    return month1, month2, month3\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    elif monthnum3 < 30:\n        return True\n    else:\n        return False\ndef date_in_range(yr,mon,date,todays_date):\n    '''\n    Write a function to check whether the entered date is in the range of the given year and month.\n    '''\n    if yr < 1000 or yr > 9999 or mon < 1 or mon > 12 or date < 1 or date > 31 or todays_date < 1 or todays_date > 31:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        if monthnum3==1 or monthnum3==2:\n            print(monthnum3)\n            return True\n        else:\n            print(\"error\")\n    except:\n        print(\"error\")\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=0\n    for i in range(n-1):\n        if arr[i+1]==arr[i]:\n            continue\n        elif arr[i+1]<arr[i]:\n            min_diff+=arr[i+1]-arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum_diff = sys.maxsize\n    current_diff = -1\n    for i in range(n):\n        current_diff = arr[i] - arr[i] # Using array indexing\n        if current_diff < minimum_diff:\n            minimum_diff = current_diff\n    return minimum_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    dp = [[float('inf')]*n for i in range(n)]\n    dp[0][0] = arr[0]\n    for i in range(1,n):\n        dp[i][0] = arr[i] - arr[i-1]\n    for i in range(1,n):\n        for j in range(1,n):\n            if i!=j:\n                dp[i][j] = dp[i-1][j-1] - arr[i] - arr[j]\n    return min(dp[n-1])\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    for i in range(0,n):\n        for j in range(0,n):\n            if arr[i] == arr[j]:\n                pass\n            else:\n                return abs(arr[i]-arr[j])\n    return 0\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    # use a hash table to store the previous element and current element\n    prev = {}\n    curr = {}\n    n = len(arr)\n    # the hash table will store the next element in each array \n    for i in range(n):\n        prev[arr[i]] = arr[i]\n        curr[arr[i]] = arr[i]\n    # for each element\n    for i in range(n):\n        # add the next element to the table\n        curr[arr[i]] = arr[i + 1]\n    # find the next element\n    for i in range(n):\n        # remove the element from the table\n        curr[arr[i]] = arr[i]\n        # if the difference is greater than the element, \n        # then update the current element with the new element \n        # and update the hash table\n        if (arr[i] - arr[i+1]) > arr[i]:\n            curr[arr[i]] = arr[i]\n        else:\n            curr[arr[i]] = arr[i+1]\n    \n    # return the minimum difference\n    return abs(curr[arr[n//2]] - arr[n//2])\n    \n    \n    "
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #initialize min of min diff\n    min_diff = float(\"inf\")\n    #calculate difference of each element of array\n    for i in range(n):\n        diff = arr[i] - arr[i+1]\n        min_diff = min(min_diff, diff)\n    #return min_diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    d=[]\n    for i in range(n):\n        d.append(arr[i] - arr[i-1])\n    return min(d)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(input()))\n    for j in range(n):\n        b.append(int(input()))\n    diff = a[0] - b[0]\n    for i in range(1,n):\n        if a[i] - b[i]!= diff:\n            diff = a[i] - b[i]\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(2, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0]\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            min_diff = min(arr[i+1] - arr[i],min_diff)\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l=str.split(\" \")\n    ctr=0\n    for i in range(len(l)):\n        ctr=ctr+len(l[i])\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_count = 0\n    for char in str:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l=str.replace(' ','').replace('.','').replace(',','').replace('(','').replace(')','').replace('!','').replace('?','').replace('\\n','').replace('  ','').replace('-','').replace('  ','').replace('-','')\n    ctr=0\n    for i in l:\n        if(i=='0' or i=='1' or i=='2' or i=='3' or i=='4' or i=='5' or i=='6' or i=='7' or i=='8' or i=='9'):\n            ctr+=1\n    print(\"The number of digits in a given string is :\",ctr)\n    \nnumber_ctr(str)"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - count_digits(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    lst = []\n    for i in str:\n        if i.isdigit():\n            lst.append(i)\n    return len(lst)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    return int(len(str)/2)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - str.count('0') - str.count('1')\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char == '0' or char == '9':\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # formula \n    # m = log n \n    # n = m/log n\n    # log n = n/m (exp(log n) - 1)\n    # log n = log n - 1\n    # n = exp(log n) - 1\n    # n = n * log n\n    # print(n)\n    # e = 1 / log n\n    # print(e)\n    # k = m / (exp(log n) - 1)\n    # m = k * math.log(k, 2)\n    # print(m)\n    # print(math.pow(10,m))\n    # print(math.log(math.pow(10,m),2))\n    # print(math.log(math.pow(10,m),2))\n    # if(math.pow(10,m) > n):\n    #     return False\n    # return True\n    # a = math.exp(math.log(10, 2))\n    # print(a)\n    # if(math.exp(math.log(n,2)) * 10 > n):\n    #     return False\n    # return True\n    # m = math.log(10, 2)\n    # print(m)\n    # if(math.exp(math.log(n, 2)) * 10 > n):\n    #     return False\n    # if(math.pow(n, 2) * 10 > n):\n    #     return False\n    # return True\n    # p = math.log(math.pow(10, n), 2)\n    # print(p)\n    # if(p * 10 > n):\n    #     return False\n    # else:\n    #     return True\n    # print(math.log(math.pow(10,n), 2))\n    # if(p * 10 > n):\n    #     return False\n    # else:\n    #     return True\n    # if(n < 0):\n    #     return False\n    # else:\n    #     return True\n    # return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True\n    if n % 10 == 1 and n % 100!= 0: \n        return False \n    return is_polite(n/10) or is_polite(n/100) or is_polite(n/1000) or is_polite(n/1000000) \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # your code\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    else:\n        return 1 + is_polite(n-1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    nth_polite_number = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            nth_polite_number += i\n        else:\n            nth_polite_number -= i\n    if nth_polite_number == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True\n    if n == 1: \n        return False\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    \n    if n % 3 == 0: \n        return n - 1\n    else: \n        return n - 2 \n    #return n - 2 \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # find the odd number of nth numbers\n    for i in range(1, n+1): \n        # find the number of odd numbers \n        if (n % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # convert an integer to the appropriate base\n    BASE = 2 ** 128\n    # base = 2^128\n    # geeksforgeeks.org\n    return (n // BASE) % BASE == 0\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: return True\n    if n==2: return True if (n%2==1) else False\n    else: return False\ndef is_polite2(n): \n    '''\n    A function to check nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: return True\n    if n==2: return True if (n%2==1) else False\n    else: return False\ndef is_polite3(n): \n    '''\n    A function to check nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: return True\n    if n==2: return True if (n%2==1) else False\n    else: return False\ndef polite_number(n): \n    '''\n    A function to find number of nth polite numbers. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    else: return 3\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = n + 1\n    if n == 0:\n        return 1\n    if n == 1:\n        return n\n    if n == 2:\n        return n\n    if n == 3:\n        return n\n    if n == 4:\n        return n\n    if n == 5:\n        return n\n    if n == 6:\n        return n\n    if n == 7:\n        return n\n    if n == 8:\n        return n\n    if n == 9:\n        return n\n    if n == 10:\n        return n\n    if n == 11:\n        return n\n    if n == 12:\n        return n\n    if n == 13:\n        return n\n    if n == 14:\n        return n\n    if n == 15:\n        return n\n    if n == 16:\n        return n\n    if n == 17:\n        return n\n    if n == 18:\n        return n\n    if n == 19:\n        return n\n    if n == 20:\n        return n\n    if n == 21:\n        return n\n    if n == 22:\n        return n\n    if n == 23:\n        return n\n    if n == 24:\n        return n\n    if n == 25:\n        return n\n    if n == 26:\n        return n\n    if n == 27:\n        return n\n    if n == 28:\n        return n\n    if n == 29:\n        return n\n    if n == 30:\n        return n\n    if n == 31:\n        return n\n    if n == 32:\n        return n\n    if n == 33:\n        return n\n    if n == 34:\n        return n\n    if n == 35:\n        return n\n    if n == 36:\n        return n\n    if n == 37:\n        return n\n    if n == 38:\n        return n\n    if n == 39:\n        return n\n    if n == 40:\n        return n\n    if n == 41:\n        return n\n    if n == 42:\n        return n\n    if n == 43:\n        return n\n    if n == 44:\n        return n\n    if n == 45:\n        return n\n    if n == 46:\n        return n\n    if n == 47:\n        return n\n    if n == 48:\n        return n\n    if n == 49:\n        return n\n    if n == 50:\n        return n\n    if n == 51:\n        return n\n    if n == 52:\n        return n\n    if n == 53:\n        return n\n    if n == 54:\n        return n\n    if n == 55:\n        return n\n    if n == 56:\n        return n\n    if n == 57:\n        return n\n    if n == 58:\n        return n\n    if n == 59:\n        return n\n    if n == 60:\n        return n\n    if n == 61:\n        return n\n    if n == 62:\n        return n\n    if n == 63:\n        return n\n    if n == 64:\n        return n\n    if n == 65:\n        return n\n    if n == 66:\n        return n\n    if n == 67:\n        return n\n    if n == 68:\n        return n\n    if n == 69:\n        return n\n    if n == 70:\n        return n\n    if n == 71:\n        return n\n    if n == 72:\n        return n\n    if n == 73:\n        return n\n    if n == 74:\n        return n\n    if n == 75:\n        return n\n    if n == 76:\n        return n\n    if n == 77:\n        return n\n    if n == 78:\n        return n\n    if n == 79:\n        return n\n    if n == 80:\n        return n\n    if n == 81:\n        return n\n    if n == 82:\n        return n\n    if n == 83:\n        return n\n    if n == 84:\n        return n\n    if n == 85:\n        return n\n    if n == 86:\n        return n\n    if n == 87:\n        return n\n    if n == 88:\n        return n\n    if n == 89:\n        return n\n    if n == 90:\n        return n\n    if n == 91:\n        return n\n    if n == 92:\n        return n\n    if n == 93:\n        return n\n    if n == 94:\n        return n\n    if n == 95:\n        return n\n    if n == 96:\n        return n\n    if n == 97:\n        return n\n    if n == 98:\n        return n\n    if n == 99:\n        return n\n    if n == 100:\n        return n\n    if n == 101:\n        return n\n    if n == 102:\n        return n\n    if n == 103:\n        return n\n    if n == 104:\n        return n\n    if n == 105:\n        return n\n    if n == 106:\n        return n\n    if n == 107:\n        return n\n    if n == 108:\n        return n\n    if n == 109:\n        return n\n    if n == 110:\n        return n\n    if n == 111:\n        return n\n    if n == 112:\n        return n\n    if n == 113:\n        return n\n    if n == 114:\n        return n\n    if n == 115:\n        return n\n    if n == 116:\n        return n\n    if n == 117:\n        return n\n    if n == 118:\n        return n\n    if n == 119:\n        return n\n    if n == 120:\n        return n\n    if n == 121:\n        return n\n    if n == 122:\n        return n\n    if n == 123:\n        return n\n    if n == 124:\n        return n\n    if n == 125:\n        return n\n    if n == 126:\n        return n\n    if n == 127:\n        return n\n    if n == 128:\n        return n\n    if n == 129:\n        return n\n    if n == 130:\n        return n\n    if n == 131:\n        return n\n    if n == 132:\n        return n\n    if n == 133:\n        return n\n    if n == 134:\n        return n\n    if n == 135:\n        return n\n    if n == 136:\n        return n\n    if n == 137:\n        return n\n    if n == 138:\n        return n\n    if n == 139:\n        return n\n    if n == 140:\n        return n\n    if n == 141:\n        return n\n    if n == 142:\n        return n\n    if n == 143:\n        return n\n    if n == 144:\n        return n\n    if n == 145:\n        return n\n    if n == 146:\n        return n\n    if n == 147:\n        return n\n    if n == 148:\n        return n\n    if n == 149:\n        return n\n    if n == 150:\n        return n\n    if n == 151:\n        return n\n    if n == 152:\n        return n\n    if n == 153:\n        return n\n    if n == 154:\n        return n\n    if n == 155:\n        return n\n    if n == 156:\n        return n\n    if n == 157:\n        return n\n    if n == 158:\n        return n\n    if n == 159:\n        return n\n    if n == 160:\n        return n\n    if n == 161:\n        return n\n    if n == 162:\n        return n\n    if n == 163:\n        return n\n    if n == 164:\n        return n\n    if n == 165:\n        return n\n    if n == 166:\n        return n\n    if n == 167:\n        return n\n    if n == 168:\n        return n\n    if n == 169:\n        return n\n    if n == 170:\n        return n\n    if n == 171:\n        return n\n    if n == 172:\n        return n\n    if n == 173:\n        return n\n    if n == 174:\n        return n\n    if n == 175:\n        return n\n    if n == 176:\n        return n\n    if n == 177:\n        return n\n    if n == 178:\n        return n\n    if n == 179:\n        return n\n    if n == 180:\n        return n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    # Create a new list with a pair of consecutive numbers\n    new_list = [x + 1 for x in l1]\n    \n    # Iterate over the new list and append each pair of consecutive numbers\n    return [new_list[i + 1] - new_list[i] for i in range(len(new_list) - 1)]\n    \n    \ndef pair_histogram(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    # Create a new list with a pair of consecutive numbers\n    new_list = [x + 1 for x in l1]\n    \n    # Iterate over the new list and append each pair of consecutive numbers\n    return [new_list[i + 1] - new_list[i] for i in range(len(new_list) - 1)]\n    \n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    l1.sort()\n    for i in range(len(l1) - 1):\n        l.append([l1[i],l1[i+1]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            if l1[i]!= l1[j] and l1[i] not in pairs:\n                pairs.append((l1[i], l1[j]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    def pairwise(l):\n        return list(map(list, zip(*l)))\n    return pairwise(l1)\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        l.append([l1[i],l1[i+1]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair=[]\n    l=[]\n    for i in range(len(l1)-1):\n        if l1[i]==l1[i+1]:\n            pair.append([l1[i],l1[i+1]])\n            l.append([l1[i],l1[i+1]])\n        elif l1[i+1]==l1[i]:\n            pair.append([l1[i+1],l1[i]])\n            l.append([l1[i+1],l1[i]])\n        else:\n            pair.append([l1[i],l1[i+1]])\n            l.append([l1[i],l1[i+1]])\n    return pair\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    n = 0\n    while n < len(l1):\n        l2.append((l1[n],l1[n+1]))\n        n += 1\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if i < len(l1) - 1:\n            if l1[i + 1] - l1[i] == 1:\n                l.append([l1[i], l1[i + 1]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    lst = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j]:\n                continue\n            else:\n                lst.append((l1[i], l1[j]))\n    return lst\n    \ndef find_diff(l1):\n    '''\n    Write a function to find the difference between the \n    first element and the last element of a given list.\n    '''\n    diff = []\n    for i in range(len(l1)-1):\n        if l1[i+1] == l1[i]:\n            continue\n        else:\n            diff.append((l1[i], l1[i+1]))\n    return diff\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    first = 0\n    second = 0\n    nums = []\n    while first <= len(l1)-1:\n        if l1[first] == l1[first+1]:\n            first += 1\n            continue\n        nums.append((l1[first], l1[first+1]))\n        first += 1\n    return nums\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    i = 0\n    j = 1\n    while j < len(arr) - 1:\n        if arr[i] + arr[j] == sum:\n            count += 1\n        i += 1\n        j += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    '''\n    >>> get_pairs_count([2, 4, 3, 6, 1, 2], 7)\n    5\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i + j == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if sum == 0:\n        return 0\n    if sum < 0:\n        return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for index in range(0, len(arr)):\n        for num in range(index + 1, len(arr)):\n            if(arr[index] + arr[num] == sum):\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # if the sum is less than sum we can not have a pair with sum < sum\n    if sum < sum:\n        return -1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    if sum == 0:\n        return 0\n    elif arr[0]!= arr[1]:\n        counter += 1\n    for i in range(2, len(arr)):\n        if sum - arr[i] == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d=[]\n    for i in li1:\n        if i not in li2:\n            d.append(i)\n    return d\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff1=[]\n    diff2=[]\n    for i in li1:\n        if i not in li2:\n            diff1.append(i)\n        else:\n            diff2.append(i)\n    return diff1,diff2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = list(li1)\n    li.extend(li2)\n    return li\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    if len(li1)==len(li2):\n        li1_dif=[]\n        for i in range(len(li1)):\n            if li1[i]!=li2[i]:\n                li1_dif.append(li1[i])\n        return li1_dif\n    else:\n        return li1,li2"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(len(li1)-len(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    print(li1-li2)\n    return li1-li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dif = []\n    for i in li1:\n        if i not in li2:\n            dif.append(i)\n    return dif\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            result.append(li1[i])\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in range(0,len(li1)-1):\n        if li1[i]!= li2[i]:\n            diff_list.append(li2[i])\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1[1:]-li2[1:]\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n<2: \n        return n \n    else:\n        return odd_num_sum(n-1) + 4*n*(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    elif n%2 == 1: \n        return odd_num_sum(n//2)\n    else : \n        return odd_num_sum(n//2) + odd_num_sum(n//2+1)\n        "
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + (4**i)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    for i in range(n + 1):\n        for j in range(i + 1):\n            if j%2 == 1:\n                break\n            else:\n                print(i**2)\n    \nodd_num_sum(3)\nodd_num_sum(4)\nodd_num_sum(5)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    power_of_n = []\n    for i in range(n+1) : \n        if (i % 2 == 0) : \n            power_of_n.append(i**3)\n    return sum(power_of_n)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n<4 :\n        return n\n    elif n%2==0 :\n        return odd_num_sum(n-1)**2\n    else :\n        return odd_num_sum(n-1)**2+odd_num_sum(n-2)**2\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_odd_numbers = 0\n    for n_ in range(n, -1, -2) :\n        sum_of_odd_numbers += n_ ** 3\n    return sum_of_odd_numbers\nprint(odd_num_sum(5)"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s += pow(2, i)\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for n in range(n):\n        sum += (n**3)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        return 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    count = 0\n    for i in exp:\n        if i == '(':\n            count+=1\n        else:\n            if count!=0:\n                return False\n            else:\n                count-=1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    opened_expression = deque()\n    closed_expression = deque()\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    s.append(exp)\n    parenthesis = '()'\n    i = 0\n    while s:\n        if i < len(exp):\n            if s[i] in parenthesis:\n                s.append(s[i]*2)\n            else:\n                s.append(s[i])\n        else:\n            if len(s) == 1:\n                return True\n            if s[i] == '(':\n                if not parenthesis:\n                    return False\n                if parenthesis[-1] == s[i]:\n                    del s[i]\n                else:\n                    return False\n            else:\n                return False\n        i+=1\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if type(exp) is list:\n        return check_expression(exp[0]) and check_expression(exp[1:])\n    elif type(exp) is str:\n        if len(exp)==1:\n            if exp in '()':\n                return True\n            else:\n                return False\n        elif len(exp)==2:\n            if exp[0] in '()':\n                return check_expression(exp[1:])\n            else:\n                return False\n        elif len(exp)==3:\n            if exp[0]==exp[1]:\n                if exp[1] in '()':\n                    return check_expression(exp[1:])\n                elif exp[2] in '()':\n                    return check_expression(exp[2:])\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    num_of_spaces = 0\n    num_of_parentheses = 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # if len(exp) == 0:\n    #     return True\n    # elif exp[0] == '(':\n    #     if not check_expression(exp[1:]) :\n    #         return False\n    #     else:\n    #         return check_expression(exp[1:])\n    # elif exp[0] == '{':\n    #     if not check_expression(exp[1:]) :\n    #         return False\n    #     else:\n    #         return check_expression(exp[1:])\n    # elif exp[0] == ')':\n    #     return not check_expression(exp[1:])\n    # else :\n    #     return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for symbol in exp:\n        if symbol in '(':\n            stack.append(symbol)\n        elif symbol in ')':\n            if not stack or symbol!= stack.pop():\n                return False\n    return True if not stack else False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # write your code here\n    my_str = test_str.split()\n    max_length = K\n    for i in my_str:\n        if len(i) < max_length:\n            i = i[:max_length] + i[len(i) - 1::]\n            my_str.remove(i)\n    my_str = \"\".join(my_str)\n    return my_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_set = set(test_str)\n    temp_list = [word for word in test_str.split() if len(word) == K]\n    temp_string = \" \".join(temp_list)\n    print(temp_string)\n    return temp_string\n    \n    \nif __name__ == \"__main__\":\n    print(remove_length(\"banana bolin with balon banana\", 3))\n    print(remove_length(\"_ballon\", 4))\n    print(remove_length(\"majestic home\", 2))\n    print(remove_length(\"is it csv?\", 3))\n    print(remove_length(\"is it csv?\", 4))\n    print(remove_length(\"this is a very interesting string\", 1))\n    print(remove_length(\"is it csv?\", 5))\n    print(remove_length(\"bacon\", 2))\n    print(remove_length(\"bacon\", 3))\n    print(remove_length(\"trouble\", 2))\n    print(remove_length(\"red man\", 1))\n    print(remove_length(\"banana with cedar\", 2))\n    print(remove_length(\"banana\", 3))\n    print(remove_length(\"banana\", 4))\n    print(remove_length(\"banana\", 5))\n    print(remove_length(\"banana with cedar\", 6))\n    print(remove_length(\"banana with cedar\", 7))\n    print(remove_length(\"\", 5))\n    print(remove_length(\"\", 5))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 1))\n    print(remove_length(\"banana\", 2))\n    print(remove_length(\"banana\", 3))\n    print(remove_length(\"banana\", 4))\n    print(remove_length(\"banana\", 5))\n    print(remove_length(\"banana with cedar\", 6))\n    print(remove_length(\"banana\", 7))\n    print(remove_length(\"banana with cedar\", 8))\n    print(remove_length(\"banana with cedar\", 9))\n    print(remove_length(\"banana with cedar\", 10))\n    print(remove_length(\"banana with cedar\", 11))\n    print(remove_length(\"banana with cedar\", 12))\n    print(remove_length(\"banana with cedar\", 13))\n    print(remove_length(\"\", 0))\n    print(remove_length(\"\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print(remove_length(\"banana\", 0))\n    print"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # your code goes here\n    l = len(test_str)\n    k = K\n    output = \"\"\n    while l >= k:\n        output += test_str[l-(k+1):l]\n        l -= 1\n    return output\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    res = [word for word in words if len(word) == K]\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if not test_str:\n        return \"\"\n    if len(test_str) == 1:\n        return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #split the string into k splitted strings \n    splitted_str = test_str.split()\n    #remove the k-length words from splitted strings\n    for i in range(K):\n        splitted_str.remove(splitted_str[i])\n    #re-assigning the splitted strings with the new words\n    test_str =''.join(splitted_str)\n    #return the filtered string\n    return test_str\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    num_words = 0\n    remove_words = []\n    for word in test_str.split():\n        num_words += 1\n        if len(word) == K:\n            remove_words.append(word)\n            continue\n    return''.join(remove_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # empty array for storing word pairs\n    word_pairs = []\n    # use dictionary to keep track of each word\n    # and its index \n    for i in range(len(test_str) - K + 1):\n        # use dictionary to keep track of each word\n        word_pairs.append((test_str[i:i + K],i))\n    # remove all the word pairs\n    for word, i in word_pairs:\n        test_str = test_str.replace(word, \" \")\n    return test_str"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = []\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            result.append(word)\n    return \" \".join(result)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #all the occurrences of the substring in text\n    occurence_list = []\n    pos_list = []\n    for i in range(len(text)):\n        if re.search(pattern, text[i:i+len(pattern)]):\n            occurence_list.append(text[i:i+len(pattern)])\n            pos_list.append(i)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace(\"[\",\"\").replace(\"]\",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\"*\",\"\").replace(\",\",\"\").replace(\".\",\"\")\n    if not pattern:\n        return None\n    # print(pattern)\n    # print(text)\n    i = 0\n    j = 0\n    while(i<len(text) and j<len(pattern)):\n        # print(text[i],pattern[j])\n        if(text[i]==pattern[j]):\n            i+=1\n            j+=1\n        else:\n            break\n    if(i==len(text) and j==len(pattern)):\n        return None\n    return [i,j]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # 1 - count how many occurence of a substring\n    n = len(pattern)\n    # 2 - create a hashtable to store the length of the substring\n    dict_n = {}\n    for i in range(0,len(text)):\n        if pattern[i] in dict_n:\n            dict_n[pattern[i]] += 1\n        else:\n            dict_n[pattern[i]] = 1\n    \n    # 3 - loop through the substring and compare it to the pattern\n    for i in range(0,len(text)):\n        if pattern[i] in dict_n:\n            if dict_n[pattern[i]] == 1:\n                n -= 1\n            if dict_n[pattern[i]] == 0:\n                return i\n    \n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if matches:\n        for i in matches:\n            print(i)\n    else:\n        print('No match')\n        \ndef longest_substring(text):\n    '''\n    Write a function to find the longest substring in a string. \n    '''\n    \n    index=0\n    max_length=0\n    for i in range(len(text)):\n        length=len(text[i:])\n        if length>max_length:\n            max_length=length\n            index=i\n    return(text[index:index+max_length])\n    \ndef most_common(lst):\n    '''\n    Write a function to find the most common element in a list.\n    '''\n    count=0\n    \n    for i in lst:\n        if i in lst[count+1:]:\n            count+=1\n    return(lst[count+1:])\n    \ndef check_string_punct(text):\n    '''\n    Write a function to check whether a string is punctuation or not.\n    '''\n    regex = \"[^A-Za-z'0-9'\\']+\"\n    regex_pattern = re.compile(regex)\n    \n    matches = re.findall(regex_pattern,text)\n    if matches:\n        return False\n    else:\n        return True\n    \ndef validate_email(email):\n    '''\n    Write a function to validate an email address.\n    '''\n    \n    email_pattern = re.compile(r\"^[a-zA-Z0-9_\\-\\.]+\\@([a-zA-Z0-9_\\-\\.]+\\.)*([a-zA-Z]{2,})\\b\")\n    matches = email_pattern.search(email)\n    if matches:\n        return True\n    else:\n        return False\n    \ndef create_file_to_write(filename):\n    '''\n    Write a function to create a.txt file.\n    '''\n    \n    filename = './'+filename+'.txt'\n    with open(filename,'w') as file:\n        file.write('all different words are stored in a list')\n        file.write('\\n')\n        for word in list:\n            file.write(word+'\\n')\n        file.write('\\n')\n        for i in range(len(list)):\n            file.write(list[i]+'\\n')\n        file.write('\\n')\n        for i in range(len(list)):\n            file.write(str(i)+'\\n')\n    \ndef add_comment(filename):\n    '''\n    Write a function to add a comment to a.txt file.\n    '''\n    \n    filename = './'+filename+'.txt'\n    with open(filename,'a') as file:\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('Comments are not required to be added to the.txt file')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        for i in range(len(list)):\n            file.write(list[i]+'\\n')\n        file.write('\\n')\n        file.write('\\n')\n        for i in range(len(list)):\n            file.write(str(i)+'\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('Comment added by the author')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('Comment written by the author')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('Comment written by the author')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('#'*len(list))\n    \ndef delete_comment(filename):\n    '''\n    Write a function to delete a comment from a.txt file.\n    '''\n    \n    filename = './'+filename+'.txt'\n    with open(filename,'r') as file:\n        data = file.readlines()\n        new_data = []\n        for line in data:\n            line = line.replace('\\n','')\n            new_data.append(line)\n    with open(filename,'w') as file:\n        for line in new_data:\n            file.write(line)\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('Comments are not required to be deleted from the.txt file')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('#'*len(list))\n    \ndef remove_comment(filename):\n    '''\n    Write a function to delete a comment from a.txt file.\n    '''\n    \n    filename = './'+filename+'.txt'\n    with open(filename,'r') as file:\n        data = file.readlines()\n        new_data = []\n        for line in data:\n            line = line.replace('\\n','')\n            new_data.append(line)\n    with open(filename,'w') as file:\n        for line in new_data:\n            file.write(line)\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('Comments are not required to be deleted from the.txt file')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('\\n')\n        file.write('#'*len(list))\n    \ndef concatenate_list_to_string(list):\n    '''\n    Write a function to concatenate a list of strings to a string.\n    '''\n    string = ''\n    for i in list:\n        string+=i\n    return string\n    \ndef split_list_to_string(list):\n    '''\n    Write a function to split a list of strings to a list of words.\n    '''\n    string = []\n    for i in range(len(list)):\n        if i==0:\n            string.append(list[i])\n        else:\n            string.append(list[i]+' ')\n    return string\n    \ndef get_words_from_string(string):\n    '''\n    Write a function to split a string of words to a list of strings.\n    '''\n    string = string.lower()\n    for i in range(len(string)):\n        if i==0:\n            string = string[1:]\n        else:\n            string = string[:i]+string[i+1:]\n    return string.split(' ')\n    \ndef get_unique_words_from_string(string):\n    '''\n    Write a function to return the set of words in a string.\n    '''\n    string = string.lower()\n    unique_words = set(string.split(' '))\n    return unique_words\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res=[]\n    match=re.search(pattern,text)\n    if match:\n        pos=match.start()\n        res=match.span()\n    else:\n        pos=0\n        res=None\n    return res,pos\ndef remove_spaces(string):\n    '''\n    Given a string, it will remove the extra spaces.\n    '''\n    if not string: return \"\"\n    if string.find(\" \") == -1:\n        return string.strip()\n    else:\n        return string.strip(\" \")\ndef remove_tabs(string):\n    '''\n    Given a string, it will remove the extra tabs.\n    '''\n    if not string: return \"\"\n    if string.find(\"\\t\") == -1:\n        return string.strip()\n    else:\n        return string.strip(\"\\t\")\ndef create_dict(text):\n    '''\n    Given a string, it will split the string by tab and create a dictionary where the key is the word and the value is the occurence.\n    '''\n    if not text: return {}\n    words=text.split(\" \")\n    words=words[1:]\n    occurence={}\n    for word in words:\n        word=remove_tabs(word)\n        word=remove_spaces(word)\n        if word in occurence:\n            occurence[word]+=1\n        else:\n            occurence[word]=1\n    return occurence\ndef find_corpus(text):\n    '''\n    Given a string, it will return the top 10 corpus of the text.\n    '''\n    res=[]\n    def check_space(string):\n        '''\n        It will check whether the string contains space or not.\n        '''\n        if not string: return \"\"\n        if string.find(\" \") == -1:\n            return string\n        else:\n            return string.strip(\" \")\n    words=text.split(\" \")\n    for word in words:\n        word=remove_spaces(word)\n        word=remove_tabs(word)\n        if word in res:\n            res.pop(res.index(word))\n        else:\n            res.append(word)\n    return res\ndef create_documents(text):\n    '''\n    Given a string, it will split the string by tab and create a dictionary where the key is the word and the value is the occurence.\n    '''\n    if not text: return []\n    words=text.split(\" \")\n    documents={}\n    for word in words:\n        word=remove_tabs(word)\n        word=remove_spaces(word)\n        if word in documents:\n            documents[word]+=1\n        else:\n            documents[word]=1\n    return documents\ndef create_index(documents,num):\n    '''\n    Given a dict, it will create an index in the document.\n    '''\n    res=[]\n    for word in documents:\n        res.append([word,documents[word]])\n    res=sorted(res,key=lambda x:x[1],reverse=True)\n    if len(res)<num:\n        return res\n    else:\n        return res[:num]\ndef update_index(res,index):\n    '''\n    Given a list of documents, it will update the index in the document.\n    '''\n    for i in range(len(index)):\n        word,doc=index[i]\n        doc=remove_tabs(doc)\n        doc=remove_spaces(doc)\n        if doc in res:\n            res.pop(res.index(doc))\n        else:\n            res.append([word,doc])\n    return res\ndef find_occurances(text):\n    '''\n    Given a string, it will return a dictionary where the key is the word and the value is the occurrence.\n    '''\n    occurence=create_dict(text)\n    return occurence\ndef update_occurances(occurence,text):\n    '''\n    Given a dictionary, it will update the dictionary in the occurrence.\n    '''\n    occurence=create_occurences(occurence,text)\n    return occurence\ndef find_all_occurances(text):\n    '''\n    Given a string, it will return a dictionary where the key is the word and the value is the occurrence.\n    '''\n    occurence=create_dict(text)\n    return occurence\ndef find_all_occurances_p_word(text):\n    '''\n    Given a string, it will return a dictionary where the key is the word and the value is the occurrence.\n    '''\n    occurence=create_occurences(occurence,text)\n    return occurence\ndef remove_special_characters(text):\n    '''\n    Given a string, it will remove any special characters.\n    '''\n    text=text.replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\"\").replace(\".\")+\".\"\n    return text\ndef find_all_occurances_special_characters(text):\n    '''\n    Given a string, it will return a dictionary where the key is the word and the value is the occurrence.\n    '''\n    occurence=create_occurences(occurence,text)\n    return occurence\ndef remove_brackets(text):\n    '''\n    Given a string, it will remove the brackets.\n    '''\n    text=text.replace(\"[\",\"\").replace(\"]\",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\"{\",\"\").replace(\"}\",\"\")\n    return text\ndef extract_corpus(text):\n    '''\n    Given a string, it will return the top 10 corpus of the text.\n    '''\n    res=[]\n    def check_space(string):\n        '''\n        It will check whether the string contains space or not.\n        '''\n        if not string: return \"\"\n        if string.find(\" \") == -1:\n            return string\n        else:\n            return string.strip(\" \")\n    words=text.split(\" \")\n    for word in words:\n        word=remove_spaces(word)\n        word=remove_tabs(word)\n        if word in res:\n            res.pop(res.index(word))\n        else:\n            res.append(word)\n    return res\ndef extract_index(text):\n    '''\n    Given a string, it will return the index of the top 10 corpus in the document.\n    '''\n    res=[]\n    for word in text:\n        word=remove_tabs(word)\n        word=remove_spaces(word)\n        if word in res:\n            res.pop(res.index(word))\n        else:\n            res.append(word)\n    return res\ndef extract_documents(text):\n    '''\n    Given a string, it will return the documents in the string.\n    '''\n    res=[]\n    def check_space(string):\n        '''\n        It will check whether the string contains space or not.\n        '''\n        if not string: return \"\"\n        if string.find(\" \") == -1:\n            return string\n        else:\n            return string.strip(\" \")\n    words=text.split(\" \")\n    for word in words:\n        word=remove_tabs(word)\n        word=remove_spaces(word)\n        if word in res:\n            res.pop(res.index(word))\n        else:\n            res.append(word)\n    return res\ndef extract_occurences(text):\n    '''\n    Given a string, it will return the documents in the string.\n    '''\n    res=[]\n    def check_space(string):\n        '''\n        It will check whether the string contains space or not.\n        '''\n        if not string: return \"\"\n        if string.find(\" \") == -1:\n            return string\n        else:\n            return string.strip(\" \")\n    words=text.split(\" \")\n    for word in words:\n        word=remove_tabs(word)\n        word=remove_spaces(word)\n        if word in res:\n            res.pop(res.index(word))\n        else:\n            res.append(word)\n    return res\ndef extrac"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find the pattern\n    m = re.search(pattern,text)\n    if m is None:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #Implement here\n    reg_regex = r'\\b'+ pattern + r'\\b'\n    result = re.findall(reg_regex, text)\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Pattern = A string containing at least one lower case letter.\n    # Returns: the count of occurrences in a string, and the position of the occurrences.\n    pattern = re.sub(r'[^a-zA-Z0-9]', '', pattern).lower()\n    pattern_length = len(pattern)\n    occurrence_count = 0\n    position = 0\n    while position < len(text):\n        if text[position:position + pattern_length] == pattern:\n            occurrence_count += 1\n            position += pattern_length\n        else:\n            position += 1\n    return occurrence_count, position\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text)<len(pattern):\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if not result:\n        return None\n    return result[0]\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # solution 1 - check if each element in nums contains an odd number\n    # start = 0\n    # end = len(nums) - 1\n    # if start % 2 == 0:\n    #     print(False)\n    # elif end % 2 == 1:\n    #     print(True)\n    # else:\n    #     print(\"False\")\n    # # print(start, end, nums)\n    # for i in range(start, end):\n    #     if nums[i] % 2 == 1:\n    #         print(False)\n    #         break\n    #     if nums[i] % 2!= 0:\n    #         print(False)\n    #         break\n    #     if nums[i] % 2 == 0:\n    #         print(True)\n    #         break\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    counter = 0\n    for i in nums:\n        if counter % 2!= 0:\n            counter += 1\n            if i % 2!= 0:\n                counter -= 1\n                if counter < 0:\n                    counter = 0\n        else:\n            break\n    return counter == 0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums==[]:\n        return False\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    if len(nums)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums == []:\n        return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i % 2]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return (nums[0] % 2 == 0) and (nums[1] % 2 == 1) and (nums[2] % 2 == 0) and (nums[3] % 2 == 1)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    count = 0\n    \n    for letter in test_str:\n        if letter in 'aeiou':\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # loop through each character\n    for char in test_str:\n        # if a character is a vowel\n        if char in vowels:\n            # increment count by 1\n            if char in vowels:\n                vowels.remove(char)\n                # update the index\n                vowels.append(char)\n    # return count of vowels\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    def count_vowels(str):\n        count = 0\n        for i in str:\n            if i in 'aeiouAEIOU':\n                count += 1\n        return count\n    \n    count = 0\n    vowels = {'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u'}\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    # Your code here\n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels_count = 0\n    for c in test_str:\n        if c in 'aeiou':\n            vowels_count += 1\n        else:\n            pass\n    \n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    count = 0\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels_count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u']:\n            vowels_count += 1\n        else:\n            count += 1\n    print(vowels_count)\n    print(count)\n    \n    \n    \n    \n    \ndef count_consonants(test_str):\n    '''\n    Write a function to count those characters which have consonants as their neighbors in the given string.\n    '''\n    count = 0\n    consonants_count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z','y']:\n            consonants_count += 1\n        else:\n            count += 1\n    print(consonants_count)\n    print(count)\n    \n    \n    \n    \n    \ndef remove_space(test_str):\n    '''\n    Write a function to remove spaces from the string.\n    '''\n    \n    new_str = ''\n    for i in range(len(test_str)):\n        if test_str[i] =='':\n            new_str += test_str[i]\n            test_str = test_str[i:]\n            \n    return new_str\n    \n    \n    \n    \n    \ndef all_letters(test_str):\n    '''\n    Write a function to count how many times all letters in the given string appear in the alphabet.\n    '''\n    count = 0\n    for i in test_str:\n        if i in alphabet:\n            count += 1\n    \n    print(count)\n    \n    \n    \n    \n    \n    \ndef is_pangram(test_str):\n    '''\n    Write a function to check whether the string passed in has at least one pangram in it.\n    '''\n    \n    \n    import string\n    pangrams = set(string.ascii_letters + string.digits)\n    \n    if len(test_str) < 4:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \ndef start_with_vowels(test_str):\n    '''\n    Write a function to check if the string passed in has at least one consonant in it.\n    '''\n    \n    \n    import string\n    consonants = set(string.ascii_lowercase)\n    \n    if len(test_str) < 3:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef only_char(test_str):\n    '''\n    Write a function to check if the string passed in only contains vowels or consonants.\n    '''\n    vowels = set(['a','e','i','o','u'])\n    consonants = set(string.ascii_lowercase)\n    \n    if len(test_str) < 3:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef start_with_vowels_and_consonants(test_str):\n    '''\n    Write a function to check if the string passed in only contains vowels and consonants.\n    '''\n    \n    vowels = set(['a','e','i','o','u'])\n    consonants = set(string.ascii_lowercase)\n    \n    if len(test_str) < 3:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count_vowels = 0\n    for char in test_str:\n        if char in vowels:\n            count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.lower() in \"aeiou\":\n            count += 1\n        elif i.lower() in \"bcdfghjklmnpqrstvwxyz\":\n            count += 1\n    return count\n    # TODO: write your solution here\n    #print(count)\n    \n    \ndef count_consonants(test_str):\n    '''\n    Write a function to count those characters which have consonants as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.lower() not in \"abcdefghijklmnopqrstvwxyz\":\n            count += 1\n    return count\n    # TODO: write your solution here\n    #print(count)\n    \n    \ndef count_tokens(test_str):\n    '''\n    Write a function to count those characters which occur in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.lower() in \"aeiou\":\n            count += 1\n        elif i.lower() in \"bcdfghjklmnpqrstvwxyz\":\n            count += 1\n    return count\n    # TODO: write your solution here\n    #print(count)\n    \n    \ndef count_digits(test_str):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isdigit():\n            count += 1\n    return count\n    # TODO: write your solution here\n    #print(count)\n    \n    \ndef count_special_characters(test_str):\n    '''\n    Write a function to count the number of special characters in a given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isalpha():\n            count += 1\n    return count\n    # TODO: write your solution here\n    #print(count)\n    \n    \ndef main():\n    test_str = input(\"Enter string to count: \")\n    if count_vowels(test_str) > 0:\n        print(\"Vowels\")\n    elif count_consonants(test_str) > 0:\n        print(\"Consonants\")\n    elif count_tokens(test_str) > 0:\n        print(\"Tokens\")\n    elif count_digits(test_str) > 0:\n        print(\"Digits\")\n    elif count_special_characters(test_str) > 0:\n        print(\"Special characters\")\n    else:\n        print(\"Not a string\")\n    \n    \nmain("
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # set a counter variable\n    vowels = 0\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    arr.sort()\n    print(sum(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    lst = list(set(arr))\n    lst.sort()\n    total = 0\n    for i in range(len(lst)):\n        total += int(lst[i])\n    return total\nprint(find_sum([1, 1, 1, 2, 2, 3, 4, 5, 2, 2, 2, 2, 2]))"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # your code here\n    i = 0\n    sum = 0\n    while i < len(arr):\n        if arr[i] not in arr[i+1:]:\n            sum += arr[i]\n            i+=1\n        else:\n            i+=1\n            \n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = []\n    for i in arr: \n        if i not in count: \n            count.append(i) \n    return sum(count)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i] and i!=0 and arr[i]!= arr[i-1]:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # your code goes here\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr)==0:\n        return 0\n    sum_of_elements=arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]==sum_of_elements:\n            sum_of_elements+=arr[i]\n    return sum_of_elements\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    for x in arr:\n        if x!= result:\n            result = x\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    list_sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i] and arr[i] not in list_sum:\n            list_sum += arr[i]\n    return list_sum\n    "
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist_num = int(len(list1)/2)\n    list1_sublist = []\n    for i in range(sublist_num):\n        list1_sublist.append(list1[i*2:i*2+2])\n    \n    #print(list1_sublist)\n    return list1_sublist\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    #if len(list1) < 2:\n    #    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # remove duplicates from original list\n    list1 = list(dict.fromkeys(list1))\n    # remove duplicates from sublists\n    list2 = [[ele] for ele in list1]\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) <= 1:\n        return list1\n    m, n = len(list1), len(list1)\n    for i in range(n):\n        if list1[i] == list1[i+1]:\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n            list1[i+1], list1[m-1] = list1[m-1], list1[i+1]\n            m -= 2\n        else:\n            m -= 1\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n            list1[i+1], list1[m-1] = list1[m-1], list1[i+1]\n            m -= 2\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    res = []\n    l = len(list1)\n    for i in range(l):\n        if(list1[i] == list1[i-1]):\n            res.append([list1[i]])\n        else:\n            if(list1[i-1] == list1[i]):\n                res[-1].append(list1[i])\n            else:\n                res.append([list1[i]])\n                \n    for i in range(len(res)):\n        res[i] = list(res[i])\n        \n    return res\n    \n    \ndef count_unique_elements(list):\n    '''\n    Write a function to count unique elements of a given list.\n    '''\n    \n    count = 0\n    \n    for i in range(len(list)):\n        if(list[i] in list[i+1:]):\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_copy = list1.copy()\n    list_copy.sort()\n    list_new = []\n    for idx, ele in enumerate(list_copy):\n        if idx == 0 or ele!= list_copy[idx - 1]:\n            list_new.append(ele)\n    return list_new\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for group in groupby(list1):\n        if len(list(group)) > 1:\n            res.append(list(group))\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1) - i - 1):\n            if list1[j] == list1[j + 1] and list1[j]!= list1[j + 1]:\n                list1[j] = list1[j + 1]\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublists = []\n    for pair in groupby(list1):\n        pair = list(pair)\n        pair.sort()\n        if len(pair) > 1:\n            for i in range(len(pair) - 1):\n                if pair[i + 1] - pair[i] == 1:\n                    pass\n                else:\n                    sublists.append(pair[i:i + 2])\n    return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l = len(list1)\n    result = []\n    idx = 0\n    while idx < l:\n        if idx!= l - 1:\n            if list1[idx]!= list1[idx + 1]:\n                idx += 1\n            else:\n                result.append(list1[idx:idx + 2])\n        else:\n            result.append(list1[idx:])\n            break\n    return result\ndef unpack_consecutive_duplicates(list1):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into sublists.\n    '''\n    l = len(list1)\n    result = []\n    idx = 0\n    while idx < l:\n        if idx!= l - 1:\n            result.append(list1[idx:idx + 2])\n            idx += 1\n        else:\n            result.append(list1[idx:])\n            break\n    return result\ndef replace_with_sublist_duplicates(list1, list2):\n    '''\n    Write a function to replace all occurrences of duplicate entries in a list of elements in a given list with a given list of sublists.\n    '''\n    l1 = len(list1)\n    l2 = len(list2)\n    result = []\n    for k in range(0, l1):\n        if k!= l2 - 1:\n            if list1[k] == list2[k]:\n                result.append(list1[k])\n            else:\n                result.append(list1[k])\n                result.append(list2[k])\n        else:\n            result.append(list1[k])\n    return result\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove all duplicate elements in a list of elements.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(0, l):\n        if k!= l - 1:\n            result.append(list1[k])\n        else:\n            result.append(list1[k])\n    return result\ndef remove_duplicates_second(list1):\n    '''\n    Write a function to remove all duplicate elements in a list of elements.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(0, l):\n        if k!= l - 1:\n            if list1[k] == list1[k + 1]:\n                result.append(list1[k])\n        else:\n            result.append(list1[k])\n    return result\ndef remove_duplicates_first(list1):\n    '''\n    Write a function to remove all duplicate elements in a list of elements.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(0, l):\n        if k!= l - 1:\n            if list1[k] == list1[k - 1]:\n                result.append(list1[k])\n        else:\n            result.append(list1[k])\n    return result\ndef remove_duplicates_last(list1):\n    '''\n    Write a function to remove all duplicate elements in a list of elements.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(l - 1, -1, -1):\n        if k!= 0:\n            if list1[k] == list1[k - 1]:\n                result.append(list1[k])\n        else:\n            result.append(list1[k])\n    return result\ndef remove_duplicates_first_last(list1):\n    '''\n    Write a function to remove all duplicate elements in a list of elements.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(l - 1, 0, -1):\n        if k!= 0:\n            if list1[k] == list1[k - 1]:\n                result.append(list1[k])\n        else:\n            result.append(list1[k])\n    return result\ndef sort_by_length(list1):\n    '''\n    Write a function to sort a given list in place.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(l):\n        l_idx = k\n        if k!= l - 1:\n            l_idx += 1\n        result.append(list1[l_idx])\n    return result\ndef sort_by_length_second(list1):\n    '''\n    Write a function to sort a given list in place.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(l):\n        l_idx = k\n        if k!= l - 1:\n            l_idx += 1\n        result.append(list1[l_idx])\n    return result\ndef sort_by_length_first(list1):\n    '''\n    Write a function to sort a given list in place.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(l):\n        l_idx = k\n        if k!= l - 1:\n            l_idx += 1\n        result.append(list1[l_idx])\n    return result\ndef sort_by_length_last(list1):\n    '''\n    Write a function to sort a given list in place.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(l):\n        l_idx = k\n        if k!= l - 1:\n            l_idx += 1\n        result.append(list1[l_idx])\n    return result\ndef sort_by_length_first_last(list1):\n    '''\n    Write a function to sort a given list in place.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(l):\n        l_idx = k\n        if k!= l - 1:\n            l_idx += 1\n        result.append(list1[l_idx])\n    return result\ndef sort_by_length_first_last_second(list1):\n    '''\n    Write a function to sort a given list in place.\n    '''\n    l = len(list1)\n    result = []\n    for k in range(l):\n        l_idx = k\n        if k!= l - 1:\n            l_idx += 1\n        result.append(list1[l_idx])\n    return result\ndef is_palindrome(list1):\n    '''\n    Write a function to check if a given list is a palindrome.\n    '''\n    l = len(list1)\n    if l == 0:\n        return False\n    elif l == 1:\n        return True\n    elif list1[0] == list1[-1]:\n        return is_palindrome(list1[1:-1])\n    return False\ndef is_palindrome2(list1):\n    '''\n    Write a function to check if a given list is a palindrome.\n    '''\n    l = len(list1)\n    if l == 0:\n        return False\n    elif l == 1:\n        return True\n    if list1[0] == list1[-1]:\n        return is_palindrome2(list1[1:-1])\n    return False\ndef is_palindrome3(list1):\n    '''\n    Write a function to check if a given list is a palindrome.\n    '''\n    l = len(list1)\n    if l == 0:\n        return False\n    elif l == 1:\n        return True\n    if list1[0] == list1[-1]:\n        return is_palindrome3(list1[1:-1])\n    return False\ndef is_palindrome_second(list1):\n    '''\n    Write a function to check if a given list is a palindrome.\n    '''\n    l = len(list1)\n    if l == 0:\n        return False\n    elif l == 1:\n        return True\n    if list1[0] == list1[-1]:\n        return is_palindrome_second"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    for x in list1:\n        if x in unique_list:\n            unique_list[x] += 1\n        else:\n            unique_list[x] = 1\n    return unique_list\n    \ndef main():\n    '''\n    Handle the command line.\n    '''\n    commandline = sys.argv\n    if len(commandline) > 1:\n        commandline = commandline[1:]\n    for option in commandline:\n        if option == \"--sublists\":\n            t = sublists\n            print(t)\n        elif option == \"--unique\":\n            t = unique_sublists\n            print(t)\n        elif option == \"--print-sublists\":\n            print(t)\n        else:\n            print(\"option %s not understood\" % option)\nmain()"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #{\n    # l1 = [1, 2, 3, 4]\n    # l2 = [1, 3, 4, 1, 2, 3, 4]\n    # l3 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l4 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l5 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l6 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l7 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l8 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l9 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l10 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l11 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l12 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l13 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l14 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l15 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l16 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l17 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l18 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l19 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l20 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l21 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l22 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l23 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l24 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l25 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l26 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    # l27 = [1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(0, len(list1)):\n        temp = list1[i]\n        if temp in count:\n            count[temp] += 1\n        else:\n            count[temp] = 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    t = {}\n    for i in list1:\n        if i not in t:\n            t[i] = 1\n        else:\n            t[i] += 1\n    return t\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for i in list1:\n        if i in result:\n            result[i]+=1\n        else:\n            result[i]=1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create dictionary\n    dictionary = {}\n    # create empty list\n    list = []\n    # loop through each list\n    for i in list1:\n        # add each element into the dictionary\n        # add value of tuple into list\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n        # append tuple\n        list.append(tuple(i))\n    # return the dictionary\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            if list1[i][j] in dic.keys():\n                dic[list1[i][j]] += 1\n            else:\n                dic[list1[i][j]] = 1\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict_occ = {}\n    for i in range(len(list1)):\n        if list1[i] in dict_occ:\n            dict_occ[list1[i]] += 1\n        else:\n            dict_occ[list1[i]] = 1\n    return dict_occ\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    tup = []\n    for i in list1:\n        tup.append(i)\n    return dict(Counter(tup))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if not test_list:\n        return []\n    s = set(test_list)\n    s.remove(0)\n    s.remove(max(test_list))\n    comb = combinations(s, 2)\n    result = []\n    for i in comb:\n        result.append(i)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in test_list:\n        if tuple(i) not in result:\n            result.append(tuple(i))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list == []:\n        return []\n    elif len(test_list) == 1:\n        return list(itertools.combinations(test_list,1))\n    elif len(test_list) == 2:\n        return list(itertools.combinations(test_list,2))\n    else:\n        # find the combination from lists of tuples:\n        # as you know, tuples are immutable, list of tuples is immutable!\n        # https://stackoverflow.com/questions/23745215/python-tuples-are-immutable-and-tuples-are-immutable\n        return list(itertools.combinations(test_list,len(test_list)))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for x in test_list:\n        if x[0] == x[1]:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # For each element in the tuple list, generate all possible combinations of elements\n    # using the list of tuples.\n    # print('Finding the combinations of sums with tuples in the given tuple list...')\n    # print(test_list)\n    print(len(test_list))\n    result = []\n    for i in range(len(test_list)):\n        result += list(combinations(test_list,i))\n        # print(result)\n        # print('\\n')\n    print(len(result))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    for i in test_list:\n        x=tuple(i)\n        if not x in comb_list:\n            comb_list.append(x)\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combi_list = []\n    for i in test_list:\n        for j in combinations(test_list, i):\n            combi_list.append(tuple(j))\n    return combi_list\ndef find_combinations_with_tuple(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combi_list = []\n    for i in test_list:\n        for j in combinations(test_list, i):\n            combi_list.append(j)\n    return combi_list"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Your code goes here\n    if len(test_list)<=1:\n        return None\n    \n    return list(combinations(test_list,len(test_list)))\n    \n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list == None:\n        print('Invalid Input')\n        return None\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    if n == 0:\n        return []\n    sums_list = []\n    for num in test_list:\n        sums_list.append(num)\n        \n    sums_list.sort()\n    combs = []\n    for i in range(1,len(sums_list)):\n        combs.append((sums_list[i],sums_list[i-1]))\n    return combs\n    \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            divisors.append(i) \n    return len(divisors) == 2 \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)+1)):\n        if n % i == 0:\n            count += 2\n            if n // i == i:\n                count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n = int(n)\n    for x in range(1, n) :\n        if n % x == 0 :\n            return x\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            divisors += 1\n    if divisors < 2 : \n        return False\n    else : \n        return True\n    \ndef count_perfect_squares(n) : \n    '''\n    Write a python function to check whether the count of perfect squares is even. https://www.w3resource.com/python/python-basic/python-basic-1-exercise-24.php\n    '''\n    perfect_squares = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            perfect_squares += 1\n    if perfect_squares < 2 : \n        return False\n    else : \n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 2 : \n        return False\n    for i in range(2, math.floor(math.sqrt(n))) : \n        if n % i == 0 : \n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors_odd = 0\n    count_divisors_even = 0\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 :\n        return 0\n    for i in range(1,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            return 0\n            break\n    else :\n        return 1\n    return count_divisors(n//i)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    while(i*i <= n):\n        if (n%i == 0):\n            return False\n        i = i+1\n    return True\ndef check_divisors(n,divisors) : \n    '''\n    Write a python function to check whether the number is a divisor. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    while(i*i <= n):\n        if (n%i == 0):\n            if(divisors.count(i) == 0):\n                return False\n            else:\n                divisors.count(i) - 1\n        i = i+1\n    return True\ndef is_perfect_number(n):\n    '''\n    Write a python function to check whether a number is a perfect number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    i = 1\n    while(i*i <= n):\n        if (n%i == 0):\n            if(n == 1):\n                return False\n            else:\n                if(n == i):\n                    return True\n                else:\n                    return False\n        i = i+1\n    return True\ndef is_prime_number(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    i = 1\n    while(i*i <= n):\n        if (n%i == 0):\n            if(n == i):\n                return False\n            else:\n                return True\n        i = i+1\n    return True\ndef is_prime_number(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    i = 1\n    while(i*i <= n):\n        if (n%i == 0):\n            if(n == i):\n                return False\n            else:\n                return True\n        i = i+1\n    return True\ndef is_perfect_number(n):\n    '''\n    Write a python function to check whether a number is a perfect number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    i = 1\n    while(i*i <= n):\n        if (n%i == 0):\n            if(n == i):\n                return False\n            else:\n                if(n == i+1):\n                    return True\n                else:\n                    return False\n        i = i+1\n    return True\ndef is_prime_number(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    i = 1\n    while(i*i <= n):\n        if (n%i == 0):\n            if(n == i):\n                return False\n            else:\n                if(n == i+1):\n                    return True\n                else:\n                    return False\n        i = i+1\n    return True\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    while(i*i <= n):\n        if (n%i == 0):\n            if(n == i):\n                return False\n            else:\n                return True\n        i = i+1\n    return True\ndef sum_of_digits(n):\n    '''\n    Write a python function to compute sum of digits of a number.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n==0):\n        return 0\n    else:\n        return n%10 + sum_of_digits(n//10)\ndef is_prime_number_v1(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if (n<=1):\n        return False\n    i = 2\n    while(i*i <= n):\n        if (n%i == 0):\n            return False\n        i = i+1\n    return True\ndef is_prime_number_v2(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    i = 1\n    while(i*i <= n):\n        if (n%i == 0):\n            if(n == i):\n                return False\n            else:\n                return True\n        i = i+1\n    return True\ndef is_prime_number_v3(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if (n<=1):\n        return False\n    if n <= 3:\n        return True\n    if n%2 == 0 or n%3 == 0:\n        return False\n    i = 5\n    while(i*i <= n):\n        if (n%i == 0):\n            return False\n        i = i+5\n    return True\ndef is_prime_number_v4(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if (n<=1):\n        return False\n    if n <= 3:\n        return True\n    if n%2 == 0 or n%3 == 0:\n        return False\n    i = 5\n    while(i*i <= n):\n        if (n%i == 0):\n            return False\n        i = i+5\n    return True\ndef is_prime_number_v5(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if (n<=1):\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    if n <= 2:\n        return True\n    if n%4 == 0:\n        return False\n    i = 5\n    while(i*i <= n):\n        if (n%i == 0):\n            return False\n        i = i+5\n    return True\ndef is_prime_number_v6(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if (n<=1):\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    if n <= 2:\n        return True\n    if n%4 == 0:\n        return False\n    i = 5\n    while(i*i <= n):\n        if (n%i == 0):\n            return False\n        i = i+5\n    return True\ndef is_prime"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n + 1) :\n        if (n % i == 0) :\n            divisors.append(i)\n    \n    return len(divisors)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    is_divisor = True\n    for x in range(2, int(math.sqrt(n)) + 1) :\n        if n % x == 0 :\n            is_divisor = False\n            break\n    if is_divisor :\n        print(n, 'is a divisor of', n)\n    else :\n        print(n, 'is not a divisor of', n)\n    return is_divisor\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = 0\n    odd_length_sum = 0\n    for i in range(0, len(arr), 2):\n        if i == 0:\n            if arr[i] % 2 == 1:\n                odd_length += arr[i]\n                odd_length_sum += arr[i]\n            else:\n                continue\n        else:\n            if arr[i] % 2!= 0:\n                continue\n            if arr[i] % 2 == 1:\n                odd_length += arr[i]\n                odd_length_sum += arr[i]\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr = sorted(arr)\n    odd_sum = 0\n    for i in range(0,len(arr)):\n        if(i % 2!= 0):\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # find the length of the array\n    length = len(arr)\n    if length % 2 == 0:\n        # find the odd length subarrays\n        arr1 = arr[0:int(length/2)]\n        arr2 = arr[int(length/2):length]\n        \n        # return the sum of the odd length subarrays\n        return sum(arr1 + arr2)\n    else:\n        # check if there are two subarrays\n        return sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Your code here\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        sum = 0\n        for i in range(len(arr)):\n            sum += arr[i]\n            if i % 2!= 0:\n                sum += arr[i - 1]\n        return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]%2 == 0:\n                s = s+arr[i]+arr[j]\n    return s\n    \narr = [1,2,3,4,5,6,7,8,9,10]\nprint(odd_length_sum(arr)"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_lengths = 0\n    odd_lengths = 0\n    even_lengths += odd_lengths\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            even_lengths += arr[index]\n        else:\n            odd_lengths += arr[index]\n    return even_lengths + odd_lengths\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    i = 0\n    j = len(arr) - 1\n    sum = 0\n    while i < j:\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n        else:\n            i = i + 1\n        j = j - 1\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Your code here\n    # find sum of odd length subarrays\n    return sum([sub for sub in arr if len(sub)%2==1])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2!= 0:\n            total = total + arr[i]\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length = 0\n    for i in range(len(arr)):\n        #print(i)\n        if (i % 2) == 0:\n            #print(i, arr[i])\n            sum_of_odd_length += arr[i]\n            \n    return sum_of_odd_length\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = r\n    s = g\n    v = b\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # store the rgb value\n    r_b = (r, g, b)\n    # create a tuple\n    rgb_color = (r, g, b)\n    # convert the rgb to hsv\n    r_hsv = colorsys.rgb_to_hsv(*rgb_color)\n    # generate the hsv and write it to the file\n    h, s, v = r_hsv\n    # convert it to int\n    h = int(h)\n    # calculate the value of the saturation\n    s = int(s * 100)\n    # calculate the value of the value\n    v = int(v * 100)\n    # create a list of hsv values and write it to the file\n    hsv = [h, s, v]\n    # write it to the file\n    f.write(\" \".join([str(x) for x in hsv]))\n    f.write(\"\\n\")\n    \ndef main():\n    # set input and output files\n    rgb_file = sys.argv[1]\n    hsv_file = sys.argv[2]\n    # read the file\n    with open(rgb_file, \"r\") as f:\n        # read the first line\n        line = f.readline()\n        # convert each line to rgb and save it to a list\n        rgb = [int(i) for i in line.split()[:3]]\n        # remove the first two items\n        rgb.pop(0)\n        rgb.pop(0)\n        # write the new list to the file\n        with open(rgb_file, \"w\") as f:\n            # write the new list to the file\n            f.write(\" \".join([str(x) for x in rgb]))\n    # read the file\n    with open(hsv_file, \"r\") as f:\n        # read the first line\n        line = f.readline()\n        # convert each line to rgb and save it to a list\n        rgb = [int(i) for i in line.split()[:3]]\n        # remove the first two items\n        rgb.pop(0)\n        rgb.pop(0)\n        # write the new list to the file\n        with open(hsv_file, \"w\") as f:\n            # write the new list to the file\n            f.write(\" \".join([str(x) for x in rgb]))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    hue_diff = float(r) + float(g) + float(b)\n    hue_diff = hue_diff / 3.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Compute the hue, saturation and value\n    # H, S, V = cv2.split(img)\n    # hue = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = (r * 255.0)\n    g = (g * 255.0)\n    b = (b * 255.0)\n    max_value = max(r, g, b)\n    h, s, v = cv2.split(max_value)\n    h = h.astype('uint8')\n    s = s.astype('uint8')\n    v = v.astype('uint8')\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if(r==0 and g==0 and b==0):\n        return (255,255,255)\n    if(r==255 and g==255 and b==255):\n        return (0,255,255)\n    if(r==0 and g==255 and b<=127):\n        return (0,0,0)\n    if(r==255 and g==0 and b<=127):\n        return (0,0,255)\n    if(r==0 and g<=127 and b==255):\n        return (0,0,0)\n    if(r<255 and g==255 and b<=127):\n        return (0,0,255)\n    if(r<255 and g<=127 and b==255):\n        return (0,0,0)\n    if(r<255 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<0 and g==255 and b<=127):\n        return (0,0,255)\n    if(r<0 and g<=127 and b==255):\n        return (0,0,0)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<255 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<255 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g==255 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b==255):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<0 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,0)\n    if(r<127 and g<=127 and b<=127):\n        return (0,0,255)\n    if(r<127 an"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    if cmax < 0:\n        cmax = 0\n        cmin = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Your code here\n    # The RGB color is red, green and blue. The hue is given as 0.0 to 1.0, and 0.0 to 1.0.\n    # For example, [r, g, b] = [255, 0, 0]\n    # The Hue value is between 0.0 and 360.0 (180 is the maximum hue value).\n    # For example, hue = 25.0 (color saturation)\n    # hue = -45.0 (color hue)\n    # hue = 135.0 (color saturation)\n    # hue = 25.0 (color hue)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r < 0: r = 0; g = -g; b = -b\n    if r > 255: r = 255; g = -g; b = -b\n    if g < 0: g = 0; r = -r; b = -b\n    if g > 255: g = 255; r = -r; b = -b\n    if b < 0: b = 0; g = -g; r = -r; b = -b\n    h = 0.0\n    s = 0.0\n    v = 0.0\n    if r > 120:\n        h = r / 120.0\n        s = 255.0 - ((g * 50.0) / 100.0)\n        v = 255.0\n    else:\n        r = r / 60.0\n        g = g / 60.0\n        b = b / 60.0\n        h = r\n        s = g\n        v = b\n    h = float(h)\n    s = float(s)\n    v = float(v)\n    if r < 0:\n        r = 0\n    if g < 0:\n        g = 0\n    if b < 0:\n        b = 0\n    if r > 255:\n        r = 255\n    if g > 255:\n        g = 255\n    if b > 255:\n        b = 255\n    if h < 0:\n        h = 0\n    if h > 1:\n        h = 1\n    if s < 0:\n        s = 0\n    if s > 1:\n        s = 1\n    if v < 0:\n        v = 0\n    if v > 1:\n        v = 1\n    return [h,s,v]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd=1\n    for i in list1:\n        if i%2==0:\n            even_odd*=i\n        else:\n            even_odd*=i+1\n    return even_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #list1 = [2,4,6,8,10,12,14,16,18,20]\n    #return sum(list1[::2])\n    return sum(list1[::2])\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list_mul = []\n    for el in list1:\n        if el % 2 == 0:\n            list_mul.append(el)\n        else:\n            list_mul.append(el * 2)\n    return list_mul\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(len(list1) - 1):\n        product *= list1[i]\n    product /= (len(list1) - 1)\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    i=1\n    prod=1\n    while (i<len(list1)):\n        prod*=i\n        i+=1\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    def div_even_odd(num):\n        '''\n        Write a function to find the product of first even and odd number of a given list.\n        '''\n        return (num[0] * num[1] * num[2]) // 100\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return list1[0] * list1[1]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    product = 0\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    product = len(even) * len(odd)\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')\n    print('The product of first even and odd number is', list1[0] * list1[1])\n    print('The product of first odd number and even number is', list1[2] * list1[3])\n    print('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i%2 == 0:\n            result = result * i\n        else:\n            result = result * i\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    list_int = []\n    for item in str_list:\n        item = item.strip()\n        item = item.split(':')\n        list_int.append(int(item[0]))\n    return tuple(list_int)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(' ')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) == str:\n        if test_str[0] in '()':\n            test_int = int(test_str[1:])\n            return test_int\n        else:\n            test_int = eval(test_str)\n            return test_int\n    else:\n        raise TypeError('Invalid type of argument to tuple_str_int.')\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if isinstance(test_str, tuple):\n        if isinstance(test_str[0], int) or isinstance(test_str[1], int):\n            return tuple(test_str)\n        else:\n            raise TypeError(\"tuple input must be int\")\n    else:\n        raise TypeError(\"tuple input must be tuple\")\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_int = []\n    for i in test_str:\n        test_str_int.append(int(i))\n    return test_str_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.replace('(', '').replace(')', '').split(',')\n    return tuple(int(i) for i in tuple_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(map(int,test_str))\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str)\n    test_tuple_int = tuple(map(int, test_tuple))\n    return test_tuple_int\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return a.append(x)\n    else:\n        return a[i:] + [a[i]] + a[:i]\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return left_insertion(a[1:], x) + [a[0]] + left_insertion(a[:-1], x) + [a[-1]]\n    \ndef merge_sort(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if len(a) <= 1:\n        return a\n    \n    m = len(a) // 2\n    return merge_sort(a[:m]) + [a[m]] + merge_sort(a[m:])\n    \ndef compare_sort(a, b):\n    '''\n    Write a function to compare two sorted lists.\n    '''\n    if a == b:\n        return 'equal'\n    if len(a) < len(b):\n        return compare_sort(a, b[:len(a)])\n    if len(a) > len(b):\n        return compare_sort(a[:len(b)], b)\n    if a[0] < b[0]:\n        return compare_sort(a[1:], b[1:])\n    else:\n        return compare_sort(a[:-1], b[:-1])\n    \ndef heap_sort(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if len(a) <= 1:\n        return a\n    \n    m = len(a) // 2\n    return heap_sort(a[:m]) + [a[m]] + heap_sort(a[m:])\n    \ndef quick_sort(a):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if len(a) <= 1:\n        return a\n    \n    p = a[0]\n    \n    def swap(a, i, j):\n        a[i], a[j] = a[j], a[i]\n    \n    def partition(a, low, high):\n        pivot = a[high]\n        i = low - 1\n        for j in range(low, high):\n            if a[j] <= pivot:\n                swap(a, i, j)\n                i += 1\n        swap(a, i, high)\n        return i\n    \n    def sort(a, low, high):\n        if len(a) < low or low < high:\n            return\n        p = partition(a, low, high)\n        sort(a, low, p)\n        sort(a, p + 1, high)\n        \n    sort(a, 0, len(a) - 1)\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # return bisect.bisect_right(a, x)\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    # Check if the value is already present.\n    i = bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)-1, -1, -1):\n        if a[i] < x:\n            return i\n    return len(a)\ndef binary_search(a, x):\n    '''\n    Write a function to return the index of a value from a sorted list.\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    if a[i] < x:\n        return i\n    else:\n        return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x in a:\n        return a.index(x)\n    else:\n        j = bisect.bisect_left(a, x)\n        return j\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return -1\n    else:\n        return i\ndef remove_min(a):\n    '''\n    Given a sorted list a, remove the element with minimum value.\n    '''\n    i = bisect.bisect_left(a, a[0])\n    if i == 0:\n        return a\n    else:\n        return a[i:]\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    r = re.compile('(b\\w+)(\\w+)')\n    m = r.search(text)\n    return m\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pass\n    #pass\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pattern = re.compile(r\"(a)(b)\",flags=re.I)\n    \n    return pattern.search(text)\n    "
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # your code here\n    pattern = r'[a-b][2][.]'\n    match = re.findall(pattern,text)\n    if match:\n        for i in match:\n            if 'b' in i:\n                if '.' in i:\n                    i = i.replace('.','')\n                    i = i.replace('b','B')\n                    if len(i) == 3:\n                        text = text.replace(i,'B')\n                        return text\n    return text\ntext = 'Sometimes I have to divide a string by the number of times I want it to go. What's the number of times that a small frog, with 1 second long, will go to the other side of a lake. The small frog gets to eat the lake, so I can't eat it.'\ntext_three = text_match_three(text)\nprint(text_three)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_obj = re.match(r'a\\bb',text)\n    return match_obj.group()\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    text = re.sub(pattern, 'bbb', text)\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    match = re.match(\"([a-z]+)(b)?\",text)\n    if match:\n        return f\"{match.group(1)} {match.group(2)}\"\n    else:\n        return \"Can't parse string: \" + text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub(\"a\", \"b\", text)\n    text = re.sub(\"b\", \"b\", text)\n    text = re.sub(\"bb\", \"b\", text)\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('[a-b]?[b][a-z]', text)\n    if matches:\n        return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_string = r\"[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[ab]a[a"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_name = 'newtuple'\n    tuple_list = []\n    string_list = test_list.split(',')\n    for i in range(len(test_list.split(','))):\n        tuple_list.append(string_list[i].split(' '))\n    new_tuple = tuple(tuple_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        tuple = tuple(test_list)\n        tuple_str = str(tuple)\n        return tuple_str, tuple\n    except Exception as e:\n        #print(\"Exception occurred:\", e)\n        return \"\", tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list) < 2:\n        test_list = [test_list]\n    new_list = []\n    for index in range(0, len(test_list)):\n        new_list.append(tuple(test_list[index]))\n    return new_list\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = eval(test_list)\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(eval,test_list))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in test_str:\n        test_list.append(i)\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    for i in range(len(test_list)):\n        new_tuple = new_tuple + (test_list[i],)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_new_str = test_str.replace(test_list, '')\n    return tuple(map(int, test_new_str.split(',')))\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_pos = 0\n    \n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_pos += 1\n            \n    return even_pos > 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    even_list=[]\n    \n    for i in range(len(nums)):\n        if i%2==0:\n            even_list.append(nums[i])\n            \n    return even_list\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return [nums[i] for i in range(len(nums)) if i%2==0]\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_nums = []\n    for index, num in enumerate(nums):\n        if index % 2 == 0:\n            if num % 2 == 0:\n                even_nums.append(num)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and nums[i] % 3!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index=[]\n    for i in range(0,len(nums),2):\n        if nums[i]%2==0:\n            even_index.append(i)\n    if len(even_index)>0:\n        return even_index\n    else:\n        return \"not found\"\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == 0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is tuple:\n        test_tup = test_tup[0:1]\n    else:\n        print(\"Please insert a tuple for remove_nested()\")\n        return\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        print(\"{0:>3} = {1:>3}\".format(i, test_tup.index(i)))\n    print(\"\")\n    return 0\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    def flatten(tuple):\n        '''\n        Write a function that flattens the given tuple.\n        '''\n        \n        if tuple:\n            return tuple[0] + flatten(tuple[1:])\n        else:\n            return ()\n    \n    return tuple(map(flatten, test_tup))\n    \n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function that removes duplicate elements from the given\n    list.\n    '''\n    \n    def remove(item):\n        '''\n        Write a function that removes the first occurence of an item from a\n        list.\n        '''\n        \n        if item:\n            return item[1:]\n        else:\n            return ()\n        \n    return map(remove, test_list)\n    \n    \ndef string_from_list(test_list):\n    '''\n    Write a function that takes a list of strings and returns a list of the\n    smallest strings that appear in the list.\n    '''\n    \n    def append(test_str):\n        '''\n        Write a function that appends the given string to the end of the given\n        string.\n        '''\n        \n        if test_str:\n            return test_str +''\n        else:\n            return ''\n        \n    return list(map(append, test_list))\n    \n    \ndef string_from_list_with_newlines(test_list):\n    '''\n    Write a function that takes a list of strings and returns a list of the\n    smallest strings that appear in the list, with a newline character appended\n    after each string.\n    '''\n    \n    def append(test_str):\n        '''\n        Write a function that appends the given string to the end of the given\n        string.\n        '''\n        \n        if test_str:\n            return test_str + '\\n'\n        else:\n            return ''\n        \n    return list(map(append, test_list))\n    \n    \ndef string_from_list_with_spaces(test_list):\n    '''\n    Write a function that takes a list of strings and returns a list of the\n    smallest strings that appear in the list, with spaces replaced with\n    underscores.\n    '''\n    \n    def replace(test_str):\n        '''\n        Write a function that replaces the first two characters of each string\n        in a list with spaces.\n        '''\n        \n        if test_str:\n            return '_'.join(test_str.split())\n        else:\n            return ''\n        \n    return list(map(replace, test_list))\n    \n    \ndef string_from_list_with_spaces_with_newlines(test_list):\n    '''\n    Write a function that takes a list of strings and returns a list of the\n    smallest strings that appear in the list, with spaces replaced with\n    underscores, followed by a newline character.\n    '''\n    \n    def replace(test_str):\n        '''\n        Write a function that replaces the first two characters of each string\n        in a list with spaces, followed by a newline character.\n        '''\n        \n        if test_str:\n            return '_'.join(test_str.split()).replace(' ', '_').replace('\\n', '_')\n        else:\n            return ''\n        \n    return list(map(replace, test_list))\n    \n    \ndef string_from_list_with_spaces_with_newlines_with_and(test_list):\n    '''\n    Write a function that takes a list of strings and returns a list of the\n    smallest strings that appear in the list, with spaces replaced with\n    underscores, followed by a newline character, followed by and.\n    '''\n    \n    def replace(test_str):\n        '''\n        Write a function that replaces the first two characters of each string\n        in a list with spaces, followed by a newline character, followed by and.\n        '''\n        \n        if test_str:\n            return '_'.join(test_str.split()) + '_and_'\n        else:\n            return ''\n        \n    return list(map(replace, test_list))\n    \n    \ndef string_from_list_with_spaces_with_newlines_with_and_with_and(test_list):\n    '''\n    Write a function that takes a list of strings and returns a list of the\n    smallest strings that appear in the list, with spaces replaced with\n    underscores, followed by a newline character, followed by and, followed by\n    and.\n    '''\n    \n    def replace(test_str):\n        '''\n        Write a function that replaces the first two characters of each string\n        in a list with spaces, followed by a newline character, followed by and,\n        followed by and, followed by and.\n        '''\n        \n        if test_str:\n            return '_'.join(test_str.split()) + '_and_and_and_and_and_'\n        else:\n            return ''\n        \n    return list(map(replace, test_list))\n    \n    \ndef list_from_string(test_str):\n    '''\n    Write a function that takes a string and returns a list of the smallest strings\n    that appear in the list.\n    '''\n    \n    test_list = [item.strip() for item in test_str.split()]\n    \n    return sorted(set(test_list))\n    \n    \ndef list_from_string_with_newlines(test_str):\n    '''\n    Write a function that takes a string and returns a list of the smallest strings\n    that appear in the list, with newlines replaced by underscores.\n    '''\n    \n    test_list = [item.replace('\\n', '_') for item in test_str.split()]\n    \n    return sorted(set(test_list))\n    \n    \ndef list_from_string_with_spaces(test_str):\n    '''\n    Write a function that takes a string and returns a list of the smallest strings\n    that appear in the list, with spaces replaced by underscores.\n    '''\n    \n    test_list = [item.replace(' ', '_') for item in test_str.split()]\n    \n    return sorted(set(test_list))\n    \n    \ndef list_from_string_with_spaces_with_and(test_str):\n    '''\n    Write a function that takes a string and returns a list of the smallest strings\n    that appear in the list, with spaces replaced by underscores, followed by and.\n    '''\n    \n    test_list = [item.replace(' ', '_') for item in test_str.split()]\n    \n    return sorted(set(test_list))\n    \n    \ndef list_from_string_with_spaces_with_and_with_and(test_str):\n    '''\n    Write a function that takes a string and returns a list of the smallest strings\n    that appear in the list, with spaces replaced by underscores, followed by and,\n    followed by and, followed by and.\n    '''\n    \n    test_list = [item.replace(' ', '_') for item in test_str.split()]\n    \n    return sorted(set(test_list))\n    \n    \ndef list_from_string_with_spaces_with_and_with_and_with_and(test_str):\n    '''\n    Write a function that takes a string and returns a list of the smallest strings\n    that appear in the list, with spaces replaced by underscores, followed by and,\n    followed by and, followed by and, followed by and.\n    '''\n    \n    test_list = [item.replace(' ', '_') for item in test_str.split()]\n    \n    return sorted(set(test_list))\n    \n    \ndef list_from_string_with_spaces_with_and_with_and_with_and_with_and(test_str):\n    '''\n    Write a function that takes a string and returns a list of the smallest strings\n    that appear in the list, with spaces replaced by underscores, followed by and,\n    followed by and, followed by and, followed by and.\n    '''\n    \n    test_list = [item.replace(' ', '_') for item in test_str.split()]\n    \n    return sorted(set(test"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # your code goes here\n    return test_tup\n    \ndef main():\n    '''\n    Test the remove_nested function\n    '''\n    tup1 = (1, 2, 3, 4, 5, 6)\n    print(remove_nested(tup1))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    if len(test_tup) == 0:\n        return 0\n    \n    if type(test_tup)!= tuple:\n        return 0\n    \n    for i in test_tup:\n        if type(i)!= tuple:\n            return 0\n    \n    test_tup.pop(0)\n    \n    return 1\n    \n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) == list:\n            for j in i:\n                result.append(j)\n        else:\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    a = ()\n    for i in test_tup:\n        if isinstance(i, tuple) and len(i) > 0:\n            a += i\n    return a\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # TODO: YOUR CODE HERE\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #Initializing count variable \n    count = 0 \n    \n    #Initialize the list \n    lis = []\n    \n    # Iterate the input list \n    for i in input_list: \n        if i not in lis: \n            lis.append(i) \n        else: \n            pass\n            #count = count + 1\n    return(count) "
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # For Loop to iterate through the given number of lists.\n    count = 0\n    for i in input_list: \n        if type(i) == list:\n            count += len(i)\n        else:\n            count += 1\n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(input_list)):\n        new_list.append(input_list[i][0])\n    return len(new_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_lists = len(input_list)\n    return num_lists\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_length = len(input_list)\n    count = 1\n    for i in range(list_length):\n        count += input_list[i] * count\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_cnt = 0\n    list_2_cnt = 0\n    for x in input_list:\n        if type(x) == list:\n            list_cnt += 1\n        else:\n            list_2_cnt += 1\n    return list_cnt, list_2_cnt\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total_list = 0\n    for item in input_list:\n        total_list = total_list + 1\n    return total_list\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    # base case\n    if n == 0:\n        return -1\n    # return the last element of the array if it is greater than x\n    elif arr[n - 1] > x:\n        return n - 1\n    # return the last element of the array if it is smaller than x\n    elif arr[n - 1] < x:\n        return n - 1\n    # return the position of the element x\n    else:\n        return n - 1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==None or arr==[]:\n        return 0\n    if arr[0]==x:\n        return 0\n    l=0\n    r=len(arr)-1\n    while l<r:\n        mid=(l+r)//2\n        if arr[mid]<x:\n            l=mid+1\n        else:\n            r=mid\n    return l\n    \ndef quick(arr,x):\n    if arr==None or arr==[]:\n        return 0\n    if arr[0]==x:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    l=0\n    r=len(arr)-1\n    if arr[0]>x:\n        l=0\n        while l<r:\n            mid=(l+r)//2\n            if arr[mid]<x:\n                l=mid+1\n            else:\n                r=mid\n        return arr[l]\n    if arr[0]>x:\n        return quick(arr[0:l+1],x)\n    return quick(arr[l+1:r],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return -1 if x in arr else len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr) - 1\n    m = len(arr) - 1\n    while l < r:\n        if arr[r] > arr[m]:\n            r -= 1\n        elif arr[l] < arr[m]:\n            l += 1\n        else:\n            arr[l], arr[r] = arr[r], arr[l]\n            l += 1\n            r -= 1\n    return r\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    if not arr:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[x]==x:\n        return x\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # check if the array is empty\n    if len(arr) == 0:\n        return -1\n    # find the first element\n    if arr[0] < x:\n        return 0\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Write your code here\n    n = len(arr)\n    if n == 0:\n        return -1\n    left, right = 0, n - 1\n    while left + 1 < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid\n        else:\n            left = mid\n    if arr[left] == x:\n        return left\n    if arr[right] == x:\n        return right\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # match = re.search(r'(?<=a)b', text, re.MULTILINE)\n    match = re.search(r'(?<=a)b', text, flags=re.MULTILINE)\n    return match\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a,b = re.split(r'a+',text)\n    b = re.sub(r'b+',r'',b)\n    return ''.join([a,b])\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # regex for ending in b\n    end_b = 'end b'\n    \n    # regex for ending in a\n    end_a = 'end a'\n    \n    # find the start index of the ending in a and the end index of the ending in b\n    start_a = text.find(end_a)\n    end_b = text.find(end_b)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Hint: Use the DOTALL flag to match the entire string.\n    pattern = re.compile(r'(?:a{1,3})|(?:a{1,3}b)|(?:a{1,3}[^b])|(?:a{1,3}[^b])|(?:a{1,3}[^b])|(?:[^a]a){1,3}b', re.I)\n    return pattern.search(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = []\n    \n    text_elements = re.findall(r'a\\w*', text)\n    for element in text_elements:\n        result.append(element + 'b')\n    \n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    s = re.sub(r'^a', '', text, flags=re.MULTILINE)\n    s = re.sub(r'\\bb\\b', '', s, flags=re.MULTILINE)\n    \n    return s\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'a'):\n            return_text += 'b'\n        elif(text_string!= 'a'):\n            return_text += text_string\n    return return_text\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'b'):\n            return_text += 'a'\n        elif(text_string!= 'b'):\n            return_text += text_string\n    return return_text\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'c' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'c'):\n            return_text += 'a'\n        elif(text_string!= 'c'):\n            return_text += text_string\n    return return_text\ndef text_startc_enda(text):\n    '''\n    Write a function that matches a string that has a 'c' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'c'):\n            return_text += 'a'\n        elif(text_string!= 'c'):\n            return_text += text_string\n    return return_text\ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'd' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'd'):\n            return_text += 'a'\n        elif(text_string!= 'd'):\n            return_text += text_string\n    return return_text\ndef text_startd_enda(text):\n    '''\n    Write a function that matches a string that has a 'd' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'd'):\n            return_text += 'a'\n        elif(text_string!= 'd'):\n            return_text += text_string\n    return return_text\ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'a'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_enda(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'a'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_endb(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'b'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'b'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_endc(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'b'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'c'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_endd(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'b'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'd'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_ende(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'b'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'e'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_enda(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'a'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_endb(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'b'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_endc(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'c'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_endd(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'd'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_ende(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'e'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_enda(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'a'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'a'\n        elif(text_string!= 'e'):\n            return_text += text_string\n    return return_text\ndef text_starte_endb(text):\n    '''\n    Write a function that matches a string that has an 'e' followed by anything, ending in 'b'.\n    '''\n    return_text = ''\n    for text_string in text:\n        if(text_string == 'e'):\n            return_text += 'b'\n        e"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    # Set the string variable to whatever the text is.\n    # Replace the string that has a 'a' with anything.\n    # Replace the string that has a 'b' with anything.\n    # Return the string that has a 'a' followed by anything.\n    \n    # Write your code here.\n    pattern = r'[aA]\\s*[bB]'\n    \n    #Convert the pattern to a list, which will be used later.\n    pattern_list = re.findall(pattern, text)\n    \n    # We're looking for the first 'a' which doesn't occur anywhere.\n    pattern_list.remove('a')\n    \n    # If there's any 'a' in the pattern_list, then we want to replace the 'b' with anything.\n    # If there's nothing, then we want to return None.\n    # If there is more than one a, then we want to return the list of a's.\n    \n    for i in range(len(pattern_list)):\n        if pattern_list[i]!= 'a':\n            return pattern_list[i] + 'a'\n        else:\n            return pattern_list[i]\n    \n    return None\n    \ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    \n    # Set the string variable to whatever the text is.\n    # Replace the string that has a 'a' with anything.\n    # Replace the string that has a 'b' with anything.\n    # Return the string that has a 'a' followed by anything.\n    \n    # Write your code here.\n    pattern = r'[aA]\\s*[cC]'\n    \n    #Convert the pattern to a list, which will be used later.\n    pattern_list = re.findall(pattern, text)\n    \n    # We're looking for the first 'a' which doesn't occur anywhere.\n    pattern_list.remove('a')\n    \n    # If there's any 'a' in the pattern_list, then we want to replace the 'c' with anything.\n    # If there's nothing, then we want to return None.\n    # If there is more than one a, then we want to return the list of a's.\n    \n    for i in range(len(pattern_list)):\n        if pattern_list[i]!= 'a':\n            return pattern_list[i] + 'a'\n        else:\n            return pattern_list[i]\n    \n    return None\n    \ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    \n    # Set the string variable to whatever the text is.\n    # Replace the string that has a 'a' with anything.\n    # Replace the string that has a 'b' with anything.\n    # Return the string that has a 'a' followed by anything.\n    \n    # Write your code here.\n    pattern = r'[aA]\\s*[dD]'\n    \n    #Convert the pattern to a list, which will be used later.\n    pattern_list = re.findall(pattern, text)\n    \n    # We're looking for the first 'a' which doesn't occur anywhere.\n    pattern_list.remove('a')\n    \n    # If there's any 'a' in the pattern_list, then we want to replace the 'd' with anything.\n    # If there's nothing, then we want to return None.\n    # If there is more than one a, then we want to return the list of a's.\n    \n    for i in range(len(pattern_list)):\n        if pattern_list[i]!= 'a':\n            return pattern_list[i] + 'a'\n        else:\n            return pattern_list[i]\n    \n    return None\n    \ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'e'.\n    '''\n    \n    # Set the string variable to whatever the text is.\n    # Replace the string that has a 'a' with anything.\n    # Replace the string that has a 'b' with anything.\n    # Return the string that has a 'a' followed by anything.\n    \n    # Write your code here.\n    pattern = r'[aA]\\s*[eE]'\n    \n    #Convert the pattern to a list, which will be used later.\n    pattern_list = re.findall(pattern, text)\n    \n    # We're looking for the first 'a' which doesn't occur anywhere.\n    pattern_list.remove('a')\n    \n    # If there's any 'a' in the pattern_list, then we want to replace the 'e' with anything.\n    # If there's nothing, then we want to return None.\n    # If there is more than one a, then we want to return the list of a's.\n    \n    for i in range(len(pattern_list)):\n        if pattern_list[i]!= 'a':\n            return pattern_list[i] + 'a'\n        else:\n            return pattern_list[i]\n    \n    return None\n    \ndef text_starta_endf(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'f'.\n    '''\n    \n    # Set the string variable to whatever the text is.\n    # Replace the string that has a 'a' with anything.\n    # Replace the string that has a 'b' with anything.\n    # Return the string that has a 'a' followed by anything.\n    \n    # Write your code here.\n    pattern = r'[aA]\\s*[fF]'\n    \n    #Convert the pattern to a list, which will be used later.\n    pattern_list = re.findall(pattern, text)\n    \n    # We're looking for the first 'a' which doesn't occur anywhere.\n    pattern_list.remove('a')\n    \n    # If there's any 'a' in the pattern_list, then we want to replace the 'f' with anything.\n    # If there's nothing, then we want to return None.\n    # If there is more than one a, then we want to return the list of a's.\n    \n    for i in range(len(pattern_list)):\n        if pattern_list[i]!= 'a':\n            return pattern_list[i] + 'a'\n        else:\n            return pattern_list[i]\n    \n    return None\n    \ndef text_starta_endg(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'g'.\n    '''\n    \n    # Set the string variable to whatever the text is.\n    # Replace the string that has a 'a' with anything.\n    # Replace the string that has a 'b' with anything.\n    # Return the string that has a 'a' followed by anything.\n    \n    # Write your code here.\n    pattern = r'[aA]\\s*[gG]'\n    \n    #Convert the pattern to a list, which will be used later.\n    pattern_list = re.findall(pattern, text)\n    \n    # We're looking for the first 'a' which doesn't occur anywhere.\n    pattern_list.remove('a')\n    \n    # If there's any 'a' in the pattern_list, then we want to replace the 'g' with anything.\n    # If there's nothing, then we want to return None.\n    # If there is more than one a, then we want to return the list of a's.\n    \n    for i in range(len(pattern_list)):\n        if pattern_list[i]!= 'a':\n            return pattern_list[i] + 'a'\n        else:\n            return pattern_list[i]\n    \n    return None\n    \ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'h'.\n    '''\n    \n    # Set the string variable to whatever the text is.\n    # Replace the string that has a 'a' with anything.\n    # Replace the string that has a 'b' with anything."
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('[a-zA-Z]*b\\b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex_start = re.compile('(^\\s*\\w+\\w+\\s*a\\s*\\w+)')\n    regex_end = re.compile('\\s*\\w+\\s*b\\s*\\w+')\n    regex_result = regex_start.search(text)\n    if regex_result:\n        return regex_result.group(0)\n    return ''\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k in dict:\n        sum += dict[k]\n    return sum\n    \n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for i in dict:\n        sum=sum+dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    list = []\n    for k in dict.keys():\n        list.append(dict[k])\n    return sum(list)\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total = total + value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for key, value in dict.items():\n        sum = 0\n        for item in value:\n            sum += item\n        print(f'{key}: {sum}')\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.keys():\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<0:\n        return \"Invalid Input\"\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 6\n    elif n>=4:\n        return n*sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return sum_odd(n-1)+sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n >= 0:\n        for i in range(n,0,-1):\n            if i % 2!= 0:\n                sum += i\n    else:\n        print(\"invalid input\")\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return n + sum_odd(n - 1)\nprint(sum_odd(5))\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # your code here\n    sum=0\n    for i in range(l,r+1):\n        if i%2==0:\n            sum+=i\n    print(sum)\n        \n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    # your code here\n    sum=0\n    for i in range(l,r+1):\n        if i%2==0:\n            sum+=i\n    print(sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd = 0\n    for i in range(1, n): \n        if i % 2 == 0: \n            odd += i \n    return odd \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0:\n        return 0\n    s = 0\n    for x in range(1,n):\n        if (x % 2 == 1):\n            s += x\n    return s\ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    if n <= 0:\n        return 0\n    s = 0\n    for x in range(1,n):\n        if (x % 2 == 0):\n            s += x\n    return s\ndef sum_numbers(n): \n    '''\n    Write a python function to find the sum of all the numbers in the range l and r.\n    '''\n    if n <= 0:\n        return 0\n    s = 0\n    for x in range(1,n):\n        s += x\n    return s\ndef main():\n    print(sum_odd(100))\n    print(sum_even(100))\n    print(sum_numbers(100))\n    print(sum_odd(1000))\n    print(sum_even(1000))\n    print(sum_numbers(1000))\nmain()"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s=0\n    for i in range(n):\n        if i%2==0:\n            s+=i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2!= 0:\n            sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for el in arr:\n        total += el\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for num in arr:\n        sum_ += num\n    return sum_\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr == None:\n        raise Exception(\"Empty Array\")\n    if len(arr) == 0:\n        return 0\n    sum = 0\n    for el in arr:\n        sum += el\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n    "
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr.sort()\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = n & ((1<<d)-1)\n    n = l | (n>>d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n==0:\n        return 0\n    return n & (1 << d)\n    # return n << d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n>>d>>8\n    return (n << d) | (n << (d + 7))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # we start with 0, as we know the sign is flipped, there are 4 possible values\n    # 0 = 0, 1 = 1, 2 = 2, 3 = 3, 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9\n    # we start from 0, and go backwards if we encounter d bits, it will move to the end of the first 10 bits\n    # if it's at the end, we end up with 0, which means that we got to the end of the array\n    # and therefore the size is now one more bit\n    # for example, if d is set to 4, the function will change it to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # so when we get the last two bits, we move the leftmost 1s to the end of the array, so we don't get a 31 in the end of the\n    # array\n    # we can do the same for the first d bits, which will be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # and so on, we can do the same for the last 2 bits, which will be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # and so on, we can do the same for the last 3 bits, which will be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # and so on, we can do the same for the last 4 bits, which will be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # and so on, we can do the same for the last 5 bits, which will be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # and so on, we can do the same for the last 6 bits, which will be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # we can do the same for the last 7 bits, which will be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # and so on, we can do the same for the last 8 bits, which will be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # this is because we've found the last 4 bits, so we can just move them to the end, which is done for us\n    # the function will not move anything to the end, if the number is actually 4 bits, the function will move them to the end\n    # and this will be the end of the array\n    # we do it by the array size, so we need to do the size of the array plus 2, because we need to be careful of the order of\n    # bits, and we'll end up with a 32 bit number\n    # so we can just reverse it (we'll then add 1 to get the last 2 bits) and move to the end\n    # we will always have the array as the last two bits\n    # so we'll only move to the end of the array if the number is 4 bits, since that means we just move the bit to the end\n    # and we'll move it to the end.\n    # if the number is 8 bits, we have to move the last 2 bits to the end (as we can't move to the end of the array), so we'll\n    # move them to the end of the array\n    # we'll also have to reverse it because we just performed a shift\n    # we'll do the same for the last 2 bits, as we will now move the bit to the end to the end\n    # and so on\n    # we'll move the last 2 bits to the end, so we'll move it to the end\n    # and so on\n    # so we'll end up with 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll move the last 2 bits to the end, so we'll move it to the end\n    # we'll end up with 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll move the last 2 bits to the end, so we'll move it to the end\n    # so we'll move it to the end\n    # we'll move the last 2 bits to the end, so we'll move it to the end\n    # so we'll move it to the end\n    # so we'll move it to the end\n    # so we'll move it to the end\n    # so we'll end up with 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll move the last 2 bits to the end, so we'll move it to the end\n    # so we'll move it to the end\n    # so we'll end up with 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll move the last 2 bits to the end, so we'll move it to the end\n    # so we'll move it to the end\n    # so we'll end up with 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll move the last 2 bits to the end, so we'll move it to the end\n    # so we'll end up with 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll move the last 2 bits to the end, so we'll end up with 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    # so we'll end up with 2, 4, 8"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n>>d)*(n<<d)-(n<<d)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    left = n >> d & (n - 1)\n    return left | (n & (left ^ 0xffffffff))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #convert number into bits\n    n = bin(n).replace('0b','')\n    #create a list to store the bits\n    bits = [int(i) for i in n]\n    #find the number of bits in the list\n    l = len(bits)\n    #create a bit mask to store the bits\n    mask = 2**l\n    #reverse the list so its in reverse order\n    bits = bits[::-1]\n    #create a new bit mask\n    masked_bits = [0] * l\n    #put the bits into the new bit mask\n    for i in range(l):\n        masked_bits[i] = bits[i] & mask\n    #convert bit mask to a string\n    s = ''\n    #loop through the bits\n    for i in range(l):\n        #add bits to the string\n        s += str(masked_bits[i])\n    #return the string\n    return int(s,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    num = 0\n    if n == 0:\n        return 1\n    else:\n        while n:\n            n,r = divmod(n,2)\n            num = num ^ (1 << r)\n        return num\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    num = 0\n    if n == 0:\n        return 1\n    else:\n        while n:\n            n,r = divmod(n,2)\n            num = num ^ (1 << r)\n        return num\n    \ndef get_rotation_count(n):\n    '''\n    Get the number of rotation using the bitwise OR of two bitwise ornations. The bitwise OR of two bits for an integer is represented by two 0 bits.\n    '''\n    result = 0\n    while n:\n        n,r = divmod(n,2)\n        result = result ^ (1 << r)\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    carry = 0\n    temp = n\n    n = (n>>d) & 0xffffffff\n    n = (n<<d) | (n>>32)\n    return n,carry\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(\"Please enter the number to be rotated: \")\n    n = int(input())\n    print(\"Please enter the number of bits to be rotated by: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to be rotated: \")\n    d = int(input())\n    print(\"Please enter the number of bits to b"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    def remove_spaces(text):\n        '''\n        Remove all whitespaces from a string.\n        '''\n        # TODO\n        # Use regular expressions\n        text = re.sub(r'[^\\w]', '', text)\n        return text\n    return remove_spaces(text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # your code goes here\n    res=''\n    for char in text:\n        if(char!='' and char!= '\\t' and char!= '\\n'):\n            res+=char\n        else:\n            continue\n    return res\n    \ndef get_valid_email(text):\n    '''\n    Verifies if the email is valid (using regex)\n    '''\n    # your code goes here\n    regex=re.compile(r'^[a-zA-Z0-9_.-]+\\.[a-zA-Z0-9_.-]+\\.[a-zA-Z0-9_.-]$')\n    \n    return regex.match(text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\ndef get_date_from_string(date):\n    '''\n    a function to return the date in the format MM-DD-YYYY\n    '''\n    # import re\n    # date = input(\"Enter a date in the format MM-DD-YYYY: \")\n    date = date.split('-')\n    # date = re.sub(' +','', date)\n    # date = date.split('-')\n    return date\ndef get_time_from_string(time):\n    '''\n    a function to return the time in the format HH:MM:SS\n    '''\n    # import re\n    # time = input(\"Enter a time in the format HH:MM:SS: \")\n    time = time.split(':')\n    # time = re.sub(' +','', time)\n    # time = time.split(':')\n    return time\ndef get_cord_from_string(coord):\n    '''\n    a function to return the coordinate in the format (x,y)\n    '''\n    # import re\n    # coord = input(\"Enter a coordinate in the format (x,y): \")\n    # coord = coord.split(' ')\n    # coord = re.sub(' +','', coord)\n    # coord = coord.split(',')\n    return coord\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace('\\n','').replace('\\r','').replace('\\t','').replace(' ','')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+',' ',text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(\"[ \\t]+\", \" \", text)\n    text = re.sub(\" +\", \" \", text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace('\\n', '')\n    text = text.replace('  ','')\n    text = text.replace('   ','')\n    text = text.replace('   ','')\n    text = text.replace('    ','')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text).strip().lower()\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    x2 = int(x * 2)\n    y2 = int(y * 2)\n    z2 = int(z * 2)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y == z:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x,y,z)\n    print(\"Number of equal numbers from input \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from output \",x==y==z)\n    print(\"Number of equal numbers from outpu"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    c=0\n    for i in range(x,z+1):\n        if(i==y):\n            c=c+1\n    print(c)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c=0\n    if type(x)!= int:\n        raise TypeError('x must be an integer')\n    if type(y)!= int:\n        raise TypeError('y must be an integer')\n    if type(z)!= int:\n        raise TypeError('z must be an integer')\n    for i in range(x,y):\n        for j in range(x,y):\n            if i==j:\n                c+=1\n    return c\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert type(x)==int\n    assert type(y)==int\n    assert type(z)==int\n    assert x!=y!=z\n    assert x==y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if x==y==z:\n        count=1\n    elif x==y or x==z or y==z:\n        count=0\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #pass\n    try:\n        a=int(x)\n        b=int(y)\n        c=int(z)\n        d=int(x+y+z)\n        e=int(x*y*z)\n        f=int(x/y/z)\n        g=int(x//y//z)\n        \n        print(a,b,c,d,e,f,g)\n        print(a+b+c+d+e+f+g)\n        \n        #a=a-b\n        #b=b-a\n        #c=c-b\n        #d=d-c\n        #e=e-d\n        #f=f-e\n        #g=g-f\n        \n        #pass\n    except:\n        print(\"Error: Invalid Input!\")\n        pass\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                if (x[i] == y[j] and y[j] == z[k]):\n                    count = count + 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 1\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    temp = 0\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    result = 0\n    for i in range(length):\n        result += count_sub_array(arr[:i] + arr[i+1:], i, length - i)\n    return result\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    '''\n    Parameters:\n        - arr: an array of ints\n    Returns:\n        - the number of rotations required to generate the array\n    '''\n    rotation_count = 0\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1):\n            if arr[i] > arr[j]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n                rotation_count += 1\n    return rotation_count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotation_count = 0\n    last_element = arr[-1]\n    for i in arr:\n        if i == last_element:\n            rotation_count += 1\n        else:\n            last_element = i\n            rotation_count += 1\n    return rotation_count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def count_rotation_comp(arr):\n        cnt = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] > arr[j]:\n                    cnt += 1\n        return cnt\n    \n    arr = sorted(arr)\n    return count_rotation_comp(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr.reverse()\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    \n    # Insert an edge case, starting from first value\n    if arr[0]!= 0:\n        arr[0] = 0\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n==2) or (n==3):\n        return True\n    elif n%2==0:\n        return False\n    elif (n-1)%3==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<=0 : return False\n    if n%2 == 0 :\n        return False\n    sqrt = int(n**0.5)\n    for i in range(sqrt, -1, -1) :\n        if n%i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0):\n        return True\n    if (n < 0):\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while (i * i < n):\n            if (n % i == 0):\n                return False\n            i += 1\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n < 2 or n%2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)+1)):\n            if n%i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(math.sqrt(n))\n    if n == int(math.sqrt(n)):\n        return True\n    else:\n        return False\n    \ndef find_primes(n):\n    '''\n    Write a function to find all primes below the given number\n    '''\n    primes = []\n    for x in range(2, n+1):\n        if is_prime(x):\n            primes.append(x)\n    return primes\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = str(n)\n    if s[0] == '-':\n        s = s[1:]\n    #print(s)\n    if (s[0] == '-') or (s[0] == '0'):\n        return False\n    if len(s) % 2 == 0:\n        return False\n    if s[0] == s[-1]:\n        return False\n    for i in range(int(len(s)/2)):\n        if s[i]!= s[len(s)-i-1]:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #raise NotImplementedError\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(n ** 0.5)\n    return n == sqrt * sqrt\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Your code here\n    if n == 0 :\n        return True\n    if n == 1 :\n        return False\n    if n == 2 :\n        return True\n    for i in range(2,int(math.sqrt(n))) :\n        if n % i == 0:\n            return False\n    return True\n    \nprint(is_perfect_square(15))\nprint(is_perfect_square(6))\nprint(is_perfect_square(6.5))\nprint(is_perfect_square(7))\nprint(is_perfect_square(89))\nprint(is_perfect_square(2.0))\nprint(is_perfect_square(4.5))"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return False\n    elif n == 1 :\n        return True\n    else :\n        i = 2\n        while i * i <= n :\n            if n % i == 0 :\n                return False\n            i += 1\n        return True\n    \n    \ndef is_prime(n) :\n    '''\n    Write a function to check whether a given number is prime or not.\n    https://www.geeksforgeeks.org/prime-number-in-python/\n    '''\n    if n == 0 :\n        return False\n    elif n == 1 :\n        return True\n    elif n == 2 :\n        return False\n    \n    \n    i = 3\n    while i * i <= n :\n        if n % i == 0 :\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    temp = 1\n    for i in arr: \n        temp *= i\n    if(temp % 2 == 0): \n        return True\n    else: \n        return False\n    \n    \nprint(is_product_even([1,3,5,7,9]))\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product=1\n    for n in arr:\n        product *= n\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef is_product_odd(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    product=1\n    for n in arr:\n        product *= n\n    if product % 2 == 1:\n        return True\n    else:\n        return False\n        \ndef is_prime(n):\n    '''\n    Return True if n is prime.\n    '''\n    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n        \ndef prime_factors(n):\n    '''\n    Return a list of prime factors of n.\n    '''\n    if n == 1:\n        return [1]\n    else:\n        d = []\n        for i in range(2, n):\n            if is_prime(i):\n                d.append(i)\n        return d\n        \ndef is_leap(n):\n    '''\n    Return True if n is a leap year or not.\n    '''\n    if n % 4 == 0 and (n % 100!= 0 or n % 400 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return len(arr)==len(set(arr)) and not any(arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Write your code here\n    if arr[0] % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)): \n        if arr[i]%2==0: \n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(i%2==0 for i in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = max(lists)\n    return [list(x) for x in zip(*(lists,))]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    for x in lists:\n        result.append(sum(x))\n    return result\n    \n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    # loop through each element in the list\n    for i in range(len(lists)):\n        # get the sum of elements in the list\n        sum_of_elements = 0\n        for j in lists[i]:\n            sum_of_elements += j\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    temp_list=[]\n    sum_list=[]\n    for i in lists:\n        if len(i)==0:\n            pass\n        else:\n            for j in i:\n                if j not in temp_list:\n                    temp_list.append(j)\n    for i in range(len(temp_list)):\n        for j in range(i+1,len(temp_list)):\n            if temp_list[i]+temp_list[j]==max(temp_list):\n                sum_list.append(temp_list[i])\n                sum_list.append(temp_list[j])\n    return sum_list"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    if len(lists) == 1:\n        return lists\n    if len(lists) == 2:\n        return max(lists, key=lambda x:x[1])\n    if len(lists) == 3:\n        if lists[1] < lists[2]:\n            return max(lists[1:3], key=lambda x:x[1])\n        else:\n            return max(lists[2:], key=lambda x:x[1])\n    if len(lists) == 4:\n        if lists[1] < lists[2] and lists[1] < lists[3]:\n            return max(lists[1:4], key=lambda x:x[1])\n        if lists[2] < lists[1] and lists[2] < lists[3]:\n            return max(lists[2:4], key=lambda x:x[1])\n        if lists[3] < lists[1] and lists[3] < lists[2]:\n            return max(lists[3:], key=lambda x:x[1])\n        return lists[1:4]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # note that the function does not take any arguments, and a list of lists in the list must be passed\n    # to the function. The function should return a list.\n    \n    # the idea is that you'll use a pointer on the list to skip the item you're looking for\n    # the pointer is a counter that keeps track of the number of items that were skipped\n    # the counter is initialised with -1\n    # the loop is where the item you're looking for is on the list, and the remaining items are skipped\n    # the function returns the max of the remaining items, and that max is the result.\n    \n    # this function does not take any arguments, and a list of lists in the list must be passed\n    # to the function. The function should return a list.\n    \n    # the idea is that you'll use a dictionary to store the number of times the item you're looking\n    # for was found in the original list\n    # the dictionary is initialised with a counter of -1\n    # the loop is where the item you're looking for is on the list, and the remaining items are skipped\n    # the function returns the max of the remaining items, and that max is the result.\n    \n    # the idea is that you'll use a for loop to iterate over the original list\n    # the function should return a list of lists, where each list contains the max of the remaining items\n    # if the function returns the max of the remaining items, the function should return the result\n    \n    # the idea is that you'll use a dictionary to store the number of times the item you're looking\n    # for was found in the original list\n    # the dictionary is initialised with a counter of -1\n    # the loop is where the item you're looking for is on the list, and the remaining items are skipped\n    # the function returns the max of the remaining items, and that max is the result\n    \n    # the idea is that you'll use a dictionary to store the number of times the item you're looking\n    # for was found in the original list\n    # the function should return a list of lists, where each list contains the max of the remaining items\n    \n    # the idea is that you'll use a for loop to iterate over the original list\n    # the function should return a list of lists, where each list contains the max of the remaining items\n    # if the function returns the max of the remaining items, the function should return the result\n    \n    \n    # the idea is that you'll use a dictionary to store the number of times the item you're looking\n    # for was found in the original list\n    # the function should return a list of lists, where each list contains the max of the remaining items\n    # if the function returns the max of the remaining items, the function should return the result\n    \n    \n    \n    result = []\n    count = -1\n    max = -1\n    \n    for item in lists:\n        count = count + 1\n        if item[0] > max:\n            max = item[0]\n        else:\n            max = max + item[0]\n    \n    for item in lists:\n        if item[0] == max:\n            result.append(item)\n    \n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = 0\n    for list in lists:\n        for num in list:\n            if num > highest_sum:\n                highest_sum = num\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for element in lists:\n        max_list.append(max(element))\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    highest_sum = 0\n    highest_elem = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if highest_sum < lists[i][j]:\n                highest_sum = lists[i][j]\n                highest_elem = lists[i]\n    return highest_elem\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def highest(nums):\n        high_sum = 0\n        for num in nums:\n            high_sum += num\n        return high_sum\n    def second_highest(nums):\n        second_high = 0\n        for num in nums:\n            second_high += num\n        return second_high\n    nums_max_sum = highest(lists)\n    for num in lists:\n        if num[1] > num_max_sum:\n            num_max_sum = num[1]\n            num = num[0]\n    nums_max_sum = second_highest(nums_max_sum)\n    for num in lists:\n        if num[1] > num_max_sum:\n            num_max_sum = num[1]\n            num = num[0]\n    return nums_max_sum\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    num = 0\n    for i in range(0,len(test_str)):\n        if test_str[i].isupper():\n            num += 1\n    return num\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l = list(test_str)\n    l_len = len(l)\n    max_run_uppercase = 1\n    max_run_uppercase_count = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    max_run_uppercase = ''\n    for char in test_str:\n        if char.isupper():\n            result += 1\n            if result > result_max:\n                max_run_uppercase = char\n        else:\n            result = 0\n    return max_run_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        run = test_str[i].isupper()\n        \n        if run:\n            max_run = max(max_run, len(test_str) - i)\n    \n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max = 0\n    index_max = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Base case, if the input string is empty\n    if test_str == \"\":\n        return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = ''\n    index = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run += test_str[i].upper()\n            index += 1\n        elif test_str[i].islower():\n            if index == 0:\n                index += 1\n                max_run += test_str[i].lower()\n            elif index == 1:\n                index += 1\n                max_run += test_str[i].lower()\n            elif index == 2:\n                max_run += test_str[i].lower()\n            elif index == 3:\n                max_run += test_str[i].lower()\n            elif index == 4:\n                max_run += test_str[i].lower()\n            elif index == 5:\n                max_run += test_str[i].lower()\n            else:\n                max_run += test_str[i].lower()\n        else:\n            max_run += test_str[i]\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize the max_run with the longest_run to zero.\n    max_run = 0\n    \n    # Check every character in the string.\n    for i in range(0, len(test_str)):\n        if test_str[i].isupper():\n            # Check if the current character has not been processed yet.\n            if not max_run or i < max_run:\n                # If the current character is already processed, then check if its\n                # the uppercase character.\n                if test_str[i].isupper():\n                    max_run += 1\n            else:\n                return False\n        else:\n            # If the current character is not a uppercase character, then check if it\n            # has been processed.\n            if test_str[i].isupper():\n                return False\n    # Return the max run.\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    lower_str = test_str.lower()\n    max_run = 0\n    for i in range(0, len(lower_str) - 1):\n        # print(lower_str[i])\n        if lower_str[i].isupper() == True and lower_str[i] not in lower_str[i + 1:].lower():\n            max_run = max(max_run, len(lower_str[i + 1:].lower()))\n    return max_run\n    \ndef main():\n    '''\n    Tests all functions in this module\n    '''\n    print('{:=^40}'.format(' Test results'))\n    print('{:<25}'.format('Max run: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print('{:<25}'.format('Max run uppercase: '))\n    print('{:<25}'.format('Max run lowercase: '))\n    print("
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def run_uppercase(test_str):\n        res = 0\n        for i in range(0, len(test_str)):\n            if test_str[i].isupper():\n                res += 1\n        return res\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    # FIND FIRST ODD\n    start = 0\n    end = len(nums)-1\n    while start <= end:\n        mid = (start + end)//2\n        if nums[mid] % 2!= 0:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return nums[start]\n        \n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    l = []\n    #initialize the l variable to an empty list\n    for i in range(n):\n        if (i%2==1):\n            l.append(nums[i])\n    #print the new list\n    print(l)\n    #find the index of the first index that is not the first odd\n    for i in range(len(l)-1):\n        if l[i]%2!=1 and l[i]!=l[i+1]:\n            return l[i]\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # write your code here\n    # if len(nums) < 2:\n    #     return False\n    # return (nums[1]%2==1) and (nums[0]%2==1)\n    return nums[0] and nums[1] and nums[0]%2==1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) <= 0:\n        return 0\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x % 2 == 1:\n            return x\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    i = 0\n    j = len(nums) - 1\n    while i < j:\n        if nums[i] % 2 == 1:\n            i += 1\n        else:\n            nums[i], nums[j] = nums[j], nums[i]\n            j -= 1\n    return nums[0]\n    \n    \n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            odd_nums.append(nums[i])\n    \n    return odd_nums[0]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_num = 0\n    #print(test_tup)\n    #print(test_tup)\n    for i in test_tup:\n        #print(i)\n        if test_tup.count(i)!= K:\n            check_num += 1\n            #print('Check')\n            #print(i, test_tup.count(i))\n            if test_tup.count(i)!= K:\n                return check_num\n    return check_num\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return False\n    for i in range(K):\n        if test_tup[i] < test_tup[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    \n    if sorted(test_tup)!= sorted(range(K)):\n        return False\n    \n    if test_tup[0] - test_tup[1] >= 1:\n        return False\n    \n    for i in range(len(test_tup)):\n        if test_tup[i] - test_tup[i + 1] >= 1:\n            return False\n    \n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        print('test_tup: ', test_tup)\n        print('K: ', K)\n        return True\n    elif len(test_tup) == K:\n        return False\n    elif test_tup[0] >= test_tup[-1]:\n        print('test_tup: ', test_tup)\n        print('K: ', K)\n        return check_K(test_tup[1:-1], K-1)\n    else:\n        print('test_tup: ', test_tup)\n        print('K: ', K)\n        return check_K(test_tup[1:], K-1)\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in [x for x in test_tup]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(tup[0] == K for tup in test_tup)\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][K] == test_tup[i+1][K]:\n            return False\n    return True\n    \ndef check_P(test_tup, P):\n    '''\n    Write a function to check if the given tuples contain the p or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][P] == test_tup[i+1][P]:\n            return False\n    return True\n    \ndef check_Q(test_tup, Q):\n    '''\n    Write a function to check if the given tuples contain the q or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Q] == test_tup[i+1][Q]:\n            return False\n    return True\n    \ndef check_R(test_tup, R):\n    '''\n    Write a function to check if the given tuples contain the r or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][R] == test_tup[i+1][R]:\n            return False\n    return True\n    \ndef check_S(test_tup, S):\n    '''\n    Write a function to check if the given tuples contain the s or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][S] == test_tup[i+1][S]:\n            return False\n    return True\n    \ndef check_T(test_tup, T):\n    '''\n    Write a function to check if the given tuples contain the t or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][T] == test_tup[i+1][T]:\n            return False\n    return True\n    \ndef check_U(test_tup, U):\n    '''\n    Write a function to check if the given tuples contain the u or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][U] == test_tup[i+1][U]:\n            return False\n    return True\n    \ndef check_V(test_tup, V):\n    '''\n    Write a function to check if the given tuples contain the v or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][V] == test_tup[i+1][V]:\n            return False\n    return True\n    \ndef check_W(test_tup, W):\n    '''\n    Write a function to check if the given tuples contain the w or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][W] == test_tup[i+1][W]:\n            return False\n    return True\n    \ndef check_X(test_tup, X):\n    '''\n    Write a function to check if the given tuples contain the x or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][X] == test_tup[i+1][X]:\n            return False\n    return True\n    \ndef check_Y(test_tup, Y):\n    '''\n    Write a function to check if the given tuples contain the y or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Y] == test_tup[i+1][Y]:\n            return False\n    return True\n    \ndef check_Z(test_tup, Z):\n    '''\n    Write a function to check if the given tuples contain the z or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z] == test_tup[i+1][Z]:\n            return False\n    return True\n    \ndef check_Z0(test_tup, Z0):\n    '''\n    Write a function to check if the given tuples contain the z0 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z0] == test_tup[i+1][Z0]:\n            return False\n    return True\n    \ndef check_Z1(test_tup, Z1):\n    '''\n    Write a function to check if the given tuples contain the z1 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z1] == test_tup[i+1][Z1]:\n            return False\n    return True\n    \ndef check_Z2(test_tup, Z2):\n    '''\n    Write a function to check if the given tuples contain the z2 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z2] == test_tup[i+1][Z2]:\n            return False\n    return True\n    \ndef check_Z3(test_tup, Z3):\n    '''\n    Write a function to check if the given tuples contain the z3 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z3] == test_tup[i+1][Z3]:\n            return False\n    return True\n    \ndef check_Z4(test_tup, Z4):\n    '''\n    Write a function to check if the given tuples contain the z4 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z4] == test_tup[i+1][Z4]:\n            return False\n    return True\n    \ndef check_Z5(test_tup, Z5):\n    '''\n    Write a function to check if the given tuples contain the z5 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z5] == test_tup[i+1][Z5]:\n            return False\n    return True\n    \ndef check_Z6(test_tup, Z6):\n    '''\n    Write a function to check if the given tuples contain the z6 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z6] == test_tup[i+1][Z6]:\n            return False\n    return True\n    \ndef check_Z7(test_tup, Z7):\n    '''\n    Write a function to check if the given tuples contain the z7 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z7] == test_tup[i+1][Z7]:\n            return False\n    return True\n    \ndef check_Z8(test_tup, Z8):\n    '''\n    Write a function to check if the given tuples contain the z8 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z8] == test_tup[i+1][Z8]:\n            return False\n    return True\n    \ndef check_Z9(test_tup, Z9):\n    '''\n    Write a function to check if the given tuples contain the z9 or not.\n    '''\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i][Z9] == test_tup[i+1][Z9]:\n            return False\n    retur"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    i = 0\n    for tup in test_tup:\n        if i >= K:\n            return False\n        if tup not in test_tup:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K <= len(test_tup[0]) and K >= 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in test_tup:\n        if i not in K:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x in test_tup1:\n        if x < test_tup2[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    i = 0\n    for num in test_tup2:\n        if test_tup2[i] < num:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    check_list1 = []\n    check_list2 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            check_list1.append(test_tup1[i])\n            check_list2.append(test_tup2[i])\n        elif test_tup1[i] > test_tup2[i]:\n            check_list1.append(test_tup1[i])\n            check_list2.append(test_tup2[i])\n    return check_list1, check_list2\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup2[0] < test_tup1[0]) and (test_tup2[1] < test_tup1[1])\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x, y in zip(test_tup1, test_tup2):\n        if x < y:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        return 'False'\n    elif(test_tup1[0] >= test_tup2[0]):\n        return 'False'\n    elif(test_tup1[1] < test_tup2[1]):\n        return 'False'\n    else:\n        return 'True'\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    }
]